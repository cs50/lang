1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:02,640
ZAMYLA CHAN: Det er en-mig, Zamyla.

3
00:00:02,640 --> 00:00:06,950
I dag, vil vi gennemføre
Mario, hvor vi trækker Mario

4
00:00:06,950 --> 00:00:10,730
en fuld pyramide for ham at hoppe over.

5
00:00:10,730 --> 00:00:14,430
Lad os nedbryde
delopgaver på dette problem.

6
00:00:14,430 --> 00:00:17,930
>> Først vil vi bede brugeren
for højden af ​​pyramiden.

7
00:00:17,930 --> 00:00:20,510
Og så ønsker vi at sikre,
at denne indgang er gyldig.

8
00:00:20,510 --> 00:00:23,280
Og så vil vi
vil tegne pyramiden.

9
00:00:23,280 --> 00:00:26,850
>> Så lad os tale om at spørge
og validering brugerinput.

10
00:00:26,850 --> 00:00:29,920
Det kunne se ud som
dette, en gør-while-løkke, der

11
00:00:29,920 --> 00:00:33,250
beder brugeren om en
heltal og derefter kun gentagelser

12
00:00:33,250 --> 00:00:35,700
hvis denne heltal er ugyldigt.

13
00:00:35,700 --> 00:00:38,220
Så hvad skal denne betingelse være?

14
00:00:38,220 --> 00:00:40,630
>> For dette, lad os gå tilbage
til specifikationen.

15
00:00:40,630 --> 00:00:46,240
Nå, spec fortæller os, at en gyldig
højde vil være mellem 0 og 23,

16
00:00:46,240 --> 00:00:47,350
inklusive.

17
00:00:47,350 --> 00:00:51,400
Så det betyder, at enhver ugyldig
højde bliver mindre end 0

18
00:00:51,400 --> 00:00:53,840
eller mere end 23.

19
00:00:53,840 --> 00:00:57,220
>> Så nu, at vi har disse oplysninger,
lad os designe vores tilstand.

20
00:00:57,220 --> 00:00:59,230
Men vi er nødt til at være forsigtige,
fordi vi nu har

21
00:00:59,230 --> 00:01:02,130
to Booleans som vi ønsker at evaluere.

22
00:01:02,130 --> 00:01:04,150
>> Her har jeg givet dig
med en sandhed bord.

23
00:01:04,150 --> 00:01:07,520
Dette giver os mulighed for at tage to
Booleans, Boolean et og to.

24
00:01:07,520 --> 00:01:13,600
Og vi kan evaluere enten bool1
og bool2 eller bool1 eller bool2.

25
00:01:13,600 --> 00:01:17,390
>> Så hvad er forskellen
mellem og og eller?

26
00:01:17,390 --> 00:01:21,810
Nå, bool1 og bool2 vil
evalueres til sand, hvis og kun

27
00:01:21,810 --> 00:01:25,680
hvis begge Booleans er sande,
hvorimod eller drift

28
00:01:25,680 --> 00:01:30,190
vil være tilfældet, hvis den ene af
de Booleans eller begge er sande.

29
00:01:30,190 --> 00:01:33,110
Så med dette i tankerne,
se om du kan finde ud af

30
00:01:33,110 --> 00:01:37,460
hvad den korrekte tilstand for
din gør-mens loop for en ugyldig n

31
00:01:37,460 --> 00:01:38,850
det vil blive.

32
00:01:38,850 --> 00:01:43,540
>> Med det har vi spurgt og valideret
brugeren for højden af ​​pyramiden

33
00:01:43,540 --> 00:01:44,550
at de ønsker.

34
00:01:44,550 --> 00:01:47,740
Så nu er det op til os
at tegne pyramiden.

35
00:01:47,740 --> 00:01:50,520
Den fulde pyramide for dette
problem vil se en lille smule

36
00:01:50,520 --> 00:01:56,340
som dette, hvor vi har en venstre pyramide,
nogle hul, og derefter en ret pyramide.

37
00:01:56,340 --> 00:01:58,630
Så lad os opdele det en lille smule.

38
00:01:58,630 --> 00:02:03,510
>> Hvis jeg går til min tekst editor, her har jeg
trukket os en venstre-justeret pyramide.

39
00:02:03,510 --> 00:02:05,160
Men det vil ikke gøre.

40
00:02:05,160 --> 00:02:10,139
Det, vi ønsker, er at vi ønsker at
skabe en højrestillet pyramide først.

41
00:02:10,139 --> 00:02:13,580
Så for at gøre dette, bare skubbe
mine hashes langs til siden,

42
00:02:13,580 --> 00:02:18,240
Jeg bare at sætte nogle tegn
derimellem, blot disse prikker.

43
00:02:18,240 --> 00:02:22,560
Så jeg har tænkt mig at sætte to på den
næste linje, og en på denne linje.

44
00:02:22,560 --> 00:02:26,070
Og så her jeg har en
højrestillet pyramide.

45
00:02:26,070 --> 00:02:28,540
>> Efter dette, vil jeg
gå tilbage til den øverste række

46
00:02:28,540 --> 00:02:33,930
og sat i hullet, som
er, pr spec, to rum.

47
00:02:33,930 --> 00:02:37,680
Så jeg har tænkt mig at udfylde
anden side af pyramiden.

48
00:02:37,680 --> 00:02:42,030
Jeg har tænkt mig at gå til den anden række, skriver
to pladser til hullet og derefter to

49
00:02:42,030 --> 00:02:42,920
hashes.

50
00:02:42,920 --> 00:02:47,020
Tilbage til den tredje række, to rum
for hullet og tre hashes.

51
00:02:47,020 --> 00:02:51,480
Og i slutningen, to rum
for hullet og fire hashes.

52
00:02:51,480 --> 00:02:54,400
Så det er hvad en fuld
pyramide vil se ud.

53
00:02:54,400 --> 00:02:57,260
>> Selvfølgelig ønsker vi ikke
Disse prikker i vejen.

54
00:02:57,260 --> 00:03:01,220
Så vi kommer til at erstatte disse
prikker ved at sætte nogle mellemrum i.

55
00:03:01,220 --> 00:03:03,720
En, to, tre på den første linje.

56
00:03:03,720 --> 00:03:05,650
En, to på andet.

57
00:03:05,650 --> 00:03:08,200
Og en på tredje linje.

58
00:03:08,200 --> 00:03:12,060
Så dette er, hvad vi ville gøre, hvis vi
ville bare lave en fuld pyramide,

59
00:03:12,060 --> 00:03:13,700
siger, i vores tekst editor.

60
00:03:13,700 --> 00:03:15,860
>> Så lad os tage dette,
forstå de mønstre,

61
00:03:15,860 --> 00:03:19,870
og konvertere det til nogle pseudokode.

62
00:03:19,870 --> 00:03:24,500
For hver række af pyramiden, vi ønsker
at udskrive venstre pyramide og derefter

63
00:03:24,500 --> 00:03:26,580
hullet og derefter den højre pyramide.

64
00:03:26,580 --> 00:03:30,260
For venstre pyramide, vi udskriver
den nødvendige mængde rum,

65
00:03:30,260 --> 00:03:31,740
efterfulgt af hashes.

66
00:03:31,740 --> 00:03:35,030
Så vi udskriver hullet, der
er blot to pladser hver gang.

67
00:03:35,030 --> 00:03:38,080
Og i den rigtige pyramide, vi udskriver
det nødvendige antal hashes.

68
00:03:38,080 --> 00:03:41,410
>> For anden række, vi gennemførte
den samme nøjagtige proces.

69
00:03:41,410 --> 00:03:44,510
Vi udskrive pladser til venstre
pyramide, den nødvendige mængde

70
00:03:44,510 --> 00:03:49,930
af hashes, hullet, to rum, og
derefter hashes for den rigtige pyramide.

71
00:03:49,930 --> 00:03:52,490
>> Lad os tage fat mønsteret
for venstre pyramide.

72
00:03:52,490 --> 00:03:55,660
Hvis jeg havde, til formål,
i dette eksempel, en højde

73
00:03:55,660 --> 00:03:58,790
af otte ønsket af
bruger, så min første række

74
00:03:58,790 --> 00:04:01,020
ville have en hash og syv rum.

75
00:04:01,020 --> 00:04:03,860
Min anden række ville have
to hashes, seks rum.

76
00:04:03,860 --> 00:04:06,749
Tredje række, tre hashes, fem rum.

77
00:04:06,749 --> 00:04:09,040
Du kan sikkert gøre dette
dig selv for en højde på otte

78
00:04:09,040 --> 00:04:13,470
og bestemme for hver række, hvor mange
hashes og hvor mange pladser, du har brug.

79
00:04:13,470 --> 00:04:16,209
Men hvad vi ønsker at gøre, er
vi ønsker at abstrakt det.

80
00:04:16,209 --> 00:04:22,660
Så jeg spørger dig for n'te række, hvor mange
hashes og hvor mange rum har vi brug for?

81
00:04:22,660 --> 00:04:25,410
>> Nu, da du bestemme
mønster for hvor mange hashes

82
00:04:25,410 --> 00:04:29,920
og hvor mange pladser, du har brug for
enhver n'te række for en given højde,

83
00:04:29,920 --> 00:04:32,910
Husk at være forsigtig
af hvordan du indeksere.

84
00:04:32,910 --> 00:04:37,160
Hvad jeg mener med dette er, at i hverdagen
liv de fleste af os begynde at tælle med én.

85
00:04:37,160 --> 00:04:39,680
Så den første række ville være nummer et.

86
00:04:39,680 --> 00:04:43,620
Og den anden række ville være rækken
nummer to, så videre og så videre.

87
00:04:43,620 --> 00:04:47,620
>> Men i datalogi og
CS50, vi nul-indekseret.

88
00:04:47,620 --> 00:04:50,750
Så vi faktisk begynde at tælle ved nul.

89
00:04:50,750 --> 00:04:54,020
Så den første række ville
være rækken nummer nul.

90
00:04:54,020 --> 00:04:56,640
Og den anden række
ville være rækken nummer et.

91
00:04:56,640 --> 00:05:02,510
Så hvis jeg havde en højde på otte til
min pyramide, så den sidste værdi af n

92
00:05:02,510 --> 00:05:05,850
ville faktisk være syv og ikke otte.

93
00:05:05,850 --> 00:05:07,010
>> Så vær forsigtig med dette.

94
00:05:07,010 --> 00:05:10,750
Og være opmærksom på, når du bestemme
dit mønster, om din nul-indekseret

95
00:05:10,750 --> 00:05:12,360
eller en-indekseret

96
00:05:12,360 --> 00:05:13,070
>> OKAY.

97
00:05:13,070 --> 00:05:15,380
Så nu, at vi har den
mønster for den venstre pyramide,

98
00:05:15,380 --> 00:05:18,650
vi nødt til at bestemme
mønsteret for hullet.

99
00:05:18,650 --> 00:05:20,480
Heldigvis, det er virkelig nemt.

100
00:05:20,480 --> 00:05:22,690
Det er bare altid to rum.

101
00:05:22,690 --> 00:05:25,240
>> Så nu fortsætte vi til højre mønster.

102
00:05:25,240 --> 00:05:27,220
Den første række vil have en hash.

103
00:05:27,220 --> 00:05:28,640
Den anden række, to.

104
00:05:28,640 --> 00:05:29,530
Tredje række, tre.

105
00:05:29,530 --> 00:05:30,790
Så videre og så videre.

106
00:05:30,790 --> 00:05:35,540
Så igen, bestemme for enhver abstrakt
n og enhver højde, hvor mange hashes

107
00:05:35,540 --> 00:05:38,810
og hvor mange rum
hver række skal have.

108
00:05:38,810 --> 00:05:39,700
>> OKAY.

109
00:05:39,700 --> 00:05:45,050
Så vi ved, at for hver række, vi
nødt til at foretage nogle proces.

110
00:05:45,050 --> 00:05:46,600
Hvordan gør vi det?

111
00:05:46,600 --> 00:05:50,440
Nå, bruger vi for-løkke konstruktion,
består af en initialisering,

112
00:05:50,440 --> 00:05:52,310
en tilstand, og en opdatering.

113
00:05:52,310 --> 00:05:54,830
For løkker kan anvendes
at gentage processer.

114
00:05:54,830 --> 00:05:59,610
>> Så siger jeg vil have det til at sige goddag,
verden 50 gange, så er min for løkke

115
00:05:59,610 --> 00:06:03,510
ville se noget som dette, hvor
Jeg initialisere min variabel til nul.

116
00:06:03,510 --> 00:06:06,200
Betingelsen er, at jeg er mindre end 50.

117
00:06:06,200 --> 00:06:09,670
Og derefter opdateringen er, at det
intervaller med én hver gang.

118
00:06:09,670 --> 00:06:14,700
Så hvad det ville gøre ville være at
udskrive hej, verdens 50 gange i træk.

119
00:06:14,700 --> 00:06:18,080
>> Nu siger jeg ønskede at gentage
over højden af ​​pyramiden.

120
00:06:18,080 --> 00:06:21,560
Så i stedet for permanent at kode
vis værdi i den tilstand,

121
00:06:21,560 --> 00:06:23,280
Jeg bare bruge den variabel højde.

122
00:06:23,280 --> 00:06:27,180
Så hvad det vil gøre, er iterate
over højden hver række.

123
00:06:27,180 --> 00:06:30,280
Og jeg kan gøre noget indeni
af kroppen af ​​denne sløjfe.

124
00:06:30,280 --> 00:06:32,710
>> Hvad vil vi gøre
inde i kroppen af ​​løkken?

125
00:06:32,710 --> 00:06:36,550
Nå, som vi angivet før, vi ønsker
at udskrive rum og hashes

126
00:06:36,550 --> 00:06:40,730
for venstre pyramide og derefter udskrive
to rum og derefter udskrive hashes.

127
00:06:40,730 --> 00:06:42,500
Så vi har allerede regnet det ud.

128
00:06:42,500 --> 00:06:45,670
Så vi kan begynde at fylde
i vores program en masse mere.

129
00:06:45,670 --> 00:06:49,850
>> Her har jeg en ydre for-løkke, der
gentager end hver række i pyramiden.

130
00:06:49,850 --> 00:06:53,340
Og inde dette organ jeg har tænkt mig
at udskrive mellemrum gentagne gange,

131
00:06:53,340 --> 00:06:56,860
hashes gentagne gange, og derefter hullet,
og derefter hashes for retten pyramide,

132
00:06:56,860 --> 00:07:00,440
og derefter endelig en ny
linje for at starte den næste række.

133
00:07:00,440 --> 00:07:02,860
>> Med det har vi bedt
brugeren for input.

134
00:07:02,860 --> 00:07:04,510
Vi har sørget for, at det er gyldigt.

135
00:07:04,510 --> 00:07:06,280
Og så har vi trukket pyramiden.

136
00:07:06,280 --> 00:07:09,540
Så Mario kan med held
klatre pyramiden.

137
00:07:09,540 --> 00:07:10,970
>> Mit navn er Zamyla.

138
00:07:10,970 --> 00:07:13,840
Og det er CS50.

139
00:07:13,840 --> 00:07:15,419

