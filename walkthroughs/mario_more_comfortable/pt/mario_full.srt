1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:02,640
ZAMYLA CHAN: É um-me, Zamyla.

3
00:00:02,640 --> 00:00:06,950
Hoje, nós estamos indo para implementar
Mario, onde traçamos Mario

4
00:00:06,950 --> 00:00:10,730
uma pirâmide cheia para ele pular.

5
00:00:10,730 --> 00:00:14,430
Vamos quebrar o
sub-tarefas para esse problema.

6
00:00:14,430 --> 00:00:17,930
>> Em primeiro lugar, queremos pedir ao utilizador
para a altura da pirâmide.

7
00:00:17,930 --> 00:00:20,510
E então nós queremos ter certeza de
que a referida entrada é válida.

8
00:00:20,510 --> 00:00:23,280
E então nós vamos
Para desenhar a pirâmide.

9
00:00:23,280 --> 00:00:26,850
>> Então, vamos falar sobre o que levou
e validação de entrada do usuário.

10
00:00:26,850 --> 00:00:29,920
Pode parecer algo como
este, um loop do-while que

11
00:00:29,920 --> 00:00:33,250
solicita que o usuário para um
inteiros e, em seguida, apenas repete

12
00:00:33,250 --> 00:00:35,700
Se esse inteiro é inválido.

13
00:00:35,700 --> 00:00:38,220
Então, o que esta condição seja?

14
00:00:38,220 --> 00:00:40,630
>> Para isso, vamos voltar
com a especificação.

15
00:00:40,630 --> 00:00:46,240
Bem, a especificação diz-nos que qualquer válidos
altura vai situar-se entre 0 e 23,

16
00:00:46,240 --> 00:00:47,350
inclusivo.

17
00:00:47,350 --> 00:00:51,400
Então, em seguida, isso significa que qualquer inválido
altura vai ser menor do que 0

18
00:00:51,400 --> 00:00:53,840
ou mais do que 23.

19
00:00:53,840 --> 00:00:57,220
>> Portanto, agora que temos esta informação,
vamos projetar a nossa condição.

20
00:00:57,220 --> 00:00:59,230
Mas precisamos ter cuidado,
porque agora temos

21
00:00:59,230 --> 00:01:02,130
dois Booleans que deseja avaliar.

22
00:01:02,130 --> 00:01:04,150
>> Aqui eu tenho desde que você
com uma mesa de verdade.

23
00:01:04,150 --> 00:01:07,520
Isto permite-nos levar de dois
Booleans, Boolean um e dois.

24
00:01:07,520 --> 00:01:13,600
E podemos avaliar tanto bool1
e bool2 ou bool1 ou bool2.

25
00:01:13,600 --> 00:01:17,390
>> Então, qual é a diferença
entre AND e OR?

26
00:01:17,390 --> 00:01:21,810
Bem, bool1 e bool2 vai
avaliar a verdade se e somente

27
00:01:21,810 --> 00:01:25,680
se os Booleanos são verdadeiras,
Considerando que o ou operação

28
00:01:25,680 --> 00:01:30,190
será verdadeiro se qualquer um dos
os Booleans ou ambas são verdadeiras.

29
00:01:30,190 --> 00:01:33,110
Então, com isso em mente,
veja se você pode descobrir

30
00:01:33,110 --> 00:01:37,460
o que a condição adequada para
o loop do-while para um n inválida

31
00:01:37,460 --> 00:01:38,850
vai ser.

32
00:01:38,850 --> 00:01:43,540
>> Com isso, temos solicitado e validado
o usuário para a altura da pirâmide

33
00:01:43,540 --> 00:01:44,550
que eles querem.

34
00:01:44,550 --> 00:01:47,740
Então, agora, cabe a nós
para desenhar a pirâmide.

35
00:01:47,740 --> 00:01:50,520
A pirâmide total para este
problema vai olhar um pouco

36
00:01:50,520 --> 00:01:56,340
como este, onde nós temos uma pirâmide esquerda,
alguma lacuna, e depois uma pirâmide direita.

37
00:01:56,340 --> 00:01:58,630
Então, vamos decompô-lo um pouco.

38
00:01:58,630 --> 00:02:03,510
>> Se eu ir para o meu editor de texto, aqui eu tenho
elaborado nos uma pirâmide alinhado à esquerda.

39
00:02:03,510 --> 00:02:05,160
Mas isso não vai fazer.

40
00:02:05,160 --> 00:02:10,139
O que nós queremos fazer é que nós queremos
criar uma pirâmide alinhado à direita em primeiro lugar.

41
00:02:10,139 --> 00:02:13,580
Então, para fazer isso, para apenas empurrar
meus hashes ao longo do lado,

42
00:02:13,580 --> 00:02:18,240
Eu só vou colocar alguns caracteres
entre elas, apenas esses pontos.

43
00:02:18,240 --> 00:02:22,560
Então eu vou colocar dois no
próxima linha, e um nessa linha.

44
00:02:22,560 --> 00:02:26,070
E aqui eu tenho um
pirâmide alinhado à direita.

45
00:02:26,070 --> 00:02:28,540
>> Depois disso, eu vou
voltar para a linha superior

46
00:02:28,540 --> 00:02:33,930
e colocar na brecha, que
é, por especificação, dois espaços.

47
00:02:33,930 --> 00:02:37,680
Então eu vou para preencher o
outro lado da pirâmide.

48
00:02:37,680 --> 00:02:42,030
Eu estou indo para ir para a segunda linha, escrever
dois espaços para a abertura e, em seguida, dois

49
00:02:42,030 --> 00:02:42,920
hashes.

50
00:02:42,920 --> 00:02:47,020
Voltar para a terceira fila, dois lugares
para o fosso e três hashes.

51
00:02:47,020 --> 00:02:51,480
E no final, dois lugares
para o fosso e quatro hashes.

52
00:02:51,480 --> 00:02:54,400
Então, isso é o que um completo
pirâmide será semelhante.

53
00:02:54,400 --> 00:02:57,260
>> Claro, não queremos
Estes pontos no caminho.

54
00:02:57,260 --> 00:03:01,220
Então, nós estamos indo para substituí-los
pontos, colocando alguns espaços no.

55
00:03:01,220 --> 00:03:03,720
Uma, duas, três na primeira linha.

56
00:03:03,720 --> 00:03:05,650
Um, dois no segundo.

57
00:03:05,650 --> 00:03:08,200
E um na terceira linha.

58
00:03:08,200 --> 00:03:12,060
Então é isso que nós faríamos se nós
queria apenas fazer uma pirâmide completa,

59
00:03:12,060 --> 00:03:13,700
dizer, no nosso editor de texto.

60
00:03:13,700 --> 00:03:15,860
>> Portanto, vamos ter isso,
compreender os padrões,

61
00:03:15,860 --> 00:03:19,870
e convertê-lo sobre a alguns pseudocódigo.

62
00:03:19,870 --> 00:03:24,500
Para cada linha da pirâmide, queremos
para imprimir a pirâmide para a esquerda e em seguida

63
00:03:24,500 --> 00:03:26,580
a abertura e, em seguida, a pirâmide direita.

64
00:03:26,580 --> 00:03:30,260
Para a pirâmide esquerda, nós imprimimos
a quantidade necessária de espaços,

65
00:03:30,260 --> 00:03:31,740
seguido pelos hashes.

66
00:03:31,740 --> 00:03:35,030
Em seguida, imprimir o fosso, que
está a apenas dois espaços cada vez.

67
00:03:35,030 --> 00:03:38,080
E na pirâmide direita, nós imprimimos
o número necessário de hashes.

68
00:03:38,080 --> 00:03:41,410
>> Para a segunda fila, realizamos
exatamente o mesmo processo.

69
00:03:41,410 --> 00:03:44,510
Nós imprimir os espaços para a esquerda
pirâmide, a quantidade necessária

70
00:03:44,510 --> 00:03:49,930
de hashes, a lacuna, dois espaços e
em seguida, os hashes de pirâmide direita.

71
00:03:49,930 --> 00:03:52,490
>> Vamos abordar o padrão
para a esquerda pirâmide.

72
00:03:52,490 --> 00:03:55,660
Se eu tivesse, para fins
deste exemplo, uma altura

73
00:03:55,660 --> 00:03:58,790
de oito solicitado pelo
usuário, então a minha primeira linha

74
00:03:58,790 --> 00:04:01,020
teria um haxixe e sete espaços.

75
00:04:01,020 --> 00:04:03,860
Minha segunda linha teria
dois hashes, seis espaços.

76
00:04:03,860 --> 00:04:06,749
Terceira fila, três hashes, cinco espaços.

77
00:04:06,749 --> 00:04:09,040
Você provavelmente pode fazer isso
-se para uma altura de oito

78
00:04:09,040 --> 00:04:13,470
e determinar para cada linha quantas
hashes e quantos espaços você precisa.

79
00:04:13,470 --> 00:04:16,209
Mas o que nós queremos fazer é
queremos abstrato-lo.

80
00:04:16,209 --> 00:04:22,660
Então eu lhe pergunto para qualquer enésima linha, quantas
hashes e quantos espaços que precisamos?

81
00:04:22,660 --> 00:04:25,410
>> Agora, como você determinar o
padrão de como muitas hashes

82
00:04:25,410 --> 00:04:29,920
e quantos espaços você precisa para
qualquer linha enésima para uma dada altura,

83
00:04:29,920 --> 00:04:32,910
lembre-se que ter cuidado
de como você está indexando.

84
00:04:32,910 --> 00:04:37,160
O que quero dizer com isto é que em todos os dias
vida a maioria de nós começar a contagem por um.

85
00:04:37,160 --> 00:04:39,680
Então, a primeira linha seria o número um.

86
00:04:39,680 --> 00:04:43,620
E a segunda ordem seria fileira
número de dois, assim por diante e assim por diante.

87
00:04:43,620 --> 00:04:47,620
>> Mas em ciência da computação e
CS50, estamos zero indexado.

88
00:04:47,620 --> 00:04:50,750
Então, nós realmente começar a contar do zero.

89
00:04:50,750 --> 00:04:54,020
Então, a primeira linha seria
ser número da linha zero.

90
00:04:54,020 --> 00:04:56,640
E a segunda fila
Seria número da linha um.

91
00:04:56,640 --> 00:05:02,510
Então, se eu tinha uma altura de oito para
minha pirâmide, em seguida, o último valor de n

92
00:05:02,510 --> 00:05:05,850
na verdade seria de sete e não oito.

93
00:05:05,850 --> 00:05:07,010
>> Portanto, tenha cuidado com isso.

94
00:05:07,010 --> 00:05:10,750
E estar ciente quando você está determinando
seu padrão se o seu zero indexado

95
00:05:10,750 --> 00:05:12,360
ou um indexados

96
00:05:12,360 --> 00:05:13,070
>> ESTÁ BEM.

97
00:05:13,070 --> 00:05:15,380
Portanto, agora que temos a
padrão para a pirâmide esquerda,

98
00:05:15,380 --> 00:05:18,650
precisamos determinar
o padrão para a abertura.

99
00:05:18,650 --> 00:05:20,480
Felizmente, isso é muito fácil.

100
00:05:20,480 --> 00:05:22,690
É apenas sempre dois espaços.

101
00:05:22,690 --> 00:05:25,240
>> Então agora vamos para o padrão correto.

102
00:05:25,240 --> 00:05:27,220
A primeira linha terá um hash.

103
00:05:27,220 --> 00:05:28,640
A segunda linha, dois.

104
00:05:28,640 --> 00:05:29,530
Terceira fila, três.

105
00:05:29,530 --> 00:05:30,790
Assim por diante e assim por diante.

106
00:05:30,790 --> 00:05:35,540
Então, novamente, determinar para qualquer abstract
n e qualquer altura quantas hash

107
00:05:35,540 --> 00:05:38,810
e como muitos espaços
cada linha deve ter.

108
00:05:38,810 --> 00:05:39,700
>> ESTÁ BEM.

109
00:05:39,700 --> 00:05:45,050
Então, nós sabemos que, para cada um de nós fileira
precisa para conduzir algum processo.

110
00:05:45,050 --> 00:05:46,600
Como fazemos isso?

111
00:05:46,600 --> 00:05:50,440
Bem, nós usamos a para construção de loop,
composta de uma inicialização,

112
00:05:50,440 --> 00:05:52,310
uma condição, e uma actualização.

113
00:05:52,310 --> 00:05:54,830
Para laços podem ser utilizados
repetir os processos.

114
00:05:54,830 --> 00:05:59,610
>> Então, digamos que eu quero dizer Olá,
mundo 50 vezes, então a minha loop

115
00:05:59,610 --> 00:06:03,510
seria algo parecido com este, onde
Eu inicializar meu variável para zero.

116
00:06:03,510 --> 00:06:06,200
A condição é que i seja inferior a 50.

117
00:06:06,200 --> 00:06:09,670
E, em seguida, a actualização é que ele
incrementos em um cada vez.

118
00:06:09,670 --> 00:06:14,700
Então, o que isso iria fazer seria
imprimir Olá, mundo 50 vezes em uma fileira.

119
00:06:14,700 --> 00:06:18,080
>> Agora, digamos que eu queria fazer uma iteração
ao longo da altura da pirâmide.

120
00:06:18,080 --> 00:06:21,560
Em seguida, em vez de codificação duro
algum valor na condição,

121
00:06:21,560 --> 00:06:23,280
Eu só uso a altura variável.

122
00:06:23,280 --> 00:06:27,180
Então, o que isto vai fazer é iterate
ao longo da altura cada linha.

123
00:06:27,180 --> 00:06:30,280
E eu posso fazer algo dentro
do corpo do referido circuito.

124
00:06:30,280 --> 00:06:32,710
>> O que nós queremos fazer
no interior do corpo do loop?

125
00:06:32,710 --> 00:06:36,550
Bem, como indicado antes, nós queremos
para imprimir os espaços e os hashes

126
00:06:36,550 --> 00:06:40,730
para a pirâmide esquerda e, em seguida, imprima
dois espaços e, em seguida, imprimir os hashes.

127
00:06:40,730 --> 00:06:42,500
Então, nós já descobriu isso.

128
00:06:42,500 --> 00:06:45,670
Assim, podemos começar a preencher
em nosso programa muito mais.

129
00:06:45,670 --> 00:06:49,850
>> Aqui eu tenho um externa para loop que
itera sobre cada linha na pirâmide.

130
00:06:49,850 --> 00:06:53,340
E dentro daquele corpo eu vou
para imprimir espaços repetidamente,

131
00:06:53,340 --> 00:06:56,860
hash repetidamente, e, em seguida, a abertura,
e depois hashes para a pirâmide direita,

132
00:06:56,860 --> 00:07:00,440
e, em seguida, finalmente, uma nova
linha para iniciar a próxima linha.

133
00:07:00,440 --> 00:07:02,860
>> Com isso, temos solicitado
o usuário para a entrada.

134
00:07:02,860 --> 00:07:04,510
Temos a certeza de que é válido.

135
00:07:04,510 --> 00:07:06,280
E então, temos traçada a pirâmide.

136
00:07:06,280 --> 00:07:09,540
Então, Mario pode com sucesso
subir a pirâmide.

137
00:07:09,540 --> 00:07:10,970
>> Meu nome é Zamyla.

138
00:07:10,970 --> 00:07:13,840
E este é CS50.

139
00:07:13,840 --> 00:07:15,419

