1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:02,640
ZAMYLA чан: Это-я, Zamyla.

3
00:00:02,640 --> 00:00:06,950
Сегодня мы собираемся реализовать
Марио, где мы черпаем Марио

4
00:00:06,950 --> 00:00:10,730
полная пирамида для него перепрыгнуть.

5
00:00:10,730 --> 00:00:14,430
Давайте разберем вниз
подзадачи для этой задачи.

6
00:00:14,430 --> 00:00:17,930
>> Во-первых, мы хотим подсказать пользователю
для высоты пирамиды.

7
00:00:17,930 --> 00:00:20,510
И тогда мы хотим, чтобы убедиться,
что этот вход активен.

8
00:00:20,510 --> 00:00:23,280
И тогда мы будем
хотим нарисовать пирамиду.

9
00:00:23,280 --> 00:00:26,850
>> Итак, давайте поговорим о побуждая
и проверки ввода данных пользователем.

10
00:00:26,850 --> 00:00:29,920
Это может выглядеть примерно так
это, петля делать-то время

11
00:00:29,920 --> 00:00:33,250
запрашивает у пользователя для
целое число, а затем только повторы

12
00:00:33,250 --> 00:00:35,700
если это число является недействительным.

13
00:00:35,700 --> 00:00:38,220
Так что же это условие будет?

14
00:00:38,220 --> 00:00:40,630
>> Для этого, давайте вернемся
спецификации.

15
00:00:40,630 --> 00:00:46,240
Ну, спецификация говорит нам, что любое действительное
высота будет находиться в диапазоне от 0 до 23,

16
00:00:46,240 --> 00:00:47,350
включительно.

17
00:00:47,350 --> 00:00:51,400
Итак, что означает, что любой инвалид
высота будет меньше 0

18
00:00:51,400 --> 00:00:53,840
или более 23.

19
00:00:53,840 --> 00:00:57,220
>> Так что теперь у нас есть эта информация,
давайте разрабатывать наше состояние.

20
00:00:57,220 --> 00:00:59,230
Но мы должны быть осторожными,
потому что теперь у нас есть

21
00:00:59,230 --> 00:01:02,130
два Booleans, которые мы хотим оценить.

22
00:01:02,130 --> 00:01:04,150
>> Здесь я предоставил вам
с таблицей истинности.

23
00:01:04,150 --> 00:01:07,520
Это позволяет нам сделать два
Булев, Boolean один и два.

24
00:01:07,520 --> 00:01:13,600
И мы можем оценить либо bool1
и bool2 или bool1 или bool2.

25
00:01:13,600 --> 00:01:17,390
>> Так какая разница
и между ними и или?

26
00:01:17,390 --> 00:01:21,810
Ну, bool1 и bool2 будет
оценить истинно, если и только

27
00:01:21,810 --> 00:01:25,680
если оба Булев верны,
в то время как операции или

28
00:01:25,680 --> 00:01:30,190
будет справедливо, если любой из
то Booleans или оба они истинны.

29
00:01:30,190 --> 00:01:33,110
Так с этим в виду,
увидеть, если вы можете выяснить,

30
00:01:33,110 --> 00:01:37,460
что соответствующее условие
ваш цикл делать-а для инвалидной п

31
00:01:37,460 --> 00:01:38,850
будет.

32
00:01:38,850 --> 00:01:43,540
>> С этими словами, мы будет предложено и подтверждено
пользователь для высоты пирамиды

33
00:01:43,540 --> 00:01:44,550
что они хотят.

34
00:01:44,550 --> 00:01:47,740
Так что теперь, это до нас
нарисовать пирамиду.

35
00:01:47,740 --> 00:01:50,520
Полная пирамида для этого
Проблема будет выглядеть немного

36
00:01:50,520 --> 00:01:56,340
как это, где мы имеем левую пирамиду,
некоторый зазор, а затем правой пирамиды.

37
00:01:56,340 --> 00:01:58,630
Так что давайте сломаем это вниз немного.

38
00:01:58,630 --> 00:02:03,510
>> Если я иду в текстовом редакторе, здесь я имею
обращается нам по левому краю пирамиды.

39
00:02:03,510 --> 00:02:05,160
Но это не будет делать.

40
00:02:05,160 --> 00:02:10,139
То, что мы хотим сделать, это мы хотим
создать выравнивание по правому краю пирамиды в первую очередь.

41
00:02:10,139 --> 00:02:13,580
Таким образом, чтобы сделать это, чтобы просто нажать
мои хэши вместе в сторону,

42
00:02:13,580 --> 00:02:18,240
Я просто хочу, чтобы поставить некоторые символы
между ними, только этими точками.

43
00:02:18,240 --> 00:02:22,560
Тогда я собираюсь поставить два на
следующая строка, и один на этой линии.

44
00:02:22,560 --> 00:02:26,070
И вот здесь у меня есть
выравнивание по правому краю пирамиды.

45
00:02:26,070 --> 00:02:28,540
>> После этого, я собираюсь
вернуться к верхней строке

46
00:02:28,540 --> 00:02:33,930
и поместить в зазоре, который
это, согласно спецификации, два пространства.

47
00:02:33,930 --> 00:02:37,680
Тогда я буду играть в
другая сторона пирамиды.

48
00:02:37,680 --> 00:02:42,030
Я собираюсь пойти на второй ряд, написать
два пространства для зазора, а затем два

49
00:02:42,030 --> 00:02:42,920
хэши.

50
00:02:42,920 --> 00:02:47,020
Назад к третьему ряду, два пространства
для щели и трех хэшей.

51
00:02:47,020 --> 00:02:51,480
И в конце, два пространства
для щели и четырех хэшей.

52
00:02:51,480 --> 00:02:54,400
Так вот что полный
пирамида будет выглядеть следующим образом.

53
00:02:54,400 --> 00:02:57,260
>> Конечно, мы не хотим
эти точки в пути.

54
00:02:57,260 --> 00:03:01,220
Итак, мы собираемся заменить эти
точки, поставив некоторые пробелы в.

55
00:03:01,220 --> 00:03:03,720
Один, два, три на первой линии.

56
00:03:03,720 --> 00:03:05,650
Один, два на втором.

57
00:03:05,650 --> 00:03:08,200
И один на третьей строчке.

58
00:03:08,200 --> 00:03:12,060
Так это то, что мы будем делать, если мы
хотел просто сделать полную пирамиду,

59
00:03:12,060 --> 00:03:13,700
скажем, в нашем текстовом редакторе.

60
00:03:13,700 --> 00:03:15,860
>> Так давайте возьмем это,
понимания моделей,

61
00:03:15,860 --> 00:03:19,870
и преобразовать его к какой-то псевдокоде.

62
00:03:19,870 --> 00:03:24,500
Для каждой строки пирамиды, мы хотим
напечатать левую пирамиду, а затем

63
00:03:24,500 --> 00:03:26,580
разрыв, а затем правая пирамида.

64
00:03:26,580 --> 00:03:30,260
Для левой пирамиды, мы выводим
необходимое количество пробелов,

65
00:03:30,260 --> 00:03:31,740
с последующим хэшей.

66
00:03:31,740 --> 00:03:35,030
Затем мы выводим пробел, который
всего два места каждый раз.

67
00:03:35,030 --> 00:03:38,080
А в правой пирамиды, мы выводим
необходимое количество хэшей.

68
00:03:38,080 --> 00:03:41,410
>> Для второго ряда, мы провели
точно такой же процесс.

69
00:03:41,410 --> 00:03:44,510
Мы печатаем пространства для левого
пирамида, необходимая сумма

70
00:03:44,510 --> 00:03:49,930
хэшей, щели, два пространства, и
то хэши для правой пирамиды.

71
00:03:49,930 --> 00:03:52,490
>> Давайте решать шаблон
для левой пирамиды.

72
00:03:52,490 --> 00:03:55,660
Если бы я был, в целях
в этом примере, высота

73
00:03:55,660 --> 00:03:58,790
восьми с просьбой
пользователь, то моя первая строка

74
00:03:58,790 --> 00:04:01,020
будет иметь один хэш и семь пробелов.

75
00:04:01,020 --> 00:04:03,860
Моя вторая строка будет иметь
два хэши, шесть пространств.

76
00:04:03,860 --> 00:04:06,749
Третий ряд, три хэши, пять пробелов.

77
00:04:06,749 --> 00:04:09,040
Вы, наверное, можете сделать это
сами по высоте восьми

78
00:04:09,040 --> 00:04:13,470
и определяют для каждой строки, сколько
хэши и сколько пространства вам нужно.

79
00:04:13,470 --> 00:04:16,209
Но то, что мы хотим сделать, это
мы хотим, чтобы абстрагировать.

80
00:04:16,209 --> 00:04:22,660
Поэтому я прошу вас для любого п-й строке, то сколько
хэши и сколько пространства нам нужно?

81
00:04:22,660 --> 00:04:25,410
>> Теперь, как вы определяете,
шаблон для того, как много хэшей

82
00:04:25,410 --> 00:04:29,920
и сколько пространства вам нужно для
любой п-й строки для заданной высоты,

83
00:04:29,920 --> 00:04:32,910
помните, быть осторожными
как вы индексации.

84
00:04:32,910 --> 00:04:37,160
То, что я имею в виду, что в каждый день
жизнь большинство из нас начинают считать один.

85
00:04:37,160 --> 00:04:39,680
Таким образом, первая строка будет номер один.

86
00:04:39,680 --> 00:04:43,620
И вторая строка будет строка
номер два, так далее и так далее.

87
00:04:43,620 --> 00:04:47,620
>> Но в компьютерной науке и
CS50, мы нулевой индексируется.

88
00:04:47,620 --> 00:04:50,750
Таким образом, мы на самом деле начать отсчет с нуля.

89
00:04:50,750 --> 00:04:54,020
Таким образом, первая строка будет
быть строка с номером ноль.

90
00:04:54,020 --> 00:04:56,640
И второй ряд
будет строка номер один.

91
00:04:56,640 --> 00:05:02,510
Так что, если бы я имел высоту восемь для
моя пирамида, то последнее значение п

92
00:05:02,510 --> 00:05:05,850
фактически будет семь, а не восемь.

93
00:05:05,850 --> 00:05:07,010
>> Так что будьте осторожны об этом.

94
00:05:07,010 --> 00:05:10,750
И быть в курсе, когда вы определения
ваш шаблон ли ваш нулевой индексируется

95
00:05:10,750 --> 00:05:12,360
или один индексированные

96
00:05:12,360 --> 00:05:13,070
>> ОК.

97
00:05:13,070 --> 00:05:15,380
Так что теперь у нас есть
шаблон для левой пирамиды,

98
00:05:15,380 --> 00:05:18,650
нам необходимо определить
шаблон для зазора.

99
00:05:18,650 --> 00:05:20,480
К счастью, это очень легко.

100
00:05:20,480 --> 00:05:22,690
Это просто всегда два пространства.

101
00:05:22,690 --> 00:05:25,240
>> Так что теперь мы переходим к правильному шаблону.

102
00:05:25,240 --> 00:05:27,220
Первая строка будет иметь один хэш.

103
00:05:27,220 --> 00:05:28,640
Второй ряд, два.

104
00:05:28,640 --> 00:05:29,530
Третий ряд, три.

105
00:05:29,530 --> 00:05:30,790
Так далее и тому подобное.

106
00:05:30,790 --> 00:05:35,540
Так опять же, определить для любой абстрактной
п и любой высоты, сколько хэши

107
00:05:35,540 --> 00:05:38,810
и сколько пробелов
каждая строка должна иметь.

108
00:05:38,810 --> 00:05:39,700
>> ОК.

109
00:05:39,700 --> 00:05:45,050
Итак, мы знаем, что для каждой строки мы
необходимо провести какой-то процесс.

110
00:05:45,050 --> 00:05:46,600
Как мы это делаем?

111
00:05:46,600 --> 00:05:50,440
Что ж, мы используем для конструкции петли,
состоит из инициализации,

112
00:05:50,440 --> 00:05:52,310
состояние и обновление.

113
00:05:52,310 --> 00:05:54,830
Для петли могут быть использованы
повторить процессы.

114
00:05:54,830 --> 00:05:59,610
>> Так что сказать, что я хочу сказать привет,
мир в 50 раз, а затем мой цикл

115
00:05:59,610 --> 00:06:03,510
будет выглядеть примерно так, где
Я инициализировать моей переменной к нулю.

116
00:06:03,510 --> 00:06:06,200
Условием является то, что я меньше 50.

117
00:06:06,200 --> 00:06:09,670
А потом обновление что это
увеличивается на единицу каждый раз.

118
00:06:09,670 --> 00:06:14,700
Так что же это сделать было бы
печать Привет, мир 50 раз подряд.

119
00:06:14,700 --> 00:06:18,080
>> Теперь предположим, что я хотел итерацию
по высоте пирамиды.

120
00:06:18,080 --> 00:06:21,560
Тогда вместо жесткого кодирования
некоторое значение в состоянии,

121
00:06:21,560 --> 00:06:23,280
Я просто использовать переменную высоту.

122
00:06:23,280 --> 00:06:27,180
Так что же это будет делать это итерация
по высоте каждой строки.

123
00:06:27,180 --> 00:06:30,280
И я могу сделать что-то внутри
тела этого цикла.

124
00:06:30,280 --> 00:06:32,710
>> Что мы хотим сделать
внутри тела цикла?

125
00:06:32,710 --> 00:06:36,550
Ну, как мы уже отмечали ранее, мы хотим
печатать пробелы и хэши

126
00:06:36,550 --> 00:06:40,730
для левой пирамиды, а затем распечатать
два пробела, а затем распечатать хэшей.

127
00:06:40,730 --> 00:06:42,500
Итак, мы уже поняли, что из.

128
00:06:42,500 --> 00:06:45,670
Таким образом, мы можем начать заполнять
в нашей программе намного больше.

129
00:06:45,670 --> 00:06:49,850
>> Здесь у меня есть внешнее для цикла,
перебирает каждой строки в пирамиде.

130
00:06:49,850 --> 00:06:53,340
И внутри этого тела я собираюсь
печатать пробелы неоднократно,

131
00:06:53,340 --> 00:06:56,860
хешей повторно, а затем разрыв,
а затем хэши для правильной пирамиды,

132
00:06:56,860 --> 00:07:00,440
а затем, наконец, новый
линии, чтобы начать следующий ряд.

133
00:07:00,440 --> 00:07:02,860
>> С этими словами, мы побудили
пользователь для входа.

134
00:07:02,860 --> 00:07:04,510
Мы убедились, что она действует.

135
00:07:04,510 --> 00:07:06,280
И тогда мы нарисовали пирамиду.

136
00:07:06,280 --> 00:07:09,540
Так что Марио может успешно
подняться на пирамиду.

137
00:07:09,540 --> 00:07:10,970
>> Меня зовут Zamyla.

138
00:07:10,970 --> 00:07:13,840
И это CS50.

139
00:07:13,840 --> 00:07:15,419

