1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:02,640
ZAMYLA CHAN: És una-me, Zamyla.

3
00:00:02,640 --> 00:00:06,950
Avui en dia, anem a posar en pràctica
Mario, on dibuixem Mario

4
00:00:06,950 --> 00:00:10,730
una piràmide completa per a ell per saltar per sobre.

5
00:00:10,730 --> 00:00:14,430
Anem a trencar el
sub-tasques per a aquest problema.

6
00:00:14,430 --> 00:00:17,930
>> En primer lloc, volem demanar a l'usuari
per a l'altura de la piràmide.

7
00:00:17,930 --> 00:00:20,510
I després volem per assegurar
que aquesta entrada és vàlida.

8
00:00:20,510 --> 00:00:23,280
I després anem a
vull cridar l'piràmide.

9
00:00:23,280 --> 00:00:26,850
>> Així que anem a parlar que va provocar
i validar l'entrada de l'usuari.

10
00:00:26,850 --> 00:00:29,920
Podria ser alguna cosa com
això, un bucle do-while que

11
00:00:29,920 --> 00:00:33,250
sol·licita a l'usuari una
senceres i després només es repeteix

12
00:00:33,250 --> 00:00:35,700
si aquest nombre sencer no és vàlid.

13
00:00:35,700 --> 00:00:38,220
Llavors, quin hauria de ser aquesta condició?

14
00:00:38,220 --> 00:00:40,630
>> Per a això, anem a tornar
amb l'especificació.

15
00:00:40,630 --> 00:00:46,240
Doncs bé, l'especificació ens diu que qualsevol vàlida
alçada serà entre 0 i 23,

16
00:00:46,240 --> 00:00:47,350
inclusiu.

17
00:00:47,350 --> 00:00:51,400
Així llavors això vol dir que qualsevol invàlida
alçada serà inferior a 0

18
00:00:51,400 --> 00:00:53,840
o més de 23.

19
00:00:53,840 --> 00:00:57,220
>> Així que ara que tenim aquesta informació,
dissenyem la nostra condició.

20
00:00:57,220 --> 00:00:59,230
Però hem de tenir cura,
perquè ara tenim

21
00:00:59,230 --> 00:01:02,130
2 booleans que volem avaluar.

22
00:01:02,130 --> 00:01:04,150
>> Aquí us he proporcionat
amb una taula de veritat.

23
00:01:04,150 --> 00:01:07,520
Això ens permet prendre dues
Booleans, Boolean 01:02.

24
00:01:07,520 --> 00:01:13,600
I podem avaluar des Bool1
i Bool2 o Bool1 o Bool2.

25
00:01:13,600 --> 00:01:17,390
>> Llavors, quin és la diferència
entre AND i OR?

26
00:01:17,390 --> 00:01:21,810
Bé, Bool1 i es Bool2
resultat veritable si i només

27
00:01:21,810 --> 00:01:25,680
si ambdues són certes Booleans,
mentre que el o l'operació

28
00:01:25,680 --> 00:01:30,190
serà veritable si qualsevol de
els Booleans o ambdues són certes.

29
00:01:30,190 --> 00:01:33,110
Així que amb això en ment,
veure si es pot esbrinar

30
00:01:33,110 --> 00:01:37,460
el que la condició apropiada per
el bucle do-while per a un n no vàlid

31
00:01:37,460 --> 00:01:38,850
serà.

32
00:01:38,850 --> 00:01:43,540
>> Amb això, hem incitat i validat
l'usuari per a l'altura de la piràmide

33
00:01:43,540 --> 00:01:44,550
que volen.

34
00:01:44,550 --> 00:01:47,740
Així que ara, li toca a nosaltres
per dibuixar la piràmide.

35
00:01:47,740 --> 00:01:50,520
La piràmide completa per a aquest
problema es veurà una mica

36
00:01:50,520 --> 00:01:56,340
com aquest, en el qual tenim una piràmide esquerra,
alguna distància, i després una piràmide recta.

37
00:01:56,340 --> 00:01:58,630
Així que anem a trencar aquesta avall una mica.

38
00:01:58,630 --> 00:02:03,510
>> Si vaig al meu editor de text, aquí tinc
ens dibuixat una piràmide alineada a l'esquerra.

39
00:02:03,510 --> 00:02:05,160
Però això no va a fer.

40
00:02:05,160 --> 00:02:10,139
El que volem fer és que volem
crear una piràmide alineat a la dreta en primer lloc.

41
00:02:10,139 --> 00:02:13,580
Així que per fer això, simplement empènyer
els meus valors hash al llarg del costat,

42
00:02:13,580 --> 00:02:18,240
Només vaig a posar alguns caràcters
en el medi, només aquests punts.

43
00:02:18,240 --> 00:02:22,560
Llavors em vaig a posar dos al
següent línia, i un en aquesta línia.

44
00:02:22,560 --> 00:02:26,070
I aquí tinc una
piràmide alineat a la dreta.

45
00:02:26,070 --> 00:02:28,540
>> Després d'això, vaig a
tornar a la fila superior

46
00:02:28,540 --> 00:02:33,930
i posar en el buit, el qual
és a dir, per l'especificació, dos espais.

47
00:02:33,930 --> 00:02:37,680
A continuació, vaig a omplir el
altre costat de la piràmide.

48
00:02:37,680 --> 00:02:42,030
Vaig a anar a la segona fila, escric
dos espais de la bretxa i després dos

49
00:02:42,030 --> 00:02:42,920
hashes.

50
00:02:42,920 --> 00:02:47,020
Tornar a la tercera fila, dos espais
de la bretxa i 3 hashes.

51
00:02:47,020 --> 00:02:51,480
I al final, dos espais
de la bretxa i 4 hashes.

52
00:02:51,480 --> 00:02:54,400
Així que això és el que una completa
piràmide es veurà així.

53
00:02:54,400 --> 00:02:57,260
>> Per descomptat, no volem
aquests punts en el camí.

54
00:02:57,260 --> 00:03:01,220
Així que anem a substituir aquests
punts per posar alguns espais en.

55
00:03:01,220 --> 00:03:03,720
Un, dos, tres a la primera línia.

56
00:03:03,720 --> 00:03:05,650
Un, dos en el segon.

57
00:03:05,650 --> 00:03:08,200
I un a la tercera línia.

58
00:03:08,200 --> 00:03:12,060
Així que això és el que faríem si ens
volia fer només una piràmide completa,

59
00:03:12,060 --> 00:03:13,700
dir, en el nostre editor de text.

60
00:03:13,700 --> 00:03:15,860
>> Així que portarem això,
la comprensió dels patrons,

61
00:03:15,860 --> 00:03:19,870
i convertir-lo a alguns pseudocodi.

62
00:03:19,870 --> 00:03:24,500
Per a cada fila de la piràmide, volem
per imprimir la piràmide de l'esquerra i després

63
00:03:24,500 --> 00:03:26,580
la bretxa i després la piràmide recta.

64
00:03:26,580 --> 00:03:30,260
Per a la piràmide esquerra és la impressió de
la quantitat requerida d'espais,

65
00:03:30,260 --> 00:03:31,740
seguit dels valors hash.

66
00:03:31,740 --> 00:03:35,030
Llavors és la impressió de la bretxa, la qual
està a només dos espais cada vegada.

67
00:03:35,030 --> 00:03:38,080
I en la piràmide de la dreta és la impressió de
el nombre requerit de valors hash.

68
00:03:38,080 --> 00:03:41,410
>> Per a la segona fila, es va realitzar
exactament el mateix procés.

69
00:03:41,410 --> 00:03:44,510
Imprimim els espais per a l'esquerra
piràmide, la quantitat requerida

70
00:03:44,510 --> 00:03:49,930
de hash, la bretxa, dos espais, i
a continuació, els hashes de la piràmide de la dreta.

71
00:03:49,930 --> 00:03:52,490
>> Anem a abordar el patró
per la piràmide esquerra.

72
00:03:52,490 --> 00:03:55,660
Si ho hagués fet, per als propòsits
d'aquest exemple, una alçada

73
00:03:55,660 --> 00:03:58,790
de vuit sol·licitat pel
usuari, llavors la meva primera fila

74
00:03:58,790 --> 00:04:01,020
tindria un hash i set espais.

75
00:04:01,020 --> 00:04:03,860
La meva segona fila tindria
2 hash, sis espais.

76
00:04:03,860 --> 00:04:06,749
Tercera fila, tres, cinc places de hashes.

77
00:04:06,749 --> 00:04:09,040
Probablement pot fer això
vostè mateix per a una altura de vuit

78
00:04:09,040 --> 00:04:13,470
i determinarà per a cada fila quants
hashes i el nombre d'espais que necessita.

79
00:04:13,470 --> 00:04:16,209
Però el que volem fer és
volem abstracte ella.

80
00:04:16,209 --> 00:04:22,660
Així que et demano per a qualsevol fila n, el nombre de
hashes i quants espais necessitem?

81
00:04:22,660 --> 00:04:25,410
>> Ara, mentre es determina el
patró per al nombre de hashes

82
00:04:25,410 --> 00:04:29,920
i el nombre d'espais que necessita per
qualsevol fila n per a una altura donada,

83
00:04:29,920 --> 00:04:32,910
recordi tenir cura
de com s'està indexant.

84
00:04:32,910 --> 00:04:37,160
El que vull dir amb això és que a la vida quotidiana
la vida la majoria de nosaltres començar a comptar per un.

85
00:04:37,160 --> 00:04:39,680
Així que la primera fila seria el número u.

86
00:04:39,680 --> 00:04:43,620
I la segona fila seria fila
número dos, així successivament i així successivament.

87
00:04:43,620 --> 00:04:47,620
>> Però en informàtica i
CS50, estem indexats a zero.

88
00:04:47,620 --> 00:04:50,750
Així que en realitat comencen a comptar des de zero.

89
00:04:50,750 --> 00:04:54,020
Així que la primera fila faria
ser fila número zero.

90
00:04:54,020 --> 00:04:56,640
I la segona fila
seria fila número u.

91
00:04:56,640 --> 00:05:02,510
Així que si tingués una alçada de vuit per
la meva piràmide, llavors l'últim valor de n

92
00:05:02,510 --> 00:05:05,850
en realitat seria set i no huit.

93
00:05:05,850 --> 00:05:07,010
>> Així que vagi amb compte amb això.

94
00:05:07,010 --> 00:05:10,750
I tenir en compte quan s'està determinant
el seu patró si indexats a zero el seu

95
00:05:10,750 --> 00:05:12,360
o un de indexats

96
00:05:12,360 --> 00:05:13,070
>> D'ACORD.

97
00:05:13,070 --> 00:05:15,380
Així que ara que tenim la
patró per a la piràmide esquerra,

98
00:05:15,380 --> 00:05:18,650
necessitem determinar
el patró de la bretxa.

99
00:05:18,650 --> 00:05:20,480
Per sort, això és realment fàcil.

100
00:05:20,480 --> 00:05:22,690
És només sempre dos espais.

101
00:05:22,690 --> 00:05:25,240
>> Així que ara es procedeix a el patró correcte.

102
00:05:25,240 --> 00:05:27,220
La primera fila tindrà un hash.

103
00:05:27,220 --> 00:05:28,640
La segona fila, dos.

104
00:05:28,640 --> 00:05:29,530
Tercera fila, tres.

105
00:05:29,530 --> 00:05:30,790
Així successivament i així successivament.

106
00:05:30,790 --> 00:05:35,540
Així que de nou, determinar per a qualsevol extracte
n i qualsevol altura quants hashes

107
00:05:35,540 --> 00:05:38,810
i el nombre d'espais
cada fila ha de tenir.

108
00:05:38,810 --> 00:05:39,700
>> D'ACORD.

109
00:05:39,700 --> 00:05:45,050
Així que sabem que per a cada fila que
necessari dur a terme algun procés.

110
00:05:45,050 --> 00:05:46,600
Com ho fem?

111
00:05:46,600 --> 00:05:50,440
Bé, fem servir el de construcció de llaç,
compost d'una inicialització,

112
00:05:50,440 --> 00:05:52,310
una condició, i una actualització.

113
00:05:52,310 --> 00:05:54,830
Per bucles es poden utilitzar
repetir els processos.

114
00:05:54,830 --> 00:05:59,610
>> Així que dic que vull que digui hola,
món 50 vegades, llavors el meu bucle for

115
00:05:59,610 --> 00:06:03,510
seria alguna cosa com això, on
Em inicialitzar el meu variables a zero.

116
00:06:03,510 --> 00:06:06,200
La condició és que i és menor que 50.

117
00:06:06,200 --> 00:06:09,670
I a continuació, l'actualització és que
s'incrementa en una unitat cada vegada.

118
00:06:09,670 --> 00:06:14,700
Llavors, això seria fer seria
imprimir hola, món 50 vegades en una fila.

119
00:06:14,700 --> 00:06:18,080
>> Ara, diguem que volia repetir
sobre l'altura de la piràmide.

120
00:06:18,080 --> 00:06:21,560
Llavors, en lloc de la codificació dura
algun valor en la condició,

121
00:06:21,560 --> 00:06:23,280
Només ha d'utilitzar la variable alçada.

122
00:06:23,280 --> 00:06:27,180
Així que el que això farà és iterate
sobre l'altura de cada fila.

123
00:06:27,180 --> 00:06:30,280
I jo puc fer alguna cosa al seu interior
del cos d'aquest bucle.

124
00:06:30,280 --> 00:06:32,710
>> Què és el que volem fer
a l'interior del cos del bucle?

125
00:06:32,710 --> 00:06:36,550
Doncs bé, com hem indicat abans, volem
per imprimir els espais i els hashes

126
00:06:36,550 --> 00:06:40,730
de la piràmide de l'esquerra i després imprimir
dos espais i després s'imprimeixen els valors hash.

127
00:06:40,730 --> 00:06:42,500
Així que ja hem donat compte d'això.

128
00:06:42,500 --> 00:06:45,670
Per tant, podem començar a omplir
en el nostre programa molt més.

129
00:06:45,670 --> 00:06:49,850
>> Aquí tinc un cicle for exterior que
itera sobre cada fila de la piràmide.

130
00:06:49,850 --> 00:06:53,340
I dins d'aquest cos que vaig
per imprimir espais repetidament,

131
00:06:53,340 --> 00:06:56,860
hashes diverses vegades, i després la bretxa,
i després hashes de la piràmide recta,

132
00:06:56,860 --> 00:07:00,440
i després, finalment, una nova
línia per iniciar la següent fila.

133
00:07:00,440 --> 00:07:02,860
>> Amb això, hem incitats
l'usuari per a l'entrada.

134
00:07:02,860 --> 00:07:04,510
Ens hem assegurat que és vàlid.

135
00:07:04,510 --> 00:07:06,280
I després hem dibuixat la piràmide.

136
00:07:06,280 --> 00:07:09,540
Així que Mario pot èxit
pujar a la piràmide.

137
00:07:09,540 --> 00:07:10,970
>> El meu nom és Zamyla.

138
00:07:10,970 --> 00:07:13,840
I això és CS50.

139
00:07:13,840 --> 00:07:15,419

