1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:02,640
ZAMYLA CHAN: Es una-me, Zamyla.

3
00:00:02,640 --> 00:00:06,950
Hoy en día, vamos a poner en práctica
Mario, donde dibujamos Mario

4
00:00:06,950 --> 00:00:10,730
una pirámide completa para él para saltar por encima.

5
00:00:10,730 --> 00:00:14,430
Vamos a romper el
sub-tareas para este problema.

6
00:00:14,430 --> 00:00:17,930
>> En primer lugar, queremos pedir al usuario
para la altura de la pirámide.

7
00:00:17,930 --> 00:00:20,510
Y luego queremos para asegurarse
que esa entrada es válida.

8
00:00:20,510 --> 00:00:23,280
Y luego vamos a
quiero llamar la pirámide.

9
00:00:23,280 --> 00:00:26,850
>> Así que vamos a hablar de que provocó
y validar la entrada del usuario.

10
00:00:26,850 --> 00:00:29,920
Podría ser algo como
esto, un bucle do-while que

11
00:00:29,920 --> 00:00:33,250
solicita al usuario una
enteras y después sólo se repite

12
00:00:33,250 --> 00:00:35,700
si ese número entero no es válido.

13
00:00:35,700 --> 00:00:38,220
Entonces, ¿cuál debería ser esta condición?

14
00:00:38,220 --> 00:00:40,630
>> Para ello, vamos a volver
con la especificación.

15
00:00:40,630 --> 00:00:46,240
Pues bien, la especificación nos dice que cualquier válida
altura va a ser entre 0 y 23,

16
00:00:46,240 --> 00:00:47,350
inclusivo.

17
00:00:47,350 --> 00:00:51,400
Así entonces eso significa que cualquier inválida
altura va a ser inferior a 0

18
00:00:51,400 --> 00:00:53,840
o más de 23.

19
00:00:53,840 --> 00:00:57,220
>> Así que ahora que tenemos esta información,
diseñemos nuestra condición.

20
00:00:57,220 --> 00:00:59,230
Pero tenemos que tener cuidado,
porque ahora tenemos

21
00:00:59,230 --> 00:01:02,130
dos booleanos que queremos evaluar.

22
00:01:02,130 --> 00:01:04,150
>> Aquí os he proporcionado
con una tabla de verdad.

23
00:01:04,150 --> 00:01:07,520
Esto nos permite tomar dos
Booleanos, Boolean uno y dos.

24
00:01:07,520 --> 00:01:13,600
Y podemos evaluar desde Bool1
y Bool2 o Bool1 o Bool2.

25
00:01:13,600 --> 00:01:17,390
>> Entonces, ¿cuál es la diferencia
entre AND y OR?

26
00:01:17,390 --> 00:01:21,810
Bueno, Bool1 y se Bool2
resultado verdadero si y sólo

27
00:01:21,810 --> 00:01:25,680
si ambas son ciertas Booleanos,
mientras que el o la operación

28
00:01:25,680 --> 00:01:30,190
será verdadera si cualquiera de
los Booleanos o ambas son ciertas.

29
00:01:30,190 --> 00:01:33,110
Así que con esto en mente,
ver si se puede averiguar

30
00:01:33,110 --> 00:01:37,460
lo que la condición apropiada para
el bucle do-while para un n no válido

31
00:01:37,460 --> 00:01:38,850
va a ser.

32
00:01:38,850 --> 00:01:43,540
>> Con esto, hemos incitado y validado
el usuario para la altura de la pirámide

33
00:01:43,540 --> 00:01:44,550
que quieren.

34
00:01:44,550 --> 00:01:47,740
Así que ahora, le toca a nosotros
para dibujar la pirámide.

35
00:01:47,740 --> 00:01:50,520
La pirámide completa para este
problema se verá un poco

36
00:01:50,520 --> 00:01:56,340
como éste, en el que tenemos una pirámide izquierda,
alguna distancia, y luego una pirámide recta.

37
00:01:56,340 --> 00:01:58,630
Así que vamos a romper esta abajo un poco.

38
00:01:58,630 --> 00:02:03,510
>> Si voy a mi editor de texto, aquí tengo
nos dibujado una pirámide alineada a la izquierda.

39
00:02:03,510 --> 00:02:05,160
Pero eso no va a hacer.

40
00:02:05,160 --> 00:02:10,139
Lo que queremos hacer es que queremos
crear una pirámide alineado a la derecha en primer lugar.

41
00:02:10,139 --> 00:02:13,580
Así que para hacer esto, simplemente empujar
mis valores hash a lo largo de al lado,

42
00:02:13,580 --> 00:02:18,240
Sólo voy a poner algunos caracteres
en el medio, sólo estos puntos.

43
00:02:18,240 --> 00:02:22,560
Entonces me voy a poner dos en el
siguiente línea, y uno en esa línea.

44
00:02:22,560 --> 00:02:26,070
Y aquí tengo una
pirámide alineado a la derecha.

45
00:02:26,070 --> 00:02:28,540
>> Después de eso, voy a
volver a la fila superior

46
00:02:28,540 --> 00:02:33,930
y poner en el hueco, el cual
es decir, por la especificación, dos espacios.

47
00:02:33,930 --> 00:02:37,680
A continuación, voy a llenar el
otro lado de la pirámide.

48
00:02:37,680 --> 00:02:42,030
Voy a ir a la segunda fila, escribo
dos espacios de la brecha y luego dos

49
00:02:42,030 --> 00:02:42,920
hashes.

50
00:02:42,920 --> 00:02:47,020
Volver a la tercera fila, dos espacios
de la brecha y tres hashes.

51
00:02:47,020 --> 00:02:51,480
Y al final, dos espacios
de la brecha y cuatro hashes.

52
00:02:51,480 --> 00:02:54,400
Así que eso es lo que una completa
pirámide se verá así.

53
00:02:54,400 --> 00:02:57,260
>> Por supuesto, no queremos
estos puntos en el camino.

54
00:02:57,260 --> 00:03:01,220
Así que vamos a sustituir a éstos
puntos por poner algunos espacios en.

55
00:03:01,220 --> 00:03:03,720
Uno, dos, tres en la primera línea.

56
00:03:03,720 --> 00:03:05,650
Uno, dos en el segundo.

57
00:03:05,650 --> 00:03:08,200
Y uno en la tercera línea.

58
00:03:08,200 --> 00:03:12,060
Así que esto es lo que haríamos si nos
quería hacer sólo una pirámide completa,

59
00:03:12,060 --> 00:03:13,700
decir, en nuestro editor de texto.

60
00:03:13,700 --> 00:03:15,860
>> Así que vamos a llevar esto,
la comprensión de los patrones,

61
00:03:15,860 --> 00:03:19,870
y convertirlo a algunos pseudocódigo.

62
00:03:19,870 --> 00:03:24,500
Para cada fila de la pirámide, queremos
para imprimir la pirámide de la izquierda y luego

63
00:03:24,500 --> 00:03:26,580
la brecha y luego la pirámide recta.

64
00:03:26,580 --> 00:03:30,260
Para la pirámide izquierda es la impresión de
la cantidad requerida de espacios,

65
00:03:30,260 --> 00:03:31,740
seguido de los valores hash.

66
00:03:31,740 --> 00:03:35,030
Entonces es la impresión de la brecha, la cual
está a sólo dos espacios cada vez.

67
00:03:35,030 --> 00:03:38,080
Y en la pirámide de la derecha es la impresión de
el número requerido de valores hash.

68
00:03:38,080 --> 00:03:41,410
>> Para la segunda fila, se realizó
exactamente el mismo proceso.

69
00:03:41,410 --> 00:03:44,510
Imprimimos los espacios para la izquierda
pirámide, la cantidad requerida

70
00:03:44,510 --> 00:03:49,930
de hash, la brecha, dos espacios, y
a continuación, los hashes de la pirámide de la derecha.

71
00:03:49,930 --> 00:03:52,490
>> Vamos a abordar el patrón
para la pirámide izquierda.

72
00:03:52,490 --> 00:03:55,660
Si lo hubiera hecho, para los propósitos
de este ejemplo, una altura

73
00:03:55,660 --> 00:03:58,790
de ocho solicitado por el
usuario, entonces mi primera fila

74
00:03:58,790 --> 00:04:01,020
tendría un hash y siete espacios.

75
00:04:01,020 --> 00:04:03,860
Mi segunda fila tendría
dos hash, seis espacios.

76
00:04:03,860 --> 00:04:06,749
Tercera fila, tres, cinco plazas de hashes.

77
00:04:06,749 --> 00:04:09,040
Probablemente puede hacer esto
usted mismo para una altura de ocho

78
00:04:09,040 --> 00:04:13,470
y determinará para cada fila cuántos
hashes y el número de espacios que necesita.

79
00:04:13,470 --> 00:04:16,209
Pero lo que queremos hacer es
queremos abstracto ella.

80
00:04:16,209 --> 00:04:22,660
Así que te pido para cualquier fila n, el número de
hashes y cuántos espacios necesitamos?

81
00:04:22,660 --> 00:04:25,410
>> Ahora, mientras se determina el
patrón para el número de hashes

82
00:04:25,410 --> 00:04:29,920
y el número de espacios que necesita para
cualquier fila n para una altura dada,

83
00:04:29,920 --> 00:04:32,910
recuerde tener cuidado
de cómo se está indexando.

84
00:04:32,910 --> 00:04:37,160
Lo que quiero decir con esto es que en la vida cotidiana
la vida la mayoría de nosotros empezar a contar por uno.

85
00:04:37,160 --> 00:04:39,680
Así que la primera fila sería el número uno.

86
00:04:39,680 --> 00:04:43,620
Y la segunda fila sería fila
número dos, así sucesivamente y así sucesivamente.

87
00:04:43,620 --> 00:04:47,620
>> Pero en informática y
CS50, estamos indexados a cero.

88
00:04:47,620 --> 00:04:50,750
Así que en realidad comienzan a contar desde cero.

89
00:04:50,750 --> 00:04:54,020
Así que la primera fila haría
ser fila número cero.

90
00:04:54,020 --> 00:04:56,640
Y la segunda fila
sería fila número uno.

91
00:04:56,640 --> 00:05:02,510
Así que si tuviera una altura de ocho para
mi pirámide, entonces el último valor de n

92
00:05:02,510 --> 00:05:05,850
en realidad sería siete y no ocho.

93
00:05:05,850 --> 00:05:07,010
>> Así que tenga cuidado con esto.

94
00:05:07,010 --> 00:05:10,750
Y tener en cuenta cuando se está determinando
su patrón si indexados a cero su

95
00:05:10,750 --> 00:05:12,360
o uno indexados

96
00:05:12,360 --> 00:05:13,070
>> DE ACUERDO.

97
00:05:13,070 --> 00:05:15,380
Así que ahora que tenemos la
patrón para la pirámide izquierda,

98
00:05:15,380 --> 00:05:18,650
necesitamos determinar
el patrón de la brecha.

99
00:05:18,650 --> 00:05:20,480
Por suerte, esto es realmente fácil.

100
00:05:20,480 --> 00:05:22,690
Es sólo siempre dos espacios.

101
00:05:22,690 --> 00:05:25,240
>> Así que ahora se procede a el patrón correcto.

102
00:05:25,240 --> 00:05:27,220
La primera fila tendrá un hash.

103
00:05:27,220 --> 00:05:28,640
La segunda fila, dos.

104
00:05:28,640 --> 00:05:29,530
Tercera fila, tres.

105
00:05:29,530 --> 00:05:30,790
Etc., etc.

106
00:05:30,790 --> 00:05:35,540
Así que de nuevo, determinar para cualquier extracto
n y cualquier altura cuántos hashes

107
00:05:35,540 --> 00:05:38,810
y el número de espacios
cada fila debe tener.

108
00:05:38,810 --> 00:05:39,700
>> DE ACUERDO.

109
00:05:39,700 --> 00:05:45,050
Así que sabemos que para cada fila que
necesario llevar a cabo algún proceso.

110
00:05:45,050 --> 00:05:46,600
¿Como hacemos eso?

111
00:05:46,600 --> 00:05:50,440
Bueno, utilizamos el de construcción de lazo,
compuesto de una inicialización,

112
00:05:50,440 --> 00:05:52,310
una condición, y una actualización.

113
00:05:52,310 --> 00:05:54,830
Para bucles se pueden utilizar
repetir los procesos.

114
00:05:54,830 --> 00:05:59,610
>> Así que digo que quiero que diga hola,
mundo 50 veces, entonces mi bucle for

115
00:05:59,610 --> 00:06:03,510
sería algo como esto, donde
Me inicializar mi variables a cero.

116
00:06:03,510 --> 00:06:06,200
La condición es que i es menor que 50.

117
00:06:06,200 --> 00:06:09,670
Y a continuación, la actualización es que
se incrementa en una unidad cada vez.

118
00:06:09,670 --> 00:06:14,700
Entonces, ¿esto sería hacer sería
imprimir hola, mundo 50 veces en una fila.

119
00:06:14,700 --> 00:06:18,080
>> Ahora, digamos que quería repetir
sobre la altura de la pirámide.

120
00:06:18,080 --> 00:06:21,560
Entonces, en lugar de la codificación dura
algún valor en la condición,

121
00:06:21,560 --> 00:06:23,280
Sólo tiene que utilizar la variable altura.

122
00:06:23,280 --> 00:06:27,180
Así que lo que esto hará es iterate
sobre la altura de cada fila.

123
00:06:27,180 --> 00:06:30,280
Y yo puedo hacer algo en su interior
del cuerpo de dicho bucle.

124
00:06:30,280 --> 00:06:32,710
>> Qué queremos hacer
en el interior del cuerpo del bucle?

125
00:06:32,710 --> 00:06:36,550
Pues bien, como hemos indicado antes, queremos
para imprimir los espacios y los hashes

126
00:06:36,550 --> 00:06:40,730
de la pirámide de la izquierda y luego imprimir
dos espacios y luego se imprimen los valores hash.

127
00:06:40,730 --> 00:06:42,500
Así que ya hemos dado cuenta de eso.

128
00:06:42,500 --> 00:06:45,670
Por lo tanto, podemos empezar a llenar
en nuestro programa mucho más.

129
00:06:45,670 --> 00:06:49,850
>> Aquí tengo un ciclo for exterior que
itera sobre cada fila de la pirámide.

130
00:06:49,850 --> 00:06:53,340
Y dentro de ese cuerpo que voy
para imprimir espacios repetidamente,

131
00:06:53,340 --> 00:06:56,860
hashes varias veces, y luego la brecha,
y luego hashes de la pirámide recta,

132
00:06:56,860 --> 00:07:00,440
y luego, finalmente, una nueva
línea para iniciar la siguiente fila.

133
00:07:00,440 --> 00:07:02,860
>> Con esto, hemos incitados
el usuario para la entrada.

134
00:07:02,860 --> 00:07:04,510
Nos hemos asegurado de que es válido.

135
00:07:04,510 --> 00:07:06,280
Y luego hemos dibujado la pirámide.

136
00:07:06,280 --> 00:07:09,540
Así que Mario puede éxito
subir a la pirámide.

137
00:07:09,540 --> 00:07:10,970
>> Mi nombre es Zamyla.

138
00:07:10,970 --> 00:07:13,840
Y esto es CS50.

139
00:07:13,840 --> 00:07:15,419

