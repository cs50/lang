1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:02,640
ZAMYLA CHAN: Det er a-meg, Zamyla.

3
00:00:02,640 --> 00:00:06,950
I dag skal vi gjennomføre
Mario, der vi trekker Mario

4
00:00:06,950 --> 00:00:10,730
en hel pyramide for ham å hoppe over.

5
00:00:10,730 --> 00:00:14,430
La oss bryte ned
deloppgaver for dette problemet.

6
00:00:14,430 --> 00:00:17,930
>> Først ønsker vi å be brukeren
for høyden av pyramiden.

7
00:00:17,930 --> 00:00:20,510
Og så ønsker vi å sørge for at
det at innspill er gyldig.

8
00:00:20,510 --> 00:00:23,280
Og så skal vi
ønsker å tegne pyramiden.

9
00:00:23,280 --> 00:00:26,850
>> Så la oss snakke om å spørre
og validere brukerundersøkelser.

10
00:00:26,850 --> 00:00:29,920
Det kan se ut omtrent som
dette, en do-while-loop som

11
00:00:29,920 --> 00:00:33,250
ber brukeren om en
heltall og da bare gjentar

12
00:00:33,250 --> 00:00:35,700
hvis det heltall er ugyldig.

13
00:00:35,700 --> 00:00:38,220
Så hva bør denne tilstanden være?

14
00:00:38,220 --> 00:00:40,630
>> For dette, la oss gå tilbake
til beskrivelsen.

15
00:00:40,630 --> 00:00:46,240
Vel, forteller spec oss at noen gyldig
høyde kommer til å ligge mellom 0 og 23,

16
00:00:46,240 --> 00:00:47,350
inklusive.

17
00:00:47,350 --> 00:00:51,400
Så det betyr at enhver ugyldig
høyde kommer til å være mindre enn 0

18
00:00:51,400 --> 00:00:53,840
eller mer enn 23.

19
00:00:53,840 --> 00:00:57,220
>> Så nå som vi har denne informasjonen,
la oss designe vår tilstand.

20
00:00:57,220 --> 00:00:59,230
Men vi må være forsiktig,
fordi nå har vi

21
00:00:59,230 --> 00:01:02,130
to Booleans som vi ønsker å vurdere.

22
00:01:02,130 --> 00:01:04,150
>> Her har jeg gitt deg
med en sannhet bord.

23
00:01:04,150 --> 00:01:07,520
Dette gir oss muligheten til å ta to
Booleans, boolsk en og to.

24
00:01:07,520 --> 00:01:13,600
Og vi kan vurdere enten bool1
og bool2 eller bool1 eller bool2.

25
00:01:13,600 --> 00:01:17,390
>> Så hva er forskjellen
mellom og og eller?

26
00:01:17,390 --> 00:01:21,810
Vel, bool1 og bool2 vil
vurdere å true hvis og bare

27
00:01:21,810 --> 00:01:25,680
dersom begge Booleans er sant,
mens eller drift

28
00:01:25,680 --> 00:01:30,190
vil være sant hvis én av
de Booleans eller begge er sanne.

29
00:01:30,190 --> 00:01:33,110
Så med dette i tankene,
se om du kan finne ut

30
00:01:33,110 --> 00:01:37,460
hva den aktuelle tilstanden for
gjør-mens loop for en ugyldig n

31
00:01:37,460 --> 00:01:38,850
kommer til å være.

32
00:01:38,850 --> 00:01:43,540
>> Med det har vi bedt om og validert
brukeren for høyden av pyramiden

33
00:01:43,540 --> 00:01:44,550
som de ønsker.

34
00:01:44,550 --> 00:01:47,740
Så nå er det opp til oss
å trekke pyramiden.

35
00:01:47,740 --> 00:01:50,520
Den fulle pyramide for dette
Problemet vil se litt

36
00:01:50,520 --> 00:01:56,340
som dette, hvor vi har en venstre pyramide,
noen gap, og deretter rett pyramide.

37
00:01:56,340 --> 00:01:58,630
Så la oss bryte dette ned litt.

38
00:01:58,630 --> 00:02:03,510
>> Hvis jeg går til min tekst editor, her har jeg
trukket oss en venstre-justert pyramide.

39
00:02:03,510 --> 00:02:05,160
Men det vil ikke gjøre.

40
00:02:05,160 --> 00:02:10,139
Det vi ønsker å gjøre er vi ønsker å
skape en høyrejustert pyramide først.

41
00:02:10,139 --> 00:02:13,580
Så for å gjøre dette, å bare presse
mine hashes sammen til side,

42
00:02:13,580 --> 00:02:18,240
Jeg skal bare sette noen tegn
i mellom, bare disse prikkene.

43
00:02:18,240 --> 00:02:22,560
Så jeg kommer til å sette to på
neste linje, og en på den linjen.

44
00:02:22,560 --> 00:02:26,070
Og så her har jeg en
høyrejustert pyramide.

45
00:02:26,070 --> 00:02:28,540
>> Etter det, kommer jeg til å
gå tilbake til den øverste raden

46
00:02:28,540 --> 00:02:33,930
og satt i gapet, som
er, per spec, to plasser.

47
00:02:33,930 --> 00:02:37,680
Så jeg kommer til å fylle ut
annen side av pyramiden.

48
00:02:37,680 --> 00:02:42,030
Jeg kommer til å gå til andre rad, skrive
to plasser for gapet og deretter to

49
00:02:42,030 --> 00:02:42,920
hashes.

50
00:02:42,920 --> 00:02:47,020
Tilbake til tredje rad, to plasser
for gapet og tre hashes.

51
00:02:47,020 --> 00:02:51,480
Og på slutten, to plasser
for gapet og fire hashes.

52
00:02:51,480 --> 00:02:54,400
Så det er det en full
pyramiden vil se ut.

53
00:02:54,400 --> 00:02:57,260
>> Selvfølgelig ønsker vi ikke
disse prikkene i veien.

54
00:02:57,260 --> 00:03:01,220
Så vi kommer til å erstatte disse
prikker ved å sette noen mellomrom.

55
00:03:01,220 --> 00:03:03,720
En, to, tre på den første linjen.

56
00:03:03,720 --> 00:03:05,650
En, to på den andre.

57
00:03:05,650 --> 00:03:08,200
Og en på den tredje linjen.

58
00:03:08,200 --> 00:03:12,060
Så dette er hva vi ville gjøre hvis vi
ville bare gjøre en full pyramide,

59
00:03:12,060 --> 00:03:13,700
si, i vår tekst editor.

60
00:03:13,700 --> 00:03:15,860
>> Så la oss ta dette,
forstå mønstre,

61
00:03:15,860 --> 00:03:19,870
og konvertere det til noen pseudokode.

62
00:03:19,870 --> 00:03:24,500
For hver rad av pyramiden, vil vi
å skrive ut igjen pyramiden og deretter

63
00:03:24,500 --> 00:03:26,580
gapet og deretter den høyre pyramiden.

64
00:03:26,580 --> 00:03:30,260
For venstre pyramide, skriver vi
den nødvendige mengde av mellomrom,

65
00:03:30,260 --> 00:03:31,740
etterfulgt av hashes.

66
00:03:31,740 --> 00:03:35,030
Deretter skriver vi gapet, som
er bare to plasser hver gang.

67
00:03:35,030 --> 00:03:38,080
Og i den høyre pyramiden, skriver vi
det nødvendige antall hashes.

68
00:03:38,080 --> 00:03:41,410
>> For den andre raden, gjennomførte vi
nøyaktig samme prosess.

69
00:03:41,410 --> 00:03:44,510
Vi trykker mellomrom for venstre
pyramide, den nødvendige mengde

70
00:03:44,510 --> 00:03:49,930
av hashes, gapet, to plasser, og
deretter hashes for retten pyramide.

71
00:03:49,930 --> 00:03:52,490
>> La oss takle mønster
for venstre pyramiden.

72
00:03:52,490 --> 00:03:55,660
Hvis jeg hadde, for formål
i dette eksemplet, en høyde

73
00:03:55,660 --> 00:03:58,790
av åtte forespurt av
bruker, så min første rad

74
00:03:58,790 --> 00:04:01,020
ville ha en hash og syv plasser.

75
00:04:01,020 --> 00:04:03,860
Min andre rad ville ha
to hashes, seks områder.

76
00:04:03,860 --> 00:04:06,749
Tredje rad, tre hashes, fem områder.

77
00:04:06,749 --> 00:04:09,040
Du kan sannsynligvis gjøre dette
selv for en høyde på åtte

78
00:04:09,040 --> 00:04:13,470
og bestemme for hver rad hvor mange
hashes og hvor mange plasser du trenger.

79
00:04:13,470 --> 00:04:16,209
Men hva vi ønsker å gjøre er
vi ønsker å abstrahere det.

80
00:04:16,209 --> 00:04:22,660
Så jeg spørre deg om noe n'te rad, hvor mange
hashes og hvor mange plasser vi trenger?

81
00:04:22,660 --> 00:04:25,410
>> Nå som du bestemme
mønster for hvor mange hasher

82
00:04:25,410 --> 00:04:29,920
og hvor mange plasser du trenger for
en hvilken som helst n'te rad for en gitt høyde,

83
00:04:29,920 --> 00:04:32,910
husk å være forsiktig
hvordan du indeksere.

84
00:04:32,910 --> 00:04:37,160
Hva jeg mener med dette er at det i hverdagen
livet de fleste av oss begynner å telle etter en.

85
00:04:37,160 --> 00:04:39,680
Så den første raden vil være nummer én.

86
00:04:39,680 --> 00:04:43,620
Og den andre raden ville være rad
nummer to, så videre og så videre.

87
00:04:43,620 --> 00:04:47,620
>> Men i informatikk og
CS50, vi null-indeksert.

88
00:04:47,620 --> 00:04:50,750
Slik at vi faktisk begynne å telle på null.

89
00:04:50,750 --> 00:04:54,020
Så den første raden ville
være radnummer null.

90
00:04:54,020 --> 00:04:56,640
Og den andre raden
ville være rad nummer én.

91
00:04:56,640 --> 00:05:02,510
Så hvis jeg hadde en høyde på åtte for
min pyramide, da den siste verdien av n

92
00:05:02,510 --> 00:05:05,850
ville faktisk være sju og ikke åtte.

93
00:05:05,850 --> 00:05:07,010
>> Så vær forsiktig med dette.

94
00:05:07,010 --> 00:05:10,750
Og vær oppmerksom når du bestemme
mønsteret om din null-indeksert

95
00:05:10,750 --> 00:05:12,360
eller en indeksert

96
00:05:12,360 --> 00:05:13,070
>> OK.

97
00:05:13,070 --> 00:05:15,380
Så nå som vi har
mønster for venstre pyramide,

98
00:05:15,380 --> 00:05:18,650
vi trenger å bestemme
mønsteret for gapet.

99
00:05:18,650 --> 00:05:20,480
Heldigvis er dette veldig enkelt.

100
00:05:20,480 --> 00:05:22,690
Det er bare alltid to områder.

101
00:05:22,690 --> 00:05:25,240
>> Så nå skal vi til høyre mønster.

102
00:05:25,240 --> 00:05:27,220
Den første raden vil ha en hash.

103
00:05:27,220 --> 00:05:28,640
Den andre raden, to.

104
00:05:28,640 --> 00:05:29,530
Tredje rad, tre.

105
00:05:29,530 --> 00:05:30,790
Også videre.

106
00:05:30,790 --> 00:05:35,540
Så igjen, fastslår en eller annen abstrakt
n og enhver høyde hvor mange hasher

107
00:05:35,540 --> 00:05:38,810
og hvor mange plasser
hver rad skal ha.

108
00:05:38,810 --> 00:05:39,700
>> OK.

109
00:05:39,700 --> 00:05:45,050
Så vi vet at for hver rad vi
trenger for å gjennomføre en prosess.

110
00:05:45,050 --> 00:05:46,600
Hvordan gjør vi det?

111
00:05:46,600 --> 00:05:50,440
Vel, vi bruker for loop konstruere,
består av en initialisering,

112
00:05:50,440 --> 00:05:52,310
en tilstand, og en oppdatering.

113
00:05:52,310 --> 00:05:54,830
For sløyfer kan brukes
å gjenta prosesser.

114
00:05:54,830 --> 00:05:59,610
>> Så sier jeg vil den skal si hei,
verden 50 ganger, da min for loop

115
00:05:59,610 --> 00:06:03,510
ville se noe som dette, hvor
Jeg initial min variabel til null.

116
00:06:03,510 --> 00:06:06,200
Forutsetningen er at jeg er mindre enn 50.

117
00:06:06,200 --> 00:06:09,670
Og deretter oppdateringen er at det
trinn etter en hver gang.

118
00:06:09,670 --> 00:06:14,700
Så hva dette ville gjøre ville være å
skrive ut Hello, World 50 ganger på rad.

119
00:06:14,700 --> 00:06:18,080
>> Nå sier jeg ønsket å gjenta
over høyden av pyramiden.

120
00:06:18,080 --> 00:06:21,560
Så i stedet for hardt koding
viss verdi i den tilstand,

121
00:06:21,560 --> 00:06:23,280
Jeg bare bruke variabelen høyde.

122
00:06:23,280 --> 00:06:27,180
Så hva dette vil gjøre er å iterere
over høyden hver rad.

123
00:06:27,180 --> 00:06:30,280
Og jeg kan gjøre noe inni
av kroppen av denne sløyfe.

124
00:06:30,280 --> 00:06:32,710
>> Hva ønsker vi å gjøre
inne i kroppen av loopen?

125
00:06:32,710 --> 00:06:36,550
Vel, som vi antydet tidligere, ønsker vi
for å skrive ut mellomrom og hashes

126
00:06:36,550 --> 00:06:40,730
for venstre pyramiden og deretter skrive ut
to plasser og deretter skrive ut hashes.

127
00:06:40,730 --> 00:06:42,500
Så vi har allerede funnet ut.

128
00:06:42,500 --> 00:06:45,670
Så vi kan begynne å fylle
i vårt program mye mer.

129
00:06:45,670 --> 00:06:49,850
>> Her har jeg en ytre for løkke som
gjentar enn hver rad i pyramiden.

130
00:06:49,850 --> 00:06:53,340
Og inne at kroppen skal jeg
å skrive ut områder gjentatte ganger,

131
00:06:53,340 --> 00:06:56,860
hashes gjentatte ganger, og deretter gapet,
og deretter hashes for retten pyramide,

132
00:06:56,860 --> 00:07:00,440
og deretter, til slutt, en ny
linjen for å starte neste rad.

133
00:07:00,440 --> 00:07:02,860
>> Med det har vi bedt om
brukeren for innspill.

134
00:07:02,860 --> 00:07:04,510
Vi har sørget for at den er gyldig.

135
00:07:04,510 --> 00:07:06,280
Og da har vi trukket pyramiden.

136
00:07:06,280 --> 00:07:09,540
Så Mario kan lykkes
klatre pyramiden.

137
00:07:09,540 --> 00:07:10,970
>> Mitt navn er Zamyla.

138
00:07:10,970 --> 00:07:13,840
Og dette er CS50.

139
00:07:13,840 --> 00:07:15,419

