Idemo pohlepni. U pohlepni, naš posao je da igraju uloga pohlepnog blagajnik. Korisnik će nam reći kako mnogo promjena koju im dugujem, a onda je naš posao je izračunati minimalni broj kovanica koje možemo koristiti kako bi da iznos promjene. 

Počnimo s primjerom. Recimo korisnik zahtijeva 0,32 $ natrag. Mogli bismo to učiniti dajući njih 32 novčića, jedan posto svake. Ili bih mogao koristiti pet coins-- strane dajući im tri novčića, 0,10 $ svaki, i dva novčića, 0,02 $ svaki. No, da bismo mogli koristiti čak manje novca da bi to bilo? 

Cijela taktika u greedy-- biti pohlepan cashier-- je koristiti najveći novčić moguće. Dakle, kad god imamo četvrtine ćemo ih koristiti. I onda odjednom oni ponestane, ćemo koristiti dimes, 0,10 $ svaki. Zatim nickels, 5 centi svaki, i onda dolje na novčana jedinica, jedan posto svaki. Pomoću najveći novac moguće, kad god je to moguće, mi bi se osiguralo da se sa što manje novca moguće napraviti promjenu. 

Tako ćemo prošetati o ovome. Korisnik treba 0,32 $. Pa se pitamo, možemo koristiti četvrtinu? Pa, da možemo. Dakle, sada smo ih samo znati 0,07 $, a mi smo koristili jedan novčić. 

Možemo li koristiti neku drugu četvrtinu? Pa ne. 0,07 $ je manje od 0,25 $, tako da smo nastavili na sljedeći najveći medalje na raspolaganju. Dimes su 0,10 $, a opet, ne možemo koristiti dimes. Zbog dimes vrijedi $ 0,10, što je više od iznosa promjene duguje. 

Idemo na nickels. I, da, istina, 0,05 $ je manje od 0.10-- $ tako da možemo koristiti nikal. Dakle, sada smo samo dužni korisniku 0.02 $, a mi smo do sada koristili dva novčića. Ne možemo koristiti još jedan novčić. Pa onda smo nastavili do posljednjeg novčića na raspolaganju, koji su novčana jedinica. 

I možemo koristiti denar? Pa, yes-- i mi završiti pomoću dva novčana jedinica za ukupno četiri novčića. 

Nakon što se završi, Program će izgledati ovako. Nakon što je korisnik pokreće pohlepni programa, oni će se tražiti da daju količinu promjena u dolarima da oni duguju. A onda tvoja volja Program izlaz minimalna količina novca da je pohlepni blagajnik će koristiti da bi taj iznos promjene. 

Dakle, sada ćemo razbiti ovaj dolje u naše podzadatke. Prvo ćemo potaknuti naše Korisnik za iznos od promjena. I, kao i sa bilo korisničkog unosa, želimo pobrinite se da ćemo potvrditi da je ulaz i osigurati da možemo koristiti taj ulaz za ostatak našeg programa. Onda ćemo uvijek korištenje najveći točku mogući i pratiti kovanice koristi. I na kraju, ispisati konačni broj kovanica koje smo koristili. 

Dakle, pričajmo o pitajući. Iznos mora centi, i to je bilo dolara. I tako za dolare, idemo koristiti tip float varijablu. Sada kad god pitati korisnika za unos, želite biti sigurni da je valjana. I tako ovdje smo željeli iskoristiti od petlje konstrukt do-while. 

A to-while petlja će izvršiti Tijelo petlje barem jednom. Dakle, to dolazi u ruci. Znamo da moramo potaknuti Korisnik barem jednom na plovak. Sada, ako je plovak vrijedi. To je odlično. Mi krenuti dalje. Ali, ako ne, petlja će se osigurati da smo dobili pravilan plovak ponavljanjem kontinuirano do korisnik nam daje valjanu vrijednost. 

Sada za do-vrijeme petlje stanje, trebamo razmotriti što to znači valjano ispliva. Tako da za kontekstu ovaj problem, vjerojatno ima smisla samo prihvatiti pozitivne vrijednosti. 

Dakle, kreće on-- smo dobije vrijednost u dolarima od strane korisnika. No, imamo posla s kovanicama, koji su u potpunosti u centi. $ 1 je ekvivalent za 100 centi. Dakle, dobra stvar za učiniti je da pretvoriti te vrijednosti u centi. 

Sada kada se pretvaramo iz plovak u cijeli broj, pa dolara za centi, želimo biti sigurni da smo oprezni o pomičnim zarezom nepreciznosti. Dakle, to znači that-- reći moj dolar value-- moj plovak value-- došlo je do čak $ 2, još uvijek možda neke zalutale brojeve unutra. Dakle, želimo biti sigurni da ne samo da ćemo pomnožiti sa 100 kako bi dobili centi, ali mi smo također zaokružuju. 

Tako sada imamo iznos promjene duguje korisnika. Mi to originalno dobili u dolarima, a sada smo ga pretvoriti u centi. Tako sada možemo nastaviti sa srcem pohlepni algoritam, koji je uvijek pomoću moguća najveća novčić. Dok ovo radimo, to je bitno da i mi pratiti koliko novca su će biti vraćen korisniku kao i preostali promijeniti duguje korisnika. 

Program će izgledati nešto kao ovo. Nakon što ste dobili iznos dolara i pretvoriti da bi centi, onda ćete ući u petlju. Dok četvrtine može biti used-- tj dok je iznos promjene duguje Korisnik je veći od ili jednak 0,25 $, ćete koristiti četvrtinu. 

I što sad radi pomoću četvrtine podrazumijeva? Pa, one-- ćete povećati novčić računati da se vrati na korisnika. I drugo ćete smanjiti trenutni iznos promjene duguje natrag korisniku od 0,25 $. 

Nakon ponavljanja da je do četvrtine se više ne može koristiti, nastaviti na sljedeći najveći coin-- u ovom slučaju novčića, 0,10 $. Tako ćete ući u taj petlju sve dok više ne možete koristiti dimes. Zatim prijeđite na sljedeći Najveći novčić, nickels. Nakon nickels se više ne može koristiti, korištenje preostalog iznosa u novčana jedinica. I na kraju, print broj kovanica koristi. 

Drugi način na koji možete prići pohlepni problema je koristiti modulo pristup. Modulo je operator koji vraća ostatak podjele između dva broja. Recimo imao sam 50 mod 5. Pa, 5 je faktor 50, tako da je ostatak će biti 0. 50 mod 10-- dobro, 10 također je faktor od 50, pa ostatak je 0. 50 mod 50-- dobro, bilo koji broj se mod ne ide to imati bilo koji ostatak. 

Što je 50 mod 49? Pa, 49 samo ide u 50 puta. Dakle, ostatak će biti 1. 53 mod 50 ide dati vam ostatak 3. 

Pa kako možemo koristiti modulo i možda neki podjela provoditi naš pohlepni algoritam? Pa, mi i dalje želimo ostati vjerni Srce je pohlepan algorithm-- da je pomoću najveći novčić moguće. 

Tako ćemo se zapitati da li možemo koristiti bilo četvrtine da se vrate 0.32 $ za korisnika. Pa, 32 mod 25 daje nas čini ostatak 0.07 $. Tako da nam kaže da možemo definitivno koristiti jednu četvrtinu sa 0,07 $ preostalo. 

Možemo li onda koristiti dimes? Pa, no-- jer 0.07 $ mod 0,10 $ nam daje ostatak 7. 10 ne ide u 7 na sve. 

Tada možemo koristiti nickels? Pa $ 0.07 mod 5 centi nam daje dva preostala. I na kraju, možemo koristiti bilo penija? 2 mod 1 nam daje 0, što je u konačnici ono želimo, jer tada znači da smo se vratili korisniku sve promjene duguje. 

Tako sada imate dvije mogućnosti provedbu pohlepni algorithm-- jedan sa petlje i jedna s Kombinacija modulom i podjele. Tako je konačno, samo trebamo ispisati konačni broj kovanica. 

Ako sam ti htio da sam imao reći 3 kućnih ljubimaca i ta vrijednost je kodirano, onda ja samo mogu koristiti Jednostavan ispis testa priopćenju. No, naša vrijednost je zapravo varijable. Pa kako se otisnuti vrijednosti pohranjene u varijablama? 

Za to smo se Prednost rezervirana mjesta. Reci sam već proglasio inicijalizirani broj n. Kasnije, ako sam htio ispisati da vrijednost, onda bih napisati niz. I umjesto da te vrijednosti ja bih koristiti rezervirano mjesto za tu integer--% i. Onda nakon niza, imam zarez, zatim varijablu da želim ispisati. A kasnije, kada ispisuje, to će ispisati vrijednost n. 

Također sam mogao koristiti rezervirano mjesto za plovak, na primjer. Ako sam ti htio reći kako koliko gotovine imam u džepu, onda bih mogao reći imam% f dolara. A kasnije, kada se ispisuje, onda je n hoće zauzeti mjesto tog držača mjesta. Mogao sam isto tako, na primjer, koristiti nekoliko rezervirana za nekoliko varijabli. Dakle, dokle god sam popis ih u red, onda sam mogu vam reći koliko psi i mačke imam. 

Sada znamo kako upozoravaju Korisnik za iznos od promjena, bi se osiguralo da taj ulaz vrijedi, a onda smo imaju dva moguća načina provedbe pohlepni algoritam uvijek koristite Najveći novčić moguće. Budući da smo pratili koliko novca kojeg koristimo tada možemo ispisati tu vrijednost na kraju, objasniti korisniku koliko novca oni Povratak. 

Moje ime je Amayla, a to je CS50. 