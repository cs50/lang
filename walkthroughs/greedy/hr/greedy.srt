1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Idemo pohlepni.

3
00:00:02,900 --> 00:00:06,810
U pohlepni, naš posao je da igraju
uloga pohlepnog blagajnik.

4
00:00:06,810 --> 00:00:09,750
Korisnik će nam reći kako
mnogo promjena koju im dugujem,

5
00:00:09,750 --> 00:00:13,520
a onda je naš posao je izračunati
minimalni broj kovanica

6
00:00:13,520 --> 00:00:17,240
koje možemo koristiti kako bi
da iznos promjene.

7
00:00:17,240 --> 00:00:19,560
>> Počnimo s primjerom.

8
00:00:19,560 --> 00:00:23,170
Recimo korisnik zahtijeva 0,32 $ natrag.

9
00:00:23,170 --> 00:00:28,960
Mogli bismo to učiniti dajući
njih 32 novčića, jedan posto svake.

10
00:00:28,960 --> 00:00:35,180
Ili bih mogao koristiti pet coins-- strane
dajući im tri novčića, 0,10 $ svaki,

11
00:00:35,180 --> 00:00:38,060
i dva novčića, 0,02 $ svaki.

12
00:00:38,060 --> 00:00:42,580
No, da bismo mogli koristiti čak
manje novca da bi to bilo?

13
00:00:42,580 --> 00:00:45,100
>> Cijela taktika u greedy--
biti pohlepan cashier--

14
00:00:45,100 --> 00:00:47,600
je koristiti najveći novčić moguće.

15
00:00:47,600 --> 00:00:50,670
Dakle, kad god imamo
četvrtine ćemo ih koristiti.

16
00:00:50,670 --> 00:00:54,100
I onda odjednom oni ponestane,
ćemo koristiti dimes, 0,10 $ svaki.

17
00:00:54,100 --> 00:00:58,840
Zatim nickels, 5 centi svaki, i
onda dolje na novčana jedinica, jedan posto svaki.

18
00:00:58,840 --> 00:01:01,792
Pomoću najveći novac
moguće, kad god je to moguće,

19
00:01:01,792 --> 00:01:07,350
mi bi se osiguralo da se sa što manje
novca moguće napraviti promjenu.

20
00:01:07,350 --> 00:01:09,180
>> Tako ćemo prošetati o ovome.

21
00:01:09,180 --> 00:01:11,660
Korisnik treba 0,32 $.

22
00:01:11,660 --> 00:01:14,200
Pa se pitamo,
možemo koristiti četvrtinu?

23
00:01:14,200 --> 00:01:15,560
Pa, da možemo.

24
00:01:15,560 --> 00:01:19,720
Dakle, sada smo ih samo znati
0,07 $, a mi smo koristili jedan novčić.

25
00:01:19,720 --> 00:01:20,970
>> Možemo li koristiti neku drugu četvrtinu?

26
00:01:20,970 --> 00:01:21,890
Pa ne.

27
00:01:21,890 --> 00:01:27,570
0,07 $ je manje od 0,25 $, tako da smo nastavili
na sljedeći najveći medalje na raspolaganju.

28
00:01:27,570 --> 00:01:30,690
Dimes su 0,10 $, a
opet, ne možemo koristiti dimes.

29
00:01:30,690 --> 00:01:35,480
Zbog dimes vrijedi $ 0,10, što
je više od iznosa promjene duguje.

30
00:01:35,480 --> 00:01:36,790
>> Idemo na nickels.

31
00:01:36,790 --> 00:01:40,890
I, da, istina, 0,05 $ je manje od
0.10-- $ tako da možemo koristiti nikal.

32
00:01:40,890 --> 00:01:46,104
Dakle, sada smo samo dužni korisniku 0.02 $,
a mi smo do sada koristili dva novčića.

33
00:01:46,104 --> 00:01:47,270
Ne možemo koristiti još jedan novčić.

34
00:01:47,270 --> 00:01:51,140
Pa onda smo nastavili do posljednjeg novčića na
raspolaganju, koji su novčana jedinica.

35
00:01:51,140 --> 00:01:52,270
>> I možemo koristiti denar?

36
00:01:52,270 --> 00:01:59,060
Pa, yes-- i mi završiti pomoću dva
novčana jedinica za ukupno četiri novčića.

37
00:01:59,060 --> 00:02:01,430
>> Nakon što se završi,
Program će izgledati ovako.

38
00:02:01,430 --> 00:02:03,710
Nakon što je korisnik pokreće
pohlepni programa, oni će

39
00:02:03,710 --> 00:02:07,270
se tražiti da daju količinu
promjena u dolarima da oni duguju.

40
00:02:07,270 --> 00:02:11,140
A onda tvoja volja Program izlaz
minimalna količina novca

41
00:02:11,140 --> 00:02:14,740
da je pohlepni blagajnik će koristiti
da bi taj iznos promjene.

42
00:02:14,740 --> 00:02:18,160
>> Dakle, sada ćemo razbiti ovaj
dolje u naše podzadatke.

43
00:02:18,160 --> 00:02:21,410
Prvo ćemo potaknuti naše
Korisnik za iznos od promjena.

44
00:02:21,410 --> 00:02:25,630
I, kao i sa bilo korisničkog unosa, želimo
pobrinite se da ćemo potvrditi da je ulaz

45
00:02:25,630 --> 00:02:29,360
i osigurati da možemo koristiti taj
ulaz za ostatak našeg programa.

46
00:02:29,360 --> 00:02:32,480
Onda ćemo uvijek
korištenje najveći točku mogući

47
00:02:32,480 --> 00:02:35,240
i pratiti kovanice koristi.

48
00:02:35,240 --> 00:02:39,080
I na kraju, ispisati konačni
broj kovanica koje smo koristili.

49
00:02:39,080 --> 00:02:40,970
>> Dakle, pričajmo o pitajući.

50
00:02:40,970 --> 00:02:43,550
Iznos mora centi,
i to je bilo dolara.

51
00:02:43,550 --> 00:02:48,440
I tako za dolare, idemo
koristiti tip float varijablu.

52
00:02:48,440 --> 00:02:52,390
Sada kad god pitati korisnika za unos,
želite biti sigurni da je valjana.

53
00:02:52,390 --> 00:02:56,640
I tako ovdje smo željeli iskoristiti
od petlje konstrukt do-while.

54
00:02:56,640 --> 00:03:00,320
>> A to-while petlja će izvršiti
Tijelo petlje barem jednom.

55
00:03:00,320 --> 00:03:01,650
Dakle, to dolazi u ruci.

56
00:03:01,650 --> 00:03:05,510
Znamo da moramo potaknuti
Korisnik barem jednom na plovak.

57
00:03:05,510 --> 00:03:07,100
Sada, ako je plovak vrijedi.

58
00:03:07,100 --> 00:03:07,710
To je odlično.

59
00:03:07,710 --> 00:03:08,460
Mi krenuti dalje.

60
00:03:08,460 --> 00:03:11,910
Ali, ako ne, petlja će se osigurati
da smo dobili pravilan plovak

61
00:03:11,910 --> 00:03:16,810
ponavljanjem kontinuirano do
korisnik nam daje valjanu vrijednost.

62
00:03:16,810 --> 00:03:18,760
>> Sada za do-vrijeme
petlje stanje, trebamo

63
00:03:18,760 --> 00:03:22,000
razmotriti što to znači
valjano ispliva.

64
00:03:22,000 --> 00:03:24,220
Tako da za kontekstu
ovaj problem, vjerojatno

65
00:03:24,220 --> 00:03:27,450
ima smisla samo
prihvatiti pozitivne vrijednosti.

66
00:03:27,450 --> 00:03:32,010
>> Dakle, kreće on-- smo dobije
vrijednost u dolarima od strane korisnika.

67
00:03:32,010 --> 00:03:35,380
No, imamo posla s kovanicama,
koji su u potpunosti u centi.

68
00:03:35,380 --> 00:03:38,660
$ 1 je ekvivalent za 100 centi.

69
00:03:38,660 --> 00:03:43,670
Dakle, dobra stvar za učiniti je da
pretvoriti te vrijednosti u centi.

70
00:03:43,670 --> 00:03:48,380
>> Sada kada se pretvaramo iz plovak
u cijeli broj, pa dolara za centi,

71
00:03:48,380 --> 00:03:52,230
želimo biti sigurni da smo oprezni
o pomičnim zarezom nepreciznosti.

72
00:03:52,230 --> 00:03:55,260
Dakle, to znači that-- reći
moj dolar value-- moj plovak

73
00:03:55,260 --> 00:04:00,260
value-- došlo je do čak $ 2, još uvijek
možda neke zalutale brojeve unutra.

74
00:04:00,260 --> 00:04:04,590
Dakle, želimo biti sigurni da ne samo da
ćemo pomnožiti sa 100 kako bi dobili centi,

75
00:04:04,590 --> 00:04:06,480
ali mi smo također zaokružuju.

76
00:04:06,480 --> 00:04:09,210
>> Tako sada imamo iznos
promjene duguje korisnika.

77
00:04:09,210 --> 00:04:13,430
Mi to originalno dobili u dolarima,
a sada smo ga pretvoriti u centi.

78
00:04:13,430 --> 00:04:17,029
Tako sada možemo nastaviti sa srcem
pohlepni algoritam, koji je uvijek

79
00:04:17,029 --> 00:04:19,220
pomoću moguća najveća novčić.

80
00:04:19,220 --> 00:04:21,930
Dok ovo radimo,
to je bitno da i mi

81
00:04:21,930 --> 00:04:25,360
pratiti koliko novca su
će biti vraćen korisniku

82
00:04:25,360 --> 00:04:28,630
kao i preostali
promijeniti duguje korisnika.

83
00:04:28,630 --> 00:04:31,130
>> Program će izgledati
nešto kao ovo.

84
00:04:31,130 --> 00:04:34,190
Nakon što ste dobili iznos
dolara i pretvoriti da bi centi,

85
00:04:34,190 --> 00:04:35,790
onda ćete ući u petlju.

86
00:04:35,790 --> 00:04:38,400
Dok četvrtine može biti
used-- tj

87
00:04:38,400 --> 00:04:43,660
dok je iznos promjene duguje
Korisnik je veći od ili jednak 0,25 $,

88
00:04:43,660 --> 00:04:45,040
ćete koristiti četvrtinu.

89
00:04:45,040 --> 00:04:47,000
>> I što sad radi pomoću četvrtine podrazumijeva?

90
00:04:47,000 --> 00:04:51,280
Pa, one-- ćete povećati novčić
računati da se vrati na korisnika.

91
00:04:51,280 --> 00:04:55,890
I drugo ćete smanjiti trenutni
iznos promjene duguje natrag korisniku

92
00:04:55,890 --> 00:04:57,520
od 0,25 $.

93
00:04:57,520 --> 00:05:00,680
>> Nakon ponavljanja da je do
četvrtine se više ne može koristiti,

94
00:05:00,680 --> 00:05:04,630
nastaviti na sljedeći najveći
coin-- u ovom slučaju novčića, 0,10 $.

95
00:05:04,630 --> 00:05:07,750
Tako ćete ući u taj petlju sve dok
više ne možete koristiti dimes.

96
00:05:07,750 --> 00:05:10,720
Zatim prijeđite na sljedeći
Najveći novčić, nickels.

97
00:05:10,720 --> 00:05:14,810
Nakon nickels se više ne može koristiti,
korištenje preostalog iznosa u novčana jedinica.

98
00:05:14,810 --> 00:05:17,800
I na kraju, print
broj kovanica koristi.

99
00:05:17,800 --> 00:05:20,350
>> Drugi način na koji možete
prići pohlepni problema

100
00:05:20,350 --> 00:05:22,950
je koristiti modulo pristup.

101
00:05:22,950 --> 00:05:25,690
Modulo je operator
koji vraća ostatak

102
00:05:25,690 --> 00:05:27,680
podjele između dva broja.

103
00:05:27,680 --> 00:05:30,270
Recimo imao sam 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Pa, 5 je faktor 50,
tako da je ostatak će biti 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- dobro, 10 također je faktor
od 50, pa ostatak je 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- dobro, bilo koji broj se mod
ne ide to imati bilo koji ostatak.

107
00:05:43,660 --> 00:05:45,510
>> Što je 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Pa, 49 samo ide u 50 puta.

109
00:05:47,910 --> 00:05:50,290
Dakle, ostatak će biti 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 ide
dati vam ostatak 3.

111
00:05:55,180 --> 00:05:59,120
>> Pa kako možemo koristiti modulo
i možda neki podjela

112
00:05:59,120 --> 00:06:01,690
provoditi naš pohlepni algoritam?

113
00:06:01,690 --> 00:06:05,550
Pa, mi i dalje želimo ostati vjerni
Srce je pohlepan algorithm-- da

114
00:06:05,550 --> 00:06:07,910
je pomoću najveći novčić moguće.

115
00:06:07,910 --> 00:06:14,570
>> Tako ćemo se zapitati da li možemo koristiti bilo
četvrtine da se vrate 0.32 $ za korisnika.

116
00:06:14,570 --> 00:06:20,070
Pa, 32 mod 25 daje
nas čini ostatak 0.07 $.

117
00:06:20,070 --> 00:06:24,500
Tako da nam kaže da možemo definitivno
koristiti jednu četvrtinu sa 0,07 $ preostalo.

118
00:06:24,500 --> 00:06:26,180
>> Možemo li onda koristiti dimes?

119
00:06:26,180 --> 00:06:32,740
Pa, no-- jer 0.07 $ mod
0,10 $ nam daje ostatak 7.

120
00:06:32,740 --> 00:06:34,960
10 ne ide u 7 na sve.

121
00:06:34,960 --> 00:06:36,390
>> Tada možemo koristiti nickels?

122
00:06:36,390 --> 00:06:40,490
Pa $ 0.07 mod 5 centi
nam daje dva preostala.

123
00:06:40,490 --> 00:06:42,930
I na kraju, možemo koristiti bilo penija?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 nam daje 0,
što je u konačnici ono

125
00:06:45,930 --> 00:06:48,160
želimo, jer tada
znači da smo se vratili

126
00:06:48,160 --> 00:06:50,160
korisniku sve promjene duguje.

127
00:06:50,160 --> 00:06:54,320
>> Tako sada imate dvije mogućnosti
provedbu pohlepni algorithm--

128
00:06:54,320 --> 00:06:59,230
jedan sa petlje i jedna s
Kombinacija modulom i podjele.

129
00:06:59,230 --> 00:07:03,010
Tako je konačno, samo trebamo
ispisati konačni broj kovanica.

130
00:07:03,010 --> 00:07:06,520
>> Ako sam ti htio da sam imao reći
3 kućnih ljubimaca i ta vrijednost je kodirano,

131
00:07:06,520 --> 00:07:09,240
onda ja samo mogu koristiti
Jednostavan ispis testa priopćenju.

132
00:07:09,240 --> 00:07:12,320
No, naša vrijednost je zapravo
varijable.

133
00:07:12,320 --> 00:07:15,260
Pa kako se otisnuti
vrijednosti pohranjene u varijablama?

134
00:07:15,260 --> 00:07:17,880
>> Za to smo se
Prednost rezervirana mjesta.

135
00:07:17,880 --> 00:07:21,540
Reci sam već proglasio
inicijalizirani broj n.

136
00:07:21,540 --> 00:07:25,170
Kasnije, ako sam htio ispisati da
vrijednost, onda bih napisati niz.

137
00:07:25,170 --> 00:07:30,500
I umjesto da te vrijednosti ja bih koristiti
rezervirano mjesto za tu integer--% i.

138
00:07:30,500 --> 00:07:33,800
Onda nakon niza, imam
zarez, zatim varijablu

139
00:07:33,800 --> 00:07:34,950
da želim ispisati.

140
00:07:34,950 --> 00:07:38,550
A kasnije, kada ispisuje,
to će ispisati vrijednost n.

141
00:07:38,550 --> 00:07:41,570
>> Također sam mogao koristiti rezervirano mjesto
za plovak, na primjer.

142
00:07:41,570 --> 00:07:44,000
Ako sam ti htio reći kako
koliko gotovine imam u džepu,

143
00:07:44,000 --> 00:07:46,820
onda bih mogao reći imam% f dolara.

144
00:07:46,820 --> 00:07:51,330
A kasnije, kada se ispisuje, onda je n hoće
zauzeti mjesto tog držača mjesta.

145
00:07:51,330 --> 00:07:55,530
Mogao sam isto tako, na primjer, koristiti nekoliko
rezervirana za nekoliko varijabli.

146
00:07:55,530 --> 00:07:57,590
Dakle, dokle god sam popis
ih u red, onda sam

147
00:07:57,590 --> 00:08:00,390
mogu vam reći koliko
psi i mačke imam.

148
00:08:00,390 --> 00:08:03,710
>> Sada znamo kako upozoravaju
Korisnik za iznos od promjena,

149
00:08:03,710 --> 00:08:06,130
bi se osiguralo da taj ulaz
vrijedi, a onda smo

150
00:08:06,130 --> 00:08:10,370
imaju dva moguća načina provedbe
pohlepni algoritam uvijek koristite

151
00:08:10,370 --> 00:08:12,090
Najveći novčić moguće.

152
00:08:12,090 --> 00:08:15,050
Budući da smo pratili
koliko novca kojeg koristimo

153
00:08:15,050 --> 00:08:19,210
tada možemo ispisati tu vrijednost na kraju,
objasniti korisniku koliko novca oni

154
00:08:19,210 --> 00:08:20,240
Povratak.

155
00:08:20,240 --> 00:08:24,240
>> Moje ime je Amayla, a to je CS50.

156
00:08:24,240 --> 00:08:25,915

