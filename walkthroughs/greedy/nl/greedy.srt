1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Laten we hebberig.

3
00:00:02,900 --> 00:00:06,810
In hebzuchtig, onze taak is om te spelen
de rol van een hebzuchtige kassier.

4
00:00:06,810 --> 00:00:09,750
De gebruiker zal ons vertellen hoe
veel verandering die we aan hen te danken,

5
00:00:09,750 --> 00:00:13,520
en dan is het onze taak om te berekenen
het minimum aantal munten

6
00:00:13,520 --> 00:00:17,240
die we kunnen gebruiken om ervoor te zorgen
dat bedrag van de verandering.

7
00:00:17,240 --> 00:00:19,560
>> Laten we beginnen met een voorbeeld.

8
00:00:19,560 --> 00:00:23,170
Zeggen dat de gebruiker nodig heeft $ 0,32 terug.

9
00:00:23,170 --> 00:00:28,960
We kunnen dit doen door het geven
ze 32 pence, een cent per stuk.

10
00:00:28,960 --> 00:00:35,180
Of ik kan ook gebruik maken van vijf coins-- door
waardoor ze drie dubbeltjes, $ 0,10 per aandeel,

11
00:00:35,180 --> 00:00:38,060
en twee centen, $ 0,02 per stuk.

12
00:00:38,060 --> 00:00:42,580
Maar konden we zelfs gebruik maken van
minder munten om dat te maken?

13
00:00:42,580 --> 00:00:45,100
>> De hele tactiek in greedy--
een gulzige cashier-- zijn

14
00:00:45,100 --> 00:00:47,600
is de grootste munt wenden.

15
00:00:47,600 --> 00:00:50,670
Dus wanneer we
kwartalen zullen we ze gebruiken.

16
00:00:50,670 --> 00:00:54,100
En dan een keer die opraken,
we zullen dubbeltjes, $ 0,10 per aandeel te gebruiken.

17
00:00:54,100 --> 00:00:58,840
Dan stuivers, 5 cent per stuk, en
dan omlaag naar centen, één cent per stuk.

18
00:00:58,840 --> 00:01:01,792
Met de grootste munt
mogelijk wanneer we maar kunnen,

19
00:01:01,792 --> 00:01:07,350
we ervoor zorgen dat we gebruik maken van de minste aantal
munten mogelijk de verandering.

20
00:01:07,350 --> 00:01:09,180
>> Dus laten we lopen deze door.

21
00:01:09,180 --> 00:01:11,660
De gebruiker moet $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Dus vragen we ons af,
kunnen we een kwart gebruiken?

23
00:01:14,200 --> 00:01:15,560
Nou, ja kunnen wij.

24
00:01:15,560 --> 00:01:19,720
Dus nu weten we ze alleen
$ 0,07, en we gebruikten een munt.

25
00:01:19,720 --> 00:01:20,970
>> Kunnen we nog eens een kwart gebruiken?

26
00:01:20,970 --> 00:01:21,890
Welnee.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 minder dan $ 0,25, dus we gaan
naar de volgende grootste munt beschikbaar.

28
00:01:27,570 --> 00:01:30,690
Dimes zijn $ 0,10, en
nogmaals, we kunnen niet dubbeltjes gebruiken.

29
00:01:30,690 --> 00:01:35,480
Omdat dubbeltjes zijn de moeite waard $ 0,10, die
is meer dan het bedrag van de verandering verschuldigd.

30
00:01:35,480 --> 00:01:36,790
>> We gaan naar stuivers.

31
00:01:36,790 --> 00:01:40,890
En, jawel, $ 0,05 minder dan
$ 0.10-- dus kunnen we een nikkel te gebruiken.

32
00:01:40,890 --> 00:01:46,104
Dus nu hebben we alleen te danken aan de gebruiker $ 0,02,
en we hebben tot nu toe gebruikte twee munten.

33
00:01:46,104 --> 00:01:47,270
We kunnen een ander nikkel niet gebruiken.

34
00:01:47,270 --> 00:01:51,140
Dus dan gaan we naar de laatste munt in
onze beschikking, die de centen zijn.

35
00:01:51,140 --> 00:01:52,270
>> En kunnen we gebruik maken van penny?

36
00:01:52,270 --> 00:01:59,060
Nou, yes-- en we uiteindelijk met behulp van twee
pence voor een totaal van vier munten.

37
00:01:59,060 --> 00:02:01,430
>> Zodra je klaar bent, de
programma ziet er als volgt uit.

38
00:02:01,430 --> 00:02:03,710
Zodra de gebruiker loopt de
hebzuchtig programma, zullen ze

39
00:02:03,710 --> 00:02:07,270
gevraagd om de hoeveelheid te geven
verandering in dollars dat ze verschuldigd zijn.

40
00:02:07,270 --> 00:02:11,140
En dan is uw programma zal de uitgang
de minimale hoeveelheid munten

41
00:02:11,140 --> 00:02:14,740
dat de hebzuchtige kassier zou gebruiken
om dat bedrag van de verandering aan te brengen.

42
00:02:14,740 --> 00:02:18,160
>> Dus nu laten we breken deze
naar beneden in onze subtaken.

43
00:02:18,160 --> 00:02:21,410
Ten eerste gaan we vragen ons
gebruiker voor een bedrag van verandering.

44
00:02:21,410 --> 00:02:25,630
En, net als bij elke input van de gebruiker, willen we
ervoor te zorgen dat we valideren die input

45
00:02:25,630 --> 00:02:29,360
en ervoor zorgen dat we kunnen gebruiken dat
input voor de rest van ons programma.

46
00:02:29,360 --> 00:02:32,480
Dan gaan we altijd
gebruik maken van de grootste punt mogelijk

47
00:02:32,480 --> 00:02:35,240
en bijhouden van de gebruikte munten.

48
00:02:35,240 --> 00:02:39,080
En tot slot, drukt u de laatste
aantal munten die we gebruikten.

49
00:02:39,080 --> 00:02:40,970
>> Dus laten we praten over gevraagd.

50
00:02:40,970 --> 00:02:43,550
Het bedrag moet centen te maken,
en dit in dollars.

51
00:02:43,550 --> 00:02:48,440
En dus voor dollars, we gaan
aan de vlotter type variabele gebruiken.

52
00:02:48,440 --> 00:02:52,390
Nu wanneer u een gebruiker vragen om input,
wilt u ervoor zorgen dat het geldig is.

53
00:02:52,390 --> 00:02:56,640
En dus even we willen profiteren
van de do-while lus construct.

54
00:02:56,640 --> 00:03:00,320
>> Een do-while lus zal uitvoeren van de
orgaan van de lus ten minste eenmaal.

55
00:03:00,320 --> 00:03:01,650
Dus dit komt goed van pas.

56
00:03:01,650 --> 00:03:05,510
We weten dat we nodig hebben om de prompt
gebruiker minstens een keer voor een vlotter.

57
00:03:05,510 --> 00:03:07,100
Nu als dat float geldig is.

58
00:03:07,100 --> 00:03:07,710
Dat is geweldig.

59
00:03:07,710 --> 00:03:08,460
We gaan verder.

60
00:03:08,460 --> 00:03:11,910
Maar zo niet, zal de lus te verzekeren
dat we een goede float

61
00:03:11,910 --> 00:03:16,810
door voortdurend te herhalen totdat
de gebruiker geeft ons een geldige waarde.

62
00:03:16,810 --> 00:03:18,760
>> Nu voor de do-while
lus staat, moeten we

63
00:03:18,760 --> 00:03:22,000
om te overwegen wat het betekent
naar een ongeldig vlotter.

64
00:03:22,000 --> 00:03:24,220
Dus voor de context van
dit probleem vermoedelijk

65
00:03:24,220 --> 00:03:27,450
is het zinvol gewoon
aanvaarden positieve waarden.

66
00:03:27,450 --> 00:03:32,010
>> Zo ontroerend on-- hebben we behaalde een
waarde in dollars van de gebruiker.

67
00:03:32,010 --> 00:03:35,380
Maar we hebben te maken met munten,
die geheel in centen.

68
00:03:35,380 --> 00:03:38,660
$ 1 is gelijk aan 100 cent.

69
00:03:38,660 --> 00:03:43,670
Dus een goed ding om te doen is om
omzetten die waarden in cent.

70
00:03:43,670 --> 00:03:48,380
>> Nu bij het converteren van een vlotter
een integer, zodat dollars centen,

71
00:03:48,380 --> 00:03:52,230
we willen ervoor zorgen dat we een zorgvuldige
over floating-point onnauwkeurigheid.

72
00:03:52,230 --> 00:03:55,260
Dus dat betekent dat-- zeggen
mijn dollar value-- mijn float

73
00:03:55,260 --> 00:04:00,260
value-- was nog $ 2 nog steeds
kunnen enkele verdwaalde nummers in.

74
00:04:00,260 --> 00:04:04,590
Dus we willen ervoor zorgen dat niet alleen
we vermenigvuldigen met 100 om de centen te krijgen,

75
00:04:04,590 --> 00:04:06,480
maar we ronden het ook af.

76
00:04:06,480 --> 00:04:09,210
>> Dus nu hebben we het bedrag
van verandering te danken aan de gebruiker.

77
00:04:09,210 --> 00:04:13,430
We oorspronkelijk verkregen in dollars,
en nu hebben we het omgezet in cent.

78
00:04:13,430 --> 00:04:17,029
Dus nu kunnen we verder met het hart van
de hebzuchtige algoritme, dat is altijd

79
00:04:17,029 --> 00:04:19,220
met de grootste munt mogelijk.

80
00:04:19,220 --> 00:04:21,930
Terwijl we dit doen,
is het essentieel dat we ook

81
00:04:21,930 --> 00:04:25,360
bijhouden hoeveel munten zijn
zal worden teruggegeven aan de gebruiker

82
00:04:25,360 --> 00:04:28,630
en de resterende
wijzigen verschuldigd is aan de gebruiker.

83
00:04:28,630 --> 00:04:31,130
>> Het programma ziet er
iets zoals dit.

84
00:04:31,130 --> 00:04:34,190
Nadat je het bedrag van
dollars en centen daar weer,

85
00:04:34,190 --> 00:04:35,790
dan krijg je een lus in te voeren.

86
00:04:35,790 --> 00:04:38,400
Terwijl kwartalen kan worden
used-- namelijk

87
00:04:38,400 --> 00:04:43,660
terwijl het bedrag van de verandering te danken aan de
user groter dan of gelijk aan $ 0,25,

88
00:04:43,660 --> 00:04:45,040
je zult een kwart te gebruiken.

89
00:04:45,040 --> 00:04:47,000
>> Nu, wat doet met behulp van een kwart met zich meebrengen?

90
00:04:47,000 --> 00:04:51,280
Nou, een-- je de munt te vergroten
telling terug te sturen naar de gebruiker.

91
00:04:51,280 --> 00:04:55,890
En ten tweede heb je de huidige daling
bedrag van de verandering te danken aan de gebruiker

92
00:04:55,890 --> 00:04:57,520
met $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Na herhaling dat tot
kwartalen kan niet meer worden gebruikt,

94
00:05:00,680 --> 00:05:04,630
doorgaan naar de volgende grootste
coin-- in dit geval dubbeltjes, $ 0,10.

95
00:05:04,630 --> 00:05:07,750
Dus je zult dat lus in te voeren totdat
kunt u niet meer gebruikt dubbeltjes.

96
00:05:07,750 --> 00:05:10,720
Ga dan naar de volgende
De grootste munt, stuivers.

97
00:05:10,720 --> 00:05:14,810
Na stuivers niet meer kan worden gebruikt,
gebruik maken van het resterende bedrag in centen.

98
00:05:14,810 --> 00:05:17,800
En tot slot, drukt u de
aantal munten gebruikt.

99
00:05:17,800 --> 00:05:20,350
>> Een andere manier waarop u kunt
benaderen de gulzige probleem

100
00:05:20,350 --> 00:05:22,950
is de modulo benadering.

101
00:05:22,950 --> 00:05:25,690
Modulo is een operator
voor het overige terugkeert

102
00:05:25,690 --> 00:05:27,680
van de scheiding tussen twee nummers.

103
00:05:27,680 --> 00:05:30,270
Zeggen dat ik had 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Nou, 5 is een factor 50,
dus de rest zal worden 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- goed, 10 is ook een factor
van 50, zodat de rest 0 is.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- goed, een aantal mod zelf
is niet van plan om eventuele restant te hebben.

107
00:05:43,660 --> 00:05:45,510
>> Hoe zit het met 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Nou, 49 gaat slechts in 50 keer.

109
00:05:47,910 --> 00:05:50,290
Dus de rest zal worden 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 gaat
geven u een restant van 3.

111
00:05:55,180 --> 00:05:59,120
>> Dus hoe kunnen we gebruik maken van modulo
en misschien wat divisie

112
00:05:59,120 --> 00:06:01,690
onze gulzige algoritme?

113
00:06:01,690 --> 00:06:05,550
Nou, willen we nog steeds trouw aan de verblijven
hart van de gulzige algorithm-- dat

114
00:06:05,550 --> 00:06:07,910
is het gebruik van de grootste munt mogelijk te maken.

115
00:06:07,910 --> 00:06:14,570
>> Dus laten we ons afvragen of we nog kunnen gebruiken
quarters terug $ 0,32 voor de gebruiker.

116
00:06:14,570 --> 00:06:20,070
Nou, 32 mod 25 geeft
ons een restant van $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Dus dat ons vertelt dat we kunnen zeker
Gebruik een kwart met $ 0,07 over.

118
00:06:24,500 --> 00:06:26,180
>> Kunnen we elke dubbeltjes gebruiken dan?

119
00:06:26,180 --> 00:06:32,740
Nou, no-- omdat $ 0,07 mod
$ 0,10 geeft ons een restant van 7.

120
00:06:32,740 --> 00:06:34,960
10 niet in 7 gaan helemaal.

121
00:06:34,960 --> 00:06:36,390
>> Dan kunnen we stuivers gebruiken?

122
00:06:36,390 --> 00:06:40,490
Nou $ 0,07 mod 5 cent
geeft ons twee overgebleven.

123
00:06:40,490 --> 00:06:42,930
En tot slot, kunnen wij geen centen gebruiken?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 geeft ons 0,
dat is uiteindelijk wat

125
00:06:45,930 --> 00:06:48,160
willen we want dan dat
betekent dat we terug

126
00:06:48,160 --> 00:06:50,160
om de gebruiker alle van de wijziging verschuldigd.

127
00:06:50,160 --> 00:06:54,320
>> Dus nu heb je twee mogelijkheden om
de uitvoering van de hebzuchtige algorithm--

128
00:06:54,320 --> 00:06:59,230
een met lussen en een met een
combinatie van modulo en verdeeldheid.

129
00:06:59,230 --> 00:07:03,010
Dus eindelijk, we hoeven alleen maar te
print het uiteindelijke aantal munten.

130
00:07:03,010 --> 00:07:06,520
>> Als ik wilde je dat ik zeg
3 huisdieren en deze waarde werd hardcoded,

131
00:07:06,520 --> 00:07:09,240
dan kon ik gewoon gebruik maken van een
eenvoudige printtest verklaring.

132
00:07:09,240 --> 00:07:12,320
Maar onze waarde is in feite
opgeslagen in een variabele.

133
00:07:12,320 --> 00:07:15,260
Dus hoe kan je afdrukken van de
waarden die zijn opgeslagen in de variabelen?

134
00:07:15,260 --> 00:07:17,880
>> Daarvoor nemen we
voordeel van placeholders.

135
00:07:17,880 --> 00:07:21,540
Zeggen dat ik had al verklaard
een geïnitialiseerde integer n.

136
00:07:21,540 --> 00:07:25,170
Later op als ik wilde om af te drukken dat
waarde, dan zou ik de string te schrijven.

137
00:07:25,170 --> 00:07:30,500
En in plaats van dat de waarde die ik zou gebruiken
placeholder voor dat integer--% i.

138
00:07:30,500 --> 00:07:33,800
Dan na de string, ik heb een
komma, gevolgd door de variabele

139
00:07:33,800 --> 00:07:34,950
dat ik wil afdrukken.

140
00:07:34,950 --> 00:07:38,550
En later, toen het afdrukken,
het zal de waarde van n te drukken.

141
00:07:38,550 --> 00:07:41,570
>> Ik kan ook een tijdelijke aanduiding gebruiken
een vlotter, bijvoorbeeld.

142
00:07:41,570 --> 00:07:44,000
Als ik wilde je vertellen hoe
veel geld heb ik in mijn zak,

143
00:07:44,000 --> 00:07:46,820
dan zou ik zeggen dat ik% f dollar.

144
00:07:46,820 --> 00:07:51,330
En later als het wordt afgedrukt, dan n zal
in de plaats van die plaats houder.

145
00:07:51,330 --> 00:07:55,530
Ik kan ook, bijvoorbeeld, gebruiken verschillende
placeholders voor meerdere variabelen.

146
00:07:55,530 --> 00:07:57,590
Dus zolang ik de lijst
ze in orde is, dan heb ik

147
00:07:57,590 --> 00:08:00,390
kan u vertellen hoeveel
honden en katten die ik heb.

148
00:08:00,390 --> 00:08:03,710
>> Nu weten we hoe de prompt
gebruiker voor een bedrag van verandering,

149
00:08:03,710 --> 00:08:06,130
dat de ingang
geldig is, en dan hebben we

150
00:08:06,130 --> 00:08:10,370
hebben twee mogelijkheden om de uitvoering
de hebzuchtige algoritme altijd met behulp

151
00:08:10,370 --> 00:08:12,090
de grootste munt mogelijk te maken.

152
00:08:12,090 --> 00:08:15,050
Omdat we houden van hebben gehouden
hoeveel munten we gebruiken,

153
00:08:15,050 --> 00:08:19,210
kunnen we vervolgens afdrukken die waarde aan het eind,
vertelt de gebruiker hoeveel munten ze

154
00:08:19,210 --> 00:08:20,240
terug gaan.

155
00:08:20,240 --> 00:08:24,240
>> Mijn naam is de Amayla, en dit is CS50.

156
00:08:24,240 --> 00:08:25,915

