Laten we hebberig. In hebzuchtig, onze taak is om te spelen de rol van een hebzuchtige kassier. De gebruiker zal ons vertellen hoe veel verandering die we aan hen te danken, en dan is het onze taak om te berekenen het minimum aantal munten die we kunnen gebruiken om ervoor te zorgen dat bedrag van de verandering. 

Laten we beginnen met een voorbeeld. Zeggen dat de gebruiker nodig heeft $ 0,32 terug. We kunnen dit doen door het geven ze 32 pence, een cent per stuk. Of ik kan ook gebruik maken van vijf coins-- door waardoor ze drie dubbeltjes, $ 0,10 per aandeel, en twee centen, $ 0,02 per stuk. Maar konden we zelfs gebruik maken van minder munten om dat te maken? 

De hele tactiek in greedy-- een gulzige cashier-- zijn is de grootste munt wenden. Dus wanneer we kwartalen zullen we ze gebruiken. En dan een keer die opraken, we zullen dubbeltjes, $ 0,10 per aandeel te gebruiken. Dan stuivers, 5 cent per stuk, en dan omlaag naar centen, één cent per stuk. Met de grootste munt mogelijk wanneer we maar kunnen, we ervoor zorgen dat we gebruik maken van de minste aantal munten mogelijk de verandering. 

Dus laten we lopen deze door. De gebruiker moet $ 0,32. Dus vragen we ons af, kunnen we een kwart gebruiken? Nou, ja kunnen wij. Dus nu weten we ze alleen $ 0,07, en we gebruikten een munt. 

Kunnen we nog eens een kwart gebruiken? Welnee. $ 0,07 minder dan $ 0,25, dus we gaan naar de volgende grootste munt beschikbaar. Dimes zijn $ 0,10, en nogmaals, we kunnen niet dubbeltjes gebruiken. Omdat dubbeltjes zijn de moeite waard $ 0,10, die is meer dan het bedrag van de verandering verschuldigd. 

We gaan naar stuivers. En, jawel, $ 0,05 minder dan $ 0.10-- dus kunnen we een nikkel te gebruiken. Dus nu hebben we alleen te danken aan de gebruiker $ 0,02, en we hebben tot nu toe gebruikte twee munten. We kunnen een ander nikkel niet gebruiken. Dus dan gaan we naar de laatste munt in onze beschikking, die de centen zijn. 

En kunnen we gebruik maken van penny? Nou, yes-- en we uiteindelijk met behulp van twee pence voor een totaal van vier munten. 

Zodra je klaar bent, de programma ziet er als volgt uit. Zodra de gebruiker loopt de hebzuchtig programma, zullen ze gevraagd om de hoeveelheid te geven verandering in dollars dat ze verschuldigd zijn. En dan is uw programma zal de uitgang de minimale hoeveelheid munten dat de hebzuchtige kassier zou gebruiken om dat bedrag van de verandering aan te brengen. 

Dus nu laten we breken deze naar beneden in onze subtaken. Ten eerste gaan we vragen ons gebruiker voor een bedrag van verandering. En, net als bij elke input van de gebruiker, willen we ervoor te zorgen dat we valideren die input en ervoor zorgen dat we kunnen gebruiken dat input voor de rest van ons programma. Dan gaan we altijd gebruik maken van de grootste punt mogelijk en bijhouden van de gebruikte munten. En tot slot, drukt u de laatste aantal munten die we gebruikten. 

Dus laten we praten over gevraagd. Het bedrag moet centen te maken, en dit in dollars. En dus voor dollars, we gaan aan de vlotter type variabele gebruiken. Nu wanneer u een gebruiker vragen om input, wilt u ervoor zorgen dat het geldig is. En dus even we willen profiteren van de do-while lus construct. 

Een do-while lus zal uitvoeren van de orgaan van de lus ten minste eenmaal. Dus dit komt goed van pas. We weten dat we nodig hebben om de prompt gebruiker minstens een keer voor een vlotter. Nu als dat float geldig is. Dat is geweldig. We gaan verder. Maar zo niet, zal de lus te verzekeren dat we een goede float door voortdurend te herhalen totdat de gebruiker geeft ons een geldige waarde. 

Nu voor de do-while lus staat, moeten we om te overwegen wat het betekent naar een ongeldig vlotter. Dus voor de context van dit probleem vermoedelijk is het zinvol gewoon aanvaarden positieve waarden. 

Zo ontroerend on-- hebben we behaalde een waarde in dollars van de gebruiker. Maar we hebben te maken met munten, die geheel in centen. $ 1 is gelijk aan 100 cent. Dus een goed ding om te doen is om omzetten die waarden in cent. 

Nu bij het converteren van een vlotter een integer, zodat dollars centen, we willen ervoor zorgen dat we een zorgvuldige over floating-point onnauwkeurigheid. Dus dat betekent dat-- zeggen mijn dollar value-- mijn float value-- was nog $ 2 nog steeds kunnen enkele verdwaalde nummers in. Dus we willen ervoor zorgen dat niet alleen we vermenigvuldigen met 100 om de centen te krijgen, maar we ronden het ook af. 

Dus nu hebben we het bedrag van verandering te danken aan de gebruiker. We oorspronkelijk verkregen in dollars, en nu hebben we het omgezet in cent. Dus nu kunnen we verder met het hart van de hebzuchtige algoritme, dat is altijd met de grootste munt mogelijk. Terwijl we dit doen, is het essentieel dat we ook bijhouden hoeveel munten zijn zal worden teruggegeven aan de gebruiker en de resterende wijzigen verschuldigd is aan de gebruiker. 

Het programma ziet er iets zoals dit. Nadat je het bedrag van dollars en centen daar weer, dan krijg je een lus in te voeren. Terwijl kwartalen kan worden used-- namelijk terwijl het bedrag van de verandering te danken aan de user groter dan of gelijk aan $ 0,25, je zult een kwart te gebruiken. 

Nu, wat doet met behulp van een kwart met zich meebrengen? Nou, een-- je de munt te vergroten telling terug te sturen naar de gebruiker. En ten tweede heb je de huidige daling bedrag van de verandering te danken aan de gebruiker met $ 0,25. 

Na herhaling dat tot kwartalen kan niet meer worden gebruikt, doorgaan naar de volgende grootste coin-- in dit geval dubbeltjes, $ 0,10. Dus je zult dat lus in te voeren totdat kunt u niet meer gebruikt dubbeltjes. Ga dan naar de volgende De grootste munt, stuivers. Na stuivers niet meer kan worden gebruikt, gebruik maken van het resterende bedrag in centen. En tot slot, drukt u de aantal munten gebruikt. 

Een andere manier waarop u kunt benaderen de gulzige probleem is de modulo benadering. Modulo is een operator voor het overige terugkeert van de scheiding tussen twee nummers. Zeggen dat ik had 50 mod 5. Nou, 5 is een factor 50, dus de rest zal worden 0. 50 mod 10-- goed, 10 is ook een factor van 50, zodat de rest 0 is. 50 mod 50-- goed, een aantal mod zelf is niet van plan om eventuele restant te hebben. 

Hoe zit het met 50 mod 49? Nou, 49 gaat slechts in 50 keer. Dus de rest zal worden 1. 53 mod 50 gaat geven u een restant van 3. 

Dus hoe kunnen we gebruik maken van modulo en misschien wat divisie onze gulzige algoritme? Nou, willen we nog steeds trouw aan de verblijven hart van de gulzige algorithm-- dat is het gebruik van de grootste munt mogelijk te maken. 

Dus laten we ons afvragen of we nog kunnen gebruiken quarters terug $ 0,32 voor de gebruiker. Nou, 32 mod 25 geeft ons een restant van $ 0,07. Dus dat ons vertelt dat we kunnen zeker Gebruik een kwart met $ 0,07 over. 

Kunnen we elke dubbeltjes gebruiken dan? Nou, no-- omdat $ 0,07 mod $ 0,10 geeft ons een restant van 7. 10 niet in 7 gaan helemaal. 

Dan kunnen we stuivers gebruiken? Nou $ 0,07 mod 5 cent geeft ons twee overgebleven. En tot slot, kunnen wij geen centen gebruiken? 2 mod 1 geeft ons 0, dat is uiteindelijk wat willen we want dan dat betekent dat we terug om de gebruiker alle van de wijziging verschuldigd. 

Dus nu heb je twee mogelijkheden om de uitvoering van de hebzuchtige algorithm-- een met lussen en een met een combinatie van modulo en verdeeldheid. Dus eindelijk, we hoeven alleen maar te print het uiteindelijke aantal munten. 

Als ik wilde je dat ik zeg 3 huisdieren en deze waarde werd hardcoded, dan kon ik gewoon gebruik maken van een eenvoudige printtest verklaring. Maar onze waarde is in feite opgeslagen in een variabele. Dus hoe kan je afdrukken van de waarden die zijn opgeslagen in de variabelen? 

Daarvoor nemen we voordeel van placeholders. Zeggen dat ik had al verklaard een geïnitialiseerde integer n. Later op als ik wilde om af te drukken dat waarde, dan zou ik de string te schrijven. En in plaats van dat de waarde die ik zou gebruiken placeholder voor dat integer--% i. Dan na de string, ik heb een komma, gevolgd door de variabele dat ik wil afdrukken. En later, toen het afdrukken, het zal de waarde van n te drukken. 

Ik kan ook een tijdelijke aanduiding gebruiken een vlotter, bijvoorbeeld. Als ik wilde je vertellen hoe veel geld heb ik in mijn zak, dan zou ik zeggen dat ik% f dollar. En later als het wordt afgedrukt, dan n zal in de plaats van die plaats houder. Ik kan ook, bijvoorbeeld, gebruiken verschillende placeholders voor meerdere variabelen. Dus zolang ik de lijst ze in orde is, dan heb ik kan u vertellen hoeveel honden en katten die ik heb. 

Nu weten we hoe de prompt gebruiker voor een bedrag van verandering, dat de ingang geldig is, en dan hebben we hebben twee mogelijkheden om de uitvoering de hebzuchtige algoritme altijd met behulp de grootste munt mogelijk te maken. Omdat we houden van hebben gehouden hoeveel munten we gebruiken, kunnen we vervolgens afdrukken die waarde aan het eind, vertelt de gebruiker hoeveel munten ze terug gaan. 

Mijn naam is de Amayla, en dit is CS50. 