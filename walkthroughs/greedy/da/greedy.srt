1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Lad os få grådige.

3
00:00:02,900 --> 00:00:06,810
I grådige, vores opgave er at spille
rollen som en grådig kasserer.

4
00:00:06,810 --> 00:00:09,750
Brugeren vil fortælle os, hvordan
meget forandring, vi skylder dem,

5
00:00:09,750 --> 00:00:13,520
og så vores opgave er at beregne
det mindste antal mønter

6
00:00:13,520 --> 00:00:17,240
som vi kan bruge til at gøre
at mængden af ​​forandringer.

7
00:00:17,240 --> 00:00:19,560
>> Lad os starte med et eksempel.

8
00:00:19,560 --> 00:00:23,170
Sig brugeren kræver $ 0,32 tilbage.

9
00:00:23,170 --> 00:00:28,960
Vi kunne gøre dette ved at give
dem 32 øre, en cent hver.

10
00:00:28,960 --> 00:00:35,180
Eller jeg kunne også bruge fem coins-- ved
giver dem tre Dimes, $ 0,10 hver,

11
00:00:35,180 --> 00:00:38,060
og to øre, $ 0,02 hver.

12
00:00:38,060 --> 00:00:42,580
Men kunne vi bruge selv
færre mønter til at gøre det?

13
00:00:42,580 --> 00:00:45,100
>> Hele taktik i greedy--
at være en grådig cashier--

14
00:00:45,100 --> 00:00:47,600
er at bruge den størst mulige mønt.

15
00:00:47,600 --> 00:00:50,670
Så når vi har
kvartaler vi vil bruge dem.

16
00:00:50,670 --> 00:00:54,100
Og derefter en gang de løber tør,
vi vil bruge Dimes, $ 0,10 hver.

17
00:00:54,100 --> 00:00:58,840
Derefter Nickels, 5 cents hver, og
derefter ned til øre, en cent hver.

18
00:00:58,840 --> 00:01:01,792
Ved at anvende den største mønt
muligt, når vi kan,

19
00:01:01,792 --> 00:01:07,350
sikrer vi, at vi bruger færrest
af mønter muligt at foretage ændringen.

20
00:01:07,350 --> 00:01:09,180
>> Så lad os gå dette igennem.

21
00:01:09,180 --> 00:01:11,660
Brugeren skal $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Så spørger vi os selv,
kan vi bruge en fjerdedel?

23
00:01:14,200 --> 00:01:15,560
Nå, ja vi kan.

24
00:01:15,560 --> 00:01:19,720
Så nu er vi kun kender dem
$ 0,07, og vi brugte en mønt.

25
00:01:19,720 --> 00:01:20,970
>> Kan vi bruge en anden kvartal?

26
00:01:20,970 --> 00:01:21,890
Nå, nej.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 er mindre end $ 0,25, så vi fortsætter
til næste største mønt til rådighed.

28
00:01:27,570 --> 00:01:30,690
Dimes er $ 0,10, og
igen, kan vi ikke bruge Dimes.

29
00:01:30,690 --> 00:01:35,480
Fordi Dimes er værd $ 0,10, hvilket
er mere end mængden af ​​forandring skyldige.

30
00:01:35,480 --> 00:01:36,790
>> Vi går til nickels.

31
00:01:36,790 --> 00:01:40,890
Og ja ja, $ 0,05 er mindre end
$ 0.10-- så vi kan bruge en nikkel.

32
00:01:40,890 --> 00:01:46,104
Så nu er vi kun skylder brugeren $ 0,02,
og vi har hidtil brugt to mønter.

33
00:01:46,104 --> 00:01:47,270
Vi kan ikke bruge en anden nikkel.

34
00:01:47,270 --> 00:01:51,140
Så vi gå videre til den sidste mønt på
vores rådighed, som er de småpenge.

35
00:01:51,140 --> 00:01:52,270
>> Og kan vi bruge øre?

36
00:01:52,270 --> 00:01:59,060
Nå, yes-- og vi ender med at bruge to
øre for i alt fire mønter.

37
00:01:59,060 --> 00:02:01,430
>> Når du er færdig,
Programmet vil se sådan ud.

38
00:02:01,430 --> 00:02:03,710
Når brugeren kører
grådige program, vil de

39
00:02:03,710 --> 00:02:07,270
blive bedt om at give mængden af
ændring i dollars, som de er skyldige.

40
00:02:07,270 --> 00:02:11,140
Og så dit program vil output
minimum af mønter

41
00:02:11,140 --> 00:02:14,740
at den grådige cashier ville bruge
at foretage denne mængde forandring.

42
00:02:14,740 --> 00:02:18,160
>> Så lad os nu bryde dette
ned i vores underopgaver.

43
00:02:18,160 --> 00:02:21,410
Først vi vil bede vores
brugeren for et beløb på forandring.

44
00:02:21,410 --> 00:02:25,630
Og som med alle brugerinput, ønsker vi at
sikre, at vi validere, at input

45
00:02:25,630 --> 00:02:29,360
og sikre, at vi kan bruge det
input til resten af ​​vores program.

46
00:02:29,360 --> 00:02:32,480
Så vi kommer til at altid
bruge den størst mulige point

47
00:02:32,480 --> 00:02:35,240
og holde styr på mønterne brugt.

48
00:02:35,240 --> 00:02:39,080
Og endelig, udskrive den endelige
antal mønter, som vi brugte.

49
00:02:39,080 --> 00:02:40,970
>> Så lad os tale om at spørge.

50
00:02:40,970 --> 00:02:43,550
Beløbet skal gøre cents,
og dette er i dollar.

51
00:02:43,550 --> 00:02:48,440
Og så for dollars, vi kommer
at bruge float variabel type.

52
00:02:48,440 --> 00:02:52,390
Nu når du spørger en bruger om input,
du vil være sikker på, at det er gyldigt.

53
00:02:52,390 --> 00:02:56,640
Og så her vi gerne benytte
af gør-while-løkke konstruktion.

54
00:02:56,640 --> 00:03:00,320
>> En gør-while-løkke vil udføre
organ af løkken mindst én gang.

55
00:03:00,320 --> 00:03:01,650
Så det kommer i handy.

56
00:03:01,650 --> 00:03:05,510
Vi ved, at vi er nødt til at bede
bruger mindst én gang for en svømmer.

57
00:03:05,510 --> 00:03:07,100
Nu, hvis der svæver er gyldig.

58
00:03:07,100 --> 00:03:07,710
Det er godt.

59
00:03:07,710 --> 00:03:08,460
Vi går videre.

60
00:03:08,460 --> 00:03:11,910
Men hvis ikke, vil løkken sikre
at vi får en ordentlig float

61
00:03:11,910 --> 00:03:16,810
ved gentagelse kontinuerligt, indtil
brugeren giver os en gyldig værdi.

62
00:03:16,810 --> 00:03:18,760
>> Nu til gør-mens
loop tilstand, vi har brug for

63
00:03:18,760 --> 00:03:22,000
til at overveje, hvad det betyder
har et ugyldigt float.

64
00:03:22,000 --> 00:03:24,220
Så for rammerne af
dette problem, formentlig

65
00:03:24,220 --> 00:03:27,450
det giver mening blot at
acceptere positive værdier.

66
00:03:27,450 --> 00:03:32,010
>> Så bevæger on-- vi har opnået en
værdi i dollar fra brugeren.

67
00:03:32,010 --> 00:03:35,380
Men vi har at gøre med mønter,
som er helt i cents.

68
00:03:35,380 --> 00:03:38,660
$ 1 svarer til 100 cents.

69
00:03:38,660 --> 00:03:43,670
Så en god ting at gøre, er at
konvertere disse værdier til cents.

70
00:03:43,670 --> 00:03:48,380
>> Nu ved konvertering fra en flyder
til et heltal, så dollars til cents,

71
00:03:48,380 --> 00:03:52,230
Vi ønsker at sikre, at vi er omhyggelige
om floating-point unøjagtighed.

72
00:03:52,230 --> 00:03:55,260
Så det betyder at-- siger
min dollar value-- min float

73
00:03:55,260 --> 00:04:00,260
value-- var en endnu $ 2, der stadig
kan være nogle omstrejfende tal derinde.

74
00:04:00,260 --> 00:04:04,590
Så vi ønsker at sikre, at ikke kun
vi ganger med 100 for at få cents,

75
00:04:04,590 --> 00:04:06,480
men vi har også afrunde det.

76
00:04:06,480 --> 00:04:09,210
>> Så nu har vi beløbet
ændring gæld til brugeren.

77
00:04:09,210 --> 00:04:13,430
Vi oprindeligt fået det i dollar,
og nu har vi konverteret det til cents.

78
00:04:13,430 --> 00:04:17,029
Så nu kan vi gå videre med hjertet af
den grådige algoritme, som altid er

79
00:04:17,029 --> 00:04:19,220
ved hjælp af den største mønt muligt.

80
00:04:19,220 --> 00:04:21,930
Mens vi gør dette,
det er vigtigt, at vi også

81
00:04:21,930 --> 00:04:25,360
holde styr på, hvor mange mønter er
vil blive returneret til brugeren

82
00:04:25,360 --> 00:04:28,630
samt de resterende
ændre skyldte til brugeren.

83
00:04:28,630 --> 00:04:31,130
>> Programmet vil se
noget som dette.

84
00:04:31,130 --> 00:04:34,190
Når du får den mængde
dollars og konvertere det til cents,

85
00:04:34,190 --> 00:04:35,790
så vil du indtaste en løkke.

86
00:04:35,790 --> 00:04:38,400
Mens kvartaler kan være
used-- dvs.

87
00:04:38,400 --> 00:04:43,660
mens mængden af ​​forandringer, der skyldes
Brugeren er større end eller lig med $ 0,25,

88
00:04:43,660 --> 00:04:45,040
du vil bruge en fjerdedel.

89
00:04:45,040 --> 00:04:47,000
>> Nu hvad gør brug af en kvart indebære?

90
00:04:47,000 --> 00:04:51,280
Nå, en-- du øge mønten
tælle skal returneres til brugeren.

91
00:04:51,280 --> 00:04:55,890
Og for det andet vil du sænke strømmen
mængde af forandringer skyldte tilbage til brugeren

92
00:04:55,890 --> 00:04:57,520
med $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Efter gentagelse at indtil
fjerdedele ikke længere kan anvendes,

94
00:05:00,680 --> 00:05:04,630
videre til den næste største
coin-- i dette tilfælde Dimes, $ 0,10.

95
00:05:04,630 --> 00:05:07,750
Så du indtaste den løkke, indtil
kan du ikke længere bruge Dimes.

96
00:05:07,750 --> 00:05:10,720
Så videre til den næste
største mønt, nickels.

97
00:05:10,720 --> 00:05:14,810
Efter nickels kan ikke længere anvendes,
bruge det resterende beløb i øre.

98
00:05:14,810 --> 00:05:17,800
Og endelig, udskrive
antal mønter anvendes.

99
00:05:17,800 --> 00:05:20,350
>> En anden måde at du kan
nærme sig grådige problem

100
00:05:20,350 --> 00:05:22,950
er at bruge modulo tilgang.

101
00:05:22,950 --> 00:05:25,690
Modulo er en operatør
der returnerer den resterende

102
00:05:25,690 --> 00:05:27,680
af opdelingen mellem to numre.

103
00:05:27,680 --> 00:05:30,270
Sige, at jeg havde 50 mod fem.

104
00:05:30,270 --> 00:05:34,070
Tja, 5 er en faktor 50,
så resten vil være 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- godt, 10 er også en faktor
50, så resten er også 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- godt, helst antal Mod sig
kommer ikke til at have nogen resten.

107
00:05:43,660 --> 00:05:45,510
>> Hvad med 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Nå, 49 kun går i 50 én gang.

109
00:05:47,910 --> 00:05:50,290
Så resten bliver en.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 vil
give dig en resten af ​​tre.

111
00:05:55,180 --> 00:05:59,120
>> Så hvordan kan vi bruge modulo
og måske nogle division

112
00:05:59,120 --> 00:06:01,690
at implementere vores grådige algoritme?

113
00:06:01,690 --> 00:06:05,550
Nå, vi stadig ønsker at forblive tro mod den
hjertet af den grådige algorithm-- at

114
00:06:05,550 --> 00:06:07,910
er bruger muligt den største mønt.

115
00:06:07,910 --> 00:06:14,570
>> Så lad os spørge os selv, om vi kan bruge enhver
fjerdedele at returnere $ 0,32 brugeren.

116
00:06:14,570 --> 00:06:20,070
Nå, 32 mod 25 giver
os en resten af ​​$ 0,07.

117
00:06:20,070 --> 00:06:24,500
Så det fortæller os, at vi kan helt sikkert
bruge en fjerdedel med $ 0,07 tilbage.

118
00:06:24,500 --> 00:06:26,180
>> Kan vi så bruge nogen Dimes?

119
00:06:26,180 --> 00:06:32,740
Nå, no-- fordi $ 0,07 mod
$ 0,10 giver os en resten af ​​7.

120
00:06:32,740 --> 00:06:34,960
10 går ikke ind i syv overhovedet.

121
00:06:34,960 --> 00:06:36,390
>> Så kan vi bruge Nickels?

122
00:06:36,390 --> 00:06:40,490
Nå $ 0,07 mod 5 cents
giver os to tilbage.

123
00:06:40,490 --> 00:06:42,930
Og endelig kan vi bruge nogle øre?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 giver os 0,
hvilket i sidste ende, hvad

125
00:06:45,930 --> 00:06:48,160
Vi ønsker, fordi da, at
betyder, at vi har returneret

126
00:06:48,160 --> 00:06:50,160
til brugeren hele ændringen skyldige.

127
00:06:50,160 --> 00:06:54,320
>> Så nu har du to muligheder for at
gennemførelse af den grådige algorithm--

128
00:06:54,320 --> 00:06:59,230
et med løkker og en med en
kombination af modulo og division.

129
00:06:59,230 --> 00:07:03,010
Så til sidst, vi bare nødt til at
udskrive det endelige antal mønter.

130
00:07:03,010 --> 00:07:06,520
>> Hvis jeg ønskede at fortælle dig, at jeg havde
3 kæledyr og denne værdi blev hardcodede,

131
00:07:06,520 --> 00:07:09,240
så kunne jeg bare bruge en
simpel print test erklæring.

132
00:07:09,240 --> 00:07:12,320
Men vores værdi er faktisk
lagres i en variabel.

133
00:07:12,320 --> 00:07:15,260
Så hvordan kan du udskriver
værdier gemt i variabler?

134
00:07:15,260 --> 00:07:17,880
>> Til dette tager vi
fordel af pladsholdere.

135
00:07:17,880 --> 00:07:21,540
Sige, at jeg havde allerede erklæret
en initialiseret heltal n.

136
00:07:21,540 --> 00:07:25,170
Så senere, hvis jeg ønskede at udskrive, at
værdi, så jeg ville skrive strengen.

137
00:07:25,170 --> 00:07:30,500
Og i stedet for den værdi, jeg ville bruge
en pladsholder for at integer--% i.

138
00:07:30,500 --> 00:07:33,800
Så efter strengen, jeg har en
komma efterfulgt af det variable

139
00:07:33,800 --> 00:07:34,950
at jeg ønsker at udskrive.

140
00:07:34,950 --> 00:07:38,550
Og senere, når det udskrives,
det vil udskrive værdien af ​​n.

141
00:07:38,550 --> 00:07:41,570
>> Jeg kunne også bruge en pladsholder
for en svømmer, f.eks.

142
00:07:41,570 --> 00:07:44,000
Hvis jeg ønskede at fortælle dig, hvordan
mange penge jeg har i lommen,

143
00:07:44,000 --> 00:07:46,820
så kunne jeg sige, at jeg har% f dollars.

144
00:07:46,820 --> 00:07:51,330
Og senere, når det udskrives, og derefter n vil
træde i stedet for denne pladsholder.

145
00:07:51,330 --> 00:07:55,530
Jeg kunne også, for eksempel, bruge flere
pladsholdere for flere variable.

146
00:07:55,530 --> 00:07:57,590
Så så længe jeg liste
dem i rækkefølge, så jeg

147
00:07:57,590 --> 00:08:00,390
kan fortælle dig, hvor mange
hunde og katte jeg har.

148
00:08:00,390 --> 00:08:03,710
>> Nu ved vi, hvordan man bede
brugeren for et beløb på forandring,

149
00:08:03,710 --> 00:08:06,130
sikre, at denne indgang
er gyldig, og så vi

150
00:08:06,130 --> 00:08:10,370
har to mulige måder at gennemføre
den grådige algoritme altid bruge

151
00:08:10,370 --> 00:08:12,090
den størst mulige mønt.

152
00:08:12,090 --> 00:08:15,050
Fordi vi har holdt styr på
hvor mange mønter vi bruger,

153
00:08:15,050 --> 00:08:19,210
Vi kan derefter udskrive denne værdi i slutningen,
fortæller brugeren hvor mange mønter, de er

154
00:08:19,210 --> 00:08:20,240
kommer tilbage.

155
00:08:20,240 --> 00:08:24,240
>> Mit navn er Amayla, og det er CS50.

156
00:08:24,240 --> 00:08:25,915

