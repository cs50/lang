Lad os få grådige. I grådige, vores opgave er at spille rollen som en grådig kasserer. Brugeren vil fortælle os, hvordan meget forandring, vi skylder dem, og så vores opgave er at beregne det mindste antal mønter som vi kan bruge til at gøre at mængden af ​​forandringer. 

Lad os starte med et eksempel. Sig brugeren kræver $ 0,32 tilbage. Vi kunne gøre dette ved at give dem 32 øre, en cent hver. Eller jeg kunne også bruge fem coins-- ved giver dem tre Dimes, $ 0,10 hver, og to øre, $ 0,02 hver. Men kunne vi bruge selv færre mønter til at gøre det? 

Hele taktik i greedy-- at være en grådig cashier-- er at bruge den størst mulige mønt. Så når vi har kvartaler vi vil bruge dem. Og derefter en gang de løber tør, vi vil bruge Dimes, $ 0,10 hver. Derefter Nickels, 5 cents hver, og derefter ned til øre, en cent hver. Ved at anvende den største mønt muligt, når vi kan, sikrer vi, at vi bruger færrest af mønter muligt at foretage ændringen. 

Så lad os gå dette igennem. Brugeren skal $ 0,32. Så spørger vi os selv, kan vi bruge en fjerdedel? Nå, ja vi kan. Så nu er vi kun kender dem $ 0,07, og vi brugte en mønt. 

Kan vi bruge en anden kvartal? Nå, nej. $ 0,07 er mindre end $ 0,25, så vi fortsætter til næste største mønt til rådighed. Dimes er $ 0,10, og igen, kan vi ikke bruge Dimes. Fordi Dimes er værd $ 0,10, hvilket er mere end mængden af ​​forandring skyldige. 

Vi går til nickels. Og ja ja, $ 0,05 er mindre end $ 0.10-- så vi kan bruge en nikkel. Så nu er vi kun skylder brugeren $ 0,02, og vi har hidtil brugt to mønter. Vi kan ikke bruge en anden nikkel. Så vi gå videre til den sidste mønt på vores rådighed, som er de småpenge. 

Og kan vi bruge øre? Nå, yes-- og vi ender med at bruge to øre for i alt fire mønter. 

Når du er færdig, Programmet vil se sådan ud. Når brugeren kører grådige program, vil de blive bedt om at give mængden af ændring i dollars, som de er skyldige. Og så dit program vil output minimum af mønter at den grådige cashier ville bruge at foretage denne mængde forandring. 

Så lad os nu bryde dette ned i vores underopgaver. Først vi vil bede vores brugeren for et beløb på forandring. Og som med alle brugerinput, ønsker vi at sikre, at vi validere, at input og sikre, at vi kan bruge det input til resten af ​​vores program. Så vi kommer til at altid bruge den størst mulige point og holde styr på mønterne brugt. Og endelig, udskrive den endelige antal mønter, som vi brugte. 

Så lad os tale om at spørge. Beløbet skal gøre cents, og dette er i dollar. Og så for dollars, vi kommer at bruge float variabel type. Nu når du spørger en bruger om input, du vil være sikker på, at det er gyldigt. Og så her vi gerne benytte af gør-while-løkke konstruktion. 

En gør-while-løkke vil udføre organ af løkken mindst én gang. Så det kommer i handy. Vi ved, at vi er nødt til at bede bruger mindst én gang for en svømmer. Nu, hvis der svæver er gyldig. Det er godt. Vi går videre. Men hvis ikke, vil løkken sikre at vi får en ordentlig float ved gentagelse kontinuerligt, indtil brugeren giver os en gyldig værdi. 

Nu til gør-mens loop tilstand, vi har brug for til at overveje, hvad det betyder har et ugyldigt float. Så for rammerne af dette problem, formentlig det giver mening blot at acceptere positive værdier. 

Så bevæger on-- vi har opnået en værdi i dollar fra brugeren. Men vi har at gøre med mønter, som er helt i cents. $ 1 svarer til 100 cents. Så en god ting at gøre, er at konvertere disse værdier til cents. 

Nu ved konvertering fra en flyder til et heltal, så dollars til cents, Vi ønsker at sikre, at vi er omhyggelige om floating-point unøjagtighed. Så det betyder at-- siger min dollar value-- min float value-- var en endnu $ 2, der stadig kan være nogle omstrejfende tal derinde. Så vi ønsker at sikre, at ikke kun vi ganger med 100 for at få cents, men vi har også afrunde det. 

Så nu har vi beløbet ændring gæld til brugeren. Vi oprindeligt fået det i dollar, og nu har vi konverteret det til cents. Så nu kan vi gå videre med hjertet af den grådige algoritme, som altid er ved hjælp af den største mønt muligt. Mens vi gør dette, det er vigtigt, at vi også holde styr på, hvor mange mønter er vil blive returneret til brugeren samt de resterende ændre skyldte til brugeren. 

Programmet vil se noget som dette. Når du får den mængde dollars og konvertere det til cents, så vil du indtaste en løkke. Mens kvartaler kan være used-- dvs. mens mængden af ​​forandringer, der skyldes Brugeren er større end eller lig med $ 0,25, du vil bruge en fjerdedel. 

Nu hvad gør brug af en kvart indebære? Nå, en-- du øge mønten tælle skal returneres til brugeren. Og for det andet vil du sænke strømmen mængde af forandringer skyldte tilbage til brugeren med $ 0,25. 

Efter gentagelse at indtil fjerdedele ikke længere kan anvendes, videre til den næste største coin-- i dette tilfælde Dimes, $ 0,10. Så du indtaste den løkke, indtil kan du ikke længere bruge Dimes. Så videre til den næste største mønt, nickels. Efter nickels kan ikke længere anvendes, bruge det resterende beløb i øre. Og endelig, udskrive antal mønter anvendes. 

En anden måde at du kan nærme sig grådige problem er at bruge modulo tilgang. Modulo er en operatør der returnerer den resterende af opdelingen mellem to numre. Sige, at jeg havde 50 mod fem. Tja, 5 er en faktor 50, så resten vil være 0. 50 mod 10-- godt, 10 er også en faktor 50, så resten er også 0. 50 mod 50-- godt, helst antal Mod sig kommer ikke til at have nogen resten. 

Hvad med 50 mod 49? Nå, 49 kun går i 50 én gang. Så resten bliver en. 53 mod 50 vil give dig en resten af ​​tre. 

Så hvordan kan vi bruge modulo og måske nogle division at implementere vores grådige algoritme? Nå, vi stadig ønsker at forblive tro mod den hjertet af den grådige algorithm-- at er bruger muligt den største mønt. 

Så lad os spørge os selv, om vi kan bruge enhver fjerdedele at returnere $ 0,32 brugeren. Nå, 32 mod 25 giver os en resten af ​​$ 0,07. Så det fortæller os, at vi kan helt sikkert bruge en fjerdedel med $ 0,07 tilbage. 

Kan vi så bruge nogen Dimes? Nå, no-- fordi $ 0,07 mod $ 0,10 giver os en resten af ​​7. 10 går ikke ind i syv overhovedet. 

Så kan vi bruge Nickels? Nå $ 0,07 mod 5 cents giver os to tilbage. Og endelig kan vi bruge nogle øre? 2 mod 1 giver os 0, hvilket i sidste ende, hvad Vi ønsker, fordi da, at betyder, at vi har returneret til brugeren hele ændringen skyldige. 

Så nu har du to muligheder for at gennemførelse af den grådige algorithm-- et med løkker og en med en kombination af modulo og division. Så til sidst, vi bare nødt til at udskrive det endelige antal mønter. 

Hvis jeg ønskede at fortælle dig, at jeg havde 3 kæledyr og denne værdi blev hardcodede, så kunne jeg bare bruge en simpel print test erklæring. Men vores værdi er faktisk lagres i en variabel. Så hvordan kan du udskriver værdier gemt i variabler? 

Til dette tager vi fordel af pladsholdere. Sige, at jeg havde allerede erklæret en initialiseret heltal n. Så senere, hvis jeg ønskede at udskrive, at værdi, så jeg ville skrive strengen. Og i stedet for den værdi, jeg ville bruge en pladsholder for at integer--% i. Så efter strengen, jeg har en komma efterfulgt af det variable at jeg ønsker at udskrive. Og senere, når det udskrives, det vil udskrive værdien af ​​n. 

Jeg kunne også bruge en pladsholder for en svømmer, f.eks. Hvis jeg ønskede at fortælle dig, hvordan mange penge jeg har i lommen, så kunne jeg sige, at jeg har% f dollars. Og senere, når det udskrives, og derefter n vil træde i stedet for denne pladsholder. Jeg kunne også, for eksempel, bruge flere pladsholdere for flere variable. Så så længe jeg liste dem i rækkefølge, så jeg kan fortælle dig, hvor mange hunde og katte jeg har. 

Nu ved vi, hvordan man bede brugeren for et beløb på forandring, sikre, at denne indgang er gyldig, og så vi har to mulige måder at gennemføre den grådige algoritme altid bruge den størst mulige mønt. Fordi vi har holdt styr på hvor mange mønter vi bruger, Vi kan derefter udskrive denne værdi i slutningen, fortæller brugeren hvor mange mønter, de er kommer tilbage. 

Mit navn er Amayla, og det er CS50. 