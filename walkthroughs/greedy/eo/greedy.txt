Ni ricevas avidaj. En avida, nia tasko estas ludi la rolo de avara kasisto. La uzanto rakontos nin kiel multe ŝanĝon ni ŝuldas ilin, kaj tiam nia tasko estas kalkuli la minimuma nombro da moneroj ke ni povas uzi por fari tiu kvanto de ŝanĝiĝo. 

Komencu kun ekzemplo. Diri la uzanto postulas $ 0.32 reen. Ni povus fari tion donante ilin 32 pencoj, unu cendo ĉiu. Aŭ mi povus ankaŭ uzi kvin coins-- per donante ilin tri dimes, $ 0.10 ĉiu, kaj du pencoj, $ 0.02 ĉiu. Sed ni povus uzi eĉ malpli moneroj fari tiun? 

La tuta taktiko en greedy-- esti avidaj cashier-- estas uzi la plej granda monero eble. Do kiam ajn ni havas kvaronoj ni uzos ilin. Kaj tiam iam tiuj elĉerpas, ni uzos dimes, $ 0.10 ĉiu. Tiam Nickels, 5 cendoj ĉiu, kaj tiam malsupren al pencoj, unu cendo ĉiu. Uzante la plej granda monero ebla kiam ajn eble, ni certigi ke ni uzu la plej malmultaj nombro de moneroj eblas fari la ŝanĝon. 

Do ni iradas ĉi tra. La uzanto bezonas $ 0.32. Tial oni demandas sin, ni povas uzi kvarono? Nu, jes ni povas. Do nun ni nur konas ilin $ 0.07, kaj ni uzis unu monero. 

Ni povas uzi alian kvaronon? Nu, ne. $ 0.07 malpli ol $ 0.25, tiel ni procedi al la sekva plej granda monero havebla. Dimes estas $ 0.10, kaj denove, ni ne povas uzi dimes. Ĉar dimes valoras $ 0.10, kio estas pli ol la kvanto de ŝanĝo ŝuldita. 

Ni iru Nickels. Kaj, jes ja, $ 0.05 malpli ol $ 0.10-- do ni povas uzi nikelo. Do nun ni nur ŝuldas la uzanto $ 0.02, kaj ni ĝis nun uzis du moneroj. Ni ne povas uzi alian nikelo. Tial ni eliru al la lasta monero ĉe nia dispono, kiuj estas la moneroj. 

Kaj ni povas uzi denaro? Nu, yes-- kaj ni finas uzante du pencoj por totalo de kvar moneroj. 

Unufoje vi finis, la programo similos tion. Iam la uzanto kuras la avidaj programo, ili timige petata doni la kvanto de ŝanĝo en dolaroj ke ili estas ŝuldita. Kaj tiam via programo volo eligo la minimuma kvanto de moneroj ke la avidaj kasisto uzus fari ke kvanto de ŝanĝo. 

Do nun ni rompos ĉi malsupren en nian subtareas. Unua ni tuj instigas niajn uzanto por kvanto de ŝanĝo. Kaj, kiel kun ajna uzanto enigo, ni volas certigi ke ni validigi ke enigo kaj certigi ke ni povas uzi tiun enigo por la resto de nia programo. Tiam ni tuj ĉiam uzi la plej grandan punkton ebla kaj sekvigi la moneroj uzataj. Kaj fine, montri la finan numeron de moneroj kiujn ni uzas. 

Do ni parolu pri instigante. La kvanto devas fari cendoj, kaj tio estas en dolaroj. Kaj tiel por dolaroj, ni tuj uzi la kaleŝego variablo tipo. Nun kiam vi demandas uzanto por enigo, Vi volas certigi ke ĝi estas valida. Kaj tiel tie ni ŝatus utiligi de la do-dum buklo konstruo. 

Al do-dum buklo ekzekutos la korpo de la ciklo almenaŭ unufoje. Do ĉi venas en oportuna. Ni scias ke ni devas instigi la uzanto almenaŭ unufoje por kaleŝego. Nun se kiu flosas validas. Tio estas granda. Ni pluiru. Sed se ne, la buklo certigos ke ni ricevos konvenan kaleŝego ripetante senĉese ĝis la uzanto donas al ni validan valoron. 

Nun por la do-dum buklo kondiĉo, ni bezonas konsideri kion signifas havas nevalidan kaleŝego. Tiel por la kunteksto de tiu problemo, probable ĝi havas sencon nur por akcepti pozitivaj valoroj. 

Do movi on-- ni akiris valoro en dolaroj de la uzanto. Sed ni pritraktas moneroj, kiu estas tute en cendoj. $ 1 estas ekvivalenta al 100 cendoj. Tiel bona afero fari estas konverti tiujn valorojn en cendoj. 

Nun kiam konvertanta de kaleŝego por entjero, do dolaroj al cendoj, Ni volas certigi ke ni estas zorgema pri punkto flotante imprecision. Do tio signifas that-- diri mian dolaron value-- mia kaleŝego value-- estis eĉ $ 2, ekzistas ankoraŭ Eble iuj devagaj nombroj en tie. Do ni volas certigi, ke ne nur ni multipliki per 100 por akiri la cendojn, sed ni ankaŭ cxirkauxtondu ĝin. 

Do nun ni havas la kvanton de ŝanĝo ŝuldita al la uzanto. Ni origine akiris ĝin en dolaroj, kaj nun ni konvertis ĝin al cendoj. Do nun ni povas procedi kun la koro de la avida algoritmo, kiu estas ĉiam uzante la plej granda monero eble. Dum ni faras tion, ĝi estas esenca ke ni ankaŭ sekvigi kiom moneroj estas tuj revenos al la uzanto krom la ceteraj ŝanĝi ŝuldis al la uzanto. 

La programo aspektos io tiamaniere. Post vi ricevas la kvanton de dolaroj kaj konverti ke al cendoj, tiam vi eniras banton. Dum kvaronoj povas esti used-- tio estas dum la kvanto de ŝanĝo ŝuldita al la uzanto estas pli granda ol aŭ egala al $ 0.25, vi uzos kvarono. 

Kion faras uzante kvarono kunportas? Nu, one-- vi pliigi la monero kalkuli esti resendita al la uzanto. Kaj duan vi malpliigi la aktualan kvanto de ŝanĝo ŝuldita al la uzanto de $ 0.25. 

Post ripeti ke ĝis kvaronoj ne plu povas esti uzataj, procedi al la sekva plej granda coin-- tiukaze dimes, $ 0.10. Tiel vi eniru ke buklo ĝis vi ne plu povas uzi dimes. Tiam procedi al la sekvanta plej granda monero, Nickels. Post Nickels ne plu povas esti uzataj, uzi la restanta kvanto en pencoj. Kaj fine, montri la numeron de moneroj uzataj. 

Alia vojo ke vi povas alproksimigi la avidaj problemo estas uzi la module alproksimiĝo. Module estas operatoro ke redonas la reston de la divido inter du nombroj. Diru mi havis 50 mod 5. Nu, 5 estas faktoro de 50, tial la resto estos 0. 50 mod 10-- bone, 10 estas ankaŭ faktoro de 50, tial la resto estas ankaŭ 0. 50 mod 50-- bone, ajna nombro mod mem ne tuj havos neniun reston. 

Kio pri 50 mod 49? Nu, 49 nur iras en 50 iam. Do la resto estas iranta esti 1. 53 mod 50 tuj al vi restaĵo de 3. 

Do kiel ni povas uzi module kaj eble iu divido apliki niajn avidaj algoritmo? Nu, ni ankoraŭ volas resti fidela al la koro de la avara algorithm-- ke estas uzanta la plej granda monero eble. 

Do ni demandos nin se ni povas uzi ajnan kvaronoj reveni $ 0.32 por la uzanto. Nu, 32 mod 25 donas ni restaĵo de $ 0.07. Por ke nin diras ke ni povas definitive uzi unu kvarono kun $ 0.07 ceteraj. 

Ni povas tiam uzi ajnan dimes? Nu, no-- ĉar $ 0.07 mod $ 0.10 al ni restaĵo de 7. 10 eniras ne en 7 entute. 

Tiam ni povas uzi Nickels? Nu $ 0.07 mod 5 cendoj donas al ni du ceteraj. Kaj laste, ni povas uzi ajnan pencoj? 2 mod 1 donas ni 0: kiu estas finfine kio ni volas ĉar tiam ke signifas ke ni revenis al la uzanto ĉiuj ŝanĝo ŝuldita. 

Do nun vi havas du eblajn manierojn efektiviganta la avidaj algorithm-- kun maŝojn kaj unu kun kombino de module kaj divido. Do fine, ni nur bezonas presi la fina nombro de moneroj. 

Se mi volis diri al vi, ke mi havis 3 dorlotbestoj kaj tiu valoro estis hardcoded, tiam mi povus simple uzi simpla print testo komunikaĵo. Sed nia valoro estas fakte stokitaj en variablo. Do kiel vi presi la valoroj stokitaj en variabloj? 

Por tio ni preni avantaĝo de anstataŭaĵojn. Diri Mi jam deklaris an inicializado entjero n. Tiam poste se mi volis printi ke valoro, tiam mi skribus la kordo. Kaj anstataŭ ke valoro mi uzus lokokupilo por ke integer--% i. Tiam post la ligilo, mi havas komo, sekvita de la variablo ke mi volas presi. Kaj poste, kiam ĝi presas, ĝi devos presi la valoro de n. 

Mi povus ankaŭ uzi lokokupilo por kaleŝego, ekzemple. Se mi volis diri al vi kiom multa mono mi havas en mia poŝo, tiam mi povus diri ke mi havas% f dolaroj. Kaj poste kiam presas, tiam n volas preni la lokon de tiu loko posedanto. Mi povus ankaŭ, ekzemple, uzi pluraj anstataŭaĵojn por pluraj variabloj. Do, dum mi listo ilin en ordo, tiam mi povas diri al vi kiom da hundoj kaj katoj mi. 

Nun ni scias kiel instigas la uzanto por kvanto de ŝanĝo, certigi ke tiu enigo validas, kaj poste ni havas du eblaj manieroj de implementar la avida algoritmo de ĉiam uzi la plej granda monero eble. Ĉar ni konservis spuron de kiom da moneroj ni uzas, ni tiam povas presi tiu valoro ĉe la fino, dirante al la uzanto kiom da moneroj ili estas reatingas. 

Mia nomo estas Amayla, kaj ĉi tiu estas CS50. 