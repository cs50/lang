en açgözlü alalım. açgözlü olarak, bizim işimiz oynamaktır açgözlü bir kasiyer rolü. Kullanıcı nasıl bize söyleyecek Biz onlara borçlu fazla bir değişiklik, ve sonra bizim işimiz hesaplamak için jeton minimum sayıda Biz yapmak için kullanabileceğiniz değişim bu miktarın. 

Bunu bir örnekle başlayalım. Kullanıcı geri 0,32 $ gerektirir söylüyorlar. Biz vererek bu yapabileceğini Onları 32 peni, bir kuruş her. Ya ben de beş coins-- kullanabilirsiniz Üç Dimes vererek, 0,10 $ her biri ve iki peni, 0,02 $ her biri. Ama biz bile kullanabilirsiniz Daha az paralar olmak için? 

greedy-- bütün taktik hırslı cashier-- olduğu Mümkün olan en büyük para kullanmaktır. Yani ne zaman biz var dörtte onları kullanacağız. Ve sonra olanlar tükendi kez Biz Dimes, 0,10 $ her kullanacağız. Sonra Paranın, 5 sent her ve sonra pennies aşağı, bir kuruş her. büyük para kullanarak her ne zaman biz mümkün biz en az sayıda kullanmalarını sağlamak Mümkün sikke değişiklik yapmak. 

Yani bu yürüyelim izin ver. Kullanıcı 0,32 $ gerekiyor. Bu yüzden kendimize sormak, Bir çeyreği kullanabilir miyim? Şey, evet yapabiliriz. Yani şimdi biz sadece bunları bilmek 0,07 $ ve biz bir jeton kullanılır. 

Başka bir çeyrek kullanabilir miyim? hayır. 0,07 $ 0,25 $ daha az, bu yüzden devam Mevcut sonraki en büyük sikke. Dimes 0,10 $, ve Yine, onluk kullanamaz. Dimes $ 0.10 değer çünkü hangi borçlu değişim miktarı daha fazladır. 

Biz Paranın gidin. Ve, evet gerçekten de, 0,05 $ daha az $ 0.10-- bu yüzden nikel kullanabilirsiniz. Yani şimdi biz sadece 0,02 $ kullanıcıyı borçlu ve şimdiye kadar iki sikke kullandım. Biz başka bir nikel kullanamazsınız. Öyleyse biz geçen sikke devam peni bizim bertaraf. 

Ve biz kuruş kullanabilir? Eh, evet-- ve biz iki kullanarak sonuna kadar Dört sikke olmak üzere toplam peni. 

Bitirdikten sonra, Program aşağıdaki gibi görünecektir. Kullanıcı çalıştırır kez hırslı bir program, bu olacak miktarını vermek istenir borçlu olduğunuz dolar değişim. Ve sonra program çıktısı sikke minimum tutar açgözlü kasiyer kullanmak olacağını değişim bu miktar yapmak. 

Yani şimdi Şimdi bu yıkalım aşağı bizim alt görevler içine. Öncelikle soracak gidiyoruz bizim değişimin bir miktar için kullanıcı. Ve, herhangi bir kullanıcı girişi olduğu gibi, biz istiyoruz biz bu giriş doğrulamak emin olun biz kullanabilirsiniz ve emin olun Bizim programın geri kalanı için giriş. Sonra hep gidiyoruz Mümkün olan en büyük noktası kullanmak ve kullanılan sikke takip edebilirsiniz. Ve nihayet, son yazdırmak Kullandığımız jeton sayısı. 

Yani isteyen bahsedelim. miktar, kuruş yapmak gerekir ve bu dolar olduğunu. Ve böylece dolar, biz gidiyoruz şamandıra değişken türü kullanmak için. Şimdi giriş için bir kullanıcı sormak ne zaman, Eğer geçerli olduğundan emin olmak istiyorum. Ve böylece burada yararlanmak istiyorum do-while yapısının. 

Bir do-while döngüsü çalıştırır en az bir döngü gövdesi. Yani bu kullanışlı oluyor. Biz soracak gerektiğini biliyoruz en az bir kez bir float için kullanıcı. Şimdi bu şamandıra geçerli olup olmadığını. Bu harika. Biz hareket. Ama eğer, döngü sağlayacak biz uygun bir şamandıra olsun kadar sürekli tekrarlayarak Kullanıcı bize geçerli bir değer verir. 

Şimdi do-süre Döngü koşulu, ihtiyacımız Bunun ne anlama geldiğini düşünün Geçersiz bir şamandıra var. bağlamında Yani Bu sorun, büyük olasılıkla Sadece mantıklı pozitif değerler kabul eder. 

Yani Firefox veya hareketli Elde ettiğimiz bir kullanıcıdan dolar değer. Ama biz sikke ile uğraşıyoruz, cent tamamen hangi bulunmaktadır. $ 1 100 sent eşdeğerdir. Bunu yapmak için iyi bir şey olduğunu cent içine bu değerleri dönüştürmek. 

Şimdi bir şamandıra dönüştürürken bir tam sayıya, sent dolar yani biz dikkatli olduğunu emin olmak kayan nokta doğruluğunu, hakkında. Yani bu ki- demek anlamına gelir Benim dolar benim şamandıra value-- value-- hala bir hatta 2 $ oldu Orada bazı sokak numaraları olabilir. Bu yüzden emin olmak istemiyor sadece Biz kuruş almak için 100 ile çarpın yapmak, ama biz de bunu tamamlar. 

Yani şimdi biz miktarda değişim kullanıcıya borçlu. Biz aslında dolar bunu elde ve şimdi sent dönüştürülmüş ettik. şimdi bu yüzden biz bir kalp ile devam edebilirsiniz her zaman açgözlü algoritma, mümkün olan en geniş para kullanarak. Biz bunu yaparken o da biz önemlidir kaç sikke takip kullanıcıya iade edilecek gibi geriye kalan kullanıcıya borçlu değiştirin. 

Program bakacağız böyle bir şey. Senden sonra miktarını almak dolar ve sent olduğunu dönüştürmek, o zaman bir döngü girersiniz. dörtte olabilirken used-- demek ki ise borçlu değişim miktarı Kullanıcı, daha büyük ya da 0,25 $ eşittir Bir çeyrek kullanacağız. 

Şimdi ne olacak çeyrek gerektirecektir kullanıyor mu? Eh, sen para Şehre artırmak edeceğiz kullanıcıya iade edilmesi saymak. Ve ikinci geçerli azalma olacak değişim miktarı kullanıcıya geri borçlu 0,25 $ tarafından. 

kadar bu tekrar eden çeyrek artık kullanılabilir, sonraki en büyük geçin 0,10 $, bu durumda sentlerle coin--. Yani kadar bu döngü girersiniz artık Dimes kullanabilirsiniz. Daha sonra bir sonraki geçin en büyük sikke, Paranın. Paranın artık kullanılabilir sonra, peni kalan miktarda kullanın. Ve nihayet, yazdırmak jeton sayısı kullanılır. 

Başka bir yol yapabilirsiniz açgözlü sorunu yaklaşım modülo yaklaşımının kullanılmasıdır. Modulo bir operatördür Bu kalanı verir iki sayı arasındaki bölünme. Ben 50 mod 5 olduğunu varsayalım. Eh, 5 50 faktör, böylece kalan 0 olacaktır. mod 50 10-- iyi 10 de bir faktördür 50, bu nedenle geri kalanı da 0 'dır. 50 mod 50-- iyi, herhangi bir sayı kendisini mod Herhangi kalanı için gitmiyor. 

Ne mod 49 50 hakkında? Eh, 49 sadece bir kez 50 girer. Yani kalan 1 olacak. 53 mod 50 gidiyor Size 3 bir kalanı verir. 

Peki modulo kullanabilirsiniz ve belki de bazı bölünme Bizim açgözlü algoritma uygulamak için? Eh, biz hala sadık kalmak istiyorum Bu algorithm-- hırslı kalp mümkün olan en geniş para kullanıyor. 

Bu yüzden herhangi kullanabilirsiniz eğer en kendimize soralım dörtte kullanıcıya 0,32 $ dönün. Eh, 32 mod 25 verir Bize 0,07 $ bir kalan. söyler ve böylece biz kesinlikle can Kalan 0,07 $ ile dörtte biri kullanın. 

biz daha sonra herhangi bir Dimes kullanabilir miyim? Eh, hayır-- 0,07 $ mod çünkü 0,10 $ bize 7 bir kalanı verir. 10 Hiç 7 içine gitmez. 

Sonra Paranın kullanabiliriz? Peki 0,07 $ mod 5 kuruş Bize kalan iki verir. Ve son olarak, herhangi bir pennies kullanabilir? 2 mod 1, bize 0 verir hangi sonuçta ne olduğunu Biz o çünkü istiyorum Biz iade anlamına gelir kullanıcıya değişimin tüm borçlu. 

Yani şimdi iki olası yolları var açgözlü algorithm-- uygulanması döngüler ile bir ve beraber bir modulo ve bölünme kombinasyonu. Sonunda, biz sadece gereken jeton son numarasını yazdırmak. 

Seni ben söylemek istedim 3 evcil ve bu değer kodlanmış oldu o zaman sadece bir kullanabilirsiniz Basit baskı testi bildirimi. Ama değer aslında Bir değişkende saklanır. Yani yazdırmak nasıl değerler değişkenlere saklanan? 

Bunun için biz almak tutucuları avantajı. Zaten ilan etmiş demek Bir başlatılmış tamsayı n. Daha sonra da bunu yazdırmak istiyorsa değer, o zaman dize yazmak istiyorum. Ve bunun yerine değer ben kullanmak istiyorum Bu integer--% i için bir yer tutucudur. Sonra dize sonra, I have a değişken ardından virgül, Ben yazdırmak istediğinizi. Ve daha sonra, o yazdırır zaman, o n değerini basalım. 

Ben de bir yer tutucu kullanabilirsiniz Örneğin bir float için. Ben size nasıl istiyorsa Cebimde var çok nakit, o zaman ben% f dolarım var diyebiliriz. Ve daha sonra n olacak, sonra basar üzerinde zaman Bu yer tutucu gerçekleşecek. Ayrıca, örneğin, bir kaç kullanabilir Çok değişkenli için yer tutucuları. Yani sürece ben liste olarak sonra onları sırayla, ben Size kaç söyleyebilir köpekler ve kediler ben. 

Şimdi soracak biliyorum değişimin bir miktarda kullanıcı, bu giriş sağlamak geçerlidir ve daha sonra uygulanması olası iki yolu var Her zaman kullanarak açgözlü algoritma Mümkün olan en büyük sikke. Biz takip sakladım çünkü Kullandığımız kaç jeton, O zaman, sonunda bu değeri yazdırabilirsiniz Onlar konum kaç jeton kullanıcı söylüyorum geri alma. 

Benim adım Amayla ve bu CS50 olduğunu. 