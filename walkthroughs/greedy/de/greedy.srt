1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Lassen Sie uns gierig.

3
00:00:02,900 --> 00:00:06,810
In gierig, unsere Aufgabe ist es zu spielen
die Rolle eines gierigen Kassierer.

4
00:00:06,810 --> 00:00:09,750
Der Benutzer wird uns sagen, wie
viel Veränderung, die wir ihnen verdanken,

5
00:00:09,750 --> 00:00:13,520
und dann ist unsere Aufgabe zu berechnen
die minimale Anzahl von Münzen

6
00:00:13,520 --> 00:00:17,240
dass wir zu machen verwenden
dass Ausmaß der Veränderung.

7
00:00:17,240 --> 00:00:19,560
>> Beginnen wir mit einem Beispiel an.

8
00:00:19,560 --> 00:00:23,170
Sagen Sie den Benutzer $ 0,32 zurück erfordert.

9
00:00:23,170 --> 00:00:28,960
Wir könnten dies tun, indem sie
sie 32 Cent, ein Cent je.

10
00:00:28,960 --> 00:00:35,180
Oder ich könnte auch fünf coins-- verwenden, indem Sie
geben ihnen drei Groschen, 0,10 $ pro Stück,

11
00:00:35,180 --> 00:00:38,060
und zwei Cent, 0,02 $ je.

12
00:00:38,060 --> 00:00:42,580
Aber könnten wir verwenden auch
weniger Münzen, das zu machen?

13
00:00:42,580 --> 00:00:45,100
>> Die ganze Taktik in greedy--
ein gieriger cashier-- zu sein

14
00:00:45,100 --> 00:00:47,600
ist die größte Münze möglich zu nutzen.

15
00:00:47,600 --> 00:00:50,670
Also, wenn wir
Viertel werden wir sie nutzen.

16
00:00:50,670 --> 00:00:54,100
Und dann, wenn diejenigen ausgehen,
wir Dimes verwenden, $ 0.10.

17
00:00:54,100 --> 00:00:58,840
Dann Nickels, 5 Cent pro Stück, und
dann bis auf ein paar Cent, ein Cent je.

18
00:00:58,840 --> 00:01:01,792
Durch die größte Münze
möglich, wenn wir können,

19
00:01:01,792 --> 00:01:07,350
stellen wir sicher, dass wir die wenigsten nutzen
von Münzen möglich, die Änderung vorzunehmen.

20
00:01:07,350 --> 00:01:09,180
>> Also lassen Sie uns diese zu Fuß durch.

21
00:01:09,180 --> 00:01:11,660
Der Benutzer muss $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Also fragen wir uns,
können wir ein Viertel verwenden?

23
00:01:14,200 --> 00:01:15,560
Nun, ja wir können.

24
00:01:15,560 --> 00:01:19,720
So, jetzt wissen wir sie nur
0,07 $, und wir haben eine Münze.

25
00:01:19,720 --> 00:01:20,970
>> Können wir ein weiteres Quartal nutzen?

26
00:01:20,970 --> 00:01:21,890
Nun, nein.

27
00:01:21,890 --> 00:01:27,570
0,07 $ weniger als 0,25 $, so dass wir fortfahren
auf den nächstgrößeren Münze zur Verfügung.

28
00:01:27,570 --> 00:01:30,690
Dimes sind $ 0,10 und
wieder, können wir nicht Dimes verwenden.

29
00:01:30,690 --> 00:01:35,480
Da Dimes sind im Wert von $ 0,10 die
geschuldet ist mehr als die Menge der Änderung.

30
00:01:35,480 --> 00:01:36,790
>> Wir gehen zu Nickels.

31
00:01:36,790 --> 00:01:40,890
Und, ja in der Tat, ist 0,05 $ weniger als
$ 0.10-- so können wir eine Nickel verwenden.

32
00:01:40,890 --> 00:01:46,104
So, jetzt verdanken wir nur dem Benutzer $ 0,02,
und wir haben so verwendet weit zwei Münzen.

33
00:01:46,104 --> 00:01:47,270
Wir können nicht ein weiteres Nickel verwenden.

34
00:01:47,270 --> 00:01:51,140
Also dann gehen wir auf die letzte Münze auf
Verfügung, die die paar Cent sind.

35
00:01:51,140 --> 00:01:52,270
>> Und können wir Penny benutzen?

36
00:01:52,270 --> 00:01:59,060
Nun, yes-- und wir am Ende mit zwei
Pennies für insgesamt vier Münzen.

37
00:01:59,060 --> 00:02:01,430
>> Sobald Sie fertig sind, die
Programm sieht wie folgt aus.

38
00:02:01,430 --> 00:02:03,710
Sobald der Benutzer läuft die
gierigen Programm, werden sie

39
00:02:03,710 --> 00:02:07,270
werden aufgefordert, den Betrag zu geben,
Veränderung in Dollar, die sie geschuldet sind.

40
00:02:07,270 --> 00:02:11,140
Und dann ausgegeben wird Ihr Programm
die minimale Anzahl an Münzen

41
00:02:11,140 --> 00:02:14,740
dass die gierigen Kassierer verwenden würde
dass die Größe der Veränderung zu machen.

42
00:02:14,740 --> 00:02:18,160
>> So, jetzt lassen Sie uns dies brechen
nach unten in unsere Unteraufgaben.

43
00:02:18,160 --> 00:02:21,410
Zuerst werden wir aufgefordert uns
Benutzer für einen Betrag von Veränderung.

44
00:02:21,410 --> 00:02:25,630
Und wie bei jeder Benutzereingabe, möchten wir
stellen Sie sicher, dass wir, dass die Eingabe bestätigen

45
00:02:25,630 --> 00:02:29,360
und stellen Sie sicher, dass wir das nutzen können
Eingang für den Rest unseres Programms.

46
00:02:29,360 --> 00:02:32,480
Dann werden wir immer
Verwenden Sie die größte Punkt möglich

47
00:02:32,480 --> 00:02:35,240
und behalten den Überblick über die verwendeten Münzen.

48
00:02:35,240 --> 00:02:39,080
Und schließlich drucken die endgültige
Anzahl der Münzen, die wir verwendet.

49
00:02:39,080 --> 00:02:40,970
>> Also lassen Sie uns darüber reden, zu fragen.

50
00:02:40,970 --> 00:02:43,550
Der Betrag muss Cent machen,
und dies ist in US-Dollar.

51
00:02:43,550 --> 00:02:48,440
Und so für Dollar, wir gehen
der Schwimmer Variablentyp zu verwenden.

52
00:02:48,440 --> 00:02:52,390
Nun, wenn Sie bitten, einen Benutzer zur Eingabe,
Sie wollen sicherstellen, dass es gültig ist.

53
00:02:52,390 --> 00:02:56,640
Und hier wie wir zu nutzen
der do-while-Schleife-Konstrukt.

54
00:02:56,640 --> 00:03:00,320
>> Eine do-while-Schleife wird ausgeführt, die
Körper der mindestens einmal Schleife.

55
00:03:00,320 --> 00:03:01,650
So kommt dies praktisch.

56
00:03:01,650 --> 00:03:05,510
Wir wissen, dass wir aufgefordert, müssen die
Benutzer mindestens einmal für einen Schwimmer.

57
00:03:05,510 --> 00:03:07,100
Nun, wenn das Schwimmer gültig ist.

58
00:03:07,100 --> 00:03:07,710
Das ist großartig.

59
00:03:07,710 --> 00:03:08,460
Wir gehen weiter.

60
00:03:08,460 --> 00:03:11,910
Aber wenn nicht, wird die Schleife sicherzustellen,
dass wir bekommen eine richtige Schwimmer

61
00:03:11,910 --> 00:03:16,810
durch Wiederholung kontinuierlich, bis
der Benutzer gibt uns einen gültigen Wert.

62
00:03:16,810 --> 00:03:18,760
>> Jetzt für die do-while
Schleifenbedingung, wir brauchen

63
00:03:18,760 --> 00:03:22,000
zu überlegen, was es bedeutet,
einen ungültigen Schwimmer zu haben.

64
00:03:22,000 --> 00:03:24,220
Also für den Rahmen
Dieses Problem, wahrscheinlich

65
00:03:24,220 --> 00:03:27,450
macht es Sinn, nur zu
akzeptieren positive Werte.

66
00:03:27,450 --> 00:03:32,010
>> So bewegen on-- haben wir erhalten eine
Wert in US-Dollar von dem Benutzer.

67
00:03:32,010 --> 00:03:35,380
Aber wir es zu tun mit Münzen,
davon sind vollständig in Cent.

68
00:03:35,380 --> 00:03:38,660
$ 1 entspricht 100 Cent.

69
00:03:38,660 --> 00:03:43,670
So eine gute Sache zu tun ist,
diese Werte in Cent konvertieren.

70
00:03:43,670 --> 00:03:48,380
>> Nun, wenn die Umwandlung von einem Schwimmer
in eine ganze Zahl, so Dollar-Cent,

71
00:03:48,380 --> 00:03:52,230
Wir wollen sicherstellen, dass wir vorsichtig sind
über Floating-Point-Unschärfen.

72
00:03:52,230 --> 00:03:55,260
Das heißt also, dass dass-- sagen
mein Dollar value-- mein Schwimmer

73
00:03:55,260 --> 00:04:00,260
value-- war ein noch $ 2, gibt es noch
kann es einige Streu Zahlen.

74
00:04:00,260 --> 00:04:04,590
So wollen wir sicherstellen, dass nicht nur
gehen wir von 100 multiplizieren die Cent zu bekommen,

75
00:04:04,590 --> 00:04:06,480
aber wir runden es auch ab.

76
00:04:06,480 --> 00:04:09,210
>> So, jetzt haben wir den Betrag
Veränderungen an den Benutzer zu verdanken.

77
00:04:09,210 --> 00:04:13,430
Wir erhielten ursprünglich es in US-Dollar,
und jetzt haben wir es zu Cent umgerechnet.

78
00:04:13,430 --> 00:04:17,029
So, jetzt können wir mit dem Herzen gehen
der Greedy-Algorithmus, der immer ist

79
00:04:17,029 --> 00:04:19,220
mit der größten Münze möglich.

80
00:04:19,220 --> 00:04:21,930
Während wir tun dies,
es ist wichtig, dass wir auch

81
00:04:21,930 --> 00:04:25,360
zu verfolgen, wie viele Münzen
gehen an den Benutzer zurückgegeben werden,

82
00:04:25,360 --> 00:04:28,630
sowie die restlichen
ändern, um den Benutzer zu verdanken.

83
00:04:28,630 --> 00:04:31,130
>> Das Programm sucht
etwas wie das.

84
00:04:31,130 --> 00:04:34,190
Nachdem Sie erhalten die Menge an
Dollar und wandeln das zu Cent,

85
00:04:34,190 --> 00:04:35,790
dann werden Sie in eine Schleife.

86
00:04:35,790 --> 00:04:38,400
Während Viertel kann sein
used-- dh

87
00:04:38,400 --> 00:04:43,660
während die Menge der Änderung der geschuldete
Benutzer größer oder gleich $ 0,25 ist,

88
00:04:43,660 --> 00:04:45,040
Sie werden ein Viertel verwenden.

89
00:04:45,040 --> 00:04:47,000
>> Was bedeutet nun mit einem Viertel mit sich bringen?

90
00:04:47,000 --> 00:04:51,280
Nun, one-- Sie die Münze erhöhen
zählen, an den Benutzer zurückgegeben werden.

91
00:04:51,280 --> 00:04:55,890
Und zweitens werde verringern Sie die aktuelle
Ausmaß der Veränderung an den Benutzer geschuldet zurück

92
00:04:55,890 --> 00:04:57,520
von $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Nach Wiederholung, dass bis
Viertel kann nicht mehr verwendet werden,

94
00:05:00,680 --> 00:05:04,630
fahren Sie mit dem nächstgrößeren
coin-- in diesem Fall Dimes, 0,10 $.

95
00:05:04,630 --> 00:05:07,750
So werden Sie diese Schleife eingeben, bis
Sie können nicht mehr Dimes verwenden.

96
00:05:07,750 --> 00:05:10,720
Dann gehen Sie zum nächsten
größte Münze, Nickels.

97
00:05:10,720 --> 00:05:14,810
Nach Nickels kann nicht mehr verwendet werden,
Verwenden Sie den verbleibenden Betrag in ein paar Cent.

98
00:05:14,810 --> 00:05:17,800
Und schließlich drucken die
Anzahl der Münzen verwendet.

99
00:05:17,800 --> 00:05:20,350
>> Eine andere Möglichkeit, das kann man
nähern sich der gierige Problem

100
00:05:20,350 --> 00:05:22,950
ist der Modulo-Ansatz zu verwenden.

101
00:05:22,950 --> 00:05:25,690
Modulo ist ein Operator
dass gibt den Rest

102
00:05:25,690 --> 00:05:27,680
der Teilung zwischen zwei Zahlen.

103
00:05:27,680 --> 00:05:30,270
Sagen, dass ich 50 mod 5 hatte.

104
00:05:30,270 --> 00:05:34,070
Nun, 5 ist ein Faktor von 50,
so wird der Rest 0 sein.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- gut, 10 ist auch ein Faktor
50, so ist der Rest auch 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- gut, jede Zahl selbst mod
gehen zu müssen, ist kein Rest.

107
00:05:43,660 --> 00:05:45,510
>> Was etwa 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Nun, 49 wird nur in 50 einmal.

109
00:05:47,910 --> 00:05:50,290
Also der Rest wird 1 zu sein.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 geht zu
geben Sie einen Rest von 3.

111
00:05:55,180 --> 00:05:59,120
>> Wie können wir also Modulo verwenden
und vielleicht einige Teilung

112
00:05:59,120 --> 00:06:01,690
unsere Greedy-Algorithmus zu implementieren?

113
00:06:01,690 --> 00:06:05,550
Nun, wir wollen immer noch die treu zu bleiben
Herz des gierigen algorithm-- dass

114
00:06:05,550 --> 00:06:07,910
ist die größte Münze möglich verwenden.

115
00:06:07,910 --> 00:06:14,570
>> Also machen wir uns fragen, ob wir irgend verwenden können
Quartier für den Benutzer $ 0,32 zurück.

116
00:06:14,570 --> 00:06:20,070
Nun, 32 mod 25 gibt
uns ein Rest von $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Damit sagt uns, dass wir auf jeden Fall
Verwenden Sie ein Viertel mit $ 0,07 zu bleiben.

118
00:06:24,500 --> 00:06:26,180
>> Können wir dann alle Dimes benutzen?

119
00:06:26,180 --> 00:06:32,740
Nun, NO- weil $ 0,07 mod
$ 0,10 gibt uns einen Rest von 7.

120
00:06:32,740 --> 00:06:34,960
10 geht gar nicht in 7.

121
00:06:34,960 --> 00:06:36,390
>> Dann können wir Nickels benutzen?

122
00:06:36,390 --> 00:06:40,490
Nun $ 0,07 mod 5 Cent
gibt uns zwei zu bleiben.

123
00:06:40,490 --> 00:06:42,930
Und schließlich können wir alle ein paar Cent benutzen?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 gibt uns 0,
Das ist letztlich das, was

125
00:06:45,930 --> 00:06:48,160
wir wollen, weil dann, dass
bedeutet, dass wir zurückgekommen

126
00:06:48,160 --> 00:06:50,160
dem Benutzer alle der Veränderung zu verdanken.

127
00:06:50,160 --> 00:06:54,320
>> So, jetzt haben Sie zwei Möglichkeiten,
Umsetzung des gierigen algorithm--

128
00:06:54,320 --> 00:06:59,230
eines mit Schlaufen und eine mit
Kombination von Modulo und Division.

129
00:06:59,230 --> 00:07:03,010
So endlich, wir müssen nur
drucken Sie die endgültige Anzahl der Münzen.

130
00:07:03,010 --> 00:07:06,520
>> Wenn ich wollte Ihnen sagen, dass ich
3 Haustiere und dieser Wert wurde fest einprogrammiert,

131
00:07:06,520 --> 00:07:09,240
Ich konnte dann benutzen Sie einfach eine
einfache Drucktest-Anweisung.

132
00:07:09,240 --> 00:07:12,320
Aber unser Wert ist eigentlich
in einer Variablen gespeichert.

133
00:07:12,320 --> 00:07:15,260
So, wie Sie drucken Sie die
Werte in Variablen gespeichert?

134
00:07:15,260 --> 00:07:17,880
>> Dazu nehmen wir
Vorteil der Platzhalter.

135
00:07:17,880 --> 00:07:21,540
Sagen wir, ich hatte bereits erklärt
eine initialisierte ganze Zahl n.

136
00:07:21,540 --> 00:07:25,170
Später dann, wenn ich zu drucken wollte, dass
Wert, dann würde ich die Zeichenfolge schreiben.

137
00:07:25,170 --> 00:07:30,500
Und anstelle von diesem Wert würde ich
ein Platzhalter für das integer--% i.

138
00:07:30,500 --> 00:07:33,800
Dann, nach der Zeichenfolge, ich habe ein
Komma, durch die Variable gefolgt

139
00:07:33,800 --> 00:07:34,950
dass ich will zu drucken.

140
00:07:34,950 --> 00:07:38,550
Und später, wenn er druckt,
es wird den Wert von n drucken.

141
00:07:38,550 --> 00:07:41,570
>> Ich könnte auch einen Platzhalter verwenden
für einen Schwimmer, zum Beispiel.

142
00:07:41,570 --> 00:07:44,000
Wenn ich wollte Ihnen sagen, wie
viel Geld ich in der Tasche haben,

143
00:07:44,000 --> 00:07:46,820
Ich könnte dann sagen, dass ich% f Dollar.

144
00:07:46,820 --> 00:07:51,330
Und später, wenn es gedruckt wird, dann wird n
an die Stelle des Platzhalters.

145
00:07:51,330 --> 00:07:55,530
Ich könnte auch zum Beispiel verwenden, um mehrere
Platzhalter für mehrere Variablen.

146
00:07:55,530 --> 00:07:57,590
So lange, wie ich Liste
sie um, dann ich

147
00:07:57,590 --> 00:08:00,390
kann Ihnen sagen, wie viele
Hunde und Katzen, die ich habe.

148
00:08:00,390 --> 00:08:03,710
>> Jetzt wissen wir, wie die aufzufordern
Benutzer für einen Betrag von Veränderung,

149
00:08:03,710 --> 00:08:06,130
sicherzustellen, dass diese Eingabe
wir gültig ist, und dann

150
00:08:06,130 --> 00:08:10,370
haben zwei mögliche Wege zur Umsetzung der
der Greedy-Algorithmus von immer mit

151
00:08:10,370 --> 00:08:12,090
die größte Münze möglich.

152
00:08:12,090 --> 00:08:15,050
Weil wir weiterverfolgen
wie viele Münzen wir verwenden,

153
00:08:15,050 --> 00:08:19,210
dann können wir diesen Wert am Ende zu drucken,
dem Benutzer zu sagen, wie viele Münzen sie sind

154
00:08:19,210 --> 00:08:20,240
immer wieder.

155
00:08:20,240 --> 00:08:24,240
>> Mein Name ist der Amayla, und dies ist CS50.

156
00:08:24,240 --> 00:08:25,915

