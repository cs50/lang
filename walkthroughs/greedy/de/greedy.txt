Lassen Sie uns gierig. In gierig, unsere Aufgabe ist es zu spielen die Rolle eines gierigen Kassierer. Der Benutzer wird uns sagen, wie viel Veränderung, die wir ihnen verdanken, und dann ist unsere Aufgabe zu berechnen die minimale Anzahl von Münzen dass wir zu machen verwenden dass Ausmaß der Veränderung. 

Beginnen wir mit einem Beispiel an. Sagen Sie den Benutzer $ 0,32 zurück erfordert. Wir könnten dies tun, indem sie sie 32 Cent, ein Cent je. Oder ich könnte auch fünf coins-- verwenden, indem Sie geben ihnen drei Groschen, 0,10 $ pro Stück, und zwei Cent, 0,02 $ je. Aber könnten wir verwenden auch weniger Münzen, das zu machen? 

Die ganze Taktik in greedy-- ein gieriger cashier-- zu sein ist die größte Münze möglich zu nutzen. Also, wenn wir Viertel werden wir sie nutzen. Und dann, wenn diejenigen ausgehen, wir Dimes verwenden, $ 0.10. Dann Nickels, 5 Cent pro Stück, und dann bis auf ein paar Cent, ein Cent je. Durch die größte Münze möglich, wenn wir können, stellen wir sicher, dass wir die wenigsten nutzen von Münzen möglich, die Änderung vorzunehmen. 

Also lassen Sie uns diese zu Fuß durch. Der Benutzer muss $ 0,32. Also fragen wir uns, können wir ein Viertel verwenden? Nun, ja wir können. So, jetzt wissen wir sie nur 0,07 $, und wir haben eine Münze. 

Können wir ein weiteres Quartal nutzen? Nun, nein. 0,07 $ weniger als 0,25 $, so dass wir fortfahren auf den nächstgrößeren Münze zur Verfügung. Dimes sind $ 0,10 und wieder, können wir nicht Dimes verwenden. Da Dimes sind im Wert von $ 0,10 die geschuldet ist mehr als die Menge der Änderung. 

Wir gehen zu Nickels. Und, ja in der Tat, ist 0,05 $ weniger als $ 0.10-- so können wir eine Nickel verwenden. So, jetzt verdanken wir nur dem Benutzer $ 0,02, und wir haben so verwendet weit zwei Münzen. Wir können nicht ein weiteres Nickel verwenden. Also dann gehen wir auf die letzte Münze auf Verfügung, die die paar Cent sind. 

Und können wir Penny benutzen? Nun, yes-- und wir am Ende mit zwei Pennies für insgesamt vier Münzen. 

Sobald Sie fertig sind, die Programm sieht wie folgt aus. Sobald der Benutzer läuft die gierigen Programm, werden sie werden aufgefordert, den Betrag zu geben, Veränderung in Dollar, die sie geschuldet sind. Und dann ausgegeben wird Ihr Programm die minimale Anzahl an Münzen dass die gierigen Kassierer verwenden würde dass die Größe der Veränderung zu machen. 

So, jetzt lassen Sie uns dies brechen nach unten in unsere Unteraufgaben. Zuerst werden wir aufgefordert uns Benutzer für einen Betrag von Veränderung. Und wie bei jeder Benutzereingabe, möchten wir stellen Sie sicher, dass wir, dass die Eingabe bestätigen und stellen Sie sicher, dass wir das nutzen können Eingang für den Rest unseres Programms. Dann werden wir immer Verwenden Sie die größte Punkt möglich und behalten den Überblick über die verwendeten Münzen. Und schließlich drucken die endgültige Anzahl der Münzen, die wir verwendet. 

Also lassen Sie uns darüber reden, zu fragen. Der Betrag muss Cent machen, und dies ist in US-Dollar. Und so für Dollar, wir gehen der Schwimmer Variablentyp zu verwenden. Nun, wenn Sie bitten, einen Benutzer zur Eingabe, Sie wollen sicherstellen, dass es gültig ist. Und hier wie wir zu nutzen der do-while-Schleife-Konstrukt. 

Eine do-while-Schleife wird ausgeführt, die Körper der mindestens einmal Schleife. So kommt dies praktisch. Wir wissen, dass wir aufgefordert, müssen die Benutzer mindestens einmal für einen Schwimmer. Nun, wenn das Schwimmer gültig ist. Das ist großartig. Wir gehen weiter. Aber wenn nicht, wird die Schleife sicherzustellen, dass wir bekommen eine richtige Schwimmer durch Wiederholung kontinuierlich, bis der Benutzer gibt uns einen gültigen Wert. 

Jetzt für die do-while Schleifenbedingung, wir brauchen zu überlegen, was es bedeutet, einen ungültigen Schwimmer zu haben. Also für den Rahmen Dieses Problem, wahrscheinlich macht es Sinn, nur zu akzeptieren positive Werte. 

So bewegen on-- haben wir erhalten eine Wert in US-Dollar von dem Benutzer. Aber wir es zu tun mit Münzen, davon sind vollständig in Cent. $ 1 entspricht 100 Cent. So eine gute Sache zu tun ist, diese Werte in Cent konvertieren. 

Nun, wenn die Umwandlung von einem Schwimmer in eine ganze Zahl, so Dollar-Cent, Wir wollen sicherstellen, dass wir vorsichtig sind über Floating-Point-Unschärfen. Das heißt also, dass dass-- sagen mein Dollar value-- mein Schwimmer value-- war ein noch $ 2, gibt es noch kann es einige Streu Zahlen. So wollen wir sicherstellen, dass nicht nur gehen wir von 100 multiplizieren die Cent zu bekommen, aber wir runden es auch ab. 

So, jetzt haben wir den Betrag Veränderungen an den Benutzer zu verdanken. Wir erhielten ursprünglich es in US-Dollar, und jetzt haben wir es zu Cent umgerechnet. So, jetzt können wir mit dem Herzen gehen der Greedy-Algorithmus, der immer ist mit der größten Münze möglich. Während wir tun dies, es ist wichtig, dass wir auch zu verfolgen, wie viele Münzen gehen an den Benutzer zurückgegeben werden, sowie die restlichen ändern, um den Benutzer zu verdanken. 

Das Programm sucht etwas wie das. Nachdem Sie erhalten die Menge an Dollar und wandeln das zu Cent, dann werden Sie in eine Schleife. Während Viertel kann sein used-- dh während die Menge der Änderung der geschuldete Benutzer größer oder gleich $ 0,25 ist, Sie werden ein Viertel verwenden. 

Was bedeutet nun mit einem Viertel mit sich bringen? Nun, one-- Sie die Münze erhöhen zählen, an den Benutzer zurückgegeben werden. Und zweitens werde verringern Sie die aktuelle Ausmaß der Veränderung an den Benutzer geschuldet zurück von $ 0,25. 

Nach Wiederholung, dass bis Viertel kann nicht mehr verwendet werden, fahren Sie mit dem nächstgrößeren coin-- in diesem Fall Dimes, 0,10 $. So werden Sie diese Schleife eingeben, bis Sie können nicht mehr Dimes verwenden. Dann gehen Sie zum nächsten größte Münze, Nickels. Nach Nickels kann nicht mehr verwendet werden, Verwenden Sie den verbleibenden Betrag in ein paar Cent. Und schließlich drucken die Anzahl der Münzen verwendet. 

Eine andere Möglichkeit, das kann man nähern sich der gierige Problem ist der Modulo-Ansatz zu verwenden. Modulo ist ein Operator dass gibt den Rest der Teilung zwischen zwei Zahlen. Sagen, dass ich 50 mod 5 hatte. Nun, 5 ist ein Faktor von 50, so wird der Rest 0 sein. 50 mod 10-- gut, 10 ist auch ein Faktor 50, so ist der Rest auch 0. 50 mod 50-- gut, jede Zahl selbst mod gehen zu müssen, ist kein Rest. 

Was etwa 50 mod 49? Nun, 49 wird nur in 50 einmal. Also der Rest wird 1 zu sein. 53 mod 50 geht zu geben Sie einen Rest von 3. 

Wie können wir also Modulo verwenden und vielleicht einige Teilung unsere Greedy-Algorithmus zu implementieren? Nun, wir wollen immer noch die treu zu bleiben Herz des gierigen algorithm-- dass ist die größte Münze möglich verwenden. 

Also machen wir uns fragen, ob wir irgend verwenden können Quartier für den Benutzer $ 0,32 zurück. Nun, 32 mod 25 gibt uns ein Rest von $ 0,07. Damit sagt uns, dass wir auf jeden Fall Verwenden Sie ein Viertel mit $ 0,07 zu bleiben. 

Können wir dann alle Dimes benutzen? Nun, NO- weil $ 0,07 mod $ 0,10 gibt uns einen Rest von 7. 10 geht gar nicht in 7. 

Dann können wir Nickels benutzen? Nun $ 0,07 mod 5 Cent gibt uns zwei zu bleiben. Und schließlich können wir alle ein paar Cent benutzen? 2 mod 1 gibt uns 0, Das ist letztlich das, was wir wollen, weil dann, dass bedeutet, dass wir zurückgekommen dem Benutzer alle der Veränderung zu verdanken. 

So, jetzt haben Sie zwei Möglichkeiten, Umsetzung des gierigen algorithm-- eines mit Schlaufen und eine mit Kombination von Modulo und Division. So endlich, wir müssen nur drucken Sie die endgültige Anzahl der Münzen. 

Wenn ich wollte Ihnen sagen, dass ich 3 Haustiere und dieser Wert wurde fest einprogrammiert, Ich konnte dann benutzen Sie einfach eine einfache Drucktest-Anweisung. Aber unser Wert ist eigentlich in einer Variablen gespeichert. So, wie Sie drucken Sie die Werte in Variablen gespeichert? 

Dazu nehmen wir Vorteil der Platzhalter. Sagen wir, ich hatte bereits erklärt eine initialisierte ganze Zahl n. Später dann, wenn ich zu drucken wollte, dass Wert, dann würde ich die Zeichenfolge schreiben. Und anstelle von diesem Wert würde ich ein Platzhalter für das integer--% i. Dann, nach der Zeichenfolge, ich habe ein Komma, durch die Variable gefolgt dass ich will zu drucken. Und später, wenn er druckt, es wird den Wert von n drucken. 

Ich könnte auch einen Platzhalter verwenden für einen Schwimmer, zum Beispiel. Wenn ich wollte Ihnen sagen, wie viel Geld ich in der Tasche haben, Ich könnte dann sagen, dass ich% f Dollar. Und später, wenn es gedruckt wird, dann wird n an die Stelle des Platzhalters. Ich könnte auch zum Beispiel verwenden, um mehrere Platzhalter für mehrere Variablen. So lange, wie ich Liste sie um, dann ich kann Ihnen sagen, wie viele Hunde und Katzen, die ich habe. 

Jetzt wissen wir, wie die aufzufordern Benutzer für einen Betrag von Veränderung, sicherzustellen, dass diese Eingabe wir gültig ist, und dann haben zwei mögliche Wege zur Umsetzung der der Greedy-Algorithmus von immer mit die größte Münze möglich. Weil wir weiterverfolgen wie viele Münzen wir verwenden, dann können wir diesen Wert am Ende zu drucken, dem Benutzer zu sagen, wie viele Münzen sie sind immer wieder. 

Mein Name ist der Amayla, und dies ist CS50. 