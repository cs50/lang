Aconseguirem cobdiciós. En cobdiciosos, el nostre treball és jugar el paper d'un caixer cobdiciós. L'usuari ens dirà com molts canvis que els devem, i després el nostre treball és calcular el nombre mínim de monedes que podem utilitzar per fer aquesta quantitat de canvi. 

Anem a començar amb un exemple. Diguem que l'usuari requereix $ 0,32 esquena. Podríem fer això donant a 32 centaus, un cèntim cada un. O també podia utilitzar cinc per coins-- donant-los tres monedes de deu centaus, 0,10 $ cadascuna, i dos centaus, 0,02 $ cadascun. Però podríem utilitzar fins i tot un menor nombre de monedes per fer això? 

Tota la tàctica en greedy-- ser un cobdiciós cashier-- és utilitzar el més gran de monedes possible. Així que cada vegada que tenim quartes parts farem servir ells. I després un cop les administrades a terme, utilitzarem monedes de deu centaus, 0,10 $ cadascuna. Després de cinc centaus, 5 centaus cada un, i després cap avall per a monedes d'un cèntim, un cèntim cada un. Mitjançant l'ús de la moneda més gran és possible sempre que puguem, ens assegurem que fem servir el menor nombre de monedes possible fer el canvi. 

Així que anem a caminar a través d'aquest. L'usuari necessita $ 0,32. Així que ens preguntem, podem utilitzar una cambra? Bé, sí que podem. Així que ara només els coneixem $ 0,07 i es va utilitzar una moneda. 

Es pot utilitzar un altre quart? Bé, no. $ 0,07 és menys de $ 0,25, per la qual es procedeix a la moneda següent més gran disponible. Dimes són $ 0,10; i de nou, no podem usar monedes de deu centaus. A causa de monedes de deu centaus valen 0,10 $ la qual és més que la quantitat de canvi que deu. 

Anem a monedes de cinc centaus. I, sí, és clar, 0,05 $ és inferior a $ 0.10-- així que podem fer servir un níquel. Així que ara només ens hem de l'usuari $ 0,02, i que hem utilitzat fins ara dues monedes. No podem utilitzar un altre níquel. Així que a continuació es procedeix a l'última moneda a la nostra disposició, que són les monedes d'un cèntim. 

I podem fer servir cèntim? Bé, sí-- i vam acabar utilitzant dos monedes d'un cèntim per a un total de quatre monedes. 

Un cop hagi acabat, la programa tindrà aquest aspecte. Una vegada que l'usuari executa el programa de cobdiciosos, van a se li pregunti per donar la quantitat de canvi en dòlars que se'ls deu. I llavors la seva voluntat de sortida del programa la mínima quantitat de monedes que el caixer cobdiciosos utilitzaria per fer que la quantitat de canvi. 

Així que ara anem a trencar aquest cap avall en els nostres subtasques. En primer lloc anem a indicar-li al nostre d'usuari per a una quantitat de canvi. I, com amb qualsevol entrada de l'usuari, volem assegurar-se que nosaltres confirmem que l'entrada i assegurar que podem fer servir aquesta entrada per a la resta del nostre programa. A continuació, anem a sempre utilitzar el punt més gran possible i realitzar un seguiment de les monedes utilitzades. I, finalment, imprimir la final nombre de monedes que utilitzem. 

Així que anem a parlar de preguntar. La quantitat ha de fer centaus, i això és en dòlars. I així per dòlars, anem utilitzar el tipus de variable de tipus float. Ara cada vegada que es pregunta a un usuari per a l'entrada, vostè vol assegurar-se que és vàlid. Així que aquí ens agrada aprofitar de la construcció de bucle do-while. 

Un bucle do-while s'executarà la cos del bucle almenys una vegada. Així que això és molt útil. Sabem que hem de demanar al usuari com a mínim un cop per un flotador. Ara si que suren és vàlida. Això és genial. Nosaltres seguim endavant. Però si no, el bucle s'assegurarà que vam aconseguir una flotació adequada repetint contínuament fins l'usuari ens dóna un valor vàlid. 

Ara, per al do-while condició del bucle, necessitem en considerar el que significa tenir un flotador no vàlid. Així que per al context de aquest problema, probablement que té sentit només per acceptar els valors positius. 

Així es mou en-- hem obtingut una el valor en dòlars per part de l'usuari. Però estem tractant amb monedes, els quals són íntegrament en centaus. $ 1 equival a 100 centaus. Així que una bona cosa de fer és convertir aquests valors en centaus. 

Ara quan es converteix d'un flotador a un sencer, de manera dòlars a centaus, volem assegurar-nos que tenim cura sobre de coma flotant imprecisió. Pel que significa que- diuen el meu dòlar value-- meu flotador value-- era un fins i tot $ 2, hi ha encara pot haver alguns números solts en aquest país. Pel que volem per assegurar-se que no només Encara multipliquem per 100 per obtenir els centaus, però també colofó. 

Així que ara tenim la quantitat Canvi contret amb l'usuari. Es van obtenir originalment en dòlars, i ara ens hem convertit a centaus. Així que ara podem procedir amb el cor de l'algoritme cobdiciós, la qual cosa és sempre utilitzant la moneda més gran possible. Mentre que estem fent això, és essencial que també portar un registre de quantes monedes són serà retornat a l'usuari així com la restant canviar contret amb l'usuari. 

El programa mirarà alguna cosa com això. Després d'obtenir la quantitat de dòlars i convertir això a centaus, a continuació, vas a entrar en un bucle. Mentre quarts poden ser used-- és a dir mentre que la quantitat de canvi a causa de la d'usuari és més gran que o igual a 0,25 $, que utilitzarà una cambra. 

Ara el que fa ús d'un quart consisteix? Bé, un-- vostè augmentarà la moneda comptar per ser retornat a l'usuari. I en segon lloc baixarà l'actual quantitat de canvi devia volta a l'usuari per $ a 0,25. 

Després de repetir que fins quartes parts ja no es poden utilitzar, continueu amb el més gran coin-- en aquest cas les monedes de deu centaus, 0,10 $. Així que vas a entrar en bucle fins ja no es pot utilitzar monedes de deu centaus. A continuació, procedir a la següent més gran de monedes, monedes de cinc centaus. Després de monedes de cinc centaus ja no es poden utilitzar, utilitzar la quantitat restant en monedes d'un cèntim. I, finalment, imprimir el nombre de monedes que utilitza. 

Una altra manera que pugui abordar el problema cobdiciosos és utilitzar el mètode de mòdul. Mòdul és un operador que retorna la resta de la divisió entre dos nombres. Dir que tenia 50 mod 5. Bé, 5 és un factor de 50, per la qual cosa la resta serà 0. 50 mod 10-- així, 10 és també un factor de 50, de manera que la resta és també 0. 50 mod 50-- així, qualsevol nombre MOD propi no va a tenir cap resta. 

Què hi ha de 50 mod 49? Bé, de 49 anys només s'entra al 50 una vegada. Així que la resta va a ser 1. 53 mod 50 va a donar-li una resta de 3. 

Llavors, com podem utilitzar mòdul i potser alguna divisió per posar en pràctica el nostre algoritme cobdiciós? Bé, encara volem romandre fidels a la cor dels cobdiciosos que algorithm-- és l'ús de la moneda més gran possible. 

Així que anem a preguntar-nos si podem utilitzar qualsevol quarts per tornar $ 0,32 i l'usuari. Bé, 32 mod 25 dóna nosaltres una resta de $ un 0,07. Pel que ens diu que podem definitivament utilitzar una cambra amb 0,07 $ restant. 

Es pot utilitzar qualssevol monedes de deu centaus? Bé, perquè no-- 0,07 $ mod $ 0,10 ens dóna un residu de 7. 10 no entra en 7 en absolut. 

Llavors podem usar monedes de cinc centaus? Bé 0,07 $ mod 5 centaus ens dóna dues restants. I, finalment, podem utilitzar qualsevol monedes d'un cèntim? 2 mod 1 ens dóna 0, que és en definitiva el volem perquè llavors que vol dir que ens hem tornat a l'usuari tots els canvis que ha. 

Així que ara té dos possibles formes de l'aplicació de la algorithm-- cobdiciosos un amb bucles i una amb una combinació de mòdul i la divisió. Així que, finalment, només hem de imprimir el nombre definitiu de les monedes. 

Si volia dir que vaig tenir 3 mascotes i aquest valor va ser codificat, llavors jo només podia utilitzar una declaració de prova d'impressió senzilla. Però el nostre valor és en realitat emmagatzemat en una variable. Llavors, com s'imprimeix el els valors emmagatzemats en les variables? 

Per a això, prenem avantatge dels marcadors de posició. Diguem que ja havia declarat un enter n inicialitzat. Després, més tard si volia imprimir aquesta valor, llavors m'agradaria escriure la cadena. I en lloc que el valor que jo faria servir un marcador de posició perquè integer -% i. A continuació, després de la cadena, tinc una coma, seguit de la variable que vull imprimir. I més endavant, quan s'imprimeix, que va a imprimir el valor de n. 

També podria utilitzar un marcador de posició per a un flotador, per exemple. Si volia dir-li com la quantitat de diners que tinc a la butxaca, llavors jo podria dir que tinc dòlars% f. I més endavant, quan s'imprimeix, llavors n es prendre el lloc d'aquest marcador de posició. Podria també, per exemple, utilitzar diversos marcadors de posició per a diverses variables. Així que, mentre enumero en ordre, llavors jo li pot dir quantes gossos i gats que tenen. 

Ara sabem com perquè aparegui la d'usuari per a una quantitat de canvi, assegurar que aquesta entrada és vàlida, i després tenir dues possibles formes d'aplicar l'algoritme cobdiciós d'utilitzar sempre la moneda més gran possible. A causa de que hem mantingut un registre de quantes monedes que estem utilitzant, llavors podem imprimir aquest valor al final, indicant a l'usuari quantes monedes que estan tornar. 

El meu nom és el Amayla, i això és CS50. 