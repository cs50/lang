1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Aconseguirem cobdiciós.

3
00:00:02,900 --> 00:00:06,810
En cobdiciosos, el nostre treball és jugar
el paper d'un caixer cobdiciós.

4
00:00:06,810 --> 00:00:09,750
L'usuari ens dirà com
molts canvis que els devem,

5
00:00:09,750 --> 00:00:13,520
i després el nostre treball és calcular
el nombre mínim de monedes

6
00:00:13,520 --> 00:00:17,240
que podem utilitzar per fer
aquesta quantitat de canvi.

7
00:00:17,240 --> 00:00:19,560
>> Anem a començar amb un exemple.

8
00:00:19,560 --> 00:00:23,170
Diguem que l'usuari requereix $ 0,32 esquena.

9
00:00:23,170 --> 00:00:28,960
Podríem fer això donant
a 32 centaus, un cèntim cada un.

10
00:00:28,960 --> 00:00:35,180
O també podia utilitzar cinc per coins--
donant-los tres monedes de deu centaus, 0,10 $ cadascuna,

11
00:00:35,180 --> 00:00:38,060
i dos centaus, 0,02 $ cadascun.

12
00:00:38,060 --> 00:00:42,580
Però podríem utilitzar fins i tot
un menor nombre de monedes per fer això?

13
00:00:42,580 --> 00:00:45,100
>> Tota la tàctica en greedy--
ser un cobdiciós cashier--

14
00:00:45,100 --> 00:00:47,600
és utilitzar el més gran de monedes possible.

15
00:00:47,600 --> 00:00:50,670
Així que cada vegada que tenim
quartes parts farem servir ells.

16
00:00:50,670 --> 00:00:54,100
I després un cop les administrades a terme,
utilitzarem monedes de deu centaus, 0,10 $ cadascuna.

17
00:00:54,100 --> 00:00:58,840
Després de cinc centaus, 5 centaus cada un, i
després cap avall per a monedes d'un cèntim, un cèntim cada un.

18
00:00:58,840 --> 00:01:01,792
Mitjançant l'ús de la moneda més gran
és possible sempre que puguem,

19
00:01:01,792 --> 00:01:07,350
ens assegurem que fem servir el menor nombre
de monedes possible fer el canvi.

20
00:01:07,350 --> 00:01:09,180
>> Així que anem a caminar a través d'aquest.

21
00:01:09,180 --> 00:01:11,660
L'usuari necessita $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Així que ens preguntem,
podem utilitzar una cambra?

23
00:01:14,200 --> 00:01:15,560
Bé, sí que podem.

24
00:01:15,560 --> 00:01:19,720
Així que ara només els coneixem
$ 0,07 i es va utilitzar una moneda.

25
00:01:19,720 --> 00:01:20,970
>> Es pot utilitzar un altre quart?

26
00:01:20,970 --> 00:01:21,890
Bé, no.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 és menys de $ 0,25, per la qual es procedeix
a la moneda següent més gran disponible.

28
00:01:27,570 --> 00:01:30,690
Dimes són $ 0,10; i
de nou, no podem usar monedes de deu centaus.

29
00:01:30,690 --> 00:01:35,480
A causa de monedes de deu centaus valen 0,10 $ la qual
és més que la quantitat de canvi que deu.

30
00:01:35,480 --> 00:01:36,790
>> Anem a monedes de cinc centaus.

31
00:01:36,790 --> 00:01:40,890
I, sí, és clar, 0,05 $ és inferior a
$ 0.10-- així que podem fer servir un níquel.

32
00:01:40,890 --> 00:01:46,104
Així que ara només ens hem de l'usuari $ 0,02,
i que hem utilitzat fins ara dues monedes.

33
00:01:46,104 --> 00:01:47,270
No podem utilitzar un altre níquel.

34
00:01:47,270 --> 00:01:51,140
Així que a continuació es procedeix a l'última moneda a
la nostra disposició, que són les monedes d'un cèntim.

35
00:01:51,140 --> 00:01:52,270
>> I podem fer servir cèntim?

36
00:01:52,270 --> 00:01:59,060
Bé, sí-- i vam acabar utilitzant dos
monedes d'un cèntim per a un total de quatre monedes.

37
00:01:59,060 --> 00:02:01,430
>> Un cop hagi acabat, la
programa tindrà aquest aspecte.

38
00:02:01,430 --> 00:02:03,710
Una vegada que l'usuari executa el
programa de cobdiciosos, van a

39
00:02:03,710 --> 00:02:07,270
se li pregunti per donar la quantitat de
canvi en dòlars que se'ls deu.

40
00:02:07,270 --> 00:02:11,140
I llavors la seva voluntat de sortida del programa
la mínima quantitat de monedes

41
00:02:11,140 --> 00:02:14,740
que el caixer cobdiciosos utilitzaria
per fer que la quantitat de canvi.

42
00:02:14,740 --> 00:02:18,160
>> Així que ara anem a trencar aquest
cap avall en els nostres subtasques.

43
00:02:18,160 --> 00:02:21,410
En primer lloc anem a indicar-li al nostre
d'usuari per a una quantitat de canvi.

44
00:02:21,410 --> 00:02:25,630
I, com amb qualsevol entrada de l'usuari, volem
assegurar-se que nosaltres confirmem que l'entrada

45
00:02:25,630 --> 00:02:29,360
i assegurar que podem fer servir aquesta
entrada per a la resta del nostre programa.

46
00:02:29,360 --> 00:02:32,480
A continuació, anem a sempre
utilitzar el punt més gran possible

47
00:02:32,480 --> 00:02:35,240
i realitzar un seguiment de les monedes utilitzades.

48
00:02:35,240 --> 00:02:39,080
I, finalment, imprimir la final
nombre de monedes que utilitzem.

49
00:02:39,080 --> 00:02:40,970
>> Així que anem a parlar de preguntar.

50
00:02:40,970 --> 00:02:43,550
La quantitat ha de fer centaus,
i això és en dòlars.

51
00:02:43,550 --> 00:02:48,440
I així per dòlars, anem
utilitzar el tipus de variable de tipus float.

52
00:02:48,440 --> 00:02:52,390
Ara cada vegada que es pregunta a un usuari per a l'entrada,
vostè vol assegurar-se que és vàlid.

53
00:02:52,390 --> 00:02:56,640
Així que aquí ens agrada aprofitar
de la construcció de bucle do-while.

54
00:02:56,640 --> 00:03:00,320
>> Un bucle do-while s'executarà la
cos del bucle almenys una vegada.

55
00:03:00,320 --> 00:03:01,650
Així que això és molt útil.

56
00:03:01,650 --> 00:03:05,510
Sabem que hem de demanar al
usuari com a mínim un cop per un flotador.

57
00:03:05,510 --> 00:03:07,100
Ara si que suren és vàlida.

58
00:03:07,100 --> 00:03:07,710
Això és genial.

59
00:03:07,710 --> 00:03:08,460
Nosaltres seguim endavant.

60
00:03:08,460 --> 00:03:11,910
Però si no, el bucle s'assegurarà
que vam aconseguir una flotació adequada

61
00:03:11,910 --> 00:03:16,810
repetint contínuament fins
l'usuari ens dóna un valor vàlid.

62
00:03:16,810 --> 00:03:18,760
>> Ara, per al do-while
condició del bucle, necessitem

63
00:03:18,760 --> 00:03:22,000
en considerar el que significa
tenir un flotador no vàlid.

64
00:03:22,000 --> 00:03:24,220
Així que per al context de
aquest problema, probablement

65
00:03:24,220 --> 00:03:27,450
que té sentit només per
acceptar els valors positius.

66
00:03:27,450 --> 00:03:32,010
>> Així es mou en-- hem obtingut una
el valor en dòlars per part de l'usuari.

67
00:03:32,010 --> 00:03:35,380
Però estem tractant amb monedes,
els quals són íntegrament en centaus.

68
00:03:35,380 --> 00:03:38,660
$ 1 equival a 100 centaus.

69
00:03:38,660 --> 00:03:43,670
Així que una bona cosa de fer és
convertir aquests valors en centaus.

70
00:03:43,670 --> 00:03:48,380
>> Ara quan es converteix d'un flotador
a un sencer, de manera dòlars a centaus,

71
00:03:48,380 --> 00:03:52,230
volem assegurar-nos que tenim cura
sobre de coma flotant imprecisió.

72
00:03:52,230 --> 00:03:55,260
Pel que significa que- diuen
el meu dòlar value-- meu flotador

73
00:03:55,260 --> 00:04:00,260
value-- era un fins i tot $ 2, hi ha encara
pot haver alguns números solts en aquest país.

74
00:04:00,260 --> 00:04:04,590
Pel que volem per assegurar-se que no només
Encara multipliquem per 100 per obtenir els centaus,

75
00:04:04,590 --> 00:04:06,480
però també colofó.

76
00:04:06,480 --> 00:04:09,210
>> Així que ara tenim la quantitat
Canvi contret amb l'usuari.

77
00:04:09,210 --> 00:04:13,430
Es van obtenir originalment en dòlars,
i ara ens hem convertit a centaus.

78
00:04:13,430 --> 00:04:17,029
Així que ara podem procedir amb el cor de
l'algoritme cobdiciós, la qual cosa és sempre

79
00:04:17,029 --> 00:04:19,220
utilitzant la moneda més gran possible.

80
00:04:19,220 --> 00:04:21,930
Mentre que estem fent això,
és essencial que també

81
00:04:21,930 --> 00:04:25,360
portar un registre de quantes monedes són
serà retornat a l'usuari

82
00:04:25,360 --> 00:04:28,630
així com la restant
canviar contret amb l'usuari.

83
00:04:28,630 --> 00:04:31,130
>> El programa mirarà
alguna cosa com això.

84
00:04:31,130 --> 00:04:34,190
Després d'obtenir la quantitat de
dòlars i convertir això a centaus,

85
00:04:34,190 --> 00:04:35,790
a continuació, vas a entrar en un bucle.

86
00:04:35,790 --> 00:04:38,400
Mentre quarts poden ser
used-- és a dir

87
00:04:38,400 --> 00:04:43,660
mentre que la quantitat de canvi a causa de la
d'usuari és més gran que o igual a 0,25 $,

88
00:04:43,660 --> 00:04:45,040
que utilitzarà una cambra.

89
00:04:45,040 --> 00:04:47,000
>> Ara el que fa ús d'un quart consisteix?

90
00:04:47,000 --> 00:04:51,280
Bé, un-- vostè augmentarà la moneda
comptar per ser retornat a l'usuari.

91
00:04:51,280 --> 00:04:55,890
I en segon lloc baixarà l'actual
quantitat de canvi devia volta a l'usuari

92
00:04:55,890 --> 00:04:57,520
per $ a 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Després de repetir que fins
quartes parts ja no es poden utilitzar,

94
00:05:00,680 --> 00:05:04,630
continueu amb el més gran
coin-- en aquest cas les monedes de deu centaus, 0,10 $.

95
00:05:04,630 --> 00:05:07,750
Així que vas a entrar en bucle fins
ja no es pot utilitzar monedes de deu centaus.

96
00:05:07,750 --> 00:05:10,720
A continuació, procedir a la següent
més gran de monedes, monedes de cinc centaus.

97
00:05:10,720 --> 00:05:14,810
Després de monedes de cinc centaus ja no es poden utilitzar,
utilitzar la quantitat restant en monedes d'un cèntim.

98
00:05:14,810 --> 00:05:17,800
I, finalment, imprimir el
nombre de monedes que utilitza.

99
00:05:17,800 --> 00:05:20,350
>> Una altra manera que pugui
abordar el problema cobdiciosos

100
00:05:20,350 --> 00:05:22,950
és utilitzar el mètode de mòdul.

101
00:05:22,950 --> 00:05:25,690
Mòdul és un operador
que retorna la resta

102
00:05:25,690 --> 00:05:27,680
de la divisió entre dos nombres.

103
00:05:27,680 --> 00:05:30,270
Dir que tenia 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Bé, 5 és un factor de 50,
per la qual cosa la resta serà 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- així, 10 és també un factor
de 50, de manera que la resta és també 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- així, qualsevol nombre MOD propi
no va a tenir cap resta.

107
00:05:43,660 --> 00:05:45,510
>> Què hi ha de 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Bé, de 49 anys només s'entra al 50 una vegada.

109
00:05:47,910 --> 00:05:50,290
Així que la resta va a ser 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 va a
donar-li una resta de 3.

111
00:05:55,180 --> 00:05:59,120
>> Llavors, com podem utilitzar mòdul
i potser alguna divisió

112
00:05:59,120 --> 00:06:01,690
per posar en pràctica el nostre algoritme cobdiciós?

113
00:06:01,690 --> 00:06:05,550
Bé, encara volem romandre fidels a la
cor dels cobdiciosos que algorithm--

114
00:06:05,550 --> 00:06:07,910
és l'ús de la moneda més gran possible.

115
00:06:07,910 --> 00:06:14,570
>> Així que anem a preguntar-nos si podem utilitzar qualsevol
quarts per tornar $ 0,32 i l'usuari.

116
00:06:14,570 --> 00:06:20,070
Bé, 32 mod 25 dóna
nosaltres una resta de $ un 0,07.

117
00:06:20,070 --> 00:06:24,500
Pel que ens diu que podem definitivament
utilitzar una cambra amb 0,07 $ restant.

118
00:06:24,500 --> 00:06:26,180
>> Es pot utilitzar qualssevol monedes de deu centaus?

119
00:06:26,180 --> 00:06:32,740
Bé, perquè no-- 0,07 $ mod
$ 0,10 ens dóna un residu de 7.

120
00:06:32,740 --> 00:06:34,960
10 no entra en 7 en absolut.

121
00:06:34,960 --> 00:06:36,390
>> Llavors podem usar monedes de cinc centaus?

122
00:06:36,390 --> 00:06:40,490
Bé 0,07 $ mod 5 centaus
ens dóna dues restants.

123
00:06:40,490 --> 00:06:42,930
I, finalment, podem utilitzar qualsevol monedes d'un cèntim?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 ens dóna 0,
que és en definitiva el

125
00:06:45,930 --> 00:06:48,160
volem perquè llavors que
vol dir que ens hem tornat

126
00:06:48,160 --> 00:06:50,160
a l'usuari tots els canvis que ha.

127
00:06:50,160 --> 00:06:54,320
>> Així que ara té dos possibles formes de
l'aplicació de la algorithm-- cobdiciosos

128
00:06:54,320 --> 00:06:59,230
un amb bucles i una amb una
combinació de mòdul i la divisió.

129
00:06:59,230 --> 00:07:03,010
Així que, finalment, només hem de
imprimir el nombre definitiu de les monedes.

130
00:07:03,010 --> 00:07:06,520
>> Si volia dir que vaig tenir
3 mascotes i aquest valor va ser codificat,

131
00:07:06,520 --> 00:07:09,240
llavors jo només podia utilitzar una
declaració de prova d'impressió senzilla.

132
00:07:09,240 --> 00:07:12,320
Però el nostre valor és en realitat
emmagatzemat en una variable.

133
00:07:12,320 --> 00:07:15,260
Llavors, com s'imprimeix el
els valors emmagatzemats en les variables?

134
00:07:15,260 --> 00:07:17,880
>> Per a això, prenem
avantatge dels marcadors de posició.

135
00:07:17,880 --> 00:07:21,540
Diguem que ja havia declarat
un enter n inicialitzat.

136
00:07:21,540 --> 00:07:25,170
Després, més tard si volia imprimir aquesta
valor, llavors m'agradaria escriure la cadena.

137
00:07:25,170 --> 00:07:30,500
I en lloc que el valor que jo faria servir
un marcador de posició perquè integer -% i.

138
00:07:30,500 --> 00:07:33,800
A continuació, després de la cadena, tinc una
coma, seguit de la variable

139
00:07:33,800 --> 00:07:34,950
que vull imprimir.

140
00:07:34,950 --> 00:07:38,550
I més endavant, quan s'imprimeix,
que va a imprimir el valor de n.

141
00:07:38,550 --> 00:07:41,570
>> També podria utilitzar un marcador de posició
per a un flotador, per exemple.

142
00:07:41,570 --> 00:07:44,000
Si volia dir-li com
la quantitat de diners que tinc a la butxaca,

143
00:07:44,000 --> 00:07:46,820
llavors jo podria dir que tinc dòlars% f.

144
00:07:46,820 --> 00:07:51,330
I més endavant, quan s'imprimeix, llavors n es
prendre el lloc d'aquest marcador de posició.

145
00:07:51,330 --> 00:07:55,530
Podria també, per exemple, utilitzar diversos
marcadors de posició per a diverses variables.

146
00:07:55,530 --> 00:07:57,590
Així que, mentre enumero
en ordre, llavors jo

147
00:07:57,590 --> 00:08:00,390
li pot dir quantes
gossos i gats que tenen.

148
00:08:00,390 --> 00:08:03,710
>> Ara sabem com perquè aparegui la
d'usuari per a una quantitat de canvi,

149
00:08:03,710 --> 00:08:06,130
assegurar que aquesta entrada
és vàlida, i després

150
00:08:06,130 --> 00:08:10,370
tenir dues possibles formes d'aplicar
l'algoritme cobdiciós d'utilitzar sempre

151
00:08:10,370 --> 00:08:12,090
la moneda més gran possible.

152
00:08:12,090 --> 00:08:15,050
A causa de que hem mantingut un registre de
quantes monedes que estem utilitzant,

153
00:08:15,050 --> 00:08:19,210
llavors podem imprimir aquest valor al final,
indicant a l'usuari quantes monedes que estan

154
00:08:19,210 --> 00:08:20,240
tornar.

155
00:08:20,240 --> 00:08:24,240
>> El meu nom és el Amayla, i això és CS50.

156
00:08:24,240 --> 00:08:25,915

