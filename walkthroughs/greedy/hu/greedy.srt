1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Térjünk mohó.

3
00:00:02,900 --> 00:00:06,810
Mohón, a mi feladatunk az, hogy játsszon
szerepét egy mohó pénztáros.

4
00:00:06,810 --> 00:00:09,750
A felhasználó megmondja nekünk, hogyan
sok változást mi tartozunk nekik,

5
00:00:09,750 --> 00:00:13,520
majd az a feladatunk, hogy számítani
a minimális számú érmék

6
00:00:13,520 --> 00:00:17,240
hogy tudjuk használni, hogy
ez az összeg a változás.

7
00:00:17,240 --> 00:00:19,560
>> Kezdjük egy példát.

8
00:00:19,560 --> 00:00:23,170
Mondjuk ki a felhasználó igényli 0,32 $ vissza.

9
00:00:23,170 --> 00:00:28,960
Megtehetjük ezt azáltal
ezek 32 pennyt, egy cent minden.

10
00:00:28,960 --> 00:00:35,180
Vagy én is használni öt coins-- által
így nekik három dimes, 0,10 $ minden,

11
00:00:35,180 --> 00:00:38,060
és két pennyt, 0,02 $ minden.

12
00:00:38,060 --> 00:00:42,580
De vajon mi használható még
érmét, hogy ezt?

13
00:00:42,580 --> 00:00:45,100
>> Az egész taktika greedy--
hogy egy mohó cashier--

14
00:00:45,100 --> 00:00:47,600
az, hogy használja a legnagyobb érme lehetséges.

15
00:00:47,600 --> 00:00:50,670
Tehát ha van
negyedévben fogjuk használni őket.

16
00:00:50,670 --> 00:00:54,100
És akkor, ha az említett elfogy,
fogjuk használni dimes, 0,10 $ minden.

17
00:00:54,100 --> 00:00:58,840
Ezután Nickels, 5 centért, és
majd le a garast, egy cent minden.

18
00:00:58,840 --> 00:01:01,792
Segítségével a legnagyobb érme
lehetséges, amikor csak tudunk,

19
00:01:01,792 --> 00:01:07,350
biztosítjuk, hogy az általunk használt a legkevesebb
érmék lehetséges, hogy a változást.

20
00:01:07,350 --> 00:01:09,180
>> Tehát menjünk ezen keresztül.

21
00:01:09,180 --> 00:01:11,660
A felhasználói igények 0,32 $.

22
00:01:11,660 --> 00:01:14,200
Tehát feltesszük magunknak,
tudjuk használni egy negyed?

23
00:01:14,200 --> 00:01:15,560
Nos, igen tudjuk.

24
00:01:15,560 --> 00:01:19,720
Tehát most csak tudjuk őket
0,07 $, és szoktunk egy érmét.

25
00:01:19,720 --> 00:01:20,970
>> Tudjuk használni egy másik negyedében?

26
00:01:20,970 --> 00:01:21,890
Hát nem.

27
00:01:21,890 --> 00:01:27,570
0,07 $ kevesebb, mint $ 0,25, így haladunk
A következő legnagyobb érme elérhető.

28
00:01:27,570 --> 00:01:30,690
Dimes a 0,10 $, és
megint nem tudjuk használni Dimes.

29
00:01:30,690 --> 00:01:35,480
Mivel Dimes érdemes 0,10 $, ami
több, mint a változás mértéke tartozott.

30
00:01:35,480 --> 00:01:36,790
>> Megyünk Nickels.

31
00:01:36,790 --> 00:01:40,890
És igen, valóban, 0,05 $ kevesebb, mint
$ 0.10-- így tudjuk használni a nikkel.

32
00:01:40,890 --> 00:01:46,104
Így most csak köszönhetjük a felhasználó $ 0,02,
és mi már eddig használt két érmét.

33
00:01:46,104 --> 00:01:47,270
Nem tudjuk használni egy másik nikkel.

34
00:01:47,270 --> 00:01:51,140
Így aztán folytassa az utolsó érme
állnak rendelkezésünkre, amelyek a fillérekért.

35
00:01:51,140 --> 00:01:52,270
>> És tudjuk használni penny?

36
00:01:52,270 --> 00:01:59,060
Nos, yes-- és a végén két
fillérekért összesen négy érme.

37
00:01:59,060 --> 00:02:01,430
>> Ha végeztél, a
programot fog kinézni.

38
00:02:01,430 --> 00:02:03,710
Miután a felhasználó lefuttatja a
mohó programot, akkor majd

39
00:02:03,710 --> 00:02:07,270
kéri, hogy az összeget a
változás a dollár, hogy ők tartozott.

40
00:02:07,270 --> 00:02:11,140
És akkor a program kimenete
minimális mennyiségű érmét

41
00:02:11,140 --> 00:02:14,740
hogy a mohó pénztáros használna
hogy ez az összeg a változás.

42
00:02:14,740 --> 00:02:18,160
>> Így most nézzük megtörni ezt
le a részfeladatokra.

43
00:02:18,160 --> 00:02:21,410
Először megyünk, felszólítva
felhasználói összegben változás.

44
00:02:21,410 --> 00:02:25,630
És, mint minden felhasználótól, akkor azt akarjuk, hogy
győződjön meg arról, hogy érvényesítjük, hogy a bemeneti

45
00:02:25,630 --> 00:02:29,360
és biztosítja, hogy tudjuk használni, hogy
bemenet a többi programunk.

46
00:02:29,360 --> 00:02:32,480
Aztán megyünk mindig
használja a legnagyobb pont a lehető

47
00:02:32,480 --> 00:02:35,240
és nyomon követheti az érméket használni.

48
00:02:35,240 --> 00:02:39,080
És végül, nyomtassa ki a végső
számú érmét, hogy mi használt.

49
00:02:39,080 --> 00:02:40,970
>> Tehát beszéljünk kéri.

50
00:02:40,970 --> 00:02:43,550
Az összeg kell, hogy cent,
és ez a dollár.

51
00:02:43,550 --> 00:02:48,440
És így a dollár, megyünk
használni az úszó változó típusát.

52
00:02:48,440 --> 00:02:52,390
Most, amikor kérsz egy felhasználó bevitelére,
azt szeretnénk, hogy győződjön meg arról, hogy ez érvényes.

53
00:02:52,390 --> 00:02:56,640
És ezért itt szeretnénk kihasználni
A do-while ciklus konstrukciót.

54
00:02:56,640 --> 00:03:00,320
>> A do-while ciklus végrehajtja a
a hurok teste legalább egyszer.

55
00:03:00,320 --> 00:03:01,650
Tehát ez jól jön.

56
00:03:01,650 --> 00:03:05,510
Tudjuk, hogy meg kell kérni a
felhasználó legalább egyszer egy úszó.

57
00:03:05,510 --> 00:03:07,100
Nos, ha ez úszó érvényes.

58
00:03:07,100 --> 00:03:07,710
Nagyszerű.

59
00:03:07,710 --> 00:03:08,460
Haladunk.

60
00:03:08,460 --> 00:03:11,910
De ha nem, akkor a hurok biztosítja
hogy megkapjuk a megfelelő úszó

61
00:03:11,910 --> 00:03:16,810
ismétlésével-ig folyamatosan
a felhasználó ad meg érvényes értéket.

62
00:03:16,810 --> 00:03:18,760
>> Most a do-while
hurok állapotban van szükségünk

63
00:03:18,760 --> 00:03:22,000
vizsgálni, hogy mit jelent
érvénytelen a float.

64
00:03:22,000 --> 00:03:24,220
Tehát az összefüggésben
ezt a problémát, valószínűleg

65
00:03:24,220 --> 00:03:27,450
akkor van értelme, csak hogy
elfogadja a pozitív értékek.

66
00:03:27,450 --> 00:03:32,010
>> Így a mozgó on-- általunk kapott
értéke dollárban a felhasználó.

67
00:03:32,010 --> 00:03:35,380
De mi dolgunk érmék,
amelyek teljes egészében a cent.

68
00:03:35,380 --> 00:03:38,660
1 $ egyenértékű 100 cent.

69
00:03:38,660 --> 00:03:43,670
Tehát egy jó dolog az, hogy
konvertálni ezeket az értékeket cent.

70
00:03:43,670 --> 00:03:48,380
>> Most, amikor konvertáló egy úszó
egy egész, így dollárt cent,

71
00:03:48,380 --> 00:03:52,230
azt szeretnénk, hogy győződjön meg arról, hogy mi vagyunk óvatosak
mintegy lebegőpontos pontatlanság.

72
00:03:52,230 --> 00:03:55,260
Tehát ez azt jelenti, hogy-- mondják
én dollár value-- én úszó

73
00:03:55,260 --> 00:04:00,260
value-- volt még 2 $, még mindig
Lehet, hogy néhány kóbor számok vannak.

74
00:04:00,260 --> 00:04:04,590
Tehát azt szeretnénk, hogy győződjön meg arról, hogy nem csak
ne megszorozzuk 100-zal, hogy a cent,

75
00:04:04,590 --> 00:04:06,480
de mi is teszik ki.

76
00:04:06,480 --> 00:04:09,210
>> Tehát most van az összeg
A változás, amellyel a felhasználó.

77
00:04:09,210 --> 00:04:13,430
Mi eredetileg beszerezte a dollár,
és most már át azt a cent.

78
00:04:13,430 --> 00:04:17,029
Tehát most már folytathatja a szíve
A mohó algoritmus, amely mindig

79
00:04:17,029 --> 00:04:19,220
a legnagyobb érme lehetséges.

80
00:04:19,220 --> 00:04:21,930
Miközben csináljuk ezt,
lényeges, hogy mi is

81
00:04:21,930 --> 00:04:25,360
nyomon követheti, hogy hány érme
majd vissza kell juttatni a felhasználó

82
00:04:25,360 --> 00:04:28,630
valamint a fennmaradó
megváltoztatni, amellyel a felhasználó.

83
00:04:28,630 --> 00:04:31,130
>> A program megvizsgálja
valami ilyesmi.

84
00:04:31,130 --> 00:04:34,190
Miután megkapta az összeget a
dollárt, és átalakítani, hogy a cent,

85
00:04:34,190 --> 00:04:35,790
akkor meg kell adnia egy hurok.

86
00:04:35,790 --> 00:04:38,400
Míg negyedek lehet
used-- azaz

87
00:04:38,400 --> 00:04:43,660
míg a változás mértékét, amellyel a
felhasználó nagyobb, vagy egyenlő, mint 0,25 $,

88
00:04:43,660 --> 00:04:45,040
akkor használja a negyede.

89
00:04:45,040 --> 00:04:47,000
>> Most mit használ negyede jár?

90
00:04:47,000 --> 00:04:51,280
Nos, one-- akkor növeli az érme
számolni kell a felhasználó részére visszaküldésre.

91
00:04:51,280 --> 00:04:55,890
És a második akkor csökken a jelenlegi
változás mértéke fizetendő vissza a felhasználóhoz

92
00:04:55,890 --> 00:04:57,520
a $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Ismétlése után, hogy amíg
negyedévben már nem lehet használni,

94
00:05:00,680 --> 00:05:04,630
folytassa a következő legnagyobb
coin-- ebben az esetben dimes, $ 0.10.

95
00:05:04,630 --> 00:05:07,750
Tehát meg kell adnia, hogy a hurok, amíg
többé már nem tudja használni Dimes.

96
00:05:07,750 --> 00:05:10,720
Ezután folytassa a következő
legnagyobb érme, nickels.

97
00:05:10,720 --> 00:05:14,810
Miután Nickels már nem lehet használni,
a fennmaradó összeget a fillérekért.

98
00:05:14,810 --> 00:05:17,800
És végül, nyomtassa ki a
érmével használható.

99
00:05:17,800 --> 00:05:20,350
>> Egy másik módja, hogy tudsz
megközelíteni a mohó probléma

100
00:05:20,350 --> 00:05:22,950
az, hogy használja a modulo megközelítés.

101
00:05:22,950 --> 00:05:25,690
Modulo egy olyan üzemben
hogy visszaadja a fennmaradó

102
00:05:25,690 --> 00:05:27,680
A divízió két szám.

103
00:05:27,680 --> 00:05:30,270
Mondjuk én már 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Nos, 5 egy tényezője 50,
így a fennmaradó rész pedig 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- is, 10 szintén olyan tényező,
50, így a maradék is 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- is, akárhány mod maga
nem megy, hogy a maradékot.

107
00:05:43,660 --> 00:05:45,510
>> Mi a helyzet a 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Nos, 49 csak bemegy 50 egyszer.

109
00:05:47,910 --> 00:05:50,290
Így a maradék lesz 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 fog
kapsz egy fennmaradó 3.

111
00:05:55,180 --> 00:05:59,120
>> Tehát hogyan tudjuk használni modulo
és talán néhány osztály

112
00:05:59,120 --> 00:06:01,690
hogy végre a mohó algoritmus?

113
00:06:01,690 --> 00:06:05,550
Nos, még mindig szeretné, hogy maradjon hű a
szívében, a mohó algorithm-- hogy

114
00:06:05,550 --> 00:06:07,910
használja a legnagyobb érme lehetséges.

115
00:06:07,910 --> 00:06:14,570
>> Úgyhogy tennünk magunknak a kérdést, ha tudjuk használni bármilyen
negyedek, hogy visszatérjen 0,32 $ a felhasználó számára.

116
00:06:14,570 --> 00:06:20,070
Nos, 32 mod 25 ad
nekünk fennmaradó 0,07 $.

117
00:06:20,070 --> 00:06:24,500
Annak érdekében, hogy azt mondja, hogy határozottan
használja negyedévben 0,07 $ maradt.

118
00:06:24,500 --> 00:06:26,180
>> Meg tudjuk majd használni bármilyen dimes?

119
00:06:26,180 --> 00:06:32,740
Nos, azért, mert no-- 0,07 $ mod
0,10 $ ad nekünk egy fennmaradó 7.

120
00:06:32,740 --> 00:06:34,960
10 nem megy bele a 7. egyáltalán.

121
00:06:34,960 --> 00:06:36,390
>> Akkor is használjuk ötcentesed?

122
00:06:36,390 --> 00:06:40,490
Nos 0,07 $ mod 5 cent
ad nekünk két megmaradt.

123
00:06:40,490 --> 00:06:42,930
És végül, tudjuk használni minden fillérekért?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 ad nekünk 0,
amiért mi

125
00:06:45,930 --> 00:06:48,160
azt akarjuk, mert akkor a
azt jelenti, hogy már visszatért

126
00:06:48,160 --> 00:06:50,160
a felhasználó összes változás tartozott.

127
00:06:50,160 --> 00:06:54,320
>> Tehát most van két lehetséges módja
végrehajtása mohó algorithm--

128
00:06:54,320 --> 00:06:59,230
egy hurkok és egy egy
kombinációja modulo és osztás.

129
00:06:59,230 --> 00:07:03,010
Így végül, már csak be kell
nyomtassa ki a végső szám az érméket.

130
00:07:03,010 --> 00:07:06,520
>> Ha azt akartam mondani, hogy én
3. háziállatok és ez az érték bedrótoztak,

131
00:07:06,520 --> 00:07:09,240
akkor tudtam csak használni
egyszerű nyomtatási teszt nyilatkozatot.

132
00:07:09,240 --> 00:07:12,320
De a mi érték valójában
változóban tároljuk.

133
00:07:12,320 --> 00:07:15,260
Szóval hogyan lehet kinyomtatni a
tárolt értékeket változó?

134
00:07:15,260 --> 00:07:17,880
>> Ehhez veszünk
előnye helyőrzők.

135
00:07:17,880 --> 00:07:21,540
Mondjuk én már bejelentett
egy inicializált n egész szám.

136
00:07:21,540 --> 00:07:25,170
Majd később, ha akartam nyomtatni, hogy
értéket, akkor azt írja a húr.

137
00:07:25,170 --> 00:07:30,500
És ahelyett, hogy ezt az értéket szeretném használni
helyőrzőjeként hogy integer--% i.

138
00:07:30,500 --> 00:07:33,800
Majd miután a húr, van egy
vessző, majd a változó

139
00:07:33,800 --> 00:07:34,950
hogy szeretnék kinyomtatni.

140
00:07:34,950 --> 00:07:38,550
És később, amikor nyomtat,
ez lesz kinyomtatni az n értéke.

141
00:07:38,550 --> 00:07:41,570
>> Azt is hasznos lehet egy helykitöltő
egy úszó, például.

142
00:07:41,570 --> 00:07:44,000
Ha akartam mondani, hogy milyen
sok készpénz van a zsebemben,

143
00:07:44,000 --> 00:07:46,820
akkor azt mondhatnám, hogy a% f dollárt.

144
00:07:46,820 --> 00:07:51,330
És később, amikor nyomtat, akkor n lesz
helyettesítheti azt a helyet tartó.

145
00:07:51,330 --> 00:07:55,530
Azt is, például arra használhatja több
helyőrzőit több változó.

146
00:07:55,530 --> 00:07:57,590
Tehát amíg én listához
őket annak érdekében, aztán

147
00:07:57,590 --> 00:08:00,390
lehet mondani, hogy hány
kutyák és macskák van.

148
00:08:00,390 --> 00:08:03,710
>> Most már tudjuk, hogyan kell kérni a
felhasználói összegben változás,

149
00:08:03,710 --> 00:08:06,130
biztosítja, hogy a bemenet
érvényes, és aztán

150
00:08:06,130 --> 00:08:10,370
Két lehetséges módja végrehajtási
A mohó algoritmus mindig a

151
00:08:10,370 --> 00:08:12,090
A legnagyobb érme lehetséges.

152
00:08:12,090 --> 00:08:15,050
Mivel már számon tartották
hány érme mi használ,

153
00:08:15,050 --> 00:08:19,210
tudunk majd nyomtassa ezt az értéket a végén,
tájékoztatja a felhasználót, hogy hány érme ők

154
00:08:19,210 --> 00:08:20,240
visszakapja.

155
00:08:20,240 --> 00:08:24,240
>> A nevem a Amayla, és ez CS50.

156
00:08:24,240 --> 00:08:25,915

