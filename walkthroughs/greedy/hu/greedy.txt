Térjünk mohó. Mohón, a mi feladatunk az, hogy játsszon szerepét egy mohó pénztáros. A felhasználó megmondja nekünk, hogyan sok változást mi tartozunk nekik, majd az a feladatunk, hogy számítani a minimális számú érmék hogy tudjuk használni, hogy ez az összeg a változás. 

Kezdjük egy példát. Mondjuk ki a felhasználó igényli 0,32 $ vissza. Megtehetjük ezt azáltal ezek 32 pennyt, egy cent minden. Vagy én is használni öt coins-- által így nekik három dimes, 0,10 $ minden, és két pennyt, 0,02 $ minden. De vajon mi használható még érmét, hogy ezt? 

Az egész taktika greedy-- hogy egy mohó cashier-- az, hogy használja a legnagyobb érme lehetséges. Tehát ha van negyedévben fogjuk használni őket. És akkor, ha az említett elfogy, fogjuk használni dimes, 0,10 $ minden. Ezután Nickels, 5 centért, és majd le a garast, egy cent minden. Segítségével a legnagyobb érme lehetséges, amikor csak tudunk, biztosítjuk, hogy az általunk használt a legkevesebb érmék lehetséges, hogy a változást. 

Tehát menjünk ezen keresztül. A felhasználói igények 0,32 $. Tehát feltesszük magunknak, tudjuk használni egy negyed? Nos, igen tudjuk. Tehát most csak tudjuk őket 0,07 $, és szoktunk egy érmét. 

Tudjuk használni egy másik negyedében? Hát nem. 0,07 $ kevesebb, mint $ 0,25, így haladunk A következő legnagyobb érme elérhető. Dimes a 0,10 $, és megint nem tudjuk használni Dimes. Mivel Dimes érdemes 0,10 $, ami több, mint a változás mértéke tartozott. 

Megyünk Nickels. És igen, valóban, 0,05 $ kevesebb, mint $ 0.10-- így tudjuk használni a nikkel. Így most csak köszönhetjük a felhasználó $ 0,02, és mi már eddig használt két érmét. Nem tudjuk használni egy másik nikkel. Így aztán folytassa az utolsó érme állnak rendelkezésünkre, amelyek a fillérekért. 

És tudjuk használni penny? Nos, yes-- és a végén két fillérekért összesen négy érme. 

Ha végeztél, a programot fog kinézni. Miután a felhasználó lefuttatja a mohó programot, akkor majd kéri, hogy az összeget a változás a dollár, hogy ők tartozott. És akkor a program kimenete minimális mennyiségű érmét hogy a mohó pénztáros használna hogy ez az összeg a változás. 

Így most nézzük megtörni ezt le a részfeladatokra. Először megyünk, felszólítva felhasználói összegben változás. És, mint minden felhasználótól, akkor azt akarjuk, hogy győződjön meg arról, hogy érvényesítjük, hogy a bemeneti és biztosítja, hogy tudjuk használni, hogy bemenet a többi programunk. Aztán megyünk mindig használja a legnagyobb pont a lehető és nyomon követheti az érméket használni. És végül, nyomtassa ki a végső számú érmét, hogy mi használt. 

Tehát beszéljünk kéri. Az összeg kell, hogy cent, és ez a dollár. És így a dollár, megyünk használni az úszó változó típusát. Most, amikor kérsz egy felhasználó bevitelére, azt szeretnénk, hogy győződjön meg arról, hogy ez érvényes. És ezért itt szeretnénk kihasználni A do-while ciklus konstrukciót. 

A do-while ciklus végrehajtja a a hurok teste legalább egyszer. Tehát ez jól jön. Tudjuk, hogy meg kell kérni a felhasználó legalább egyszer egy úszó. Nos, ha ez úszó érvényes. Nagyszerű. Haladunk. De ha nem, akkor a hurok biztosítja hogy megkapjuk a megfelelő úszó ismétlésével-ig folyamatosan a felhasználó ad meg érvényes értéket. 

Most a do-while hurok állapotban van szükségünk vizsgálni, hogy mit jelent érvénytelen a float. Tehát az összefüggésben ezt a problémát, valószínűleg akkor van értelme, csak hogy elfogadja a pozitív értékek. 

Így a mozgó on-- általunk kapott értéke dollárban a felhasználó. De mi dolgunk érmék, amelyek teljes egészében a cent. 1 $ egyenértékű 100 cent. Tehát egy jó dolog az, hogy konvertálni ezeket az értékeket cent. 

Most, amikor konvertáló egy úszó egy egész, így dollárt cent, azt szeretnénk, hogy győződjön meg arról, hogy mi vagyunk óvatosak mintegy lebegőpontos pontatlanság. Tehát ez azt jelenti, hogy-- mondják én dollár value-- én úszó value-- volt még 2 $, még mindig Lehet, hogy néhány kóbor számok vannak. Tehát azt szeretnénk, hogy győződjön meg arról, hogy nem csak ne megszorozzuk 100-zal, hogy a cent, de mi is teszik ki. 

Tehát most van az összeg A változás, amellyel a felhasználó. Mi eredetileg beszerezte a dollár, és most már át azt a cent. Tehát most már folytathatja a szíve A mohó algoritmus, amely mindig a legnagyobb érme lehetséges. Miközben csináljuk ezt, lényeges, hogy mi is nyomon követheti, hogy hány érme majd vissza kell juttatni a felhasználó valamint a fennmaradó megváltoztatni, amellyel a felhasználó. 

A program megvizsgálja valami ilyesmi. Miután megkapta az összeget a dollárt, és átalakítani, hogy a cent, akkor meg kell adnia egy hurok. Míg negyedek lehet used-- azaz míg a változás mértékét, amellyel a felhasználó nagyobb, vagy egyenlő, mint 0,25 $, akkor használja a negyede. 

Most mit használ negyede jár? Nos, one-- akkor növeli az érme számolni kell a felhasználó részére visszaküldésre. És a második akkor csökken a jelenlegi változás mértéke fizetendő vissza a felhasználóhoz a $ 0,25. 

Ismétlése után, hogy amíg negyedévben már nem lehet használni, folytassa a következő legnagyobb coin-- ebben az esetben dimes, $ 0.10. Tehát meg kell adnia, hogy a hurok, amíg többé már nem tudja használni Dimes. Ezután folytassa a következő legnagyobb érme, nickels. Miután Nickels már nem lehet használni, a fennmaradó összeget a fillérekért. És végül, nyomtassa ki a érmével használható. 

Egy másik módja, hogy tudsz megközelíteni a mohó probléma az, hogy használja a modulo megközelítés. Modulo egy olyan üzemben hogy visszaadja a fennmaradó A divízió két szám. Mondjuk én már 50 mod 5. Nos, 5 egy tényezője 50, így a fennmaradó rész pedig 0. 50 mod 10-- is, 10 szintén olyan tényező, 50, így a maradék is 0. 50 mod 50-- is, akárhány mod maga nem megy, hogy a maradékot. 

Mi a helyzet a 50 mod 49? Nos, 49 csak bemegy 50 egyszer. Így a maradék lesz 1. 53 mod 50 fog kapsz egy fennmaradó 3. 

Tehát hogyan tudjuk használni modulo és talán néhány osztály hogy végre a mohó algoritmus? Nos, még mindig szeretné, hogy maradjon hű a szívében, a mohó algorithm-- hogy használja a legnagyobb érme lehetséges. 

Úgyhogy tennünk magunknak a kérdést, ha tudjuk használni bármilyen negyedek, hogy visszatérjen 0,32 $ a felhasználó számára. Nos, 32 mod 25 ad nekünk fennmaradó 0,07 $. Annak érdekében, hogy azt mondja, hogy határozottan használja negyedévben 0,07 $ maradt. 

Meg tudjuk majd használni bármilyen dimes? Nos, azért, mert no-- 0,07 $ mod 0,10 $ ad nekünk egy fennmaradó 7. 10 nem megy bele a 7. egyáltalán. 

Akkor is használjuk ötcentesed? Nos 0,07 $ mod 5 cent ad nekünk két megmaradt. És végül, tudjuk használni minden fillérekért? 2 mod 1 ad nekünk 0, amiért mi azt akarjuk, mert akkor a azt jelenti, hogy már visszatért a felhasználó összes változás tartozott. 

Tehát most van két lehetséges módja végrehajtása mohó algorithm-- egy hurkok és egy egy kombinációja modulo és osztás. Így végül, már csak be kell nyomtassa ki a végső szám az érméket. 

Ha azt akartam mondani, hogy én 3. háziállatok és ez az érték bedrótoztak, akkor tudtam csak használni egyszerű nyomtatási teszt nyilatkozatot. De a mi érték valójában változóban tároljuk. Szóval hogyan lehet kinyomtatni a tárolt értékeket változó? 

Ehhez veszünk előnye helyőrzők. Mondjuk én már bejelentett egy inicializált n egész szám. Majd később, ha akartam nyomtatni, hogy értéket, akkor azt írja a húr. És ahelyett, hogy ezt az értéket szeretném használni helyőrzőjeként hogy integer--% i. Majd miután a húr, van egy vessző, majd a változó hogy szeretnék kinyomtatni. És később, amikor nyomtat, ez lesz kinyomtatni az n értéke. 

Azt is hasznos lehet egy helykitöltő egy úszó, például. Ha akartam mondani, hogy milyen sok készpénz van a zsebemben, akkor azt mondhatnám, hogy a% f dollárt. És később, amikor nyomtat, akkor n lesz helyettesítheti azt a helyet tartó. Azt is, például arra használhatja több helyőrzőit több változó. Tehát amíg én listához őket annak érdekében, aztán lehet mondani, hogy hány kutyák és macskák van. 

Most már tudjuk, hogyan kell kérni a felhasználói összegben változás, biztosítja, hogy a bemenet érvényes, és aztán Két lehetséges módja végrehajtási A mohó algoritmus mindig a A legnagyobb érme lehetséges. Mivel már számon tartották hány érme mi használ, tudunk majd nyomtassa ezt az értéket a végén, tájékoztatja a felhasználót, hogy hány érme ők visszakapja. 

A nevem a Amayla, és ez CS50. 