Идемо похлепан. У похлепан, наш посао је да игра улога похлепан касе. Корисник ће нам рећи како много промена да им дугујемо, а онда је наш посао да се израчуна минималан број новчића да можемо да користимо да би да износ од промена. 

Почнимо са примером. Кажу да је корисник захтева $ 0.32 назад. Могли бисмо то учинити тако што ће им 32 пенија, један цент сваки. Или сам такође може користити пет цоинс-- од дајући им три ситниш, $ 0.10 сваки, и два пенија, $ 0.02 сваки. Али можемо користити и мање новац да би то било? 

Цео тактика у грееди-- да буде похлепан цасхиер-- је да се користи највећу могућу кованицу. Кад год имамо четвртине ћемо их користити. И онда се ови понестане, ћемо користити димес, $ 0.10 сваки. Онда центи, 5 центи сваки, и па до новчића, један цент сваки. Коришћењем највећи новчић могуће кад год можемо, ми се бринемо да користимо најмањи број кованица могуће направити промену. 

Дакле, да хода овоме. Корисник треба $ 0.32. Тако да се упитамо, можемо користити четвртину? Па, да можемо. Дакле, сада их знамо само $ 0.07, а користили смо један новчић. 

Можемо ли користити другу четвртину? Па не. $ 0.07 је мање од $ 0.25, тако да наставимо до следећег највећег медаље на располагању. Центи су $ 0.10, и Опет, не можемо користити димес. Бецаусе центи вреде $ 0.10, вхицх је више од износа промене се дугује. 

Идемо на ситниш. И да, заиста, $ 0.05 износи мање од $ 0.10-- тако да можемо да користимо центи. Па сад дугујемо само корисник $ 0.02, а ми смо до сада користили два новчића. Ми не можемо да користимо други никла. Па онда настављамо до последњег новчића у располагању, који су паре. 

И можемо искористити паре? Па, Да-- и ми на крају користе два паре за укупно четири кованица. 

Када сте завршили је Програм ће изгледати овако. Када корисник покреће похлепан програма, они ће бити затражено да дају количину промена у доларима да они дугују. А онда је ваш програм ће излаз минимални износ кованица да би похлепни благајник користи да ту количину промена. 

Дакле, хајде да прекинемо ово доле у ​​наше подзадатака. Прво ћемо да подстакне наше корисника у износу од промена. И, као и код сваког корисника улаз, желимо да уверите се да смо потврдили да је улаз и осигурати да можемо да користимо да улаз до краја нашег програма. Онда ћемо увек користи највећу могућу тачку и водити евиденцију о кованица користе. И на крају, принт коначна број кованица које смо користили. 

Дакле, хајде да причамо о подстицања. Износ мора да центи, и то је у доларима. И тако долара, идемо користити тип пловак променљиве. Сада кад год питате корисника за улаз, желите да се уверите да је важећа. Па овде смо желели да искористе од петље конструкта ДО-вхиле. 

До-вхиле петље ће извршите тело петље барем једном. Дакле, то долази до изражаја. Знамо да морамо да подстакне корисник најмање једном за флоат. Дакле, ако је пловак је важећа. Одлично. Идемо даље. Али ако не, петља ће осигурати да смо добили одговарајући флоат понављајући непрекидно до корисник нам даје исправну вредност. 

Сада за до-време петља услов, треба да размотри шта то значи да има неважећи флоат. Тако за контекст овај проблем, вероватно има смисла само прихвати позитивне вредности. 

Тако дирљиво ајде-- смо добијен вредност у доларима од корисника. Али имамо посла са новчићима, који су у потпуности у центи. $ 1 је еквивалентно 100 центи. Тако добра ствар да урадите је да претворити те вредности у центи. 

Сада када претварање из сплаву на цео број, тако долара за центи, желимо да се уверите да будемо опрезни о флоатинг-поинт непрецизности. То значи то-- рећи мој долар валуе-- ми пловак валуе-- било још $ 2, даље Можда неке луталице бројеве унутра. Зато желимо да се уверите да не само ми помножити са 100 да добијете центи, али и да заокружи. 

Тако да сада имамо износ промене дугује корисника. првобитно смо га добили у доларима, а сада смо га претворили у центи. Тако да сада можемо да наставимо са срцем похлепни алгоритам, који је увек користећи могуће највећи новчић. Док радимо ово, то је неопходно да се води евиденцију о томе колико су кованице ће бити враћен кориснику као остатак мењају дугује корисника. 

Програм ће изгледати овако нешто. Након што добијете количину долара и претворити то центи, онда ћете унети петљу. Док четвртине може бити усед-- односно док је износ промене дугује до корисник је већа од или једнака $ 0.25, ћете користити четвртину. 

шта сада ради помоћу четвртина подразумева? Па, једног-- ћете повећати новчић рачунати да се врати кориснику. И друго ћете смањити садашњи износ од промене дугује назад до корисника од $ 0.25. 

Након понављања да до четвртине више не може да се користи, прећи на следећи највећи цоин-- у овом случају ситниш, $ 0.10. Тако ћете унети ту петљу до више не можете користити димес. Затим пређите на следећи Највећи новчић, новчиће. Након центи више не може да се користи, користе преостали износ у пенија. И на крају, одштампајте број кованица користи. 

Други начин да можете приступити похлепна проблем је да се користи приступ по модулу. Модуло је оператор да враћа остатак поделе између два броја. Да сам имао 50 мод 5. Па, 5 је фактор 50, тако да остатак ће бити 0. 50 Мод 10-- добро, 10 је такође фактор од 50, тако да остатак такође 0. 50 Мод 50-- добро, било који број се мод неће имати остатак. 

Шта је са 50 Мод 49? Па, 49 иде само у једном 50. Тако да је остатак ће бити 1. 53 Мод 50 ће се ти дати остатак 3. 

Па како можемо искористити модулу а можда и неки подела да спроводи наше похлепни алгоритам? Па, и даље желимо да останемо доследни до срце похлепни алгоритхм-- да је помоћу највећи новчић могуће. 

Дакле, хајде да се запитамо да ли можемо користити било сместај за повратак $ 0.32 кориснику. Па, 32 Мод 25 даје УС А остатак од $ 0.07. Тако да нам каже да можемо дефинитивно користе једну четвртину са $ 0.07 преосталих. 

Онда можемо да користимо неке димес? Па, Не-- јер $ 0.07 Мод $ 0.10 даје нам остатак 7. 10 не иде у 7. уопште. 

Онда можемо користити новчиће? Па $ 0.07 мод 5 центи нам даје два преостала. И на крају, можемо користити пенија? 2 мод 1 нам даје 0, због чега и желимо, јер би то значи да смо се вратили кориснику све промене дугује. 

Сада имате два могућа начина имплементацију похлепна алгоритхм-- један са петље и једна са комбинација модуло и поделе. Тако на крају, само треба да принт коначан број кованица. 

Да сам хтео да ти да сам имао рећи 3 кућни љубимци и ова вредност је хардцодед, онда бих могао да користи једноставан тест штампа изјаву. Али наша вредност је заправо чува у променљивој. Како ти одштампате Вредности складишти у варијабли? 

За ово узмемо Предност држаче. Реци да су се већ изјаснили иницијализовани цео број н. Онда касније да сам хтео да одштампате да вредност, онда бих написати низ. И уместо те вредности ја би користио чувар места за тај интегер--% и. Онда после низа, имам зарез, затим променљиву да желим да одштампате. И касније, када се штампа, то ће исписати вредност н. 

Ја такође може користити чувар места за флоат, на пример. Да сам хтео да ти кажем како много новца имам у џепу, онда бих могао да кажем да имам% ф долара. А касније када се штампа, онда Н ће заузети место тог носиоца место. И такође може, на пример, користите неколико чуваре места за неколико варијабли. Дакле, докле год сам листу их како, онда сам могу вам рећи колико пси и мачке имам. 

Сада знамо како да подстакне корисника у износу од промена, осигурати да тај улаз је важећа, а онда има два могућа начина имплементације похлепни алгоритам увек користи највећи новчић могуће. Јер смо стално пратили колико новац користимо, онда можемо да штампамо ту вредност на крају, говори корисника колико новчићи су они вратити се. 

Моје име је Амаила, а то је ЦС50. 