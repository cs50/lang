1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Идемо похлепан.

3
00:00:02,900 --> 00:00:06,810
У похлепан, наш посао је да игра
улога похлепан касе.

4
00:00:06,810 --> 00:00:09,750
Корисник ће нам рећи како
много промена да им дугујемо,

5
00:00:09,750 --> 00:00:13,520
а онда је наш посао да се израчуна
минималан број новчића

6
00:00:13,520 --> 00:00:17,240
да можемо да користимо да би
да износ од промена.

7
00:00:17,240 --> 00:00:19,560
>> Почнимо са примером.

8
00:00:19,560 --> 00:00:23,170
Кажу да је корисник захтева $ 0.32 назад.

9
00:00:23,170 --> 00:00:28,960
Могли бисмо то учинити тако што ће
им 32 пенија, један цент сваки.

10
00:00:28,960 --> 00:00:35,180
Или сам такође може користити пет цоинс-- од
дајући им три ситниш, $ 0.10 сваки,

11
00:00:35,180 --> 00:00:38,060
и два пенија, $ 0.02 сваки.

12
00:00:38,060 --> 00:00:42,580
Али можемо користити и
мање новац да би то било?

13
00:00:42,580 --> 00:00:45,100
>> Цео тактика у грееди--
да буде похлепан цасхиер--

14
00:00:45,100 --> 00:00:47,600
је да се користи највећу могућу кованицу.

15
00:00:47,600 --> 00:00:50,670
Кад год имамо
четвртине ћемо их користити.

16
00:00:50,670 --> 00:00:54,100
И онда се ови понестане,
ћемо користити димес, $ 0.10 сваки.

17
00:00:54,100 --> 00:00:58,840
Онда центи, 5 центи сваки, и
па до новчића, један цент сваки.

18
00:00:58,840 --> 00:01:01,792
Коришћењем највећи новчић
могуће кад год можемо,

19
00:01:01,792 --> 00:01:07,350
ми се бринемо да користимо најмањи број
кованица могуће направити промену.

20
00:01:07,350 --> 00:01:09,180
>> Дакле, да хода овоме.

21
00:01:09,180 --> 00:01:11,660
Корисник треба $ 0.32.

22
00:01:11,660 --> 00:01:14,200
Тако да се упитамо,
можемо користити четвртину?

23
00:01:14,200 --> 00:01:15,560
Па, да можемо.

24
00:01:15,560 --> 00:01:19,720
Дакле, сада их знамо само
$ 0.07, а користили смо један новчић.

25
00:01:19,720 --> 00:01:20,970
>> Можемо ли користити другу четвртину?

26
00:01:20,970 --> 00:01:21,890
Па не.

27
00:01:21,890 --> 00:01:27,570
$ 0.07 је мање од $ 0.25, тако да наставимо
до следећег највећег медаље на располагању.

28
00:01:27,570 --> 00:01:30,690
Центи су $ 0.10, и
Опет, не можемо користити димес.

29
00:01:30,690 --> 00:01:35,480
Бецаусе центи вреде $ 0.10, вхицх
је више од износа промене се дугује.

30
00:01:35,480 --> 00:01:36,790
>> Идемо на ситниш.

31
00:01:36,790 --> 00:01:40,890
И да, заиста, $ 0.05 износи мање од
$ 0.10-- тако да можемо да користимо центи.

32
00:01:40,890 --> 00:01:46,104
Па сад дугујемо само корисник $ 0.02,
а ми смо до сада користили два новчића.

33
00:01:46,104 --> 00:01:47,270
Ми не можемо да користимо други никла.

34
00:01:47,270 --> 00:01:51,140
Па онда настављамо до последњег новчића у
располагању, који су паре.

35
00:01:51,140 --> 00:01:52,270
>> И можемо искористити паре?

36
00:01:52,270 --> 00:01:59,060
Па, Да-- и ми на крају користе два
паре за укупно четири кованица.

37
00:01:59,060 --> 00:02:01,430
>> Када сте завршили је
Програм ће изгледати овако.

38
00:02:01,430 --> 00:02:03,710
Када корисник покреће
похлепан програма, они ће

39
00:02:03,710 --> 00:02:07,270
бити затражено да дају количину
промена у доларима да они дугују.

40
00:02:07,270 --> 00:02:11,140
А онда је ваш програм ће излаз
минимални износ кованица

41
00:02:11,140 --> 00:02:14,740
да би похлепни благајник користи
да ту количину промена.

42
00:02:14,740 --> 00:02:18,160
>> Дакле, хајде да прекинемо ово
доле у ​​наше подзадатака.

43
00:02:18,160 --> 00:02:21,410
Прво ћемо да подстакне наше
корисника у износу од промена.

44
00:02:21,410 --> 00:02:25,630
И, као и код сваког корисника улаз, желимо да
уверите се да смо потврдили да је улаз

45
00:02:25,630 --> 00:02:29,360
и осигурати да можемо да користимо да
улаз до краја нашег програма.

46
00:02:29,360 --> 00:02:32,480
Онда ћемо увек
користи највећу могућу тачку

47
00:02:32,480 --> 00:02:35,240
и водити евиденцију о кованица користе.

48
00:02:35,240 --> 00:02:39,080
И на крају, принт коначна
број кованица које смо користили.

49
00:02:39,080 --> 00:02:40,970
>> Дакле, хајде да причамо о подстицања.

50
00:02:40,970 --> 00:02:43,550
Износ мора да центи,
и то је у доларима.

51
00:02:43,550 --> 00:02:48,440
И тако долара, идемо
користити тип пловак променљиве.

52
00:02:48,440 --> 00:02:52,390
Сада кад год питате корисника за улаз,
желите да се уверите да је важећа.

53
00:02:52,390 --> 00:02:56,640
Па овде смо желели да искористе
од петље конструкта ДО-вхиле.

54
00:02:56,640 --> 00:03:00,320
>> До-вхиле петље ће извршите
тело петље барем једном.

55
00:03:00,320 --> 00:03:01,650
Дакле, то долази до изражаја.

56
00:03:01,650 --> 00:03:05,510
Знамо да морамо да подстакне
корисник најмање једном за флоат.

57
00:03:05,510 --> 00:03:07,100
Дакле, ако је пловак је важећа.

58
00:03:07,100 --> 00:03:07,710
Одлично.

59
00:03:07,710 --> 00:03:08,460
Идемо даље.

60
00:03:08,460 --> 00:03:11,910
Али ако не, петља ће осигурати
да смо добили одговарајући флоат

61
00:03:11,910 --> 00:03:16,810
понављајући непрекидно до
корисник нам даје исправну вредност.

62
00:03:16,810 --> 00:03:18,760
>> Сада за до-време
петља услов, треба

63
00:03:18,760 --> 00:03:22,000
да размотри шта то значи
да има неважећи флоат.

64
00:03:22,000 --> 00:03:24,220
Тако за контекст
овај проблем, вероватно

65
00:03:24,220 --> 00:03:27,450
има смисла само
прихвати позитивне вредности.

66
00:03:27,450 --> 00:03:32,010
>> Тако дирљиво ајде-- смо добијен
вредност у доларима од корисника.

67
00:03:32,010 --> 00:03:35,380
Али имамо посла са новчићима,
који су у потпуности у центи.

68
00:03:35,380 --> 00:03:38,660
$ 1 је еквивалентно 100 центи.

69
00:03:38,660 --> 00:03:43,670
Тако добра ствар да урадите је да
претворити те вредности у центи.

70
00:03:43,670 --> 00:03:48,380
>> Сада када претварање из сплаву
на цео број, тако долара за центи,

71
00:03:48,380 --> 00:03:52,230
желимо да се уверите да будемо опрезни
о флоатинг-поинт непрецизности.

72
00:03:52,230 --> 00:03:55,260
То значи то-- рећи
мој долар валуе-- ми пловак

73
00:03:55,260 --> 00:04:00,260
валуе-- било још $ 2, даље
Можда неке луталице бројеве унутра.

74
00:04:00,260 --> 00:04:04,590
Зато желимо да се уверите да не само
ми помножити са 100 да добијете центи,

75
00:04:04,590 --> 00:04:06,480
али и да заокружи.

76
00:04:06,480 --> 00:04:09,210
>> Тако да сада имамо износ
промене дугује корисника.

77
00:04:09,210 --> 00:04:13,430
првобитно смо га добили у доларима,
а сада смо га претворили у центи.

78
00:04:13,430 --> 00:04:17,029
Тако да сада можемо да наставимо са срцем
похлепни алгоритам, који је увек

79
00:04:17,029 --> 00:04:19,220
користећи могуће највећи новчић.

80
00:04:19,220 --> 00:04:21,930
Док радимо ово,
то је неопходно да се

81
00:04:21,930 --> 00:04:25,360
води евиденцију о томе колико су кованице
ће бити враћен кориснику

82
00:04:25,360 --> 00:04:28,630
као остатак
мењају дугује корисника.

83
00:04:28,630 --> 00:04:31,130
>> Програм ће изгледати
овако нешто.

84
00:04:31,130 --> 00:04:34,190
Након што добијете количину
долара и претворити то центи,

85
00:04:34,190 --> 00:04:35,790
онда ћете унети петљу.

86
00:04:35,790 --> 00:04:38,400
Док четвртине може бити
усед-- односно

87
00:04:38,400 --> 00:04:43,660
док је износ промене дугује до
корисник је већа од или једнака $ 0.25,

88
00:04:43,660 --> 00:04:45,040
ћете користити четвртину.

89
00:04:45,040 --> 00:04:47,000
>> шта сада ради помоћу четвртина подразумева?

90
00:04:47,000 --> 00:04:51,280
Па, једног-- ћете повећати новчић
рачунати да се врати кориснику.

91
00:04:51,280 --> 00:04:55,890
И друго ћете смањити садашњи
износ од промене дугује назад до корисника

92
00:04:55,890 --> 00:04:57,520
од $ 0.25.

93
00:04:57,520 --> 00:05:00,680
>> Након понављања да до
четвртине више не може да се користи,

94
00:05:00,680 --> 00:05:04,630
прећи на следећи највећи
цоин-- у овом случају ситниш, $ 0.10.

95
00:05:04,630 --> 00:05:07,750
Тако ћете унети ту петљу до
више не можете користити димес.

96
00:05:07,750 --> 00:05:10,720
Затим пређите на следећи
Највећи новчић, новчиће.

97
00:05:10,720 --> 00:05:14,810
Након центи више не може да се користи,
користе преостали износ у пенија.

98
00:05:14,810 --> 00:05:17,800
И на крају, одштампајте
број кованица користи.

99
00:05:17,800 --> 00:05:20,350
>> Други начин да можете
приступити похлепна проблем

100
00:05:20,350 --> 00:05:22,950
је да се користи приступ по модулу.

101
00:05:22,950 --> 00:05:25,690
Модуло је оператор
да враћа остатак

102
00:05:25,690 --> 00:05:27,680
поделе између два броја.

103
00:05:27,680 --> 00:05:30,270
Да сам имао 50 мод 5.

104
00:05:30,270 --> 00:05:34,070
Па, 5 је фактор 50,
тако да остатак ће бити 0.

105
00:05:34,070 --> 00:05:39,230
50 Мод 10-- добро, 10 је такође фактор
од 50, тако да остатак такође 0.

106
00:05:39,230 --> 00:05:43,660
50 Мод 50-- добро, било који број се мод
неће имати остатак.

107
00:05:43,660 --> 00:05:45,510
>> Шта је са 50 Мод 49?

108
00:05:45,510 --> 00:05:47,910
Па, 49 иде само у једном 50.

109
00:05:47,910 --> 00:05:50,290
Тако да је остатак ће бити 1.

110
00:05:50,290 --> 00:05:55,180
53 Мод 50 ће се
ти дати остатак 3.

111
00:05:55,180 --> 00:05:59,120
>> Па како можемо искористити модулу
а можда и неки подела

112
00:05:59,120 --> 00:06:01,690
да спроводи наше похлепни алгоритам?

113
00:06:01,690 --> 00:06:05,550
Па, и даље желимо да останемо доследни до
срце похлепни алгоритхм-- да

114
00:06:05,550 --> 00:06:07,910
је помоћу највећи новчић могуће.

115
00:06:07,910 --> 00:06:14,570
>> Дакле, хајде да се запитамо да ли можемо користити било
сместај за повратак $ 0.32 кориснику.

116
00:06:14,570 --> 00:06:20,070
Па, 32 Мод 25 даје
УС А остатак од $ 0.07.

117
00:06:20,070 --> 00:06:24,500
Тако да нам каже да можемо дефинитивно
користе једну четвртину са $ 0.07 преосталих.

118
00:06:24,500 --> 00:06:26,180
>> Онда можемо да користимо неке димес?

119
00:06:26,180 --> 00:06:32,740
Па, Не-- јер $ 0.07 Мод
$ 0.10 даје нам остатак 7.

120
00:06:32,740 --> 00:06:34,960
10 не иде у 7. уопште.

121
00:06:34,960 --> 00:06:36,390
>> Онда можемо користити новчиће?

122
00:06:36,390 --> 00:06:40,490
Па $ 0.07 мод 5 центи
нам даје два преостала.

123
00:06:40,490 --> 00:06:42,930
И на крају, можемо користити пенија?

124
00:06:42,930 --> 00:06:45,930
2 мод 1 нам даје 0,
због чега и

125
00:06:45,930 --> 00:06:48,160
желимо, јер би то
значи да смо се вратили

126
00:06:48,160 --> 00:06:50,160
кориснику све промене дугује.

127
00:06:50,160 --> 00:06:54,320
>> Сада имате два могућа начина
имплементацију похлепна алгоритхм--

128
00:06:54,320 --> 00:06:59,230
један са петље и једна са
комбинација модуло и поделе.

129
00:06:59,230 --> 00:07:03,010
Тако на крају, само треба да
принт коначан број кованица.

130
00:07:03,010 --> 00:07:06,520
>> Да сам хтео да ти да сам имао рећи
3 кућни љубимци и ова вредност је хардцодед,

131
00:07:06,520 --> 00:07:09,240
онда бих могао да користи
једноставан тест штампа изјаву.

132
00:07:09,240 --> 00:07:12,320
Али наша вредност је заправо
чува у променљивој.

133
00:07:12,320 --> 00:07:15,260
Како ти одштампате
Вредности складишти у варијабли?

134
00:07:15,260 --> 00:07:17,880
>> За ово узмемо
Предност држаче.

135
00:07:17,880 --> 00:07:21,540
Реци да су се већ изјаснили
иницијализовани цео број н.

136
00:07:21,540 --> 00:07:25,170
Онда касније да сам хтео да одштампате да
вредност, онда бих написати низ.

137
00:07:25,170 --> 00:07:30,500
И уместо те вредности ја би користио
чувар места за тај интегер--% и.

138
00:07:30,500 --> 00:07:33,800
Онда после низа, имам
зарез, затим променљиву

139
00:07:33,800 --> 00:07:34,950
да желим да одштампате.

140
00:07:34,950 --> 00:07:38,550
И касније, када се штампа,
то ће исписати вредност н.

141
00:07:38,550 --> 00:07:41,570
>> Ја такође може користити чувар места
за флоат, на пример.

142
00:07:41,570 --> 00:07:44,000
Да сам хтео да ти кажем како
много новца имам у џепу,

143
00:07:44,000 --> 00:07:46,820
онда бих могао да кажем да имам% ф долара.

144
00:07:46,820 --> 00:07:51,330
А касније када се штампа, онда Н ће
заузети место тог носиоца место.

145
00:07:51,330 --> 00:07:55,530
И такође може, на пример, користите неколико
чуваре места за неколико варијабли.

146
00:07:55,530 --> 00:07:57,590
Дакле, докле год сам листу
их како, онда сам

147
00:07:57,590 --> 00:08:00,390
могу вам рећи колико
пси и мачке имам.

148
00:08:00,390 --> 00:08:03,710
>> Сада знамо како да подстакне
корисника у износу од промена,

149
00:08:03,710 --> 00:08:06,130
осигурати да тај улаз
је важећа, а онда

150
00:08:06,130 --> 00:08:10,370
има два могућа начина имплементације
похлепни алгоритам увек користи

151
00:08:10,370 --> 00:08:12,090
највећи новчић могуће.

152
00:08:12,090 --> 00:08:15,050
Јер смо стално пратили
колико новац користимо,

153
00:08:15,050 --> 00:08:19,210
онда можемо да штампамо ту вредност на крају,
говори корисника колико новчићи су они

154
00:08:19,210 --> 00:08:20,240
вратити се.

155
00:08:20,240 --> 00:08:24,240
>> Моје име је Амаила, а то је ЦС50.

156
00:08:24,240 --> 00:08:25,915

