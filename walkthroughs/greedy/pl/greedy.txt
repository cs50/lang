Chodźmy chciwy. W chciwi, naszym zadaniem jest grać rola chciwego kasjera. Użytkownik będzie nam powiedzieć, jak wiele zmian jesteśmy im winni, a następnie naszym zadaniem jest obliczenie minimalna liczba monet które możemy wykorzystać, aby że ilość zmian. 

Zacznijmy od przykładu. Wypowiedz użytkownik wymaga $ ,32 powrotem. Możemy to zrobić poprzez nadanie im 32 groszy, jeden cent każdy. Albo może również użyć pięciu coins-- przez dając im trzy dimes, 0,10 $ każda, i dwa grosze, 0,02 $ każda. Ale możemy użyć nawet mniej monet, aby to? 

Cała taktyka w greedy-- być chciwym cashier-- jest wykorzystanie jak największej monetę. Jeśli więc mamy czwarte będziemy ich używać. A potem po tych zabraknie, użyjemy dimes 0,10 $ każda. Następnie nickels, 5 groszy każda oraz następnie w dół do groszy, jeden cent każdy. Za pomocą największej monety możliwe, kiedy tylko możemy, mamy pewność, że używamy najmniejszą liczbę możliwych monet dokonać zmiany. 

Więc chodźmy to dzięki. Użytkownik musi $ 0,32. Więc pytamy, możemy wykorzystać jedną czwartą? No tak możemy. Więc teraz my tylko je znać $ 0,07, a wykorzystaliśmy jedną monetę. 

Możemy użyć innego kwartału? Więc nie. $ 0,07 jest mniej niż $ 0,25, więc przystępujemy do następnej dostępnej wielkości monety. Dimes są $ 0,10, a znowu, nie możemy używać dziesięciocentówki. Ponieważ dimes są warte $ 0,10, który jest większa niż ilość zmian należnej. 

Idziemy do monet. I tak rzeczywiście, $ 0,05 jest niższa niż $ 0.10-- więc możemy użyć nikiel. Więc teraz mamy tylko winni użytkownika $ 0,02, a my do tej pory korzystali z dwóch monet. Nie możemy użyć innego nikiel. Tak więc możemy przejść do ostatniej monety w naszej dyspozycji, które są grosze. 

I możemy używać ani grosza? Cóż, yes-- i kończy się przy użyciu dwóch grosze w sumie czterech monet. 

Gdy skończysz, The Program będzie wyglądać następująco. Gdy użytkownik uruchamia chciwi programu, będą zostać poproszony, aby dać kwotę Zmiany w dolarach, że są one należne. I wówczas program będzie wyjście minimalna ilość monet że chciwi kasjer użyłby aby taką ilość zmian. 

Więc teraz niech podzielenie w dół do naszych podzadań. Po pierwsze mamy zamiar skłonić naszych użytkownika dla ilości zmian. I tak jak w przypadku każdego wejścia użytkownika, chcemy upewnić się, że potwierdzić, że wejście i upewnić się, że możemy użyć tego Wejście do końca działania programu. Wtedy będziemy zawsze użyj największej punkt i śledzić monet używanych. I wreszcie, wydrukować ostateczna liczba monet, które używaliśmy. 

Więc pomówmy o monitowania. Kwota musi centów, i jest w dolarach. I tak na dolary, jedziemy używać typ zmiennej typu float. Teraz, gdy pytasz użytkownikowi na wejście, chcesz się upewnić, że to ważne. I tak oto chcemy wykorzystać pętli konstruktu do-while. 

Pętla do-while wykona Ciało pętli co najmniej raz. Więc to przydaje. Wiemy, że musimy monitować użytkownik nie rzadziej niż raz na pływaka. Teraz, jeżeli pływak jest ważna. To świetnie. Ruszamy dalej. A jeśli nie, pętla zapewnić że mamy właściwego pływaka powtarzając ciągle aż użytkownik daje nam prawidłową wartość. 

Teraz na do-while warunek pętli, musimy rozważyć, co to znaczy mieć nieprawidłową pływaka. Tak więc w ramach Ten problem, prawdopodobnie ma sens tylko przyjmować wartości dodatnie. 

Więc przesuwając on-- jakie uzyskał Wartość w dolarach od użytkownika. Ale mamy tu do czynienia z monet, które są w całości w centów. $ 1 jest równoważne 100 centów. Więc dobrą rzeczą do zrobienia jest przekonwertować te wartości do centów. 

Teraz podczas konwersji z pływakiem do liczby całkowitej, więc dolarów, aby centów, chcemy, aby upewnić się, że jesteśmy ostrożni o zmiennoprzecinkowych niedokładności. To znaczy that-- powiedzieć mój dolara value-- mojego pływaka value-- nie było jeszcze 2 $, wciąż może być kilka liczb bezpańskie tam. Dlatego chcemy, aby upewnić się, że nie tylko mamy pomnożyć przez 100, aby uzyskać centów, ale również zaokrąglić go. 

Więc teraz mamy kwotę zmiany należna użytkownikowi. My pierwotnie uzyskano je w dolarach, a teraz mamy przeliczone go centów. Więc teraz możemy przystąpić z sercem chciwy algorytm, który jest zawsze stosując największą monetę możliwe. Podczas gdy to robimy, to istotne, że my także śledzić, ile monet jest będą zwracane użytkownikowi jak również pozostałe zmienić należna użytkownikowi. 

Program będzie wyglądać coś takiego. Po otrzymaniu kwoty dolarów i przekonwertować do centa, Pokochasz więc wprowadzić pętlę. Chociaż czwarte może być used-- czyli podczas gdy ilość zmian należnych Użytkownik jest większa niż lub równa $ 0,25, użyjesz jedną czwartą. 

Teraz to, co robi przy użyciu ćwierć wiązać? Cóż, jedno- będziesz zwiększać monetę liczyć zostać zwrócony do użytkownika. A po drugie będziesz zmniejszyć prąd Kwota należna zmiany z powrotem do użytkownika od $ 0,25. 

Po powtórzeniu że dopóki czwarte nie może być dłużej używany, Przejdź do następnego największym coin-- w tym przypadku dimes, $ ,10. Więc musisz wprowadzić tę pętlę, aż nie można już używać dziesięciocentówki. Następnie przejdź do następnego Największy monet, nickels. Po nie może być dłużej używany nickels, wykorzystać pozostałą kwotę w groszach. I wreszcie, wydrukuj liczba monet stosowane. 

Inny sposób, że można zbliżyć się do chciwego problemu jest stosowanie metody modulo. Modulo jest operatorem który zwraca resztę podziału między dwoma numerami. Powiedzieć, że miał 50 mod 5. Dobrze, 5 jest czynnikiem 50, więc reszta będzie 0. 50 mod 10-- dobrze, 10 jest również czynnikiem 50, dzięki czemu pozostała część jest 0. 50 mod 50-- dobrze, dowolna liczba mod się nie będzie mieć żadnego resztę. 

Co 50 mod 49? Cóż, 49 jeździ tylko do 50 raz. Więc reszta będzie 1. 53 mod 50 będzie daje resztę 3. 

Więc jak możemy użyć modulo a może jakiś podział wdrożyć nasz zachłanny algorytm? Cóż, nadal chcemy pozostać wiernym do Sercem chciwy algorithm-- że korzysta największą monetę możliwe. 

Warto więc zadać sobie pytanie, czy możemy użyć dowolnego czwarte powrotu $ 0,32 do użytkownika. Cóż, 32 mod 25 daje us pozostałością $ 0,07. Tak, że mówi nam, że możemy na pewno wykorzystywać jedną czwartą z $ +0,07 pozostała. 

Możemy użyć żadnych dziesięciocentówki? Cóż, no-- ponieważ $ +0,07 mod $ +0,10 Daje nam pozostałą część 7. 10 nie przechodzi w 7 wcale. 

Wtedy możemy użyć nickels? Dobrze $ 0.07 mod 5 centów daje nam dwa pozostałe. I wreszcie, możemy użyć żadnych grosze? 2 mod 1 daje nam 0, która jest ostatecznie co chcemy, bo wtedy Oznacza to, że mamy powrócił użytkownikowi wszystkie zmiany należne. 

Więc teraz masz dwa możliwe sposoby realizacji chciwy algorithm-- jedna z uchwytami i jednym z Połączenie modulo i dzielenie. Więc w końcu, po prostu trzeba wydrukować ostateczną liczbę monet. 

Gdybym chciał powiedzieć, że miałem 3 zwierzęta i wartość ta została sztywno, wtedy będę mógł po prostu użyć Proste stwierdzenie testy druku. Ale nasza wartość jest rzeczywiście przechowywany w zmiennej. Więc jak można wydrukować Wartości przechowywane w zmiennych? 

W tym celu bierzemy Zaletą zastępcze. Powiedzieć, że już zadeklarowane zainicjowany całkowita n. Następnie później gdybym chciał wydrukować wartości, wtedy piszę ciąg. I zamiast tej wartości użyłbym symbol zastępczy dla tego integer--% I. Następnie po łańcuchu, mam przecinku, a następnie przez zmienną że chcę wydrukować. A później, gdy drukuje, to będzie drukować wartość n. 

Mógłbym też użyć zastępczy do pływaka, na przykład. Gdybym chciał powiedzieć, jak dużo gotówki mam w kieszeni, wtedy będę mógł powiedzieć, że mam% F dolarów. A później, kiedy drukuje, to będzie n zająć miejsce tego posiadacza miejsce. I mogą także, na przykład, można użyć kilku zastępcze dla kilku zmiennych. Tak długo, jak wymienię je w kolejności, potem Można powiedzieć, ilu psy i koty, co mam. 

Teraz wiemy, jak monitować użytkownika na kwotę zmiany, upewnić się, że wejście jest ważna, a potem mają dwa możliwe sposoby realizacji chciwy algorytm zawsze przy użyciu największa moneta. Ponieważ mamy śledził ile monet używamy, możemy następnie wydrukować tę wartość na końcu, informując użytkownika, ile monet że jesteś Wracając. 

Nazywam to Amayla, a to CS50. 