1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Chodźmy chciwy.

3
00:00:02,900 --> 00:00:06,810
W chciwi, naszym zadaniem jest grać
rola chciwego kasjera.

4
00:00:06,810 --> 00:00:09,750
Użytkownik będzie nam powiedzieć, jak
wiele zmian jesteśmy im winni,

5
00:00:09,750 --> 00:00:13,520
a następnie naszym zadaniem jest obliczenie
minimalna liczba monet

6
00:00:13,520 --> 00:00:17,240
które możemy wykorzystać, aby
że ilość zmian.

7
00:00:17,240 --> 00:00:19,560
>> Zacznijmy od przykładu.

8
00:00:19,560 --> 00:00:23,170
Wypowiedz użytkownik wymaga $ ,32 powrotem.

9
00:00:23,170 --> 00:00:28,960
Możemy to zrobić poprzez nadanie
im 32 groszy, jeden cent każdy.

10
00:00:28,960 --> 00:00:35,180
Albo może również użyć pięciu coins-- przez
dając im trzy dimes, 0,10 $ każda,

11
00:00:35,180 --> 00:00:38,060
i dwa grosze, 0,02 $ każda.

12
00:00:38,060 --> 00:00:42,580
Ale możemy użyć nawet
mniej monet, aby to?

13
00:00:42,580 --> 00:00:45,100
>> Cała taktyka w greedy--
być chciwym cashier--

14
00:00:45,100 --> 00:00:47,600
jest wykorzystanie jak największej monetę.

15
00:00:47,600 --> 00:00:50,670
Jeśli więc mamy
czwarte będziemy ich używać.

16
00:00:50,670 --> 00:00:54,100
A potem po tych zabraknie,
użyjemy dimes 0,10 $ każda.

17
00:00:54,100 --> 00:00:58,840
Następnie nickels, 5 groszy każda oraz
następnie w dół do groszy, jeden cent każdy.

18
00:00:58,840 --> 00:01:01,792
Za pomocą największej monety
możliwe, kiedy tylko możemy,

19
00:01:01,792 --> 00:01:07,350
mamy pewność, że używamy najmniejszą liczbę
możliwych monet dokonać zmiany.

20
00:01:07,350 --> 00:01:09,180
>> Więc chodźmy to dzięki.

21
00:01:09,180 --> 00:01:11,660
Użytkownik musi $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Więc pytamy,
możemy wykorzystać jedną czwartą?

23
00:01:14,200 --> 00:01:15,560
No tak możemy.

24
00:01:15,560 --> 00:01:19,720
Więc teraz my tylko je znać
$ 0,07, a wykorzystaliśmy jedną monetę.

25
00:01:19,720 --> 00:01:20,970
>> Możemy użyć innego kwartału?

26
00:01:20,970 --> 00:01:21,890
Więc nie.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 jest mniej niż $ 0,25, więc przystępujemy
do następnej dostępnej wielkości monety.

28
00:01:27,570 --> 00:01:30,690
Dimes są $ 0,10, a
znowu, nie możemy używać dziesięciocentówki.

29
00:01:30,690 --> 00:01:35,480
Ponieważ dimes są warte $ 0,10, który
jest większa niż ilość zmian należnej.

30
00:01:35,480 --> 00:01:36,790
>> Idziemy do monet.

31
00:01:36,790 --> 00:01:40,890
I tak rzeczywiście, $ 0,05 jest niższa niż
$ 0.10-- więc możemy użyć nikiel.

32
00:01:40,890 --> 00:01:46,104
Więc teraz mamy tylko winni użytkownika $ 0,02,
a my do tej pory korzystali z dwóch monet.

33
00:01:46,104 --> 00:01:47,270
Nie możemy użyć innego nikiel.

34
00:01:47,270 --> 00:01:51,140
Tak więc możemy przejść do ostatniej monety w
naszej dyspozycji, które są grosze.

35
00:01:51,140 --> 00:01:52,270
>> I możemy używać ani grosza?

36
00:01:52,270 --> 00:01:59,060
Cóż, yes-- i kończy się przy użyciu dwóch
grosze w sumie czterech monet.

37
00:01:59,060 --> 00:02:01,430
>> Gdy skończysz, The
Program będzie wyglądać następująco.

38
00:02:01,430 --> 00:02:03,710
Gdy użytkownik uruchamia
chciwi programu, będą

39
00:02:03,710 --> 00:02:07,270
zostać poproszony, aby dać kwotę
Zmiany w dolarach, że są one należne.

40
00:02:07,270 --> 00:02:11,140
I wówczas program będzie wyjście
minimalna ilość monet

41
00:02:11,140 --> 00:02:14,740
że chciwi kasjer użyłby
aby taką ilość zmian.

42
00:02:14,740 --> 00:02:18,160
>> Więc teraz niech podzielenie
w dół do naszych podzadań.

43
00:02:18,160 --> 00:02:21,410
Po pierwsze mamy zamiar skłonić naszych
użytkownika dla ilości zmian.

44
00:02:21,410 --> 00:02:25,630
I tak jak w przypadku każdego wejścia użytkownika, chcemy
upewnić się, że potwierdzić, że wejście

45
00:02:25,630 --> 00:02:29,360
i upewnić się, że możemy użyć tego
Wejście do końca działania programu.

46
00:02:29,360 --> 00:02:32,480
Wtedy będziemy zawsze
użyj największej punkt

47
00:02:32,480 --> 00:02:35,240
i śledzić monet używanych.

48
00:02:35,240 --> 00:02:39,080
I wreszcie, wydrukować ostateczna
liczba monet, które używaliśmy.

49
00:02:39,080 --> 00:02:40,970
>> Więc pomówmy o monitowania.

50
00:02:40,970 --> 00:02:43,550
Kwota musi centów,
i jest w dolarach.

51
00:02:43,550 --> 00:02:48,440
I tak na dolary, jedziemy
używać typ zmiennej typu float.

52
00:02:48,440 --> 00:02:52,390
Teraz, gdy pytasz użytkownikowi na wejście,
chcesz się upewnić, że to ważne.

53
00:02:52,390 --> 00:02:56,640
I tak oto chcemy wykorzystać
pętli konstruktu do-while.

54
00:02:56,640 --> 00:03:00,320
>> Pętla do-while wykona
Ciało pętli co najmniej raz.

55
00:03:00,320 --> 00:03:01,650
Więc to przydaje.

56
00:03:01,650 --> 00:03:05,510
Wiemy, że musimy monitować
użytkownik nie rzadziej niż raz na pływaka.

57
00:03:05,510 --> 00:03:07,100
Teraz, jeżeli pływak jest ważna.

58
00:03:07,100 --> 00:03:07,710
To świetnie.

59
00:03:07,710 --> 00:03:08,460
Ruszamy dalej.

60
00:03:08,460 --> 00:03:11,910
A jeśli nie, pętla zapewnić
że mamy właściwego pływaka

61
00:03:11,910 --> 00:03:16,810
powtarzając ciągle aż
użytkownik daje nam prawidłową wartość.

62
00:03:16,810 --> 00:03:18,760
>> Teraz na do-while
warunek pętli, musimy

63
00:03:18,760 --> 00:03:22,000
rozważyć, co to znaczy
mieć nieprawidłową pływaka.

64
00:03:22,000 --> 00:03:24,220
Tak więc w ramach
Ten problem, prawdopodobnie

65
00:03:24,220 --> 00:03:27,450
ma sens tylko
przyjmować wartości dodatnie.

66
00:03:27,450 --> 00:03:32,010
>> Więc przesuwając on-- jakie uzyskał
Wartość w dolarach od użytkownika.

67
00:03:32,010 --> 00:03:35,380
Ale mamy tu do czynienia z monet,
które są w całości w centów.

68
00:03:35,380 --> 00:03:38,660
$ 1 jest równoważne 100 centów.

69
00:03:38,660 --> 00:03:43,670
Więc dobrą rzeczą do zrobienia jest
przekonwertować te wartości do centów.

70
00:03:43,670 --> 00:03:48,380
>> Teraz podczas konwersji z pływakiem
do liczby całkowitej, więc dolarów, aby centów,

71
00:03:48,380 --> 00:03:52,230
chcemy, aby upewnić się, że jesteśmy ostrożni
o zmiennoprzecinkowych niedokładności.

72
00:03:52,230 --> 00:03:55,260
To znaczy that-- powiedzieć
mój dolara value-- mojego pływaka

73
00:03:55,260 --> 00:04:00,260
value-- nie było jeszcze 2 $, wciąż
może być kilka liczb bezpańskie tam.

74
00:04:00,260 --> 00:04:04,590
Dlatego chcemy, aby upewnić się, że nie tylko
mamy pomnożyć przez 100, aby uzyskać centów,

75
00:04:04,590 --> 00:04:06,480
ale również zaokrąglić go.

76
00:04:06,480 --> 00:04:09,210
>> Więc teraz mamy kwotę
zmiany należna użytkownikowi.

77
00:04:09,210 --> 00:04:13,430
My pierwotnie uzyskano je w dolarach,
a teraz mamy przeliczone go centów.

78
00:04:13,430 --> 00:04:17,029
Więc teraz możemy przystąpić z sercem
chciwy algorytm, który jest zawsze

79
00:04:17,029 --> 00:04:19,220
stosując największą monetę możliwe.

80
00:04:19,220 --> 00:04:21,930
Podczas gdy to robimy,
to istotne, że my także

81
00:04:21,930 --> 00:04:25,360
śledzić, ile monet jest
będą zwracane użytkownikowi

82
00:04:25,360 --> 00:04:28,630
jak również pozostałe
zmienić należna użytkownikowi.

83
00:04:28,630 --> 00:04:31,130
>> Program będzie wyglądać
coś takiego.

84
00:04:31,130 --> 00:04:34,190
Po otrzymaniu kwoty
dolarów i przekonwertować do centa,

85
00:04:34,190 --> 00:04:35,790
Pokochasz więc wprowadzić pętlę.

86
00:04:35,790 --> 00:04:38,400
Chociaż czwarte może być
used-- czyli

87
00:04:38,400 --> 00:04:43,660
podczas gdy ilość zmian należnych
Użytkownik jest większa niż lub równa $ 0,25,

88
00:04:43,660 --> 00:04:45,040
użyjesz jedną czwartą.

89
00:04:45,040 --> 00:04:47,000
>> Teraz to, co robi przy użyciu ćwierć wiązać?

90
00:04:47,000 --> 00:04:51,280
Cóż, jedno- będziesz zwiększać monetę
liczyć zostać zwrócony do użytkownika.

91
00:04:51,280 --> 00:04:55,890
A po drugie będziesz zmniejszyć prąd
Kwota należna zmiany z powrotem do użytkownika

92
00:04:55,890 --> 00:04:57,520
od $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Po powtórzeniu że dopóki
czwarte nie może być dłużej używany,

94
00:05:00,680 --> 00:05:04,630
Przejdź do następnego największym
coin-- w tym przypadku dimes, $ ,10.

95
00:05:04,630 --> 00:05:07,750
Więc musisz wprowadzić tę pętlę, aż
nie można już używać dziesięciocentówki.

96
00:05:07,750 --> 00:05:10,720
Następnie przejdź do następnego
Największy monet, nickels.

97
00:05:10,720 --> 00:05:14,810
Po nie może być dłużej używany nickels,
wykorzystać pozostałą kwotę w groszach.

98
00:05:14,810 --> 00:05:17,800
I wreszcie, wydrukuj
liczba monet stosowane.

99
00:05:17,800 --> 00:05:20,350
>> Inny sposób, że można
zbliżyć się do chciwego problemu

100
00:05:20,350 --> 00:05:22,950
jest stosowanie metody modulo.

101
00:05:22,950 --> 00:05:25,690
Modulo jest operatorem
który zwraca resztę

102
00:05:25,690 --> 00:05:27,680
podziału między dwoma numerami.

103
00:05:27,680 --> 00:05:30,270
Powiedzieć, że miał 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Dobrze, 5 jest czynnikiem 50,
więc reszta będzie 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- dobrze, 10 jest również czynnikiem
50, dzięki czemu pozostała część jest 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- dobrze, dowolna liczba mod się
nie będzie mieć żadnego resztę.

107
00:05:43,660 --> 00:05:45,510
>> Co 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Cóż, 49 jeździ tylko do 50 raz.

109
00:05:47,910 --> 00:05:50,290
Więc reszta będzie 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 będzie
daje resztę 3.

111
00:05:55,180 --> 00:05:59,120
>> Więc jak możemy użyć modulo
a może jakiś podział

112
00:05:59,120 --> 00:06:01,690
wdrożyć nasz zachłanny algorytm?

113
00:06:01,690 --> 00:06:05,550
Cóż, nadal chcemy pozostać wiernym do
Sercem chciwy algorithm-- że

114
00:06:05,550 --> 00:06:07,910
korzysta największą monetę możliwe.

115
00:06:07,910 --> 00:06:14,570
>> Warto więc zadać sobie pytanie, czy możemy użyć dowolnego
czwarte powrotu $ 0,32 do użytkownika.

116
00:06:14,570 --> 00:06:20,070
Cóż, 32 mod 25 daje
us pozostałością $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Tak, że mówi nam, że możemy na pewno
wykorzystywać jedną czwartą z $ +0,07 pozostała.

118
00:06:24,500 --> 00:06:26,180
>> Możemy użyć żadnych dziesięciocentówki?

119
00:06:26,180 --> 00:06:32,740
Cóż, no-- ponieważ $ +0,07 mod
$ +0,10 Daje nam pozostałą część 7.

120
00:06:32,740 --> 00:06:34,960
10 nie przechodzi w 7 wcale.

121
00:06:34,960 --> 00:06:36,390
>> Wtedy możemy użyć nickels?

122
00:06:36,390 --> 00:06:40,490
Dobrze $ 0.07 mod 5 centów
daje nam dwa pozostałe.

123
00:06:40,490 --> 00:06:42,930
I wreszcie, możemy użyć żadnych grosze?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 daje nam 0,
która jest ostatecznie co

125
00:06:45,930 --> 00:06:48,160
chcemy, bo wtedy
Oznacza to, że mamy powrócił

126
00:06:48,160 --> 00:06:50,160
użytkownikowi wszystkie zmiany należne.

127
00:06:50,160 --> 00:06:54,320
>> Więc teraz masz dwa możliwe sposoby
realizacji chciwy algorithm--

128
00:06:54,320 --> 00:06:59,230
jedna z uchwytami i jednym z
Połączenie modulo i dzielenie.

129
00:06:59,230 --> 00:07:03,010
Więc w końcu, po prostu trzeba
wydrukować ostateczną liczbę monet.

130
00:07:03,010 --> 00:07:06,520
>> Gdybym chciał powiedzieć, że miałem
3 zwierzęta i wartość ta została sztywno,

131
00:07:06,520 --> 00:07:09,240
wtedy będę mógł po prostu użyć
Proste stwierdzenie testy druku.

132
00:07:09,240 --> 00:07:12,320
Ale nasza wartość jest rzeczywiście
przechowywany w zmiennej.

133
00:07:12,320 --> 00:07:15,260
Więc jak można wydrukować
Wartości przechowywane w zmiennych?

134
00:07:15,260 --> 00:07:17,880
>> W tym celu bierzemy
Zaletą zastępcze.

135
00:07:17,880 --> 00:07:21,540
Powiedzieć, że już zadeklarowane
zainicjowany całkowita n.

136
00:07:21,540 --> 00:07:25,170
Następnie później gdybym chciał wydrukować
wartości, wtedy piszę ciąg.

137
00:07:25,170 --> 00:07:30,500
I zamiast tej wartości użyłbym
symbol zastępczy dla tego integer--% I.

138
00:07:30,500 --> 00:07:33,800
Następnie po łańcuchu, mam
przecinku, a następnie przez zmienną

139
00:07:33,800 --> 00:07:34,950
że chcę wydrukować.

140
00:07:34,950 --> 00:07:38,550
A później, gdy drukuje,
to będzie drukować wartość n.

141
00:07:38,550 --> 00:07:41,570
>> Mógłbym też użyć zastępczy
do pływaka, na przykład.

142
00:07:41,570 --> 00:07:44,000
Gdybym chciał powiedzieć, jak
dużo gotówki mam w kieszeni,

143
00:07:44,000 --> 00:07:46,820
wtedy będę mógł powiedzieć, że mam% F dolarów.

144
00:07:46,820 --> 00:07:51,330
A później, kiedy drukuje, to będzie n
zająć miejsce tego posiadacza miejsce.

145
00:07:51,330 --> 00:07:55,530
I mogą także, na przykład, można użyć kilku
zastępcze dla kilku zmiennych.

146
00:07:55,530 --> 00:07:57,590
Tak długo, jak wymienię
je w kolejności, potem

147
00:07:57,590 --> 00:08:00,390
Można powiedzieć, ilu
psy i koty, co mam.

148
00:08:00,390 --> 00:08:03,710
>> Teraz wiemy, jak monitować
użytkownika na kwotę zmiany,

149
00:08:03,710 --> 00:08:06,130
upewnić się, że wejście
jest ważna, a potem

150
00:08:06,130 --> 00:08:10,370
mają dwa możliwe sposoby realizacji
chciwy algorytm zawsze przy użyciu

151
00:08:10,370 --> 00:08:12,090
największa moneta.

152
00:08:12,090 --> 00:08:15,050
Ponieważ mamy śledził
ile monet używamy,

153
00:08:15,050 --> 00:08:19,210
możemy następnie wydrukować tę wartość na końcu,
informując użytkownika, ile monet że jesteś

154
00:08:19,210 --> 00:08:20,240
Wracając.

155
00:08:20,240 --> 00:08:24,240
>> Nazywam to Amayla, a to CS50.

156
00:08:24,240 --> 00:08:25,915

