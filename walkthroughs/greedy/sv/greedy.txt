Låt oss få giriga. I girig, är vårt jobb att spela rollen av en girig kassör. Användaren kommer att berätta hur mycket förändring vi är skyldiga dem, och sedan vår uppgift är att beräkna det minsta antalet mynt att vi kan använda för att göra den mängd av förändring. 

Låt oss börja med ett exempel. Säg att användaren behöver $ 0,32 tillbaka. Vi kan göra detta genom att ge dem 32 öre, en cent vardera. Eller jag kan också använda fem coins-- av ge dem tre dimes, $ 0,10 vardera, och två öre, $ 0,02 vardera. Men kan vi använda även färre mynt för att göra det? 

Hela taktik i greedy-- att vara en girig cashier-- är att använda det största myntet möjligt. Så när vi har kvartal vi kommer att använda dem. Och sedan en gång de tar slut, Vi kommer att använda Dimes, $ 0,10 vardera. Sedan Nickels, 5 cent vardera, och sedan ner till pennies, en cent vardera. Genom att använda det största myntet möjligt när vi kan, vi se till att vi använder det minsta antalet av mynt möjligt att göra ändringen. 

Så låt oss gå igenom detta. Användaren behöver $ 0,32. Så vi frågar oss, kan vi använda en fjärdedel? Jo, vi kan. Så nu vet bara vi dem $ 0,07, och vi använde ett mynt. 

Kan vi använda en annan fjärdedel? Tja, nej. $ 0,07 är mindre än $ 0,25, så vi fortsätter till nästa största mynt tillgängliga. Dimes är $ 0,10, och igen, kan vi inte använda Dimes. Eftersom Dimes är värda $ 0,10, vilket är mer än värdet av den förändring skyldig. 

Vi går till Nickels. Och, ja faktiskt, 0,05 $ är mindre än $ 0.10-- så att vi kan använda en nickel. Så nu har vi bara skyldiga användaren $ 0,02, och vi har hittills använt två mynt. Vi kan inte använda en annan nickel. Så fortsätt sedan vi till den sista myntet vid vårt förfogande, som är pennies. 

Och kan vi använda öre? Tja, yes-- och vi sluta med två öre för totalt fyra mynt. 

När du är klar, den Programmet kommer att se ut så här. När användaren kör giriga program, de ska uppmanas att ge den mängd förändring i dollar som de är skyldiga. Och sedan ditt program att avge den minsta mängd mynt att de giriga kassa skulle använda att detta belopp av förändring. 

Så nu ska vi bryta denna ner i våra underaktiviteter. Först ska vi uppmana våra användare för en mängd förändringar. Och som med alla användarinmatning, vill vi se till att vi validera att ingång och se till att vi kan använda det ingång för resten av vårt program. Sedan ska vi alltid Använd den största punkten möjligt och hålla koll på de mynt som användes. Och slutligen, ut den slutliga antalet mynt som vi använde. 

Så låt oss tala om att fråga. Beloppet måste cent, och detta är i dollar. Och så för dollar, kommer vi att använda den typ float variabeln. Nu när du ber en användare för inmatning, du vill vara säker på att det är giltigt. Och så här vi vill ta tillvara DO-while-slingan konstruktion. 

En gör-while-slinga kommer att utföra kroppen av slingan minst en gång. Så detta är praktiskt. Vi vet att vi måste uppmana användaren åtminstone en gång för en flottör. Nu om det float är giltig. Toppen. Vi går vidare. Men om inte, kommer slingan att säkerställa att vi får en ordentlig float genom att kontinuerligt upprepa tills användaren ger oss ett giltigt värde. 

Nu för gör-while loop skick, vi behöver att fundera över vad det innebär vara felaktigt flyta. Så för ramen för detta problem, förmodligen det är vettigt att bara acceptera positiva värden. 

Så flyttar on-- vi har fått en värde i dollar från användaren. Men vi har att göra med mynt, som är helt i cent. $ 1 motsvarar 100 cent. Så en bra sak att göra är att omvandla dessa värden till cent. 

Nu vid konvertering från en flottör till ett heltal, så dollar till cent, Vi vill se till att vi är försiktiga om floating-point vaghet. Så det betyder that-- säga min dollar value-- min float value-- var en ännu $ 2, det fortfarande kan finnas vissa enstaka siffror i det. Så vi vill vara säker på att inte bara vi multiplicera med 100 för att få cent, men vi också avrunda det. 

Så nu har vi beloppet förändringsgentemot användaren. Vi ursprungligen erhölls det i dollar, och nu har vi omvandlade det till cent. Så nu kan vi gå vidare med hjärtat av giriga algoritm, som alltid genom att använda det största myntet möjligt. Medan vi gör detta, Det är viktigt att vi också hålla reda på hur många mynt är kommer att returneras till användaren samt den återstående ändra gentemot användaren. 

Programmet kommer att se något som det här. När du har fått den mängd dollar och konvertera det till cent, Du kommer att ange en slinga. Medan kvartal kan vara used-- dvs. medan mängden av förändring för skulden till användaren är större än eller lika med 0,25 $, du kommer att använda en fjärdedel. 

Nu vad gör använder en fjärdedel innebära? Tja, en-- du öka myntet räkna återlämnas till användaren. Och andra kommer du minska strömmen ändringsmängd skyldig tillbaka till användaren med $ 0,25. 

Efter att ha upprepat att fram talen kan inte längre användas, vidare till nästa största coin-- i detta fall Dimes, $ 0,10. Så du kommer in som slinga tills du kan inte längre använda Dimes. Sedan gå vidare till nästa största mynt, Nickels. Efter nickels kan inte längre användas, använda det återstående beloppet i pennies. Och slutligen, skriva ut antal mynt som används. 

Ett annat sätt att du kan närma sig giriga problem är att använda modul strategi. Modulo är en operatör som returnerar återstoden av uppdelningen mellan två nummer. Säger jag hade 50 mod 5. Tja, 5 är en faktor 50, så resten kommer att vara 0. 50 mod 10-- väl, är 10 också en faktor 50, så resten är också 0. 50 mod 50-- väl, valfritt antal mod sig kommer inte att ha någon resten. 

Vad sägs om 50 mod 49? Jo, 49 endast går i 50 en gång. Så resten kommer att bli en. 53 mod 50 kommer att ge dig en rest av tre. 

Så hur kan vi använda modulo och kanske några division att genomföra vår girig algoritm? Tja, vi fortfarande vill vara trogna den hjärtat av giriga algorithm-- att är att använda det största myntet möjligt. 

Så låt oss fråga oss själva om vi kan använda alla håll att återvända $ 0,32 till användaren. Jo, 32 mod 25 ger oss en återstod av $ 0,07. Så det säger oss att vi kan definitivt Använd en fjärdedel med $ 0,07 kvar. 

Kan vi sedan använda några Dimes? Jo, no-- eftersom $ 0,07 mod $ 0,10 ger oss en rest av 7. 10 inte går in 7 alls. 

Då kan vi använda Nickels? Väl $ 0.07 mod 5 cent ger oss två återstående. Och slutligen, kan vi använda några pennies? 2 mod en ger oss 0, som är i slutändan vad vi vill eftersom då att innebär att vi har återvänt till användaren all förändring skyldig. 

Så nu har du två möjliga sätt att genomförandet av giriga algorithm-- ett med öglor och en med en Kombinationen av modulo och division. Så till sist, vi behöver bara ut det slutliga antalet mynt. 

Om jag ville berätta att jag hade 3 husdjur och detta värde hårdkodade, då kunde jag bara använda en enkelt tryck prov uttalande. Men vårt värde är faktiskt lagras i en variabel. Så hur du skriver ut värden lagras i variabler? 

För detta tar vi fördel av platshållare. Säger jag hade redan förklarat en initialiserad heltal n. Senare på om jag ville skriva att värde, då jag skulle skriva strängen. Och i stället för detta värde jag skulle använda en platshållare för att integer--% i. Sedan efter strängen, har jag en kommatecken, följt av den variabla att jag vill skriva ut. Och senare, när den skrivs ut, det kommer ut värdet på n. 

Jag kan också använda en platshållare för en flottör, till exempel. Om jag ville berätta hur mycket pengar jag har i min ficka, då jag kunde säga att jag har% f dollar. Och senare när den skrivs ut, då n kommer ta över platsen för det platshållare. Jag kunde också, till exempel, använder flera platshållare för flera variabler. Så länge jag lista dem i ordning, då jag kan berätta hur många hundar och katter jag har. 

Nu vet vi hur man uppmana användare för en mängd förändringar, se till att denna ingång är giltig, och sedan vi har två möjliga sätt att genomföra giriga algoritmen för att alltid använda den största myntet möjligt. Eftersom vi har hållit koll på hur många mynt vi använder, Vi kan sedan skriva ut värdet i slutet, berätta hur många mynt som de är få tillbaka. 

Mitt namn är Amayla, och detta är CS50. 