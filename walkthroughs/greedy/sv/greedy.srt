1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Låt oss få giriga.

3
00:00:02,900 --> 00:00:06,810
I girig, är vårt jobb att spela
rollen av en girig kassör.

4
00:00:06,810 --> 00:00:09,750
Användaren kommer att berätta hur
mycket förändring vi är skyldiga dem,

5
00:00:09,750 --> 00:00:13,520
och sedan vår uppgift är att beräkna
det minsta antalet mynt

6
00:00:13,520 --> 00:00:17,240
att vi kan använda för att göra
den mängd av förändring.

7
00:00:17,240 --> 00:00:19,560
>> Låt oss börja med ett exempel.

8
00:00:19,560 --> 00:00:23,170
Säg att användaren behöver $ 0,32 tillbaka.

9
00:00:23,170 --> 00:00:28,960
Vi kan göra detta genom att ge
dem 32 öre, en cent vardera.

10
00:00:28,960 --> 00:00:35,180
Eller jag kan också använda fem coins-- av
ge dem tre dimes, $ 0,10 vardera,

11
00:00:35,180 --> 00:00:38,060
och två öre, $ 0,02 vardera.

12
00:00:38,060 --> 00:00:42,580
Men kan vi använda även
färre mynt för att göra det?

13
00:00:42,580 --> 00:00:45,100
>> Hela taktik i greedy--
att vara en girig cashier--

14
00:00:45,100 --> 00:00:47,600
är att använda det största myntet möjligt.

15
00:00:47,600 --> 00:00:50,670
Så när vi har
kvartal vi kommer att använda dem.

16
00:00:50,670 --> 00:00:54,100
Och sedan en gång de tar slut,
Vi kommer att använda Dimes, $ 0,10 vardera.

17
00:00:54,100 --> 00:00:58,840
Sedan Nickels, 5 cent vardera, och
sedan ner till pennies, en cent vardera.

18
00:00:58,840 --> 00:01:01,792
Genom att använda det största myntet
möjligt när vi kan,

19
00:01:01,792 --> 00:01:07,350
vi se till att vi använder det minsta antalet
av mynt möjligt att göra ändringen.

20
00:01:07,350 --> 00:01:09,180
>> Så låt oss gå igenom detta.

21
00:01:09,180 --> 00:01:11,660
Användaren behöver $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Så vi frågar oss,
kan vi använda en fjärdedel?

23
00:01:14,200 --> 00:01:15,560
Jo, vi kan.

24
00:01:15,560 --> 00:01:19,720
Så nu vet bara vi dem
$ 0,07, och vi använde ett mynt.

25
00:01:19,720 --> 00:01:20,970
>> Kan vi använda en annan fjärdedel?

26
00:01:20,970 --> 00:01:21,890
Tja, nej.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 är mindre än $ 0,25, så vi fortsätter
till nästa största mynt tillgängliga.

28
00:01:27,570 --> 00:01:30,690
Dimes är $ 0,10, och
igen, kan vi inte använda Dimes.

29
00:01:30,690 --> 00:01:35,480
Eftersom Dimes är värda $ 0,10, vilket
är mer än värdet av den förändring skyldig.

30
00:01:35,480 --> 00:01:36,790
>> Vi går till Nickels.

31
00:01:36,790 --> 00:01:40,890
Och, ja faktiskt, 0,05 $ är mindre än
$ 0.10-- så att vi kan använda en nickel.

32
00:01:40,890 --> 00:01:46,104
Så nu har vi bara skyldiga användaren $ 0,02,
och vi har hittills använt två mynt.

33
00:01:46,104 --> 00:01:47,270
Vi kan inte använda en annan nickel.

34
00:01:47,270 --> 00:01:51,140
Så fortsätt sedan vi till den sista myntet vid
vårt förfogande, som är pennies.

35
00:01:51,140 --> 00:01:52,270
>> Och kan vi använda öre?

36
00:01:52,270 --> 00:01:59,060
Tja, yes-- och vi sluta med två
öre för totalt fyra mynt.

37
00:01:59,060 --> 00:02:01,430
>> När du är klar, den
Programmet kommer att se ut så här.

38
00:02:01,430 --> 00:02:03,710
När användaren kör
giriga program, de ska

39
00:02:03,710 --> 00:02:07,270
uppmanas att ge den mängd
förändring i dollar som de är skyldiga.

40
00:02:07,270 --> 00:02:11,140
Och sedan ditt program att avge
den minsta mängd mynt

41
00:02:11,140 --> 00:02:14,740
att de giriga kassa skulle använda
att detta belopp av förändring.

42
00:02:14,740 --> 00:02:18,160
>> Så nu ska vi bryta denna
ner i våra underaktiviteter.

43
00:02:18,160 --> 00:02:21,410
Först ska vi uppmana våra
användare för en mängd förändringar.

44
00:02:21,410 --> 00:02:25,630
Och som med alla användarinmatning, vill vi
se till att vi validera att ingång

45
00:02:25,630 --> 00:02:29,360
och se till att vi kan använda det
ingång för resten av vårt program.

46
00:02:29,360 --> 00:02:32,480
Sedan ska vi alltid
Använd den största punkten möjligt

47
00:02:32,480 --> 00:02:35,240
och hålla koll på de mynt som användes.

48
00:02:35,240 --> 00:02:39,080
Och slutligen, ut den slutliga
antalet mynt som vi använde.

49
00:02:39,080 --> 00:02:40,970
>> Så låt oss tala om att fråga.

50
00:02:40,970 --> 00:02:43,550
Beloppet måste cent,
och detta är i dollar.

51
00:02:43,550 --> 00:02:48,440
Och så för dollar, kommer vi
att använda den typ float variabeln.

52
00:02:48,440 --> 00:02:52,390
Nu när du ber en användare för inmatning,
du vill vara säker på att det är giltigt.

53
00:02:52,390 --> 00:02:56,640
Och så här vi vill ta tillvara
DO-while-slingan konstruktion.

54
00:02:56,640 --> 00:03:00,320
>> En gör-while-slinga kommer att utföra
kroppen av slingan minst en gång.

55
00:03:00,320 --> 00:03:01,650
Så detta är praktiskt.

56
00:03:01,650 --> 00:03:05,510
Vi vet att vi måste uppmana
användaren åtminstone en gång för en flottör.

57
00:03:05,510 --> 00:03:07,100
Nu om det float är giltig.

58
00:03:07,100 --> 00:03:07,710
Toppen.

59
00:03:07,710 --> 00:03:08,460
Vi går vidare.

60
00:03:08,460 --> 00:03:11,910
Men om inte, kommer slingan att säkerställa
att vi får en ordentlig float

61
00:03:11,910 --> 00:03:16,810
genom att kontinuerligt upprepa tills
användaren ger oss ett giltigt värde.

62
00:03:16,810 --> 00:03:18,760
>> Nu för gör-while
loop skick, vi behöver

63
00:03:18,760 --> 00:03:22,000
att fundera över vad det innebär
vara felaktigt flyta.

64
00:03:22,000 --> 00:03:24,220
Så för ramen för
detta problem, förmodligen

65
00:03:24,220 --> 00:03:27,450
det är vettigt att bara
acceptera positiva värden.

66
00:03:27,450 --> 00:03:32,010
>> Så flyttar on-- vi har fått en
värde i dollar från användaren.

67
00:03:32,010 --> 00:03:35,380
Men vi har att göra med mynt,
som är helt i cent.

68
00:03:35,380 --> 00:03:38,660
$ 1 motsvarar 100 cent.

69
00:03:38,660 --> 00:03:43,670
Så en bra sak att göra är att
omvandla dessa värden till cent.

70
00:03:43,670 --> 00:03:48,380
>> Nu vid konvertering från en flottör
till ett heltal, så dollar till cent,

71
00:03:48,380 --> 00:03:52,230
Vi vill se till att vi är försiktiga
om floating-point vaghet.

72
00:03:52,230 --> 00:03:55,260
Så det betyder that-- säga
min dollar value-- min float

73
00:03:55,260 --> 00:04:00,260
value-- var en ännu $ 2, det fortfarande
kan finnas vissa enstaka siffror i det.

74
00:04:00,260 --> 00:04:04,590
Så vi vill vara säker på att inte bara
vi multiplicera med 100 för att få cent,

75
00:04:04,590 --> 00:04:06,480
men vi också avrunda det.

76
00:04:06,480 --> 00:04:09,210
>> Så nu har vi beloppet
förändringsgentemot användaren.

77
00:04:09,210 --> 00:04:13,430
Vi ursprungligen erhölls det i dollar,
och nu har vi omvandlade det till cent.

78
00:04:13,430 --> 00:04:17,029
Så nu kan vi gå vidare med hjärtat av
giriga algoritm, som alltid

79
00:04:17,029 --> 00:04:19,220
genom att använda det största myntet möjligt.

80
00:04:19,220 --> 00:04:21,930
Medan vi gör detta,
Det är viktigt att vi också

81
00:04:21,930 --> 00:04:25,360
hålla reda på hur många mynt är
kommer att returneras till användaren

82
00:04:25,360 --> 00:04:28,630
samt den återstående
ändra gentemot användaren.

83
00:04:28,630 --> 00:04:31,130
>> Programmet kommer att se
något som det här.

84
00:04:31,130 --> 00:04:34,190
När du har fått den mängd
dollar och konvertera det till cent,

85
00:04:34,190 --> 00:04:35,790
Du kommer att ange en slinga.

86
00:04:35,790 --> 00:04:38,400
Medan kvartal kan vara
used-- dvs.

87
00:04:38,400 --> 00:04:43,660
medan mängden av förändring för skulden till
användaren är större än eller lika med 0,25 $,

88
00:04:43,660 --> 00:04:45,040
du kommer att använda en fjärdedel.

89
00:04:45,040 --> 00:04:47,000
>> Nu vad gör använder en fjärdedel innebära?

90
00:04:47,000 --> 00:04:51,280
Tja, en-- du öka myntet
räkna återlämnas till användaren.

91
00:04:51,280 --> 00:04:55,890
Och andra kommer du minska strömmen
ändringsmängd skyldig tillbaka till användaren

92
00:04:55,890 --> 00:04:57,520
med $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Efter att ha upprepat att fram
talen kan inte längre användas,

94
00:05:00,680 --> 00:05:04,630
vidare till nästa största
coin-- i detta fall Dimes, $ 0,10.

95
00:05:04,630 --> 00:05:07,750
Så du kommer in som slinga tills
du kan inte längre använda Dimes.

96
00:05:07,750 --> 00:05:10,720
Sedan gå vidare till nästa
största mynt, Nickels.

97
00:05:10,720 --> 00:05:14,810
Efter nickels kan inte längre användas,
använda det återstående beloppet i pennies.

98
00:05:14,810 --> 00:05:17,800
Och slutligen, skriva ut
antal mynt som används.

99
00:05:17,800 --> 00:05:20,350
>> Ett annat sätt att du kan
närma sig giriga problem

100
00:05:20,350 --> 00:05:22,950
är att använda modul strategi.

101
00:05:22,950 --> 00:05:25,690
Modulo är en operatör
som returnerar återstoden

102
00:05:25,690 --> 00:05:27,680
av uppdelningen mellan två nummer.

103
00:05:27,680 --> 00:05:30,270
Säger jag hade 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Tja, 5 är en faktor 50,
så resten kommer att vara 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- väl, är 10 också en faktor
50, så resten är också 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- väl, valfritt antal mod sig
kommer inte att ha någon resten.

107
00:05:43,660 --> 00:05:45,510
>> Vad sägs om 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Jo, 49 endast går i 50 en gång.

109
00:05:47,910 --> 00:05:50,290
Så resten kommer att bli en.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 kommer att
ge dig en rest av tre.

111
00:05:55,180 --> 00:05:59,120
>> Så hur kan vi använda modulo
och kanske några division

112
00:05:59,120 --> 00:06:01,690
att genomföra vår girig algoritm?

113
00:06:01,690 --> 00:06:05,550
Tja, vi fortfarande vill vara trogna den
hjärtat av giriga algorithm-- att

114
00:06:05,550 --> 00:06:07,910
är att använda det största myntet möjligt.

115
00:06:07,910 --> 00:06:14,570
>> Så låt oss fråga oss själva om vi kan använda alla
håll att återvända $ 0,32 till användaren.

116
00:06:14,570 --> 00:06:20,070
Jo, 32 mod 25 ger
oss en återstod av $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Så det säger oss att vi kan definitivt
Använd en fjärdedel med $ 0,07 kvar.

118
00:06:24,500 --> 00:06:26,180
>> Kan vi sedan använda några Dimes?

119
00:06:26,180 --> 00:06:32,740
Jo, no-- eftersom $ 0,07 mod
$ 0,10 ger oss en rest av 7.

120
00:06:32,740 --> 00:06:34,960
10 inte går in 7 alls.

121
00:06:34,960 --> 00:06:36,390
>> Då kan vi använda Nickels?

122
00:06:36,390 --> 00:06:40,490
Väl $ 0.07 mod 5 cent
ger oss två återstående.

123
00:06:40,490 --> 00:06:42,930
Och slutligen, kan vi använda några pennies?

124
00:06:42,930 --> 00:06:45,930
2 mod en ger oss 0,
som är i slutändan vad

125
00:06:45,930 --> 00:06:48,160
vi vill eftersom då att
innebär att vi har återvänt

126
00:06:48,160 --> 00:06:50,160
till användaren all förändring skyldig.

127
00:06:50,160 --> 00:06:54,320
>> Så nu har du två möjliga sätt att
genomförandet av giriga algorithm--

128
00:06:54,320 --> 00:06:59,230
ett med öglor och en med en
Kombinationen av modulo och division.

129
00:06:59,230 --> 00:07:03,010
Så till sist, vi behöver bara
ut det slutliga antalet mynt.

130
00:07:03,010 --> 00:07:06,520
>> Om jag ville berätta att jag hade
3 husdjur och detta värde hårdkodade,

131
00:07:06,520 --> 00:07:09,240
då kunde jag bara använda en
enkelt tryck prov uttalande.

132
00:07:09,240 --> 00:07:12,320
Men vårt värde är faktiskt
lagras i en variabel.

133
00:07:12,320 --> 00:07:15,260
Så hur du skriver ut
värden lagras i variabler?

134
00:07:15,260 --> 00:07:17,880
>> För detta tar vi
fördel av platshållare.

135
00:07:17,880 --> 00:07:21,540
Säger jag hade redan förklarat
en initialiserad heltal n.

136
00:07:21,540 --> 00:07:25,170
Senare på om jag ville skriva att
värde, då jag skulle skriva strängen.

137
00:07:25,170 --> 00:07:30,500
Och i stället för detta värde jag skulle använda
en platshållare för att integer--% i.

138
00:07:30,500 --> 00:07:33,800
Sedan efter strängen, har jag en
kommatecken, följt av den variabla

139
00:07:33,800 --> 00:07:34,950
att jag vill skriva ut.

140
00:07:34,950 --> 00:07:38,550
Och senare, när den skrivs ut,
det kommer ut värdet på n.

141
00:07:38,550 --> 00:07:41,570
>> Jag kan också använda en platshållare
för en flottör, till exempel.

142
00:07:41,570 --> 00:07:44,000
Om jag ville berätta hur
mycket pengar jag har i min ficka,

143
00:07:44,000 --> 00:07:46,820
då jag kunde säga att jag har% f dollar.

144
00:07:46,820 --> 00:07:51,330
Och senare när den skrivs ut, då n kommer
ta över platsen för det platshållare.

145
00:07:51,330 --> 00:07:55,530
Jag kunde också, till exempel, använder flera
platshållare för flera variabler.

146
00:07:55,530 --> 00:07:57,590
Så länge jag lista
dem i ordning, då jag

147
00:07:57,590 --> 00:08:00,390
kan berätta hur många
hundar och katter jag har.

148
00:08:00,390 --> 00:08:03,710
>> Nu vet vi hur man uppmana
användare för en mängd förändringar,

149
00:08:03,710 --> 00:08:06,130
se till att denna ingång
är giltig, och sedan vi

150
00:08:06,130 --> 00:08:10,370
har två möjliga sätt att genomföra
giriga algoritmen för att alltid använda

151
00:08:10,370 --> 00:08:12,090
den största myntet möjligt.

152
00:08:12,090 --> 00:08:15,050
Eftersom vi har hållit koll på
hur många mynt vi använder,

153
00:08:15,050 --> 00:08:19,210
Vi kan sedan skriva ut värdet i slutet,
berätta hur många mynt som de är

154
00:08:19,210 --> 00:08:20,240
få tillbaka.

155
00:08:20,240 --> 00:08:24,240
>> Mitt namn är Amayla, och detta är CS50.

156
00:08:24,240 --> 00:08:25,915

