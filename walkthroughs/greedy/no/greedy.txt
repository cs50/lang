La oss bli grådig. I grådig, er vår jobb å spille rollen som en grådig kasserer. Brukeren vil fortelle oss hvordan mye endringen vi skylder dem, og da er vår jobb er å beregne minimum antall mynter som vi kan bruke til å lage at mengden av endring. 

La oss starte med et eksempel. Si brukeren krever $ 0,32 tilbake. Vi kan gjøre dette ved å gi dem 32 pennies, ett øre hver. Eller jeg kan også bruke fem coins-- av gi dem tre dimes, $ 0,10 hver, og to pennies, $ 0,02 hver. Men kan vi bruke selv færre mynter til å gjøre det? 

Hele taktikk i greedy-- å være en grådig cashier-- er å benytte den største mynten mulig. Så når vi har kvartalene vi vil bruke dem. Og så når de går ut, vi vil bruke dimes, $ 0,10 hver. Deretter nickels, 5 cent hver, og deretter ned til pennies, ett øre hver. Ved hjelp av den største mynt mulig når vi kan, vi sikre at vi bruker færrest mynter mulig å gjøre endringen. 

Så la oss gå gjennom dette. Brukeren trenger $ 0,32. Så vi spør oss selv, kan vi bruke en fjerdedel? Vel, ja vi kan. Så nå vet vi bare dem $ 0,07, og vi brukte en mynt. 

Kan vi bruke et annet kvartal? Vel nei. $ 0,07 er mindre enn $ 0.25, så vi fortsetter til den nest største mynt tilgjengelig. Dimes er $ 0,10, og igjen, vi kan ikke bruke dimes. Fordi dimes er verdt $ 0,10, noe som er mer enn mengden av endring skyldte. 

Vi går til nickels. Og, ja ja, $ 0,05 er mindre enn $ 0.10-- slik at vi kan bruke en nikkel. Så nå er vi bare skylder brukeren $ 0.02, og vi har så langt brukt to mynter. Vi kan ikke bruke en annen nikkel. Så da vi gå videre til siste mynt på rådighet, som er de pennies. 

Og kan vi bruke krone? Vel, yes-- og vi ender opp med å bruke to pennies for totalt fire mynter. 

Når du er ferdig, Programmet vil se slik ut. Når brukeren kjører grådig program, vil de bli bedt om å gi mengden av endring i dollar som de skyldte. Og så programmet vil produksjonen det minimum av mynter at den grådige kasserer ville bruke å gjøre at mengden av endring. 

Så nå la oss bryte dette ned i våre deloppgaver. Først skal vi be vår bruker for et beløp på endring. Og som med alle brukerundersøkelser, ønsker vi å sørge for at vi validere at innspill og sørge for at vi kan bruke det inngang for resten av vårt program. Deretter skal vi alltid bruker den største point mulig og holde orden på mynter som brukes. Og til slutt, skrive den endelige antall mynter som vi brukte. 

Så la oss snakke om å spørre. Beløpet må gjøre cent, og dette er i dollar. Og så for dollar, kommer vi å bruke float variabel type. Nå når du spør en bruker for innspill, du vil være sikker på at det er gyldig. Og så her liker vi å dra nytte av do-while-loop konstruere. 

En do-while-loop vil utføre legeme av sløyfen minst én gang. Så dette kommer i hendig. Vi vet at vi trenger å be bruker minst en gang for en flottør. Nå hvis det flyter er gyldig. Det er flott. Vi går videre. Men hvis ikke, vil sløyfen sørge at vi får en skikkelig dupp ved å gjenta kontinuerlig til brukeren gir oss en gyldig verdi. 

Nå for gjør-mens sløyfe tilstand, trenger vi å vurdere hva det betyr å ha en ugyldig flyte. Så for rammen av dette problemet, sannsynligvis det er fornuftig bare for å akseptere positive verdier. 

Så flytter on-- vi har fått en verdi i dollar fra brukeren. Men vi arbeider med mynter, som er helt i cent. $ 1 tilsvarer 100 cents. Så en god ting å gjøre er å konvertere disse verdiene inn cent. 

Nå når du konverterer fra en flåte til et heltall, så dollar til øre, vi vil være sikker på at vi er forsiktige om flyt unøyaktighet. Så det betyr at-- si min dollar value-- min flyte value-- var en enda $ 2, er det fortsatt kan være noen bortkommen tall der. Så vi vil være sikker på at ikke bare multipliserer vi med 100 for å få cent, men vi har også runde det av. 

Så nå har vi mengden av endring skyldte til brukeren. Vi opprinnelig fikk den i dollar, og nå har vi konvertert den til cent. Så nå kan vi fortsette med hjerte av den grådige algoritmen, som alltid ved hjelp av den største mynten mulig. Mens vi gjør dette, det er viktig at vi også holde styr på hvor mange mynter er kommer til å bli sendt tilbake til brukeren så vel som gjenværende endre skyldte til brukeren. 

Programmet vil se noe sånt som dette. Etter at du får den mengden dollar og konvertere det til cent, så vil du legge inn en løkke. Mens kvartalene kan være used-- det vil si mens mengden av endring skyldte til Brukeren er større enn eller lik $ 0,25, du kommer til å bruke en fjerdedel. 

Nå hva gjør du bruker en fjerdedel innebære? Vel, one-- vil øke mynt telle som skal returneres til brukeren. Og andre vil du redusere strøm mengden av endring skyldte tilbake til brukeren med $ 0,25. 

Etter å gjenta at inntil kvartalene kan ikke lenger brukes, videre til den nest største coin-- i dette tilfellet dimes, $ 0,10. Så du vil angi at løkke til du kan ikke lenger bruke dimes. Deretter gå videre til neste største mynten, nickels. Etter nickels kan ikke lenger brukes, bruke det resterende beløpet i pennies. Og til slutt, skriver du ut antall mynter som brukes. 

En annen måte som du kan nærme seg grådig problem er å bruke modulo tilnærming. Modulo er en operatør som returnerer resten av skillet mellom to tall. Si at jeg hadde 50 mod 5. Vel, 5 er en faktor på 50, så resten vil være 0. 50 mod 10-- vel, 10 er også en faktor på 50, slik at det resterende er også 0. 50 mod 50-- vel, en rekke mod selv er ikke til å ha noen resten. 

Hva om 50 mod 49? Vel, 49 bare går inn i 50 en gang. Så resten kommer til å være en. 53 mod 50 kommer til å gi deg en rest av tre. 

Så hvordan kan vi bruke modulo og kanskje noen divisjon å implementere vår grådig algoritme? Vel, vi ønsker fortsatt å være tro mot hjertet av den grådige algorithm-- som er å bruke den største mynten mulig. 

Så la oss spørre oss selv om vi kan bruke en hvilken som helst kvartalene for å gå tilbake $ 0,32 til brukeren. Vel, 32 mod 25 gir oss en rest på $ 0,07. Slik som forteller oss at vi kan definitivt bruker en fjerdedel med $ 0,07 gjenstår. 

Kan vi da bruke noen dimes? Vel, no-- fordi $ 0,07 mod $ 0,10 gir oss en rest på syv. 10 går ikke inn 7 i det hele tatt. 

Da kan vi bruke nickels? Vel $ 0,07 mod 5 cents gir oss to gjenværende. Og til slutt, kan vi bruke noen pennies? 2 mod 1 gir oss 0, som er til syvende og sist hva vi ønsker fordi da at betyr at vi har kommet tilbake til brukeren all endring skyldte. 

Så nå har du to mulige måter implementere den grådige algorithm-- en med løkker og en med en Kombinasjonen av modulo og divisjon. Så til slutt, vi trenger bare å skrive ut det endelige antall mynter. 

Hvis jeg ønsket å fortelle deg at jeg hadde 3 kjæledyr, og denne verdien ble hardkodet, da kunne jeg bare bruke en enkelt trykk test uttalelse. Men vår verdi er faktisk er lagret i en variabel. Så hvordan skriver du det Verdiene lagres i variabler? 

For dette tar vi Fordelen med plassholdere. Si at jeg hadde allerede erklært en initialisert heltall n. Deretter senere hvis jeg ønsket å skrive at verdi, så ville jeg skrive strengen. Og i stedet for at verdien jeg ville bruke plassholder for at integer--% i. Så etter strengen, har jeg en komma, etterfulgt av den variable som jeg ønsker å skrive ut. Og senere, når det skrives ut, det vil skrive ut verdien av n. 

Jeg kan også bruke en plassholder for en flottør, f.eks. Hvis jeg ønsket å fortelle deg hvordan mye penger jeg har i lomma, så jeg kunne si at jeg har% f dollar. Og senere når det skrives ut, deretter n vil ta plassen til det stedet holder. Jeg kunne også for eksempel bruke flere plassholdere for flere variabler. Så så lenge jeg liste dem i orden, så jeg kan fortelle deg hvor mange hunder og katter jeg har. 

Nå vet vi hvordan vi skal be bruker for et beløp på endring, sikre at den inngangen er gyldig, og da vi ha to mulige måter å implementere grådige algoritmen for alltid å bruke den største mynten mulig. Fordi vi har holdt orden på hvor mange mynter vi bruker, Vi kan da skrive at verdien på slutten, fortelle brukeren hvor mange mynter de er kommer tilbake. 

Mitt navn er Amayla, og dette er CS50. 