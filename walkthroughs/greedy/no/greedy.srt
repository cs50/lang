1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> La oss bli grådig.

3
00:00:02,900 --> 00:00:06,810
I grådig, er vår jobb å spille
rollen som en grådig kasserer.

4
00:00:06,810 --> 00:00:09,750
Brukeren vil fortelle oss hvordan
mye endringen vi skylder dem,

5
00:00:09,750 --> 00:00:13,520
og da er vår jobb er å beregne
minimum antall mynter

6
00:00:13,520 --> 00:00:17,240
som vi kan bruke til å lage
at mengden av endring.

7
00:00:17,240 --> 00:00:19,560
>> La oss starte med et eksempel.

8
00:00:19,560 --> 00:00:23,170
Si brukeren krever $ 0,32 tilbake.

9
00:00:23,170 --> 00:00:28,960
Vi kan gjøre dette ved å gi
dem 32 pennies, ett øre hver.

10
00:00:28,960 --> 00:00:35,180
Eller jeg kan også bruke fem coins-- av
gi dem tre dimes, $ 0,10 hver,

11
00:00:35,180 --> 00:00:38,060
og to pennies, $ 0,02 hver.

12
00:00:38,060 --> 00:00:42,580
Men kan vi bruke selv
færre mynter til å gjøre det?

13
00:00:42,580 --> 00:00:45,100
>> Hele taktikk i greedy--
å være en grådig cashier--

14
00:00:45,100 --> 00:00:47,600
er å benytte den største mynten mulig.

15
00:00:47,600 --> 00:00:50,670
Så når vi har
kvartalene vi vil bruke dem.

16
00:00:50,670 --> 00:00:54,100
Og så når de går ut,
vi vil bruke dimes, $ 0,10 hver.

17
00:00:54,100 --> 00:00:58,840
Deretter nickels, 5 cent hver, og
deretter ned til pennies, ett øre hver.

18
00:00:58,840 --> 00:01:01,792
Ved hjelp av den største mynt
mulig når vi kan,

19
00:01:01,792 --> 00:01:07,350
vi sikre at vi bruker færrest
mynter mulig å gjøre endringen.

20
00:01:07,350 --> 00:01:09,180
>> Så la oss gå gjennom dette.

21
00:01:09,180 --> 00:01:11,660
Brukeren trenger $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Så vi spør oss selv,
kan vi bruke en fjerdedel?

23
00:01:14,200 --> 00:01:15,560
Vel, ja vi kan.

24
00:01:15,560 --> 00:01:19,720
Så nå vet vi bare dem
$ 0,07, og vi brukte en mynt.

25
00:01:19,720 --> 00:01:20,970
>> Kan vi bruke et annet kvartal?

26
00:01:20,970 --> 00:01:21,890
Vel nei.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 er mindre enn $ 0.25, så vi fortsetter
til den nest største mynt tilgjengelig.

28
00:01:27,570 --> 00:01:30,690
Dimes er $ 0,10, og
igjen, vi kan ikke bruke dimes.

29
00:01:30,690 --> 00:01:35,480
Fordi dimes er verdt $ 0,10, noe som
er mer enn mengden av endring skyldte.

30
00:01:35,480 --> 00:01:36,790
>> Vi går til nickels.

31
00:01:36,790 --> 00:01:40,890
Og, ja ja, $ 0,05 er mindre enn
$ 0.10-- slik at vi kan bruke en nikkel.

32
00:01:40,890 --> 00:01:46,104
Så nå er vi bare skylder brukeren $ 0.02,
og vi har så langt brukt to mynter.

33
00:01:46,104 --> 00:01:47,270
Vi kan ikke bruke en annen nikkel.

34
00:01:47,270 --> 00:01:51,140
Så da vi gå videre til siste mynt på
rådighet, som er de pennies.

35
00:01:51,140 --> 00:01:52,270
>> Og kan vi bruke krone?

36
00:01:52,270 --> 00:01:59,060
Vel, yes-- og vi ender opp med å bruke to
pennies for totalt fire mynter.

37
00:01:59,060 --> 00:02:01,430
>> Når du er ferdig,
Programmet vil se slik ut.

38
00:02:01,430 --> 00:02:03,710
Når brukeren kjører
grådig program, vil de

39
00:02:03,710 --> 00:02:07,270
bli bedt om å gi mengden av
endring i dollar som de skyldte.

40
00:02:07,270 --> 00:02:11,140
Og så programmet vil produksjonen
det minimum av mynter

41
00:02:11,140 --> 00:02:14,740
at den grådige kasserer ville bruke
å gjøre at mengden av endring.

42
00:02:14,740 --> 00:02:18,160
>> Så nå la oss bryte dette
ned i våre deloppgaver.

43
00:02:18,160 --> 00:02:21,410
Først skal vi be vår
bruker for et beløp på endring.

44
00:02:21,410 --> 00:02:25,630
Og som med alle brukerundersøkelser, ønsker vi å
sørge for at vi validere at innspill

45
00:02:25,630 --> 00:02:29,360
og sørge for at vi kan bruke det
inngang for resten av vårt program.

46
00:02:29,360 --> 00:02:32,480
Deretter skal vi alltid
bruker den største point mulig

47
00:02:32,480 --> 00:02:35,240
og holde orden på mynter som brukes.

48
00:02:35,240 --> 00:02:39,080
Og til slutt, skrive den endelige
antall mynter som vi brukte.

49
00:02:39,080 --> 00:02:40,970
>> Så la oss snakke om å spørre.

50
00:02:40,970 --> 00:02:43,550
Beløpet må gjøre cent,
og dette er i dollar.

51
00:02:43,550 --> 00:02:48,440
Og så for dollar, kommer vi
å bruke float variabel type.

52
00:02:48,440 --> 00:02:52,390
Nå når du spør en bruker for innspill,
du vil være sikker på at det er gyldig.

53
00:02:52,390 --> 00:02:56,640
Og så her liker vi å dra nytte
av do-while-loop konstruere.

54
00:02:56,640 --> 00:03:00,320
>> En do-while-loop vil utføre
legeme av sløyfen minst én gang.

55
00:03:00,320 --> 00:03:01,650
Så dette kommer i hendig.

56
00:03:01,650 --> 00:03:05,510
Vi vet at vi trenger å be
bruker minst en gang for en flottør.

57
00:03:05,510 --> 00:03:07,100
Nå hvis det flyter er gyldig.

58
00:03:07,100 --> 00:03:07,710
Det er flott.

59
00:03:07,710 --> 00:03:08,460
Vi går videre.

60
00:03:08,460 --> 00:03:11,910
Men hvis ikke, vil sløyfen sørge
at vi får en skikkelig dupp

61
00:03:11,910 --> 00:03:16,810
ved å gjenta kontinuerlig til
brukeren gir oss en gyldig verdi.

62
00:03:16,810 --> 00:03:18,760
>> Nå for gjør-mens
sløyfe tilstand, trenger vi

63
00:03:18,760 --> 00:03:22,000
å vurdere hva det betyr
å ha en ugyldig flyte.

64
00:03:22,000 --> 00:03:24,220
Så for rammen av
dette problemet, sannsynligvis

65
00:03:24,220 --> 00:03:27,450
det er fornuftig bare for å
akseptere positive verdier.

66
00:03:27,450 --> 00:03:32,010
>> Så flytter on-- vi har fått en
verdi i dollar fra brukeren.

67
00:03:32,010 --> 00:03:35,380
Men vi arbeider med mynter,
som er helt i cent.

68
00:03:35,380 --> 00:03:38,660
$ 1 tilsvarer 100 cents.

69
00:03:38,660 --> 00:03:43,670
Så en god ting å gjøre er å
konvertere disse verdiene inn cent.

70
00:03:43,670 --> 00:03:48,380
>> Nå når du konverterer fra en flåte
til et heltall, så dollar til øre,

71
00:03:48,380 --> 00:03:52,230
vi vil være sikker på at vi er forsiktige
om flyt unøyaktighet.

72
00:03:52,230 --> 00:03:55,260
Så det betyr at-- si
min dollar value-- min flyte

73
00:03:55,260 --> 00:04:00,260
value-- var en enda $ 2, er det fortsatt
kan være noen bortkommen tall der.

74
00:04:00,260 --> 00:04:04,590
Så vi vil være sikker på at ikke bare
multipliserer vi med 100 for å få cent,

75
00:04:04,590 --> 00:04:06,480
men vi har også runde det av.

76
00:04:06,480 --> 00:04:09,210
>> Så nå har vi mengden
av endring skyldte til brukeren.

77
00:04:09,210 --> 00:04:13,430
Vi opprinnelig fikk den i dollar,
og nå har vi konvertert den til cent.

78
00:04:13,430 --> 00:04:17,029
Så nå kan vi fortsette med hjerte av
den grådige algoritmen, som alltid

79
00:04:17,029 --> 00:04:19,220
ved hjelp av den største mynten mulig.

80
00:04:19,220 --> 00:04:21,930
Mens vi gjør dette,
det er viktig at vi også

81
00:04:21,930 --> 00:04:25,360
holde styr på hvor mange mynter er
kommer til å bli sendt tilbake til brukeren

82
00:04:25,360 --> 00:04:28,630
så vel som gjenværende
endre skyldte til brukeren.

83
00:04:28,630 --> 00:04:31,130
>> Programmet vil se
noe sånt som dette.

84
00:04:31,130 --> 00:04:34,190
Etter at du får den mengden
dollar og konvertere det til cent,

85
00:04:34,190 --> 00:04:35,790
så vil du legge inn en løkke.

86
00:04:35,790 --> 00:04:38,400
Mens kvartalene kan være
used-- det vil si

87
00:04:38,400 --> 00:04:43,660
mens mengden av endring skyldte til
Brukeren er større enn eller lik $ 0,25,

88
00:04:43,660 --> 00:04:45,040
du kommer til å bruke en fjerdedel.

89
00:04:45,040 --> 00:04:47,000
>> Nå hva gjør du bruker en fjerdedel innebære?

90
00:04:47,000 --> 00:04:51,280
Vel, one-- vil øke mynt
telle som skal returneres til brukeren.

91
00:04:51,280 --> 00:04:55,890
Og andre vil du redusere strøm
mengden av endring skyldte tilbake til brukeren

92
00:04:55,890 --> 00:04:57,520
med $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Etter å gjenta at inntil
kvartalene kan ikke lenger brukes,

94
00:05:00,680 --> 00:05:04,630
videre til den nest største
coin-- i dette tilfellet dimes, $ 0,10.

95
00:05:04,630 --> 00:05:07,750
Så du vil angi at løkke til
du kan ikke lenger bruke dimes.

96
00:05:07,750 --> 00:05:10,720
Deretter gå videre til neste
største mynten, nickels.

97
00:05:10,720 --> 00:05:14,810
Etter nickels kan ikke lenger brukes,
bruke det resterende beløpet i pennies.

98
00:05:14,810 --> 00:05:17,800
Og til slutt, skriver du ut
antall mynter som brukes.

99
00:05:17,800 --> 00:05:20,350
>> En annen måte som du kan
nærme seg grådig problem

100
00:05:20,350 --> 00:05:22,950
er å bruke modulo tilnærming.

101
00:05:22,950 --> 00:05:25,690
Modulo er en operatør
som returnerer resten

102
00:05:25,690 --> 00:05:27,680
av skillet mellom to tall.

103
00:05:27,680 --> 00:05:30,270
Si at jeg hadde 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Vel, 5 er en faktor på 50,
så resten vil være 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- vel, 10 er også en faktor
på 50, slik at det resterende er også 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- vel, en rekke mod selv
er ikke til å ha noen resten.

107
00:05:43,660 --> 00:05:45,510
>> Hva om 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Vel, 49 bare går inn i 50 en gang.

109
00:05:47,910 --> 00:05:50,290
Så resten kommer til å være en.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 kommer til å
gi deg en rest av tre.

111
00:05:55,180 --> 00:05:59,120
>> Så hvordan kan vi bruke modulo
og kanskje noen divisjon

112
00:05:59,120 --> 00:06:01,690
å implementere vår grådig algoritme?

113
00:06:01,690 --> 00:06:05,550
Vel, vi ønsker fortsatt å være tro mot
hjertet av den grådige algorithm-- som

114
00:06:05,550 --> 00:06:07,910
er å bruke den største mynten mulig.

115
00:06:07,910 --> 00:06:14,570
>> Så la oss spørre oss selv om vi kan bruke en hvilken som helst
kvartalene for å gå tilbake $ 0,32 til brukeren.

116
00:06:14,570 --> 00:06:20,070
Vel, 32 mod 25 gir
oss en rest på $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Slik som forteller oss at vi kan definitivt
bruker en fjerdedel med $ 0,07 gjenstår.

118
00:06:24,500 --> 00:06:26,180
>> Kan vi da bruke noen dimes?

119
00:06:26,180 --> 00:06:32,740
Vel, no-- fordi $ 0,07 mod
$ 0,10 gir oss en rest på syv.

120
00:06:32,740 --> 00:06:34,960
10 går ikke inn 7 i det hele tatt.

121
00:06:34,960 --> 00:06:36,390
>> Da kan vi bruke nickels?

122
00:06:36,390 --> 00:06:40,490
Vel $ 0,07 mod 5 cents
gir oss to gjenværende.

123
00:06:40,490 --> 00:06:42,930
Og til slutt, kan vi bruke noen pennies?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 gir oss 0,
som er til syvende og sist hva

125
00:06:45,930 --> 00:06:48,160
vi ønsker fordi da at
betyr at vi har kommet tilbake

126
00:06:48,160 --> 00:06:50,160
til brukeren all endring skyldte.

127
00:06:50,160 --> 00:06:54,320
>> Så nå har du to mulige måter
implementere den grådige algorithm--

128
00:06:54,320 --> 00:06:59,230
en med løkker og en med en
Kombinasjonen av modulo og divisjon.

129
00:06:59,230 --> 00:07:03,010
Så til slutt, vi trenger bare å
skrive ut det endelige antall mynter.

130
00:07:03,010 --> 00:07:06,520
>> Hvis jeg ønsket å fortelle deg at jeg hadde
3 kjæledyr, og denne verdien ble hardkodet,

131
00:07:06,520 --> 00:07:09,240
da kunne jeg bare bruke en
enkelt trykk test uttalelse.

132
00:07:09,240 --> 00:07:12,320
Men vår verdi er faktisk
er lagret i en variabel.

133
00:07:12,320 --> 00:07:15,260
Så hvordan skriver du det
Verdiene lagres i variabler?

134
00:07:15,260 --> 00:07:17,880
>> For dette tar vi
Fordelen med plassholdere.

135
00:07:17,880 --> 00:07:21,540
Si at jeg hadde allerede erklært
en initialisert heltall n.

136
00:07:21,540 --> 00:07:25,170
Deretter senere hvis jeg ønsket å skrive at
verdi, så ville jeg skrive strengen.

137
00:07:25,170 --> 00:07:30,500
Og i stedet for at verdien jeg ville bruke
plassholder for at integer--% i.

138
00:07:30,500 --> 00:07:33,800
Så etter strengen, har jeg en
komma, etterfulgt av den variable

139
00:07:33,800 --> 00:07:34,950
som jeg ønsker å skrive ut.

140
00:07:34,950 --> 00:07:38,550
Og senere, når det skrives ut,
det vil skrive ut verdien av n.

141
00:07:38,550 --> 00:07:41,570
>> Jeg kan også bruke en plassholder
for en flottør, f.eks.

142
00:07:41,570 --> 00:07:44,000
Hvis jeg ønsket å fortelle deg hvordan
mye penger jeg har i lomma,

143
00:07:44,000 --> 00:07:46,820
så jeg kunne si at jeg har% f dollar.

144
00:07:46,820 --> 00:07:51,330
Og senere når det skrives ut, deretter n vil
ta plassen til det stedet holder.

145
00:07:51,330 --> 00:07:55,530
Jeg kunne også for eksempel bruke flere
plassholdere for flere variabler.

146
00:07:55,530 --> 00:07:57,590
Så så lenge jeg liste
dem i orden, så jeg

147
00:07:57,590 --> 00:08:00,390
kan fortelle deg hvor mange
hunder og katter jeg har.

148
00:08:00,390 --> 00:08:03,710
>> Nå vet vi hvordan vi skal be
bruker for et beløp på endring,

149
00:08:03,710 --> 00:08:06,130
sikre at den inngangen
er gyldig, og da vi

150
00:08:06,130 --> 00:08:10,370
ha to mulige måter å implementere
grådige algoritmen for alltid å bruke

151
00:08:10,370 --> 00:08:12,090
den største mynten mulig.

152
00:08:12,090 --> 00:08:15,050
Fordi vi har holdt orden på
hvor mange mynter vi bruker,

153
00:08:15,050 --> 00:08:19,210
Vi kan da skrive at verdien på slutten,
fortelle brukeren hvor mange mynter de er

154
00:08:19,210 --> 00:08:20,240
kommer tilbake.

155
00:08:20,240 --> 00:08:24,240
>> Mitt navn er Amayla, og dette er CS50.

156
00:08:24,240 --> 00:08:25,915

