Hai să te lacomi. În lacomi, sarcina noastră este de a juca rolul unui casier lacom. Utilizatorul ne va spune cum o mare schimbare le datorăm, și apoi sarcina noastră este de a calcula numărul minim de monede pe care le putem folosi pentru a face acea cantitate de schimbare. 

Să începem cu un exemplu. Spun utilizatorul cere $ 0,32 înapoi. Am putea face acest lucru prin acordarea le 32 de bani, un cent fiecare. Sau aș putea folosi, de asemenea, cinci coins-- de oferindu-le trei parale, $ 0,10 fiecare, și doi bani, $ 0,02 fiecare. Dar am putea folosi chiar mai puține monede pentru a face asta? 

Întreaga tactică în greedy-- să fie un cashier-- lacom este de a utiliza cea mai mare moneda posibil. Așa că ori de câte ori avem sferturi le vom folosi. Și apoi, odată ce acestea alerga afară, vom folosi Dimes, 0,10 $ fiecare. Apoi mărunțiș, 5 cenți fiecare, și apoi în jos la bănuți, un cent fiecare. Folosind cea mai mare moneda posibil, ori de câte ori putem, să ne asigurăm că folosim număr cât mai mic de monede posibile pentru a face schimbarea. 

Deci să mergem la asta. Utilizatorul are nevoie de $ 0,32. Deci, noi ne întrebăm, putem folosi un sfert? Ei bine, da, putem. Așa că acum noi le cunoaștem doar $ 0,07 și am folosit o monedă. 

Putem folosi un alt sfert? Ei bine, nu. $ 0,07 este de mai puțin de $ 0,25, asa ca vom proceda la următoarea cea mai mare monedă disponibilă. Dimes sunt $ 0,10, și din nou, nu putem folosi Dimes. Pentru că Dimes sunt în valoare de $ 0,10, care este mai mult decât suma datorată schimbării. 

Mergem la nickels. Și, da, într-adevăr, $ 0,05 până este mai mică $ 0.10-- astfel încât să putem folosi un nichel. Așa că acum îi datorăm utilizatorului doar $ 0.02, și ne-am folosit până acum două monede. Nu putem folosi un alt nichel. Așa că, atunci vom trece la ultima monedă la dispoziția noastră, care sunt mărunțiș. 

Si putem folosi ban? Ei bine, yes-- și am ajunge cu ajutorul a două mărunțiș pentru un total de patru monede. 

După ce te terminat, Programul va arata acest lucru. Odată ce utilizatorul execută program de lacomi, ei vor se cere să dea suma de schimbare în dolari că acestea sunt datorate. Și apoi programul se va ieșire suma minimă de monede că casierul lacomi ar folosi pentru a face această sumă de schimbare. 

Așa că acum să rupă această jos în subactivități noastre. Mai întâi ne vom solicita nostru utilizator pentru o sumă de schimbare. Și, ca și cu orice date introduse de utilizator, dorim să asigurați-vă că validați acea intrare și să se asigure că putem folosi asta de intrare pentru restul programului nostru. Apoi vom mereu utilizați cel mai mare punct posibil și să păstreze evidența monedelor utilizate. Și, în sfârșit, imprimați finală numărul de monede pe care le-am utilizat. 

Așa că hai să vorbim despre fapt care ia determinat. Suma trebuie să facă cenți, iar acest lucru este în dolari. Și așa de dolari, vom pentru a utiliza tipul de variabilă float. Acum, ori de câte ori vă întreb un utilizator pentru intrare, doriți să vă asigurați că acesta este valid. Și, așa că aici ne place să profite de do-buclă în timp ce construcția. 

O bucla do-in timp ce va executa corpul buclei cel puțin o dată. Deci, acest lucru vine la îndemână. Noi știm că avem nevoie pentru a solicita utilizator cel puțin o dată pentru un plutitor. Acum, în cazul în care float este valid. Grozav. Noi mergem mai departe. Dar, în cazul în care nu, bucla se va asigura că vom obține un plutitor propriu-zis prin repetarea în mod continuu, până când utilizatorul ne dă o valoare validă. 

Acum, pentru do-while stare de buclă, avem nevoie să ia în considerare ceea ce înseamnă pentru a avea un float nevalid. Deci, pentru contextul această problemă, probabil aceasta are sens doar pentru a accepta valori pozitive. 

Așa că se deplasează on-- le-am obținut un Valoarea în dolari de către utilizator. Dar, avem de a face cu monede, care sunt în întregime în cenți. $ 1 corespunde cu 100 de cenți. Deci, un lucru bun de făcut este să converti aceste valori în cenți. 

Acum, când conversia de la un plutitor la un număr întreg, astfel încât de dolari la cenți, vrem să ne asigurăm că suntem atenți despre floating-point imprecizie. Deci asta înseamnă that-- spune dolar meu value-- float meu value-- era chiar 2 $, încă pot fi unele numere fara stapan acolo. Așa că vrem să ne asigurăm că nu numai ne multiplica cu 100 pentru a obține cenți, dar, de asemenea, noi l întregesc. 

Așa că acum avem suma de schimbare datorate utilizatorului. L-am obținut inițial în dolari, iar acum ne-am convertit la cenți. Deci, acum putem continua cu inima algoritmul greedy, care este intotdeauna folosind cea mai mare moneda posibil. In timp ce noi facem asta, este esențial ca și noi ține evidența cât de multe monede sunt va fi returnat utilizatorului precum și restul schimba datorate utilizatorului. 

Programul va arata ceva de genul. După ce obțineți suma de dolari și conversia la cenți, atunci veți introduce o buclă. În timp ce sferturi poate fi used--, care este de a spune în timp ce cantitatea de schimbare datorată utilizatorul este mai mare sau egal cu $ 0,25, vei folosi un sfert. 

Acum, ce utilizează un sfert atrage după sine? Ei bine, va crește Unu moneda conta pentru a fi returnat utilizatorului. Și în al doilea veți reduce curentul Suma de schimbare datorată înapoi la utilizator de $ de 0,25. 

După repetarea că, până sferturi nu mai pot fi folosite, trece la următoarea cea mai mare coin-- în acest caz, Dimes, $ 0.10. Deci tu vei intra în această buclă, până nu mai puteți utiliza Dimes. Apoi trece la următoarea cea mai mare monedă, bănuți. După nickels nu mai pot fi folosite, utilizați suma rămasă în bani. Și, în sfârșit, imprimați numărul de monede utilizate. 

O altă modalitate pe care poți abordare a problemei lacomi este de a utiliza abordarea modulo. Modulo este un operator care returnează restul a diviziunii între două numere. Spune că am avut 50 Mod 5. Ei bine, 5 este un factor de 50, astfel încât restul va fi 0. 50 mod 10-- bine, 10 este, de asemenea, un factor de 50, astfel încât restul este, de asemenea, 0. 50 mod 50-- bine, orice număr în sine Mod nu va avea nici un rest. 

Cum rămâne cu 50 Mod 49? Ei bine, 49 merge doar în 50 o dată. Astfel încât restul va fi 1. 53 mod 50 se va da un rest de 3. 

Deci, cum putem folosi modulo și, probabil, unele diviziuni să pună în aplicare algoritmul greedy? Ei bine, încă mai doresc să rămână adevărat la inima lacomi algorithm-- că se utilizează cea mai mare moneda posibil. 

Așa că hai să ne întrebăm dacă putem folosi orice sferturi pentru a reveni $ 0,32 pentru utilizator. Ei bine, 32 mod 25 da ne un rest de $ 0,07. Deci asta ne spune că putem cu siguranță utilizați un sfert cu $ 0,07 rămasă. 

Putem folosi atunci orice Dimes? Ei bine, pentru că Nu-- $ 0,07 Mod $ 0,10 ne oferă un rest de 7. 10 nu intră în 7 deloc. 

Apoi putem folosi nickels? Ei bine, $ 0,07 Mod de 5 cenți dă-ne două rămase. Și, în sfârșit, putem folosi orice mărunțiș? 2 mod 1 ne ofera 0, care este în cele din urmă ceea ce dorim pentru că atunci înseamnă că ne-am întors utilizatorului toate schimbările datorate. 

Deci, acum aveți două moduri posibile de punerea în aplicare a algorithm-- lacomi una cu bucle și una cu Amestec de modulo și de divizare. Deci, în final, pur și simplu trebuie să ne imprima numărul final de monede. 

Dacă aș fi vrut să-ți că am spus 3 animale de companie și această valoare a fost hardcoded, atunci am putea folosi doar un simplă declarație de test de imprimare. Dar valoarea noastră este de fapt stocate într-o variabilă. Deci, cum imprimați valorile stocate în variabile? 

Pentru aceasta vom lua avantajul de Substituenți. Spune că a declarat deja un număr întreg n inițializată. Apoi, mai târziu, dacă am vrut să imprime acel valoare, atunci aș scrie șirul. Și în loc de această valoare aș folosi un substituent pentru care integer--% i. Apoi, după șirul, am o virgulă, urmată de variabila pe care vreau să le imprimați. Iar mai târziu, când se imprimă, aceasta va imprima valoarea lui n. 

Aș putea folosi, de asemenea, un înlocuitor pentru un float, de exemplu. Dacă aș fi vrut să-ți spun cum mulți bani am în buzunar, atunci aș putea spune că am% f dolari. Iar mai târziu, când se imprimă, atunci n va să ia locul acelui titular loc. Aș putea, de asemenea, de exemplu, utilizați mai multe Substituenți pentru mai multe variabile. Așa că, atâta timp cât am lista le, în ordine, atunci eu vă pot spune cât de multe câinii și pisicile am. 

Acum știm cum să prompt utilizator pentru o sumă de schimbare, să se asigure că acea intrare este valabil și atunci noi au două moduri posibile de punere în aplicare algoritmul greedy de a folosi întotdeauna cea mai mare moneda posibilă. Pentru că ne-am ținut evidența cât de multe monede noi folosim, putem imprima apoi această valoare la sfârșitul anului, spune utilizatorul cât de multe monede sunt obtinerea înapoi. 

Numele meu este Amayla, iar acest lucru este CS50. 