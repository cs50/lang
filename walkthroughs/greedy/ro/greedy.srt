1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Hai să te lacomi.

3
00:00:02,900 --> 00:00:06,810
În lacomi, sarcina noastră este de a juca
rolul unui casier lacom.

4
00:00:06,810 --> 00:00:09,750
Utilizatorul ne va spune cum
o mare schimbare le datorăm,

5
00:00:09,750 --> 00:00:13,520
și apoi sarcina noastră este de a calcula
numărul minim de monede

6
00:00:13,520 --> 00:00:17,240
pe care le putem folosi pentru a face
acea cantitate de schimbare.

7
00:00:17,240 --> 00:00:19,560
>> Să începem cu un exemplu.

8
00:00:19,560 --> 00:00:23,170
Spun utilizatorul cere $ 0,32 înapoi.

9
00:00:23,170 --> 00:00:28,960
Am putea face acest lucru prin acordarea
le 32 de bani, un cent fiecare.

10
00:00:28,960 --> 00:00:35,180
Sau aș putea folosi, de asemenea, cinci coins-- de
oferindu-le trei parale, $ 0,10 fiecare,

11
00:00:35,180 --> 00:00:38,060
și doi bani, $ 0,02 fiecare.

12
00:00:38,060 --> 00:00:42,580
Dar am putea folosi chiar
mai puține monede pentru a face asta?

13
00:00:42,580 --> 00:00:45,100
>> Întreaga tactică în greedy--
să fie un cashier-- lacom

14
00:00:45,100 --> 00:00:47,600
este de a utiliza cea mai mare moneda posibil.

15
00:00:47,600 --> 00:00:50,670
Așa că ori de câte ori avem
sferturi le vom folosi.

16
00:00:50,670 --> 00:00:54,100
Și apoi, odată ce acestea alerga afară,
vom folosi Dimes, 0,10 $ fiecare.

17
00:00:54,100 --> 00:00:58,840
Apoi mărunțiș, 5 cenți fiecare, și
apoi în jos la bănuți, un cent fiecare.

18
00:00:58,840 --> 00:01:01,792
Folosind cea mai mare moneda
posibil, ori de câte ori putem,

19
00:01:01,792 --> 00:01:07,350
să ne asigurăm că folosim număr cât mai mic
de monede posibile pentru a face schimbarea.

20
00:01:07,350 --> 00:01:09,180
>> Deci să mergem la asta.

21
00:01:09,180 --> 00:01:11,660
Utilizatorul are nevoie de $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Deci, noi ne întrebăm,
putem folosi un sfert?

23
00:01:14,200 --> 00:01:15,560
Ei bine, da, putem.

24
00:01:15,560 --> 00:01:19,720
Așa că acum noi le cunoaștem doar
$ 0,07 și am folosit o monedă.

25
00:01:19,720 --> 00:01:20,970
>> Putem folosi un alt sfert?

26
00:01:20,970 --> 00:01:21,890
Ei bine, nu.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 este de mai puțin de $ 0,25, asa ca vom proceda
la următoarea cea mai mare monedă disponibilă.

28
00:01:27,570 --> 00:01:30,690
Dimes sunt $ 0,10, și
din nou, nu putem folosi Dimes.

29
00:01:30,690 --> 00:01:35,480
Pentru că Dimes sunt în valoare de $ 0,10, care
este mai mult decât suma datorată schimbării.

30
00:01:35,480 --> 00:01:36,790
>> Mergem la nickels.

31
00:01:36,790 --> 00:01:40,890
Și, da, într-adevăr, $ 0,05 până este mai mică
$ 0.10-- astfel încât să putem folosi un nichel.

32
00:01:40,890 --> 00:01:46,104
Așa că acum îi datorăm utilizatorului doar $ 0.02,
și ne-am folosit până acum două monede.

33
00:01:46,104 --> 00:01:47,270
Nu putem folosi un alt nichel.

34
00:01:47,270 --> 00:01:51,140
Așa că, atunci vom trece la ultima monedă la
dispoziția noastră, care sunt mărunțiș.

35
00:01:51,140 --> 00:01:52,270
>> Si putem folosi ban?

36
00:01:52,270 --> 00:01:59,060
Ei bine, yes-- și am ajunge cu ajutorul a două
mărunțiș pentru un total de patru monede.

37
00:01:59,060 --> 00:02:01,430
>> După ce te terminat,
Programul va arata acest lucru.

38
00:02:01,430 --> 00:02:03,710
Odată ce utilizatorul execută
program de lacomi, ei vor

39
00:02:03,710 --> 00:02:07,270
se cere să dea suma de
schimbare în dolari că acestea sunt datorate.

40
00:02:07,270 --> 00:02:11,140
Și apoi programul se va ieșire
suma minimă de monede

41
00:02:11,140 --> 00:02:14,740
că casierul lacomi ar folosi
pentru a face această sumă de schimbare.

42
00:02:14,740 --> 00:02:18,160
>> Așa că acum să rupă această
jos în subactivități noastre.

43
00:02:18,160 --> 00:02:21,410
Mai întâi ne vom solicita nostru
utilizator pentru o sumă de schimbare.

44
00:02:21,410 --> 00:02:25,630
Și, ca și cu orice date introduse de utilizator, dorim să
asigurați-vă că validați acea intrare

45
00:02:25,630 --> 00:02:29,360
și să se asigure că putem folosi asta
de intrare pentru restul programului nostru.

46
00:02:29,360 --> 00:02:32,480
Apoi vom mereu
utilizați cel mai mare punct posibil

47
00:02:32,480 --> 00:02:35,240
și să păstreze evidența monedelor utilizate.

48
00:02:35,240 --> 00:02:39,080
Și, în sfârșit, imprimați finală
numărul de monede pe care le-am utilizat.

49
00:02:39,080 --> 00:02:40,970
>> Așa că hai să vorbim despre fapt care ia determinat.

50
00:02:40,970 --> 00:02:43,550
Suma trebuie să facă cenți,
iar acest lucru este în dolari.

51
00:02:43,550 --> 00:02:48,440
Și așa de dolari, vom
pentru a utiliza tipul de variabilă float.

52
00:02:48,440 --> 00:02:52,390
Acum, ori de câte ori vă întreb un utilizator pentru intrare,
doriți să vă asigurați că acesta este valid.

53
00:02:52,390 --> 00:02:56,640
Și, așa că aici ne place să profite
de do-buclă în timp ce construcția.

54
00:02:56,640 --> 00:03:00,320
>> O bucla do-in timp ce va executa
corpul buclei cel puțin o dată.

55
00:03:00,320 --> 00:03:01,650
Deci, acest lucru vine la îndemână.

56
00:03:01,650 --> 00:03:05,510
Noi știm că avem nevoie pentru a solicita
utilizator cel puțin o dată pentru un plutitor.

57
00:03:05,510 --> 00:03:07,100
Acum, în cazul în care float este valid.

58
00:03:07,100 --> 00:03:07,710
Grozav.

59
00:03:07,710 --> 00:03:08,460
Noi mergem mai departe.

60
00:03:08,460 --> 00:03:11,910
Dar, în cazul în care nu, bucla se va asigura
că vom obține un plutitor propriu-zis

61
00:03:11,910 --> 00:03:16,810
prin repetarea în mod continuu, până când
utilizatorul ne dă o valoare validă.

62
00:03:16,810 --> 00:03:18,760
>> Acum, pentru do-while
stare de buclă, avem nevoie

63
00:03:18,760 --> 00:03:22,000
să ia în considerare ceea ce înseamnă
pentru a avea un float nevalid.

64
00:03:22,000 --> 00:03:24,220
Deci, pentru contextul
această problemă, probabil

65
00:03:24,220 --> 00:03:27,450
aceasta are sens doar pentru a
accepta valori pozitive.

66
00:03:27,450 --> 00:03:32,010
>> Așa că se deplasează on-- le-am obținut un
Valoarea în dolari de către utilizator.

67
00:03:32,010 --> 00:03:35,380
Dar, avem de a face cu monede,
care sunt în întregime în cenți.

68
00:03:35,380 --> 00:03:38,660
$ 1 corespunde cu 100 de cenți.

69
00:03:38,660 --> 00:03:43,670
Deci, un lucru bun de făcut este să
converti aceste valori în cenți.

70
00:03:43,670 --> 00:03:48,380
>> Acum, când conversia de la un plutitor
la un număr întreg, astfel încât de dolari la cenți,

71
00:03:48,380 --> 00:03:52,230
vrem să ne asigurăm că suntem atenți
despre floating-point imprecizie.

72
00:03:52,230 --> 00:03:55,260
Deci asta înseamnă that-- spune
dolar meu value-- float meu

73
00:03:55,260 --> 00:04:00,260
value-- era chiar 2 $, încă
pot fi unele numere fara stapan acolo.

74
00:04:00,260 --> 00:04:04,590
Așa că vrem să ne asigurăm că nu numai
ne multiplica cu 100 pentru a obține cenți,

75
00:04:04,590 --> 00:04:06,480
dar, de asemenea, noi l întregesc.

76
00:04:06,480 --> 00:04:09,210
>> Așa că acum avem suma
de schimbare datorate utilizatorului.

77
00:04:09,210 --> 00:04:13,430
L-am obținut inițial în dolari,
iar acum ne-am convertit la cenți.

78
00:04:13,430 --> 00:04:17,029
Deci, acum putem continua cu inima
algoritmul greedy, care este intotdeauna

79
00:04:17,029 --> 00:04:19,220
folosind cea mai mare moneda posibil.

80
00:04:19,220 --> 00:04:21,930
In timp ce noi facem asta,
este esențial ca și noi

81
00:04:21,930 --> 00:04:25,360
ține evidența cât de multe monede sunt
va fi returnat utilizatorului

82
00:04:25,360 --> 00:04:28,630
precum și restul
schimba datorate utilizatorului.

83
00:04:28,630 --> 00:04:31,130
>> Programul va arata
ceva de genul.

84
00:04:31,130 --> 00:04:34,190
După ce obțineți suma de
dolari și conversia la cenți,

85
00:04:34,190 --> 00:04:35,790
atunci veți introduce o buclă.

86
00:04:35,790 --> 00:04:38,400
În timp ce sferturi poate fi
used--, care este de a spune

87
00:04:38,400 --> 00:04:43,660
în timp ce cantitatea de schimbare datorată
utilizatorul este mai mare sau egal cu $ 0,25,

88
00:04:43,660 --> 00:04:45,040
vei folosi un sfert.

89
00:04:45,040 --> 00:04:47,000
>> Acum, ce utilizează un sfert atrage după sine?

90
00:04:47,000 --> 00:04:51,280
Ei bine, va crește Unu moneda
conta pentru a fi returnat utilizatorului.

91
00:04:51,280 --> 00:04:55,890
Și în al doilea veți reduce curentul
Suma de schimbare datorată înapoi la utilizator

92
00:04:55,890 --> 00:04:57,520
de $ de 0,25.

93
00:04:57,520 --> 00:05:00,680
>> După repetarea că, până
sferturi nu mai pot fi folosite,

94
00:05:00,680 --> 00:05:04,630
trece la următoarea cea mai mare
coin-- în acest caz, Dimes, $ 0.10.

95
00:05:04,630 --> 00:05:07,750
Deci tu vei intra în această buclă, până
nu mai puteți utiliza Dimes.

96
00:05:07,750 --> 00:05:10,720
Apoi trece la următoarea
cea mai mare monedă, bănuți.

97
00:05:10,720 --> 00:05:14,810
După nickels nu mai pot fi folosite,
utilizați suma rămasă în bani.

98
00:05:14,810 --> 00:05:17,800
Și, în sfârșit, imprimați
numărul de monede utilizate.

99
00:05:17,800 --> 00:05:20,350
>> O altă modalitate pe care poți
abordare a problemei lacomi

100
00:05:20,350 --> 00:05:22,950
este de a utiliza abordarea modulo.

101
00:05:22,950 --> 00:05:25,690
Modulo este un operator
care returnează restul

102
00:05:25,690 --> 00:05:27,680
a diviziunii între două numere.

103
00:05:27,680 --> 00:05:30,270
Spune că am avut 50 Mod 5.

104
00:05:30,270 --> 00:05:34,070
Ei bine, 5 este un factor de 50,
astfel încât restul va fi 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- bine, 10 este, de asemenea, un factor de
50, astfel încât restul este, de asemenea, 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- bine, orice număr în sine Mod
nu va avea nici un rest.

107
00:05:43,660 --> 00:05:45,510
>> Cum rămâne cu 50 Mod 49?

108
00:05:45,510 --> 00:05:47,910
Ei bine, 49 merge doar în 50 o dată.

109
00:05:47,910 --> 00:05:50,290
Astfel încât restul va fi 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 se va
da un rest de 3.

111
00:05:55,180 --> 00:05:59,120
>> Deci, cum putem folosi modulo
și, probabil, unele diviziuni

112
00:05:59,120 --> 00:06:01,690
să pună în aplicare algoritmul greedy?

113
00:06:01,690 --> 00:06:05,550
Ei bine, încă mai doresc să rămână adevărat la
inima lacomi algorithm-- că

114
00:06:05,550 --> 00:06:07,910
se utilizează cea mai mare moneda posibil.

115
00:06:07,910 --> 00:06:14,570
>> Așa că hai să ne întrebăm dacă putem folosi orice
sferturi pentru a reveni $ 0,32 pentru utilizator.

116
00:06:14,570 --> 00:06:20,070
Ei bine, 32 mod 25 da
ne un rest de $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Deci asta ne spune că putem cu siguranță
utilizați un sfert cu $ 0,07 rămasă.

118
00:06:24,500 --> 00:06:26,180
>> Putem folosi atunci orice Dimes?

119
00:06:26,180 --> 00:06:32,740
Ei bine, pentru că Nu-- $ 0,07 Mod
$ 0,10 ne oferă un rest de 7.

120
00:06:32,740 --> 00:06:34,960
10 nu intră în 7 deloc.

121
00:06:34,960 --> 00:06:36,390
>> Apoi putem folosi nickels?

122
00:06:36,390 --> 00:06:40,490
Ei bine, $ 0,07 Mod de 5 cenți
dă-ne două rămase.

123
00:06:40,490 --> 00:06:42,930
Și, în sfârșit, putem folosi orice mărunțiș?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 ne ofera 0,
care este în cele din urmă ceea ce

125
00:06:45,930 --> 00:06:48,160
dorim pentru că atunci
înseamnă că ne-am întors

126
00:06:48,160 --> 00:06:50,160
utilizatorului toate schimbările datorate.

127
00:06:50,160 --> 00:06:54,320
>> Deci, acum aveți două moduri posibile de
punerea în aplicare a algorithm-- lacomi

128
00:06:54,320 --> 00:06:59,230
una cu bucle și una cu
Amestec de modulo și de divizare.

129
00:06:59,230 --> 00:07:03,010
Deci, în final, pur și simplu trebuie să ne
imprima numărul final de monede.

130
00:07:03,010 --> 00:07:06,520
>> Dacă aș fi vrut să-ți că am spus
3 animale de companie și această valoare a fost hardcoded,

131
00:07:06,520 --> 00:07:09,240
atunci am putea folosi doar un
simplă declarație de test de imprimare.

132
00:07:09,240 --> 00:07:12,320
Dar valoarea noastră este de fapt
stocate într-o variabilă.

133
00:07:12,320 --> 00:07:15,260
Deci, cum imprimați
valorile stocate în variabile?

134
00:07:15,260 --> 00:07:17,880
>> Pentru aceasta vom lua
avantajul de Substituenți.

135
00:07:17,880 --> 00:07:21,540
Spune că a declarat deja
un număr întreg n inițializată.

136
00:07:21,540 --> 00:07:25,170
Apoi, mai târziu, dacă am vrut să imprime acel
valoare, atunci aș scrie șirul.

137
00:07:25,170 --> 00:07:30,500
Și în loc de această valoare aș folosi
un substituent pentru care integer--% i.

138
00:07:30,500 --> 00:07:33,800
Apoi, după șirul, am o
virgulă, urmată de variabila

139
00:07:33,800 --> 00:07:34,950
pe care vreau să le imprimați.

140
00:07:34,950 --> 00:07:38,550
Iar mai târziu, când se imprimă,
aceasta va imprima valoarea lui n.

141
00:07:38,550 --> 00:07:41,570
>> Aș putea folosi, de asemenea, un înlocuitor
pentru un float, de exemplu.

142
00:07:41,570 --> 00:07:44,000
Dacă aș fi vrut să-ți spun cum
mulți bani am în buzunar,

143
00:07:44,000 --> 00:07:46,820
atunci aș putea spune că am% f dolari.

144
00:07:46,820 --> 00:07:51,330
Iar mai târziu, când se imprimă, atunci n va
să ia locul acelui titular loc.

145
00:07:51,330 --> 00:07:55,530
Aș putea, de asemenea, de exemplu, utilizați mai multe
Substituenți pentru mai multe variabile.

146
00:07:55,530 --> 00:07:57,590
Așa că, atâta timp cât am lista
le, în ordine, atunci eu

147
00:07:57,590 --> 00:08:00,390
vă pot spune cât de multe
câinii și pisicile am.

148
00:08:00,390 --> 00:08:03,710
>> Acum știm cum să prompt
utilizator pentru o sumă de schimbare,

149
00:08:03,710 --> 00:08:06,130
să se asigure că acea intrare
este valabil și atunci noi

150
00:08:06,130 --> 00:08:10,370
au două moduri posibile de punere în aplicare
algoritmul greedy de a folosi întotdeauna

151
00:08:10,370 --> 00:08:12,090
cea mai mare moneda posibilă.

152
00:08:12,090 --> 00:08:15,050
Pentru că ne-am ținut evidența
cât de multe monede noi folosim,

153
00:08:15,050 --> 00:08:19,210
putem imprima apoi această valoare la sfârșitul anului,
spune utilizatorul cât de multe monede sunt

154
00:08:19,210 --> 00:08:20,240
obtinerea înapoi.

155
00:08:20,240 --> 00:08:24,240
>> Numele meu este Amayla, iar acest lucru este CS50.

156
00:08:24,240 --> 00:08:25,915

