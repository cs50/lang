Imos estar ganancioso. En ganancioso, o noso traballo é para xogar o papel dun cadro ganancioso. O usuario vai dicir como moita cambio que lles debemos, e, a continuación, o noso traballo é calcular o número mínimo de moedas que podemos usar para facer esa cantidade de cambio. 

Imos comezar con un exemplo. Digamos que o usuario necesita de US $ 0,32 de volta. Poderiamos facelo, dando -lhes 32 centavos, un centavo cada. Ou tamén podería usar cinco coins-- por dándolles tres moedas de dez centavos, $ 0,10 cada, e dous céntimos, $ 0,02 cada. Pero poderiamos usar, mesmo menos moedas para facelo? 

Toda a táctica en greedy-- para ser un cashier-- ganancioso é a utilización do maior posible moeda. Así, sempre que temos trimestres imos usalos. E, a continuación, xa que aqueles executar para fóra, imos usar moedas de dez centavos, $ 0,10 cada. Entón recreo, 5 centavos cada, e a continuación, para abaixo para moedas de un centavo, un centavo cada. Ao usar a maior moeda posible sempre que sexa posible, temos o coidado de usar o menor número de moedas posible facer o cambio. 

Entón, imos andar neste medio. O usuario ten de US $ 0,32. Entón preguntámonos: podemos usar un cuarto? Ben, si, podemos. Entón, agora só coñece-los $ 0,07, e usan unha moeda. 

podemos utilizar outro cuarto? Ben, non. $ 0,07 é menos de US $ 0,25, para que proceda á seguinte grande moeda dispoñible. Dimes é de US $ 0,10, e de novo, non pode usar moedas de dez centavos. Porque moedas pagan US $ 0,10, o que é máis que a cantidade de cambio debido. 

Imos para recreo. E, si, realmente, $ 0,05 é menor que $ 0.10-- polo que podemos utilizar un níquel. Entón, agora só debe o usuario $ 0,02, e temos ata agora utilizadas dúas moedas. Non podemos usar outro níquel. Polo tanto, despois, pasar á última moeda no nosa disposición, que son as moedas de un centavo. 

E podemos utilizar diñeiro? Ben, sim-- e acabamos usando dous tostões para un total de catro moedas. 

Cando estea concluído, o programa coma este. Unha vez que o usuario executa o programa ganancioso, eles van ser solicitada a dar a cantidade de cambio de dólares que son debidos. E entón a súa saída do programa vontade a cantidade mínima de moedas que o cadro ganancioso usaría para facer esa cantidade de cambio. 

Entón agora imos romper ese abaixo nas nosas subtarefas. Primeiro imos pedir a nosa de usuario para unha cantidade de cambio. E, como con calquera entrada do usuario, queremos asegurarse de que validar as entradas e garantir que podemos utilizar este entrada para o resto do noso programa. Entón nós imos sempre usar o maior punto posible e manter o control das moedas utilizadas. E, finalmente, imprimir a finais número de moedas que usan. 

Entón, imos falar sobre o que levou. A cantidade que facer centavos, e este é en dólares. E así por dólares, imos para usar o tipo de variable float. Agora, sempre que preguntar a un usuario para a entrada, quere estar seguro de que é válido. E aquí nos gusta de aproveitar da construción de loop do-while. 

Bucle do-while executará corpo do lazo, polo menos, unha vez máis. Polo tanto, este vén a cadra. Sabemos que temos que solicitar ao usuario, polo menos unha vez por un float. Agora, se iso float é válido. Iso é fabuloso. Nós seguir adiante. Pero, se non, o ciclo pode asegurar que temos unha boia propio repetindo continuamente ata o usuario dános un valor válido. 

Agora, para o do-while condición de loop, cómpre para considerar o que iso significa ter un flotador válido. Así, para o contexto este problema, probablemente ten sentido só para aceptar valores positivos. 

Entón, movendo on-- obtivemos un valor en dólares do usuario. Pero estamos lidando con moedas, que son enteiramente en centavos. $ 1 é equivalente a 100 centavos. Entón, unha boa cousa que facer é converter eses valores en centavos. 

Agora, cando a conversión dun flotador para un número enteiro, de modo dólares para centavos, queremos estar seguro de que estamos coidado preto de punto flotante imprecisión. Entón isto significa que isso-- dicir meu dólar value-- meu flotador value-- houbo un ata US $ 2, aínda Pode haber algúns números vagos alí. Entón, nós queremos estar seguro de que non só podemos multiplicar por 100 para os centavos, pero tamén rematar o día. 

Polo tanto, agora temos a cantidade do cambio en débeda co usuario. Nós orixinalmente obtivo en dólares, e agora temos convertido para centavos. Entón agora podemos proceder a corazón de o algoritmo ganancioso, que sempre utilizando a moeda maior posible. Mentres nós estamos facendo isto, é esencial que nós tamén manter o control de cantas moedas son será devolto ao usuario así como os restantes cambiar debido ao usuario. 

O programa vai mirar algo coma isto. Despois de obter a cantidade de dólares e convertelo en centavos, a continuación, entrará en un loop. Mentres pode ser barrios used-- que sexa mentres que a cantidade de cambio debido ao usuario é maior que ou igual a 0,25 $, vai usar un cuarto. 

Agora, o que fai a usar un cuarto implica? Ben, um-- vai aumentar a moeda Cantidade de ser devolto ao usuario. E en segundo lugar vai diminuír a corrente cantidade de cambio debido ao seu usuario en US $ 0,25. 

Despois de repetir que ata trimestres non pode ser usado, ir á seguinte grande coin-- neste caso, moedas de dez centavos, $ 0.10. Entón vai entrar nese ciclo ata non pode máis usar moedas de dez centavos. A continuación, avance á seguinte maior moeda, recreo. Tras recreo non pode ser usado, usar o importe restante en moedas de un centavo. E, finalmente, imprimir o número de moedas usadas. 

Outra forma que pode abordar o problema ganancioso consiste en utilizar o enfoque de módulo. Modulo é un operador que devolve o resto da división entre dous números. Digamos que eu tiña 50 mod 5. Ben, 5 é un factor de 50, de xeito que o resto será 0. 50 mod 10-- ben, 10 tamén é un factor 50, de xeito que o resto é tamén 0. 50 mod 50-- ben, calquera número en si mod non terá ningún resto. 

Que uns 50 mod 49? Ben, 49 só vai para 50 xa. Así, o resto será 1. 53 mod 50 vai darlle un resto de 3. 

Entón, como podemos utilizar modulo e quizais algunha división para aplicar o noso algoritmo lambón? Ben, aínda queremos permanecer fiel á corazón do ganancioso algorithm-- que é usar a maior moeda posible. 

Entón, imos preguntar se podemos utilizar calquera trimestres para voltar $ 0,32 para o usuario. Ben, 32 mod 25 dá -Nos un remanente de US $ 0,07. Así que nos di que podemos definitivamente usar un trimestre con US $ 0,07 restantes. 

Podemos, entón, usar calquera moedas de dez centavos? Ben, Não-- porque $ 0,07 mod $ 0,10 dános un resto de 7. 10 non entrará en 7 de todo. 

Entón podemos utilizar recreo? Ben $ 0,07 mod 5 centavos ofrécenos dous restantes. E, finalmente, podemos usar calquera tostões? 2 mod 1 dános 0, que é ao final o que queremos, porque, entón, que significa que temos devolto ao usuario todas as variacións debido. 

Entón agora tes dous xeitos posibles de implementación do algorithm-- ganancioso un con lacadas e unha cun combinación de módulo e división. Entón, finalmente, só necesitamos imprimir o número final de moedas. 

Se eu quería che dicir que eu tiña 3 animais e este valor codificado, entón eu podería usar só un declaración proba de impresión simple. Pero o seu valor é, en realidade, almacenado nunha variable. Así como imprimir o Os valores almacenados variables? 

Para iso tomamos vantaxe de espazos reservados. Digamos que eu xa declarara n un enteiro inicializar. Despois, máis tarde, se quixese imprimir esta valor, entón eu ía escribir a secuencia. E no canto de ese valor eu usaría un espazo reservado para que% integer-- i. Logo tras a corda, eu teño un coma, seguido pola variable que desexa imprimir. E máis tarde, cando sexa impreso, vai imprimir o valor de n. 

Eu tamén podería usar un espazo reservado para un flotador, por exemplo. Se eu quixese dicir-lle como canto diñeiro eu teño no meu peto, entón eu podería dicir que teño dólares% f. E máis tarde, cando imprime, entón n vai tomar o lugar de que o titular sitio. Podería tamén, por exemplo, usar varios espazos reservados para varias variables. Entón, mentres eu lista Los en orde, entón eu pode dicirlle cantas cans e gatos que teño. 

Agora sabemos como para solicitar ao de usuario para unha cantidade de cambio, asegurar que esa entrada é válida, e entón nós ten dúas posibles formas de implementación o algoritmo lambón sempre de usar a maior moeda posible. Porque mantivemos o control de cantas moedas que estamos usando, que pode entón imprimir ese valor ao final, informando ao usuario cantas moedas son quedando atrás. 

O meu nome é o Amayla, e este é CS50. 