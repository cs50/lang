1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Imos estar ganancioso.

3
00:00:02,900 --> 00:00:06,810
En ganancioso, o noso traballo é para xogar
o papel dun cadro ganancioso.

4
00:00:06,810 --> 00:00:09,750
O usuario vai dicir como
moita cambio que lles debemos,

5
00:00:09,750 --> 00:00:13,520
e, a continuación, o noso traballo é calcular
o número mínimo de moedas

6
00:00:13,520 --> 00:00:17,240
que podemos usar para facer
esa cantidade de cambio.

7
00:00:17,240 --> 00:00:19,560
>> Imos comezar con un exemplo.

8
00:00:19,560 --> 00:00:23,170
Digamos que o usuario necesita de US $ 0,32 de volta.

9
00:00:23,170 --> 00:00:28,960
Poderiamos facelo, dando
-lhes 32 centavos, un centavo cada.

10
00:00:28,960 --> 00:00:35,180
Ou tamén podería usar cinco coins-- por
dándolles tres moedas de dez centavos, $ 0,10 cada,

11
00:00:35,180 --> 00:00:38,060
e dous céntimos, $ 0,02 cada.

12
00:00:38,060 --> 00:00:42,580
Pero poderiamos usar, mesmo
menos moedas para facelo?

13
00:00:42,580 --> 00:00:45,100
>> Toda a táctica en greedy--
para ser un cashier-- ganancioso

14
00:00:45,100 --> 00:00:47,600
é a utilización do maior posible moeda.

15
00:00:47,600 --> 00:00:50,670
Así, sempre que temos
trimestres imos usalos.

16
00:00:50,670 --> 00:00:54,100
E, a continuación, xa que aqueles executar para fóra,
imos usar moedas de dez centavos, $ 0,10 cada.

17
00:00:54,100 --> 00:00:58,840
Entón recreo, 5 centavos cada, e
a continuación, para abaixo para moedas de un centavo, un centavo cada.

18
00:00:58,840 --> 00:01:01,792
Ao usar a maior moeda
posible sempre que sexa posible,

19
00:01:01,792 --> 00:01:07,350
temos o coidado de usar o menor número
de moedas posible facer o cambio.

20
00:01:07,350 --> 00:01:09,180
>> Entón, imos andar neste medio.

21
00:01:09,180 --> 00:01:11,660
O usuario ten de US $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Entón preguntámonos:
podemos usar un cuarto?

23
00:01:14,200 --> 00:01:15,560
Ben, si, podemos.

24
00:01:15,560 --> 00:01:19,720
Entón, agora só coñece-los
$ 0,07, e usan unha moeda.

25
00:01:19,720 --> 00:01:20,970
>> podemos utilizar outro cuarto?

26
00:01:20,970 --> 00:01:21,890
Ben, non.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 é menos de US $ 0,25, para que proceda
á seguinte grande moeda dispoñible.

28
00:01:27,570 --> 00:01:30,690
Dimes é de US $ 0,10, e
de novo, non pode usar moedas de dez centavos.

29
00:01:30,690 --> 00:01:35,480
Porque moedas pagan US $ 0,10, o que
é máis que a cantidade de cambio debido.

30
00:01:35,480 --> 00:01:36,790
>> Imos para recreo.

31
00:01:36,790 --> 00:01:40,890
E, si, realmente, $ 0,05 é menor que
$ 0.10-- polo que podemos utilizar un níquel.

32
00:01:40,890 --> 00:01:46,104
Entón, agora só debe o usuario $ 0,02,
e temos ata agora utilizadas dúas moedas.

33
00:01:46,104 --> 00:01:47,270
Non podemos usar outro níquel.

34
00:01:47,270 --> 00:01:51,140
Polo tanto, despois, pasar á última moeda no
nosa disposición, que son as moedas de un centavo.

35
00:01:51,140 --> 00:01:52,270
>> E podemos utilizar diñeiro?

36
00:01:52,270 --> 00:01:59,060
Ben, sim-- e acabamos usando dous
tostões para un total de catro moedas.

37
00:01:59,060 --> 00:02:01,430
>> Cando estea concluído, o
programa coma este.

38
00:02:01,430 --> 00:02:03,710
Unha vez que o usuario executa o
programa ganancioso, eles van

39
00:02:03,710 --> 00:02:07,270
ser solicitada a dar a cantidade de
cambio de dólares que son debidos.

40
00:02:07,270 --> 00:02:11,140
E entón a súa saída do programa vontade
a cantidade mínima de moedas

41
00:02:11,140 --> 00:02:14,740
que o cadro ganancioso usaría
para facer esa cantidade de cambio.

42
00:02:14,740 --> 00:02:18,160
>> Entón agora imos romper ese
abaixo nas nosas subtarefas.

43
00:02:18,160 --> 00:02:21,410
Primeiro imos pedir a nosa
de usuario para unha cantidade de cambio.

44
00:02:21,410 --> 00:02:25,630
E, como con calquera entrada do usuario, queremos
asegurarse de que validar as entradas

45
00:02:25,630 --> 00:02:29,360
e garantir que podemos utilizar este
entrada para o resto do noso programa.

46
00:02:29,360 --> 00:02:32,480
Entón nós imos sempre
usar o maior punto posible

47
00:02:32,480 --> 00:02:35,240
e manter o control das moedas utilizadas.

48
00:02:35,240 --> 00:02:39,080
E, finalmente, imprimir a finais
número de moedas que usan.

49
00:02:39,080 --> 00:02:40,970
>> Entón, imos falar sobre o que levou.

50
00:02:40,970 --> 00:02:43,550
A cantidade que facer centavos,
e este é en dólares.

51
00:02:43,550 --> 00:02:48,440
E así por dólares, imos
para usar o tipo de variable float.

52
00:02:48,440 --> 00:02:52,390
Agora, sempre que preguntar a un usuario para a entrada,
quere estar seguro de que é válido.

53
00:02:52,390 --> 00:02:56,640
E aquí nos gusta de aproveitar
da construción de loop do-while.

54
00:02:56,640 --> 00:03:00,320
>> Bucle do-while executará
corpo do lazo, polo menos, unha vez máis.

55
00:03:00,320 --> 00:03:01,650
Polo tanto, este vén a cadra.

56
00:03:01,650 --> 00:03:05,510
Sabemos que temos que solicitar ao
usuario, polo menos unha vez por un float.

57
00:03:05,510 --> 00:03:07,100
Agora, se iso float é válido.

58
00:03:07,100 --> 00:03:07,710
Iso é fabuloso.

59
00:03:07,710 --> 00:03:08,460
Nós seguir adiante.

60
00:03:08,460 --> 00:03:11,910
Pero, se non, o ciclo pode asegurar
que temos unha boia propio

61
00:03:11,910 --> 00:03:16,810
repetindo continuamente ata
o usuario dános un valor válido.

62
00:03:16,810 --> 00:03:18,760
>> Agora, para o do-while
condición de loop, cómpre

63
00:03:18,760 --> 00:03:22,000
para considerar o que iso significa
ter un flotador válido.

64
00:03:22,000 --> 00:03:24,220
Así, para o contexto
este problema, probablemente

65
00:03:24,220 --> 00:03:27,450
ten sentido só para
aceptar valores positivos.

66
00:03:27,450 --> 00:03:32,010
>> Entón, movendo on-- obtivemos un
valor en dólares do usuario.

67
00:03:32,010 --> 00:03:35,380
Pero estamos lidando con moedas,
que son enteiramente en centavos.

68
00:03:35,380 --> 00:03:38,660
$ 1 é equivalente a 100 centavos.

69
00:03:38,660 --> 00:03:43,670
Entón, unha boa cousa que facer é
converter eses valores en centavos.

70
00:03:43,670 --> 00:03:48,380
>> Agora, cando a conversión dun flotador
para un número enteiro, de modo dólares para centavos,

71
00:03:48,380 --> 00:03:52,230
queremos estar seguro de que estamos coidado
preto de punto flotante imprecisión.

72
00:03:52,230 --> 00:03:55,260
Entón isto significa que isso-- dicir
meu dólar value-- meu flotador

73
00:03:55,260 --> 00:04:00,260
value-- houbo un ata US $ 2, aínda
Pode haber algúns números vagos alí.

74
00:04:00,260 --> 00:04:04,590
Entón, nós queremos estar seguro de que non só
podemos multiplicar por 100 para os centavos,

75
00:04:04,590 --> 00:04:06,480
pero tamén rematar o día.

76
00:04:06,480 --> 00:04:09,210
>> Polo tanto, agora temos a cantidade
do cambio en débeda co usuario.

77
00:04:09,210 --> 00:04:13,430
Nós orixinalmente obtivo en dólares,
e agora temos convertido para centavos.

78
00:04:13,430 --> 00:04:17,029
Entón agora podemos proceder a corazón de
o algoritmo ganancioso, que sempre

79
00:04:17,029 --> 00:04:19,220
utilizando a moeda maior posible.

80
00:04:19,220 --> 00:04:21,930
Mentres nós estamos facendo isto,
é esencial que nós tamén

81
00:04:21,930 --> 00:04:25,360
manter o control de cantas moedas son
será devolto ao usuario

82
00:04:25,360 --> 00:04:28,630
así como os restantes
cambiar debido ao usuario.

83
00:04:28,630 --> 00:04:31,130
>> O programa vai mirar
algo coma isto.

84
00:04:31,130 --> 00:04:34,190
Despois de obter a cantidade de
dólares e convertelo en centavos,

85
00:04:34,190 --> 00:04:35,790
a continuación, entrará en un loop.

86
00:04:35,790 --> 00:04:38,400
Mentres pode ser barrios
used-- que sexa

87
00:04:38,400 --> 00:04:43,660
mentres que a cantidade de cambio debido ao
usuario é maior que ou igual a 0,25 $,

88
00:04:43,660 --> 00:04:45,040
vai usar un cuarto.

89
00:04:45,040 --> 00:04:47,000
>> Agora, o que fai a usar un cuarto implica?

90
00:04:47,000 --> 00:04:51,280
Ben, um-- vai aumentar a moeda
Cantidade de ser devolto ao usuario.

91
00:04:51,280 --> 00:04:55,890
E en segundo lugar vai diminuír a corrente
cantidade de cambio debido ao seu usuario

92
00:04:55,890 --> 00:04:57,520
en US $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Despois de repetir que ata
trimestres non pode ser usado,

94
00:05:00,680 --> 00:05:04,630
ir á seguinte grande
coin-- neste caso, moedas de dez centavos, $ 0.10.

95
00:05:04,630 --> 00:05:07,750
Entón vai entrar nese ciclo ata
non pode máis usar moedas de dez centavos.

96
00:05:07,750 --> 00:05:10,720
A continuación, avance á seguinte
maior moeda, recreo.

97
00:05:10,720 --> 00:05:14,810
Tras recreo non pode ser usado,
usar o importe restante en moedas de un centavo.

98
00:05:14,810 --> 00:05:17,800
E, finalmente, imprimir o
número de moedas usadas.

99
00:05:17,800 --> 00:05:20,350
>> Outra forma que pode
abordar o problema ganancioso

100
00:05:20,350 --> 00:05:22,950
consiste en utilizar o enfoque de módulo.

101
00:05:22,950 --> 00:05:25,690
Modulo é un operador
que devolve o resto

102
00:05:25,690 --> 00:05:27,680
da división entre dous números.

103
00:05:27,680 --> 00:05:30,270
Digamos que eu tiña 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Ben, 5 é un factor de 50,
de xeito que o resto será 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- ben, 10 tamén é un factor
50, de xeito que o resto é tamén 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- ben, calquera número en si mod
non terá ningún resto.

107
00:05:43,660 --> 00:05:45,510
>> Que uns 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Ben, 49 só vai para 50 xa.

109
00:05:47,910 --> 00:05:50,290
Así, o resto será 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 vai
darlle un resto de 3.

111
00:05:55,180 --> 00:05:59,120
>> Entón, como podemos utilizar modulo
e quizais algunha división

112
00:05:59,120 --> 00:06:01,690
para aplicar o noso algoritmo lambón?

113
00:06:01,690 --> 00:06:05,550
Ben, aínda queremos permanecer fiel á
corazón do ganancioso algorithm-- que

114
00:06:05,550 --> 00:06:07,910
é usar a maior moeda posible.

115
00:06:07,910 --> 00:06:14,570
>> Entón, imos preguntar se podemos utilizar calquera
trimestres para voltar $ 0,32 para o usuario.

116
00:06:14,570 --> 00:06:20,070
Ben, 32 mod 25 dá
-Nos un remanente de US $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Así que nos di que podemos definitivamente
usar un trimestre con US $ 0,07 restantes.

118
00:06:24,500 --> 00:06:26,180
>> Podemos, entón, usar calquera moedas de dez centavos?

119
00:06:26,180 --> 00:06:32,740
Ben, Não-- porque $ 0,07 mod
$ 0,10 dános un resto de 7.

120
00:06:32,740 --> 00:06:34,960
10 non entrará en 7 de todo.

121
00:06:34,960 --> 00:06:36,390
>> Entón podemos utilizar recreo?

122
00:06:36,390 --> 00:06:40,490
Ben $ 0,07 mod 5 centavos
ofrécenos dous restantes.

123
00:06:40,490 --> 00:06:42,930
E, finalmente, podemos usar calquera tostões?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 dános 0,
que é ao final o que

125
00:06:45,930 --> 00:06:48,160
queremos, porque, entón, que
significa que temos devolto

126
00:06:48,160 --> 00:06:50,160
ao usuario todas as variacións debido.

127
00:06:50,160 --> 00:06:54,320
>> Entón agora tes dous xeitos posibles de
implementación do algorithm-- ganancioso

128
00:06:54,320 --> 00:06:59,230
un con lacadas e unha cun
combinación de módulo e división.

129
00:06:59,230 --> 00:07:03,010
Entón, finalmente, só necesitamos
imprimir o número final de moedas.

130
00:07:03,010 --> 00:07:06,520
>> Se eu quería che dicir que eu tiña
3 animais e este valor codificado,

131
00:07:06,520 --> 00:07:09,240
entón eu podería usar só un
declaración proba de impresión simple.

132
00:07:09,240 --> 00:07:12,320
Pero o seu valor é, en realidade,
almacenado nunha variable.

133
00:07:12,320 --> 00:07:15,260
Así como imprimir o
Os valores almacenados variables?

134
00:07:15,260 --> 00:07:17,880
>> Para iso tomamos
vantaxe de espazos reservados.

135
00:07:17,880 --> 00:07:21,540
Digamos que eu xa declarara
n un enteiro inicializar.

136
00:07:21,540 --> 00:07:25,170
Despois, máis tarde, se quixese imprimir esta
valor, entón eu ía escribir a secuencia.

137
00:07:25,170 --> 00:07:30,500
E no canto de ese valor eu usaría
un espazo reservado para que% integer-- i.

138
00:07:30,500 --> 00:07:33,800
Logo tras a corda, eu teño un
coma, seguido pola variable

139
00:07:33,800 --> 00:07:34,950
que desexa imprimir.

140
00:07:34,950 --> 00:07:38,550
E máis tarde, cando sexa impreso,
vai imprimir o valor de n.

141
00:07:38,550 --> 00:07:41,570
>> Eu tamén podería usar un espazo reservado
para un flotador, por exemplo.

142
00:07:41,570 --> 00:07:44,000
Se eu quixese dicir-lle como
canto diñeiro eu teño no meu peto,

143
00:07:44,000 --> 00:07:46,820
entón eu podería dicir que teño dólares% f.

144
00:07:46,820 --> 00:07:51,330
E máis tarde, cando imprime, entón n vai
tomar o lugar de que o titular sitio.

145
00:07:51,330 --> 00:07:55,530
Podería tamén, por exemplo, usar varios
espazos reservados para varias variables.

146
00:07:55,530 --> 00:07:57,590
Entón, mentres eu lista
Los en orde, entón eu

147
00:07:57,590 --> 00:08:00,390
pode dicirlle cantas
cans e gatos que teño.

148
00:08:00,390 --> 00:08:03,710
>> Agora sabemos como para solicitar ao
de usuario para unha cantidade de cambio,

149
00:08:03,710 --> 00:08:06,130
asegurar que esa entrada
é válida, e entón nós

150
00:08:06,130 --> 00:08:10,370
ten dúas posibles formas de implementación
o algoritmo lambón sempre de usar

151
00:08:10,370 --> 00:08:12,090
a maior moeda posible.

152
00:08:12,090 --> 00:08:15,050
Porque mantivemos o control de
cantas moedas que estamos usando,

153
00:08:15,050 --> 00:08:19,210
que pode entón imprimir ese valor ao final,
informando ao usuario cantas moedas son

154
00:08:19,210 --> 00:08:20,240
quedando atrás.

155
00:08:20,240 --> 00:08:24,240
>> O meu nome é o Amayla, e este é CS50.

156
00:08:24,240 --> 00:08:25,915

