1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Andiamo avido.

3
00:00:02,900 --> 00:00:06,810
In avido, il nostro compito è quello di giocare
il ruolo di un cassiere avido.

4
00:00:06,810 --> 00:00:09,750
L'utente ci dirà come
molti cambiamenti dobbiamo loro,

5
00:00:09,750 --> 00:00:13,520
e quindi il nostro lavoro è quello di calcolare
il numero minimo di monete

6
00:00:13,520 --> 00:00:17,240
che possiamo usare per fare
quella quantità di cambiamento.

7
00:00:17,240 --> 00:00:19,560
>> Cominciamo con un esempio.

8
00:00:19,560 --> 00:00:23,170
Dire l'utente richiede $ 0,32 indietro.

9
00:00:23,170 --> 00:00:28,960
Potremmo fare questo dando
li 32 centesimi, un centesimo ciascuno.

10
00:00:28,960 --> 00:00:35,180
O potrei anche utilizzare cinque coins-- da
dando loro tre monete da dieci centesimi, $ 0,10 ciascuna,

11
00:00:35,180 --> 00:00:38,060
e due centesimi, $ 0,02 ciascuna.

12
00:00:38,060 --> 00:00:42,580
Ma potremmo usare anche
un minor numero di monete per fare che?

13
00:00:42,580 --> 00:00:45,100
>> Tutta la tattica in greedy--
per essere un avido cashier--

14
00:00:45,100 --> 00:00:47,600
è quello di utilizzare il più possibile moneta.

15
00:00:47,600 --> 00:00:50,670
Così ogni volta che abbiamo
quarti noi li useremo.

16
00:00:50,670 --> 00:00:54,100
E poi una volta quelli a corto,
useremo monetine, $ 0,10 ciascuna.

17
00:00:54,100 --> 00:00:58,840
Poi monetine, 5 centesimi ciascuno, e
poi giù per pochi centesimi, un centesimo ciascuno.

18
00:00:58,840 --> 00:01:01,792
Utilizzando il grande moneta
possibile ogni volta che possiamo,

19
00:01:01,792 --> 00:01:07,350
ci assicuriamo che usiamo il numero minor
di monete possibile apportare la modifica.

20
00:01:07,350 --> 00:01:09,180
>> Quindi cerchiamo di camminare questo attraverso.

21
00:01:09,180 --> 00:01:11,660
L'utente ha bisogno di $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Quindi ci chiediamo,
possiamo usare un quarto?

23
00:01:14,200 --> 00:01:15,560
Ebbene, sì, possiamo.

24
00:01:15,560 --> 00:01:19,720
Così ora abbiamo solo li conosciamo
$ 0,07, e abbiamo usato una moneta.

25
00:01:19,720 --> 00:01:20,970
>> Possiamo usare un altro quarto?

26
00:01:20,970 --> 00:01:21,890
Beh no.

27
00:01:21,890 --> 00:01:27,570
0,07 $ è meno di $ 0.25, in modo da procedere
alla prossima grande moneta disponibile.

28
00:01:27,570 --> 00:01:30,690
Dimes sono $ 0,10, e
ancora una volta, non possiamo usare monetine.

29
00:01:30,690 --> 00:01:35,480
Perché dimes sono un valore di $ 0,10, che
è più che la quantità di cambiamento dovuto.

30
00:01:35,480 --> 00:01:36,790
>> Andiamo a monetine.

31
00:01:36,790 --> 00:01:40,890
E, sì, $ 0,05 è inferiore a
$ 0.10-- modo che possiamo utilizzare un nichelino.

32
00:01:40,890 --> 00:01:46,104
Così ora abbiamo solo deve l'utente $ 0,02
e abbiamo finora usato due monete.

33
00:01:46,104 --> 00:01:47,270
Non possiamo usare un altro nichel.

34
00:01:47,270 --> 00:01:51,140
Allora si procede per l'ultima moneta in
nostra disposizione, che sono i centesimi.

35
00:01:51,140 --> 00:01:52,270
>> E possiamo usare centesimo?

36
00:01:52,270 --> 00:01:59,060
Bene, yes-- e si finisce con due
centesimi per un totale di quattro monete.

37
00:01:59,060 --> 00:02:01,430
>> Una volta che hai finito, la
il programma sarà simile a questa.

38
00:02:01,430 --> 00:02:03,710
Una volta che l'utente esegue il
programma di avidi, faranno

39
00:02:03,710 --> 00:02:07,270
essere richiesto per ottenere la quantità di
cambiamento in dollari che stanno dovuti.

40
00:02:07,270 --> 00:02:11,140
E poi l'output programma
la quantità minima di monete

41
00:02:11,140 --> 00:02:14,740
che il cassiere avido userebbe
per fare quella quantità di cambiamento.

42
00:02:14,740 --> 00:02:18,160
>> Così ora rompiamo questo
giù nelle nostre attività secondarie.

43
00:02:18,160 --> 00:02:21,410
In primo luogo stiamo andando per richiedere la nostra
utente per una quantità di cambiamento.

44
00:02:21,410 --> 00:02:25,630
E, come con qualsiasi input da parte dell'utente, vogliamo
assicurarsi che convalidiamo quell'ingresso

45
00:02:25,630 --> 00:02:29,360
e garantire che si possa utilizzare tale
ingresso per il resto del nostro programma.

46
00:02:29,360 --> 00:02:32,480
Poi andremo a sempre
utilizzare il più grande punto di possibile

47
00:02:32,480 --> 00:02:35,240
e tenere traccia delle monete metalliche utilizzate.

48
00:02:35,240 --> 00:02:39,080
E, infine, stampare la finale
numero di monete che abbiamo usato.

49
00:02:39,080 --> 00:02:40,970
>> Quindi parliamo di chiedere conferma.

50
00:02:40,970 --> 00:02:43,550
L'importo deve fare centesimi,
e questo è in dollari.

51
00:02:43,550 --> 00:02:48,440
E così per i dollari, stiamo andando
di utilizzare il tipo di variabile float.

52
00:02:48,440 --> 00:02:52,390
Ora ogni volta che si chiede a un utente per l'input,
si vuole fare in modo che sia valido.

53
00:02:52,390 --> 00:02:56,640
Ed ecco che ci piace di sfruttare
del do-while costrutto.

54
00:02:56,640 --> 00:03:00,320
>> Un ciclo do-while eseguirà il
corpo del ciclo almeno una volta.

55
00:03:00,320 --> 00:03:01,650
Quindi questo è utile.

56
00:03:01,650 --> 00:03:05,510
Sappiamo che abbiamo bisogno di richiedere
utente almeno una volta per un galleggiante.

57
00:03:05,510 --> 00:03:07,100
Ora, se questo galleggiante è valida.

58
00:03:07,100 --> 00:03:07,710
È fantastico.

59
00:03:07,710 --> 00:03:08,460
Ci muoviamo su.

60
00:03:08,460 --> 00:03:11,910
Ma se non, il loop garantirà
che otteniamo un galleggiante corretta

61
00:03:11,910 --> 00:03:16,810
ripetendo continuamente fino
l'utente ci dà un valore valido.

62
00:03:16,810 --> 00:03:18,760
>> Ora per il do-while
condizione del ciclo, abbiamo bisogno

63
00:03:18,760 --> 00:03:22,000
a considerare che cosa significa
avere un galleggiante valido.

64
00:03:22,000 --> 00:03:24,220
Quindi per il contesto
questo problema, probabilmente

65
00:03:24,220 --> 00:03:27,450
ha senso solo per
accettare i valori positivi.

66
00:03:27,450 --> 00:03:32,010
>> Quindi lo spostamento on-- abbiamo ottenuto un
valore in dollari dall'utente.

67
00:03:32,010 --> 00:03:35,380
Ma abbiamo a che fare con le monete,
che sono interamente in centesimi.

68
00:03:35,380 --> 00:03:38,660
$ 1 è equivalente a 100 centesimi.

69
00:03:38,660 --> 00:03:43,670
Quindi, una buona cosa da fare è quello di
convertire tali valori in centesimi.

70
00:03:43,670 --> 00:03:48,380
>> Ora, quando la conversione da un galleggiante
in un numero intero, in modo dollari centesimi,

71
00:03:48,380 --> 00:03:52,230
vogliamo fare in modo che stiamo attenti
A proposito di virgola mobile imprecisioni.

72
00:03:52,230 --> 00:03:55,260
Quindi questo significa che-- dicono
il mio dollaro value-- mia galleggiante

73
00:03:55,260 --> 00:04:00,260
value-- c'era un anche $ 2, ancora
possono essere alcuni numeri randagi in là.

74
00:04:00,260 --> 00:04:04,590
Quindi, vogliamo fare in modo che non solo
Non moltiplichiamo per 100 per ottenere i centesimi,

75
00:04:04,590 --> 00:04:06,480
ma abbiamo anche arrotondare fuori.

76
00:04:06,480 --> 00:04:09,210
>> Così ora abbiamo la quantità
di cambiamento dovuto all'utente.

77
00:04:09,210 --> 00:04:13,430
Inizialmente abbiamo ottenuto in dollari,
e ora abbiamo convertita in centesimi.

78
00:04:13,430 --> 00:04:17,029
Così ora possiamo procedere con il cuore di
l'algoritmo greedy, che è sempre

79
00:04:17,029 --> 00:04:19,220
utilizzando la più grande moneta possibile.

80
00:04:19,220 --> 00:04:21,930
Mentre noi stiamo facendo questo,
è essenziale che anche noi

81
00:04:21,930 --> 00:04:25,360
tenere traccia di quante monete sono
sta per essere restituito all'utente

82
00:04:25,360 --> 00:04:28,630
nonché il restante
modificare dovuto all'utente.

83
00:04:28,630 --> 00:04:31,130
>> Il programma sarà
qualcosa come questo.

84
00:04:31,130 --> 00:04:34,190
Dopo aver ottenere la quantità di
dollari e la conversione che di centesimi,

85
00:04:34,190 --> 00:04:35,790
Allora ti entra in un ciclo.

86
00:04:35,790 --> 00:04:38,400
Mentre quarti possono essere
used-- vale a dire

87
00:04:38,400 --> 00:04:43,660
mentre la quantità di cambiamento dovuto al
utente è maggiore o uguale a $ 0.25,

88
00:04:43,660 --> 00:04:45,040
userete un quarto.

89
00:04:45,040 --> 00:04:47,000
>> Ora che cosa fa con un quarto comporta?

90
00:04:47,000 --> 00:04:51,280
Beh, tra-- aumenterete la moneta
contare da restituire all'utente.

91
00:04:51,280 --> 00:04:55,890
E in secondo luogo si riduce la corrente
quantità di cambiamento dovuto di nuovo per l'utente

92
00:04:55,890 --> 00:04:57,520
di $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Dopo aver ripetuto che fino
quarti non possono più essere utilizzati,

94
00:05:00,680 --> 00:05:04,630
procedere alla successiva più grande
coin-- in questo caso monetine, $ 0.10.

95
00:05:04,630 --> 00:05:07,750
Quindi si entra quel ciclo fino
non è più possibile usare monetine.

96
00:05:07,750 --> 00:05:10,720
Quindi procedere al successivo
più grande moneta, monetine.

97
00:05:10,720 --> 00:05:14,810
Dopo monetine non possono più essere utilizzati,
utilizzare l'importo restante in centesimi.

98
00:05:14,810 --> 00:05:17,800
E, infine, stampare il
numero di monete utilizzato.

99
00:05:17,800 --> 00:05:20,350
>> Un altro modo che è possibile
affrontare il problema avido

100
00:05:20,350 --> 00:05:22,950
è quello di utilizzare l'approccio modulo.

101
00:05:22,950 --> 00:05:25,690
Modulo è un operatore
che restituisce il resto

102
00:05:25,690 --> 00:05:27,680
della divisione tra due numeri.

103
00:05:27,680 --> 00:05:30,270
Dire che ho avuto 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Ebbene, 5 è un fattore di 50,
in modo che il resto sarà 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- bene, 10 è anche un fattore
50, quindi il resto è 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- bene, qualsiasi numero stesso mod
non ha intenzione di avere alcun resto.

107
00:05:43,660 --> 00:05:45,510
>> Che dire di 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Ebbene, va solo 49 in 50 una volta.

109
00:05:47,910 --> 00:05:50,290
Così la restante sarà 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 sta per
dare un resto di 3.

111
00:05:55,180 --> 00:05:59,120
>> Quindi, come possiamo usare modulo
e forse qualche divisione

112
00:05:59,120 --> 00:06:01,690
per implementare il nostro algoritmo greedy?

113
00:06:01,690 --> 00:06:05,550
Beh, abbiamo ancora voglia di rimanere fedele alla
cuore della avido algorithm-- che

114
00:06:05,550 --> 00:06:07,910
è con la più grande moneta possibile.

115
00:06:07,910 --> 00:06:14,570
>> Quindi cerchiamo di chiederci se siamo in grado di utilizzare qualsiasi
quarti di tornare $ 0,32 a all'utente.

116
00:06:14,570 --> 00:06:20,070
Beh, 32 mod 25 dà
noi un resto di 0,07 $.

117
00:06:20,070 --> 00:06:24,500
In modo che ci dice che possiamo sicuramente
utilizzare uno trimestre con $ 0,07 rimanente.

118
00:06:24,500 --> 00:06:26,180
>> Possiamo quindi utilizzare qualsiasi monetine?

119
00:06:26,180 --> 00:06:32,740
Bene, perché no-- $ 0,07 mod
$ 0,10 ci dà un resto di 7.

120
00:06:32,740 --> 00:06:34,960
10 non entra in 7 affatto.

121
00:06:34,960 --> 00:06:36,390
>> Quindi possiamo usare monetine?

122
00:06:36,390 --> 00:06:40,490
Beh $ 0,07 mod 5 centesimi
ci dà due rimanenti.

123
00:06:40,490 --> 00:06:42,930
E, infine, possiamo usare centesimi?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 ci dà 0,
che è in definitiva ciò che

125
00:06:45,930 --> 00:06:48,160
vogliamo, perché allora che
significa che siamo tornati

126
00:06:48,160 --> 00:06:50,160
all'utente tutti i cambiamenti dovuti.

127
00:06:50,160 --> 00:06:54,320
>> Così ora avete due possibili modi di
l'attuazione del algorithm-- avido

128
00:06:54,320 --> 00:06:59,230
una con occhielli e una con
combinazione di modulo e di divisione.

129
00:06:59,230 --> 00:07:03,010
Così alla fine, abbiamo solo bisogno di
stampare il numero finale di monete.

130
00:07:03,010 --> 00:07:06,520
>> Se volevo dirvi che ho avuto
3 animali e questo valore è stato codificato,

131
00:07:06,520 --> 00:07:09,240
quindi ho potuto solo usare un
semplice dichiarazione test di stampa.

132
00:07:09,240 --> 00:07:12,320
Ma il nostro valore è in realtà
memorizzato in una variabile.

133
00:07:12,320 --> 00:07:15,260
Così come si stampa il
I valori memorizzati nelle variabili?

134
00:07:15,260 --> 00:07:17,880
>> Per questo prendiamo
vantaggio di segnaposto.

135
00:07:17,880 --> 00:07:21,540
Dire che avevo già dichiarato
un intero n inizializzato.

136
00:07:21,540 --> 00:07:25,170
Poi, più tardi se volevo stampare che
valore, allora avrei scritto la stringa.

137
00:07:25,170 --> 00:07:30,500
E invece di quel valore userei
un segnaposto per quella integer--% i.

138
00:07:30,500 --> 00:07:33,800
Poi, dopo la stringa, ho un
virgola, seguita dalla variabile

139
00:07:33,800 --> 00:07:34,950
che voglio stampare.

140
00:07:34,950 --> 00:07:38,550
E più tardi, quando la stampa,
che sarà stampare il valore di n.

141
00:07:38,550 --> 00:07:41,570
>> Potrei anche usare un segnaposto
per un galleggiante, per esempio.

142
00:07:41,570 --> 00:07:44,000
Se volevo dirvi come
tanto denaro che ho in tasca,

143
00:07:44,000 --> 00:07:46,820
allora potrei dire che ho dollari% f.

144
00:07:46,820 --> 00:07:51,330
E più tardi, quando la stampa, allora n farà
prendere il posto di quel luogo titolare.

145
00:07:51,330 --> 00:07:55,530
Potrei anche, per esempio, utilizzare più
segnaposto per diverse variabili.

146
00:07:55,530 --> 00:07:57,590
Quindi, fintanto che io elenco
in ordine, poi ho

147
00:07:57,590 --> 00:08:00,390
può dirvi quanti
cani e gatti che ho.

148
00:08:00,390 --> 00:08:03,710
>> Ora sappiamo come per visualizzare la
utente per un importo di cambiamento,

149
00:08:03,710 --> 00:08:06,130
garantire che tale ingresso
è valido e quindi abbiamo

150
00:08:06,130 --> 00:08:10,370
hanno due possibili modalità di attuazione
l'algoritmo greedy di utilizzare sempre

151
00:08:10,370 --> 00:08:12,090
la più grande moneta possibile.

152
00:08:12,090 --> 00:08:15,050
Perché abbiamo tenuto traccia di
quante monete stiamo usando,

153
00:08:15,050 --> 00:08:19,210
possiamo quindi stampare tale valore, alla fine,
deve indicare quante monete sono

154
00:08:19,210 --> 00:08:20,240
tornare indietro.

155
00:08:20,240 --> 00:08:24,240
>> Il mio nome è il Amayla, e questo è CS50.

156
00:08:24,240 --> 00:08:25,915

