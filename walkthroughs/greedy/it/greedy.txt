Andiamo avido. In avido, il nostro compito è quello di giocare il ruolo di un cassiere avido. L'utente ci dirà come molti cambiamenti dobbiamo loro, e quindi il nostro lavoro è quello di calcolare il numero minimo di monete che possiamo usare per fare quella quantità di cambiamento. 

Cominciamo con un esempio. Dire l'utente richiede $ 0,32 indietro. Potremmo fare questo dando li 32 centesimi, un centesimo ciascuno. O potrei anche utilizzare cinque coins-- da dando loro tre monete da dieci centesimi, $ 0,10 ciascuna, e due centesimi, $ 0,02 ciascuna. Ma potremmo usare anche un minor numero di monete per fare che? 

Tutta la tattica in greedy-- per essere un avido cashier-- è quello di utilizzare il più possibile moneta. Così ogni volta che abbiamo quarti noi li useremo. E poi una volta quelli a corto, useremo monetine, $ 0,10 ciascuna. Poi monetine, 5 centesimi ciascuno, e poi giù per pochi centesimi, un centesimo ciascuno. Utilizzando il grande moneta possibile ogni volta che possiamo, ci assicuriamo che usiamo il numero minor di monete possibile apportare la modifica. 

Quindi cerchiamo di camminare questo attraverso. L'utente ha bisogno di $ 0,32. Quindi ci chiediamo, possiamo usare un quarto? Ebbene, sì, possiamo. Così ora abbiamo solo li conosciamo $ 0,07, e abbiamo usato una moneta. 

Possiamo usare un altro quarto? Beh no. 0,07 $ è meno di $ 0.25, in modo da procedere alla prossima grande moneta disponibile. Dimes sono $ 0,10, e ancora una volta, non possiamo usare monetine. Perché dimes sono un valore di $ 0,10, che è più che la quantità di cambiamento dovuto. 

Andiamo a monetine. E, sì, $ 0,05 è inferiore a $ 0.10-- modo che possiamo utilizzare un nichelino. Così ora abbiamo solo deve l'utente $ 0,02 e abbiamo finora usato due monete. Non possiamo usare un altro nichel. Allora si procede per l'ultima moneta in nostra disposizione, che sono i centesimi. 

E possiamo usare centesimo? Bene, yes-- e si finisce con due centesimi per un totale di quattro monete. 

Una volta che hai finito, la il programma sarà simile a questa. Una volta che l'utente esegue il programma di avidi, faranno essere richiesto per ottenere la quantità di cambiamento in dollari che stanno dovuti. E poi l'output programma la quantità minima di monete che il cassiere avido userebbe per fare quella quantità di cambiamento. 

Così ora rompiamo questo giù nelle nostre attività secondarie. In primo luogo stiamo andando per richiedere la nostra utente per una quantità di cambiamento. E, come con qualsiasi input da parte dell'utente, vogliamo assicurarsi che convalidiamo quell'ingresso e garantire che si possa utilizzare tale ingresso per il resto del nostro programma. Poi andremo a sempre utilizzare il più grande punto di possibile e tenere traccia delle monete metalliche utilizzate. E, infine, stampare la finale numero di monete che abbiamo usato. 

Quindi parliamo di chiedere conferma. L'importo deve fare centesimi, e questo è in dollari. E così per i dollari, stiamo andando di utilizzare il tipo di variabile float. Ora ogni volta che si chiede a un utente per l'input, si vuole fare in modo che sia valido. Ed ecco che ci piace di sfruttare del do-while costrutto. 

Un ciclo do-while eseguirà il corpo del ciclo almeno una volta. Quindi questo è utile. Sappiamo che abbiamo bisogno di richiedere utente almeno una volta per un galleggiante. Ora, se questo galleggiante è valida. È fantastico. Ci muoviamo su. Ma se non, il loop garantirà che otteniamo un galleggiante corretta ripetendo continuamente fino l'utente ci dà un valore valido. 

Ora per il do-while condizione del ciclo, abbiamo bisogno a considerare che cosa significa avere un galleggiante valido. Quindi per il contesto questo problema, probabilmente ha senso solo per accettare i valori positivi. 

Quindi lo spostamento on-- abbiamo ottenuto un valore in dollari dall'utente. Ma abbiamo a che fare con le monete, che sono interamente in centesimi. $ 1 è equivalente a 100 centesimi. Quindi, una buona cosa da fare è quello di convertire tali valori in centesimi. 

Ora, quando la conversione da un galleggiante in un numero intero, in modo dollari centesimi, vogliamo fare in modo che stiamo attenti A proposito di virgola mobile imprecisioni. Quindi questo significa che-- dicono il mio dollaro value-- mia galleggiante value-- c'era un anche $ 2, ancora possono essere alcuni numeri randagi in là. Quindi, vogliamo fare in modo che non solo Non moltiplichiamo per 100 per ottenere i centesimi, ma abbiamo anche arrotondare fuori. 

Così ora abbiamo la quantità di cambiamento dovuto all'utente. Inizialmente abbiamo ottenuto in dollari, e ora abbiamo convertita in centesimi. Così ora possiamo procedere con il cuore di l'algoritmo greedy, che è sempre utilizzando la più grande moneta possibile. Mentre noi stiamo facendo questo, è essenziale che anche noi tenere traccia di quante monete sono sta per essere restituito all'utente nonché il restante modificare dovuto all'utente. 

Il programma sarà qualcosa come questo. Dopo aver ottenere la quantità di dollari e la conversione che di centesimi, Allora ti entra in un ciclo. Mentre quarti possono essere used-- vale a dire mentre la quantità di cambiamento dovuto al utente è maggiore o uguale a $ 0.25, userete un quarto. 

Ora che cosa fa con un quarto comporta? Beh, tra-- aumenterete la moneta contare da restituire all'utente. E in secondo luogo si riduce la corrente quantità di cambiamento dovuto di nuovo per l'utente di $ 0,25. 

Dopo aver ripetuto che fino quarti non possono più essere utilizzati, procedere alla successiva più grande coin-- in questo caso monetine, $ 0.10. Quindi si entra quel ciclo fino non è più possibile usare monetine. Quindi procedere al successivo più grande moneta, monetine. Dopo monetine non possono più essere utilizzati, utilizzare l'importo restante in centesimi. E, infine, stampare il numero di monete utilizzato. 

Un altro modo che è possibile affrontare il problema avido è quello di utilizzare l'approccio modulo. Modulo è un operatore che restituisce il resto della divisione tra due numeri. Dire che ho avuto 50 mod 5. Ebbene, 5 è un fattore di 50, in modo che il resto sarà 0. 50 mod 10-- bene, 10 è anche un fattore 50, quindi il resto è 0. 50 mod 50-- bene, qualsiasi numero stesso mod non ha intenzione di avere alcun resto. 

Che dire di 50 mod 49? Ebbene, va solo 49 in 50 una volta. Così la restante sarà 1. 53 mod 50 sta per dare un resto di 3. 

Quindi, come possiamo usare modulo e forse qualche divisione per implementare il nostro algoritmo greedy? Beh, abbiamo ancora voglia di rimanere fedele alla cuore della avido algorithm-- che è con la più grande moneta possibile. 

Quindi cerchiamo di chiederci se siamo in grado di utilizzare qualsiasi quarti di tornare $ 0,32 a all'utente. Beh, 32 mod 25 dà noi un resto di 0,07 $. In modo che ci dice che possiamo sicuramente utilizzare uno trimestre con $ 0,07 rimanente. 

Possiamo quindi utilizzare qualsiasi monetine? Bene, perché no-- $ 0,07 mod $ 0,10 ci dà un resto di 7. 10 non entra in 7 affatto. 

Quindi possiamo usare monetine? Beh $ 0,07 mod 5 centesimi ci dà due rimanenti. E, infine, possiamo usare centesimi? 2 mod 1 ci dà 0, che è in definitiva ciò che vogliamo, perché allora che significa che siamo tornati all'utente tutti i cambiamenti dovuti. 

Così ora avete due possibili modi di l'attuazione del algorithm-- avido una con occhielli e una con combinazione di modulo e di divisione. Così alla fine, abbiamo solo bisogno di stampare il numero finale di monete. 

Se volevo dirvi che ho avuto 3 animali e questo valore è stato codificato, quindi ho potuto solo usare un semplice dichiarazione test di stampa. Ma il nostro valore è in realtà memorizzato in una variabile. Così come si stampa il I valori memorizzati nelle variabili? 

Per questo prendiamo vantaggio di segnaposto. Dire che avevo già dichiarato un intero n inizializzato. Poi, più tardi se volevo stampare che valore, allora avrei scritto la stringa. E invece di quel valore userei un segnaposto per quella integer--% i. Poi, dopo la stringa, ho un virgola, seguita dalla variabile che voglio stampare. E più tardi, quando la stampa, che sarà stampare il valore di n. 

Potrei anche usare un segnaposto per un galleggiante, per esempio. Se volevo dirvi come tanto denaro che ho in tasca, allora potrei dire che ho dollari% f. E più tardi, quando la stampa, allora n farà prendere il posto di quel luogo titolare. Potrei anche, per esempio, utilizzare più segnaposto per diverse variabili. Quindi, fintanto che io elenco in ordine, poi ho può dirvi quanti cani e gatti che ho. 

Ora sappiamo come per visualizzare la utente per un importo di cambiamento, garantire che tale ingresso è valido e quindi abbiamo hanno due possibili modalità di attuazione l'algoritmo greedy di utilizzare sempre la più grande moneta possibile. Perché abbiamo tenuto traccia di quante monete stiamo usando, possiamo quindi stampare tale valore, alla fine, deve indicare quante monete sono tornare indietro. 

Il mio nome è il Amayla, e questo è CS50. 