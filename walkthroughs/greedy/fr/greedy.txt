Soyons gourmands. En gourmand, notre travail est de jouer le rôle d'un caissier gourmand. L'utilisateur va nous dire comment beaucoup de changement que nous leur devons, puis notre travail consiste à calculer le nombre minimum de pièces de monnaie que nous pouvons utiliser pour faire cette quantité de changement. 

Commençons par un exemple. Dire l'utilisateur a besoin de 0,32 $ dos. Nous pourrions faire cela en donnant les 32 pennies, un cent chacun. Ou je pourrais aussi utiliser cinq coins-- par en leur donnant trois dimes, 0,10 $ chacun, et deux centimes, 0,02 $ chacun. Mais pourrait-on utiliser même moins de pièces pour faire cela? 

L'ensemble tactique greedy-- être un cashier-- gourmand est d'utiliser la plus grande pièce possible. Donc, chaque fois que nous avons quarts nous allons les utiliser. Et puis une fois ceux à court, nous utiliserons dimes, 0,10 $ chacun. Puis nickels, 5 cents chacun, et puis vers le bas pour pennies, un cent chacun. En utilisant la plus grande pièce possible à chaque fois que nous le pouvons, nous nous assurons que nous utilisons le plus petit nombre des pièces de monnaie possible de faire le changement. 

Donc, nous allons marcher jusqu'au bout. L'utilisateur a besoin de 0,32 $. Donc, nous nous demandons, pouvons-nous utiliser un quart? Eh bien, oui nous pouvons. Alors maintenant, nous ne les connaissons que 0,07 $, et nous avons utilisé une pièce de monnaie. 

Peut-on utiliser un autre quart? Et bien non. 0,07 $ est inférieur à 0,25 $, alors nous procédons à la prochaine plus grande pièce disponible. Dimes sont de 0,10 $, et encore une fois, nous ne pouvons pas utiliser dimes. Parce que dimes valent 0,10 $, ce qui est plus que le montant du changement dû. 

Nous allons à nickels. Et, oui, en effet, 0,05 $ est inférieur à 0.10-- $ afin que nous puissions utiliser un nickel. Alors maintenant, nous ne devons l'utilisateur de 0,02 $, et nous avons jusqu'à présent utilisé deux pièces. Nous ne pouvons pas utiliser un autre nickel. Donc, nous procédons à la dernière pièce à notre disposition, qui sont les pièces de monnaie. 

Et pouvons-nous utiliser sou? Eh bien, yes-- et nous nous retrouvons à l'aide de deux pennies pour un total de quatre pièces. 

Une fois que vous avez terminé, le programme ressemblera à ceci. Une fois que l'utilisateur exécute le programme gourmand, ils vont être invité à donner le montant de changement de dollars qui leur est dû. Et puis votre sortie programme de volonté le montant minimum de pièces de monnaie que le caissier gourmand utiliserait de faire cette quantité de changement. 

Alors maintenant, nous allons briser ce vers le bas dans nos sous-tâches. Nous allons d'abord pour que notre utilisateur pour une quantité de changement. Et, comme pour toute entrée d'utilisateur, nous voulons assurez-vous que nous validons cette entrée et veiller à ce que nous pouvons utiliser cette entrée pour le reste de notre programme. Ensuite, nous allons toujours utiliser le point le plus grand et de garder trace des pièces utilisées. Et enfin, imprimer la finale nombre de pièces que nous avons utilisé. 

Donc, nous allons parler de demander. Le montant doit faire cents, et cela est en dollars. Et donc pour le dollar, nous allons d'utiliser le type de variable flottante. Maintenant, chaque fois que vous demandez à un utilisateur pour l'entrée, vous voulez vous assurer qu'il est valide. Et ici, nous aimons profiter de la boucle do-while construction. 

Une boucle do-while exécutera la le corps de la boucle au moins une fois. Donc, c'est très pratique. Nous savons que nous devons inciter le au moins une fois pour un flotteur utilisateur. Maintenant, si ce flotteur est valide. C'est génial. Nous passons. Mais sinon, la boucle assurera que nous obtenons un flotteur bon en répétant continuellement jusqu'à ce que l'utilisateur nous donne une valeur valide. 

Maintenant, pour le do-tout condition de la boucle, nous avons besoin d'examiner ce que cela signifie d'avoir un flotteur non valide. Ainsi, pour le contexte de ce problème, probablement il est logique juste accepter des valeurs positives. 

Donc déplacer on-- nous avons obtenu une la valeur en dollars de l'utilisateur. Mais nous avons affaire à des pièces de monnaie, qui sont entièrement en cents. 1 $ équivaut à 100 cents. Donc, une bonne chose à faire est de convertir ces valeurs en cents. 

Maintenant, lors de la conversion d'un flotteur à un nombre entier, donc de dollars pour cents, nous voulons nous assurer que nous sommes prudents à propos de virgule flottante imprécision. Cela signifie donc que that-- disent mon dollar value-- mon flotteur value-- il y avait encore 2 $, encore peut-être quelques chiffres errants là-dedans. Donc, nous voulons faire en sorte que non seulement ne nous multiplions par 100 pour obtenir les cents, mais nous arrondissons aussi loin. 

Nous avons donc maintenant le montant du changement dû à l'utilisateur. Initialement, nous avions obtenu en dollars, et maintenant nous avons converti à cents. Alors maintenant, nous pouvons procéder avec le cœur de l'algorithme glouton, qui est toujours en utilisant la plus grande pièce possible. Alors que nous faisons cela, il est essentiel que nous avons aussi garder une trace de combien de pièces sont va être renvoyée à l'utilisateur ainsi que le reste changer dû à l'utilisateur. 

Le programme se penchera quelque chose comme ça. Une fois que vous obtenez le montant de dollars et convertir en cents, alors vous allez entrer dans une boucle. Alors quarts peuvent être used-- c'est-à-dire tandis que le montant du changement dû à la l'utilisateur est supérieur ou égal à 0,25 $, vous utiliserez un quart. 

Maintenant, qu'est-ce que l'utilisation d'un quart implique? Eh bien, One-- vous augmenterez la pièce de monnaie compter pour être retournées à l'utilisateur. Et deuxièmement, vous diminuez le courant quantité de changement dû à l'utilisateur de 0,25 $. 

Après avoir répété jusqu'à ce que quarts ne peuvent plus être utilisés, procéder à la prochaine plus grande coin-- dans ce cas, dimes, 0,10 $. Donc, vous allez entrer dans cette boucle jusqu'à ce vous ne pouvez plus utiliser dimes. Ensuite, passez à la prochaine plus grande pièce, nickels. Après nickels ne peuvent plus être utilisés, utiliser le montant restant en pennies. Et enfin, imprimez la nombre de pièces utilisées. 

Une autre façon que vous pouvez aborder le problème gourmand est d'utiliser l'approche de modulo. Modulo est un opérateur qui renvoie le reste de la division entre deux nombres. Dire que j'avais 50 mod 5. Eh bien, 5 est un facteur de 50, de sorte que le reste sera de 0. 50 mod 10-- bien, 10 est également un facteur de 50, de sorte que le reste est également 0. 50 mod 50-- bien, un certain nombre se mod ne va pas avoir d'autres. 

Qu'en est-il 50 mod 49? Eh bien, 49 va seulement dans 50 fois. Donc, le reste va être 1. 53 mod 50 va vous donner un reste de 3. 

Alors, comment pouvons-nous utiliser modulo et peut-être une certaine division mettre en œuvre notre algorithme glouton? Eh bien, nous voulons toujours rester fidèle à la coeur de la gourmande algorithm-- que est en utilisant la plus grande pièce possible. 

Donc, nous allons nous demander si nous pouvons utiliser toute quarts pour revenir à 0,32 $ à l'utilisateur. Eh bien, 32 mod 25 donne nous un reste de 0,07 $. Donc, qui nous dit que nous pouvons certainement utiliser un quart avec 0,07 $ restants. 

Peut-on utiliser ensuite des pièces de dix cents? Eh bien, parce no-- 0,07 $ mod 0,10 $ nous donne un reste de 7. 10 ne va pas dans 7 à tous. 

Alors pouvons-nous utiliser nickels? 0,07 Well $ mod 5 cents nous donne deux autres. Et enfin, peut-on utiliser des pièces de monnaie? 2 mod 1 nous donne 0, qui est finalement ce que nous voulons parce qu'alors que signifie que nous sommes revenus à l'utilisateur tous les changements dus. 

Alors maintenant, vous avez deux façons possibles de la mise en œuvre de la algorithm-- gourmande une avec des boucles et l'autre avec combinaison de modulo et la division. Donc finalement, nous avons juste besoin de imprimer le nombre final de pièces de monnaie. 

Si je voulais vous dire que je devais 3 animaux et cette valeur a été hardcoded, alors je pourrais simplement utiliser un simple énoncé de test d'impression. Mais notre valeur est en fait stocké dans une variable. Alors, comment vous imprimez-vous le les valeurs stockées dans des variables? 

Pour cela, nous prenons avantage de placeholders. Disons que je l'avais déjà déclaré un nombre entier initialisée n. Puis, plus tard si je voulais imprimer que valeur, alors j'écrire la chaîne. Et au lieu de cette valeur, je voudrais utiliser un espace réservé pour que integer--% i. Puis après la chaîne, j'ai un virgule, suivie de la variable que je veux imprimer. Et plus tard, quand elle imprime, il va imprimer la valeur de n. 

Je pourrais aussi utiliser un espace réservé pour un flotteur, par exemple. Si je voulais vous dire comment autant d'argent que j'ai dans ma poche, alors je pourrais dire que j'ai dollars% f. Et plus tard, quand il imprime, alors n sera prendre la place de ce lieu porteur. Je pourrais aussi, par exemple, utiliser plusieurs placeholders pour plusieurs variables. Donc, tant que je liste dans l'ordre, alors je peut vous dire combien de les chiens et les chats j'ai. 

Maintenant, nous savons comment inviter la l'utilisateur pour une quantité de changement, faire en sorte que cette entrée est valide, et nous ont deux façons possibles de mettre en œuvre l'algorithme glouton de toujours utiliser la plus grande pièce possible. Parce que nous avons gardé la trace de combien de pièces nous utilisons, on peut alors imprimer cette valeur à la fin, indiquant à l'utilisateur combien de pièces ils sont revenir. 

Mon nom est le Amayla, et cela est CS50. 