1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Soyons gourmands.

3
00:00:02,900 --> 00:00:06,810
En gourmand, notre travail est de jouer
le rôle d'un caissier gourmand.

4
00:00:06,810 --> 00:00:09,750
L'utilisateur va nous dire comment
beaucoup de changement que nous leur devons,

5
00:00:09,750 --> 00:00:13,520
puis notre travail consiste à calculer
le nombre minimum de pièces de monnaie

6
00:00:13,520 --> 00:00:17,240
que nous pouvons utiliser pour faire
cette quantité de changement.

7
00:00:17,240 --> 00:00:19,560
>> Commençons par un exemple.

8
00:00:19,560 --> 00:00:23,170
Dire l'utilisateur a besoin de 0,32 $ dos.

9
00:00:23,170 --> 00:00:28,960
Nous pourrions faire cela en donnant
les 32 pennies, un cent chacun.

10
00:00:28,960 --> 00:00:35,180
Ou je pourrais aussi utiliser cinq coins-- par
en leur donnant trois dimes, 0,10 $ chacun,

11
00:00:35,180 --> 00:00:38,060
et deux centimes, 0,02 $ chacun.

12
00:00:38,060 --> 00:00:42,580
Mais pourrait-on utiliser même
moins de pièces pour faire cela?

13
00:00:42,580 --> 00:00:45,100
>> L'ensemble tactique greedy--
être un cashier-- gourmand

14
00:00:45,100 --> 00:00:47,600
est d'utiliser la plus grande pièce possible.

15
00:00:47,600 --> 00:00:50,670
Donc, chaque fois que nous avons
quarts nous allons les utiliser.

16
00:00:50,670 --> 00:00:54,100
Et puis une fois ceux à court,
nous utiliserons dimes, 0,10 $ chacun.

17
00:00:54,100 --> 00:00:58,840
Puis nickels, 5 cents chacun, et
puis vers le bas pour pennies, un cent chacun.

18
00:00:58,840 --> 00:01:01,792
En utilisant la plus grande pièce
possible à chaque fois que nous le pouvons,

19
00:01:01,792 --> 00:01:07,350
nous nous assurons que nous utilisons le plus petit nombre
des pièces de monnaie possible de faire le changement.

20
00:01:07,350 --> 00:01:09,180
>> Donc, nous allons marcher jusqu'au bout.

21
00:01:09,180 --> 00:01:11,660
L'utilisateur a besoin de 0,32 $.

22
00:01:11,660 --> 00:01:14,200
Donc, nous nous demandons,
pouvons-nous utiliser un quart?

23
00:01:14,200 --> 00:01:15,560
Eh bien, oui nous pouvons.

24
00:01:15,560 --> 00:01:19,720
Alors maintenant, nous ne les connaissons que
0,07 $, et nous avons utilisé une pièce de monnaie.

25
00:01:19,720 --> 00:01:20,970
>> Peut-on utiliser un autre quart?

26
00:01:20,970 --> 00:01:21,890
Et bien non.

27
00:01:21,890 --> 00:01:27,570
0,07 $ est inférieur à 0,25 $, alors nous procédons
à la prochaine plus grande pièce disponible.

28
00:01:27,570 --> 00:01:30,690
Dimes sont de 0,10 $, et
encore une fois, nous ne pouvons pas utiliser dimes.

29
00:01:30,690 --> 00:01:35,480
Parce que dimes valent 0,10 $, ce qui
est plus que le montant du changement dû.

30
00:01:35,480 --> 00:01:36,790
>> Nous allons à nickels.

31
00:01:36,790 --> 00:01:40,890
Et, oui, en effet, 0,05 $ est inférieur à
0.10-- $ afin que nous puissions utiliser un nickel.

32
00:01:40,890 --> 00:01:46,104
Alors maintenant, nous ne devons l'utilisateur de 0,02 $,
et nous avons jusqu'à présent utilisé deux pièces.

33
00:01:46,104 --> 00:01:47,270
Nous ne pouvons pas utiliser un autre nickel.

34
00:01:47,270 --> 00:01:51,140
Donc, nous procédons à la dernière pièce à
notre disposition, qui sont les pièces de monnaie.

35
00:01:51,140 --> 00:01:52,270
>> Et pouvons-nous utiliser sou?

36
00:01:52,270 --> 00:01:59,060
Eh bien, yes-- et nous nous retrouvons à l'aide de deux
pennies pour un total de quatre pièces.

37
00:01:59,060 --> 00:02:01,430
>> Une fois que vous avez terminé, le
programme ressemblera à ceci.

38
00:02:01,430 --> 00:02:03,710
Une fois que l'utilisateur exécute le
programme gourmand, ils vont

39
00:02:03,710 --> 00:02:07,270
être invité à donner le montant de
changement de dollars qui leur est dû.

40
00:02:07,270 --> 00:02:11,140
Et puis votre sortie programme de volonté
le montant minimum de pièces de monnaie

41
00:02:11,140 --> 00:02:14,740
que le caissier gourmand utiliserait
de faire cette quantité de changement.

42
00:02:14,740 --> 00:02:18,160
>> Alors maintenant, nous allons briser ce
vers le bas dans nos sous-tâches.

43
00:02:18,160 --> 00:02:21,410
Nous allons d'abord pour que notre
utilisateur pour une quantité de changement.

44
00:02:21,410 --> 00:02:25,630
Et, comme pour toute entrée d'utilisateur, nous voulons
assurez-vous que nous validons cette entrée

45
00:02:25,630 --> 00:02:29,360
et veiller à ce que nous pouvons utiliser cette
entrée pour le reste de notre programme.

46
00:02:29,360 --> 00:02:32,480
Ensuite, nous allons toujours
utiliser le point le plus grand

47
00:02:32,480 --> 00:02:35,240
et de garder trace des pièces utilisées.

48
00:02:35,240 --> 00:02:39,080
Et enfin, imprimer la finale
nombre de pièces que nous avons utilisé.

49
00:02:39,080 --> 00:02:40,970
>> Donc, nous allons parler de demander.

50
00:02:40,970 --> 00:02:43,550
Le montant doit faire cents,
et cela est en dollars.

51
00:02:43,550 --> 00:02:48,440
Et donc pour le dollar, nous allons
d'utiliser le type de variable flottante.

52
00:02:48,440 --> 00:02:52,390
Maintenant, chaque fois que vous demandez à un utilisateur pour l'entrée,
vous voulez vous assurer qu'il est valide.

53
00:02:52,390 --> 00:02:56,640
Et ici, nous aimons profiter
de la boucle do-while construction.

54
00:02:56,640 --> 00:03:00,320
>> Une boucle do-while exécutera la
le corps de la boucle au moins une fois.

55
00:03:00,320 --> 00:03:01,650
Donc, c'est très pratique.

56
00:03:01,650 --> 00:03:05,510
Nous savons que nous devons inciter le
au moins une fois pour un flotteur utilisateur.

57
00:03:05,510 --> 00:03:07,100
Maintenant, si ce flotteur est valide.

58
00:03:07,100 --> 00:03:07,710
C'est génial.

59
00:03:07,710 --> 00:03:08,460
Nous passons.

60
00:03:08,460 --> 00:03:11,910
Mais sinon, la boucle assurera
que nous obtenons un flotteur bon

61
00:03:11,910 --> 00:03:16,810
en répétant continuellement jusqu'à ce que
l'utilisateur nous donne une valeur valide.

62
00:03:16,810 --> 00:03:18,760
>> Maintenant, pour le do-tout
condition de la boucle, nous avons besoin

63
00:03:18,760 --> 00:03:22,000
d'examiner ce que cela signifie
d'avoir un flotteur non valide.

64
00:03:22,000 --> 00:03:24,220
Ainsi, pour le contexte de
ce problème, probablement

65
00:03:24,220 --> 00:03:27,450
il est logique juste
accepter des valeurs positives.

66
00:03:27,450 --> 00:03:32,010
>> Donc déplacer on-- nous avons obtenu une
la valeur en dollars de l'utilisateur.

67
00:03:32,010 --> 00:03:35,380
Mais nous avons affaire à des pièces de monnaie,
qui sont entièrement en cents.

68
00:03:35,380 --> 00:03:38,660
1 $ équivaut à 100 cents.

69
00:03:38,660 --> 00:03:43,670
Donc, une bonne chose à faire est de
convertir ces valeurs en cents.

70
00:03:43,670 --> 00:03:48,380
>> Maintenant, lors de la conversion d'un flotteur
à un nombre entier, donc de dollars pour cents,

71
00:03:48,380 --> 00:03:52,230
nous voulons nous assurer que nous sommes prudents
à propos de virgule flottante imprécision.

72
00:03:52,230 --> 00:03:55,260
Cela signifie donc que that-- disent
mon dollar value-- mon flotteur

73
00:03:55,260 --> 00:04:00,260
value-- il y avait encore 2 $, encore
peut-être quelques chiffres errants là-dedans.

74
00:04:00,260 --> 00:04:04,590
Donc, nous voulons faire en sorte que non seulement
ne nous multiplions par 100 pour obtenir les cents,

75
00:04:04,590 --> 00:04:06,480
mais nous arrondissons aussi loin.

76
00:04:06,480 --> 00:04:09,210
>> Nous avons donc maintenant le montant
du changement dû à l'utilisateur.

77
00:04:09,210 --> 00:04:13,430
Initialement, nous avions obtenu en dollars,
et maintenant nous avons converti à cents.

78
00:04:13,430 --> 00:04:17,029
Alors maintenant, nous pouvons procéder avec le cœur de
l'algorithme glouton, qui est toujours

79
00:04:17,029 --> 00:04:19,220
en utilisant la plus grande pièce possible.

80
00:04:19,220 --> 00:04:21,930
Alors que nous faisons cela,
il est essentiel que nous avons aussi

81
00:04:21,930 --> 00:04:25,360
garder une trace de combien de pièces sont
va être renvoyée à l'utilisateur

82
00:04:25,360 --> 00:04:28,630
ainsi que le reste
changer dû à l'utilisateur.

83
00:04:28,630 --> 00:04:31,130
>> Le programme se penchera
quelque chose comme ça.

84
00:04:31,130 --> 00:04:34,190
Une fois que vous obtenez le montant de
dollars et convertir en cents,

85
00:04:34,190 --> 00:04:35,790
alors vous allez entrer dans une boucle.

86
00:04:35,790 --> 00:04:38,400
Alors quarts peuvent être
used-- c'est-à-dire

87
00:04:38,400 --> 00:04:43,660
tandis que le montant du changement dû à la
l'utilisateur est supérieur ou égal à 0,25 $,

88
00:04:43,660 --> 00:04:45,040
vous utiliserez un quart.

89
00:04:45,040 --> 00:04:47,000
>> Maintenant, qu'est-ce que l'utilisation d'un quart implique?

90
00:04:47,000 --> 00:04:51,280
Eh bien, One-- vous augmenterez la pièce de monnaie
compter pour être retournées à l'utilisateur.

91
00:04:51,280 --> 00:04:55,890
Et deuxièmement, vous diminuez le courant
quantité de changement dû à l'utilisateur

92
00:04:55,890 --> 00:04:57,520
de 0,25 $.

93
00:04:57,520 --> 00:05:00,680
>> Après avoir répété jusqu'à ce que
quarts ne peuvent plus être utilisés,

94
00:05:00,680 --> 00:05:04,630
procéder à la prochaine plus grande
coin-- dans ce cas, dimes, 0,10 $.

95
00:05:04,630 --> 00:05:07,750
Donc, vous allez entrer dans cette boucle jusqu'à ce
vous ne pouvez plus utiliser dimes.

96
00:05:07,750 --> 00:05:10,720
Ensuite, passez à la prochaine
plus grande pièce, nickels.

97
00:05:10,720 --> 00:05:14,810
Après nickels ne peuvent plus être utilisés,
utiliser le montant restant en pennies.

98
00:05:14,810 --> 00:05:17,800
Et enfin, imprimez la
nombre de pièces utilisées.

99
00:05:17,800 --> 00:05:20,350
>> Une autre façon que vous pouvez
aborder le problème gourmand

100
00:05:20,350 --> 00:05:22,950
est d'utiliser l'approche de modulo.

101
00:05:22,950 --> 00:05:25,690
Modulo est un opérateur
qui renvoie le reste

102
00:05:25,690 --> 00:05:27,680
de la division entre deux nombres.

103
00:05:27,680 --> 00:05:30,270
Dire que j'avais 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Eh bien, 5 est un facteur de 50,
de sorte que le reste sera de 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- bien, 10 est également un facteur
de 50, de sorte que le reste est également 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- bien, un certain nombre se mod
ne va pas avoir d'autres.

107
00:05:43,660 --> 00:05:45,510
>> Qu'en est-il 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Eh bien, 49 va seulement dans 50 fois.

109
00:05:47,910 --> 00:05:50,290
Donc, le reste va être 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 va
vous donner un reste de 3.

111
00:05:55,180 --> 00:05:59,120
>> Alors, comment pouvons-nous utiliser modulo
et peut-être une certaine division

112
00:05:59,120 --> 00:06:01,690
mettre en œuvre notre algorithme glouton?

113
00:06:01,690 --> 00:06:05,550
Eh bien, nous voulons toujours rester fidèle à la
coeur de la gourmande algorithm-- que

114
00:06:05,550 --> 00:06:07,910
est en utilisant la plus grande pièce possible.

115
00:06:07,910 --> 00:06:14,570
>> Donc, nous allons nous demander si nous pouvons utiliser toute
quarts pour revenir à 0,32 $ à l'utilisateur.

116
00:06:14,570 --> 00:06:20,070
Eh bien, 32 mod 25 donne
nous un reste de 0,07 $.

117
00:06:20,070 --> 00:06:24,500
Donc, qui nous dit que nous pouvons certainement
utiliser un quart avec 0,07 $ restants.

118
00:06:24,500 --> 00:06:26,180
>> Peut-on utiliser ensuite des pièces de dix cents?

119
00:06:26,180 --> 00:06:32,740
Eh bien, parce no-- 0,07 $ mod
0,10 $ nous donne un reste de 7.

120
00:06:32,740 --> 00:06:34,960
10 ne va pas dans 7 à tous.

121
00:06:34,960 --> 00:06:36,390
>> Alors pouvons-nous utiliser nickels?

122
00:06:36,390 --> 00:06:40,490
0,07 Well $ mod 5 cents
nous donne deux autres.

123
00:06:40,490 --> 00:06:42,930
Et enfin, peut-on utiliser des pièces de monnaie?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 nous donne 0,
qui est finalement ce que

125
00:06:45,930 --> 00:06:48,160
nous voulons parce qu'alors que
signifie que nous sommes revenus

126
00:06:48,160 --> 00:06:50,160
à l'utilisateur tous les changements dus.

127
00:06:50,160 --> 00:06:54,320
>> Alors maintenant, vous avez deux façons possibles de
la mise en œuvre de la algorithm-- gourmande

128
00:06:54,320 --> 00:06:59,230
une avec des boucles et l'autre avec
combinaison de modulo et la division.

129
00:06:59,230 --> 00:07:03,010
Donc finalement, nous avons juste besoin de
imprimer le nombre final de pièces de monnaie.

130
00:07:03,010 --> 00:07:06,520
>> Si je voulais vous dire que je devais
3 animaux et cette valeur a été hardcoded,

131
00:07:06,520 --> 00:07:09,240
alors je pourrais simplement utiliser un
simple énoncé de test d'impression.

132
00:07:09,240 --> 00:07:12,320
Mais notre valeur est en fait
stocké dans une variable.

133
00:07:12,320 --> 00:07:15,260
Alors, comment vous imprimez-vous le
les valeurs stockées dans des variables?

134
00:07:15,260 --> 00:07:17,880
>> Pour cela, nous prenons
avantage de placeholders.

135
00:07:17,880 --> 00:07:21,540
Disons que je l'avais déjà déclaré
un nombre entier initialisée n.

136
00:07:21,540 --> 00:07:25,170
Puis, plus tard si je voulais imprimer que
valeur, alors j'écrire la chaîne.

137
00:07:25,170 --> 00:07:30,500
Et au lieu de cette valeur, je voudrais utiliser
un espace réservé pour que integer--% i.

138
00:07:30,500 --> 00:07:33,800
Puis après la chaîne, j'ai un
virgule, suivie de la variable

139
00:07:33,800 --> 00:07:34,950
que je veux imprimer.

140
00:07:34,950 --> 00:07:38,550
Et plus tard, quand elle imprime,
il va imprimer la valeur de n.

141
00:07:38,550 --> 00:07:41,570
>> Je pourrais aussi utiliser un espace réservé
pour un flotteur, par exemple.

142
00:07:41,570 --> 00:07:44,000
Si je voulais vous dire comment
autant d'argent que j'ai dans ma poche,

143
00:07:44,000 --> 00:07:46,820
alors je pourrais dire que j'ai dollars% f.

144
00:07:46,820 --> 00:07:51,330
Et plus tard, quand il imprime, alors n sera
prendre la place de ce lieu porteur.

145
00:07:51,330 --> 00:07:55,530
Je pourrais aussi, par exemple, utiliser plusieurs
placeholders pour plusieurs variables.

146
00:07:55,530 --> 00:07:57,590
Donc, tant que je liste
dans l'ordre, alors je

147
00:07:57,590 --> 00:08:00,390
peut vous dire combien de
les chiens et les chats j'ai.

148
00:08:00,390 --> 00:08:03,710
>> Maintenant, nous savons comment inviter la
l'utilisateur pour une quantité de changement,

149
00:08:03,710 --> 00:08:06,130
faire en sorte que cette entrée
est valide, et nous

150
00:08:06,130 --> 00:08:10,370
ont deux façons possibles de mettre en œuvre
l'algorithme glouton de toujours utiliser

151
00:08:10,370 --> 00:08:12,090
la plus grande pièce possible.

152
00:08:12,090 --> 00:08:15,050
Parce que nous avons gardé la trace de
combien de pièces nous utilisons,

153
00:08:15,050 --> 00:08:19,210
on peut alors imprimer cette valeur à la fin,
indiquant à l'utilisateur combien de pièces ils sont

154
00:08:19,210 --> 00:08:20,240
revenir.

155
00:08:20,240 --> 00:08:24,240
>> Mon nom est le Amayla, et cela est CS50.

156
00:08:24,240 --> 00:08:25,915

