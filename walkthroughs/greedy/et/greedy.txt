Lähme ahne. In ahne, meie ülesanne on mängida rolli ahne kassapidaja. Kasutaja ütleb meile, kuidas palju muutusi me võlgneme neile, ja siis meie ülesanne on arvutada minimaalne arv münte et saame kasutada, et muuta et palju muutusi. 

Alustame näiteks. Ütle kasutaja vajab $ 0,32 tagasi. Me võiks seda teha, andes neist 32 penni, üks sent iga. Või ma võiks kasutada ka viis coins-- poolt andes neile kolm dimes, 0,10 $ iga, ja kaks penni, 0,02 $ iga. Aga mida me kasutame ka vähem münte teha, et? 

Kogu taktika greedy-- olla ahne cashier-- on kasutada suurima mündi võimalik. Nii et kui meil on neljandikku me kasutame neid. Ja siis, kui need otsa, me kasutame dimes, $ 0,10 iga. Siis viiesendised, 5 senti, ja siis alla penni üks sent iga. Kasutades suurim münt võimalik, kui saame, tagame, et me kasutame kõige vähem müntide võimalik teha muutusi. 

Nii saab kõndida see läbi. Kasutaja peab $ 0,32. Nii et me endalt küsima, saame kasutada veerand? Noh, jah saame. Nüüd me ainult ei tea neid $ 0,07 ja me kasutasime ühe mündi. 

Kas me kasutame teise kvartali? Noh, ei. $ 0,07 on väiksem kui $ 0,25, nii et me lähtume Järgmise suurima mündi saadaval. Dimes on $ 0,10 ja jälle ei saa me kasutada dimes. Kuna dimes on väärt $ 0,10, mis on rohkem kui muutuse summa võlgu. 

Läheme viiesendised. Ja, jah, tõepoolest, $ 0,05 on väiksem kui $ 0.10-- nii saame kasutada niklit. Nüüd me ainult võlgu kasutaja $ 0,02, ja me oleme seni kasutanud kaks münti. Me ei saa kasutada teise niklit. Nii siis astume viimase münti Meie käsutuses, mis on penni. 

Ja me saame kasutada senti? Noh, yes-- ja me lõpuks kahe penne kokku neli münti. 

Kui olete lõpetanud, siis Programm näeb välja selline. Kui kasutaja töötab ahne programmi, nad palutakse anda summa muutus dollarit, et nad võlgu. Ja siis teie programm väljund minimaalne kogus münte et ahne kassapidaja kasutab teha, et palju muutusi. 

Vaatame nüüd murda alla meie alamülesannetele. Esiteks me ei kavatse paluda kasutaja summas muutus. Ja nagu iga kasutaja sisend, me tahame veenduge, et me kinnitada, et sisend ning tagada, et saame kasutada, et toetavad ülejäänud meie programmi. Siis läheme alati kasuta suurim punkti võimalik ja jälgida münte kasutada. Ja lõpuks, printida lõpliku müntide arv, mida me kasutada. 

Nii räägime õhutusel. Summa peab tegema senti, ja see on dollarites. Ja nii dollarite eest, me ei kavatse kasutada float muutuja tüübist. Nüüd, kui te küsite kasutaja sisend, soovite veenduda, et see on õige. Ja nii siin me tahame ära DO-samas silmus ehitada. 

Do-samas silmus võttev keha silmus vähemalt üks kord. Nii et see on mugav. Me teame, et meil on vaja, et paluda Kasutaja vähemalt üks kord sularahaga. Nüüd, kui see float on kehtiv. See on suurepärane. Astume. Aga kui mitte, loop tagab et saame korraliku float korrates pidevalt, kuni kasutaja annab meile kehtiv väärtus. 

Nüüd do-ajal loop seisukorras, peame kaaluda, mida see tähendab on kehtetu sularahaga. Nii kontekstis Selle probleemi ilmselt mõttekas ainult aktsepteerida positiivseid väärtusi. 

Nii liigub nüüd-- oleme saanud väärtus dollarites kasutaja. Aga me tegeleme mündid, mis on täielikult senti. $ 1 on samaväärne 100 senti. Nii hea asi, mida teha on teisendada need väärtused senti. 

Nüüd Üleminekul sularahaga täisarv, nii dollarit senti, me tahame veenduda, et me oleme ettevaatlikud umbes murdarv ebatäpsus. Nii et see tähendab selle-- öelda minu dollar value-- minu float value-- oli isegi $ 2, on olemas veel Võib olla mõned hulkuvad numbrid olemas. Nii et me tahame veenduda, et mitte ainult me korrutada 100 saada senti, kuid ka selle ümber lülitada. 

Nüüd on meil summa Muutuste võlgneb kasutaja. Me saadud algselt seda dollarites, ja nüüd oleme ümber selle senti. Nüüd saame jätkata südames ahne algoritmi, mis on alati kasutades suurim mündi võimalik. Kuigi me teeme seda, see on oluline, et me ka jälgida, kui palju münte läheb tagasi kasutaja samuti ülejäänud muuta võlgneb kasutaja. 

Programm näeb midagi sellist. Pärast saad summa dollarit ja muuta, et senti, siis saate sisestada silmus. Kuigi neljandikku võib olla used-- so samas muutuse summa võlgu kasutaja on suurem või võrdne $ 0,25, saate kasutada kvartalis. 

Nüüd, mida teeb abil veerand kaasa toob? Noh, one-- saate suurendada mündi loe tagastatakse kasutajale. Ja teiseks saate vähendada praegu muutuse summa võlgu tagasi kasutaja by $ 0,25. 

Pärast korrates, et kuni kvartalites ei saa enam kasutada, jätkata järgmisele suurim coin-- sel juhul dimes, $ 0,10. Nii saate sisestada, et loop kuni sa ei saa enam kasutada dimes. Siis edasi järgmise Suurim münt, viiesendised. Pärast viiesendised saa enam kasutada, kasutada ülejäänud summa penni. Ja lõpuks, printida müntide arv kasutada. 

Teine võimalus, et saate läheneda ahne probleem on kasutada modulo lähenemist. Moodul on operaator mis tagastab ülejäänud Divisjoni kahe numbrid. Ütle mul oli 50 mod 5. Noh, 5 on tegur, 50, nii ülejäänu on 0. 50 mod 10-- hästi, 10 on samuti üks tegur 50, nii ülejäänu on ka 0. 50 mod 50-- hästi, ükskõik number mod ise ei saa olema ühtegi ülejäänu. 

Mis umbes 50 mod 49? Noh, 49 vaid läheb 50 korra. Nii ülejäänu läheb 1. 53 mod 50 läheb teile ülejäänud 3. 

Niisiis, kuidas me kasutame moodul ja võibolla mõned jagunemine rakendada oma ahne algoritm? Noh, me ikka tahame jääda truuks süda ahne algorithm-- et kasutab suurima mündi võimalik. 

Nii saab endalt küsima, kas me saame kasutada mis tahes neljandikku naasta $ 0,32 kasutajale. Noh, 32 mod 25 annab meile järelejäänud $ 0,07. Nii, mis ütleb meile, et me saame kindlasti kasutada ühte kvartalis $ 0,07 jäänud. 

Kas me siis kasutage dimes? Noh, ei-- sest $ 0,07 mod $ 0,10 annab meile ülejäänud 7. 10 ei lähe arvesse 7 üldse. 

Siis saame kasutada viiesendised? Noh $ 0,07 mod 5 senti annab meile kaks ülejäänud. Ja lõpuks, me saame kasutada mistahes penni? 2 mod 1 annab meile 0, mis on lõppkokkuvõttes me tahame, sest siis tähendab, et me oleme tagasi kasutaja kõik muutus võlgu. 

Nüüd olete kaks võimalust rakendamise ahne algorithm-- üks aasadega ja üks kombinatsioon moodul ja jagunemine. Nii lõpuks me lihtsalt vaja prindi lõplik arv münte. 

Kui ma tahtsin teile öelda, et mul oli 3 lemmikloomad ja selle väärtus oli kõva kodeeritud, siis ma saaks lihtsalt kasutada Lihtne printida test avalduse. Aga meie väärtus on tegelikult salvestatud muutuja. Niisiis, kuidas sa printida salvestatud väärtusi muutujate? 

Sel võtame ära kohatäitjaid. Öelda, et ma juba deklareerinud initsialiseeritud täisarv n. Siis hiljem, kui ma tahtsin printida, et väärtus, siis ma kirjutan string. Ja selle asemel, et väärtus tahaksin kasutada kohatäide, et integer--% i. Siis pärast string, mul on eralda, millele järgneb muutuja et ma tahan printida. Ja hiljem, kui ta prindib, see saab printida n väärtus. 

Ma võiks kasutada ka kohatäitja eest sularahaga, näiteks. Kui ma tahtsin öelda, kuidas palju raha mul taskus, siis ma võiks öelda, mul on% f dollarit. Ja hiljem, kui ta prindib, siis n tahe võtta koht selle koha omanik. Ma võiks ka näiteks kasutada mitut kohatäidetest mitme muutuja. Nii kaua kui mina list neid selleks, siis ma võib öelda, kui palju koerte ja kasside olen. 

Nüüd me teame, kuidas selleni, et kasutaja jaoks muutuse summa tagama, et sisend on kehtiv, ja siis me on kaks võimalust rakendada ahne algoritmi kasutatakse alati suurim mündi võimalik. Kuna me oleme hoidnud silma peal kui palju münte me kasutame siis saame trükkida, et väärtus lõpus, teatades kasutajale, kui palju münte nad tagasi saama. 

Minu nimi on Amayla, ja see on CS50. 