1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Lähme ahne.

3
00:00:02,900 --> 00:00:06,810
In ahne, meie ülesanne on mängida
rolli ahne kassapidaja.

4
00:00:06,810 --> 00:00:09,750
Kasutaja ütleb meile, kuidas
palju muutusi me võlgneme neile,

5
00:00:09,750 --> 00:00:13,520
ja siis meie ülesanne on arvutada
minimaalne arv münte

6
00:00:13,520 --> 00:00:17,240
et saame kasutada, et muuta
et palju muutusi.

7
00:00:17,240 --> 00:00:19,560
>> Alustame näiteks.

8
00:00:19,560 --> 00:00:23,170
Ütle kasutaja vajab $ 0,32 tagasi.

9
00:00:23,170 --> 00:00:28,960
Me võiks seda teha, andes
neist 32 penni, üks sent iga.

10
00:00:28,960 --> 00:00:35,180
Või ma võiks kasutada ka viis coins-- poolt
andes neile kolm dimes, 0,10 $ iga,

11
00:00:35,180 --> 00:00:38,060
ja kaks penni, 0,02 $ iga.

12
00:00:38,060 --> 00:00:42,580
Aga mida me kasutame ka
vähem münte teha, et?

13
00:00:42,580 --> 00:00:45,100
>> Kogu taktika greedy--
olla ahne cashier--

14
00:00:45,100 --> 00:00:47,600
on kasutada suurima mündi võimalik.

15
00:00:47,600 --> 00:00:50,670
Nii et kui meil on
neljandikku me kasutame neid.

16
00:00:50,670 --> 00:00:54,100
Ja siis, kui need otsa,
me kasutame dimes, $ 0,10 iga.

17
00:00:54,100 --> 00:00:58,840
Siis viiesendised, 5 senti, ja
siis alla penni üks sent iga.

18
00:00:58,840 --> 00:01:01,792
Kasutades suurim münt
võimalik, kui saame,

19
00:01:01,792 --> 00:01:07,350
tagame, et me kasutame kõige vähem
müntide võimalik teha muutusi.

20
00:01:07,350 --> 00:01:09,180
>> Nii saab kõndida see läbi.

21
00:01:09,180 --> 00:01:11,660
Kasutaja peab $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Nii et me endalt küsima,
saame kasutada veerand?

23
00:01:14,200 --> 00:01:15,560
Noh, jah saame.

24
00:01:15,560 --> 00:01:19,720
Nüüd me ainult ei tea neid
$ 0,07 ja me kasutasime ühe mündi.

25
00:01:19,720 --> 00:01:20,970
>> Kas me kasutame teise kvartali?

26
00:01:20,970 --> 00:01:21,890
Noh, ei.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 on väiksem kui $ 0,25, nii et me lähtume
Järgmise suurima mündi saadaval.

28
00:01:27,570 --> 00:01:30,690
Dimes on $ 0,10 ja
jälle ei saa me kasutada dimes.

29
00:01:30,690 --> 00:01:35,480
Kuna dimes on väärt $ 0,10, mis
on rohkem kui muutuse summa võlgu.

30
00:01:35,480 --> 00:01:36,790
>> Läheme viiesendised.

31
00:01:36,790 --> 00:01:40,890
Ja, jah, tõepoolest, $ 0,05 on väiksem kui
$ 0.10-- nii saame kasutada niklit.

32
00:01:40,890 --> 00:01:46,104
Nüüd me ainult võlgu kasutaja $ 0,02,
ja me oleme seni kasutanud kaks münti.

33
00:01:46,104 --> 00:01:47,270
Me ei saa kasutada teise niklit.

34
00:01:47,270 --> 00:01:51,140
Nii siis astume viimase münti
Meie käsutuses, mis on penni.

35
00:01:51,140 --> 00:01:52,270
>> Ja me saame kasutada senti?

36
00:01:52,270 --> 00:01:59,060
Noh, yes-- ja me lõpuks kahe
penne kokku neli münti.

37
00:01:59,060 --> 00:02:01,430
>> Kui olete lõpetanud, siis
Programm näeb välja selline.

38
00:02:01,430 --> 00:02:03,710
Kui kasutaja töötab
ahne programmi, nad

39
00:02:03,710 --> 00:02:07,270
palutakse anda summa
muutus dollarit, et nad võlgu.

40
00:02:07,270 --> 00:02:11,140
Ja siis teie programm väljund
minimaalne kogus münte

41
00:02:11,140 --> 00:02:14,740
et ahne kassapidaja kasutab
teha, et palju muutusi.

42
00:02:14,740 --> 00:02:18,160
>> Vaatame nüüd murda
alla meie alamülesannetele.

43
00:02:18,160 --> 00:02:21,410
Esiteks me ei kavatse paluda
kasutaja summas muutus.

44
00:02:21,410 --> 00:02:25,630
Ja nagu iga kasutaja sisend, me tahame
veenduge, et me kinnitada, et sisend

45
00:02:25,630 --> 00:02:29,360
ning tagada, et saame kasutada, et
toetavad ülejäänud meie programmi.

46
00:02:29,360 --> 00:02:32,480
Siis läheme alati
kasuta suurim punkti võimalik

47
00:02:32,480 --> 00:02:35,240
ja jälgida münte kasutada.

48
00:02:35,240 --> 00:02:39,080
Ja lõpuks, printida lõpliku
müntide arv, mida me kasutada.

49
00:02:39,080 --> 00:02:40,970
>> Nii räägime õhutusel.

50
00:02:40,970 --> 00:02:43,550
Summa peab tegema senti,
ja see on dollarites.

51
00:02:43,550 --> 00:02:48,440
Ja nii dollarite eest, me ei kavatse
kasutada float muutuja tüübist.

52
00:02:48,440 --> 00:02:52,390
Nüüd, kui te küsite kasutaja sisend,
soovite veenduda, et see on õige.

53
00:02:52,390 --> 00:02:56,640
Ja nii siin me tahame ära
DO-samas silmus ehitada.

54
00:02:56,640 --> 00:03:00,320
>> Do-samas silmus võttev
keha silmus vähemalt üks kord.

55
00:03:00,320 --> 00:03:01,650
Nii et see on mugav.

56
00:03:01,650 --> 00:03:05,510
Me teame, et meil on vaja, et paluda
Kasutaja vähemalt üks kord sularahaga.

57
00:03:05,510 --> 00:03:07,100
Nüüd, kui see float on kehtiv.

58
00:03:07,100 --> 00:03:07,710
See on suurepärane.

59
00:03:07,710 --> 00:03:08,460
Astume.

60
00:03:08,460 --> 00:03:11,910
Aga kui mitte, loop tagab
et saame korraliku float

61
00:03:11,910 --> 00:03:16,810
korrates pidevalt, kuni
kasutaja annab meile kehtiv väärtus.

62
00:03:16,810 --> 00:03:18,760
>> Nüüd do-ajal
loop seisukorras, peame

63
00:03:18,760 --> 00:03:22,000
kaaluda, mida see tähendab
on kehtetu sularahaga.

64
00:03:22,000 --> 00:03:24,220
Nii kontekstis
Selle probleemi ilmselt

65
00:03:24,220 --> 00:03:27,450
mõttekas ainult
aktsepteerida positiivseid väärtusi.

66
00:03:27,450 --> 00:03:32,010
>> Nii liigub nüüd-- oleme saanud
väärtus dollarites kasutaja.

67
00:03:32,010 --> 00:03:35,380
Aga me tegeleme mündid,
mis on täielikult senti.

68
00:03:35,380 --> 00:03:38,660
$ 1 on samaväärne 100 senti.

69
00:03:38,660 --> 00:03:43,670
Nii hea asi, mida teha on
teisendada need väärtused senti.

70
00:03:43,670 --> 00:03:48,380
>> Nüüd Üleminekul sularahaga
täisarv, nii dollarit senti,

71
00:03:48,380 --> 00:03:52,230
me tahame veenduda, et me oleme ettevaatlikud
umbes murdarv ebatäpsus.

72
00:03:52,230 --> 00:03:55,260
Nii et see tähendab selle-- öelda
minu dollar value-- minu float

73
00:03:55,260 --> 00:04:00,260
value-- oli isegi $ 2, on olemas veel
Võib olla mõned hulkuvad numbrid olemas.

74
00:04:00,260 --> 00:04:04,590
Nii et me tahame veenduda, et mitte ainult
me korrutada 100 saada senti,

75
00:04:04,590 --> 00:04:06,480
kuid ka selle ümber lülitada.

76
00:04:06,480 --> 00:04:09,210
>> Nüüd on meil summa
Muutuste võlgneb kasutaja.

77
00:04:09,210 --> 00:04:13,430
Me saadud algselt seda dollarites,
ja nüüd oleme ümber selle senti.

78
00:04:13,430 --> 00:04:17,029
Nüüd saame jätkata südames
ahne algoritmi, mis on alati

79
00:04:17,029 --> 00:04:19,220
kasutades suurim mündi võimalik.

80
00:04:19,220 --> 00:04:21,930
Kuigi me teeme seda,
see on oluline, et me ka

81
00:04:21,930 --> 00:04:25,360
jälgida, kui palju münte
läheb tagasi kasutaja

82
00:04:25,360 --> 00:04:28,630
samuti ülejäänud
muuta võlgneb kasutaja.

83
00:04:28,630 --> 00:04:31,130
>> Programm näeb
midagi sellist.

84
00:04:31,130 --> 00:04:34,190
Pärast saad summa
dollarit ja muuta, et senti,

85
00:04:34,190 --> 00:04:35,790
siis saate sisestada silmus.

86
00:04:35,790 --> 00:04:38,400
Kuigi neljandikku võib olla
used-- so

87
00:04:38,400 --> 00:04:43,660
samas muutuse summa võlgu
kasutaja on suurem või võrdne $ 0,25,

88
00:04:43,660 --> 00:04:45,040
saate kasutada kvartalis.

89
00:04:45,040 --> 00:04:47,000
>> Nüüd, mida teeb abil veerand kaasa toob?

90
00:04:47,000 --> 00:04:51,280
Noh, one-- saate suurendada mündi
loe tagastatakse kasutajale.

91
00:04:51,280 --> 00:04:55,890
Ja teiseks saate vähendada praegu
muutuse summa võlgu tagasi kasutaja

92
00:04:55,890 --> 00:04:57,520
by $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Pärast korrates, et kuni
kvartalites ei saa enam kasutada,

94
00:05:00,680 --> 00:05:04,630
jätkata järgmisele suurim
coin-- sel juhul dimes, $ 0,10.

95
00:05:04,630 --> 00:05:07,750
Nii saate sisestada, et loop kuni
sa ei saa enam kasutada dimes.

96
00:05:07,750 --> 00:05:10,720
Siis edasi järgmise
Suurim münt, viiesendised.

97
00:05:10,720 --> 00:05:14,810
Pärast viiesendised saa enam kasutada,
kasutada ülejäänud summa penni.

98
00:05:14,810 --> 00:05:17,800
Ja lõpuks, printida
müntide arv kasutada.

99
00:05:17,800 --> 00:05:20,350
>> Teine võimalus, et saate
läheneda ahne probleem

100
00:05:20,350 --> 00:05:22,950
on kasutada modulo lähenemist.

101
00:05:22,950 --> 00:05:25,690
Moodul on operaator
mis tagastab ülejäänud

102
00:05:25,690 --> 00:05:27,680
Divisjoni kahe numbrid.

103
00:05:27,680 --> 00:05:30,270
Ütle mul oli 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Noh, 5 on tegur, 50,
nii ülejäänu on 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- hästi, 10 on samuti üks tegur
50, nii ülejäänu on ka 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- hästi, ükskõik number mod ise
ei saa olema ühtegi ülejäänu.

107
00:05:43,660 --> 00:05:45,510
>> Mis umbes 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Noh, 49 vaid läheb 50 korra.

109
00:05:47,910 --> 00:05:50,290
Nii ülejäänu läheb 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 läheb
teile ülejäänud 3.

111
00:05:55,180 --> 00:05:59,120
>> Niisiis, kuidas me kasutame moodul
ja võibolla mõned jagunemine

112
00:05:59,120 --> 00:06:01,690
rakendada oma ahne algoritm?

113
00:06:01,690 --> 00:06:05,550
Noh, me ikka tahame jääda truuks
süda ahne algorithm-- et

114
00:06:05,550 --> 00:06:07,910
kasutab suurima mündi võimalik.

115
00:06:07,910 --> 00:06:14,570
>> Nii saab endalt küsima, kas me saame kasutada mis tahes
neljandikku naasta $ 0,32 kasutajale.

116
00:06:14,570 --> 00:06:20,070
Noh, 32 mod 25 annab
meile järelejäänud $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Nii, mis ütleb meile, et me saame kindlasti
kasutada ühte kvartalis $ 0,07 jäänud.

118
00:06:24,500 --> 00:06:26,180
>> Kas me siis kasutage dimes?

119
00:06:26,180 --> 00:06:32,740
Noh, ei-- sest $ 0,07 mod
$ 0,10 annab meile ülejäänud 7.

120
00:06:32,740 --> 00:06:34,960
10 ei lähe arvesse 7 üldse.

121
00:06:34,960 --> 00:06:36,390
>> Siis saame kasutada viiesendised?

122
00:06:36,390 --> 00:06:40,490
Noh $ 0,07 mod 5 senti
annab meile kaks ülejäänud.

123
00:06:40,490 --> 00:06:42,930
Ja lõpuks, me saame kasutada mistahes penni?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 annab meile 0,
mis on lõppkokkuvõttes

125
00:06:45,930 --> 00:06:48,160
me tahame, sest siis
tähendab, et me oleme tagasi

126
00:06:48,160 --> 00:06:50,160
kasutaja kõik muutus võlgu.

127
00:06:50,160 --> 00:06:54,320
>> Nüüd olete kaks võimalust
rakendamise ahne algorithm--

128
00:06:54,320 --> 00:06:59,230
üks aasadega ja üks
kombinatsioon moodul ja jagunemine.

129
00:06:59,230 --> 00:07:03,010
Nii lõpuks me lihtsalt vaja
prindi lõplik arv münte.

130
00:07:03,010 --> 00:07:06,520
>> Kui ma tahtsin teile öelda, et mul oli
3 lemmikloomad ja selle väärtus oli kõva kodeeritud,

131
00:07:06,520 --> 00:07:09,240
siis ma saaks lihtsalt kasutada
Lihtne printida test avalduse.

132
00:07:09,240 --> 00:07:12,320
Aga meie väärtus on tegelikult
salvestatud muutuja.

133
00:07:12,320 --> 00:07:15,260
Niisiis, kuidas sa printida
salvestatud väärtusi muutujate?

134
00:07:15,260 --> 00:07:17,880
>> Sel võtame
ära kohatäitjaid.

135
00:07:17,880 --> 00:07:21,540
Öelda, et ma juba deklareerinud
initsialiseeritud täisarv n.

136
00:07:21,540 --> 00:07:25,170
Siis hiljem, kui ma tahtsin printida, et
väärtus, siis ma kirjutan string.

137
00:07:25,170 --> 00:07:30,500
Ja selle asemel, et väärtus tahaksin kasutada
kohatäide, et integer--% i.

138
00:07:30,500 --> 00:07:33,800
Siis pärast string, mul on
eralda, millele järgneb muutuja

139
00:07:33,800 --> 00:07:34,950
et ma tahan printida.

140
00:07:34,950 --> 00:07:38,550
Ja hiljem, kui ta prindib,
see saab printida n väärtus.

141
00:07:38,550 --> 00:07:41,570
>> Ma võiks kasutada ka kohatäitja
eest sularahaga, näiteks.

142
00:07:41,570 --> 00:07:44,000
Kui ma tahtsin öelda, kuidas
palju raha mul taskus,

143
00:07:44,000 --> 00:07:46,820
siis ma võiks öelda, mul on% f dollarit.

144
00:07:46,820 --> 00:07:51,330
Ja hiljem, kui ta prindib, siis n tahe
võtta koht selle koha omanik.

145
00:07:51,330 --> 00:07:55,530
Ma võiks ka näiteks kasutada mitut
kohatäidetest mitme muutuja.

146
00:07:55,530 --> 00:07:57,590
Nii kaua kui mina list
neid selleks, siis ma

147
00:07:57,590 --> 00:08:00,390
võib öelda, kui palju
koerte ja kasside olen.

148
00:08:00,390 --> 00:08:03,710
>> Nüüd me teame, kuidas selleni, et
kasutaja jaoks muutuse summa

149
00:08:03,710 --> 00:08:06,130
tagama, et sisend
on kehtiv, ja siis me

150
00:08:06,130 --> 00:08:10,370
on kaks võimalust rakendada
ahne algoritmi kasutatakse alati

151
00:08:10,370 --> 00:08:12,090
suurim mündi võimalik.

152
00:08:12,090 --> 00:08:15,050
Kuna me oleme hoidnud silma peal
kui palju münte me kasutame

153
00:08:15,050 --> 00:08:19,210
siis saame trükkida, et väärtus lõpus,
teatades kasutajale, kui palju münte nad

154
00:08:19,210 --> 00:08:20,240
tagasi saama.

155
00:08:20,240 --> 00:08:24,240
>> Minu nimi on Amayla, ja see on CS50.

156
00:08:24,240 --> 00:08:25,915

