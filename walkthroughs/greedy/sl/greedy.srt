1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Pojdiva požrešen.

3
00:00:02,900 --> 00:00:06,810
V požrešen, naša naloga je, da igra
vloga požrešen blagajni.

4
00:00:06,810 --> 00:00:09,750
Uporabnik nam bo povedal, kako
veliko sprememb smo jih dolžni,

5
00:00:09,750 --> 00:00:13,520
in naša naloga je, da izračun
najmanjše število kovancev

6
00:00:13,520 --> 00:00:17,240
ki jih lahko uporabite, da bi
da je znesek spremembe.

7
00:00:17,240 --> 00:00:19,560
>> Začnimo s primerom.

8
00:00:19,560 --> 00:00:23,170
Pravijo, da uporabnik potrebuje 0,32 $ nazaj.

9
00:00:23,170 --> 00:00:28,960
Mi lahko to storite tako, da
jih 32 penijev, vsak cent.

10
00:00:28,960 --> 00:00:35,180
Ali lahko uporabim tudi pet coins-- ga
jim daje tri dimes, 0,10 $ vsak,

11
00:00:35,180 --> 00:00:38,060
in dveh penijev, 0,02 $ vsak.

12
00:00:38,060 --> 00:00:42,580
Vendar pa bi lahko uporabili tudi
manj kovancev, da to?

13
00:00:42,580 --> 00:00:45,100
>> Celoten taktika v greedy--
da je požrešen cashier--

14
00:00:45,100 --> 00:00:47,600
je uporaba največje možno kovanec.

15
00:00:47,600 --> 00:00:50,670
Torej, ko imamo
četrtine jih bomo uporabili.

16
00:00:50,670 --> 00:00:54,100
In potem, ko tisti, zmanjka,
bomo uporabili dimes, 0,10 $ vsak.

17
00:00:54,100 --> 00:00:58,840
Nato nikelj, vsakih 5 centov, in
nato do penijev, vsak cent.

18
00:00:58,840 --> 00:01:01,792
Z največjo kovanec
mogoče, ko smo lahko,

19
00:01:01,792 --> 00:01:07,350
moramo zagotoviti, da bomo uporabili najmanjše število
možnih kovancev, da bi spremembe.

20
00:01:07,350 --> 00:01:09,180
>> Oglejmo si to skozi.

21
00:01:09,180 --> 00:01:11,660
Uporabnik potrebuje 0,32 $.

22
00:01:11,660 --> 00:01:14,200
Tako smo se vprašamo,
lahko uporabljamo četrtino?

23
00:01:14,200 --> 00:01:15,560
No, ja lahko.

24
00:01:15,560 --> 00:01:19,720
Torej, zdaj smo jih samo vedeti
0,07 $, in smo uporabili en kovanec.

25
00:01:19,720 --> 00:01:20,970
>> lahko uporabimo drugo četrtino?

26
00:01:20,970 --> 00:01:21,890
No, no.

27
00:01:21,890 --> 00:01:27,570
0,07 $ je manj kot 0,25 $, tako da bomo nadaljevali
na naslednji največji kovanca voljo.

28
00:01:27,570 --> 00:01:30,690
Dimes so $ 0,10, in
še enkrat, da ne moremo uporabiti dimes.

29
00:01:30,690 --> 00:01:35,480
Ker so dimes vredno 0,10 $, kar
je več kot znesek spremembe dolguje.

30
00:01:35,480 --> 00:01:36,790
>> Gremo nickels.

31
00:01:36,790 --> 00:01:40,890
In ja res, 0,05 $ manj kot
$ 0.10-- tako da lahko uporabite niklja.

32
00:01:40,890 --> 00:01:46,104
Torej, zdaj smo dolžni le uporabniku 0,02 $,
in smo do sedaj uporabljali dva kovanca.

33
00:01:46,104 --> 00:01:47,270
Ne moremo uporabiti drugo niklja.

34
00:01:47,270 --> 00:01:51,140
Torej bomo nadaljevali do zadnjega kovanca na
naša odstranjevanje, ki so penijev.

35
00:01:51,140 --> 00:01:52,270
>> In lahko uporabimo peni?

36
00:01:52,270 --> 00:01:59,060
No, yes-- in smo na koncu s pomočjo dveh
penijev za skupno štirih kovancev.

37
00:01:59,060 --> 00:02:01,430
>> Ko končate je
Program bo videti takole.

38
00:02:01,430 --> 00:02:03,710
Ko uporabnik zažene
požrešen programa, ki jih bom

39
00:02:03,710 --> 00:02:07,270
pozvani, da znesek
sprememba dolarjev, ki si jih dolguje.

40
00:02:07,270 --> 00:02:11,140
In potem bo vaš program izhod
minimalni znesek kovancev

41
00:02:11,140 --> 00:02:14,740
da bi požrešni blagajnik uporabo
da bi ta znesek sprememb.

42
00:02:14,740 --> 00:02:18,160
>> Torej, zdaj pa je prekinil to
dol v naše podopravila.

43
00:02:18,160 --> 00:02:21,410
Najprej bomo, da zahteva naše
Uporabnik za znesek spremembe.

44
00:02:21,410 --> 00:02:25,630
In, kot pri vseh vnos uporabnika, želimo
se prepričajte, da imamo potrditev, da se vnos

45
00:02:25,630 --> 00:02:29,360
in zagotoviti, da lahko uporabimo, da
vhod za preostali del našega programa.

46
00:02:29,360 --> 00:02:32,480
Potem bomo vedno
uporabite največjo možno točko

47
00:02:32,480 --> 00:02:35,240
in slediti kovancev, ki se uporabljajo.

48
00:02:35,240 --> 00:02:39,080
In končno, natisniti končni
število kovancev, ki smo jih uporabili.

49
00:02:39,080 --> 00:02:40,970
>> Torej, kaj je govoril o česar.

50
00:02:40,970 --> 00:02:43,550
Znesek mora centov,
in to je v dolarjih.

51
00:02:43,550 --> 00:02:48,440
In tako za dolarjev, gremo
Za uporabo tipa float spremenljivko.

52
00:02:48,440 --> 00:02:52,390
Zdaj vsakič, ko zahtevajo od uporabnikov za vnos,
želite, da se prepričajte, da je veljavna.

53
00:02:52,390 --> 00:02:56,640
In zato tukaj želimo izkoristiti
zanke konstrukta do-while.

54
00:02:56,640 --> 00:03:00,320
>> Do-while zanko bo izvršitev
Telo zanke vsaj enkrat.

55
00:03:00,320 --> 00:03:01,650
Torej, to pride prav.

56
00:03:01,650 --> 00:03:05,510
Vemo, da moramo morala spodbuditi
Uporabnik vsaj enkrat za likvidna sredstva.

57
00:03:05,510 --> 00:03:07,100
Zdaj, če je to float veljaven.

58
00:03:07,100 --> 00:03:07,710
To je super.

59
00:03:07,710 --> 00:03:08,460
Gremo naprej.

60
00:03:08,460 --> 00:03:11,910
Če pa ne, se bo zanka se zagotovi
da dobimo ustrezno plovec

61
00:03:11,910 --> 00:03:16,810
s stalnim ponavljanjem, dokler
uporabnik nam veljavno vrednost.

62
00:03:16,810 --> 00:03:18,760
>> Zdaj za do-časa
zanka pogoj, moramo

63
00:03:18,760 --> 00:03:22,000
razmisliti, kaj pomeni
da ima neveljavno plovec.

64
00:03:22,000 --> 00:03:24,220
Tako za kontekstu
ta problem, verjetno

65
00:03:24,220 --> 00:03:27,450
je smiselno le
sprejeti pozitivne vrednosti.

66
00:03:27,450 --> 00:03:32,010
>> Tako se gibljejo on-- smo dobimo
Vrednost v dolarjih od uporabnika.

67
00:03:32,010 --> 00:03:35,380
Vendar pa imamo opravka s kovanci,
ki so v celoti centov.

68
00:03:35,380 --> 00:03:38,660
$ 1 je enakovredna 100 centov.

69
00:03:38,660 --> 00:03:43,670
Tako dobra stvar je, da
pretvorbo teh vrednot v centov.

70
00:03:43,670 --> 00:03:48,380
>> Zdaj pri pretvorbi iz float
na celo število, zato dolarjev, da centov,

71
00:03:48,380 --> 00:03:52,230
želimo zagotoviti, da smo previdni
o plavajočo vejico netočnosti.

72
00:03:52,230 --> 00:03:55,260
Torej to pomeni, da that-- reči
Moj dolar value-- moje plovec

73
00:03:55,260 --> 00:04:00,260
value-- bil še 2 $, še vedno
lahko nekaj potepuških številke tam.

74
00:04:00,260 --> 00:04:04,590
Zato želimo zagotoviti, da ne samo,
to pomnožimo s 100, da bi dobili centov,

75
00:04:04,590 --> 00:04:06,480
vendar smo tudi to zaokrožijo.

76
00:04:06,480 --> 00:04:09,210
>> Torej, zdaj imamo znesek
sprememb dolguje za uporabnika.

77
00:04:09,210 --> 00:04:13,430
prvotno smo ga dobili v dolarjih,
in zdaj smo ga pretvori v centov.

78
00:04:13,430 --> 00:04:17,029
Sedaj lahko nadaljujemo s srcem
požrešen algoritem, ki je vedno

79
00:04:17,029 --> 00:04:19,220
uporaba možna največji kovanec.

80
00:04:19,220 --> 00:04:21,930
Medtem ko to počnemo,
je bistveno, da smo tudi

81
00:04:21,930 --> 00:04:25,360
slediti, koliko kovancev so
dogaja, da se vrne uporabniku

82
00:04:25,360 --> 00:04:28,630
kot tudi preostali
spremeniti dolguje za uporabnika.

83
00:04:28,630 --> 00:04:31,130
>> Program bo videti
nekaj podobnega.

84
00:04:31,130 --> 00:04:34,190
Potem dobiš znesek
dolarjev in spremeniti, da centov,

85
00:04:34,190 --> 00:04:35,790
potem boste vnesete zanko.

86
00:04:35,790 --> 00:04:38,400
Medtem ko lahko prostorih je
used-- torej

87
00:04:38,400 --> 00:04:43,660
medtem ko je višina spremembe dolguje na
Uporabnik je večja ali enaka 0,25 $,

88
00:04:43,660 --> 00:04:45,040
boste uporabljali četrtino.

89
00:04:45,040 --> 00:04:47,000
>> Kaj pa zdaj počne s pomočjo četrtino pomenilo?

90
00:04:47,000 --> 00:04:51,280
No, one-- boste povečali kovanec
računajo, da se vrne k uporabniku.

91
00:04:51,280 --> 00:04:55,890
In drugič boš zmanjšal tok
znesek spremembe dolguje nazaj uporabniku

92
00:04:55,890 --> 00:04:57,520
s 0,25 $.

93
00:04:57,520 --> 00:05:00,680
>> Po ponavljati, da do
četrtine se ni več mogoče uporabljati,

94
00:05:00,680 --> 00:05:04,630
nadaljujte z naslednjo največji
coin-- v tem primeru dimes, 0,10 $.

95
00:05:04,630 --> 00:05:07,750
Tako boste vstopiti v to zanko until
ne morete več uporabljati dimes.

96
00:05:07,750 --> 00:05:10,720
Nato se nadaljuje do naslednjega
Največji kovanec, nikelj.

97
00:05:10,720 --> 00:05:14,810
Potem se ni več mogoče uporabljati nikelj,
uporabijo ostali znesek v penijev.

98
00:05:14,810 --> 00:05:17,800
In končno, natisniti
število kovancev uporabiti.

99
00:05:17,800 --> 00:05:20,350
>> Drug način, da lahko
pristop požrešen težave

100
00:05:20,350 --> 00:05:22,950
je uporaba pristopa modulo.

101
00:05:22,950 --> 00:05:25,690
Modulo operator
da vrne preostanek

102
00:05:25,690 --> 00:05:27,680
delitve med dvema številkama.

103
00:05:27,680 --> 00:05:30,270
Povedati, da sem imela 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
No, 5 je faktor 50,
tako da bo preostanek 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- dobro, 10 je tudi dejavnik
50, tako da je preostanek tudi 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- tudi poljubno število se mod
ne bo imela preostanek.

107
00:05:43,660 --> 00:05:45,510
>> Kaj pa 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
No, 49 gre samo v 50 enkrat.

109
00:05:47,910 --> 00:05:50,290
Torej, preostanek pa se bo 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 se bo
vam preostanek 3.

111
00:05:55,180 --> 00:05:59,120
>> Torej, kako lahko uporabimo modulo
in morda nekaj delitev

112
00:05:59,120 --> 00:06:01,690
za izvajanje naše požrešen algoritem?

113
00:06:01,690 --> 00:06:05,550
No, še vedno želijo ostati zvest do
Srce požrešen algorithm-- da

114
00:06:05,550 --> 00:06:07,910
je uporaba največji kovanec mogoče.

115
00:06:07,910 --> 00:06:14,570
>> Torej, kaj je sprašujemo, če lahko uporabimo katerokoli
četrtine vrniti 0,32 $ za uporabnika.

116
00:06:14,570 --> 00:06:20,070
No, 32 mod 25 daje
nas po preostanek 0,07 $.

117
00:06:20,070 --> 00:06:24,500
Tako, da nam pove, da smo lahko zagotovo
uporablja eno četrtino z 0,07 $ preostalo.

118
00:06:24,500 --> 00:06:26,180
>> Lahko potem uporabljajte dimes?

119
00:06:26,180 --> 00:06:32,740
No, no-- ker $ 0,07 mod
0,10 $ nam daje preostanek 7.

120
00:06:32,740 --> 00:06:34,960
10 ne gre v 7. sploh.

121
00:06:34,960 --> 00:06:36,390
>> Nato lahko uporabite nickels?

122
00:06:36,390 --> 00:06:40,490
No $ 0.07 mod 5 centov
nam daje dve preostali.

123
00:06:40,490 --> 00:06:42,930
In nenazadnje, lahko uporabimo vse penijev?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 nam daje 0,
ki je v končni fazi, kaj

125
00:06:45,930 --> 00:06:48,160
želimo, ker potem, da
pomeni, da smo se vrnili

126
00:06:48,160 --> 00:06:50,160
uporabniku vse spremembe dolguje.

127
00:06:50,160 --> 00:06:54,320
>> Zdaj imate dve možne načine
izvajanje požrešen algorithm--

128
00:06:54,320 --> 00:06:59,230
eno z zankami in eno z
Kombinacija modulu in delitev.

129
00:06:59,230 --> 00:07:03,010
Tako na koncu, smo morali
natisniti končno število kovancev.

130
00:07:03,010 --> 00:07:06,520
>> Če sem ti, da sem imel povedati
3 živali in ta vrednost je bila vprogramirano,

131
00:07:06,520 --> 00:07:09,240
potem sem lahko samo uporabite
preprost test tiskanja izjavo.

132
00:07:09,240 --> 00:07:12,320
Toda naš vrednost je dejansko
shranjena v spremenljivki.

133
00:07:12,320 --> 00:07:15,260
Torej, kako si natisnete
Vrednosti shranjene v spremenljivke?

134
00:07:15,260 --> 00:07:17,880
>> Za to vzamemo
Prednost ograde.

135
00:07:17,880 --> 00:07:21,540
Povedati, da sem že prijavil
inicializiran celo število n.

136
00:07:21,540 --> 00:07:25,170
Potem kasneje, če sem hotel natisniti, da
vrednost, potem bi napisal niz.

137
00:07:25,170 --> 00:07:30,500
In namesto da bi te vrednosti bi uporabil
ogrado za to integer--% i.

138
00:07:30,500 --> 00:07:33,800
Potem ko je niz, imam
vejico, čemur sledi spremenljivka

139
00:07:33,800 --> 00:07:34,950
da sem želite natisniti.

140
00:07:34,950 --> 00:07:38,550
In kasneje, ko se natisne,
da bomo natisniti vrednost n.

141
00:07:38,550 --> 00:07:41,570
>> Lahko uporabite tudi ogrado
za likvidna sredstva, na primer.

142
00:07:41,570 --> 00:07:44,000
Če bi želel povedati, kako
veliko gotovine imam v žepu,

143
00:07:44,000 --> 00:07:46,820
potem bi lahko rekel, da sem imel% f dolarjev.

144
00:07:46,820 --> 00:07:51,330
In kasneje, ko se natisne, potem n bo
prevzame mesto imetnikom mesto.

145
00:07:51,330 --> 00:07:55,530
Lahko tudi, na primer, uporaba več
ograde za več spremenljivk.

146
00:07:55,530 --> 00:07:57,590
Torej, dokler sem seznam
jim v redu, potem pa sem

147
00:07:57,590 --> 00:08:00,390
Lahko vam povem, koliko
psi in mačke imam.

148
00:08:00,390 --> 00:08:03,710
>> Zdaj vemo, kako bi morala spodbuditi
Uporabnik za znesek spremembe,

149
00:08:03,710 --> 00:08:06,130
zagotoviti, da ta vložek
velja, potem pa

150
00:08:06,130 --> 00:08:10,370
ima dva možna načina izvajanja
požrešen algoritem vedno uporablja

151
00:08:10,370 --> 00:08:12,090
največji možni kovanec.

152
00:08:12,090 --> 00:08:15,050
Ker smo spremljal
koliko kovancev, ki jo uporabljamo,

153
00:08:15,050 --> 00:08:19,210
potem lahko natisnete to vrednost na koncu,
pove uporabniku, koliko kovancev oni

154
00:08:19,210 --> 00:08:20,240
dobili nazaj.

155
00:08:20,240 --> 00:08:24,240
>> Moje ime je Amayla, in to je CS50.

156
00:08:24,240 --> 00:08:25,915

