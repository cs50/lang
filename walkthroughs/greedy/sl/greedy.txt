Pojdiva požrešen. V požrešen, naša naloga je, da igra vloga požrešen blagajni. Uporabnik nam bo povedal, kako veliko sprememb smo jih dolžni, in naša naloga je, da izračun najmanjše število kovancev ki jih lahko uporabite, da bi da je znesek spremembe. 

Začnimo s primerom. Pravijo, da uporabnik potrebuje 0,32 $ nazaj. Mi lahko to storite tako, da jih 32 penijev, vsak cent. Ali lahko uporabim tudi pet coins-- ga jim daje tri dimes, 0,10 $ vsak, in dveh penijev, 0,02 $ vsak. Vendar pa bi lahko uporabili tudi manj kovancev, da to? 

Celoten taktika v greedy-- da je požrešen cashier-- je uporaba največje možno kovanec. Torej, ko imamo četrtine jih bomo uporabili. In potem, ko tisti, zmanjka, bomo uporabili dimes, 0,10 $ vsak. Nato nikelj, vsakih 5 centov, in nato do penijev, vsak cent. Z največjo kovanec mogoče, ko smo lahko, moramo zagotoviti, da bomo uporabili najmanjše število možnih kovancev, da bi spremembe. 

Oglejmo si to skozi. Uporabnik potrebuje 0,32 $. Tako smo se vprašamo, lahko uporabljamo četrtino? No, ja lahko. Torej, zdaj smo jih samo vedeti 0,07 $, in smo uporabili en kovanec. 

lahko uporabimo drugo četrtino? No, no. 0,07 $ je manj kot 0,25 $, tako da bomo nadaljevali na naslednji največji kovanca voljo. Dimes so $ 0,10, in še enkrat, da ne moremo uporabiti dimes. Ker so dimes vredno 0,10 $, kar je več kot znesek spremembe dolguje. 

Gremo nickels. In ja res, 0,05 $ manj kot $ 0.10-- tako da lahko uporabite niklja. Torej, zdaj smo dolžni le uporabniku 0,02 $, in smo do sedaj uporabljali dva kovanca. Ne moremo uporabiti drugo niklja. Torej bomo nadaljevali do zadnjega kovanca na naša odstranjevanje, ki so penijev. 

In lahko uporabimo peni? No, yes-- in smo na koncu s pomočjo dveh penijev za skupno štirih kovancev. 

Ko končate je Program bo videti takole. Ko uporabnik zažene požrešen programa, ki jih bom pozvani, da znesek sprememba dolarjev, ki si jih dolguje. In potem bo vaš program izhod minimalni znesek kovancev da bi požrešni blagajnik uporabo da bi ta znesek sprememb. 

Torej, zdaj pa je prekinil to dol v naše podopravila. Najprej bomo, da zahteva naše Uporabnik za znesek spremembe. In, kot pri vseh vnos uporabnika, želimo se prepričajte, da imamo potrditev, da se vnos in zagotoviti, da lahko uporabimo, da vhod za preostali del našega programa. Potem bomo vedno uporabite največjo možno točko in slediti kovancev, ki se uporabljajo. In končno, natisniti končni število kovancev, ki smo jih uporabili. 

Torej, kaj je govoril o česar. Znesek mora centov, in to je v dolarjih. In tako za dolarjev, gremo Za uporabo tipa float spremenljivko. Zdaj vsakič, ko zahtevajo od uporabnikov za vnos, želite, da se prepričajte, da je veljavna. In zato tukaj želimo izkoristiti zanke konstrukta do-while. 

Do-while zanko bo izvršitev Telo zanke vsaj enkrat. Torej, to pride prav. Vemo, da moramo morala spodbuditi Uporabnik vsaj enkrat za likvidna sredstva. Zdaj, če je to float veljaven. To je super. Gremo naprej. Če pa ne, se bo zanka se zagotovi da dobimo ustrezno plovec s stalnim ponavljanjem, dokler uporabnik nam veljavno vrednost. 

Zdaj za do-časa zanka pogoj, moramo razmisliti, kaj pomeni da ima neveljavno plovec. Tako za kontekstu ta problem, verjetno je smiselno le sprejeti pozitivne vrednosti. 

Tako se gibljejo on-- smo dobimo Vrednost v dolarjih od uporabnika. Vendar pa imamo opravka s kovanci, ki so v celoti centov. $ 1 je enakovredna 100 centov. Tako dobra stvar je, da pretvorbo teh vrednot v centov. 

Zdaj pri pretvorbi iz float na celo število, zato dolarjev, da centov, želimo zagotoviti, da smo previdni o plavajočo vejico netočnosti. Torej to pomeni, da that-- reči Moj dolar value-- moje plovec value-- bil še 2 $, še vedno lahko nekaj potepuških številke tam. Zato želimo zagotoviti, da ne samo, to pomnožimo s 100, da bi dobili centov, vendar smo tudi to zaokrožijo. 

Torej, zdaj imamo znesek sprememb dolguje za uporabnika. prvotno smo ga dobili v dolarjih, in zdaj smo ga pretvori v centov. Sedaj lahko nadaljujemo s srcem požrešen algoritem, ki je vedno uporaba možna največji kovanec. Medtem ko to počnemo, je bistveno, da smo tudi slediti, koliko kovancev so dogaja, da se vrne uporabniku kot tudi preostali spremeniti dolguje za uporabnika. 

Program bo videti nekaj podobnega. Potem dobiš znesek dolarjev in spremeniti, da centov, potem boste vnesete zanko. Medtem ko lahko prostorih je used-- torej medtem ko je višina spremembe dolguje na Uporabnik je večja ali enaka 0,25 $, boste uporabljali četrtino. 

Kaj pa zdaj počne s pomočjo četrtino pomenilo? No, one-- boste povečali kovanec računajo, da se vrne k uporabniku. In drugič boš zmanjšal tok znesek spremembe dolguje nazaj uporabniku s 0,25 $. 

Po ponavljati, da do četrtine se ni več mogoče uporabljati, nadaljujte z naslednjo največji coin-- v tem primeru dimes, 0,10 $. Tako boste vstopiti v to zanko until ne morete več uporabljati dimes. Nato se nadaljuje do naslednjega Največji kovanec, nikelj. Potem se ni več mogoče uporabljati nikelj, uporabijo ostali znesek v penijev. In končno, natisniti število kovancev uporabiti. 

Drug način, da lahko pristop požrešen težave je uporaba pristopa modulo. Modulo operator da vrne preostanek delitve med dvema številkama. Povedati, da sem imela 50 mod 5. No, 5 je faktor 50, tako da bo preostanek 0. 50 mod 10-- dobro, 10 je tudi dejavnik 50, tako da je preostanek tudi 0. 50 mod 50-- tudi poljubno število se mod ne bo imela preostanek. 

Kaj pa 50 mod 49? No, 49 gre samo v 50 enkrat. Torej, preostanek pa se bo 1. 53 mod 50 se bo vam preostanek 3. 

Torej, kako lahko uporabimo modulo in morda nekaj delitev za izvajanje naše požrešen algoritem? No, še vedno želijo ostati zvest do Srce požrešen algorithm-- da je uporaba največji kovanec mogoče. 

Torej, kaj je sprašujemo, če lahko uporabimo katerokoli četrtine vrniti 0,32 $ za uporabnika. No, 32 mod 25 daje nas po preostanek 0,07 $. Tako, da nam pove, da smo lahko zagotovo uporablja eno četrtino z 0,07 $ preostalo. 

Lahko potem uporabljajte dimes? No, no-- ker $ 0,07 mod 0,10 $ nam daje preostanek 7. 10 ne gre v 7. sploh. 

Nato lahko uporabite nickels? No $ 0.07 mod 5 centov nam daje dve preostali. In nenazadnje, lahko uporabimo vse penijev? 2 mod 1 nam daje 0, ki je v končni fazi, kaj želimo, ker potem, da pomeni, da smo se vrnili uporabniku vse spremembe dolguje. 

Zdaj imate dve možne načine izvajanje požrešen algorithm-- eno z zankami in eno z Kombinacija modulu in delitev. Tako na koncu, smo morali natisniti končno število kovancev. 

Če sem ti, da sem imel povedati 3 živali in ta vrednost je bila vprogramirano, potem sem lahko samo uporabite preprost test tiskanja izjavo. Toda naš vrednost je dejansko shranjena v spremenljivki. Torej, kako si natisnete Vrednosti shranjene v spremenljivke? 

Za to vzamemo Prednost ograde. Povedati, da sem že prijavil inicializiran celo število n. Potem kasneje, če sem hotel natisniti, da vrednost, potem bi napisal niz. In namesto da bi te vrednosti bi uporabil ogrado za to integer--% i. Potem ko je niz, imam vejico, čemur sledi spremenljivka da sem želite natisniti. In kasneje, ko se natisne, da bomo natisniti vrednost n. 

Lahko uporabite tudi ogrado za likvidna sredstva, na primer. Če bi želel povedati, kako veliko gotovine imam v žepu, potem bi lahko rekel, da sem imel% f dolarjev. In kasneje, ko se natisne, potem n bo prevzame mesto imetnikom mesto. Lahko tudi, na primer, uporaba več ograde za več spremenljivk. Torej, dokler sem seznam jim v redu, potem pa sem Lahko vam povem, koliko psi in mačke imam. 

Zdaj vemo, kako bi morala spodbuditi Uporabnik za znesek spremembe, zagotoviti, da ta vložek velja, potem pa ima dva možna načina izvajanja požrešen algoritem vedno uporablja največji možni kovanec. Ker smo spremljal koliko kovancev, ki jo uporabljamo, potem lahko natisnete to vrednost na koncu, pove uporabniku, koliko kovancev oni dobili nazaj. 

Moje ime je Amayla, in to je CS50. 