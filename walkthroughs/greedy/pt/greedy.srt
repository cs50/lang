1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Vamos ficar ganancioso.

3
00:00:02,900 --> 00:00:06,810
Em gananciosos, nosso trabalho é para jogar
o papel de um caixa ganancioso.

4
00:00:06,810 --> 00:00:09,750
O usuário vai nos dizer como
muita mudança que lhes devemos,

5
00:00:09,750 --> 00:00:13,520
e, em seguida, o nosso trabalho é calcular
o número mínimo de moedas

6
00:00:13,520 --> 00:00:17,240
que podemos usar para fazer
essa quantidade de mudança.

7
00:00:17,240 --> 00:00:19,560
>> Vamos começar com um exemplo.

8
00:00:19,560 --> 00:00:23,170
Digamos que o usuário necessita de US $ 0,32 de volta.

9
00:00:23,170 --> 00:00:28,960
Poderíamos fazer isso, dando
-lhes 32 centavos, um centavo cada.

10
00:00:28,960 --> 00:00:35,180
Ou eu também poderia usar cinco coins-- por
dando-lhes três moedas de dez centavos, $ 0,10 cada,

11
00:00:35,180 --> 00:00:38,060
e dois centavos, $ 0,02 cada.

12
00:00:38,060 --> 00:00:42,580
Mas poderíamos usar, mesmo
menos moedas para fazer isso?

13
00:00:42,580 --> 00:00:45,100
>> Toda a tática em greedy--
para ser um cashier-- gananciosos

14
00:00:45,100 --> 00:00:47,600
é a utilização do maior possível moeda.

15
00:00:47,600 --> 00:00:50,670
Assim, sempre que temos
trimestres vamos usá-los.

16
00:00:50,670 --> 00:00:54,100
E, em seguida, uma vez que aqueles correr para fora,
vamos usar moedas de dez centavos, $ 0,10 cada.

17
00:00:54,100 --> 00:00:58,840
Então níqueis, 5 centavos cada, e
em seguida, para baixo para moedas de um centavo, um centavo cada.

18
00:00:58,840 --> 00:01:01,792
Ao utilizar a maior moeda
possível sempre que possível,

19
00:01:01,792 --> 00:01:07,350
temos o cuidado de usar o menor número
de moedas possível fazer a mudança.

20
00:01:07,350 --> 00:01:09,180
>> Então, vamos andar neste meio.

21
00:01:09,180 --> 00:01:11,660
O usuário precisa de US $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Então nos perguntamos:
podemos usar um quarto?

23
00:01:14,200 --> 00:01:15,560
Bem, sim, nós podemos.

24
00:01:15,560 --> 00:01:19,720
Então, agora nós só conhecê-los
$ 0,07, e usamos uma moeda.

25
00:01:19,720 --> 00:01:20,970
>> podemos usar um outro quarto?

26
00:01:20,970 --> 00:01:21,890
Bem não.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 é menos de US $ 0,25, para que proceda
para a próxima maior moeda disponível.

28
00:01:27,570 --> 00:01:30,690
Dimes é de US $ 0,10, e
novamente, não pode usar moedas de dez centavos.

29
00:01:30,690 --> 00:01:35,480
Porque moedas valem US $ 0,10, o que
é mais do que a quantidade de mudança devido.

30
00:01:35,480 --> 00:01:36,790
>> Vamos para níqueis.

31
00:01:36,790 --> 00:01:40,890
E, sim, realmente, $ 0,05 é menor do que
$ 0.10-- por isso podemos usar um níquel.

32
00:01:40,890 --> 00:01:46,104
Então, agora nós só deve o usuário $ 0,02,
e temos até agora utilizadas duas moedas.

33
00:01:46,104 --> 00:01:47,270
Não podemos usar outro níquel.

34
00:01:47,270 --> 00:01:51,140
Portanto, depois, avançar para a última moeda no
nossa disposição, que são as moedas de um centavo.

35
00:01:51,140 --> 00:01:52,270
>> E podemos usar dinheiro?

36
00:01:52,270 --> 00:01:59,060
Bem, sim-- e acabamos usando dois
tostões para um total de quatro moedas.

37
00:01:59,060 --> 00:02:01,430
>> Quando estiver concluído, o
programa será parecido com este.

38
00:02:01,430 --> 00:02:03,710
Uma vez que o usuário executa o
programa gananciosos, eles vão

39
00:02:03,710 --> 00:02:07,270
ser solicitado a dar a quantidade de
mudança de dólares que eles são devidos.

40
00:02:07,270 --> 00:02:11,140
E então a sua saída do programa vontade
a quantidade mínima de moedas

41
00:02:11,140 --> 00:02:14,740
que o caixa gananciosos usaria
para fazer essa quantidade de mudança.

42
00:02:14,740 --> 00:02:18,160
>> Então agora vamos quebrar esse
para baixo em nossas subtarefas.

43
00:02:18,160 --> 00:02:21,410
Primeiro vamos pedir a nossa
de usuário para uma quantidade de mudança.

44
00:02:21,410 --> 00:02:25,630
E, como com qualquer entrada do usuário, queremos
certificar-se de que validam se as entradas

45
00:02:25,630 --> 00:02:29,360
e garantir que podemos usar esse
de entrada para o resto do nosso programa.

46
00:02:29,360 --> 00:02:32,480
Então nós vamos sempre
usar o maior ponto possível

47
00:02:32,480 --> 00:02:35,240
e manter o controle das moedas utilizadas.

48
00:02:35,240 --> 00:02:39,080
E, finalmente, imprimir a final
número de moedas que usamos.

49
00:02:39,080 --> 00:02:40,970
>> Então, vamos falar sobre o que levou.

50
00:02:40,970 --> 00:02:43,550
A quantidade deve fazer centavos,
e este é em dólares.

51
00:02:43,550 --> 00:02:48,440
E assim por dólares, vamos
para usar o tipo de variável float.

52
00:02:48,440 --> 00:02:52,390
Agora, sempre que você perguntar a um usuário para a entrada,
você quer ter certeza de que ele é válido.

53
00:02:52,390 --> 00:02:56,640
E aqui nós gostamos de tirar vantagem
da construção de loop do-while.

54
00:02:56,640 --> 00:03:00,320
>> Um loop do-while irá executar o
corpo do laço, pelo menos, uma vez.

55
00:03:00,320 --> 00:03:01,650
Portanto, este vem a calhar.

56
00:03:01,650 --> 00:03:05,510
Sabemos que temos de solicitar ao
utilizador, pelo menos uma vez por um float.

57
00:03:05,510 --> 00:03:07,100
Agora, se isso float é válido.

58
00:03:07,100 --> 00:03:07,710
Isso é ótimo.

59
00:03:07,710 --> 00:03:08,460
Nós seguir em frente.

60
00:03:08,460 --> 00:03:11,910
Mas, se não, o ciclo irá assegurar
que temos uma bóia próprio

61
00:03:11,910 --> 00:03:16,810
repetindo continuamente até
o usuário nos dá um valor válido.

62
00:03:16,810 --> 00:03:18,760
>> Agora, para o do-while
condição de loop, precisamos

63
00:03:18,760 --> 00:03:22,000
para considerar o que isso significa
ter um flutuador inválido.

64
00:03:22,000 --> 00:03:24,220
Assim, para o contexto de
este problema, provavelmente

65
00:03:24,220 --> 00:03:27,450
faz sentido apenas para
aceitar valores positivos.

66
00:03:27,450 --> 00:03:32,010
>> Então, movendo on-- temos obtido um
valor em dólares do usuário.

67
00:03:32,010 --> 00:03:35,380
Mas estamos lidando com moedas,
que são inteiramente em centavos.

68
00:03:35,380 --> 00:03:38,660
$ 1 é equivalente a 100 centavos.

69
00:03:38,660 --> 00:03:43,670
Então, uma boa coisa a fazer é
converter esses valores em centavos.

70
00:03:43,670 --> 00:03:48,380
>> Agora, quando a conversão de um flutuador
para um número inteiro, de modo dólares para centavos,

71
00:03:48,380 --> 00:03:52,230
nós queremos ter certeza de que estamos cuidado
cerca de ponto flutuante imprecisão.

72
00:03:52,230 --> 00:03:55,260
Então isso significa que isso-- dizer
meu dólar value-- meu flutuador

73
00:03:55,260 --> 00:04:00,260
value-- houve um até US $ 2, ainda
Pode haver alguns números vadios lá.

74
00:04:00,260 --> 00:04:04,590
Então, nós queremos ter certeza de que não só
podemos multiplicar por 100 para obter os centavos,

75
00:04:04,590 --> 00:04:06,480
mas também terminar o dia.

76
00:04:06,480 --> 00:04:09,210
>> Portanto, agora temos a quantidade
da mudança em dívida para com o usuário.

77
00:04:09,210 --> 00:04:13,430
Nós originalmente obteve em dólares,
e agora temos convertido para centavos.

78
00:04:13,430 --> 00:04:17,029
Então agora podemos prosseguir com o coração de
o algoritmo ganancioso, que é sempre

79
00:04:17,029 --> 00:04:19,220
utilizando a moeda maior possível.

80
00:04:19,220 --> 00:04:21,930
Enquanto nós estamos fazendo isso,
é essencial que nós também

81
00:04:21,930 --> 00:04:25,360
manter o controle de quantas moedas são
vai ser devolvido ao utilizador

82
00:04:25,360 --> 00:04:28,630
bem como os restantes
mudar devido ao usuário.

83
00:04:28,630 --> 00:04:31,130
>> O programa vai olhar
algo assim.

84
00:04:31,130 --> 00:04:34,190
Depois de obter a quantidade de
dólares e convertê-lo em centavos,

85
00:04:34,190 --> 00:04:35,790
em seguida, você entrará em um loop.

86
00:04:35,790 --> 00:04:38,400
Enquanto pode ser bairros
used-- que seja

87
00:04:38,400 --> 00:04:43,660
enquanto a quantidade de mudança devido ao
utilizador é maior do que ou igual a 0,25 $,

88
00:04:43,660 --> 00:04:45,040
você vai usar um quarto.

89
00:04:45,040 --> 00:04:47,000
>> Agora, o que faz usando um quarto implica?

90
00:04:47,000 --> 00:04:51,280
Bem, um-- você vai aumentar a moeda
Quantidade de ser devolvido ao utilizador.

91
00:04:51,280 --> 00:04:55,890
E em segundo lugar você vai diminuir a corrente
quantidade de mudança devido volta para o usuário

92
00:04:55,890 --> 00:04:57,520
em US $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Depois de repetir que até
trimestres não pode mais ser usado,

94
00:05:00,680 --> 00:05:04,630
avançar para a próxima maior
coin-- neste caso, moedas de dez centavos, $ 0.10.

95
00:05:04,630 --> 00:05:07,750
Então você vai entrar nesse ciclo até
você não pode mais usar moedas de dez centavos.

96
00:05:07,750 --> 00:05:10,720
Em seguida, avance para a próxima
maior moeda, níqueis.

97
00:05:10,720 --> 00:05:14,810
Após níqueis não pode mais ser usado,
utilizar o montante restante em moedas de um centavo.

98
00:05:14,810 --> 00:05:17,800
E, finalmente, imprimir o
número de moedas usadas.

99
00:05:17,800 --> 00:05:20,350
>> Outra forma que você pode
abordar o problema gananciosos

100
00:05:20,350 --> 00:05:22,950
consiste em utilizar a abordagem de módulo.

101
00:05:22,950 --> 00:05:25,690
Modulo é um operador
que devolve o resto

102
00:05:25,690 --> 00:05:27,680
da divisão entre dois números.

103
00:05:27,680 --> 00:05:30,270
Digamos que eu tinha 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Bem, 5 é um factor de 50,
de modo que o restante será 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- bem, 10 também é um fator
de 50, de modo que o restante é também 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- bem, qualquer número em si mod
não vai ter qualquer restante.

107
00:05:43,660 --> 00:05:45,510
>> O que cerca de 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Bem, 49 só vai para 50 uma vez.

109
00:05:47,910 --> 00:05:50,290
Assim, o restante vai ser 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 vai
dar-lhe um resto de 3.

111
00:05:55,180 --> 00:05:59,120
>> Então, como podemos usar modulo
e talvez alguma divisão

112
00:05:59,120 --> 00:06:01,690
para implementar o nosso algoritmo guloso?

113
00:06:01,690 --> 00:06:05,550
Bem, nós ainda queremos permanecer fiel à
coração do ganancioso algorithm-- que

114
00:06:05,550 --> 00:06:07,910
é usar a maior moeda possível.

115
00:06:07,910 --> 00:06:14,570
>> Então, vamos nos perguntar se podemos usar qualquer
trimestres para retornar $ 0,32 para o utilizador.

116
00:06:14,570 --> 00:06:20,070
Bem, 32 mod 25 dá
-nos um remanescente de US $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Assim que nos diz que podemos definitivamente
usar um trimestre com US $ 0,07 restantes.

118
00:06:24,500 --> 00:06:26,180
>> Podemos, então, usar quaisquer moedas de dez centavos?

119
00:06:26,180 --> 00:06:32,740
Bem, Não-- porque $ 0,07 mod
$ 0,10 nos dá um resto de 7.

120
00:06:32,740 --> 00:06:34,960
10 não entra em 7 de todo.

121
00:06:34,960 --> 00:06:36,390
>> Então podemos usar níqueis?

122
00:06:36,390 --> 00:06:40,490
Bem $ 0,07 mod 5 centavos
dá-nos dois restantes.

123
00:06:40,490 --> 00:06:42,930
E, finalmente, podemos usar qualquer tostões?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 nos dá 0,
que é afinal o que

125
00:06:45,930 --> 00:06:48,160
queremos, porque, então, que
significa que temos devolvido

126
00:06:48,160 --> 00:06:50,160
para o usuário todas as variações devido.

127
00:06:50,160 --> 00:06:54,320
>> Então agora você tem duas maneiras possíveis de
implementação do algorithm-- gananciosos

128
00:06:54,320 --> 00:06:59,230
um com laçadas e uma com um
combinação de módulo e divisão.

129
00:06:59,230 --> 00:07:03,010
Então, finalmente, só precisamos
imprimir o número final de moedas.

130
00:07:03,010 --> 00:07:06,520
>> Se eu queria te dizer que eu tinha
3 animais de estimação e este valor foi codificado,

131
00:07:06,520 --> 00:07:09,240
então eu poderia usar apenas um
declaração teste de impressão simples.

132
00:07:09,240 --> 00:07:12,320
Mas o nosso valor é, na verdade,
armazenado em uma variável.

133
00:07:12,320 --> 00:07:15,260
Assim como você imprimir o
Os valores armazenados em variáveis?

134
00:07:15,260 --> 00:07:17,880
>> Para isso tomamos
vantagem de espaços reservados.

135
00:07:17,880 --> 00:07:21,540
Digamos que eu já tinha declarado
n um inteiro inicializado.

136
00:07:21,540 --> 00:07:25,170
Depois, mais tarde, se quisesse imprimir essa
valor, então eu iria escrever a seqüência.

137
00:07:25,170 --> 00:07:30,500
E em vez de esse valor eu usaria
um espaço reservado para que% integer-- i.

138
00:07:30,500 --> 00:07:33,800
Em seguida, após a corda, eu tenho um
vírgula, seguido pela variável

139
00:07:33,800 --> 00:07:34,950
que deseja imprimir.

140
00:07:34,950 --> 00:07:38,550
E mais tarde, quando ele for impresso,
ele vai imprimir o valor de n.

141
00:07:38,550 --> 00:07:41,570
>> Eu também poderia usar um espaço reservado
para um flutuador, por exemplo.

142
00:07:41,570 --> 00:07:44,000
Se eu quisesse dizer-lhe como
quanto dinheiro eu tenho no meu bolso,

143
00:07:44,000 --> 00:07:46,820
então eu poderia dizer que tenho dólares% f.

144
00:07:46,820 --> 00:07:51,330
E mais tarde, quando ela imprime, então n vai
tomar o lugar de que o titular lugar.

145
00:07:51,330 --> 00:07:55,530
Eu poderia também, por exemplo, usar vários
espaços reservados para várias variáveis.

146
00:07:55,530 --> 00:07:57,590
Então, enquanto eu lista
-los em ordem, então eu

147
00:07:57,590 --> 00:08:00,390
pode dizer-lhe quantas
cães e gatos que tenho.

148
00:08:00,390 --> 00:08:03,710
>> Agora sabemos como para solicitar ao
de usuário para uma quantidade de mudança,

149
00:08:03,710 --> 00:08:06,130
assegurar que essa entrada
é válida, e então nós

150
00:08:06,130 --> 00:08:10,370
tem duas possíveis formas de implementação
o algoritmo guloso sempre de usar

151
00:08:10,370 --> 00:08:12,090
a maior moeda possível.

152
00:08:12,090 --> 00:08:15,050
Porque mantivemos o controle de
quantas moedas que estamos usando,

153
00:08:15,050 --> 00:08:19,210
que pode então imprimir esse valor no final,
informando ao usuário quantas moedas são

154
00:08:19,210 --> 00:08:20,240
voltando.

155
00:08:20,240 --> 00:08:24,240
>> Meu nome é o Amayla, e este é CS50.

156
00:08:24,240 --> 00:08:25,915

