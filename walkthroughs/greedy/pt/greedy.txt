Vamos ficar ganancioso. Em gananciosos, nosso trabalho é para jogar o papel de um caixa ganancioso. O usuário vai nos dizer como muita mudança que lhes devemos, e, em seguida, o nosso trabalho é calcular o número mínimo de moedas que podemos usar para fazer essa quantidade de mudança. 

Vamos começar com um exemplo. Digamos que o usuário necessita de US $ 0,32 de volta. Poderíamos fazer isso, dando -lhes 32 centavos, um centavo cada. Ou eu também poderia usar cinco coins-- por dando-lhes três moedas de dez centavos, $ 0,10 cada, e dois centavos, $ 0,02 cada. Mas poderíamos usar, mesmo menos moedas para fazer isso? 

Toda a tática em greedy-- para ser um cashier-- gananciosos é a utilização do maior possível moeda. Assim, sempre que temos trimestres vamos usá-los. E, em seguida, uma vez que aqueles correr para fora, vamos usar moedas de dez centavos, $ 0,10 cada. Então níqueis, 5 centavos cada, e em seguida, para baixo para moedas de um centavo, um centavo cada. Ao utilizar a maior moeda possível sempre que possível, temos o cuidado de usar o menor número de moedas possível fazer a mudança. 

Então, vamos andar neste meio. O usuário precisa de US $ 0,32. Então nos perguntamos: podemos usar um quarto? Bem, sim, nós podemos. Então, agora nós só conhecê-los $ 0,07, e usamos uma moeda. 

podemos usar um outro quarto? Bem não. $ 0,07 é menos de US $ 0,25, para que proceda para a próxima maior moeda disponível. Dimes é de US $ 0,10, e novamente, não pode usar moedas de dez centavos. Porque moedas valem US $ 0,10, o que é mais do que a quantidade de mudança devido. 

Vamos para níqueis. E, sim, realmente, $ 0,05 é menor do que $ 0.10-- por isso podemos usar um níquel. Então, agora nós só deve o usuário $ 0,02, e temos até agora utilizadas duas moedas. Não podemos usar outro níquel. Portanto, depois, avançar para a última moeda no nossa disposição, que são as moedas de um centavo. 

E podemos usar dinheiro? Bem, sim-- e acabamos usando dois tostões para um total de quatro moedas. 

Quando estiver concluído, o programa será parecido com este. Uma vez que o usuário executa o programa gananciosos, eles vão ser solicitado a dar a quantidade de mudança de dólares que eles são devidos. E então a sua saída do programa vontade a quantidade mínima de moedas que o caixa gananciosos usaria para fazer essa quantidade de mudança. 

Então agora vamos quebrar esse para baixo em nossas subtarefas. Primeiro vamos pedir a nossa de usuário para uma quantidade de mudança. E, como com qualquer entrada do usuário, queremos certificar-se de que validam se as entradas e garantir que podemos usar esse de entrada para o resto do nosso programa. Então nós vamos sempre usar o maior ponto possível e manter o controle das moedas utilizadas. E, finalmente, imprimir a final número de moedas que usamos. 

Então, vamos falar sobre o que levou. A quantidade deve fazer centavos, e este é em dólares. E assim por dólares, vamos para usar o tipo de variável float. Agora, sempre que você perguntar a um usuário para a entrada, você quer ter certeza de que ele é válido. E aqui nós gostamos de tirar vantagem da construção de loop do-while. 

Um loop do-while irá executar o corpo do laço, pelo menos, uma vez. Portanto, este vem a calhar. Sabemos que temos de solicitar ao utilizador, pelo menos uma vez por um float. Agora, se isso float é válido. Isso é ótimo. Nós seguir em frente. Mas, se não, o ciclo irá assegurar que temos uma bóia próprio repetindo continuamente até o usuário nos dá um valor válido. 

Agora, para o do-while condição de loop, precisamos para considerar o que isso significa ter um flutuador inválido. Assim, para o contexto de este problema, provavelmente faz sentido apenas para aceitar valores positivos. 

Então, movendo on-- temos obtido um valor em dólares do usuário. Mas estamos lidando com moedas, que são inteiramente em centavos. $ 1 é equivalente a 100 centavos. Então, uma boa coisa a fazer é converter esses valores em centavos. 

Agora, quando a conversão de um flutuador para um número inteiro, de modo dólares para centavos, nós queremos ter certeza de que estamos cuidado cerca de ponto flutuante imprecisão. Então isso significa que isso-- dizer meu dólar value-- meu flutuador value-- houve um até US $ 2, ainda Pode haver alguns números vadios lá. Então, nós queremos ter certeza de que não só podemos multiplicar por 100 para obter os centavos, mas também terminar o dia. 

Portanto, agora temos a quantidade da mudança em dívida para com o usuário. Nós originalmente obteve em dólares, e agora temos convertido para centavos. Então agora podemos prosseguir com o coração de o algoritmo ganancioso, que é sempre utilizando a moeda maior possível. Enquanto nós estamos fazendo isso, é essencial que nós também manter o controle de quantas moedas são vai ser devolvido ao utilizador bem como os restantes mudar devido ao usuário. 

O programa vai olhar algo assim. Depois de obter a quantidade de dólares e convertê-lo em centavos, em seguida, você entrará em um loop. Enquanto pode ser bairros used-- que seja enquanto a quantidade de mudança devido ao utilizador é maior do que ou igual a 0,25 $, você vai usar um quarto. 

Agora, o que faz usando um quarto implica? Bem, um-- você vai aumentar a moeda Quantidade de ser devolvido ao utilizador. E em segundo lugar você vai diminuir a corrente quantidade de mudança devido volta para o usuário em US $ 0,25. 

Depois de repetir que até trimestres não pode mais ser usado, avançar para a próxima maior coin-- neste caso, moedas de dez centavos, $ 0.10. Então você vai entrar nesse ciclo até você não pode mais usar moedas de dez centavos. Em seguida, avance para a próxima maior moeda, níqueis. Após níqueis não pode mais ser usado, utilizar o montante restante em moedas de um centavo. E, finalmente, imprimir o número de moedas usadas. 

Outra forma que você pode abordar o problema gananciosos consiste em utilizar a abordagem de módulo. Modulo é um operador que devolve o resto da divisão entre dois números. Digamos que eu tinha 50 mod 5. Bem, 5 é um factor de 50, de modo que o restante será 0. 50 mod 10-- bem, 10 também é um fator de 50, de modo que o restante é também 0. 50 mod 50-- bem, qualquer número em si mod não vai ter qualquer restante. 

O que cerca de 50 mod 49? Bem, 49 só vai para 50 uma vez. Assim, o restante vai ser 1. 53 mod 50 vai dar-lhe um resto de 3. 

Então, como podemos usar modulo e talvez alguma divisão para implementar o nosso algoritmo guloso? Bem, nós ainda queremos permanecer fiel à coração do ganancioso algorithm-- que é usar a maior moeda possível. 

Então, vamos nos perguntar se podemos usar qualquer trimestres para retornar $ 0,32 para o utilizador. Bem, 32 mod 25 dá -nos um remanescente de US $ 0,07. Assim que nos diz que podemos definitivamente usar um trimestre com US $ 0,07 restantes. 

Podemos, então, usar quaisquer moedas de dez centavos? Bem, Não-- porque $ 0,07 mod $ 0,10 nos dá um resto de 7. 10 não entra em 7 de todo. 

Então podemos usar níqueis? Bem $ 0,07 mod 5 centavos dá-nos dois restantes. E, finalmente, podemos usar qualquer tostões? 2 mod 1 nos dá 0, que é afinal o que queremos, porque, então, que significa que temos devolvido para o usuário todas as variações devido. 

Então agora você tem duas maneiras possíveis de implementação do algorithm-- gananciosos um com laçadas e uma com um combinação de módulo e divisão. Então, finalmente, só precisamos imprimir o número final de moedas. 

Se eu queria te dizer que eu tinha 3 animais de estimação e este valor foi codificado, então eu poderia usar apenas um declaração teste de impressão simples. Mas o nosso valor é, na verdade, armazenado em uma variável. Assim como você imprimir o Os valores armazenados em variáveis? 

Para isso tomamos vantagem de espaços reservados. Digamos que eu já tinha declarado n um inteiro inicializado. Depois, mais tarde, se quisesse imprimir essa valor, então eu iria escrever a seqüência. E em vez de esse valor eu usaria um espaço reservado para que% integer-- i. Em seguida, após a corda, eu tenho um vírgula, seguido pela variável que deseja imprimir. E mais tarde, quando ele for impresso, ele vai imprimir o valor de n. 

Eu também poderia usar um espaço reservado para um flutuador, por exemplo. Se eu quisesse dizer-lhe como quanto dinheiro eu tenho no meu bolso, então eu poderia dizer que tenho dólares% f. E mais tarde, quando ela imprime, então n vai tomar o lugar de que o titular lugar. Eu poderia também, por exemplo, usar vários espaços reservados para várias variáveis. Então, enquanto eu lista -los em ordem, então eu pode dizer-lhe quantas cães e gatos que tenho. 

Agora sabemos como para solicitar ao de usuário para uma quantidade de mudança, assegurar que essa entrada é válida, e então nós tem duas possíveis formas de implementação o algoritmo guloso sempre de usar a maior moeda possível. Porque mantivemos o controle de quantas moedas que estamos usando, que pode então imprimir esse valor no final, informando ao usuário quantas moedas são voltando. 

Meu nome é o Amayla, e este é CS50. 