Pieņemsim nokļūt mantkārīgs. In mantkārīgs, mūsu uzdevums ir spēlēt loma mantkārīgs kasieris. Lietotājs pateiks mums, kā daudz pārmaiņu mēs viņiem parādā, un tad mūsu uzdevums ir aprēķināt minimālais skaits monētu ka mēs varam izmantot, lai padarītu ka izmaiņu summa. 

Sāksim ar piemēru. Say lietotājs pieprasa $ 0,32 atpakaļ. Mēs varētu izdarīt, dodot viņiem 32 pennies, vienu centu katra. Vai es varētu izmantot arī pieci coins-- ar dodot tiem trīs dimes, $ 0,10 katru, un divi pennies, $ 0,02 katrā. Bet mēs varētu izmantot pat mazāk monētas padarīt šo? 

Visa taktika greedy-- būt mantkārīgs cashier-- ir izmantot lielāko monētu iespējams. Tātad, ja mums ir ceturtdaļas mēs tos izmantot. Un tad, kad tie ir beigušies, mēs izmantosim dimes, $ 0,10 katrā. Tad nickels, 5 centi katrā, un tad uz leju, lai pennies, vienu santīmu katrs. Izmantojot lielāko monētu iespējams, ja mēs varam, mēs nodrošinām, ka mēs izmantojam vismazāk skaita no iespējams monētu veikt izmaiņas. 

Tātad, pieņemsim iet to caur. Lietotāju vajadzībām $ 0,32. Tāpēc mēs jautājam sev, mēs varam izmantot ceturtdaļu? Nu, jā, mēs varam. Tāpēc tagad mēs tikai zinām tos $ 0,07, un mēs izmantojām vienu monētu. 

Vai mēs varam izmantot citu ceturtdaļu? Nu, nē. $ 0,07 ir mazāk nekā 0,25 $, lai mēs turpinātu uz nākamo lielāko monētas pieejama. Dimes ir $ 0,10, un atkal, mēs nevaram izmantot dimes. Jo dimes ir vērts $ 0,10, kas ir vairāk nekā daudz izmaiņu parādā. 

Mēs ejam uz nickels. Un, jā tiešām, $ 0,05 ir mazāk nekā $ 0.10-- lai mēs varētu izmantot niķeli. Tāpēc tagad mēs tikai parādā lietotājam $ 0,02, un mēs esam tik tālu izmanto divas monētas. Mēs nevaram izmantot citu niķeļa. Tātad mēs pārejam pie pēdējā monēta at mūsu rīcībā, kas ir pennies. 

Un mēs varam izmantot peniju? Nu, yes-- un mēs galu galā, izmantojot divus pennies, kopā četras monētu. 

Kad esat pabeidzis, tad programma izskatās šādi. Kad lietotājs palaiž mantkārīgs programma, tie būs piedāvāts dot apjomu izmaiņas dolāros, ka viņi ir parādā. Un tad jūsu programma būs izejas minimālā summa monētu ka mantkārīgs kasieris varētu izmantot veikt šo summu izmaiņu. 

Tāpēc tagad pieņemsim pārtrauktu šo lejup mūsu apakšuzdevumos. Pirmkārt, mēs ejam, lai ātri mūsu lietotāju par summu izmaiņām. Un, kā ar jebkuru lietotāja ievadi, mēs vēlamies pārliecināties, ka mēs apstiprināt, ka ievade un nodrošināt, ka mēs varam izmantot, ka ieeja par pārējo mūsu programmā. Tad mēs ejam vienmēr izmantot lielāko punktu iespējamo un sekot monētām, ko lieto. Un visbeidzot, drukāt galīgā monētu skaits, kas mums izmanto. 

So parunāsim par pamudinot. Summa ir jāveic centiem, un tas ir dolāros. Un tā par dolāriem, mēs ejam izmantot float mainīgo tipu. Tagad, kad jūs lūgt lietotājs ievadi, Jūs vēlaties, lai pārliecinātos, ka tas ir derīgs. Un tāpēc šeit mēs gribētu, lai izmantotu no do-kamēr cilpa būvēt. 

Do-kamēr cilpa veiks ķermenis no cilpas vismaz vienu reizi. Tātad tas nāk parocīgs. Mēs zinām, ka mums ir nepieciešams, lai ātri lietotājs vismaz vienu reizi uz pludiņu. Tagad, ja tas pludiņš ir derīgs. Tas ir lieliski. Mēs virzāmies tālāk. Bet, ja ne, tad cilpa nodrošinās ka mēs saņemt pienācīgu peldēt nepārtraukti atkārtojot, līdz lietotājs dod mums derīgu vērtību. 

Tagad par do-kamēr cilpa stāvoklis, mums vajag apsvērt, ko tas nozīmē ir nederīgu peldēt. Tātad, ņemot vērā šī problēma, iespējams, tas ir jēga tikai, lai pieņemt pozitīvas vērtības. 

Tātad pārvietojas on-- mēs esam iegūta vērtība dolāros no lietotāja. Bet mums ir darīšana ar monētām, kas ir pilnīgi centiem. $ 1 ir vienāds ar 100 centiem. Tik laba lieta darīt, ir pārvērst šīs vērtības uz centus. 

Tagad, kad konvertējot no pludiņa līdz veselam skaitlim, tāpēc dolāru centiem, mēs vēlamies, lai pārliecinātos, ka mēs esam uzmanīgi par neprecizitāti peldošā komata. Tātad tas nozīmē that-- saka mans dolāru value-- manu peldēt value-- bija pat 2 $, vēl var būt daži klaiņojošiem numurus tur. Tāpēc mēs vēlamies, lai pārliecinātos, ka ne tikai mēs reizināt ar 100, lai iegūtu centiem, bet mēs arī ap to off. 

Tāpēc tagad mums ir summu Pārmaiņu parādā lietotājam. Mēs sākotnēji iegūti to dolāros, un tagad mēs esam pārvērš to centiem. Tāpēc tagad mēs varam turpināt sirdī mantkārīgs algoritmu, kas ir vienmēr izmantojot iespējami lielāko monētu. Kamēr mēs darām to, tas ir svarīgi, ka mēs arī izsekot, cik daudz monētu būs atpakaļ lietotājam kā arī atlikušais mainīt parādā lietotājam. 

Programma izskatīsies kaut kas tamlīdzīgs. Pēc tam jums summu dolāros un pārveidot, ka, lai centiem, tad jums būs jāievada cilpu. Kaut ceturtdaļas var būt used-- proti bet izmaiņu summa parādā lietotājs ir lielāks par vai vienāds ar 0,25 $, jūs izmantojat ceturtdaļu. 

Tagad to dara, izmantojot ceturtdaļa nozīmē? Nu, one-- jūs palielināt monēta rēķināties jāatdod lietotājam. Un, otrkārt, jūs samazināt pašreizējo izmaiņu summa ir parādā atpakaļ uz lietotāja līdz 0.25 $. 

Pēc atkārtojot, ka līdz ceturtdaļas vairs izmantot, doties uz nākamo lielāko coin-- šajā gadījumā dimes, $ 0,10. Tātad jums ievadīt šo cilpu līdz jūs vairs nevar izmantot dimes. Tad doties uz nākamo lielākais monētu, nickels. Pēc nickels vairs izmantot, izmantot atlikušo summu pennies. Un visbeidzot, drukāt izmanto monētu skaits. 

Vēl viens veids, ka jūs varat pieeja mantkārīgs problēmu ir izmantot Modulo pieeju. Modulo ir operators kas atgriež atlikušo sadalīšanas starp diviem skaitļiem. Teikt, man bija 50 mod 5. Nu, 5 ir faktors 50, tāpēc atlikusī būs 0. 50 mod 10-- labi, 10 ir arī faktors 50, tāpēc atlikusī daļa ir arī 0. 50 mod 50-- labi, jebkurš skaits mod sevi nav gatavojas būt nekādas atlikušo daļu. 

Kas par 50 mod 49? Nu, 49 tērēta 50 tikai vienu reizi. Tātad atlikusī būs 1. 53 mod 50 gatavojas jums atlikušo 3. 

Tātad, kā mēs varam izmantot modulo un varbūt daži nodaļa īstenot mūsu mantkārīgs algoritms? Nu, mēs joprojām gribam palikt uzticīgi uz sirds mantkārīgs algorithm-- ka ir, izmantojot lielāko monētu iespējams. 

Tātad, pieņemsim jautāt sev, vai mēs varam izmantot jebkuru ceturtdaļām, lai atgrieztos $ 0,32, lai lietotājam. Nu, 32 mod 25 dod mūs atlikušo 0,07 $. Tā, ka mums saka, ka mēs varam noteikti izmantot vienu ceturtdaļu ar 0,07 $ atlikušo. 

Vai mēs pēc tam izmantot jebkuru dimes? Nu, no-- jo 0.07 $ mod $ 0,10 dod mums atlikušo 7. 10 nav iedziļināties 7. vispār. 

Tad mēs varam izmantot nickels? Nu $ 0.07 mod 5 centi dod mums divas atlikušās. Un visbeidzot, mēs varam izmantot jebkuru pennies? 2 mod 1 dod mums 0, kas galu galā, ko mēs gribam, jo ​​tad tas nozīmē, ka mēs esam atgriezušies lietotājam visi no izmaiņām parādā. 

Tātad, tagad jums ir divas iespējas, kā īstenojot mantkārīgs algorithm-- viens ar cilpām un viena ar kombinācija Modulo un sadalījumu. Beidzot mums ir nepieciešams, lai izdrukāt galīgo monētu skaits. 

Ja es gribēju pateikt, ka man bija 3 mājdzīvnieki un šī vērtība tika hardcoded, tad es varētu tikai izmantot vienkārši izdrukāt testa paziņojumu. Bet mūsu vērtība ir faktiski glabājas mainīgo. Tātad, kā jūs drukāt vērtības glabājas mainīgo? 

Par šo mēs priekšrocība vietturi. Teikt, es jau bija deklarēta inicializēts skaitlis n. Tad vēlāk, ja es gribēju, lai drukātu, ka vērtību, tad es varētu rakstīt virkni. Un tā vietā, lai šīs vērtības es varētu izmantot vietturis šim integer--% i. Tad pēc virknes, man ir komats, kam seko mainīgā ka es gribu, lai drukātu. Un vēlāk, kad tas drukā, tas būs drukāt vērtību n. 

Es varētu arī izmantot vietturi par peldēt, piemēram. Ja es gribēju jums pastāstīt, kā daudz naudas man ir manā kabatā, tad es varētu teikt, man ir% f dolāru. Un vēlāk, kad tas drukā, tad n būs ieņemt vietu šajā vietā turētāja. Es varētu arī, piemēram, izmantot vairākas vietturi uz vairākiem mainīgajiem. Tik ilgi, kamēr es uzskaitīt tos kārtībā, tad es var jums pastāstīt, cik daudz suņi un kaķi man ir. 

Tagad mēs zinām, kā rosināt lietotāju par summu izmaiņām, nodrošinātu to, ka šī ievade ir derīgs, un tad mēs ir divas iespējas, kā īsteno mantkārīgs algoritms vienmēr izmanto lielākais monētu iespējams. Tāpēc, ka mēs esam tur līdzi cik daudz monētu mēs izmantojam, mēs pēc tam var izdrukāt šo vērtību beigās, stāsta lietotājs cik monētas viņi ir saņemt atpakaļ. 

Mans vārds ir Amayla, un tas ir CS50. 