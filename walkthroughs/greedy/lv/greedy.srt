1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Pieņemsim nokļūt mantkārīgs.

3
00:00:02,900 --> 00:00:06,810
In mantkārīgs, mūsu uzdevums ir spēlēt
loma mantkārīgs kasieris.

4
00:00:06,810 --> 00:00:09,750
Lietotājs pateiks mums, kā
daudz pārmaiņu mēs viņiem parādā,

5
00:00:09,750 --> 00:00:13,520
un tad mūsu uzdevums ir aprēķināt
minimālais skaits monētu

6
00:00:13,520 --> 00:00:17,240
ka mēs varam izmantot, lai padarītu
ka izmaiņu summa.

7
00:00:17,240 --> 00:00:19,560
>> Sāksim ar piemēru.

8
00:00:19,560 --> 00:00:23,170
Say lietotājs pieprasa $ 0,32 atpakaļ.

9
00:00:23,170 --> 00:00:28,960
Mēs varētu izdarīt, dodot
viņiem 32 pennies, vienu centu katra.

10
00:00:28,960 --> 00:00:35,180
Vai es varētu izmantot arī pieci coins-- ar
dodot tiem trīs dimes, $ 0,10 katru,

11
00:00:35,180 --> 00:00:38,060
un divi pennies, $ 0,02 katrā.

12
00:00:38,060 --> 00:00:42,580
Bet mēs varētu izmantot pat
mazāk monētas padarīt šo?

13
00:00:42,580 --> 00:00:45,100
>> Visa taktika greedy--
būt mantkārīgs cashier--

14
00:00:45,100 --> 00:00:47,600
ir izmantot lielāko monētu iespējams.

15
00:00:47,600 --> 00:00:50,670
Tātad, ja mums ir
ceturtdaļas mēs tos izmantot.

16
00:00:50,670 --> 00:00:54,100
Un tad, kad tie ir beigušies,
mēs izmantosim dimes, $ 0,10 katrā.

17
00:00:54,100 --> 00:00:58,840
Tad nickels, 5 centi katrā, un
tad uz leju, lai pennies, vienu santīmu katrs.

18
00:00:58,840 --> 00:01:01,792
Izmantojot lielāko monētu
iespējams, ja mēs varam,

19
00:01:01,792 --> 00:01:07,350
mēs nodrošinām, ka mēs izmantojam vismazāk skaita
no iespējams monētu veikt izmaiņas.

20
00:01:07,350 --> 00:01:09,180
>> Tātad, pieņemsim iet to caur.

21
00:01:09,180 --> 00:01:11,660
Lietotāju vajadzībām $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Tāpēc mēs jautājam sev,
mēs varam izmantot ceturtdaļu?

23
00:01:14,200 --> 00:01:15,560
Nu, jā, mēs varam.

24
00:01:15,560 --> 00:01:19,720
Tāpēc tagad mēs tikai zinām tos
$ 0,07, un mēs izmantojām vienu monētu.

25
00:01:19,720 --> 00:01:20,970
>> Vai mēs varam izmantot citu ceturtdaļu?

26
00:01:20,970 --> 00:01:21,890
Nu, nē.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 ir mazāk nekā 0,25 $, lai mēs turpinātu
uz nākamo lielāko monētas pieejama.

28
00:01:27,570 --> 00:01:30,690
Dimes ir $ 0,10, un
atkal, mēs nevaram izmantot dimes.

29
00:01:30,690 --> 00:01:35,480
Jo dimes ir vērts $ 0,10, kas
ir vairāk nekā daudz izmaiņu parādā.

30
00:01:35,480 --> 00:01:36,790
>> Mēs ejam uz nickels.

31
00:01:36,790 --> 00:01:40,890
Un, jā tiešām, $ 0,05 ir mazāk nekā
$ 0.10-- lai mēs varētu izmantot niķeli.

32
00:01:40,890 --> 00:01:46,104
Tāpēc tagad mēs tikai parādā lietotājam $ 0,02,
un mēs esam tik tālu izmanto divas monētas.

33
00:01:46,104 --> 00:01:47,270
Mēs nevaram izmantot citu niķeļa.

34
00:01:47,270 --> 00:01:51,140
Tātad mēs pārejam pie pēdējā monēta at
mūsu rīcībā, kas ir pennies.

35
00:01:51,140 --> 00:01:52,270
>> Un mēs varam izmantot peniju?

36
00:01:52,270 --> 00:01:59,060
Nu, yes-- un mēs galu galā, izmantojot divus
pennies, kopā četras monētu.

37
00:01:59,060 --> 00:02:01,430
>> Kad esat pabeidzis, tad
programma izskatās šādi.

38
00:02:01,430 --> 00:02:03,710
Kad lietotājs palaiž
mantkārīgs programma, tie būs

39
00:02:03,710 --> 00:02:07,270
piedāvāts dot apjomu
izmaiņas dolāros, ka viņi ir parādā.

40
00:02:07,270 --> 00:02:11,140
Un tad jūsu programma būs izejas
minimālā summa monētu

41
00:02:11,140 --> 00:02:14,740
ka mantkārīgs kasieris varētu izmantot
veikt šo summu izmaiņu.

42
00:02:14,740 --> 00:02:18,160
>> Tāpēc tagad pieņemsim pārtrauktu šo
lejup mūsu apakšuzdevumos.

43
00:02:18,160 --> 00:02:21,410
Pirmkārt, mēs ejam, lai ātri mūsu
lietotāju par summu izmaiņām.

44
00:02:21,410 --> 00:02:25,630
Un, kā ar jebkuru lietotāja ievadi, mēs vēlamies
pārliecināties, ka mēs apstiprināt, ka ievade

45
00:02:25,630 --> 00:02:29,360
un nodrošināt, ka mēs varam izmantot, ka
ieeja par pārējo mūsu programmā.

46
00:02:29,360 --> 00:02:32,480
Tad mēs ejam vienmēr
izmantot lielāko punktu iespējamo

47
00:02:32,480 --> 00:02:35,240
un sekot monētām, ko lieto.

48
00:02:35,240 --> 00:02:39,080
Un visbeidzot, drukāt galīgā
monētu skaits, kas mums izmanto.

49
00:02:39,080 --> 00:02:40,970
>> So parunāsim par pamudinot.

50
00:02:40,970 --> 00:02:43,550
Summa ir jāveic centiem,
un tas ir dolāros.

51
00:02:43,550 --> 00:02:48,440
Un tā par dolāriem, mēs ejam
izmantot float mainīgo tipu.

52
00:02:48,440 --> 00:02:52,390
Tagad, kad jūs lūgt lietotājs ievadi,
Jūs vēlaties, lai pārliecinātos, ka tas ir derīgs.

53
00:02:52,390 --> 00:02:56,640
Un tāpēc šeit mēs gribētu, lai izmantotu
no do-kamēr cilpa būvēt.

54
00:02:56,640 --> 00:03:00,320
>> Do-kamēr cilpa veiks
ķermenis no cilpas vismaz vienu reizi.

55
00:03:00,320 --> 00:03:01,650
Tātad tas nāk parocīgs.

56
00:03:01,650 --> 00:03:05,510
Mēs zinām, ka mums ir nepieciešams, lai ātri
lietotājs vismaz vienu reizi uz pludiņu.

57
00:03:05,510 --> 00:03:07,100
Tagad, ja tas pludiņš ir derīgs.

58
00:03:07,100 --> 00:03:07,710
Tas ir lieliski.

59
00:03:07,710 --> 00:03:08,460
Mēs virzāmies tālāk.

60
00:03:08,460 --> 00:03:11,910
Bet, ja ne, tad cilpa nodrošinās
ka mēs saņemt pienācīgu peldēt

61
00:03:11,910 --> 00:03:16,810
nepārtraukti atkārtojot, līdz
lietotājs dod mums derīgu vērtību.

62
00:03:16,810 --> 00:03:18,760
>> Tagad par do-kamēr
cilpa stāvoklis, mums vajag

63
00:03:18,760 --> 00:03:22,000
apsvērt, ko tas nozīmē
ir nederīgu peldēt.

64
00:03:22,000 --> 00:03:24,220
Tātad, ņemot vērā
šī problēma, iespējams,

65
00:03:24,220 --> 00:03:27,450
tas ir jēga tikai, lai
pieņemt pozitīvas vērtības.

66
00:03:27,450 --> 00:03:32,010
>> Tātad pārvietojas on-- mēs esam iegūta
vērtība dolāros no lietotāja.

67
00:03:32,010 --> 00:03:35,380
Bet mums ir darīšana ar monētām,
kas ir pilnīgi centiem.

68
00:03:35,380 --> 00:03:38,660
$ 1 ir vienāds ar 100 centiem.

69
00:03:38,660 --> 00:03:43,670
Tik laba lieta darīt, ir
pārvērst šīs vērtības uz centus.

70
00:03:43,670 --> 00:03:48,380
>> Tagad, kad konvertējot no pludiņa
līdz veselam skaitlim, tāpēc dolāru centiem,

71
00:03:48,380 --> 00:03:52,230
mēs vēlamies, lai pārliecinātos, ka mēs esam uzmanīgi
par neprecizitāti peldošā komata.

72
00:03:52,230 --> 00:03:55,260
Tātad tas nozīmē that-- saka
mans dolāru value-- manu peldēt

73
00:03:55,260 --> 00:04:00,260
value-- bija pat 2 $, vēl
var būt daži klaiņojošiem numurus tur.

74
00:04:00,260 --> 00:04:04,590
Tāpēc mēs vēlamies, lai pārliecinātos, ka ne tikai
mēs reizināt ar 100, lai iegūtu centiem,

75
00:04:04,590 --> 00:04:06,480
bet mēs arī ap to off.

76
00:04:06,480 --> 00:04:09,210
>> Tāpēc tagad mums ir summu
Pārmaiņu parādā lietotājam.

77
00:04:09,210 --> 00:04:13,430
Mēs sākotnēji iegūti to dolāros,
un tagad mēs esam pārvērš to centiem.

78
00:04:13,430 --> 00:04:17,029
Tāpēc tagad mēs varam turpināt sirdī
mantkārīgs algoritmu, kas ir vienmēr

79
00:04:17,029 --> 00:04:19,220
izmantojot iespējami lielāko monētu.

80
00:04:19,220 --> 00:04:21,930
Kamēr mēs darām to,
tas ir svarīgi, ka mēs arī

81
00:04:21,930 --> 00:04:25,360
izsekot, cik daudz monētu
būs atpakaļ lietotājam

82
00:04:25,360 --> 00:04:28,630
kā arī atlikušais
mainīt parādā lietotājam.

83
00:04:28,630 --> 00:04:31,130
>> Programma izskatīsies
kaut kas tamlīdzīgs.

84
00:04:31,130 --> 00:04:34,190
Pēc tam jums summu
dolāros un pārveidot, ka, lai centiem,

85
00:04:34,190 --> 00:04:35,790
tad jums būs jāievada cilpu.

86
00:04:35,790 --> 00:04:38,400
Kaut ceturtdaļas var būt
used-- proti

87
00:04:38,400 --> 00:04:43,660
bet izmaiņu summa parādā
lietotājs ir lielāks par vai vienāds ar 0,25 $,

88
00:04:43,660 --> 00:04:45,040
jūs izmantojat ceturtdaļu.

89
00:04:45,040 --> 00:04:47,000
>> Tagad to dara, izmantojot ceturtdaļa nozīmē?

90
00:04:47,000 --> 00:04:51,280
Nu, one-- jūs palielināt monēta
rēķināties jāatdod lietotājam.

91
00:04:51,280 --> 00:04:55,890
Un, otrkārt, jūs samazināt pašreizējo
izmaiņu summa ir parādā atpakaļ uz lietotāja

92
00:04:55,890 --> 00:04:57,520
līdz 0.25 $.

93
00:04:57,520 --> 00:05:00,680
>> Pēc atkārtojot, ka līdz
ceturtdaļas vairs izmantot,

94
00:05:00,680 --> 00:05:04,630
doties uz nākamo lielāko
coin-- šajā gadījumā dimes, $ 0,10.

95
00:05:04,630 --> 00:05:07,750
Tātad jums ievadīt šo cilpu līdz
jūs vairs nevar izmantot dimes.

96
00:05:07,750 --> 00:05:10,720
Tad doties uz nākamo
lielākais monētu, nickels.

97
00:05:10,720 --> 00:05:14,810
Pēc nickels vairs izmantot,
izmantot atlikušo summu pennies.

98
00:05:14,810 --> 00:05:17,800
Un visbeidzot, drukāt
izmanto monētu skaits.

99
00:05:17,800 --> 00:05:20,350
>> Vēl viens veids, ka jūs varat
pieeja mantkārīgs problēmu

100
00:05:20,350 --> 00:05:22,950
ir izmantot Modulo pieeju.

101
00:05:22,950 --> 00:05:25,690
Modulo ir operators
kas atgriež atlikušo

102
00:05:25,690 --> 00:05:27,680
sadalīšanas starp diviem skaitļiem.

103
00:05:27,680 --> 00:05:30,270
Teikt, man bija 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Nu, 5 ir faktors 50,
tāpēc atlikusī būs 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- labi, 10 ir arī faktors
50, tāpēc atlikusī daļa ir arī 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- labi, jebkurš skaits mod sevi
nav gatavojas būt nekādas atlikušo daļu.

107
00:05:43,660 --> 00:05:45,510
>> Kas par 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Nu, 49 tērēta 50 tikai vienu reizi.

109
00:05:47,910 --> 00:05:50,290
Tātad atlikusī būs 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 gatavojas
jums atlikušo 3.

111
00:05:55,180 --> 00:05:59,120
>> Tātad, kā mēs varam izmantot modulo
un varbūt daži nodaļa

112
00:05:59,120 --> 00:06:01,690
īstenot mūsu mantkārīgs algoritms?

113
00:06:01,690 --> 00:06:05,550
Nu, mēs joprojām gribam palikt uzticīgi uz
sirds mantkārīgs algorithm-- ka

114
00:06:05,550 --> 00:06:07,910
ir, izmantojot lielāko monētu iespējams.

115
00:06:07,910 --> 00:06:14,570
>> Tātad, pieņemsim jautāt sev, vai mēs varam izmantot jebkuru
ceturtdaļām, lai atgrieztos $ 0,32, lai lietotājam.

116
00:06:14,570 --> 00:06:20,070
Nu, 32 mod 25 dod
mūs atlikušo 0,07 $.

117
00:06:20,070 --> 00:06:24,500
Tā, ka mums saka, ka mēs varam noteikti
izmantot vienu ceturtdaļu ar 0,07 $ atlikušo.

118
00:06:24,500 --> 00:06:26,180
>> Vai mēs pēc tam izmantot jebkuru dimes?

119
00:06:26,180 --> 00:06:32,740
Nu, no-- jo 0.07 $ mod
$ 0,10 dod mums atlikušo 7.

120
00:06:32,740 --> 00:06:34,960
10 nav iedziļināties 7. vispār.

121
00:06:34,960 --> 00:06:36,390
>> Tad mēs varam izmantot nickels?

122
00:06:36,390 --> 00:06:40,490
Nu $ 0.07 mod 5 centi
dod mums divas atlikušās.

123
00:06:40,490 --> 00:06:42,930
Un visbeidzot, mēs varam izmantot jebkuru pennies?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 dod mums 0,
kas galu galā, ko

125
00:06:45,930 --> 00:06:48,160
mēs gribam, jo ​​tad tas
nozīmē, ka mēs esam atgriezušies

126
00:06:48,160 --> 00:06:50,160
lietotājam visi no izmaiņām parādā.

127
00:06:50,160 --> 00:06:54,320
>> Tātad, tagad jums ir divas iespējas, kā
īstenojot mantkārīgs algorithm--

128
00:06:54,320 --> 00:06:59,230
viens ar cilpām un viena ar
kombinācija Modulo un sadalījumu.

129
00:06:59,230 --> 00:07:03,010
Beidzot mums ir nepieciešams, lai
izdrukāt galīgo monētu skaits.

130
00:07:03,010 --> 00:07:06,520
>> Ja es gribēju pateikt, ka man bija
3 mājdzīvnieki un šī vērtība tika hardcoded,

131
00:07:06,520 --> 00:07:09,240
tad es varētu tikai izmantot
vienkārši izdrukāt testa paziņojumu.

132
00:07:09,240 --> 00:07:12,320
Bet mūsu vērtība ir faktiski
glabājas mainīgo.

133
00:07:12,320 --> 00:07:15,260
Tātad, kā jūs drukāt
vērtības glabājas mainīgo?

134
00:07:15,260 --> 00:07:17,880
>> Par šo mēs
priekšrocība vietturi.

135
00:07:17,880 --> 00:07:21,540
Teikt, es jau bija deklarēta
inicializēts skaitlis n.

136
00:07:21,540 --> 00:07:25,170
Tad vēlāk, ja es gribēju, lai drukātu, ka
vērtību, tad es varētu rakstīt virkni.

137
00:07:25,170 --> 00:07:30,500
Un tā vietā, lai šīs vērtības es varētu izmantot
vietturis šim integer--% i.

138
00:07:30,500 --> 00:07:33,800
Tad pēc virknes, man ir
komats, kam seko mainīgā

139
00:07:33,800 --> 00:07:34,950
ka es gribu, lai drukātu.

140
00:07:34,950 --> 00:07:38,550
Un vēlāk, kad tas drukā,
tas būs drukāt vērtību n.

141
00:07:38,550 --> 00:07:41,570
>> Es varētu arī izmantot vietturi
par peldēt, piemēram.

142
00:07:41,570 --> 00:07:44,000
Ja es gribēju jums pastāstīt, kā
daudz naudas man ir manā kabatā,

143
00:07:44,000 --> 00:07:46,820
tad es varētu teikt, man ir% f dolāru.

144
00:07:46,820 --> 00:07:51,330
Un vēlāk, kad tas drukā, tad n būs
ieņemt vietu šajā vietā turētāja.

145
00:07:51,330 --> 00:07:55,530
Es varētu arī, piemēram, izmantot vairākas
vietturi uz vairākiem mainīgajiem.

146
00:07:55,530 --> 00:07:57,590
Tik ilgi, kamēr es uzskaitīt
tos kārtībā, tad es

147
00:07:57,590 --> 00:08:00,390
var jums pastāstīt, cik daudz
suņi un kaķi man ir.

148
00:08:00,390 --> 00:08:03,710
>> Tagad mēs zinām, kā rosināt
lietotāju par summu izmaiņām,

149
00:08:03,710 --> 00:08:06,130
nodrošinātu to, ka šī ievade
ir derīgs, un tad mēs

150
00:08:06,130 --> 00:08:10,370
ir divas iespējas, kā īsteno
mantkārīgs algoritms vienmēr izmanto

151
00:08:10,370 --> 00:08:12,090
lielākais monētu iespējams.

152
00:08:12,090 --> 00:08:15,050
Tāpēc, ka mēs esam tur līdzi
cik daudz monētu mēs izmantojam,

153
00:08:15,050 --> 00:08:19,210
mēs pēc tam var izdrukāt šo vērtību beigās,
stāsta lietotājs cik monētas viņi ir

154
00:08:19,210 --> 00:08:20,240
saņemt atpakaļ.

155
00:08:20,240 --> 00:08:24,240
>> Mans vārds ir Amayla, un tas ir CS50.

156
00:08:24,240 --> 00:08:25,915

