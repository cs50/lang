Ајде да се алчни. Во алчен, наша работа е да се игра улогата на алчен касата. Корисникот ќе ни каже како многу промени што ги должам, а потоа наша работа е да се пресмета минималниот број на монети, кои може да се користат да се направи дека износот на промена. 

Да почнеме со еден пример. Велат дека корисникот бара $ 0.32 назад. Ние би можеле да го направите тоа со давање на нив 32 пени, еден цент секоја од нив. Или јас исто така може да се користи од страна на пет coins-- давајќи им три dimes, $ 0,10 секој, и два пени, 0,02 $ секоја од нив. Но, ние може да се користи дури и помалку пари да се направи тоа? 

Целата тактика во greedy-- да се биде алчен cashier-- е да се користи најголем можен паричка. Значи секогаш кога имаме четвртини ние ќе ги користите. А потоа, откако тие трчаат надвор, ние ќе користат dimes, $ 0,10 секоја од нив. Потоа nickels, 5 центи, секој, и се надолу до пени, еден цент секоја од нив. Со користење на најголемиот паричка е можно кога ќе ни се, ние се осигура дека ние ги користиме на најмали број на можни монети за да се направи промена. 

Па ајде да одиме по овој преку. Корисникот треба $ 0.32. Значи, ние да се запрашаме, можеме да го користиме една четвртина? Па, да можеме. Па сега ние само ги знаете $ 0,07, и ние се користи една монета. 

Можеме да го користиме уште една четвртина? Па, бр. $ 0,07 е помалку од $ 0,25, за да можеме да продолжи на следниот најголем паричка на располагање. Dimes се $ 0,10, и Повторно, ние не може да се користи dimes. Бидејќи dimes се во вредност од $ 0,10, што е повеќе од износот на промената се должи. 

Ние одиме на nickels. И, да, навистина, $ 0,05 е помалку од $ 0.10-- па ние може да се користи никел. Па сега ние само должиме на корисникот $ 0,02, и ние досега се користат две парички. Ние не може да користи друг никел. Па потоа да продолжиме на последната паричка во ни се на располагање, кои се пени. 

И можеме да го користиме денар? Па, yes-- и на крајот ќе заврши со користење на два пени за вкупно четири монети. 

Откако ќе се заврши, Програмата ќе изгледа вака. Откако корисникот ќе раководи со органот на алчен програма, тие ќе да биде побарано да се даде на износот на промена во долари, кои тие се должи. И тогаш вашата програма ќе излез минималниот износ на пари дека алчните касиерот ќе се користи да го направат тој износ на промена. 

Па сега ајде да се скрши оваа долу во нашите подзадачи. Прво ние си оди за да се поттикне нашите корисник за износот на промена. И, како и со било кој корисник влез, ние сакаме да бидете сигурни дека ние се провери дека влез и да се осигура дека ние може да го користат влез за остатокот од нашата програма. Тогаш ние се случува да се секогаш користете најголемата можна точка и да ги пратите на монети што се користат. И, конечно, печатење на финалната бројот на монетите што ги користат. 

Па ајде да разговараме за прашува. Износот мора да се направи центи, и ова е во долари. И така за долари, ние ќе да се користи со пливка променлива. Сега секогаш кога ќе побара корисникот за влез, вие сакате да бидете сигурни дека тоа е валидна. И така, тука сме да ги искористат предностите на јамка изградба на не-време. 

А не-додека јамка ќе се изврши на телото на јамка барем еднаш. Значи ова доаѓа во удобен. Ние знаеме дека ние треба да го извести корисникот барем еднаш за да се одржи. Сега, ако тоа плови е валидна. Тоа е супер. Да продолжат понатаму. Но, ако не, циклусот ќе се обезбеди кои ги добие соодветна плови со повторување непрекинато до корисникот ни дава важечка вредност. 

Сега за не-а состојба јамка, ние треба да се разгледа она што значи има неважечки плови. Така и за контекстот на овој проблем, веројатно тоа го прави смисла само за да прифати позитивни вредности. 

Значи се движат on-- имаме добиено вредност во долари од страна на корисникот. Но, ние не се занимаваат со монети, кои се целосно во центи. $ 1 е еквивалентно на 100 центи. Па добра работа да се направи е да се се претворат оние вредности во центи. 

Сега кога конвертирање од плови на цел број, па долари за да центи, ние сакаме да бидете сигурни дека ние сме внимателни во врска со подвижна точка непрецизност. Па тоа значи дека that-- каже мојот долар value-- мојот плови value-- беше уште $ 2, се уште може да има некои скитници броеви во таму. Затоа сакаме да бидете сигурни дека не само што ние множи со 100 за да се добие центи, но ние исто така, го заокружуваат. 

Така, сега имаме износот на промени се должат на корисникот. Ние првично добиени во долари, а сега ние сме го претвора во центи. Па сега можеме да продолжиме со срцето алчен алгоритам, кој е секогаш користење на најголем можен паричка. И покрај тоа што го правиме ова, тоа е од суштинско значење дека ние, исто така, ги пратите на тоа колку пари се ќе треба да се врати на корисник како и останатите промени се должат на корисникот. 

На програмата ќе се погледне нешто како ова. Откако ќе се добие износот на долари и конвертирате дека центи, тогаш ќе влезат во еден циклус. Додека четвртини може да биде used-- односно додека износот на промени се должат на корисникот е поголема или еднаква на $ 0,25, ќе се користи за една четвртина. 

Сега она што го прави со користење на една четвртина повлекува? Па, one-- ќе се зголеми на проблемот се смета дека ќе се вратат на корисникот. И второ ќе се намали сегашната износот на промената се должи назад до корисникот од $ 0,25. 

По повторува дека до четвртини веќе не може да се користи, продолжи кон следниот најголем coin-- во овој случај dimes, $ 0,10. Па ќе влезе во таа јамка се додека веќе не може да се користи dimes. Потоа да продолжи со следниот најголемиот монета, nickels. По nickels веќе не може да се користи, користење на преостанатиот износ на пени. И, конечно, печатење на бројот на монетите се користи. 

Друг начин на кој може да се пријде на алчен проблем е да се користи пристапот на modulo. Modulo е оператор кој се враќа остатокот на поделбата помеѓу два броја. Да кажам дека имаше 50 современи 5. Па, 5 е фактор на 50, така што остатокот ќе биде 0. 50 современи 10-- добро, 10 исто така е фактор од 50, па остатокот е, исто така, 0. 50 современи 50-- добро, било кој број се современи нема да има никакви остатокот. 

Што е со 50 mod 49? Па, 49 оди само во 50 еднаш. Значи остатокот ќе биде 1. 53 mod 50 ќе се ви даде остатокот од 3. 

Па како можеме да го користиме modulo а можеби и некои поделба да ја оствариме нашата алчен алгоритам? Па, сепак сакам да останам верен на срцето на алчните algorithm-- дека е користење на најголем можен паричка. 

Па ајде да се запрашаме дали можеме да се користи било кој четвртини да се врати $ 0.32 за корисникот. Па, 32 mod 25 дава ни остатокот од $ 0,07. Така што ни кажува дека ние може да дефинитивно користите една четвртина со $ 0,07 до крајот. 

Може ли да потоа се користи било dimes? Па, затоа no-- $ 0,07 МО $ 0,10 ни дава остатокот од 7. 10 не оди во 7 на сите. 

Тогаш можеме да го користиме парички? Па $ 0,07 МО 5 центи ни дава преостанатите двајца. И на крај, ние може да се користи било кој пени? 2 МО 1 ни дава 0, што е она што на крајот сакаме затоа што тогаш тоа значи дека ние се врати на корисникот на сите промени што се должи. 

Така, сега имате два начина спроведување на алчен algorithm-- еден со јамки и еден со комбинација на modulo и поделба. Значи, конечно, ние само треба да се печати конечниот број на монети. 

Ако сакав да ви кажам дека имав 3 домашни миленици и оваа вредност е Hardcoded, тогаш јас само може да се користи едноставна изјава тест печатење. Но, нашата вредност е, всушност, складирани во променлива. Па, како да го испечатите вредностите зачувани во променливи? 

За ова се Предноста на места за чување. Велат дека веќе имаше прогласено на иницијализира цел број n. Потоа подоцна, ако сакав да се печати кои вредност, а потоа јас ќе пишувам на стринг. И наместо таа вредност јас ќе го користи случаеви за кои integer--% i. Потоа, по низа, имам запирка, а потоа со променлива што сакате да печатите. И подоцна, кога тоа отпечатоци, тоа ќе се печати вредноста на n. 

Јас би можеле да го користат за да зачува место за број со подвижна запирка, на пример. Ако сакав да ви кажам како Имам многу пари во џебот, тогаш можам да кажам имам% f долари. И подоцна, кога тоа отпечатоци, тогаш n ќе заземе местото на имателот место. Јас исто така би можеле, на пример, се користи неколку резервирани места за неколку променливи. Така што додека јас листата нив, со цел, тогаш јас да ви кажам колку кучиња и мачки што го имам. 

Сега знаеме како да го извести корисникот за износ на промени, се осигура дека таа влез е валиден, а потоа ние има две можни начини на спроведување на алчен алгоритам за секогаш користејќи најголем можен паричка. Затоа што ние сме водел сметка колку пари ние сме со користење, тогаш можеме да се печати дека вредноста на крајот, објаснување за корисникот како многу монети што тие се добивање назад. 

Моето име е Amayla, и ова е CS50. 