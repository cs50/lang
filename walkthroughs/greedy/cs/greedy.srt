1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Pojďme chamtivý.

3
00:00:02,900 --> 00:00:06,810
V chamtivý, naším úkolem je hrát
Role chamtivý pokladní.

4
00:00:06,810 --> 00:00:09,750
Uživatel nám řekne, jak
mnoho změn Dlužíme jim,

5
00:00:09,750 --> 00:00:13,520
a pak naším úkolem je vypočítat
minimální počet mincí

6
00:00:13,520 --> 00:00:17,240
že můžeme použít, aby se
že množství změn.

7
00:00:17,240 --> 00:00:19,560
>> Začněme s příkladem.

8
00:00:19,560 --> 00:00:23,170
Řekněme, že uživatel potřebuje $ ,32 zpět.

9
00:00:23,170 --> 00:00:28,960
Mohli bychom to udělat tím, že
je 32 haléře, jeden cent každý.

10
00:00:28,960 --> 00:00:35,180
Nebo můžu použít také pět coins-- podle
což jim tři desetníky, $ 0,10 každý,

11
00:00:35,180 --> 00:00:38,060
a dva haléře, $ ,02 každý.

12
00:00:38,060 --> 00:00:42,580
Ale můžeme použít i
méně mincí, aby to?

13
00:00:42,580 --> 00:00:45,100
>> Celá taktika v greedy--
být chamtivý cashier--

14
00:00:45,100 --> 00:00:47,600
je použít co možná největší mince.

15
00:00:47,600 --> 00:00:50,670
Takže vždy, když máme
čtvrtiny my je použijeme.

16
00:00:50,670 --> 00:00:54,100
A pak ještě jednou ty dojdou,
budeme používat desetníky, 0,10 $ každý.

17
00:00:54,100 --> 00:00:58,840
Pak nickels, 5 centů za kus, a
pak dolů na haléře, jeden cent každý.

18
00:00:58,840 --> 00:01:01,792
Pomocí největší mince
možné kdykoliv můžeme,

19
00:01:01,792 --> 00:01:07,350
abychom zajistili, že budeme používat nejmenší počet
možných mincí, aby se změna.

20
00:01:07,350 --> 00:01:09,180
>> Takže pojďme projít přes to.

21
00:01:09,180 --> 00:01:11,660
Uživatel potřebuje 0,32 $.

22
00:01:11,660 --> 00:01:14,200
Tak jsme se sami sebe ptát,
můžeme použít čtvrtinu?

23
00:01:14,200 --> 00:01:15,560
No, ano, můžeme.

24
00:01:15,560 --> 00:01:19,720
Takže teď víme jen jim
$ 0,07, a jsme použili jednu minci.

25
00:01:19,720 --> 00:01:20,970
>> Můžeme použít jiný čtvrtinu?

26
00:01:20,970 --> 00:01:21,890
No, no.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 je méně než $ 0,25, takže budeme pokračovat
na příští největší mince k dispozici.

28
00:01:27,570 --> 00:01:30,690
Desetníky jsou $ 0,10 a
Znovu, nemůžeme použít desetníky.

29
00:01:30,690 --> 00:01:35,480
Vzhledem k tomu, desetníky jsou v hodnotě $ 0,10, která
je větší než množství změn dlužné.

30
00:01:35,480 --> 00:01:36,790
>> Jdeme do nickels.

31
00:01:36,790 --> 00:01:40,890
A ano opravdu, $ 0,05 je menší než
$ 0.10-- takže můžeme použít nikl.

32
00:01:40,890 --> 00:01:46,104
Takže teď máme jen dluží uživateli $ 0,02,
a my jsme dosud používají dvě mince.

33
00:01:46,104 --> 00:01:47,270
Nemůžeme použít jiný nikl.

34
00:01:47,270 --> 00:01:51,140
Takže budeme pokračovat do poslední mince v
máme k dispozici, což jsou haléře.

35
00:01:51,140 --> 00:01:52,270
>> A můžeme použít penny?

36
00:01:52,270 --> 00:01:59,060
No, yes-- a my skončit s použitím dvou
haléře na celkem čtyři mincí.

37
00:01:59,060 --> 00:02:01,430
>> Jakmile budete hotovi se
Program bude vypadat takto.

38
00:02:01,430 --> 00:02:03,710
Jakmile uživatel spustí
chamtivý programu, oni budou

39
00:02:03,710 --> 00:02:07,270
vyzváni k uveďte částku
Změna v dolarech, že oni dluží.

40
00:02:07,270 --> 00:02:11,140
A pak váš program vypíše
minimální množství mincí

41
00:02:11,140 --> 00:02:14,740
že chamtiví pokladní by používala
aby se takové množství změn.

42
00:02:14,740 --> 00:02:18,160
>> Takže teď pojďme zlomit toto
dolů do našich dílčí úkoly.

43
00:02:18,160 --> 00:02:21,410
Nejprve budeme výzvu našeho
Uživatel ve výši změn.

44
00:02:21,410 --> 00:02:25,630
A stejně jako u jakéhokoli uživatelského vstupu, chceme
zajistili, že budeme ověřovat, že vstup

45
00:02:25,630 --> 00:02:29,360
a zajistit, že můžeme použít, že
Vstup pro zbytek našeho programu.

46
00:02:29,360 --> 00:02:32,480
Pak budeme vždy
použít co možná největší bod

47
00:02:32,480 --> 00:02:35,240
a udržení přehledu o používaných mincí.

48
00:02:35,240 --> 00:02:39,080
A konečně, tisknout finální
počet mincí, které jsme používali.

49
00:02:39,080 --> 00:02:40,970
>> Takže pojďme mluvit o dotazování.

50
00:02:40,970 --> 00:02:43,550
Částka musí centů,
a to je v dolarech.

51
00:02:43,550 --> 00:02:48,440
A tak za dolary, jdeme
použít typ float proměnné.

52
00:02:48,440 --> 00:02:52,390
Nyní, když se zeptáte uživatele pro vstup,
Chcete, aby se ujistil, že je platný.

53
00:02:52,390 --> 00:02:56,640
A tak tady jsme chtěli využít
smyčkové konstruktu do-while.

54
00:02:56,640 --> 00:03:00,320
>> A do-while pak vykoná
tělo smyčky alespoň jednou.

55
00:03:00,320 --> 00:03:01,650
Takže to přijde vhod.

56
00:03:01,650 --> 00:03:05,510
Víme, že musíme přiměje
Uživatel alespoň jednou za hotovost.

57
00:03:05,510 --> 00:03:07,100
Nyní, pokud, že plovák je platný.

58
00:03:07,100 --> 00:03:07,710
To je skvělé.

59
00:03:07,710 --> 00:03:08,460
Jdeme dál.

60
00:03:08,460 --> 00:03:11,910
Ale i kdyby ne, smyčky zajistí
že dostaneme správné plovák

61
00:03:11,910 --> 00:03:16,810
neustálým opakováním, dokud
Uživatel nám dává platnou hodnotu.

62
00:03:16,810 --> 00:03:18,760
>> Nyní pro do-while
podmínka smyčky, musíme

63
00:03:18,760 --> 00:03:22,000
zvážit, co to znamená
mít neplatný plovák.

64
00:03:22,000 --> 00:03:24,220
Tak pro kontext
Tento problém pravděpodobně

65
00:03:24,220 --> 00:03:27,450
to dává smysl jen proto, aby
akceptovat kladné hodnoty.

66
00:03:27,450 --> 00:03:32,010
>> Tak dojemné on-- jsme získán
hodnota v dolarech od uživatele.

67
00:03:32,010 --> 00:03:35,380
Ale máme co do činění s mincemi,
které jsou zcela v centech.

68
00:03:35,380 --> 00:03:38,660
$ 1 ekvivalent 100 centů.

69
00:03:38,660 --> 00:03:43,670
Takže dobrá věc udělat, je
převést tyto hodnoty do centů.

70
00:03:43,670 --> 00:03:48,380
>> Nyní při převodu z plováku
na celé číslo, takže dolarů do centů,

71
00:03:48,380 --> 00:03:52,230
Chceme se ujistit, že budeme opatrní
o plovoucí desetinnou čárkou nepřesnosti.

72
00:03:52,230 --> 00:03:55,260
Takže to znamená, to-- říkají
můj dolar value-- můj plovák

73
00:03:55,260 --> 00:04:00,260
value-- tam byl ještě 2 $, stále
mohou být některé zbloudilé čísel tam.

74
00:04:00,260 --> 00:04:04,590
Takže chceme, aby se ujistil, že nejenom
my vynásobíme 100 pro získání centů,

75
00:04:04,590 --> 00:04:06,480
ale také kole ho.

76
00:04:06,480 --> 00:04:09,210
>> Takže teď máme částku
změny vůči uživateli.

77
00:04:09,210 --> 00:04:13,430
Původně jsme došli toho v dolarech,
a teď jsme převede ji na centy.

78
00:04:13,430 --> 00:04:17,029
Takže teď můžeme přistoupit k srdci
chamtivý algoritmus, který je vždy

79
00:04:17,029 --> 00:04:19,220
s co největší možné mince.

80
00:04:19,220 --> 00:04:21,930
I když to děláme,
to je důležité, že jsme také

81
00:04:21,930 --> 00:04:25,360
sledovat, kolik mincí jsou
bude se vrátil k uživateli

82
00:04:25,360 --> 00:04:28,630
stejně jako zbývající
Změna vůči uživateli.

83
00:04:28,630 --> 00:04:31,130
>> Program bude vypadat
něco takového.

84
00:04:31,130 --> 00:04:34,190
Po získání částky
dolarů a převést, že k centů,

85
00:04:34,190 --> 00:04:35,790
pak budete zadat smyčku.

86
00:04:35,790 --> 00:04:38,400
Zatímco čtvrtiny může být
used-- to znamená

87
00:04:38,400 --> 00:04:43,660
zatímco množství změn dluží
Uživatel je větší než nebo rovno $ 0,25,

88
00:04:43,660 --> 00:04:45,040
budete používat čtvrtinu.

89
00:04:45,040 --> 00:04:47,000
>> Co teď dělá pomocí čtvrtiny obnáší?

90
00:04:47,000 --> 00:04:51,280
No, one-- budete zvýšit minci
počítat se vrátil k uživateli.

91
00:04:51,280 --> 00:04:55,890
A za druhé budete snižovat proud
Množství změn dluží zpět k uživateli

92
00:04:55,890 --> 00:04:57,520
o $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Poté opakuje, že dokud
čtvrtiny již nelze použít,

94
00:05:00,680 --> 00:05:04,630
přistoupit k další největší
coin-- v tomto případě desetníky, $ 0,10.

95
00:05:04,630 --> 00:05:07,750
Takže budete vstoupit do této smyčky, dokud
můžete nadále používat desetníky.

96
00:05:07,750 --> 00:05:10,720
Pak přistoupit k další
Největší mince, nickels.

97
00:05:10,720 --> 00:05:14,810
Poté, co již nemůže být použit Nickels,
využít zbývající částku haléře.

98
00:05:14,810 --> 00:05:17,800
A konečně, vytisknout
počet mincí použít.

99
00:05:17,800 --> 00:05:20,350
>> Dalším způsobem, že můžete
přistupovat k problému chamtivé

100
00:05:20,350 --> 00:05:22,950
je použít postup modulo.

101
00:05:22,950 --> 00:05:25,690
Modulo je operátor
která vrací zbytek

102
00:05:25,690 --> 00:05:27,680
divize mezi dvěma čísly.

103
00:05:27,680 --> 00:05:30,270
Řekněme, že jsem měl 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
No, 5 je faktor 50,
takže zbytek bude 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- dobře, 10 je také faktor
50, takže zbytek je také 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- dobře libovolný počet mod sám
nebude mít žádný zbytek.

107
00:05:43,660 --> 00:05:45,510
>> Co asi 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
No, 49 jede jen do 50 ° C jednou.

109
00:05:47,910 --> 00:05:50,290
Takže zbytek bude 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 se chystá
vám zbývající část 3.

111
00:05:55,180 --> 00:05:59,120
>> Tak jak můžeme použít modulo
a možná i některé divize

112
00:05:59,120 --> 00:06:01,690
implementovat naši chamtivý algoritmus?

113
00:06:01,690 --> 00:06:05,550
No, přesto chceme zůstat věrný k
Srdcem chamtivý algorithm--, že

114
00:06:05,550 --> 00:06:07,910
je pomocí největší mince je to možné.

115
00:06:07,910 --> 00:06:14,570
>> Takže pojďme se ptát sami sebe, jestli můžeme použít některý
čtvrtiny vrátit $ 0,32 pro uživatele.

116
00:06:14,570 --> 00:06:20,070
No, 32 mod 25 poskytuje
us pozůstatkem $ hodnotou 0.07.

117
00:06:20,070 --> 00:06:24,500
Takže nám říká, že můžeme definitivně
používat jednu čtvrtinu s $ ,07 zbývající.

118
00:06:24,500 --> 00:06:26,180
>> Pak můžeme použít libovolné desetníky?

119
00:06:26,180 --> 00:06:32,740
No, protože no-- 0,07 $ mod
$ ,10 Nám dává zbytek 7.

120
00:06:32,740 --> 00:06:34,960
10 nezachází do 7. vůbec.

121
00:06:34,960 --> 00:06:36,390
>> Pak můžeme použít pětníky?

122
00:06:36,390 --> 00:06:40,490
No $ 0.07 mod 5 centů
nám dává dvě zbývající.

123
00:06:40,490 --> 00:06:42,930
A konečně, můžeme použít nějaké penízky?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 nám dává 0,
což je přesně to

125
00:06:45,930 --> 00:06:48,160
chceme, protože pak to
Znamená to, že jsme se vrátili

126
00:06:48,160 --> 00:06:50,160
pro uživatele všechny změny dluží.

127
00:06:50,160 --> 00:06:54,320
>> Takže teď máte dvě možnosti, jak
provádění chamtivý algorithm--

128
00:06:54,320 --> 00:06:59,230
jeden s oky a jeden s
Kombinace modulo a dělení.

129
00:06:59,230 --> 00:07:03,010
Takže nakonec, jen je třeba
vytisknout konečný počet mincí.

130
00:07:03,010 --> 00:07:06,520
>> Kdybych chtěl, že jsem měl říct,
3 domácí zvířata a tato hodnota byla napevno,

131
00:07:06,520 --> 00:07:09,240
Pak jsem mohl jen použít
Jednoduchý tisk zkušební prohlášení.

132
00:07:09,240 --> 00:07:12,320
Ale naše hodnota je ve skutečnosti
uložen v proměnné.

133
00:07:12,320 --> 00:07:15,260
Tak jak se vám vytisknout
Hodnoty uložené v proměnných?

134
00:07:15,260 --> 00:07:17,880
>> Za tímto účelem bereme
Výhodou zástupnými znaky.

135
00:07:17,880 --> 00:07:21,540
Řekněme, že už jsem deklaroval
konkretizované celé číslo n.

136
00:07:21,540 --> 00:07:25,170
Pak o něco později, jestli chci vytisknout že
hodnoty, pak bych psát řetězec.

137
00:07:25,170 --> 00:07:30,500
A místo této hodnoty bych použil
zástupným symbolem pro tento integer--% i.

138
00:07:30,500 --> 00:07:33,800
Pak po řetězci, mám
čárka, následovaný proměnnou

139
00:07:33,800 --> 00:07:34,950
že chci vytisknout.

140
00:07:34,950 --> 00:07:38,550
A později, když se tiskne,
to bude tisknout hodnotu n.

141
00:07:38,550 --> 00:07:41,570
>> Mohl bych použít také zástupný znak
pro float, například.

142
00:07:41,570 --> 00:07:44,000
Kdybych vám chtěl říct, jak
Kolik peněz mám v kapse,

143
00:07:44,000 --> 00:07:46,820
pak bych mohl říct, že mám% F dolarů.

144
00:07:46,820 --> 00:07:51,330
A později, když tiskne, pak n bude
nahradit tímto držitelem místě.

145
00:07:51,330 --> 00:07:55,530
Mohl bych také například, používat několik
zástupné symboly pro několik proměnných.

146
00:07:55,530 --> 00:07:57,590
Tak dlouho, jak jsem seznamu
je v pořádku, pak jsem

147
00:07:57,590 --> 00:08:00,390
vám říci, kolik
psi a kočky mám.

148
00:08:00,390 --> 00:08:03,710
>> Teď víme, jak přiměje
Uživatel ve výši změn,

149
00:08:03,710 --> 00:08:06,130
zajistilo, že tento vstup
je platný, a pak jsme

150
00:08:06,130 --> 00:08:10,370
mají dva možné způsoby provádění
chamtivý algoritmus vždy používat

151
00:08:10,370 --> 00:08:12,090
co největší mince.

152
00:08:12,090 --> 00:08:15,050
Protože jsme sledovali
kolik mincí budeme používat,

153
00:08:15,050 --> 00:08:19,210
pak můžeme vytisknout tuto hodnotu na konci,
musí uživateli sdělit, kolik mincí, kterou jsou

154
00:08:19,210 --> 00:08:20,240
dostávat se zpátky.

155
00:08:20,240 --> 00:08:24,240
>> Mé jméno je Amayla, a to je CS50.

156
00:08:24,240 --> 00:08:25,915

