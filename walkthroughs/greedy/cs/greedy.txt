Pojďme chamtivý. V chamtivý, naším úkolem je hrát Role chamtivý pokladní. Uživatel nám řekne, jak mnoho změn Dlužíme jim, a pak naším úkolem je vypočítat minimální počet mincí že můžeme použít, aby se že množství změn. 

Začněme s příkladem. Řekněme, že uživatel potřebuje $ ,32 zpět. Mohli bychom to udělat tím, že je 32 haléře, jeden cent každý. Nebo můžu použít také pět coins-- podle což jim tři desetníky, $ 0,10 každý, a dva haléře, $ ,02 každý. Ale můžeme použít i méně mincí, aby to? 

Celá taktika v greedy-- být chamtivý cashier-- je použít co možná největší mince. Takže vždy, když máme čtvrtiny my je použijeme. A pak ještě jednou ty dojdou, budeme používat desetníky, 0,10 $ každý. Pak nickels, 5 centů za kus, a pak dolů na haléře, jeden cent každý. Pomocí největší mince možné kdykoliv můžeme, abychom zajistili, že budeme používat nejmenší počet možných mincí, aby se změna. 

Takže pojďme projít přes to. Uživatel potřebuje 0,32 $. Tak jsme se sami sebe ptát, můžeme použít čtvrtinu? No, ano, můžeme. Takže teď víme jen jim $ 0,07, a jsme použili jednu minci. 

Můžeme použít jiný čtvrtinu? No, no. $ 0,07 je méně než $ 0,25, takže budeme pokračovat na příští největší mince k dispozici. Desetníky jsou $ 0,10 a Znovu, nemůžeme použít desetníky. Vzhledem k tomu, desetníky jsou v hodnotě $ 0,10, která je větší než množství změn dlužné. 

Jdeme do nickels. A ano opravdu, $ 0,05 je menší než $ 0.10-- takže můžeme použít nikl. Takže teď máme jen dluží uživateli $ 0,02, a my jsme dosud používají dvě mince. Nemůžeme použít jiný nikl. Takže budeme pokračovat do poslední mince v máme k dispozici, což jsou haléře. 

A můžeme použít penny? No, yes-- a my skončit s použitím dvou haléře na celkem čtyři mincí. 

Jakmile budete hotovi se Program bude vypadat takto. Jakmile uživatel spustí chamtivý programu, oni budou vyzváni k uveďte částku Změna v dolarech, že oni dluží. A pak váš program vypíše minimální množství mincí že chamtiví pokladní by používala aby se takové množství změn. 

Takže teď pojďme zlomit toto dolů do našich dílčí úkoly. Nejprve budeme výzvu našeho Uživatel ve výši změn. A stejně jako u jakéhokoli uživatelského vstupu, chceme zajistili, že budeme ověřovat, že vstup a zajistit, že můžeme použít, že Vstup pro zbytek našeho programu. Pak budeme vždy použít co možná největší bod a udržení přehledu o používaných mincí. A konečně, tisknout finální počet mincí, které jsme používali. 

Takže pojďme mluvit o dotazování. Částka musí centů, a to je v dolarech. A tak za dolary, jdeme použít typ float proměnné. Nyní, když se zeptáte uživatele pro vstup, Chcete, aby se ujistil, že je platný. A tak tady jsme chtěli využít smyčkové konstruktu do-while. 

A do-while pak vykoná tělo smyčky alespoň jednou. Takže to přijde vhod. Víme, že musíme přiměje Uživatel alespoň jednou za hotovost. Nyní, pokud, že plovák je platný. To je skvělé. Jdeme dál. Ale i kdyby ne, smyčky zajistí že dostaneme správné plovák neustálým opakováním, dokud Uživatel nám dává platnou hodnotu. 

Nyní pro do-while podmínka smyčky, musíme zvážit, co to znamená mít neplatný plovák. Tak pro kontext Tento problém pravděpodobně to dává smysl jen proto, aby akceptovat kladné hodnoty. 

Tak dojemné on-- jsme získán hodnota v dolarech od uživatele. Ale máme co do činění s mincemi, které jsou zcela v centech. $ 1 ekvivalent 100 centů. Takže dobrá věc udělat, je převést tyto hodnoty do centů. 

Nyní při převodu z plováku na celé číslo, takže dolarů do centů, Chceme se ujistit, že budeme opatrní o plovoucí desetinnou čárkou nepřesnosti. Takže to znamená, to-- říkají můj dolar value-- můj plovák value-- tam byl ještě 2 $, stále mohou být některé zbloudilé čísel tam. Takže chceme, aby se ujistil, že nejenom my vynásobíme 100 pro získání centů, ale také kole ho. 

Takže teď máme částku změny vůči uživateli. Původně jsme došli toho v dolarech, a teď jsme převede ji na centy. Takže teď můžeme přistoupit k srdci chamtivý algoritmus, který je vždy s co největší možné mince. I když to děláme, to je důležité, že jsme také sledovat, kolik mincí jsou bude se vrátil k uživateli stejně jako zbývající Změna vůči uživateli. 

Program bude vypadat něco takového. Po získání částky dolarů a převést, že k centů, pak budete zadat smyčku. Zatímco čtvrtiny může být used-- to znamená zatímco množství změn dluží Uživatel je větší než nebo rovno $ 0,25, budete používat čtvrtinu. 

Co teď dělá pomocí čtvrtiny obnáší? No, one-- budete zvýšit minci počítat se vrátil k uživateli. A za druhé budete snižovat proud Množství změn dluží zpět k uživateli o $ 0,25. 

Poté opakuje, že dokud čtvrtiny již nelze použít, přistoupit k další největší coin-- v tomto případě desetníky, $ 0,10. Takže budete vstoupit do této smyčky, dokud můžete nadále používat desetníky. Pak přistoupit k další Největší mince, nickels. Poté, co již nemůže být použit Nickels, využít zbývající částku haléře. A konečně, vytisknout počet mincí použít. 

Dalším způsobem, že můžete přistupovat k problému chamtivé je použít postup modulo. Modulo je operátor která vrací zbytek divize mezi dvěma čísly. Řekněme, že jsem měl 50 mod 5. No, 5 je faktor 50, takže zbytek bude 0. 50 mod 10-- dobře, 10 je také faktor 50, takže zbytek je také 0. 50 mod 50-- dobře libovolný počet mod sám nebude mít žádný zbytek. 

Co asi 50 mod 49? No, 49 jede jen do 50 ° C jednou. Takže zbytek bude 1. 53 mod 50 se chystá vám zbývající část 3. 

Tak jak můžeme použít modulo a možná i některé divize implementovat naši chamtivý algoritmus? No, přesto chceme zůstat věrný k Srdcem chamtivý algorithm--, že je pomocí největší mince je to možné. 

Takže pojďme se ptát sami sebe, jestli můžeme použít některý čtvrtiny vrátit $ 0,32 pro uživatele. No, 32 mod 25 poskytuje us pozůstatkem $ hodnotou 0.07. Takže nám říká, že můžeme definitivně používat jednu čtvrtinu s $ ,07 zbývající. 

Pak můžeme použít libovolné desetníky? No, protože no-- 0,07 $ mod $ ,10 Nám dává zbytek 7. 10 nezachází do 7. vůbec. 

Pak můžeme použít pětníky? No $ 0.07 mod 5 centů nám dává dvě zbývající. A konečně, můžeme použít nějaké penízky? 2 mod 1 nám dává 0, což je přesně to chceme, protože pak to Znamená to, že jsme se vrátili pro uživatele všechny změny dluží. 

Takže teď máte dvě možnosti, jak provádění chamtivý algorithm-- jeden s oky a jeden s Kombinace modulo a dělení. Takže nakonec, jen je třeba vytisknout konečný počet mincí. 

Kdybych chtěl, že jsem měl říct, 3 domácí zvířata a tato hodnota byla napevno, Pak jsem mohl jen použít Jednoduchý tisk zkušební prohlášení. Ale naše hodnota je ve skutečnosti uložen v proměnné. Tak jak se vám vytisknout Hodnoty uložené v proměnných? 

Za tímto účelem bereme Výhodou zástupnými znaky. Řekněme, že už jsem deklaroval konkretizované celé číslo n. Pak o něco později, jestli chci vytisknout že hodnoty, pak bych psát řetězec. A místo této hodnoty bych použil zástupným symbolem pro tento integer--% i. Pak po řetězci, mám čárka, následovaný proměnnou že chci vytisknout. A později, když se tiskne, to bude tisknout hodnotu n. 

Mohl bych použít také zástupný znak pro float, například. Kdybych vám chtěl říct, jak Kolik peněz mám v kapse, pak bych mohl říct, že mám% F dolarů. A později, když tiskne, pak n bude nahradit tímto držitelem místě. Mohl bych také například, používat několik zástupné symboly pro několik proměnných. Tak dlouho, jak jsem seznamu je v pořádku, pak jsem vám říci, kolik psi a kočky mám. 

Teď víme, jak přiměje Uživatel ve výši změn, zajistilo, že tento vstup je platný, a pak jsme mají dva možné způsoby provádění chamtivý algoritmus vždy používat co největší mince. Protože jsme sledovali kolik mincí budeme používat, pak můžeme vytisknout tuto hodnotu na konci, musí uživateli sdělit, kolik mincí, kterou jsou dostávat se zpátky. 

Mé jméno je Amayla, a to je CS50. 