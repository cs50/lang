1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Vamos a conseguir codicioso.

3
00:00:02,900 --> 00:00:06,810
En codiciosos, nuestro trabajo es jugar
el papel de un cajero codicioso.

4
00:00:06,810 --> 00:00:09,750
El usuario nos dirá cómo
muchos cambios que les debemos,

5
00:00:09,750 --> 00:00:13,520
y luego nuestro trabajo es calcular
el número mínimo de monedas

6
00:00:13,520 --> 00:00:17,240
que podemos utilizar para hacer
esa cantidad de cambio.

7
00:00:17,240 --> 00:00:19,560
>> Vamos a empezar con un ejemplo.

8
00:00:19,560 --> 00:00:23,170
Digamos que el usuario requiere $ 0.32 espalda.

9
00:00:23,170 --> 00:00:28,960
Podríamos hacer esto dando
a 32 centavos, un centavo cada uno.

10
00:00:28,960 --> 00:00:35,180
O también podía utilizar cinco por coins--
dándoles tres monedas de diez centavos, $ 0,10 cada una,

11
00:00:35,180 --> 00:00:38,060
y dos centavos, $ 0.02 cada uno.

12
00:00:38,060 --> 00:00:42,580
Pero podríamos utilizar incluso
un menor número de monedas para hacer eso?

13
00:00:42,580 --> 00:00:45,100
>> Toda la táctica en greedy--
ser un codicioso cashier--

14
00:00:45,100 --> 00:00:47,600
es utilizar el más grande de monedas posible.

15
00:00:47,600 --> 00:00:50,670
Así que cada vez que tenemos
cuartas partes usaremos ellos.

16
00:00:50,670 --> 00:00:54,100
Y luego una vez las administradas a cabo,
vamos a utilizar monedas de diez centavos, $ 0,10 cada una.

17
00:00:54,100 --> 00:00:58,840
Luego de cinco centavos, 5 centavos cada uno, y
luego hacia abajo para monedas de un centavo, un centavo cada uno.

18
00:00:58,840 --> 00:01:01,792
Mediante el uso de la moneda más grande
es posible siempre que podamos,

19
00:01:01,792 --> 00:01:07,350
nos aseguramos de que usamos el menor número
de monedas posible hacer el cambio.

20
00:01:07,350 --> 00:01:09,180
>> Así que vamos a caminar a través de este.

21
00:01:09,180 --> 00:01:11,660
El usuario necesita $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Así que nos preguntamos,
podemos utilizar un cuarto?

23
00:01:14,200 --> 00:01:15,560
Bueno, sí podemos.

24
00:01:15,560 --> 00:01:19,720
Así que ahora sólo los conocemos
$ 0,07 y se utilizó una moneda.

25
00:01:19,720 --> 00:01:20,970
>> Se puede utilizar otro cuarto?

26
00:01:20,970 --> 00:01:21,890
Bueno no.

27
00:01:21,890 --> 00:01:27,570
$ 0.07 es menos de $ 0,25, por lo que se procede
a la moneda siguiente más grande disponible.

28
00:01:27,570 --> 00:01:30,690
Dimes son $ 0,10; y
de nuevo, no podemos usar monedas de diez centavos.

29
00:01:30,690 --> 00:01:35,480
Debido a monedas de diez centavos valen $ 0,10 la cual
es más que la cantidad de cambio que debe.

30
00:01:35,480 --> 00:01:36,790
>> Vamos a monedas de cinco centavos.

31
00:01:36,790 --> 00:01:40,890
Y, sí, por supuesto, $ 0,05 es inferior a
$ 0.10-- así que podemos usar un níquel.

32
00:01:40,890 --> 00:01:46,104
Así que ahora sólo nos debemos el usuario $ 0,02,
y que hemos utilizado hasta ahora dos monedas.

33
00:01:46,104 --> 00:01:47,270
No podemos utilizar otro níquel.

34
00:01:47,270 --> 00:01:51,140
Así que a continuación se procede a la última moneda en
nuestra disposición, que son las monedas de un centavo.

35
00:01:51,140 --> 00:01:52,270
>> Y podemos usar centavo?

36
00:01:52,270 --> 00:01:59,060
Bueno, sí-- y terminamos utilizando dos
monedas de un centavo para un total de cuatro monedas.

37
00:01:59,060 --> 00:02:01,430
>> Una vez que haya terminado, la
programa tendrá este aspecto.

38
00:02:01,430 --> 00:02:03,710
Una vez que el usuario ejecuta el
programa de codiciosos, van a

39
00:02:03,710 --> 00:02:07,270
se le pregunte para dar la cantidad de
cambio en dólares que se les debe.

40
00:02:07,270 --> 00:02:11,140
Y entonces su voluntad de salida del programa
la mínima cantidad de monedas

41
00:02:11,140 --> 00:02:14,740
que el cajero codiciosos utilizaría
para hacer que la cantidad de cambio.

42
00:02:14,740 --> 00:02:18,160
>> Así que ahora vamos a romper este
hacia abajo en nuestros subtareas.

43
00:02:18,160 --> 00:02:21,410
En primer lugar vamos a indicarle a nuestro
de usuario para una cantidad de cambio.

44
00:02:21,410 --> 00:02:25,630
Y, como con cualquier entrada del usuario, queremos
asegurarse de que nosotros confirmamos que la entrada

45
00:02:25,630 --> 00:02:29,360
y asegurar que podemos usar esa
entrada para el resto de nuestro programa.

46
00:02:29,360 --> 00:02:32,480
A continuación, vamos a siempre
utilizar el punto más grande posible

47
00:02:32,480 --> 00:02:35,240
y realizar un seguimiento de las monedas utilizadas.

48
00:02:35,240 --> 00:02:39,080
Y, por último, imprimir la final
número de monedas que utilizamos.

49
00:02:39,080 --> 00:02:40,970
>> Así que vamos a hablar de preguntar.

50
00:02:40,970 --> 00:02:43,550
La cantidad debe hacer centavos,
y esto es en dólares.

51
00:02:43,550 --> 00:02:48,440
Y así por dólares, vamos
utilizar el tipo de variable de tipo float.

52
00:02:48,440 --> 00:02:52,390
Ahora cada vez que se pregunta a un usuario para la entrada,
usted quiere asegurarse de que es válido.

53
00:02:52,390 --> 00:02:56,640
Así que aquí nos gusta aprovechar
de la construcción de bucle do-while.

54
00:02:56,640 --> 00:03:00,320
>> Un bucle do-while se ejecutará la
cuerpo del bucle al menos una vez.

55
00:03:00,320 --> 00:03:01,650
Así que esto es muy útil.

56
00:03:01,650 --> 00:03:05,510
Sabemos que tenemos que pedir al
usuario al menos una vez por un flotador.

57
00:03:05,510 --> 00:03:07,100
Ahora si que flotan es válida.

58
00:03:07,100 --> 00:03:07,710
Eso es genial.

59
00:03:07,710 --> 00:03:08,460
Nosotros seguimos adelante.

60
00:03:08,460 --> 00:03:11,910
Pero si no, el bucle se asegurará
que conseguimos una flotación adecuada

61
00:03:11,910 --> 00:03:16,810
repitiendo continuamente hasta
el usuario nos da un valor válido.

62
00:03:16,810 --> 00:03:18,760
>> Ahora, para el do-while
condición del bucle, necesitamos

63
00:03:18,760 --> 00:03:22,000
al considerar lo que significa
tener un flotador no válido.

64
00:03:22,000 --> 00:03:24,220
Así que para el contexto de
este problema, probablemente

65
00:03:24,220 --> 00:03:27,450
que tiene sentido sólo para
aceptar los valores positivos.

66
00:03:27,450 --> 00:03:32,010
>> Así se mueve en-- hemos obtenido una
el valor en dólares por parte del usuario.

67
00:03:32,010 --> 00:03:35,380
Pero estamos tratando con monedas,
los cuales son en su totalidad en centavos.

68
00:03:35,380 --> 00:03:38,660
$ 1 equivale a 100 centavos.

69
00:03:38,660 --> 00:03:43,670
Así que una buena cosa que hacer es
convertir esos valores en centavos.

70
00:03:43,670 --> 00:03:48,380
>> Ahora cuando se convierte de un flotador
a un entero, de modo dólares a centavos,

71
00:03:48,380 --> 00:03:52,230
queremos asegurarnos de que tenemos cuidado
acerca de coma flotante imprecisión.

72
00:03:52,230 --> 00:03:55,260
Por lo que significa que- dicen
mi dólar value-- mi flotador

73
00:03:55,260 --> 00:04:00,260
value-- era un incluso $ 2, hay todavía
puede haber algunos números sueltos en ese país.

74
00:04:00,260 --> 00:04:04,590
Por lo que queremos para asegurarse de que no sólo
Aún multiplicamos por 100 para obtener los centavos,

75
00:04:04,590 --> 00:04:06,480
pero también colofón.

76
00:04:06,480 --> 00:04:09,210
>> Así que ahora tenemos la cantidad
del cambio contraída con el usuario.

77
00:04:09,210 --> 00:04:13,430
Se obtuvieron originalmente en dólares,
y ahora nos hemos convertido a centavos.

78
00:04:13,430 --> 00:04:17,029
Así que ahora podemos proceder con el corazón de
el algoritmo codicioso, lo cual es siempre

79
00:04:17,029 --> 00:04:19,220
utilizando la moneda más grande posible.

80
00:04:19,220 --> 00:04:21,930
Mientras que estamos haciendo esto,
es esencial que también

81
00:04:21,930 --> 00:04:25,360
llevar un registro de cuántas monedas son
va a ser devuelto al usuario

82
00:04:25,360 --> 00:04:28,630
así como la restante
cambiar contraída con el usuario.

83
00:04:28,630 --> 00:04:31,130
>> El programa mirará
algo como esto.

84
00:04:31,130 --> 00:04:34,190
Después de obtener la cantidad de
dólares y convertir eso a centavos,

85
00:04:34,190 --> 00:04:35,790
a continuación, vas a entrar en un bucle.

86
00:04:35,790 --> 00:04:38,400
Mientras cuartos pueden ser
used-- es decir

87
00:04:38,400 --> 00:04:43,660
mientras que la cantidad de cambio debido a la
de usuario es mayor que o igual a $ 0,25,

88
00:04:43,660 --> 00:04:45,040
que va a utilizar un cuarto.

89
00:04:45,040 --> 00:04:47,000
>> Ahora lo que hace uso de un cuarto consiste?

90
00:04:47,000 --> 00:04:51,280
Bueno, uno-- usted aumentará la moneda
contar para ser devuelto al usuario.

91
00:04:51,280 --> 00:04:55,890
Y en segundo lugar descenderá el actual
cantidad de cambio debía de vuelta al usuario

92
00:04:55,890 --> 00:04:57,520
por $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Después de repetir que hasta
cuartas partes ya no se pueden utilizar,

94
00:05:00,680 --> 00:05:04,630
continúe con el siguiente más grande
coin-- en este caso las monedas de diez centavos, $ 0.10.

95
00:05:04,630 --> 00:05:07,750
Así que vas a entrar en bucle hasta
ya no se puede utilizar monedas de diez centavos.

96
00:05:07,750 --> 00:05:10,720
A continuación, proceder a la siguiente
más grande de monedas, monedas de cinco centavos.

97
00:05:10,720 --> 00:05:14,810
Después de monedas de cinco centavos ya no se pueden utilizar,
utilizar la cantidad restante en monedas de un centavo.

98
00:05:14,810 --> 00:05:17,800
Y, por último, imprimir el
número de monedas que utiliza.

99
00:05:17,800 --> 00:05:20,350
>> Otra forma que pueda
abordar el problema codiciosos

100
00:05:20,350 --> 00:05:22,950
es utilizar el método de módulo.

101
00:05:22,950 --> 00:05:25,690
Modulo es un operador
que devuelve el resto

102
00:05:25,690 --> 00:05:27,680
de la división entre dos números.

103
00:05:27,680 --> 00:05:30,270
Decir que tenía 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Bueno, 5 es un factor de 50,
por lo que el resto será 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- así, 10 es también un factor
de 50, por lo que el resto es también 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- así, cualquier número MOD propio
no va a tener ningún resto.

107
00:05:43,660 --> 00:05:45,510
>> ¿Qué hay de 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Bueno, de 49 años sólo se entra en el 50 una vez.

109
00:05:47,910 --> 00:05:50,290
Así que el resto va a ser 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 va a
darle un resto de 3.

111
00:05:55,180 --> 00:05:59,120
>> Entonces, ¿cómo podemos utilizar módulo
y tal vez alguna división

112
00:05:59,120 --> 00:06:01,690
para poner en práctica nuestro algoritmo codicioso?

113
00:06:01,690 --> 00:06:05,550
Bueno, todavía queremos permanecer fieles a la
corazón de los codiciosos que algorithm--

114
00:06:05,550 --> 00:06:07,910
es el uso de la moneda más grande posible.

115
00:06:07,910 --> 00:06:14,570
>> Así que vamos a preguntarnos si podemos utilizar cualquier
cuartos para volver $ 0,32 y el usuario.

116
00:06:14,570 --> 00:06:20,070
Bueno, 32 mod 25 da
nosotros un resto de $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Por lo que nos dice que podemos definitivamente
utilizar un cuarto con $ 0,07 restante.

118
00:06:24,500 --> 00:06:26,180
>> Se puede usar cualesquiera monedas de diez centavos?

119
00:06:26,180 --> 00:06:32,740
Bueno, porque no-- $ 0.07 mod
$ 0.10 nos da un residuo de 7.

120
00:06:32,740 --> 00:06:34,960
10 no entra en 7 en absoluto.

121
00:06:34,960 --> 00:06:36,390
>> Entonces podemos usar monedas de cinco centavos?

122
00:06:36,390 --> 00:06:40,490
Bien $ 0.07 mod 5 centavos
nos da dos restantes.

123
00:06:40,490 --> 00:06:42,930
Y, por último, podemos utilizar cualquier monedas de un centavo?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 nos da 0,
que es en definitiva lo

125
00:06:45,930 --> 00:06:48,160
queremos porque entonces que
significa que nos hemos vuelto

126
00:06:48,160 --> 00:06:50,160
al usuario todos los cambios que debe.

127
00:06:50,160 --> 00:06:54,320
>> Así que ahora tiene dos posibles formas de
la aplicación de la algorithm-- codiciosos

128
00:06:54,320 --> 00:06:59,230
uno con bucles y una con una
combinación de módulo y la división.

129
00:06:59,230 --> 00:07:03,010
Así que, finalmente, sólo tenemos que
imprimir el número definitivo de las monedas.

130
00:07:03,010 --> 00:07:06,520
>> Si quería decir que tuve
3 mascotas y este valor fue codificado,

131
00:07:06,520 --> 00:07:09,240
entonces yo sólo podía utilizar una
declaración de prueba de impresión sencilla.

132
00:07:09,240 --> 00:07:12,320
Pero nuestro valor es en realidad
almacenado en una variable.

133
00:07:12,320 --> 00:07:15,260
Entonces, ¿cómo se imprime el
los valores almacenados en las variables?

134
00:07:15,260 --> 00:07:17,880
>> Para ello, tomamos
ventaja de los marcadores de posición.

135
00:07:17,880 --> 00:07:21,540
Digamos que ya había declarado
un entero n inicializado.

136
00:07:21,540 --> 00:07:25,170
Luego, más tarde si quería imprimir esa
valor, entonces me gustaría escribir la cadena.

137
00:07:25,170 --> 00:07:30,500
Y en lugar de que el valor que yo usaría
un marcador de posición para que integer--% i.

138
00:07:30,500 --> 00:07:33,800
A continuación, después de la cadena, tengo una
coma, seguido de la variable

139
00:07:33,800 --> 00:07:34,950
que quiero imprimir.

140
00:07:34,950 --> 00:07:38,550
Y más adelante, cuando se imprime,
que va a imprimir el valor de n.

141
00:07:38,550 --> 00:07:41,570
>> También podría usar un marcador de posición
para un flotador, por ejemplo.

142
00:07:41,570 --> 00:07:44,000
Si quería decirle cómo
la cantidad de dinero que tengo en el bolsillo,

143
00:07:44,000 --> 00:07:46,820
entonces yo podría decir que tengo dólares% f.

144
00:07:46,820 --> 00:07:51,330
Y más adelante, cuando se imprime, entonces n se
tomar el lugar de ese marcador de posición.

145
00:07:51,330 --> 00:07:55,530
Podría también, por ejemplo, utilizar varios
marcadores de posición para varias variables.

146
00:07:55,530 --> 00:07:57,590
Así que, mientras enumero
en orden, entonces yo

147
00:07:57,590 --> 00:08:00,390
le puede decir cuántas
perros y gatos que tienen.

148
00:08:00,390 --> 00:08:03,710
>> Ahora sabemos como para que aparezca la
de usuario para una cantidad de cambio,

149
00:08:03,710 --> 00:08:06,130
asegurar que dicha entrada
es válida, y luego

150
00:08:06,130 --> 00:08:10,370
tener dos posibles formas de aplicar
el algoritmo codicioso de utilizar siempre

151
00:08:10,370 --> 00:08:12,090
la moneda más grande posible.

152
00:08:12,090 --> 00:08:15,050
Debido a que hemos mantenido un registro de
cuántas monedas que estamos utilizando,

153
00:08:15,050 --> 00:08:19,210
entonces podemos imprimir ese valor al final,
indicando al usuario cuántas monedas que están

154
00:08:19,210 --> 00:08:20,240
volviendo.

155
00:08:20,240 --> 00:08:24,240
>> Mi nombre es el Amayla, y esto es CS50.

156
00:08:24,240 --> 00:08:25,915

