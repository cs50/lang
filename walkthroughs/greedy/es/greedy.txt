Vamos a conseguir codicioso. En codiciosos, nuestro trabajo es jugar el papel de un cajero codicioso. El usuario nos dirá cómo muchos cambios que les debemos, y luego nuestro trabajo es calcular el número mínimo de monedas que podemos utilizar para hacer esa cantidad de cambio. 

Vamos a empezar con un ejemplo. Digamos que el usuario requiere $ 0.32 espalda. Podríamos hacer esto dando a 32 centavos, un centavo cada uno. O también podía utilizar cinco por coins-- dándoles tres monedas de diez centavos, $ 0,10 cada una, y dos centavos, $ 0.02 cada uno. Pero podríamos utilizar incluso un menor número de monedas para hacer eso? 

Toda la táctica en greedy-- ser un codicioso cashier-- es utilizar el más grande de monedas posible. Así que cada vez que tenemos cuartas partes usaremos ellos. Y luego una vez las administradas a cabo, vamos a utilizar monedas de diez centavos, $ 0,10 cada una. Luego de cinco centavos, 5 centavos cada uno, y luego hacia abajo para monedas de un centavo, un centavo cada uno. Mediante el uso de la moneda más grande es posible siempre que podamos, nos aseguramos de que usamos el menor número de monedas posible hacer el cambio. 

Así que vamos a caminar a través de este. El usuario necesita $ 0,32. Así que nos preguntamos, podemos utilizar un cuarto? Bueno, sí podemos. Así que ahora sólo los conocemos $ 0,07 y se utilizó una moneda. 

Se puede utilizar otro cuarto? Bueno no. $ 0.07 es menos de $ 0,25, por lo que se procede a la moneda siguiente más grande disponible. Dimes son $ 0,10; y de nuevo, no podemos usar monedas de diez centavos. Debido a monedas de diez centavos valen $ 0,10 la cual es más que la cantidad de cambio que debe. 

Vamos a monedas de cinco centavos. Y, sí, por supuesto, $ 0,05 es inferior a $ 0.10-- así que podemos usar un níquel. Así que ahora sólo nos debemos el usuario $ 0,02, y que hemos utilizado hasta ahora dos monedas. No podemos utilizar otro níquel. Así que a continuación se procede a la última moneda en nuestra disposición, que son las monedas de un centavo. 

Y podemos usar centavo? Bueno, sí-- y terminamos utilizando dos monedas de un centavo para un total de cuatro monedas. 

Una vez que haya terminado, la programa tendrá este aspecto. Una vez que el usuario ejecuta el programa de codiciosos, van a se le pregunte para dar la cantidad de cambio en dólares que se les debe. Y entonces su voluntad de salida del programa la mínima cantidad de monedas que el cajero codiciosos utilizaría para hacer que la cantidad de cambio. 

Así que ahora vamos a romper este hacia abajo en nuestros subtareas. En primer lugar vamos a indicarle a nuestro de usuario para una cantidad de cambio. Y, como con cualquier entrada del usuario, queremos asegurarse de que nosotros confirmamos que la entrada y asegurar que podemos usar esa entrada para el resto de nuestro programa. A continuación, vamos a siempre utilizar el punto más grande posible y realizar un seguimiento de las monedas utilizadas. Y, por último, imprimir la final número de monedas que utilizamos. 

Así que vamos a hablar de preguntar. La cantidad debe hacer centavos, y esto es en dólares. Y así por dólares, vamos utilizar el tipo de variable de tipo float. Ahora cada vez que se pregunta a un usuario para la entrada, usted quiere asegurarse de que es válido. Así que aquí nos gusta aprovechar de la construcción de bucle do-while. 

Un bucle do-while se ejecutará la cuerpo del bucle al menos una vez. Así que esto es muy útil. Sabemos que tenemos que pedir al usuario al menos una vez por un flotador. Ahora si que flotan es válida. Eso es genial. Nosotros seguimos adelante. Pero si no, el bucle se asegurará que conseguimos una flotación adecuada repitiendo continuamente hasta el usuario nos da un valor válido. 

Ahora, para el do-while condición del bucle, necesitamos al considerar lo que significa tener un flotador no válido. Así que para el contexto de este problema, probablemente que tiene sentido sólo para aceptar los valores positivos. 

Así se mueve en-- hemos obtenido una el valor en dólares por parte del usuario. Pero estamos tratando con monedas, los cuales son en su totalidad en centavos. $ 1 equivale a 100 centavos. Así que una buena cosa que hacer es convertir esos valores en centavos. 

Ahora cuando se convierte de un flotador a un entero, de modo dólares a centavos, queremos asegurarnos de que tenemos cuidado acerca de coma flotante imprecisión. Por lo que significa que- dicen mi dólar value-- mi flotador value-- era un incluso $ 2, hay todavía puede haber algunos números sueltos en ese país. Por lo que queremos para asegurarse de que no sólo Aún multiplicamos por 100 para obtener los centavos, pero también colofón. 

Así que ahora tenemos la cantidad del cambio contraída con el usuario. Se obtuvieron originalmente en dólares, y ahora nos hemos convertido a centavos. Así que ahora podemos proceder con el corazón de el algoritmo codicioso, lo cual es siempre utilizando la moneda más grande posible. Mientras que estamos haciendo esto, es esencial que también llevar un registro de cuántas monedas son va a ser devuelto al usuario así como la restante cambiar contraída con el usuario. 

El programa mirará algo como esto. Después de obtener la cantidad de dólares y convertir eso a centavos, a continuación, vas a entrar en un bucle. Mientras cuartos pueden ser used-- es decir mientras que la cantidad de cambio debido a la de usuario es mayor que o igual a $ 0,25, que va a utilizar un cuarto. 

Ahora lo que hace uso de un cuarto consiste? Bueno, uno-- usted aumentará la moneda contar para ser devuelto al usuario. Y en segundo lugar descenderá el actual cantidad de cambio debía de vuelta al usuario por $ 0,25. 

Después de repetir que hasta cuartas partes ya no se pueden utilizar, continúe con el siguiente más grande coin-- en este caso las monedas de diez centavos, $ 0.10. Así que vas a entrar en bucle hasta ya no se puede utilizar monedas de diez centavos. A continuación, proceder a la siguiente más grande de monedas, monedas de cinco centavos. Después de monedas de cinco centavos ya no se pueden utilizar, utilizar la cantidad restante en monedas de un centavo. Y, por último, imprimir el número de monedas que utiliza. 

Otra forma que pueda abordar el problema codiciosos es utilizar el método de módulo. Modulo es un operador que devuelve el resto de la división entre dos números. Decir que tenía 50 mod 5. Bueno, 5 es un factor de 50, por lo que el resto será 0. 50 mod 10-- así, 10 es también un factor de 50, por lo que el resto es también 0. 50 mod 50-- así, cualquier número MOD propio no va a tener ningún resto. 

¿Qué hay de 50 mod 49? Bueno, de 49 años sólo se entra en el 50 una vez. Así que el resto va a ser 1. 53 mod 50 va a darle un resto de 3. 

Entonces, ¿cómo podemos utilizar módulo y tal vez alguna división para poner en práctica nuestro algoritmo codicioso? Bueno, todavía queremos permanecer fieles a la corazón de los codiciosos que algorithm-- es el uso de la moneda más grande posible. 

Así que vamos a preguntarnos si podemos utilizar cualquier cuartos para volver $ 0,32 y el usuario. Bueno, 32 mod 25 da nosotros un resto de $ 0,07. Por lo que nos dice que podemos definitivamente utilizar un cuarto con $ 0,07 restante. 

Se puede usar cualesquiera monedas de diez centavos? Bueno, porque no-- $ 0.07 mod $ 0.10 nos da un residuo de 7. 10 no entra en 7 en absoluto. 

Entonces podemos usar monedas de cinco centavos? Bien $ 0.07 mod 5 centavos nos da dos restantes. Y, por último, podemos utilizar cualquier monedas de un centavo? 2 mod 1 nos da 0, que es en definitiva lo queremos porque entonces que significa que nos hemos vuelto al usuario todos los cambios que debe. 

Así que ahora tiene dos posibles formas de la aplicación de la algorithm-- codiciosos uno con bucles y una con una combinación de módulo y la división. Así que, finalmente, sólo tenemos que imprimir el número definitivo de las monedas. 

Si quería decir que tuve 3 mascotas y este valor fue codificado, entonces yo sólo podía utilizar una declaración de prueba de impresión sencilla. Pero nuestro valor es en realidad almacenado en una variable. Entonces, ¿cómo se imprime el los valores almacenados en las variables? 

Para ello, tomamos ventaja de los marcadores de posición. Digamos que ya había declarado un entero n inicializado. Luego, más tarde si quería imprimir esa valor, entonces me gustaría escribir la cadena. Y en lugar de que el valor que yo usaría un marcador de posición para que integer--% i. A continuación, después de la cadena, tengo una coma, seguido de la variable que quiero imprimir. Y más adelante, cuando se imprime, que va a imprimir el valor de n. 

También podría usar un marcador de posición para un flotador, por ejemplo. Si quería decirle cómo la cantidad de dinero que tengo en el bolsillo, entonces yo podría decir que tengo dólares% f. Y más adelante, cuando se imprime, entonces n se tomar el lugar de ese marcador de posición. Podría también, por ejemplo, utilizar varios marcadores de posición para varias variables. Así que, mientras enumero en orden, entonces yo le puede decir cuántas perros y gatos que tienen. 

Ahora sabemos como para que aparezca la de usuario para una cantidad de cambio, asegurar que dicha entrada es válida, y luego tener dos posibles formas de aplicar el algoritmo codicioso de utilizar siempre la moneda más grande posible. Debido a que hemos mantenido un registro de cuántas monedas que estamos utilizando, entonces podemos imprimir ese valor al final, indicando al usuario cuántas monedas que están volviendo. 

Mi nombre es el Amayla, y esto es CS50. 