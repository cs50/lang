Kom ons kry gulsig. In gulsige, ons werk is om te speel die rol van 'n gulsige kassier. Die gebruiker sal ons vertel hoe veel verandering wat ons hulle verskuldig, en dan is ons taak is om te bereken die minimum aantal munte wat ons kan gebruik om daardie bedrag van verandering. 

Kom ons begin met 'n voorbeeld. Sê die gebruiker vereis $ 0,32 terug. Ons kan dit doen deur te gee hulle 32 pennies, een sent elk. Of ek kan ook gebruik vyf coins-- deur gee hulle drie DIMES, $ 0,10 elk, en twee pennies, $ 0,02 elk. Maar kan ons gebruik selfs minder munte wat te maak? 

Die hele taktiek in greedy-- 'n gulsige cashier-- wees is om die grootste munt moontlik te gebruik. So wanneer ons ' kwartale sal ons dit gebruik. En dan keer die loop uit, ons sal DIMES, $ 0,10 elk gebruik. Dan Nickels, 5 sent elk, en dan af na pennies, een sent elk. Deur die gebruik van die grootste munt moontlik as ons dit kan, ons verseker dat ons gebruik maak van die minste aantal munte moontlik om die verandering te maak. 

So laat ons wandel dit deur. Die gebruiker moet $ 0,32. Daarom vra ons onsself, kan ons 'n kwart gebruik? Wel, ja ons kan. So nou weet ons dit net $ 0,07, en ons gebruik 'n munt. 

Kan ons nog 'n kwart gebruik? Wel, nee. $ 0,07 minder as $ 0,25, sodat ons voortgaan na die volgende grootste munt beskikbaar. Dimes is $ 0,10, en weer, kan ons nie dimes gebruik. Omdat DIMES is die moeite werd $ 0,10, wat is meer as die bedrag van verandering verskuldig. 

Ons gaan na Nickels. En ja inderdaad, $ 0,05 minder as $ 0.10-- sodat ons kan 'n nikkel gebruik. So nou het ons net skuld die gebruiker $ 0,02, en ons het tot dusver gebruik twee muntstukke. Ons kan 'n ander nikkel gebruik nie. So dan voortgaan ons na die laaste muntstuk op ons beskikking, wat die pennies is. 

En ons kan gebruik pennie? Wel, yes-- en ons eindig met behulp van twee pennies vir 'n totaal van vier muntstukke. 

Sodra jy klaar is, die program sal lyk. Sodra die gebruiker loop die gulsige program, sal hulle gevra word om die bedrag van gee verandering in dollars wat hulle verskuldig is. En dan is jou program wil uitvoer die minimum bedrag van die muntstukke dat die gulsige kassier sou gebruik om daardie bedrag van verandering te maak. 

So nou kom ons breek hierdie af in ons subtake. Eerste ons gaan noop ons gebruiker vir 'n bedrag van verandering. En, soos met enige toevoer van die gebruiker, ons wil seker te maak dat ons bevestig dat insette en te verseker dat ons kan gebruik wat insette vir die res van ons program. Dan gaan ons altyd gebruik die grootste punt moontlike en hou van die gebruik muntstukke. En ten slotte, druk die finale aantal muntstukke wat ons gebruik. 

So kom ons praat oor waarna. Die bedrag moet sent te maak, en dit is in dollars. En so is dit vir dollars, ons gaan om die float veranderlike tipe gebruik. Nou wanneer jy 'n gebruiker te vra vir insette, jy wil om seker te maak dat dit geldig is. En so hier is ons graag om voordeel te trek van die do-while lus konstruk. 

A do-while lus sal uit te voer die liggaam van die lus ten minste een keer. So dit handig te pas kom. Ons weet dat ons nodig het om die vinnige gebruiker ten minste een keer vir 'n float. Nou as dit float is geldig. Dit is wonderlik. Ons beweeg aan. Maar so nie, sal die lus te verseker dat ons 'n behoorlike float deur voortdurend te herhaal totdat die gebruiker gee ons 'n geldige waarde. 

Nou vir die do-while lus toestand, moet ons om te oorweeg wat dit beteken om 'n ongeldige float het. So vir die konteks van hierdie probleem, waarskynlik dit maak sin net aanvaar positiewe waardes. 

So beweeg is-- het ons het 'n waarde in dollars uit die gebruiker. Maar ons te doen het met munte, wat is heeltemal in sent. $ 1 is gelyk aan 100 sent. So 'n goeie ding om te doen is om omskep daardie waardes in sent. 

En toe die omskakeling van 'n float om 'n heelgetal, sodat dollars sent, Ons wil seker maak dat ons versigtig oor swaai-punt onakkuraatheid. So dit beteken that-- sê my dollar value-- my float value-- was 'n nog $ 2, daar steeds dalk 'n paar verdwaalde getalle in daar. So wil ons seker maak dat dit nie net ons vermenigvuldig met 100 om die sent te kry, maar ons rond dit ook af. 

So nou het ons die bedrag van verandering te danke aan die gebruiker. Ons het oorspronklik verkry dit in dollars, en nou het ons dit omgeskakel word na sent. So nou kan ons voortgaan met die hart van die gulsige algoritme, wat altyd met behulp van die grootste munt moontlik. Terwyl ons dit doen, is dit noodsaaklik dat ons ook hou van hoeveel munte is gaan terug na die gebruiker sowel as die res van die verander verskuldig aan die gebruiker. 

Die program sal kyk iets soos hierdie. Na jy die hoeveelheid dollar en omskep dit tot sent, dan sal jy 'n lus te betree. Terwyl kwartale kan wees used-- dit wil sê terwyl die bedrag van verandering te danke aan die gebruiker is groter as of gelyk aan $ 0,25, jy 'n kwart gebruik. 

Nou wat beteken die gebruik van 'n kwart behels? Wel, one-- jy die muntstuk te verhoog tel tot teruggestuur word aan die gebruiker. En die tweede het jy die huidige afname bedrag van verandering verskuldig terug na die gebruiker deur $ 0,25. 

Na herhaal dat tot kwartale kan nie meer gebruik word nie, gaan na die volgende grootste coin-- in hierdie geval DIMES, $ 0,10. Sodat jy dit lus betree alvorens jy kan nie meer gebruik dimes. Gaan dan na die volgende grootste muntstuk, Nickels. Na Nickels nie meer gebruik kan word, gebruik die oorblywende bedrag in pennies. En ten slotte, druk die aantal munte gebruik. 

Nog 'n manier wat jy kan benader die gulsige probleem is om die modulo benadering gebruik. Modulo is 'n operateur dat die res terug van die skeiding tussen twee getalle. Ek sê gehad 50 mod 5. Wel, 5 is 'n faktor van 50, sodat die res sal wees 0. 50 mod 10-- goed, 10 is ook 'n faktor van 50, so die res is ook 0. 50 mod 50-- goed, 'n aantal mod self is nie van plan om enige verdere hê. 

Wat van 50 mod 49? Wel, 49 gaan net na 50 keer. So het die res gaan wees 1. 53 mod 50 gaan gee jou 'n restant van 3. 

So, hoe kan ons gebruik modulo en miskien 'n paar afdeling ons gulsig algoritme te implementeer? Wel, wil ons nog getrou aan die bly hart van die gulsige algorithm-- wat is die gebruik van die grootste munt moontlik. 

So laat ons vra onsself as ons enige kan gebruik kwartale om terug te keer $ 0,32 vir die gebruiker. Wel, 32 mod 25 gee ons 'n restant van $ 0,07. Sodat ons vertel dat ons kan beslis gebruik 'n kwart met $ 0,07 oorblywende. 

Kan ons enige DIMES gebruik dan? Wel, no-- omdat $ 0,07 mod $ 0,10 gee ons 'n restant van 7. 10 nie in 7 gaan glad nie. 

Dan kan ons Nickels gebruik? Wel $ 0,07 mod 5 sent gee ons twee oorblywende. En laastens, kan ons enige sente gebruik? 2 mod 1 gee ons 0, wat uiteindelik wat wil ons, want dan is dit beteken dat ons het teruggekeer aan die gebruiker al die verandering verskuldig. 

So nou het jy twee moontlike maniere om implementering van die gulsige algorithm-- een met lusse en een met 'n kombinasie van modulo en verdeeldheid. So ten slotte, ons moet net druk die finale aantal munte. 

As ek wou dat ek moes vertel 3 troeteldiere en hierdie waarde is gekodeer, dan kan ek net gebruik om 'n eenvoudige druk toets verklaring. Maar ons waarde is eintlik gestoor in 'n veranderlike. So hoe kan jy druk die waardes gestoor in veranderlikes? 

Vir hierdie ons neem voordeel van plekhouers. Ek sê reeds verklaar geïnitialiseerd heelgetal n. Dan later as ek wou om te druk wat waarde, dan sou ek die string te skryf. En in plaas van wat waarde sou ek gebruik 'n plekhouer vir daardie integer--% i. Dan na die tou, ek het 'n komma, gevolg deur die veranderlike dat ek wil druk. En later op, wanneer dit druk, Dit sal die waarde van N druk. 

Ek kon ook 'n plekhouer gebruik vir 'n vlot, byvoorbeeld. As ek wou om jou te vertel hoe veel kontant Ek het in my sak, dan kan ek sê ek het% f dollars. En later op wanneer dit druk, dan sal n neem die plek van daardie plek houer. Ek kon ook, byvoorbeeld, gebruik 'n paar plekhouers vir 'n paar veranderlikes. So solank ek 'n lys hulle in orde is, dan sal ek kan jou vertel hoeveel honde en katte wat ek het. 

Nou weet ons hoe om die stiptelike gebruiker vir 'n bedrag van verandering, verseker dat dit insette geldig is, en dan moet ons het twee moontlike maniere om die implementering die gulsige algoritme van altyd met behulp van die grootste munt moontlik. Omdat ons op hoogte van het aangehou hoeveel munte ons gebruik, kan ons dan druk wat waarde aan die einde, vertel die gebruiker hoeveel munte hulle om terug. 

My naam is die Amayla, en dit is CS50. 