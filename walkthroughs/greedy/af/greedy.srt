1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Kom ons kry gulsig.

3
00:00:02,900 --> 00:00:06,810
In gulsige, ons werk is om te speel
die rol van 'n gulsige kassier.

4
00:00:06,810 --> 00:00:09,750
Die gebruiker sal ons vertel hoe
veel verandering wat ons hulle verskuldig,

5
00:00:09,750 --> 00:00:13,520
en dan is ons taak is om te bereken
die minimum aantal munte

6
00:00:13,520 --> 00:00:17,240
wat ons kan gebruik om
daardie bedrag van verandering.

7
00:00:17,240 --> 00:00:19,560
>> Kom ons begin met 'n voorbeeld.

8
00:00:19,560 --> 00:00:23,170
Sê die gebruiker vereis $ 0,32 terug.

9
00:00:23,170 --> 00:00:28,960
Ons kan dit doen deur te gee
hulle 32 pennies, een sent elk.

10
00:00:28,960 --> 00:00:35,180
Of ek kan ook gebruik vyf coins-- deur
gee hulle drie DIMES, $ 0,10 elk,

11
00:00:35,180 --> 00:00:38,060
en twee pennies, $ 0,02 elk.

12
00:00:38,060 --> 00:00:42,580
Maar kan ons gebruik selfs
minder munte wat te maak?

13
00:00:42,580 --> 00:00:45,100
>> Die hele taktiek in greedy--
'n gulsige cashier-- wees

14
00:00:45,100 --> 00:00:47,600
is om die grootste munt moontlik te gebruik.

15
00:00:47,600 --> 00:00:50,670
So wanneer ons '
kwartale sal ons dit gebruik.

16
00:00:50,670 --> 00:00:54,100
En dan keer die loop uit,
ons sal DIMES, $ 0,10 elk gebruik.

17
00:00:54,100 --> 00:00:58,840
Dan Nickels, 5 sent elk, en
dan af na pennies, een sent elk.

18
00:00:58,840 --> 00:01:01,792
Deur die gebruik van die grootste munt
moontlik as ons dit kan,

19
00:01:01,792 --> 00:01:07,350
ons verseker dat ons gebruik maak van die minste aantal
munte moontlik om die verandering te maak.

20
00:01:07,350 --> 00:01:09,180
>> So laat ons wandel dit deur.

21
00:01:09,180 --> 00:01:11,660
Die gebruiker moet $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Daarom vra ons onsself,
kan ons 'n kwart gebruik?

23
00:01:14,200 --> 00:01:15,560
Wel, ja ons kan.

24
00:01:15,560 --> 00:01:19,720
So nou weet ons dit net
$ 0,07, en ons gebruik 'n munt.

25
00:01:19,720 --> 00:01:20,970
>> Kan ons nog 'n kwart gebruik?

26
00:01:20,970 --> 00:01:21,890
Wel, nee.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 minder as $ 0,25, sodat ons voortgaan
na die volgende grootste munt beskikbaar.

28
00:01:27,570 --> 00:01:30,690
Dimes is $ 0,10, en
weer, kan ons nie dimes gebruik.

29
00:01:30,690 --> 00:01:35,480
Omdat DIMES is die moeite werd $ 0,10, wat
is meer as die bedrag van verandering verskuldig.

30
00:01:35,480 --> 00:01:36,790
>> Ons gaan na Nickels.

31
00:01:36,790 --> 00:01:40,890
En ja inderdaad, $ 0,05 minder as
$ 0.10-- sodat ons kan 'n nikkel gebruik.

32
00:01:40,890 --> 00:01:46,104
So nou het ons net skuld die gebruiker $ 0,02,
en ons het tot dusver gebruik twee muntstukke.

33
00:01:46,104 --> 00:01:47,270
Ons kan 'n ander nikkel gebruik nie.

34
00:01:47,270 --> 00:01:51,140
So dan voortgaan ons na die laaste muntstuk op
ons beskikking, wat die pennies is.

35
00:01:51,140 --> 00:01:52,270
>> En ons kan gebruik pennie?

36
00:01:52,270 --> 00:01:59,060
Wel, yes-- en ons eindig met behulp van twee
pennies vir 'n totaal van vier muntstukke.

37
00:01:59,060 --> 00:02:01,430
>> Sodra jy klaar is, die
program sal lyk.

38
00:02:01,430 --> 00:02:03,710
Sodra die gebruiker loop die
gulsige program, sal hulle

39
00:02:03,710 --> 00:02:07,270
gevra word om die bedrag van gee
verandering in dollars wat hulle verskuldig is.

40
00:02:07,270 --> 00:02:11,140
En dan is jou program wil uitvoer
die minimum bedrag van die muntstukke

41
00:02:11,140 --> 00:02:14,740
dat die gulsige kassier sou gebruik
om daardie bedrag van verandering te maak.

42
00:02:14,740 --> 00:02:18,160
>> So nou kom ons breek hierdie
af in ons subtake.

43
00:02:18,160 --> 00:02:21,410
Eerste ons gaan noop ons
gebruiker vir 'n bedrag van verandering.

44
00:02:21,410 --> 00:02:25,630
En, soos met enige toevoer van die gebruiker, ons wil
seker te maak dat ons bevestig dat insette

45
00:02:25,630 --> 00:02:29,360
en te verseker dat ons kan gebruik wat
insette vir die res van ons program.

46
00:02:29,360 --> 00:02:32,480
Dan gaan ons altyd
gebruik die grootste punt moontlike

47
00:02:32,480 --> 00:02:35,240
en hou van die gebruik muntstukke.

48
00:02:35,240 --> 00:02:39,080
En ten slotte, druk die finale
aantal muntstukke wat ons gebruik.

49
00:02:39,080 --> 00:02:40,970
>> So kom ons praat oor waarna.

50
00:02:40,970 --> 00:02:43,550
Die bedrag moet sent te maak,
en dit is in dollars.

51
00:02:43,550 --> 00:02:48,440
En so is dit vir dollars, ons gaan
om die float veranderlike tipe gebruik.

52
00:02:48,440 --> 00:02:52,390
Nou wanneer jy 'n gebruiker te vra vir insette,
jy wil om seker te maak dat dit geldig is.

53
00:02:52,390 --> 00:02:56,640
En so hier is ons graag om voordeel te trek
van die do-while lus konstruk.

54
00:02:56,640 --> 00:03:00,320
>> A do-while lus sal uit te voer die
liggaam van die lus ten minste een keer.

55
00:03:00,320 --> 00:03:01,650
So dit handig te pas kom.

56
00:03:01,650 --> 00:03:05,510
Ons weet dat ons nodig het om die vinnige
gebruiker ten minste een keer vir 'n float.

57
00:03:05,510 --> 00:03:07,100
Nou as dit float is geldig.

58
00:03:07,100 --> 00:03:07,710
Dit is wonderlik.

59
00:03:07,710 --> 00:03:08,460
Ons beweeg aan.

60
00:03:08,460 --> 00:03:11,910
Maar so nie, sal die lus te verseker
dat ons 'n behoorlike float

61
00:03:11,910 --> 00:03:16,810
deur voortdurend te herhaal totdat
die gebruiker gee ons 'n geldige waarde.

62
00:03:16,810 --> 00:03:18,760
>> Nou vir die do-while
lus toestand, moet ons

63
00:03:18,760 --> 00:03:22,000
om te oorweeg wat dit beteken
om 'n ongeldige float het.

64
00:03:22,000 --> 00:03:24,220
So vir die konteks van
hierdie probleem, waarskynlik

65
00:03:24,220 --> 00:03:27,450
dit maak sin net
aanvaar positiewe waardes.

66
00:03:27,450 --> 00:03:32,010
>> So beweeg is-- het ons het 'n
waarde in dollars uit die gebruiker.

67
00:03:32,010 --> 00:03:35,380
Maar ons te doen het met munte,
wat is heeltemal in sent.

68
00:03:35,380 --> 00:03:38,660
$ 1 is gelyk aan 100 sent.

69
00:03:38,660 --> 00:03:43,670
So 'n goeie ding om te doen is om
omskep daardie waardes in sent.

70
00:03:43,670 --> 00:03:48,380
>> En toe die omskakeling van 'n float
om 'n heelgetal, sodat dollars sent,

71
00:03:48,380 --> 00:03:52,230
Ons wil seker maak dat ons versigtig
oor swaai-punt onakkuraatheid.

72
00:03:52,230 --> 00:03:55,260
So dit beteken that-- sê
my dollar value-- my float

73
00:03:55,260 --> 00:04:00,260
value-- was 'n nog $ 2, daar steeds
dalk 'n paar verdwaalde getalle in daar.

74
00:04:00,260 --> 00:04:04,590
So wil ons seker maak dat dit nie net
ons vermenigvuldig met 100 om die sent te kry,

75
00:04:04,590 --> 00:04:06,480
maar ons rond dit ook af.

76
00:04:06,480 --> 00:04:09,210
>> So nou het ons die bedrag
van verandering te danke aan die gebruiker.

77
00:04:09,210 --> 00:04:13,430
Ons het oorspronklik verkry dit in dollars,
en nou het ons dit omgeskakel word na sent.

78
00:04:13,430 --> 00:04:17,029
So nou kan ons voortgaan met die hart van
die gulsige algoritme, wat altyd

79
00:04:17,029 --> 00:04:19,220
met behulp van die grootste munt moontlik.

80
00:04:19,220 --> 00:04:21,930
Terwyl ons dit doen,
is dit noodsaaklik dat ons ook

81
00:04:21,930 --> 00:04:25,360
hou van hoeveel munte is
gaan terug na die gebruiker

82
00:04:25,360 --> 00:04:28,630
sowel as die res van die
verander verskuldig aan die gebruiker.

83
00:04:28,630 --> 00:04:31,130
>> Die program sal kyk
iets soos hierdie.

84
00:04:31,130 --> 00:04:34,190
Na jy die hoeveelheid
dollar en omskep dit tot sent,

85
00:04:34,190 --> 00:04:35,790
dan sal jy 'n lus te betree.

86
00:04:35,790 --> 00:04:38,400
Terwyl kwartale kan wees
used-- dit wil sê

87
00:04:38,400 --> 00:04:43,660
terwyl die bedrag van verandering te danke aan die
gebruiker is groter as of gelyk aan $ 0,25,

88
00:04:43,660 --> 00:04:45,040
jy 'n kwart gebruik.

89
00:04:45,040 --> 00:04:47,000
>> Nou wat beteken die gebruik van 'n kwart behels?

90
00:04:47,000 --> 00:04:51,280
Wel, one-- jy die muntstuk te verhoog
tel tot teruggestuur word aan die gebruiker.

91
00:04:51,280 --> 00:04:55,890
En die tweede het jy die huidige afname
bedrag van verandering verskuldig terug na die gebruiker

92
00:04:55,890 --> 00:04:57,520
deur $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Na herhaal dat tot
kwartale kan nie meer gebruik word nie,

94
00:05:00,680 --> 00:05:04,630
gaan na die volgende grootste
coin-- in hierdie geval DIMES, $ 0,10.

95
00:05:04,630 --> 00:05:07,750
Sodat jy dit lus betree alvorens
jy kan nie meer gebruik dimes.

96
00:05:07,750 --> 00:05:10,720
Gaan dan na die volgende
grootste muntstuk, Nickels.

97
00:05:10,720 --> 00:05:14,810
Na Nickels nie meer gebruik kan word,
gebruik die oorblywende bedrag in pennies.

98
00:05:14,810 --> 00:05:17,800
En ten slotte, druk die
aantal munte gebruik.

99
00:05:17,800 --> 00:05:20,350
>> Nog 'n manier wat jy kan
benader die gulsige probleem

100
00:05:20,350 --> 00:05:22,950
is om die modulo benadering gebruik.

101
00:05:22,950 --> 00:05:25,690
Modulo is 'n operateur
dat die res terug

102
00:05:25,690 --> 00:05:27,680
van die skeiding tussen twee getalle.

103
00:05:27,680 --> 00:05:30,270
Ek sê gehad 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Wel, 5 is 'n faktor van 50,
sodat die res sal wees 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- goed, 10 is ook 'n faktor
van 50, so die res is ook 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- goed, 'n aantal mod self
is nie van plan om enige verdere hê.

107
00:05:43,660 --> 00:05:45,510
>> Wat van 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Wel, 49 gaan net na 50 keer.

109
00:05:47,910 --> 00:05:50,290
So het die res gaan wees 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 gaan
gee jou 'n restant van 3.

111
00:05:55,180 --> 00:05:59,120
>> So, hoe kan ons gebruik modulo
en miskien 'n paar afdeling

112
00:05:59,120 --> 00:06:01,690
ons gulsig algoritme te implementeer?

113
00:06:01,690 --> 00:06:05,550
Wel, wil ons nog getrou aan die bly
hart van die gulsige algorithm-- wat

114
00:06:05,550 --> 00:06:07,910
is die gebruik van die grootste munt moontlik.

115
00:06:07,910 --> 00:06:14,570
>> So laat ons vra onsself as ons enige kan gebruik
kwartale om terug te keer $ 0,32 vir die gebruiker.

116
00:06:14,570 --> 00:06:20,070
Wel, 32 mod 25 gee
ons 'n restant van $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Sodat ons vertel dat ons kan beslis
gebruik 'n kwart met $ 0,07 oorblywende.

118
00:06:24,500 --> 00:06:26,180
>> Kan ons enige DIMES gebruik dan?

119
00:06:26,180 --> 00:06:32,740
Wel, no-- omdat $ 0,07 mod
$ 0,10 gee ons 'n restant van 7.

120
00:06:32,740 --> 00:06:34,960
10 nie in 7 gaan glad nie.

121
00:06:34,960 --> 00:06:36,390
>> Dan kan ons Nickels gebruik?

122
00:06:36,390 --> 00:06:40,490
Wel $ 0,07 mod 5 sent
gee ons twee oorblywende.

123
00:06:40,490 --> 00:06:42,930
En laastens, kan ons enige sente gebruik?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 gee ons 0,
wat uiteindelik wat

125
00:06:45,930 --> 00:06:48,160
wil ons, want dan is dit
beteken dat ons het teruggekeer

126
00:06:48,160 --> 00:06:50,160
aan die gebruiker al die verandering verskuldig.

127
00:06:50,160 --> 00:06:54,320
>> So nou het jy twee moontlike maniere om
implementering van die gulsige algorithm--

128
00:06:54,320 --> 00:06:59,230
een met lusse en een met 'n
kombinasie van modulo en verdeeldheid.

129
00:06:59,230 --> 00:07:03,010
So ten slotte, ons moet net
druk die finale aantal munte.

130
00:07:03,010 --> 00:07:06,520
>> As ek wou dat ek moes vertel
3 troeteldiere en hierdie waarde is gekodeer,

131
00:07:06,520 --> 00:07:09,240
dan kan ek net gebruik om 'n
eenvoudige druk toets verklaring.

132
00:07:09,240 --> 00:07:12,320
Maar ons waarde is eintlik
gestoor in 'n veranderlike.

133
00:07:12,320 --> 00:07:15,260
So hoe kan jy druk die
waardes gestoor in veranderlikes?

134
00:07:15,260 --> 00:07:17,880
>> Vir hierdie ons neem
voordeel van plekhouers.

135
00:07:17,880 --> 00:07:21,540
Ek sê reeds verklaar
geïnitialiseerd heelgetal n.

136
00:07:21,540 --> 00:07:25,170
Dan later as ek wou om te druk wat
waarde, dan sou ek die string te skryf.

137
00:07:25,170 --> 00:07:30,500
En in plaas van wat waarde sou ek gebruik
'n plekhouer vir daardie integer--% i.

138
00:07:30,500 --> 00:07:33,800
Dan na die tou, ek het 'n
komma, gevolg deur die veranderlike

139
00:07:33,800 --> 00:07:34,950
dat ek wil druk.

140
00:07:34,950 --> 00:07:38,550
En later op, wanneer dit druk,
Dit sal die waarde van N druk.

141
00:07:38,550 --> 00:07:41,570
>> Ek kon ook 'n plekhouer gebruik
vir 'n vlot, byvoorbeeld.

142
00:07:41,570 --> 00:07:44,000
As ek wou om jou te vertel hoe
veel kontant Ek het in my sak,

143
00:07:44,000 --> 00:07:46,820
dan kan ek sê ek het% f dollars.

144
00:07:46,820 --> 00:07:51,330
En later op wanneer dit druk, dan sal n
neem die plek van daardie plek houer.

145
00:07:51,330 --> 00:07:55,530
Ek kon ook, byvoorbeeld, gebruik 'n paar
plekhouers vir 'n paar veranderlikes.

146
00:07:55,530 --> 00:07:57,590
So solank ek 'n lys
hulle in orde is, dan sal ek

147
00:07:57,590 --> 00:08:00,390
kan jou vertel hoeveel
honde en katte wat ek het.

148
00:08:00,390 --> 00:08:03,710
>> Nou weet ons hoe om die stiptelike
gebruiker vir 'n bedrag van verandering,

149
00:08:03,710 --> 00:08:06,130
verseker dat dit insette
geldig is, en dan moet ons

150
00:08:06,130 --> 00:08:10,370
het twee moontlike maniere om die implementering
die gulsige algoritme van altyd met behulp van

151
00:08:10,370 --> 00:08:12,090
die grootste munt moontlik.

152
00:08:12,090 --> 00:08:15,050
Omdat ons op hoogte van het aangehou
hoeveel munte ons gebruik,

153
00:08:15,050 --> 00:08:19,210
kan ons dan druk wat waarde aan die einde,
vertel die gebruiker hoeveel munte hulle

154
00:08:19,210 --> 00:08:20,240
om terug.

155
00:08:20,240 --> 00:08:24,240
>> My naam is die Amayla, en dit is CS50.

156
00:08:24,240 --> 00:08:25,915

