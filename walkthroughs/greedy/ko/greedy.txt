의 욕심하자. 욕심, 우리의 작업은 재생하는 것입니다 욕심 점원의 역할. 사용자는 어떻게 우리를 알려줍니다 우리가 빚을 많이 변화, 다음 우리의 작업은 계산하는 것입니다 동전의 최소 개수 우리는 확인하는 데 사용할 수있는 변화의 양. 

예제를 시작하자. 사용자가 다시 $ 0.32을 필요로 말한다. 우리는 제공하여이 작업을 수행 할 수 그 32 페니, 하나 센트 각각. 아니면 내가 또한 의해 다섯 coins--을 사용할 수 있습니다 세 센트를주고, $ 0.10 각, 두 개의 동전, $ 0.02 각. 그러나 우리는 심지어 사용할 수 있습니다 적은 동전은 만들려면? 

greedy--의 전체 전술 욕심 cashier-- 될 수 있습니다 가능한 가장 큰 동전을 사용하는 것입니다. 그래서 때마다 우리가 4 분 우리는 그들을 사용합니다. 그리고 사람들은 밖으로 실행하면 우리는 센트, $ 0.10를 각각 사용합니다. 그런 다음 센트, 5 센트, 그리고 다음 동전에 이르기까지, 하나 센트 각각. 큰 동전을 사용하여 때마다 우리가 할 수있는 가능 우리는 우리가 가장 적은 수를 사용하는지 확인 가능한 동전은 변경 사항을 확인합니다. 

그래서이를 통해 살펴 보겠습니다. 사용자는 $ 0.32이 필요합니다. 그래서 우리는 우리 자신에게 물어, 우리는 분기 사용할 수 있습니까? 음, 그래 우리는 할 수 있습니다. 그래서 지금 우리는 그들을 알고 $ 0.07, 우리는 하나의 동전을 사용했다. 

우리는 또 다른 분기를 사용할 수 있습니까? 음 ... 아니. $ 0.07는 $ 0.25 미만, 그래서 우리는 계속 사용할 수있는 다음으로 큰 동전합니다. 임은 $ 0.10이며, 다시, 우리는 센트를 사용할 수 없습니다. 임은 $ 0.10, 가치가 있기 때문에 어떤 빚 변화의 양보다 더 많은 것이다. 

우리는 니켈로 이동합니다. 그리고, 그래 참, $ 0.05 미만 $ 0.10-- 그래서 우리는 니켈을 사용할 수 있습니다. 그래서 지금 우리는, $ 0.02 사용자를 빚 우리는 지금까지 두 개의 동전을 사용했습니다. 우리는 다른 니켈을 사용할 수 없습니다. 그럼 우리의 마지막 동전으로 이동 페니 우리의 처분. 

그리고 우리는 페니를 사용할 수 있습니까? 음, 어마, 우리는 두 가지를 사용하게 네 동전의 총 동전. 

당신이 완료되면, 프로그램은 다음과 같이 표시됩니다. 사용자가 실행되면 욕심 프로그램, 그들은거야 의 양을 제공하라는 메시지가 그들이 빚지고있는 달러의 변화. 다음 프로그램 출력됩니다 동전 최소량 욕심 점원 사용할 것 변화의 양을 확인합니다. 

그래서 지금의이 휴식 할 수 아래 우리의 하위에. 처음에 우리는 메시지를 표시거야 우리 변화의 금액에 대한 사용자. 그리고, 사용자 입력에, 우리는 원하는 우리가 그 입력의 유효성을 검사해야합니다 우리가 그것을 사용할 수있는 및 확인 우리의 프로그램의 나머지 부분에 대한 입력. 그런 다음 우리는 항상에거야 가능한 가장 큰 지점을 사용 사용 된 동전을 추적. 그리고 마지막으로, 최종 인쇄 우리가 사용하는 동전의 수입니다. 

그럼 프롬프트에 대해 이야기 할 수 있습니다. 금액은 센트를해야합니다 이 달러입니다. 그래서 달러, 우리는거야 플로트 변수 유형을 사용합니다. 이제 입력을 사용자에게 물어 때마다, 당신은 유효하다는 있는지 확인하려면. 그래서 여기에 우리가 활용할 수 좋아 DO-whil​​e 루프 구조의. 

할 - while 루프가 실행됩니다 적어도 한 번 루프의 몸. 그래서이 유용합니다. 우리는 우리가 메시지를 표시해야한다는 것을 알고있다 한 번 이상 부동의 사용자. 이제 플로트는 유효합니다. 잘 됐네요. 우리는 이동합니다. 하지만하지 않으면 것은 루프가 보장합니다 우리는 적절한 플로트를 얻을 때까지 계속 반복하여 사용자는 우리에게 유효한 값을 제공합니다. 

이제 DO-동안 루프 조건, 우리는 필요 그것이 무엇을 의미하는지 고려 잘못된 플로트가 있습니다. 의 컨텍스트에 대한 그래서 이 문제를 아마 그것은 단지에 의미가 있습니다 양의 값을 받아들입니다. 

그래서 on-- 이동 우리가 획득 한 사용자의 달러 값입니다. 그러나 우리는 동전을 처리하고, 센트에 전적으로 어떤 있습니다. $ 1 100 센트에 해당합니다. 그래서 할 수있는 좋은 일이다 센트에 그 값을 변환합니다. 

이제 부동 소수점으로 변환 할 때 정수로, 센트 달러 그래서 우리는 우리가 조심있어이 있는지 확인하려면 부동 소수점 부정확성에 대한. 그래서 that-- 말을 의미 내 달러 내 플로트를 value-- value-- 여전히 더 $ (2)이 있었다 거기에 몇 가지 길잃은 숫자 일 수있다. 그래서 우리는이 있는지 확인하려면뿐만 아니라, 우리가 센트를 얻기 위해 100을 곱 않습니다, 그러나 우리는 또한 반올림. 

그래서 지금 우리는 양이 변화의 사용자에게 빚진. 우리는 원래 달러를 획득 지금 우리는 센트에 변환했습니다. 지금 우리의 마음을 진행할 수 있습니다 항상 욕심 알고리즘, 가능한 가장 큰 동전을 사용. 우리는이 일을하는 동안 그것은 또한 우리가 중요합니다 얼마나 많은 동전입니다 추적 사용자에게 반환 될 것 뿐만 아니라 나머지 사용자에게 빚을 변경합니다. 

이 프로그램은 볼 것이다 이 같은. 후에의 양을 얻을 달러와 센트에 그 변환, 당신은 루프를 입력합니다. 분기가 될 수 있지만 used-- 그 말을하는 것입니다 반면에 빚의 변화량 유저는 이상의 $ 0.25과 같다 당신은 분기를 사용합니다. 

지금 무슨 일이 4 분의 수반 사용합니까? 글쎄, 당신은 동전을 one-- 증가합니다 사용자에게 반환되도록 계산. 그리고 두 번째는 전류를 감소합니다 변화량이 사용자에게 다시 빚 $ 0.25로. 

때까지 반복 한 후 분기는 더 이상 사용할 수 없습니다, 다음 최대로 진행 $ 0.10,이 경우 임에 coin--. 그래서 당신은 때까지 루프를 입력합니다 더 이상 센트를 사용할 수 없습니다. 그런 다음에 진행 가장 큰 동전, 센트. 센트는 더 이상 사용할 수 없습니다 후, 동전의 나머지 양을 사용한다. 그리고 마지막으로, 인쇄 동전의 수는 사용했다. 

또 다른 방법은 당신이 할 수있는 욕심 문제를 접근 모듈러 방식을 사용하는 것이다. 모듈은 연산자 그 나머지를 반환 두 숫자 사이의 분열. 나는 50 모드 5를 가지고 말. 그런데,도 5는 50의 팩터이며, 그래서 나머지는 0이됩니다. 모드 (50)는 10--도, 10도 요인이다 (50), 그래서 나머지는 0이다. 50 모드 50-- 아니라, 임의의 수의 자체 모드 (mod) 모든 나머지를해야 할 것하지 않습니다. 

어떤 모드 49 (50)에 대한? 음, 49 번만 (50)로 들어갑니다. 그래서 나머지가 1이 될 것입니다. 53 모드 (50)로 이동된다 당신에게 (3)의 나머지를 제공합니다. 

그래서 우리는 어떻게 모듈을 사용할 수 있습니다 아마도 일부 부문 우리의 욕심 알고리즘을 구현하는 방법? 글쎄, 우리는 여전히에 충실 할 그 algorithm-- 욕심의 마음 가능한 가장 큰 동전을 사용하고 있습니다. 

그래서 우리는 하나를 사용할 수 있는지 스스로 물어 보자 분기는 사용자에게 $ 0.32를 반환합니다. 음, 32 모드 25 제공 US $ 0.07의 나머지. 즉 우리에게 그래서 우리는 확실히 할 수 나머지 $ 0.07와 1/4 사용합니다. 

우리는 어떤 센트를 사용할 수 있습니까? 음, 말아요 - $ 0.07 모드 때문에 $ 0.10는 우리에게 (7)의 나머지를 제공합니다. (10)는 모두 7로 이동하지 않습니다. 

그 다음 우리는 센트를 사용할 수 있습니까? 그럼 $ 0.07 모드 5 센트 우리 두 사람은 남아 있습니다. 그리고 마지막으로, 우리는 동전을 사용할 수 있습니까? 2 모드 1, 우리에게 공을 준다 궁극적으로 무엇이다 우리는 그 때문에 원하는 우리가 반환 한 것을 의미한다 사용자에게 변화의 모든 빚. 

이제 당신은 두 가지 방법이 욕심 algorithm--를 구현 루프 하나와 하나 모듈과 분열의 조합. 그래서 마지막으로, 우리는 단지 필요 동전의 마지막 번호를 인쇄 할 수 있습니다. 

난 당신이 내가 가진 것을 말하고 싶었다면 3 애완 동물이 값은 하드 코딩 된, 나는 그냥 사용할 수 간단한 인쇄 테스트 문. 그러나 우리의 값은 실제로 변수에 저장된다. 그래서 당신은을 인쇄하는 방법 값은 변수에 저장? 

이를 위해 우리는 가지고 자리의 장점. 이미 선언 한 말 초기화 정수 n. 그리고 나중에 그 인쇄하기를 원한다면 값은, 그때 문자열을 작성합니다. 대신 그 값의 내가 사용하는 것이 그 integer-- % 난에 대한 자리 표시 자. 그런 다음 문자열 후, 내가 가지고 변수 다음에 쉼표, 나는 인쇄 할 것이다. 그리고 나중에, 그것은 인쇄 할 때, 그것은 n의 값을 인쇄 할 수 있습니다. 

또한 자리를 사용할 수 있습니다 예를 들어 부동 소수점을위한. 내가 방법을 말하려고하는 경우 내 주머니에있는 많은 현금, 나는 내가 % f를 달러를 말할 수 있습니다. 그리고 나중에는 N 것이다 다음 인쇄를 할 때 그 장소 홀더의 자리를 차지할. 또한, 예를 들면, 여러 가지를 사용할 수 여러 변수에 대한 자리. 그래서 한 나는 목록으로 다음 그들을 위해, I 당신에게 얼마나 많은 말할 수 개와 고양이는 I 있습니다. 

이제 우리는 메시지를 표시하는 방법을 알고 변화의 금액에 대한 사용자, 이 입력되었는지 확인 유효하고 우리 구현하는 두 가지 방법이있다 항상 사용하는 욕심 알고리즘 가능한 가장 큰 동전입니다. 우리는 추적을 유지했기 때문에 우리가 사용하고 얼마나 많은 동전, 그런 다음, 마지막에 그 값을 출력 할 수 그들이있어 얼마나 많은 동전 사용자 이야기 다시 받고. 

나의 이름은 Amayla이며, 이것은 CS50이다. 