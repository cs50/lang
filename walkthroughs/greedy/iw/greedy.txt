בואו נעשים חמדנים. בשנת חמדנים, תפקידנו הוא לשחק את התפקיד של קופאית חמדנים. המשתמש יגיד לנו איך שינוי הרבה שאנו חייבים להם, ואז תפקידנו הוא לחשב המספר המזערי של מטבעות כי אנחנו יכולים להשתמש בו כדי להפוך את כי סכום השינוי. 

בואו נתחיל עם דוגמה. תגיד המשתמש דורש 0.32 $ בחזרה. אנחנו יכולים לעשות זאת על ידי מתן אותם 32 פרוטות, סנט אחד כל אחד. או שאני יכול להשתמש גם חמישה coins-- ידי לתת להם שלושה מטבעות, 0.10 $ כל אחד, ושתי פרוטות, 0.02 $ כל אחד. אבל אנחנו יכולים להשתמש גם מטבעות פחות לעשות את זה? 

הטקטיקה השלמה greedy-- להיות cashier-- חמדנים היא להשתמש האפשר את המטבעות הגדולים. לכן, בכל פעם שיש לנו רבעים נשתמש בהן. ואז פעם אלה נגמרים, נשתמש מטבעות, 0.10 $ כל אחד. ואז מטבעות, 5 סנט כל אחד, אז עד פרוטות, סנט אחד כל אחד. באמצעות המטבעות הגדולים אפשרי בכל פעם שאנחנו יכולים, אנו מבטיחים כי אנו משתמשים המספר הקטן ביותר מטבעות ניתן לבצע את השינוי. 

אז נעבור זה. המשתמש צריך 0.32 $. אז אנחנו שואלים את עצמנו, אנחנו יכולים להשתמש רק ברבע? ובכן, כן, אנחנו יכולים. אז עכשיו אנחנו רק יודעים אותם 0.07 $, והשתמשנו מטבע אחד. 

האם אנחנו יכולים להשתמש רבעון נוסף? ובכן לא. 0.07 $ הם פחות מ 0.25 $, ולכן נתקדם אל המטבעות הגדולים הזמין הבא. פרוטות הן 0.10 $, ו שוב, אנחנו לא יכולים להשתמש מטבעות. מכיוון מטבעות שווות 0.10 $, אשר הוא יותר מאשר סכום השינוי חייב. 

אנחנו הולכים מטבעות. וגם, אכן כן, 0.05 $ הם פחות מ 0.10-- $ כדי שנוכל להשתמש ניקל. אז עכשיו אנחנו רק חייבים המשתמשים 0.02 $, ואנחנו עד כה השתמשנו שני מטבעים. אנחנו לא יכולים להשתמש ניקל אחר. אז נמשיך המטבע האחרון לרשותנו, אשר הן פרוט. 

ואנחנו יכולים להשתמש אגורה? ובכן, yes-- ואנחנו בסופו של דבר באמצעות שני פרוטות עבור סכום כולל של ארבע מטבעות. 

לאחר שתסיים, את תוכנית יראה ככה. ברגע שהמשתמש מפעיל את יהיו תכנית חמדנים, הם שיתבקש לתת את הסכום של שינוי בדולרים שהם חייבים. ואז פלט יתכנת שלך את הסכום המינימלי של מטבעות כי קופאית החמדנים תשתמש כדי לעשות את זה סכום השינוי. 

אז עכשיו בואו לשבור את זה למטה לתוך תת הפעילויות שלנו. ראשית אנחנו הולכים לבקש שלנו המשתמש בסכום של שינוי. וגם, כמו עם כל קלט משתמש, אנחנו רוצים לוודא שאנחנו לאמת קלט ולהבטיח כי אנו יכולים להשתמש בזה קלט עבור שאר התוכנית שלנו. ואז אנחנו הולכים תמיד להשתמש בנקודה הגדולה ביותר האפשרית ולעקוב אחר של מטבעות בשימוש. ולבסוף, להדפיס בגמר מספר המטבעות כי השתמשנו. 

אז בואו נדבר על מה שגרם. הסכום חייב לעשות סנט, וזה בדולרים. וכך במשך דולרים, אנחנו הולכים כדי להשתמש בסוג המשתנה לצוף. עכשיו בכל פעם אתה שואל משתמש עבור קלט, אתה רוצה לוודא שזה חוקי. אז הנה אנחנו אוהבים לנצל של לבנות לולאה עשה מה. 

לולאת do-תוך תריץ את גוף של הלולאה לפחות פעם אחת. אז זה שימושי. אנחנו יודעים שאנחנו צריכים להנחות את המשתמש לפחות פעם אחת עבור לצוף. עכשיו, אם כי לצוף תקף. זה מצוין. אנחנו עוברים הלאה. אבל אם לא, את הלולאה תבטיח כי אנחנו מקבלים לצוף נאה על ידי חזרה ברציפות עד המשתמש נותן לנו ערך חוקי. 

עכשיו עבור-בזמן מטלות תנאי לולאה, אנחנו צריכים לשקול מה זה אומר צריך לצוף חוקי. אז עבור בהקשר של בעיה זו, כנראה זה הגיוני רק כדי לקבל ערכים חיוביים. 

אז נעים on-- שמנו השיג ערך בדולרים מהמשתמש. אבל יש לנו עסק עם מטבעות, שהן לגמרי בסנטים. 1 $ שווה 100 סנט. אז דבר טוב לעשות הוא להמיר את הערכים האלה לתוך הסנאט. 

עכשיו בעת המרה מתוך לצוף למספר שלם, ולכן דולרים סנט, אנחנו רוצים לוודא כי שנזהרנו על חוסר הדיוק של נקודה צפה. אז זה אומר ש-- לומר הדולר שלי value-- לצוף שלי value-- היה אפילו 2 $, עדיין שם יכול להיות כמה מספרים תועה שם. אז אנחנו רוצים לוודא כי לא רק אנחנו להכפיל ב -100 כדי לקבל את הסנאט, אבל אנחנו גם נעגל. 

אז עכשיו יש לנו את הסכום השינוי חייב למשתמש. אנחנו במקור השיגו אותם בדולרים, ועכשיו אנחנו כבר תרגמנו אותו הסנאט. אז עכשיו אנחנו יכולים להמשיך עם הלב אלגוריתם החמדנים, וזה תמיד באמצעות המטבע הגדול ביותר האפשרי. למרות שאנו עושים את זה, זה חשוב כי אנחנו גם לעקוב אחר כמה מטבעות הם הולך להיות חזר המשתמש כמו גם את הנותרים לשנות מגיעי המשתמש. 

התכנית תיראה משהו כזה. לאחר שתקבל את הסכום של דולרים ולהמיר שכדי סנט, ולאחר מכן תזין לולאה. בעוד רבע יכולים להיות used-- כלומר בעוד סכום השינוי המגיעים המשתמש הוא גדול או שווה ל 0.25 $, תוכל להשתמש רק ברבע. 

עכשיו מה עושה שימוש רבע כרוך? ובכן, one-- תוכל להגדיל את המטבע לספור עד יוחזר אל המשתמש. ושנית זה יקטין את הנוכחי סכום השינוי חייב בחזרה למשתמש ב -0.25 $. 

לאחר שנה נוספת שעד רבעים לא ניתן עוד להשתמש, להמשיך למקום הבא הגדול coin-- ב מטבעות במקרה זה, 0.10 $. אז תזין כי לולאה עד אתה כבר לא יכול להשתמש מטבעות. ואז להמשיך לשלב הבא מטבעים גדולים, מטבעות. לאחר מטבעות כבר לא יכול לשמש, להשתמש הסכום הנותר פרוטות. ולבסוף, להדפיס את מספר המטבעות בשימוש. 

דרך נוספת שאתה יכול ניגשים לבעיה חמדנים הוא להשתמש בגישת מודולו. מודולו הוא מפעיל המחזיר את השארית של החלוקה בין שני מספרים. שאצהיר 50 mod 5. ובכן, 5 הוא גורם של 50, כך והשאר יהיה 0. 50 mod 10-- היטב, 10 הוא גם גורם של 50, אז השארית היא גם 0. 50 mod 50-- היטב, כל מספר mod עצמו לא הולך להיות כל שארית. 

מה לגבי 50 mod 49? ובכן, 49 רק נכנס 50 פעם. אז והשאר הולך להיות 1. 53 mod 50 הולכים לתת לך שארית 3. 

אז איך אנחנו יכולים להשתמש מודולו ואולי קצת חלוקה ליישם אלגוריתם חמדן שלנו? ובכן, אנחנו עדיין רוצים להישאר נאמנים בלב החמדנים algorithm-- כי הוא באמצעות המטבע הגדול ביותר האפשרי. 

אז בואו נשאל את עצמנו אם אנחנו יכולים להשתמש בכל רבע לחזור 0.32 $ למשתמש. ובכן, 32 mod 25 נותן לנו שארית 0.07 $. אז זה אומר לנו שאנחנו יכולים בהחלט להשתמש רבע עם 0.07 $ הנותרים. 

אז אנחנו יכולים להשתמש בכל מטבעות? ובכן, no-- משום 0.07 $ mod 0.10 $ נותנים לנו שארית 7. 10 אינו נכנס 7 בכלל. 

אז נוכל להשתמש מטבעות? ובכן 0.07 $ mod 5 סנט נותן לנו שני הנותרים. ולבסוף, אנו יכולים להשתמש בכל פרוטות? 2 mod 1 נותן לנו 0, וזה בסופו של דבר מה אנחנו רוצים כי אז כי כלומר חזרנו למשתמש כל שינוי חייב. 

אז עכשיו יש לך שתי אפשרויות יישום algorithm-- החמדנים אחד עם לולאות אחד עם שילוב של מודולו וחילוק. אז בסופו של דבר, אנחנו רק צריכים להדפיס את מספר המטבעות הסופי. 

אם רציתי לספר לך שיש לי 3 חיות מחמד וערך זה hardcoded, אז אני רק יכול להשתמש הצהרת מבחן הדפסה פשוט. אבל הערך שלנו הוא למעשה מאוחסן במשתנה. אז איך אתה להדפיס את ערכים מאוחסנים המשתנים? 

בשביל זה אנחנו לוקחים היתרון של מצייני מיקום. תגיד לי כבר הכריז n השלם מאותחל. ואז מאוחר יותר אם אני רוצה להדפיס כי ערך, אז הייתי כותב את המחרוזת. ובמקום ערך כי הייתי משתמש מציין מיקום עבור% integer-- i. ואז אחרי המחרוזת, יש לי פסיק, ואחריו המשתנה כי אני רוצה להדפיס. ובהמשך, כאשר היא מדפיסה, זה יהיה להדפיס את הערך של n. 

יכולתי גם להשתמש מציין מיקום עבור לצוף, למשל. אם רציתי לספר לך איך הרבה מזומנים יש לי בכיס שלי, אז אני יכול לומר שיש לי דולרים% f. ובהמשך כאשר היא מדפיסה, אז n יהיה לתפוס את מקומו של בעל המקום ההוא. יכולתי גם, למשל, להשתמש בכמה מצייני מיקום עבור מספר משתנים. אז כל עוד אני ברשימה אותם בסדר, אז אני יכול להגיד לך כמה כלבים וחתולים יש לי. 

עכשיו אנחנו יודעים כיצד להנחות את המשתמשים בסכום של שינוי, להבטיח כי קלט הוא תקף, ולאחר מכן אנו יש שתי דרכים אפשריות של יישום אלגוריתם החמדנים של תמיד באמצעות המטבע הגדול ביותר האפשרי. מכיוון שאנחנו כבר ניהלו מעקב אחר כמה מטבעות אנו משתמשים, אז אנחנו יכולים להדפיס ערך כי בסוף, המתריעה בפני המשתמש כמה מטבעות שהם לחזור. 

שמי הוא Amayla, וזו CS50. 