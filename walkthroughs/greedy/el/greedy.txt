Ας πάρει άπληστοι. Σε άπληστοι, η δουλειά μας είναι να παίξει ο ρόλος ενός άπληστοι ταμία. Ο χρήστης θα μας πει πώς πολλές αλλαγές τους οφείλουμε, και, στη συνέχεια, η δουλειά μας είναι να υπολογίσει ο ελάχιστος αριθμός κερμάτων ότι μπορούμε να χρησιμοποιήσουμε για να κάνουν ότι το ποσό της αλλαγής. 

Ας ξεκινήσουμε με ένα παράδειγμα. Πείτε το χρήστη απαιτεί $ 0.32 πίσω. Θα μπορούσαμε να το κάνουμε αυτό, δίνοντας τους 32 πένες, ένα σεντ η κάθε μία. Ή θα μπορούσε επίσης να χρησιμοποιήσει πέντε coins-- από δίνοντάς τους τρεις δεκάρες, $ 0,10 η κάθε μία, και δύο πένες, $ 0,02 η κάθε μία. Αλλά θα μπορούσαμε να χρησιμοποιήσει ακόμη λιγότερα κέρματα για να κάνει αυτό; 

Η όλη τακτική στην greedy-- να είναι ένας άπληστος cashier-- είναι να χρησιμοποιήσει όσο το δυνατόν μεγαλύτερο κέρμα. Έτσι, κάθε φορά που έχουμε τρίμηνα θα τα χρησιμοποιούν. Και στη συνέχεια μία φορά εκείνους εξαντληθεί, θα χρησιμοποιήσουμε δεκάρες, $ 0,10 η κάθε μία. Στη συνέχεια επινικελώνουν, 5 σεντ η κάθε μία, και στη συνέχεια, σε πένες, ένα σεντ έκαστη. Με τη χρήση του μεγαλύτερη κέρμα δυνατόν όποτε μπορούμε, μπορούμε να διασφαλίσουμε ότι θα χρησιμοποιήσετε το μικρότερο αριθμό κερμάτων δυνατόν να γίνει η αλλαγή. 

Ας περπατήσει αυτό μέσω. Ο χρήστης χρειάζεται $ 0,32. Έτσι μπορούμε να αναρωτηθούμε, μπορούμε να χρησιμοποιήσουμε το ένα τέταρτο; Λοιπόν, ναι, μπορούμε. Έτσι τώρα μπορούμε να τα γνωρίζουμε μόνο $ 0,07, και χρησιμοποιήσαμε ένα κέρμα. 

Μπορούμε να χρησιμοποιήσουμε άλλο ένα τέταρτο; Λοιπόν όχι. $ 0.07 είναι λιγότερο από $ 0,25, έτσι προχωράμε στην επόμενη μεγαλύτερη διαθέσιμη νομίσματος. Δεκάρες είναι $ 0,10, και και πάλι, δεν μπορούμε να χρησιμοποιήσουμε δεκάρες. Επειδή δεκάρες είναι αξίας $ 0,10, το οποίο είναι κάτι περισσότερο από το ποσό της μεταβολής οφείλεται. 

Εμείς πάμε για να επινικελώνουν. Και, ναι πράγματι, $ 0.05 είναι μικρότερη από $ 0.10-- έτσι μπορούμε να χρησιμοποιήσουμε ένα νικελίου. Έτσι τώρα χρωστάμε μόνο το χρήστη $ 0,02, και έχουμε χρησιμοποιήσει μέχρι τώρα δύο νομίσματα. Δεν μπορούμε να χρησιμοποιήσουμε μια άλλη νικελίου. Έτσι, τότε προχωρούμε στο τελευταίο κέρμα στο διάθεσή μας, που είναι οι πένες. 

Και μπορούμε να χρησιμοποιήσουμε δεκάρα; Λοιπόν, yes-- και καταλήγουμε με τη χρήση δύο πένες για ένα σύνολο τεσσάρων κερμάτων. 

Μόλις τελειώσετε, το πρόγραμμα θα μοιάζει με αυτό. Μόλις ο χρήστης τρέχει το άπληστοι πρόγραμμα, θα ζητηθεί να δώσει το ποσό των αλλαγή σε δολάρια που από όπου και αν οφείλεται. Και τότε η έξοδος του προγράμματος θέλησή σας το ελάχιστο ποσό των κερμάτων ότι ο άπληστος ταμείο θα χρησιμοποιήσετε για να κάνουν το ποσό της αλλαγής. 

Έτσι τώρα ας σπάσει αυτό το κάτω σε δευτερεύουσες εργασίες μας. Πρώτα θα πάμε να παρακινήσει μας χρήστη για το ποσό της αλλαγής. Και, όπως συμβαίνει με κάθε είσοδο του χρήστη, θέλουμε να βεβαιωθείτε ότι θα επικυρώσετε ότι εισόδου και να διασφαλίσουμε ότι μπορούμε να χρησιμοποιήσουμε ότι εισόδου για το υπόλοιπο του προγράμματος μας. Στη συνέχεια θα πάμε να είναι πάντα χρησιμοποιούν το μεγαλύτερο δυνατό σημείο και να παρακολουθείτε τα νομίσματα που χρησιμοποιούνται. Και τέλος, να εκτυπώσετε την τελική αριθμός των κερμάτων που χρησιμοποιήσαμε. 

Έτσι, ας μιλήσουμε για ειδοποίηση. Το ποσό που πρέπει να κάνει σεντ, και αυτό είναι σε δολάρια. Και έτσι για δολάρια, θα πάμε να χρησιμοποιήσει τον τύπο μεταβλητής πλωτήρα. Τώρα κάθε φορά που θα ζητήσετε από ένα χρήστη για την είσοδο, θέλετε να βεβαιωθείτε ότι είναι έγκυρο. Και έτσι εδώ θα ήθελα να επωφεληθώ της κατασκευής do-while loop. 

Μια do-while loop θα εκτελέσει το σώμα του βρόχου τουλάχιστον μία φορά. Έτσι, αυτό έρχεται σε πρακτικό. Γνωρίζουμε ότι πρέπει να ζητήσει η χρήστη, τουλάχιστον μία φορά για ένα πλωτήρα. Τώρα αν αυτό float είναι έγκυρη. Αυτό είναι υπέροχο. Μπορούμε να προχωρήσουμε. Αλλά αν όχι, ο βρόχος θα εξασφαλίσει ότι έχουμε μια σωστή πλωτήρα επαναλαμβάνοντας συνεχώς μέχρι ο χρήστης μας δίνει μια έγκυρη τιμή. 

Τώρα για το do-while προϋπόθεση του βρόχου, χρειαζόμαστε να εξετάσει τι σημαίνει να έχουν μια μη έγκυρη float. Έτσι, για το πλαίσιο της αυτό το πρόβλημα, ίσως είναι λογικό μόνο για να δεχθεί θετικές τιμές. 

Έτσι κινείται on-- έχουμε λαμβάνεται μια αξία σε δολάρια από το χρήστη. Αλλά έχουμε να κάνουμε με κέρματα, τα οποία είναι εξ ολοκλήρου σε σεντ. $ 1 ισοδυναμεί με 100 cents. Έτσι, ένα καλό πράγμα που πρέπει να κάνουμε είναι να μετατρέπουν αυτές τις αξίες σε σεντ. 

Τώρα, κατά τη μετατροπή από ένα πλωτήρα σε ακέραιο, έτσι δολάρια για να σεντς, θέλουμε να διασφαλίσουμε ότι είμαστε προσεκτικοί σχετικά με floating-point ανακρίβεια. Έτσι, αυτό σημαίνει ότι ερμήνευα-- λένε δολάριο μου value-- float μου value-- ήταν ένα ακόμη $ 2, εξακολουθούν να υπάρχουν μπορεί να είναι κάποια αδέσποτα αριθμούς εκεί. Έτσι, θέλουμε να βεβαιωθείτε ότι δεν είναι μόνο εμείς πολλαπλασιάζουμε με το 100 για να πάρει τα σεντ, αλλά το στρογγυλοποιεί επίσης μακριά. 

Έτσι τώρα έχουμε το ποσό της αλλαγής οφείλεται στον χρήστη. Εμείς απέκτησε αρχικά σε δολάρια, και τώρα το έχουμε μετατραπεί σε σεντ. Έτσι τώρα μπορούμε να προχωρήσουμε με την καρδιά της ο άπληστος αλγόριθμος, ο οποίος είναι πάντα χρησιμοποιώντας το μεγαλύτερο κέρμα είναι δυνατόν. Ενώ κάνουμε αυτό, Είναι σημαντικό να έχουμε επίσης να παρακολουθείτε πόσα κέρματα πρόκειται να επιστραφεί στον χρήστη καθώς επίσης και το υπόλοιπο αλλάξετε οφείλεται στον χρήστη. 

Το πρόγραμμα θα εξετάσει κάτι σαν αυτό. Μετά μπορείτε να πάρετε το ποσό της δολάρια και να μετατρέψει αυτό σε σεντ, τότε θα εισάγετε ένα βρόχο. Ενώ τρίμηνα μπορεί να είναι used-- δηλαδή ενώ το ποσό της μεταβολής που οφείλονται στην αυτό είναι μεγαλύτερο από ή ίσο με το $ 0,25, θα χρησιμοποιήσετε ένα τέταρτο. 

Τώρα τι κάνει χρησιμοποιώντας ένα τέταρτο συνεπάγεται; Λοιπόν, ένα-- θα αυξήσετε το κέρμα υπολογίζει να επιστρέψει στον χρήστη. Και δεύτερο, θα μειώσετε την τρέχουσα ποσό της μεταβολής οφείλεται πίσω στο χρήστη από $ 0,25. 

Μετά επαναλαμβάνοντας ότι μέχρι τρίμηνα δεν μπορεί πλέον να χρησιμοποιηθεί, προχωρήστε στο επόμενο μεγαλύτερο coin-- σε αυτήν την περίπτωση δεκάρες, $ 0.10. Έτσι θα εισέλθει σε αυτή τη θηλιά μέχρι δεν μπορείτε πλέον να χρησιμοποιήσετε δεκάρες. Στη συνέχεια, προχωρήστε στο επόμενο μεγαλύτερο κέρμα, επινικελώνουν. Μετά δεν μπορεί πλέον να χρησιμοποιηθεί επινικελώνουν, χρησιμοποιήσετε το υπόλοιπο ποσό σε πένες. Και τέλος, εκτυπώστε το αριθμός κερμάτων που χρησιμοποιείται. 

Ένας άλλος τρόπος που μπορείτε να προσεγγίσει το πρόβλημα άπληστους είναι να χρησιμοποιήσετε την προσέγγιση modulo. Modulo είναι ένας φορέας ότι επιστρέφει το υπόλοιπο της διαίρεσης μεταξύ των δύο αριθμών. Πω ότι είχα 50 mod 5. Λοιπόν, 5 είναι ένας παράγοντας του 50, οπότε το υπόλοιπο θα είναι 0. 50 mod 10-- καλά, 10 είναι επίσης ένας παράγοντας 50, έτσι ώστε το υπόλοιπο είναι επίσης μηδέν. 50 mod 50-- καλά, οποιοσδήποτε αριθμός ίδια mod δεν πρόκειται να έχουν κανένα υπόλοιπο. 

Τι περίπου 50 mod 49; Λοιπόν, 49 πηγαίνει μόνο στο 50 μία φορά. Έτσι, το υπόλοιπο θα είναι 1. 53 mod 50 πρόκειται να σας δώσει ένα υπόλοιπο 3. 

Λοιπόν, πώς μπορούμε να χρησιμοποιήσουμε modulo και ίσως κάποια διαίρεση για την εφαρμογή άπληστος αλγόριθμος μας; Λοιπόν, εμείς εξακολουθούμε να θέλουμε να μείνει πιστή στην καρδιά του άπληστοι algorithm-- ότι είναι με τη χρήση όσο το δυνατόν μεγαλύτερο κέρμα. 

Ας αναρωτηθούμε αν μπορούμε να χρησιμοποιήσουμε οποιοδήποτε τρίμηνα για να επιστρέψει $ 0,32 για το χρήστη. Λοιπόν, 32 mod 25 δίνει μας ένα υπόλοιπο $ 0.07. Έτσι ώστε να μας λέει ότι μπορούμε σίγουρα χρησιμοποιήστε ένα τέταρτο με $ 0.07 υπόλοιπα. 

Μπορούμε στη συνέχεια να χρησιμοποιήσουν οποιαδήποτε δεκάρες; Λοιπόν, no-- επειδή $ 0.07 mod $ 0.10 μας δίνει ένα υπόλοιπο 7. 10 δεν πάει σε 7 καθόλου. 

Στη συνέχεια, μπορούμε να χρησιμοποιήσουμε σεντς; Λοιπόν $ 0.07 mod 5 σεντ μας δίνει δύο που απομένουν. Και τέλος, μπορούμε να χρησιμοποιήσουμε οποιαδήποτε πένες; 2 mod 1 μας δίνει 0, το οποίο είναι τελικά αυτό θέλουμε γιατί τότε ότι σημαίνει ότι έχουμε επιστρέψει στο χρήστη όλες οι μεταβολές που οφείλονται. 

Έτσι τώρα έχετε δύο πιθανούς τρόπους για την εφαρμογή της άπληστοι algorithm-- ένα με βρόχους και ένα με ένα συνδυασμός modulo και της διαίρεσης. Έτσι, τελικά, εμείς απλά πρέπει να εκτυπώστε το τελικό αριθμό των κερμάτων. 

Αν ήθελα να σας πω ότι είχα πει 3 κατοικίδια ζώα και αυτή η αξία είναι ενσωματωμένες, τότε θα μπορούσε να χρησιμοποιήσει μόνο ένα απλή δήλωση δοκιμαστικής εκτύπωσης. Αλλά η αξία μας είναι στην πραγματικότητα αποθηκεύεται σε μια μεταβλητή. Τόσο πώς μπορείτε να εκτυπώσετε το τιμές που αποθηκεύονται στις μεταβλητές; 

Γι 'αυτό παίρνουμε πλεονέκτημα της κράτησης θέσης. Πείτε μου είχε ήδη δηλωθεί προετοιμασμένου ακέραιο n. Στη συνέχεια, αργότερα, αν ήθελα να εκτυπώσετε ότι αξίας, τότε θα ήθελα να γράψω το string. Και αντί αυτής της αξίας θα χρησιμοποιήσετε ένα σύμβολο κράτησης θέσης για το συγκεκριμένο integer--% i. Στη συνέχεια, μετά το string, έχω ένα κόμμα, ακολουθούμενη από την μεταβλητή ότι θέλω να εκτυπώσετε. Και αργότερα, όταν εκτυπώνει, αυτό θα εκτυπώσετε την τιμή του n. 

Θα μπορούσα επίσης να χρησιμοποιήσετε ένα σύμβολο κράτησης θέσης για ένα φλοτέρ, για παράδειγμα. Αν ήθελα να σας πω πόσο πολύ χρήμα έχω στην τσέπη μου, τότε θα μπορούσα να πω ότι έχω δολάρια% f. Και αργότερα, όταν εκτυπώνεται, τότε η θα να πάρει τη θέση του εν λόγω κατόχου θέση. Θα μπορούσε επίσης, για παράδειγμα, να χρησιμοποιούν διάφορες κράτησης θέσης για αρκετές μεταβλητές. Έτσι, όσο μπορώ λίστα τους, προκειμένου, στη συνέχεια, θα μπορεί να σας πει πόσα σκύλους και γάτες που έχω. 

Τώρα ξέρουμε πώς να παρακινήσει το χρήστη για ένα ποσό της μεταβολής, διασφαλιστεί ότι εισόδου είναι έγκυρη, και στη συνέχεια θα έχει δύο δυνατούς τρόπους εφαρμογής ο άπληστος αλγόριθμος χρησιμοποιώντας πάντα ο μεγαλύτερος δυνατός κέρμα. Επειδή έχουμε κρατήσει παρακολουθείτε πόσα κέρματα που χρησιμοποιούμε, μπορούμε στη συνέχεια να εκτυπώσετε την τιμή αυτή στο τέλος, λέει στον χρήστη πόσα κέρματα από όπου και αν να πάρει πίσω. 

Το όνομά μου είναι ο Amayla, και αυτό είναι CS50. 