1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Давайце прагны.

3
00:00:02,900 --> 00:00:06,810
У прагны, наша праца складаецца ў тым, каб гуляць
ролю прагнага касіра.

4
00:00:06,810 --> 00:00:09,750
Карыстальнік раскажа нам, як
шмат змен, якія мы ім вінныя,

5
00:00:09,750 --> 00:00:13,520
і наша праца складаецца ў тым, каб вылічыць
мінімальная колькасць манет

6
00:00:13,520 --> 00:00:17,240
што мы можам выкарыстоўваць, каб зрабіць
што колькасць змен.

7
00:00:17,240 --> 00:00:19,560
>> Давайце пачнем з прыкладу.

8
00:00:19,560 --> 00:00:23,170
Скажам, карыстачу патрабуецца $ 0,32 назад.

9
00:00:23,170 --> 00:00:28,960
Мы маглі б зрабіць гэта, даючы
іх 32 капейкі, адзін цэнт кожная.

10
00:00:28,960 --> 00:00:35,180
Ці я мог бы таксама выкарыстоўваць пяць coins-- шляхам
даючы ім трох пятакоў, $ 0,10 кожная,

11
00:00:35,180 --> 00:00:38,060
і дзве капейкі, $ 0,02 кожная.

12
00:00:38,060 --> 00:00:42,580
Але мы маглі б выкарыстоўваць нават
менш манет, каб зрабіць гэта?

13
00:00:42,580 --> 00:00:45,100
>> Уся тактыка ў greedy--
быць прагным cashier--

14
00:00:45,100 --> 00:00:47,600
з'яўляецца выкарыстанне найбольшую магчымую манету.

15
00:00:47,600 --> 00:00:50,670
Такім чынам, кожны раз, калі ў нас ёсць
чвэрці мы будзем выкарыстоўваць іх.

16
00:00:50,670 --> 00:00:54,100
А потым, як толькі тыя скончыліся,
мы будзем выкарыстоўваць пятакоў, $ 0,10 кожная.

17
00:00:54,100 --> 00:00:58,840
Тады нікелевыя, 5 цэнтаў кожны, і
затым ўніз да драбяза, адзін цэнт кожная.

18
00:00:58,840 --> 00:01:01,792
Выкарыстоўваючы самую вялікую манету
магчыма кожны раз, калі мы можам,

19
00:01:01,792 --> 00:01:07,350
мы гарантуем, што мы выкарыстоўваем найменшая колькасць
манет можна зрабіць змены.

20
00:01:07,350 --> 00:01:09,180
>> Так давайце пройдзем праз гэта.

21
00:01:09,180 --> 00:01:11,660
Карыстачу трэба $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Такім чынам, мы пытаем сябе,
мы можам выкарыстоўваць чвэрць?

23
00:01:14,200 --> 00:01:15,560
Ну, так, мы можам.

24
00:01:15,560 --> 00:01:19,720
Так што цяпер мы ведаем толькі іх
$ 0,07, і мы выкарыстоўвалі адну манету.

25
00:01:19,720 --> 00:01:20,970
>> Ці можам мы выкарыстоўваць яшчэ чвэрць?

26
00:01:20,970 --> 00:01:21,890
Ну, няма.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 менш, чым $ 0,25, таму мы пераходзім
да наступнага па велічыні даступнай манеты.

28
00:01:27,570 --> 00:01:30,690
Dimes складае $ 0,10, і
зноў жа, мы не можам выкарыстоўваць пятакоў.

29
00:01:30,690 --> 00:01:35,480
Таму што пятакоў каштуе $ 0.10, які
больш, чым сума змянення запазычанасці.

30
00:01:35,480 --> 00:01:36,790
>> Мы ідзем да нікелевыя.

31
00:01:36,790 --> 00:01:40,890
І, так, сапраўды, $ 0,05 менш
$ 0.10-- таму мы можам выкарыстоўваць нікель.

32
00:01:40,890 --> 00:01:46,104
Такім чынам, цяпер мы толькі абавязаны карыстачу $ 0,02,
і мы да гэтага часу выкарысталі дзве манеты.

33
00:01:46,104 --> 00:01:47,270
Мы не можам выкарыстоўваць яшчэ адзін нікель.

34
00:01:47,270 --> 00:01:51,140
Такім чынам, мы пераходзім да апошняй манеты ў
нашым распараджэнні, якія з'яўляюцца драбяза.

35
00:01:51,140 --> 00:01:52,270
>> І ці можам мы выкарыстоўваць пені?

36
00:01:52,270 --> 00:01:59,060
Ну, yes-- і мы ў канчатковым выніку з дапамогай двух
пенсы ў агульнай складанасці чатыры манеты.

37
00:01:59,060 --> 00:02:01,430
>> Пасля таго, як вы скончыце,
Праграма будзе выглядаць наступным чынам.

38
00:02:01,430 --> 00:02:03,710
Пасля таго, як карыстальнік запускае
прагныя праграма, яны будуць

39
00:02:03,710 --> 00:02:07,270
будзе прапанавана даць суму
Змяненне ў доларах, што яны павінны.

40
00:02:07,270 --> 00:02:11,140
І тады ваш выснову праграмы будзе
мінімальная колькасць манет

41
00:02:11,140 --> 00:02:14,740
што прагныя касіра будзе выкарыстоўваць
каб зрабіць такую ​​колькасць зменаў.

42
00:02:14,740 --> 00:02:18,160
>> Так што цяпер давайце разбярэм гэты
ўніз ў нашых подзадач.

43
00:02:18,160 --> 00:02:21,410
Па-першае, мы збіраемся, каб наша
карыстальніка на суму змены.

44
00:02:21,410 --> 00:02:25,630
І, як і з любым карыстацкім уводам, мы хочам
пераканайцеся, што мы сцвярджаем, што ўвод

45
00:02:25,630 --> 00:02:29,360
і пераканайцеся, што мы можам выкарыстоўваць
уваход для астатняй частцы нашай праграмы.

46
00:02:29,360 --> 00:02:32,480
Тады мы будзем заўсёды
выкарыстоўваць самую вялікую кропку магчымага

47
00:02:32,480 --> 00:02:35,240
і сачыць за манет, якія выкарыстоўваюцца.

48
00:02:35,240 --> 00:02:39,080
І, нарэшце, раздрукаваць канчатковае
колькасць манет, якія мы выкарыстоўвалі.

49
00:02:39,080 --> 00:02:40,970
>> Такім чынам, давайце пагаворым аб падахвочваючы.

50
00:02:40,970 --> 00:02:43,550
Сума павінна зрабіць цэнтаў,
і гэта ў доларах.

51
00:02:43,550 --> 00:02:48,440
І так за даляры, мы будзем
выкарыстоўваць тып зменнай з якая плавае кропкай.

52
00:02:48,440 --> 00:02:52,390
Зараз, калі вы папытаеце карыстальніка для ўводу,
Вы хочаце, каб пераканацца, што яна дзейнічае.

53
00:02:52,390 --> 00:02:56,640
І таму тут мы хацелі б скарыстацца
канструкта зрабі час цыклу.

54
00:02:56,640 --> 00:03:00,320
>> Цыкл Do-то час будзе выконваць
цела цыклу па меншай меры адзін раз.

55
00:03:00,320 --> 00:03:01,650
Так што гэта вельмі зручна.

56
00:03:01,650 --> 00:03:05,510
Мы ведаем, што нам трэба, каб заахвоціць
карыстальнік па меншай меры, адзін раз за паплаўком.

57
00:03:05,510 --> 00:03:07,100
Цяпер, калі гэта паплавок дзейнічае.

58
00:03:07,100 --> 00:03:07,710
Гэта цудоўна.

59
00:03:07,710 --> 00:03:08,460
Мы ідзем далей.

60
00:03:08,460 --> 00:03:11,910
Але калі няма, то цыкл будзе забяспечваць
што мы атрымліваем правільны паплавок

61
00:03:11,910 --> 00:03:16,810
шляхам бесперапыннага паўтарэння да таго часу,
карыстальнік дае нам сапраўднае значэнне.

62
00:03:16,810 --> 00:03:18,760
>> Цяпер зрабі час
ўмова цыклу, мы павінны

63
00:03:18,760 --> 00:03:22,000
разгледзець пытанне аб тым, што значыць
мець недапушчальны паплавок.

64
00:03:22,000 --> 00:03:24,220
Так што для кантэксту
гэтая праблема, верагодна,

65
00:03:24,220 --> 00:03:27,450
гэта мае сэнс толькі
прымаюць станоўчыя значэння.

66
00:03:27,450 --> 00:03:32,010
>> Такім чынам, перасоўванне on-- мы атрымлівалі
кошт у доларах ад карыстальніка.

67
00:03:32,010 --> 00:03:35,380
Але мы маем справу з манетамі,
якія цалкам у цэнтах.

68
00:03:35,380 --> 00:03:38,660
$ 1 эквівалентна 100 цэнтаў.

69
00:03:38,660 --> 00:03:43,670
Так што добрая рэч, каб зрабіць, гэта
пераўтварыць гэтыя значэння ў цэнтаў.

70
00:03:43,670 --> 00:03:48,380
>> Цяпер пры пераўтварэнні з паплаўка
ў цэлы лік, так што даляры ў цэнтаў,

71
00:03:48,380 --> 00:03:52,230
мы хочам, каб пераканацца, што мы асцярожныя
аб плавае кропкай недакладнасцяў.

72
00:03:52,230 --> 00:03:55,260
Так што азначае that-- сказаць
мой даляр value-- мой паплавок

73
00:03:55,260 --> 00:04:00,260
value-- быў яшчэ $ 2, да гэтага часу
могуць быць некаторыя паразітныя колькасці там.

74
00:04:00,260 --> 00:04:04,590
Таму мы хочам, каб пераканацца, што не толькі
мы памнажаем на 100, каб атрымаць цэнтаў,

75
00:04:04,590 --> 00:04:06,480
але мы таксама давяршэнні.

76
00:04:06,480 --> 00:04:09,210
>> Так што цяпер мы маем суму
змянення запазычанасці перад карыстальнікам.

77
00:04:09,210 --> 00:04:13,430
Першапачаткова мы атрымалі яго ў далярах,
і зараз мы ператварылі яго ў цэнтаў.

78
00:04:13,430 --> 00:04:17,029
Так што цяпер мы можам перайсці з сэрцам
прагны алгарытм, які заўсёды

79
00:04:17,029 --> 00:04:19,220
выкарыстоўваючы самую вялікую манету магчыма.

80
00:04:19,220 --> 00:04:21,930
Нягледзячы на ​​тое, што мы робім гэта,
вельмі важна, што мы таксама

81
00:04:21,930 --> 00:04:25,360
адсочваць, колькі манеты
будзе вернутая карыстачу

82
00:04:25,360 --> 00:04:28,630
а таксама астатнія
змяніць належныя да карыстальніку.

83
00:04:28,630 --> 00:04:31,130
>> Праграма будзе выглядаць
нешта накшталт гэтага.

84
00:04:31,130 --> 00:04:34,190
Пасля таго, як вы атрымаеце суму
даляраў і канвертаваць, што ў цэнтаў,

85
00:04:34,190 --> 00:04:35,790
то вам трэба будзе ўвесці пятлю.

86
00:04:35,790 --> 00:04:38,400
У той час як памяшканні могуць быць
used-- г.зн.

87
00:04:38,400 --> 00:04:43,660
у той час як колькасць змен, належных
Карыстальнік больш або роўная $ 0,25,

88
00:04:43,660 --> 00:04:45,040
вы будзеце выкарыстоўваць чвэрць.

89
00:04:45,040 --> 00:04:47,000
>> Цяпер тое, што робіць з дапамогай чвэрць цягне за сабой?

90
00:04:47,000 --> 00:04:51,280
Ну, одно-- вы павялічыце манету
разлічваць, каб быць вернутыя карыстальніку.

91
00:04:51,280 --> 00:04:55,890
І па-другое вы будзеце памяншаць ток
велічыня змены завінаваціўся назад карыстачу

92
00:04:55,890 --> 00:04:57,520
на $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Пасля таго, як не паўтараць, што да таго часу,
чвэрці не можа быць больш не выкарыстоўваецца,

94
00:05:00,680 --> 00:05:04,630
перайсці да наступнага па велічыні
coin-- у гэтым выпадку пятакоў, $ 0.10.

95
00:05:04,630 --> 00:05:07,750
Такім чынам, вы не будзеце ўвесці гэты цыкл датуль,
Вы больш не можаце выкарыстоўваць пятакоў.

96
00:05:07,750 --> 00:05:10,720
Затым пераходзіце да наступнага
па велічыні манета, нікелевыя.

97
00:05:10,720 --> 00:05:14,810
Пасля таго, як нікелевыя больш не могуць быць выкарыстаны,
выкарыстоўваць астатнюю суму ў драбяза.

98
00:05:14,810 --> 00:05:17,800
І, нарэшце, раздрукаваць
колькасць манет выкарыстоўваецца.

99
00:05:17,800 --> 00:05:20,350
>> Іншы спосаб, які вы можаце
падысці да прагна праблемы

100
00:05:20,350 --> 00:05:22,950
заключаецца ў выкарыстанні па модулю падыход.

101
00:05:22,950 --> 00:05:25,690
Модульнае з'яўляецца аператарам
што вяртае астатак

102
00:05:25,690 --> 00:05:27,680
падзелу паміж дзвюма лічбамі.

103
00:05:27,680 --> 00:05:30,270
Скажам, у мяне было 50 мод 5.

104
00:05:30,270 --> 00:05:34,070
Ну, 5 з'яўляецца фактарам 50,
так што рэшта будзе роўны 0.

105
00:05:34,070 --> 00:05:39,230
50 мод 10-- добра, 10 таксама з'яўляецца фактарам
50, так што астатнія таксама 0.

106
00:05:39,230 --> 00:05:43,660
50 мод 50-- добра, любы лік мод сам
не будзе мець якой-небудзь рэшту.

107
00:05:43,660 --> 00:05:45,510
>> А як наконт 50 мод 49?

108
00:05:45,510 --> 00:05:47,910
Што ж, 49 ідзе толькі ў 50 разоў.

109
00:05:47,910 --> 00:05:50,290
Такім чынам, рэшта будзе 1.

110
00:05:50,290 --> 00:05:55,180
53 мод 50 збіраецца
даць вам астатнюю частку 3.

111
00:05:55,180 --> 00:05:59,120
>> Так як мы можам выкарыстоўваць па модулю
і, магчыма, некаторыя дзяленне

112
00:05:59,120 --> 00:06:01,690
рэалізаваць наш прагны алгарытм?

113
00:06:01,690 --> 00:06:05,550
Ну, мы ўсё яшчэ хочам застацца верным
Сэрца прагны algorithm--, што

114
00:06:05,550 --> 00:06:07,910
выкарыстоўвае самую вялікую манету магчыма.

115
00:06:07,910 --> 00:06:14,570
>> Такім чынам, давайце спытаем сябе, калі мы можам выкарыстоўваць любы
чвэрці, каб вярнуць $ 0,32 да карыстача.

116
00:06:14,570 --> 00:06:20,070
Ну, 32 мод 25 дае
мы рэшта ад $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Так што кажа нам, што мы можам вызначана
выкарыстоўваць адну чвэрць з $ 0,07 да канца.

118
00:06:24,500 --> 00:06:26,180
>> Ці можам мы выкарыстоўваць любыя пятакоў?

119
00:06:26,180 --> 00:06:32,740
Ну, таму што no-- $ 0,07 мод
$ 0.10 дае нам рэшта ад 7.

120
00:06:32,740 --> 00:06:34,960
10 не ўваходзіць у 7 наогул.

121
00:06:34,960 --> 00:06:36,390
>> Тады мы можам выкарыстоўваць нікелевыя?

122
00:06:36,390 --> 00:06:40,490
Добра $ 0.07 мода 5 цэнтаў
дае нам два пакінутых.

123
00:06:40,490 --> 00:06:42,930
І, нарэшце, мы можам выкарыстоўваць любыя грошы?

124
00:06:42,930 --> 00:06:45,930
2 мод 1 дае нам 0,
якая ў канчатковым рахунку, што

125
00:06:45,930 --> 00:06:48,160
мы хочам, таму што тады, што
азначае, што мы вярнуліся

126
00:06:48,160 --> 00:06:50,160
карыстачу ўсе змены павінны.

127
00:06:50,160 --> 00:06:54,320
>> Так што цяпер у вас ёсць два магчымых шляху
рэалізацыі прагны algorithm--

128
00:06:54,320 --> 00:06:59,230
адна з завес і адна з
камбінацыя па модулю і дзялення.

129
00:06:59,230 --> 00:07:03,010
Такім чынам, у рэшце рэшт, нам проста трэба
друк выніковае колькасць манет.

130
00:07:03,010 --> 00:07:06,520
>> Калі б я хацеў сказаць вам, што я меў
3 хатніх жывёл, і гэта значэнне было жорстка,

131
00:07:06,520 --> 00:07:09,240
то я мог бы проста выкарыстоўваць
просты тэст аператар друку.

132
00:07:09,240 --> 00:07:12,320
Але наша каштоўнасць на самай справе
захоўваецца ў зменнай.

133
00:07:12,320 --> 00:07:15,260
Дык як жа вы надрукаваць
Значэння захоўваюцца ў зменных?

134
00:07:15,260 --> 00:07:17,880
>> Для гэтага мы бярэм
Перавага запаўняльнікаў.

135
00:07:17,880 --> 00:07:21,540
Скажам, у мяне ўжо абвясцілі
ініцыялізаваць цэлы лік п.

136
00:07:21,540 --> 00:07:25,170
Тады ў далейшым, калі я хацеў надрукаваць, што
значэнне, то я хацеў бы напісаць радок.

137
00:07:25,170 --> 00:07:30,500
І замест гэтага значэння я хацеў бы выкарыстаць
запаўняльнік для гэтага integer -% я.

138
00:07:30,500 --> 00:07:33,800
Затым пасля радка, у мяне ёсць
коска, а затым зменнай

139
00:07:33,800 --> 00:07:34,950
што я хачу, каб надрукаваць.

140
00:07:34,950 --> 00:07:38,550
І пазней, калі ён друкуе,
ён будзе выводзіць значэнне п.

141
00:07:38,550 --> 00:07:41,570
>> Я мог бы таксама выкарыстоўваць запаўняльнік
для паплаўком, напрыклад.

142
00:07:41,570 --> 00:07:44,000
Калі б я хацеў сказаць вам, як
колькі грошай у мяне ў кішэні,

143
00:07:44,000 --> 00:07:46,820
то я мог бы сказаць, што я% F даляраў.

144
00:07:46,820 --> 00:07:51,330
І пазней, калі ён друкуе, то п будзе
заняць месца гэтага трымальніка месца.

145
00:07:51,330 --> 00:07:55,530
Я мог бы таксама, напрыклад, выкарыстоўваць некалькі
запаўняльнікі для некалькіх зменных.

146
00:07:55,530 --> 00:07:57,590
Так што да таго часу, як я спіс
яны ў парадку, то я

147
00:07:57,590 --> 00:08:00,390
магу вам сказаць, колькі
сабакі і кошкі, у мяне ёсць.

148
00:08:00,390 --> 00:08:03,710
>> Цяпер мы ведаем, як заахвоціць
карыстальніка на суму змены,

149
00:08:03,710 --> 00:08:06,130
пераканайцеся, што гэты ўваход
з'яўляецца сапраўдным, і тады мы

150
00:08:06,130 --> 00:08:10,370
ёсць два магчымых шляху рэалізацыі
прагны алгарытм заўсёды выкарыстоўваючы

151
00:08:10,370 --> 00:08:12,090
самая вялікая манета магчыма.

152
00:08:12,090 --> 00:08:15,050
Паколькі мы адсочвалі
колькі манет мы выкарыстоўваем,

153
00:08:15,050 --> 00:08:19,210
мы можам надрукаваць гэта значэнне ў канцы,
які паведамляе карыстачу, колькі манет яны

154
00:08:19,210 --> 00:08:20,240
атрымаць назад.

155
00:08:20,240 --> 00:08:24,240
>> Мяне клічуць Amayla, і гэта CS50.

156
00:08:24,240 --> 00:08:25,915

