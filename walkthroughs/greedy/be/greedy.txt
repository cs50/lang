Давайце прагны. У прагны, наша праца складаецца ў тым, каб гуляць ролю прагнага касіра. Карыстальнік раскажа нам, як шмат змен, якія мы ім вінныя, і наша праца складаецца ў тым, каб вылічыць мінімальная колькасць манет што мы можам выкарыстоўваць, каб зрабіць што колькасць змен. 

Давайце пачнем з прыкладу. Скажам, карыстачу патрабуецца $ 0,32 назад. Мы маглі б зрабіць гэта, даючы іх 32 капейкі, адзін цэнт кожная. Ці я мог бы таксама выкарыстоўваць пяць coins-- шляхам даючы ім трох пятакоў, $ 0,10 кожная, і дзве капейкі, $ 0,02 кожная. Але мы маглі б выкарыстоўваць нават менш манет, каб зрабіць гэта? 

Уся тактыка ў greedy-- быць прагным cashier-- з'яўляецца выкарыстанне найбольшую магчымую манету. Такім чынам, кожны раз, калі ў нас ёсць чвэрці мы будзем выкарыстоўваць іх. А потым, як толькі тыя скончыліся, мы будзем выкарыстоўваць пятакоў, $ 0,10 кожная. Тады нікелевыя, 5 цэнтаў кожны, і затым ўніз да драбяза, адзін цэнт кожная. Выкарыстоўваючы самую вялікую манету магчыма кожны раз, калі мы можам, мы гарантуем, што мы выкарыстоўваем найменшая колькасць манет можна зрабіць змены. 

Так давайце пройдзем праз гэта. Карыстачу трэба $ 0,32. Такім чынам, мы пытаем сябе, мы можам выкарыстоўваць чвэрць? Ну, так, мы можам. Так што цяпер мы ведаем толькі іх $ 0,07, і мы выкарыстоўвалі адну манету. 

Ці можам мы выкарыстоўваць яшчэ чвэрць? Ну, няма. $ 0,07 менш, чым $ 0,25, таму мы пераходзім да наступнага па велічыні даступнай манеты. Dimes складае $ 0,10, і зноў жа, мы не можам выкарыстоўваць пятакоў. Таму што пятакоў каштуе $ 0.10, які больш, чым сума змянення запазычанасці. 

Мы ідзем да нікелевыя. І, так, сапраўды, $ 0,05 менш $ 0.10-- таму мы можам выкарыстоўваць нікель. Такім чынам, цяпер мы толькі абавязаны карыстачу $ 0,02, і мы да гэтага часу выкарысталі дзве манеты. Мы не можам выкарыстоўваць яшчэ адзін нікель. Такім чынам, мы пераходзім да апошняй манеты ў нашым распараджэнні, якія з'яўляюцца драбяза. 

І ці можам мы выкарыстоўваць пені? Ну, yes-- і мы ў канчатковым выніку з дапамогай двух пенсы ў агульнай складанасці чатыры манеты. 

Пасля таго, як вы скончыце, Праграма будзе выглядаць наступным чынам. Пасля таго, як карыстальнік запускае прагныя праграма, яны будуць будзе прапанавана даць суму Змяненне ў доларах, што яны павінны. І тады ваш выснову праграмы будзе мінімальная колькасць манет што прагныя касіра будзе выкарыстоўваць каб зрабіць такую ​​колькасць зменаў. 

Так што цяпер давайце разбярэм гэты ўніз ў нашых подзадач. Па-першае, мы збіраемся, каб наша карыстальніка на суму змены. І, як і з любым карыстацкім уводам, мы хочам пераканайцеся, што мы сцвярджаем, што ўвод і пераканайцеся, што мы можам выкарыстоўваць уваход для астатняй частцы нашай праграмы. Тады мы будзем заўсёды выкарыстоўваць самую вялікую кропку магчымага і сачыць за манет, якія выкарыстоўваюцца. І, нарэшце, раздрукаваць канчатковае колькасць манет, якія мы выкарыстоўвалі. 

Такім чынам, давайце пагаворым аб падахвочваючы. Сума павінна зрабіць цэнтаў, і гэта ў доларах. І так за даляры, мы будзем выкарыстоўваць тып зменнай з якая плавае кропкай. Зараз, калі вы папытаеце карыстальніка для ўводу, Вы хочаце, каб пераканацца, што яна дзейнічае. І таму тут мы хацелі б скарыстацца канструкта зрабі час цыклу. 

Цыкл Do-то час будзе выконваць цела цыклу па меншай меры адзін раз. Так што гэта вельмі зручна. Мы ведаем, што нам трэба, каб заахвоціць карыстальнік па меншай меры, адзін раз за паплаўком. Цяпер, калі гэта паплавок дзейнічае. Гэта цудоўна. Мы ідзем далей. Але калі няма, то цыкл будзе забяспечваць што мы атрымліваем правільны паплавок шляхам бесперапыннага паўтарэння да таго часу, карыстальнік дае нам сапраўднае значэнне. 

Цяпер зрабі час ўмова цыклу, мы павінны разгледзець пытанне аб тым, што значыць мець недапушчальны паплавок. Так што для кантэксту гэтая праблема, верагодна, гэта мае сэнс толькі прымаюць станоўчыя значэння. 

Такім чынам, перасоўванне on-- мы атрымлівалі кошт у доларах ад карыстальніка. Але мы маем справу з манетамі, якія цалкам у цэнтах. $ 1 эквівалентна 100 цэнтаў. Так што добрая рэч, каб зрабіць, гэта пераўтварыць гэтыя значэння ў цэнтаў. 

Цяпер пры пераўтварэнні з паплаўка ў цэлы лік, так што даляры ў цэнтаў, мы хочам, каб пераканацца, што мы асцярожныя аб плавае кропкай недакладнасцяў. Так што азначае that-- сказаць мой даляр value-- мой паплавок value-- быў яшчэ $ 2, да гэтага часу могуць быць некаторыя паразітныя колькасці там. Таму мы хочам, каб пераканацца, што не толькі мы памнажаем на 100, каб атрымаць цэнтаў, але мы таксама давяршэнні. 

Так што цяпер мы маем суму змянення запазычанасці перад карыстальнікам. Першапачаткова мы атрымалі яго ў далярах, і зараз мы ператварылі яго ў цэнтаў. Так што цяпер мы можам перайсці з сэрцам прагны алгарытм, які заўсёды выкарыстоўваючы самую вялікую манету магчыма. Нягледзячы на ​​тое, што мы робім гэта, вельмі важна, што мы таксама адсочваць, колькі манеты будзе вернутая карыстачу а таксама астатнія змяніць належныя да карыстальніку. 

Праграма будзе выглядаць нешта накшталт гэтага. Пасля таго, як вы атрымаеце суму даляраў і канвертаваць, што ў цэнтаў, то вам трэба будзе ўвесці пятлю. У той час як памяшканні могуць быць used-- г.зн. у той час як колькасць змен, належных Карыстальнік больш або роўная $ 0,25, вы будзеце выкарыстоўваць чвэрць. 

Цяпер тое, што робіць з дапамогай чвэрць цягне за сабой? Ну, одно-- вы павялічыце манету разлічваць, каб быць вернутыя карыстальніку. І па-другое вы будзеце памяншаць ток велічыня змены завінаваціўся назад карыстачу на $ 0,25. 

Пасля таго, як не паўтараць, што да таго часу, чвэрці не можа быць больш не выкарыстоўваецца, перайсці да наступнага па велічыні coin-- у гэтым выпадку пятакоў, $ 0.10. Такім чынам, вы не будзеце ўвесці гэты цыкл датуль, Вы больш не можаце выкарыстоўваць пятакоў. Затым пераходзіце да наступнага па велічыні манета, нікелевыя. Пасля таго, як нікелевыя больш не могуць быць выкарыстаны, выкарыстоўваць астатнюю суму ў драбяза. І, нарэшце, раздрукаваць колькасць манет выкарыстоўваецца. 

Іншы спосаб, які вы можаце падысці да прагна праблемы заключаецца ў выкарыстанні па модулю падыход. Модульнае з'яўляецца аператарам што вяртае астатак падзелу паміж дзвюма лічбамі. Скажам, у мяне было 50 мод 5. Ну, 5 з'яўляецца фактарам 50, так што рэшта будзе роўны 0. 50 мод 10-- добра, 10 таксама з'яўляецца фактарам 50, так што астатнія таксама 0. 50 мод 50-- добра, любы лік мод сам не будзе мець якой-небудзь рэшту. 

А як наконт 50 мод 49? Што ж, 49 ідзе толькі ў 50 разоў. Такім чынам, рэшта будзе 1. 53 мод 50 збіраецца даць вам астатнюю частку 3. 

Так як мы можам выкарыстоўваць па модулю і, магчыма, некаторыя дзяленне рэалізаваць наш прагны алгарытм? Ну, мы ўсё яшчэ хочам застацца верным Сэрца прагны algorithm--, што выкарыстоўвае самую вялікую манету магчыма. 

Такім чынам, давайце спытаем сябе, калі мы можам выкарыстоўваць любы чвэрці, каб вярнуць $ 0,32 да карыстача. Ну, 32 мод 25 дае мы рэшта ад $ 0,07. Так што кажа нам, што мы можам вызначана выкарыстоўваць адну чвэрць з $ 0,07 да канца. 

Ці можам мы выкарыстоўваць любыя пятакоў? Ну, таму што no-- $ 0,07 мод $ 0.10 дае нам рэшта ад 7. 10 не ўваходзіць у 7 наогул. 

Тады мы можам выкарыстоўваць нікелевыя? Добра $ 0.07 мода 5 цэнтаў дае нам два пакінутых. І, нарэшце, мы можам выкарыстоўваць любыя грошы? 2 мод 1 дае нам 0, якая ў канчатковым рахунку, што мы хочам, таму што тады, што азначае, што мы вярнуліся карыстачу ўсе змены павінны. 

Так што цяпер у вас ёсць два магчымых шляху рэалізацыі прагны algorithm-- адна з завес і адна з камбінацыя па модулю і дзялення. Такім чынам, у рэшце рэшт, нам проста трэба друк выніковае колькасць манет. 

Калі б я хацеў сказаць вам, што я меў 3 хатніх жывёл, і гэта значэнне было жорстка, то я мог бы проста выкарыстоўваць просты тэст аператар друку. Але наша каштоўнасць на самай справе захоўваецца ў зменнай. Дык як жа вы надрукаваць Значэння захоўваюцца ў зменных? 

Для гэтага мы бярэм Перавага запаўняльнікаў. Скажам, у мяне ўжо абвясцілі ініцыялізаваць цэлы лік п. Тады ў далейшым, калі я хацеў надрукаваць, што значэнне, то я хацеў бы напісаць радок. І замест гэтага значэння я хацеў бы выкарыстаць запаўняльнік для гэтага integer -% я. Затым пасля радка, у мяне ёсць коска, а затым зменнай што я хачу, каб надрукаваць. І пазней, калі ён друкуе, ён будзе выводзіць значэнне п. 

Я мог бы таксама выкарыстоўваць запаўняльнік для паплаўком, напрыклад. Калі б я хацеў сказаць вам, як колькі грошай у мяне ў кішэні, то я мог бы сказаць, што я% F даляраў. І пазней, калі ён друкуе, то п будзе заняць месца гэтага трымальніка месца. Я мог бы таксама, напрыклад, выкарыстоўваць некалькі запаўняльнікі для некалькіх зменных. Так што да таго часу, як я спіс яны ў парадку, то я магу вам сказаць, колькі сабакі і кошкі, у мяне ёсць. 

Цяпер мы ведаем, як заахвоціць карыстальніка на суму змены, пераканайцеся, што гэты ўваход з'яўляецца сапраўдным, і тады мы ёсць два магчымых шляху рэалізацыі прагны алгарытм заўсёды выкарыстоўваючы самая вялікая манета магчыма. Паколькі мы адсочвалі колькі манет мы выкарыстоўваем, мы можам надрукаваць гэта значэнне ў канцы, які паведамляе карыстачу, колькі манет яны атрымаць назад. 

Мяне клічуць Amayla, і гэта CS50. 