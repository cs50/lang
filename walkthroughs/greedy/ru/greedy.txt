Давайте жадный. В жадный, наша работа состоит в том, чтобы играть роль жадного кассира. Пользователь расскажет нам, как много изменений, которые мы им обязаны, и наша работа состоит в том, чтобы вычислить минимальное количество монет что мы можем использовать, чтобы сделать что количество изменений. 

Давайте начнем с примера. Скажем, пользователю требуется $ 0,32 обратно. Мы могли бы сделать это, давая их 32 копейки, один цент каждая. Или я мог бы также использовать пять coins-- путем давая им трех пятаков, $ 0,10 каждая, и две копейки, $ 0,02 каждая. Но мы могли бы использовать даже меньше монет, чтобы сделать это? 

Вся тактика в greedy-- быть жадным cashier-- является использование наибольшую возможную монету. Таким образом, всякий раз, когда у нас есть четверти мы будем использовать их. А потом, как только те закончились, мы будем использовать пятаков, $ 0,10 каждая. Тогда никелевые, 5 центов каждый, и затем вниз к гроши, один цент каждая. Используя самую большую монету возможно всякий раз, когда мы можем, мы гарантируем, что мы используем наименьшее число монет можно сделать изменения. 

Так давайте пройдем через это. Пользователю нужно $ 0,32. Таким образом, мы спрашиваем себя, мы можем использовать четверть? Ну, да, мы можем. Так что теперь мы знаем только их $ 0,07, и мы использовали одну монету. 

Можем ли мы использовать еще четверть? Ну нет. $ 0,07 меньше, чем $ 0,25, поэтому мы переходим к следующему по величине доступной монеты. Dimes составляет $ 0,10, и опять же, мы не можем использовать пятаков. Потому что пятаков стоит $ 0.10, который больше, чем сумма изменения задолженности. 

Мы идем к никелевые. И, да, действительно, $ 0,05 меньше $ 0.10-- поэтому мы можем использовать никель. Итак, теперь мы только обязаны пользователю $ 0,02, и мы до сих пор использовали две монеты. Мы не можем использовать еще один никель. Итак, мы переходим к последней монеты в нашем распоряжении, которые являются гроши. 

И можем ли мы использовать пенни? Ну, yes-- и мы в конечном итоге с помощью двух пенсы в общей сложности четыре монеты. 

После того, как вы закончите, Программа будет выглядеть следующим образом. После того, как пользователь запускает жадные программа, они будут будет предложено дать сумму Изменение в долларах, что они должны. И тогда ваш вывод программы будет минимальное количество монет что жадные кассира будет использовать чтобы сделать такое количество изменений. 

Так что теперь давайте разберем этот вниз в наших подзадач. Во-первых, мы собираемся, чтобы наша пользователя на сумму изменения. И, как и с любым пользовательским вводом, мы хотим убедитесь, что мы утверждаем, что ввод и убедитесь, что мы можем использовать вход для остальной части нашей программы. Тогда мы будем всегда использовать самую большую точку возможного и следить за монет, используемых. И, наконец, распечатать окончательное количество монет, которые мы использовали. 

Итак, давайте поговорим о побуждая. Сумма должна сделать центов, и это в долларах. И так за доллары, мы будем использовать тип переменной с плавающей точкой. Теперь, когда вы попросите пользователя для ввода, Вы хотите, чтобы убедиться, что она действует. И поэтому здесь мы хотели бы воспользоваться конструкта сделай время цикла. 

Цикл Do-то время будет выполнять тело цикла по крайней мере один раз. Так что это очень удобно. Мы знаем, что нам нужно, чтобы побудить пользователь по меньшей мере, один раз за поплавком. Теперь, если это поплавок действует. Замечательно. Мы идем дальше. Но если нет, то цикл будет обеспечивать что мы получаем правильный поплавок путем непрерывного повторения до тех пор, пользователь дает нам действительное значение. 

Теперь сделай время условие цикла, мы должны рассмотреть вопрос о том, что значит иметь недопустимый поплавок. Так что для контекста эта проблема, вероятно, это имеет смысл только принимают положительные значения. 

Таким образом, перемещение on-- мы получали стоимость в долларах от пользователя. Но мы имеем дело с монетами, которые полностью в центах. $ 1 эквивалентно 100 центов. Так что хорошая вещь, чтобы сделать, это преобразовать эти значения в центов. 

Теперь при преобразовании из поплавка в целое число, так что доллары в центов, мы хотим, чтобы убедиться, что мы осторожны о плавающей точкой неточностей. Так что означает that-- сказать мой доллар value-- мой поплавок value-- был еще $ 2, до сих пор могут быть некоторые паразитные числа там. Поэтому мы хотим, чтобы убедиться, что не только мы умножаем на 100, чтобы получить центов, но мы также довершении. 

Так что теперь мы имеем сумму изменения задолженности перед пользователем. Первоначально мы получили его в долларах, и теперь мы превратили его в центов. Так что теперь мы можем перейти с сердцем жадный алгоритм, который всегда используя самую большую монету возможно. Несмотря на то, что мы делаем это, очень важно, что мы также отслеживать, сколько монеты будет возвращена пользователю а также остальные изменить причитающиеся к пользователю. 

Программа будет выглядеть что-то вроде этого. После того, как вы получите сумму долларов и конвертировать, что в центов, то вам нужно будет ввести петлю. В то время как помещения могут быть used-- т.е. в то время как количество изменений, причитающихся Пользователь больше или равна $ 0,25, вы будете использовать четверть. 

Теперь то, что делает с помощью четверть влечет за собой? Ну, одно-- вы увеличите монету рассчитывать, чтобы быть возвращены пользователю. И во-вторых вы будете уменьшать ток величина изменения задолжал обратно пользователю на $ 0,25. 

После того, как не повторять, что до тех пор, четверти не может быть больше не используется, перейти к следующему по величине coin-- в этом случае пятаков, $ 0.10. Таким образом, вы не будете ввести этот цикл до тех пор, Вы больше не можете использовать пятаков. Затем переходите к следующему по величине монета, никелевые. После того, как никелевые больше не могут быть использованы, использовать оставшуюся сумму в гроши. И, наконец, распечатать количество монет используется. 

Другой способ, который вы можете подойти к жадному проблемы заключается в использовании по модулю подход. Модульное является оператором что возвращает остаток разделения между двумя числами. Скажем, у меня было 50 мод 5. Ну, 5 является фактором 50, так что остаток будет равен 0. 50 мод 10-- хорошо, 10 также является фактором 50, так что остальные тоже 0. 50 мод 50-- хорошо, любое число мод сам не будет иметь какой-либо остаток. 

А как насчет 50 мод 49? Что ж, 49 идет только в 50 раз. Таким образом, остаток будет 1. 53 мод 50 собирается дать вам оставшуюся часть 3. 

Так как мы можем использовать по модулю и, возможно, некоторые деление реализовать наш жадный алгоритм? Ну, мы все еще хотим остаться верным Сердце жадный algorithm--, что использует самую большую монету возможно. 

Итак, давайте спросим себя, если мы можем использовать любой четверти, чтобы вернуть $ 0,32 к пользователю. Ну, 32 мод 25 дает мы остаток от $ 0,07. Так что говорит нам, что мы можем определенно использовать одну четверть с $ 0,07 до конца. 

Можем ли мы использовать любые пятаков? Ну, потому что no-- $ 0,07 мод $ 0.10 дает нам остаток от 7. 10 не входит в 7 вообще. 

Тогда мы можем использовать никелевые? Хорошо $ 0.07 мода 5 центов дает нам два оставшихся. И, наконец, мы можем использовать любые гроши? 2 мод 1 дает нам 0, которая в конечном счете, что мы хотим, потому что тогда, что означает, что мы вернулись пользователю все изменения должны. 

Так что теперь у вас есть два возможных пути реализации жадный algorithm-- одна с петель и одна с комбинация по модулю и деления. Таким образом, в конце концов, нам просто нужно печать итоговое количество монет. 

Если бы я хотел сказать вам, что я имел 3 домашних животных, и это значение было жёстко, то я мог бы просто использовать простой тест оператор печати. Но наша ценность на самом деле хранится в переменной. Так как же вы напечатать Значения сохраняются в переменных? 

Для этого мы берем Преимущество заполнителей. Скажем, у меня уже объявили инициализированная целое число п. Тогда в дальнейшем, если я хотел напечатать, что значение, то я хотел бы написать строку. И вместо этого значения я хотел бы использовать заполнитель для этого integer--% я. Затем после строки, у меня есть запятая, а затем переменной что я хочу, чтобы напечатать. И позже, когда он печатает, он будет выводить значение п. 

Я мог бы также использовать заполнитель для поплавком, например. Если бы я хотел сказать вам, как сколько денег у меня в кармане, то я мог бы сказать, что я% F долларов. И позже, когда он печатает, то п будет занять место этого держателя место. Я мог бы также, например, использовать несколько заполнители для нескольких переменных. Так что до тех пор, как я список они в порядке, то я могу вам сказать, сколько собаки и кошки, у меня есть. 

Теперь мы знаем, как побудить пользователя на сумму изменения, убедитесь, что этот вход является действительным, и тогда мы есть два возможных пути реализации жадный алгоритм всегда используя самая большая монета возможно. Поскольку мы отслеживали сколько монет мы используем, мы можем напечатать это значение в конце, который сообщает пользователю, сколько монет они возвращаться. 

Меня зовут Amayla, и это CS50. 