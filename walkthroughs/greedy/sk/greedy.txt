Poďme chamtivý. V chamtivý, našou úlohou je hrať Úloha chamtivý pokladničné. Užívateľ nám povie, ako mnoho zmien Dlhujeme im, a potom našou úlohou je vypočítať minimálny počet mincí že môžeme použiť, aby sa že množstvo zmien. 

Začnime s príkladom. Povedzme, že používateľ potrebuje $, 32 späť. Mohli by sme to urobiť tým, že je 32 haliere, jeden cent každý. Alebo môžem použiť tiež päť coins-- podľa čo im tri desaťhalierniky, $ 0,10 každý, a dva haliere, $, 02 každý. Ale môžeme použiť aj menej mincí, aby to? 

Celá taktika v greedy-- byť chamtivý cashier-- je použiť čo možno najväčšiu mince. Takže vždy, keď máme štvrtiny my ich použijeme. A potom ešte raz tie dôjdu, budeme používať desaťhalierniky, 0,10 $ každý. Potom Nickels, 5 centov za kus, a potom dole na haliere, jeden cent každý. Pomocou najväčší mince možné kedykoľvek môžeme, aby sme zaistili, že budeme používať najmenší počet možných mincí, aby sa zmena. 

Takže poďme prejsť cez to. Užívateľ potrebuje 0,32 $. Tak sme sa sami seba pýtať, môžeme použiť štvrtinu? No, áno, môžeme. Takže teraz vieme len im $ 0,07, a sme použili jednu mincu. 

Môžeme použiť iný štvrtinu? No, no. $ 0,07 je menej ako $ 0,25, takže budeme pokračovať na budúci najväčší mince k dispozícii. Desaťhalierniky sú $ 0,10 a Znova, nemôžeme použiť desaťhalierniky. Vzhľadom k tomu, desaťhalierniky sú v hodnote $ 0,10, ktorá je väčšie ako množstvo zmien dlžnej. 

Ideme do Nickels. A áno naozaj, $ 0,05 je menšia než $ 0.10-- takže môžeme použiť nikel. Takže teraz máme len dlhuje užívateľovi $ 0,02, a my sme doteraz používajú dve mince. Nemôžeme použiť iný nikel. Takže budeme pokračovať do poslednej mince v máme k dispozícii, čo sú haliere. 

A môžeme použiť penny? No, yes-- a my skončiť s použitím dvoch haliere na celkom štyri mincí. 

Akonáhle budete hotoví sa Program bude vyzerať takto. Akonáhle užívateľ spustí chamtivý programu, oni budú vyzvaní k uveďte sumu Zmena v dolároch, že oni dlhuje. A potom váš program vypíše minimálne množstvo mincí že chamtiví pokladničné by používala aby sa také množstvo zmien. 

Takže teraz poďme zlomiť toto dole do našich čiastkové úlohy. Najprv budeme výzvu nášho Užívateľ vo výške zmien. A rovnako ako u akéhokoľvek užívateľského vstupu, chceme zaistili, že budeme overovať, že vstup a zabezpečiť, že môžeme použiť, že Vstup pre zvyšok nášho programu. Potom budeme vždy použiť čo možno najväčšiu časť a udržanie prehľadu o používaných mincí. A konečne, tlačiť finálna počet mincí, ktoré sme používali. 

Takže poďme hovoriť o dopytovania. Suma musí centov, a to je v dolároch. A tak za doláre, ideme použiť typ float premenné. Teraz, keď sa spýtate užívateľa pre vstup, Chcete, aby sa ubezpečil, že je platný. A tak tu sme chceli využiť slučkové konštruktu do-while. 

A do-while potom vykoná telo slučky aspoň raz. Takže to príde vhod. Vieme, že musíme prinúti Užívateľ aspoň raz za hotovosť. Teraz, ak, že plavák je platný. To je skvelé. Ideme ďalej. Ale aj keby nie, slučky zaistí že dostaneme správne plavák neustálym opakovaním, pokým Užívateľ nám dáva platnú hodnotu. 

Teraz pre do-while podmienka slučky, musíme zvážiť, čo to znamená mať neplatný plavák. Tak pre kontext Tento problém pravdepodobne to dáva zmysel len preto, aby akceptovať kladné hodnoty. 

Tak dojemné on-- sme získaný hodnota v dolároch od užívateľa. Ale máme čo do činenia s mincami, ktoré sú úplne v centoch. $ 1 ekvivalent 100 centov. Takže dobrá vec urobiť, je previesť tieto hodnoty do centov. 

Teraz pri prevode z plaváka na celé číslo, takže dolárov do centov, Chceme sa uistiť, že budeme opatrní o plávajúcou desatinnou čiarkou nepresnosti. Takže to znamená, to-- hovoria môj dolár value-- môj plavák value-- tam bol ešte 2 $, stále môžu byť niektoré zblúdilých čísel tam. Takže chceme, aby sa ubezpečil, že nielen my vynásobíme 100 pre získanie centov, ale tiež kole ho. 

Takže teraz máme sumu zmeny voči užívateľovi. Pôvodne sme došli toho v dolároch, a teraz sme prevedie ju na centy. Takže teraz môžeme pristúpiť k srdcu chamtivý algoritmus, ktorý je vždy s čo najväčšou možné mince. Aj keď to robíme, to je dôležité, že sme tiež sledovať, koľko mincí sú bude sa vrátil k užívateľovi rovnako ako zvyšné Zmena voči užívateľovi. 

Program bude vyzerať niečo také. Po získaní sumy dolárov a previesť, že k centov, potom budete zadať slučku. Kým štvrtiny môže byť used-- to znamená zatiaľ čo množstvo zmien dlhuje Užívateľ je väčší alebo rovné $ 0,25, budete používať štvrtinu. 

Čo teraz robí pomocou štvrtiny obnáša? No, one-- budete zvýšiť mincu počítať sa vrátil k užívateľovi. A za druhé budete znižovať prúd Množstvo zmien dlhuje späť k užívateľovi o $ 0,25. 

Potom opakuje, že kým štvrtiny už nemožno použiť, pristúpiť k ďalšej najväčšej coin-- v tomto prípade desaťhalierniky, $ 0,10. Takže budete vstúpiť do tejto slučky, kým môžete naďalej používať desaťhalierniky. Potom pristúpiť k ďalšej Najväčšie mince, Nickels. Potom, čo už nemôže byť použitý Nickels, využiť zostávajúcu čiastku haliere. A konečne, vytlačiť počet mincí použiť. 

Ďalším spôsobom, že môžete pristupovať k problému chamtivé je použiť postup modulo. Modulo je operátor ktorá vracia zvyšok divízie medzi dvoma číslami. Povedzme, že som mal 50 mod 5. No, 5 je faktor 50, takže zvyšok bude 0. 50 mod 10-- dobre, 10 je tiež faktor 50, takže zvyšok je tiež 0. 50 mod 50-- dobre ľubovoľný počet mod sám nebude mať žiadny zvyšok. 

Čo asi 50 mod 49? No, 49 jede len do 50 ° C raz. Takže zvyšok bude 1. 53 mod 50 sa chystá vám zostávajúcu časť 3. 

Tak ako môžeme použiť modulo a možno aj niektoré divízie implementovať našu chamtivý algoritmus? No, napriek tomu chceme zostať verný k Srdcom chamtivý algorithm--, že je pomocou najväčšou mince je to možné. 

Takže poďme sa pýtať sami seba, či môžeme použiť niektorý štvrtiny vrátiť $ 0,32 pre užívateľov. No, 32 mod 25 poskytuje us pozostatkom $ hodnotou 0.07. Takže nám hovorí, že môžeme definitívne používať jednu štvrtinu s $, 07 zostávajúce. 

Potom môžeme použiť ľubovoľné desaťhalierniky? No, pretože no-- 0,07 $ mod $, 10 Nám dáva zvyšok 7. 10 nezachádza do 7. vôbec. 

Potom môžeme použiť pětníku? No $ 0.07 mod 5 centov nám dáva dve zostávajúce. A konečne, môžeme použiť nejaké peniažky? 2 mod 1 nám dáva 0, čo je presne to chceme, pretože potom to Znamená to, že sme sa vrátili pre užívateľa všetky zmeny dlhuje. 

Takže teraz máte dve možnosti, ako vykonávanie chamtivý algorithm-- jeden s okami a jeden s Kombinácia modulo a delenie. Takže nakoniec, len je potrebné vytlačiť konečný počet mincí. 

Keby som chcel, že som mal povedať, 3 domáce zvieratá a táto hodnota bola napevno, Potom som mohol len použiť Jednoduchý tlač skúšobnej vyhlásení. Ale naša hodnota je v skutočnosti uložený v premennej. Tak ako sa vám vytlačiť Hodnoty uložené v premenných? 

Za týmto účelom berieme Výhodou zástupnými znaky. Povedzme, že už som deklaroval konkretizované celé číslo n. Potom o niečo neskôr, či chcem vytlačiť že hodnoty, potom by som písať reťazec. A namiesto tejto hodnoty by som použil zástupným symbolom pre tento integer -% i. Potom po reťazci, mám čiarka, nasledovaný premennú že chcem vytlačiť. A neskôr, keď sa tlačí, to bude tlačiť hodnotu n. 

Mohol by som použiť tiež zástupný znak pre float, napríklad. Keby som vám chcel povedať, ako Koľko peňazí mám vo vrecku, potom by som mohol povedať, že mám% F dolárov. A neskôr, keď tlačí, potom n bude nahradiť týmto držiteľom mieste. Mohol by som tiež napríklad, používať niekoľko zástupné symboly pre niekoľko premenných. Tak dlho, ako som zoznamu je v poriadku, potom som vám povedať, koľko psy a mačky mám. 

Teraz vieme, ako prinúti Užívateľ vo výške zmien, zabezpečilo, že tento vstup je platný, a potom sme majú dva možné spôsoby realizácie chamtivý algoritmus vždy používať čo najväčší mince. Pretože sme sledovali koľko mincí budeme používať, potom môžeme vytlačiť túto hodnotu na konci, musí užívateľovi oznámiť, koľko mincí, ktorú sú dostať sa späť. 

Moje meno je Amayla, a to je CS50. 