1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Mari kita tamak.

3
00:00:02,900 --> 00:00:06,810
Dalam tamak, tugas kami adalah untuk bermain
peranan seorang juruwang tamak.

4
00:00:06,810 --> 00:00:09,750
Pengguna akan memberitahu kita bagaimana
banyak perubahan perlu menyanjungi,

5
00:00:09,750 --> 00:00:13,520
dan kemudian tugas kami adalah untuk mengira
bilangan minimum syiling

6
00:00:13,520 --> 00:00:17,240
yang boleh kita gunakan untuk membuat
bahawa jumlah perubahan.

7
00:00:17,240 --> 00:00:19,560
>> Mari kita mulakan dengan contoh.

8
00:00:19,560 --> 00:00:23,170
Katakanlah pengguna memerlukan $ 0,32 kembali.

9
00:00:23,170 --> 00:00:28,960
Kita boleh melakukan ini dengan memberi
mereka 32 beberapa sen, satu sen setiap satu.

10
00:00:28,960 --> 00:00:35,180
Atau saya juga boleh menggunakan lima coins-- oleh
memberikan mereka tiga dimes, $ 0,10 setiap satu,

11
00:00:35,180 --> 00:00:38,060
dan dua beberapa sen, $ 0,02 setiap.

12
00:00:38,060 --> 00:00:42,580
Tetapi kita boleh menggunakan walaupun
kurang syiling untuk membuat yang?

13
00:00:42,580 --> 00:00:45,100
>> Seluruh taktik dalam greedy--
menjadi cashier-- tamak

14
00:00:45,100 --> 00:00:47,600
adalah dengan menggunakan duit syiling yang boleh.

15
00:00:47,600 --> 00:00:50,670
Jadi setiap kali kita mempunyai
pihak kami akan menggunakannya.

16
00:00:50,670 --> 00:00:54,100
Dan kemudian sekali mereka kehabisan,
kami akan menggunakan dimes, $ 0,10 setiap.

17
00:00:54,100 --> 00:00:58,840
Kemudian Nickels, 5 sen setiap satu, dan
kemudian turun ke beberapa sen, satu sen setiap satu.

18
00:00:58,840 --> 00:01:01,792
Dengan menggunakan duit syiling terbesar
mungkin bila-bila masa kita boleh,

19
00:01:01,792 --> 00:01:07,350
kami memastikan bahawa kita menggunakan bilangan paling sedikit
syiling mungkin untuk membuat perubahan.

20
00:01:07,350 --> 00:01:09,180
>> Jadi mari kita berjalan ini melalui.

21
00:01:09,180 --> 00:01:11,660
Pengguna perlu $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Oleh itu, kita bertanya kepada diri kita,
kita boleh menggunakan satu perempat?

23
00:01:14,200 --> 00:01:15,560
Well, ya kita boleh.

24
00:01:15,560 --> 00:01:19,720
Jadi sekarang kita hanya tahu mereka
$ 0.07 dan kami menggunakan satu syiling.

25
00:01:19,720 --> 00:01:20,970
>> Bolehkah kita menggunakan suku yang lain?

26
00:01:20,970 --> 00:01:21,890
Well, tidak.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 adalah kurang daripada $ 0.25, jadi kita teruskan
duit syiling seterusnya terbesar yang boleh didapati.

28
00:01:27,570 --> 00:01:30,690
Dimes adalah $ 0.10, dan
sekali lagi, kita tidak boleh menggunakan dimes.

29
00:01:30,690 --> 00:01:35,480
Kerana dimes bernilai $ 0.10, yang
adalah lebih daripada jumlah perubahan terhutang.

30
00:01:35,480 --> 00:01:36,790
>> Kami pergi ke Nickels.

31
00:01:36,790 --> 00:01:40,890
Dan, ya memang, $ 0,05 adalah kurang daripada
$ 0.10-- supaya kita boleh menggunakan nikel.

32
00:01:40,890 --> 00:01:46,104
Jadi sekarang kita hanya berhutang pengguna $ 0.02,
dan kami telah setakat ini menggunakan dua syiling.

33
00:01:46,104 --> 00:01:47,270
Kita tidak boleh menggunakan nikel lain.

34
00:01:47,270 --> 00:01:51,140
Sebab itu kita teruskan untuk syiling terakhir pada
kami pelupusan, yang merupakan beberapa sen.

35
00:01:51,140 --> 00:01:52,270
>> Dan kita boleh menggunakan sen?

36
00:01:52,270 --> 00:01:59,060
Well, yes-- dan kami akhirnya menggunakan dua
beberapa sen untuk sejumlah empat syiling.

37
00:01:59,060 --> 00:02:01,430
>> Setelah anda selesai,
program akan kelihatan seperti ini.

38
00:02:01,430 --> 00:02:03,710
Apabila pengguna menjalankan
program tamak, mereka akan

39
00:02:03,710 --> 00:02:07,270
digesa untuk memberi jumlah
perubahan dalam dolar yang mereka berhutang.

40
00:02:07,270 --> 00:02:11,140
Dan kemudian output program kehendak anda
jumlah minimum syiling

41
00:02:11,140 --> 00:02:14,740
bahawa juruwang tamak akan menggunakan
untuk membuat yang jumlah perubahan.

42
00:02:14,740 --> 00:02:18,160
>> Jadi sekarang mari kita memecahkan ini
ke dalam tugasan kecil kami.

43
00:02:18,160 --> 00:02:21,410
Pertama kita akan meminta kami
pengguna untuk jumlah perubahan.

44
00:02:21,410 --> 00:02:25,630
Dan, seperti mana-mana input pengguna, kita mahu
memastikan bahawa kita mengesahkan input yang

45
00:02:25,630 --> 00:02:29,360
dan memastikan bahawa kami boleh menggunakan
input untuk sepanjang program kami.

46
00:02:29,360 --> 00:02:32,480
Kemudian kita akan sentiasa
menggunakan titik terbesar mungkin

47
00:02:32,480 --> 00:02:35,240
dan menjejaki syiling digunakan.

48
00:02:35,240 --> 00:02:39,080
Dan akhirnya, mencetak akhir
bilangan syiling yang kita digunakan.

49
00:02:39,080 --> 00:02:40,970
>> Jadi mari kita bercakap tentang digesa.

50
00:02:40,970 --> 00:02:43,550
Jumlah yang perlu membuat sen,
dan ini adalah dalam dolar.

51
00:02:43,550 --> 00:02:48,440
Dan sebagainya untuk dolar, kita akan
untuk menggunakan jenis apungan berubah-ubah.

52
00:02:48,440 --> 00:02:52,390
Sekarang setiap kali anda meminta pengguna untuk input,
anda ingin memastikan bahawa itu sah.

53
00:02:52,390 --> 00:02:56,640
Dan jadi di sini kita ingin mengambil kesempatan
daripada do-gelung while membina.

54
00:02:56,640 --> 00:03:00,320
>> A gelung do-while akan melaksanakan
badan gelung sekurang-kurangnya sekali.

55
00:03:00,320 --> 00:03:01,650
Jadi ini datang dalam berguna.

56
00:03:01,650 --> 00:03:05,510
Kita tahu bahawa kita perlu mendorong
pengguna sekurang-kurangnya sekali untuk apungan.

57
00:03:05,510 --> 00:03:07,100
Sekarang jika apungan yang sah.

58
00:03:07,100 --> 00:03:07,710
Itu yang besar.

59
00:03:07,710 --> 00:03:08,460
Kami bergerak ke atas.

60
00:03:08,460 --> 00:03:11,910
Tetapi jika tidak, gelung akan memastikan
yang kita dapat apungan betul

61
00:03:11,910 --> 00:03:16,810
dengan mengulangi secara berterusan sehingga
pengguna memberikan kita nilai yang sah.

62
00:03:16,810 --> 00:03:18,760
>> Sekarang untuk do-while
keadaan gelung, kita perlu

63
00:03:18,760 --> 00:03:22,000
untuk mempertimbangkan apa yang dimaksudkan
untuk mempunyai apungan tidak sah.

64
00:03:22,000 --> 00:03:24,220
Jadi untuk konteks
masalah ini, mungkin

65
00:03:24,220 --> 00:03:27,450
ia masuk akal hanya untuk
menerima nilai-nilai positif.

66
00:03:27,450 --> 00:03:32,010
>> Jadi bergerak pada-- kami telah memperoleh
nilai dalam dolar dari pengguna.

67
00:03:32,010 --> 00:03:35,380
Tetapi kita sedang berurusan dengan duit syiling,
yang mana pada keseluruhannya dalam sen.

68
00:03:35,380 --> 00:03:38,660
$ 1 adalah bersamaan dengan 100 cents.

69
00:03:38,660 --> 00:03:43,670
Jadi satu perkara yang baik untuk dilakukan adalah untuk
menukar nilai-nilai ke dalam sen.

70
00:03:43,670 --> 00:03:48,380
>> Sekarang apabila menukar dari apungan
kepada integer, jadi dolar untuk sen,

71
00:03:48,380 --> 00:03:52,230
kami mahu memastikan bahawa kita berhati-hati
mengenai titik apung ketakpersisan.

72
00:03:52,230 --> 00:03:55,260
Ini bermakna bahawa- mengatakan
dolar saya value-- apungan saya

73
00:03:55,260 --> 00:04:00,260
value-- adalah yang lebih $ 2, masih terdapat
mungkin beberapa nombor sesat di sana.

74
00:04:00,260 --> 00:04:04,590
Oleh itu, kita ingin memastikan bahawa bukan sahaja
kita darabkan dengan 100 untuk mendapatkan sen,

75
00:04:04,590 --> 00:04:06,480
tetapi kita juga pusingan off.

76
00:04:06,480 --> 00:04:09,210
>> Jadi sekarang kita mempunyai jumlah yang
perubahan yang terhutang kepada pengguna.

77
00:04:09,210 --> 00:04:13,430
Kami asalnya diperolehi dalam dolar,
dan kini kami telah ditukar kepada sen.

78
00:04:13,430 --> 00:04:17,029
Jadi sekarang kita boleh meneruskan dengan hati
algoritma yang tamak, yang sentiasa

79
00:04:17,029 --> 00:04:19,220
menggunakan duit syiling yang boleh.

80
00:04:19,220 --> 00:04:21,930
Walaupun kita lakukan ini,
ia adalah penting bahawa kita juga

81
00:04:21,930 --> 00:04:25,360
menjejaki berapa banyak duit syiling yang
akan dikembalikan kepada pengguna

82
00:04:25,360 --> 00:04:28,630
dan juga yang tinggal
menukar terhutang kepada pengguna.

83
00:04:28,630 --> 00:04:31,130
>> Program ini akan kelihatan
sesuatu seperti ini.

84
00:04:31,130 --> 00:04:34,190
Selepas anda mendapat jumlah
dolar dan menukar bahawa untuk sen,

85
00:04:34,190 --> 00:04:35,790
maka anda akan memasukkan gelung.

86
00:04:35,790 --> 00:04:38,400
Manakala kuarters boleh
digunakan-- iaitu

87
00:04:38,400 --> 00:04:43,660
manakala jumlah perubahan yang terhutang kepada
pengguna adalah lebih besar daripada atau sama dengan $ 0.25,

88
00:04:43,660 --> 00:04:45,040
anda akan menggunakan satu perempat.

89
00:04:45,040 --> 00:04:47,000
>> Sekarang apa yang tidak menggunakan satu perempat memerlukan?

90
00:04:47,000 --> 00:04:51,280
Well, one-- anda akan meningkatkan duit syiling
mengira dikembalikan kepada pengguna.

91
00:04:51,280 --> 00:04:55,890
Dan kedua, anda akan berkurangan semasa
jumlah perubahan terhutang kembali kepada pengguna

92
00:04:55,890 --> 00:04:57,520
dengan $ 0.25.

93
00:04:57,520 --> 00:05:00,680
>> Selepas mengulangi bahawa sehingga
pihak tidak lagi boleh digunakan,

94
00:05:00,680 --> 00:05:04,630
meneruskan ke yang berikutnya terbesar
coin-- dalam kes ini dimes, $ 0.10.

95
00:05:04,630 --> 00:05:07,750
Jadi, anda akan memasukkan gelung sehingga
anda tidak lagi boleh menggunakan dimes.

96
00:05:07,750 --> 00:05:10,720
Kemudian teruskan ke depan
duit syiling terbesar, Nickels.

97
00:05:10,720 --> 00:05:14,810
Selepas Nickels tidak lagi boleh digunakan,
menggunakan jumlah yang tinggal di beberapa sen.

98
00:05:14,810 --> 00:05:17,800
Dan akhirnya, mencetak
bilangan syiling digunakan.

99
00:05:17,800 --> 00:05:20,350
>> Satu lagi cara yang anda boleh
mendekati masalah yang tamak

100
00:05:20,350 --> 00:05:22,950
adalah dengan menggunakan pendekatan modulo itu.

101
00:05:22,950 --> 00:05:25,690
Modulo adalah pengendali
yang mengembalikan baki

102
00:05:25,690 --> 00:05:27,680
bahagian di antara dua nombor.

103
00:05:27,680 --> 00:05:30,270
Katakanlah saya mempunyai 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
Well, 5 adalah faktor 50,
supaya bakinya adalah 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- baik, 10 adalah juga faktor
50, jadi bakinya juga 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- dengan baik, apa-apa bilangan arena sendiri
tidak akan mempunyai apa-apa baki.

107
00:05:43,660 --> 00:05:45,510
>> Bagaimana pula dengan 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
Well, 49 sahaja masuk ke dalam 50 sekali.

109
00:05:47,910 --> 00:05:50,290
Jadi bakinya akan menjadi 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 akan
memberikan anda satu baki 3.

111
00:05:55,180 --> 00:05:59,120
>> Jadi bagaimana kita boleh menggunakan modulo
dan mungkin beberapa bahagian

112
00:05:59,120 --> 00:06:01,690
untuk melaksanakan algoritma tamak kita?

113
00:06:01,690 --> 00:06:05,550
Nah, kita masih mahu kekal setia kepada
tengah-tengah yang tamak algorithm-- yang

114
00:06:05,550 --> 00:06:07,910
adalah menggunakan duit syiling yang boleh.

115
00:06:07,910 --> 00:06:14,570
>> Jadi mari kita bertanya kepada diri kita jika kita boleh menggunakan apa-apa
pihak untuk kembali $ 0,32 kepada pengguna.

116
00:06:14,570 --> 00:06:20,070
Well, 32 mod 25 memberikan
kita baki $ 0.07.

117
00:06:20,070 --> 00:06:24,500
Supaya memberitahu kita bahawa kita boleh pasti
menggunakan salah satu suku dengan $ 0,07 tinggal.

118
00:06:24,500 --> 00:06:26,180
>> Kami pula menggunakan mana-mana dimes?

119
00:06:26,180 --> 00:06:32,740
Well, no-- kerana $ 0,07 mod
$ 0,10 memberikan kita baki 7.

120
00:06:32,740 --> 00:06:34,960
10 tidak pergi ke 7 pada semua.

121
00:06:34,960 --> 00:06:36,390
>> Kemudian kita boleh menggunakan Nickels?

122
00:06:36,390 --> 00:06:40,490
Well $ 0,07 mod 5 sen
memberikan kita dua yang tinggal.

123
00:06:40,490 --> 00:06:42,930
Dan akhir sekali, kita boleh menggunakan mana-mana beberapa sen?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 memberikan kita 0,
yang akhirnya apa

125
00:06:45,930 --> 00:06:48,160
kita mahu kerana itulah
bermakna bahawa kami telah kembali

126
00:06:48,160 --> 00:06:50,160
untuk pengguna semua perubahan yang terhutang.

127
00:06:50,160 --> 00:06:54,320
>> Jadi sekarang anda mempunyai dua kemungkinan cara
melaksanakan algorithm-- yang tamak

128
00:06:54,320 --> 00:06:59,230
satu dengan gelung dan satu dengan
kombinasi modulo dan pembahagian.

129
00:06:59,230 --> 00:07:03,010
Jadi akhirnya, kita hanya perlu
mencetak nombor terakhir syiling.

130
00:07:03,010 --> 00:07:06,520
>> Jika saya mahu memberitahu anda bahawa saya mempunyai
3 Haiwan peliharaan, termasuk nilai ini telah dikodkeraskan,

131
00:07:06,520 --> 00:07:09,240
kemudian saya hanya boleh menggunakan
mudah kenyataan ujian cetak.

132
00:07:09,240 --> 00:07:12,320
Tetapi nilai kita sebenarnya
disimpan dalam pembolehubah.

133
00:07:12,320 --> 00:07:15,260
Jadi bagaimana anda mencetak
nilai-nilai yang disimpan dalam pembolehubah?

134
00:07:15,260 --> 00:07:17,880
>> Untuk ini kita mengambil
Gunakan ruang letak.

135
00:07:17,880 --> 00:07:21,540
Mengatakan saya telah pun diisytiharkan
integer dimulakan n.

136
00:07:21,540 --> 00:07:25,170
Kemudian di kemudian hari jika saya mahu mencetak
nilai, maka saya akan menulis tali.

137
00:07:25,170 --> 00:07:30,500
Dan bukannya nilai yang saya akan menggunakan
pemegang tempat untuk% integer-- i.

138
00:07:30,500 --> 00:07:33,800
Kemudian selepas tali, saya mempunyai
koma, diikuti oleh pembolehubah

139
00:07:33,800 --> 00:07:34,950
yang saya mahu untuk mencetak.

140
00:07:34,950 --> 00:07:38,550
Dan kemudian, apabila ia mencetak,
ia akan mencetak nilai n.

141
00:07:38,550 --> 00:07:41,570
>> Saya juga boleh menggunakan pemegang tempat
untuk apungan, misalnya.

142
00:07:41,570 --> 00:07:44,000
Jika saya mahu memberitahu anda bagaimana
banyak wang tunai yang saya ada dalam poket saya,

143
00:07:44,000 --> 00:07:46,820
kemudian saya boleh katakan saya telah dolar% f.

144
00:07:46,820 --> 00:07:51,330
Dan kemudian apabila ia mencetak, maka n akan
mengambil tempat yang pemegang tempat.

145
00:07:51,330 --> 00:07:55,530
Saya boleh juga, misalnya, menggunakan beberapa
pemegang tempat bagi beberapa pembolehubah.

146
00:07:55,530 --> 00:07:57,590
Jadi selagi saya senaraikan
mereka dalam perintah, maka saya

147
00:07:57,590 --> 00:08:00,390
boleh memberitahu anda berapa banyak
anjing dan kucing saya ada.

148
00:08:00,390 --> 00:08:03,710
>> Sekarang kita tahu bagaimana untuk mendorong
pengguna untuk jumlah perubahan,

149
00:08:03,710 --> 00:08:06,130
memastikan bahawa input yang
adalah sah, dan kemudian kita

150
00:08:06,130 --> 00:08:10,370
mempunyai dua kemungkinan cara melaksanakan
algoritma tamak selalu menggunakan

151
00:08:10,370 --> 00:08:12,090
duit syiling yang boleh.

152
00:08:12,090 --> 00:08:15,050
Kerana kita telah disimpan mengesan
berapa banyak duit syiling yang kita gunakan,

153
00:08:15,050 --> 00:08:19,210
kita boleh mencetak nilai yang pada akhirnya,
memberitahu pengguna berapa banyak duit syiling mereka

154
00:08:19,210 --> 00:08:20,240
mendapat kembali.

155
00:08:20,240 --> 00:08:24,240
>> Nama saya adalah Amayla, dan ini adalah CS50.

156
00:08:24,240 --> 00:08:25,915

