Mari kita tamak. Dalam tamak, tugas kami adalah untuk bermain peranan seorang juruwang tamak. Pengguna akan memberitahu kita bagaimana banyak perubahan perlu menyanjungi, dan kemudian tugas kami adalah untuk mengira bilangan minimum syiling yang boleh kita gunakan untuk membuat bahawa jumlah perubahan. 

Mari kita mulakan dengan contoh. Katakanlah pengguna memerlukan $ 0,32 kembali. Kita boleh melakukan ini dengan memberi mereka 32 beberapa sen, satu sen setiap satu. Atau saya juga boleh menggunakan lima coins-- oleh memberikan mereka tiga dimes, $ 0,10 setiap satu, dan dua beberapa sen, $ 0,02 setiap. Tetapi kita boleh menggunakan walaupun kurang syiling untuk membuat yang? 

Seluruh taktik dalam greedy-- menjadi cashier-- tamak adalah dengan menggunakan duit syiling yang boleh. Jadi setiap kali kita mempunyai pihak kami akan menggunakannya. Dan kemudian sekali mereka kehabisan, kami akan menggunakan dimes, $ 0,10 setiap. Kemudian Nickels, 5 sen setiap satu, dan kemudian turun ke beberapa sen, satu sen setiap satu. Dengan menggunakan duit syiling terbesar mungkin bila-bila masa kita boleh, kami memastikan bahawa kita menggunakan bilangan paling sedikit syiling mungkin untuk membuat perubahan. 

Jadi mari kita berjalan ini melalui. Pengguna perlu $ 0,32. Oleh itu, kita bertanya kepada diri kita, kita boleh menggunakan satu perempat? Well, ya kita boleh. Jadi sekarang kita hanya tahu mereka $ 0.07 dan kami menggunakan satu syiling. 

Bolehkah kita menggunakan suku yang lain? Well, tidak. $ 0,07 adalah kurang daripada $ 0.25, jadi kita teruskan duit syiling seterusnya terbesar yang boleh didapati. Dimes adalah $ 0.10, dan sekali lagi, kita tidak boleh menggunakan dimes. Kerana dimes bernilai $ 0.10, yang adalah lebih daripada jumlah perubahan terhutang. 

Kami pergi ke Nickels. Dan, ya memang, $ 0,05 adalah kurang daripada $ 0.10-- supaya kita boleh menggunakan nikel. Jadi sekarang kita hanya berhutang pengguna $ 0.02, dan kami telah setakat ini menggunakan dua syiling. Kita tidak boleh menggunakan nikel lain. Sebab itu kita teruskan untuk syiling terakhir pada kami pelupusan, yang merupakan beberapa sen. 

Dan kita boleh menggunakan sen? Well, yes-- dan kami akhirnya menggunakan dua beberapa sen untuk sejumlah empat syiling. 

Setelah anda selesai, program akan kelihatan seperti ini. Apabila pengguna menjalankan program tamak, mereka akan digesa untuk memberi jumlah perubahan dalam dolar yang mereka berhutang. Dan kemudian output program kehendak anda jumlah minimum syiling bahawa juruwang tamak akan menggunakan untuk membuat yang jumlah perubahan. 

Jadi sekarang mari kita memecahkan ini ke dalam tugasan kecil kami. Pertama kita akan meminta kami pengguna untuk jumlah perubahan. Dan, seperti mana-mana input pengguna, kita mahu memastikan bahawa kita mengesahkan input yang dan memastikan bahawa kami boleh menggunakan input untuk sepanjang program kami. Kemudian kita akan sentiasa menggunakan titik terbesar mungkin dan menjejaki syiling digunakan. Dan akhirnya, mencetak akhir bilangan syiling yang kita digunakan. 

Jadi mari kita bercakap tentang digesa. Jumlah yang perlu membuat sen, dan ini adalah dalam dolar. Dan sebagainya untuk dolar, kita akan untuk menggunakan jenis apungan berubah-ubah. Sekarang setiap kali anda meminta pengguna untuk input, anda ingin memastikan bahawa itu sah. Dan jadi di sini kita ingin mengambil kesempatan daripada do-gelung while membina. 

A gelung do-while akan melaksanakan badan gelung sekurang-kurangnya sekali. Jadi ini datang dalam berguna. Kita tahu bahawa kita perlu mendorong pengguna sekurang-kurangnya sekali untuk apungan. Sekarang jika apungan yang sah. Itu yang besar. Kami bergerak ke atas. Tetapi jika tidak, gelung akan memastikan yang kita dapat apungan betul dengan mengulangi secara berterusan sehingga pengguna memberikan kita nilai yang sah. 

Sekarang untuk do-while keadaan gelung, kita perlu untuk mempertimbangkan apa yang dimaksudkan untuk mempunyai apungan tidak sah. Jadi untuk konteks masalah ini, mungkin ia masuk akal hanya untuk menerima nilai-nilai positif. 

Jadi bergerak pada-- kami telah memperoleh nilai dalam dolar dari pengguna. Tetapi kita sedang berurusan dengan duit syiling, yang mana pada keseluruhannya dalam sen. $ 1 adalah bersamaan dengan 100 cents. Jadi satu perkara yang baik untuk dilakukan adalah untuk menukar nilai-nilai ke dalam sen. 

Sekarang apabila menukar dari apungan kepada integer, jadi dolar untuk sen, kami mahu memastikan bahawa kita berhati-hati mengenai titik apung ketakpersisan. Ini bermakna bahawa- mengatakan dolar saya value-- apungan saya value-- adalah yang lebih $ 2, masih terdapat mungkin beberapa nombor sesat di sana. Oleh itu, kita ingin memastikan bahawa bukan sahaja kita darabkan dengan 100 untuk mendapatkan sen, tetapi kita juga pusingan off. 

Jadi sekarang kita mempunyai jumlah yang perubahan yang terhutang kepada pengguna. Kami asalnya diperolehi dalam dolar, dan kini kami telah ditukar kepada sen. Jadi sekarang kita boleh meneruskan dengan hati algoritma yang tamak, yang sentiasa menggunakan duit syiling yang boleh. Walaupun kita lakukan ini, ia adalah penting bahawa kita juga menjejaki berapa banyak duit syiling yang akan dikembalikan kepada pengguna dan juga yang tinggal menukar terhutang kepada pengguna. 

Program ini akan kelihatan sesuatu seperti ini. Selepas anda mendapat jumlah dolar dan menukar bahawa untuk sen, maka anda akan memasukkan gelung. Manakala kuarters boleh digunakan-- iaitu manakala jumlah perubahan yang terhutang kepada pengguna adalah lebih besar daripada atau sama dengan $ 0.25, anda akan menggunakan satu perempat. 

Sekarang apa yang tidak menggunakan satu perempat memerlukan? Well, one-- anda akan meningkatkan duit syiling mengira dikembalikan kepada pengguna. Dan kedua, anda akan berkurangan semasa jumlah perubahan terhutang kembali kepada pengguna dengan $ 0.25. 

Selepas mengulangi bahawa sehingga pihak tidak lagi boleh digunakan, meneruskan ke yang berikutnya terbesar coin-- dalam kes ini dimes, $ 0.10. Jadi, anda akan memasukkan gelung sehingga anda tidak lagi boleh menggunakan dimes. Kemudian teruskan ke depan duit syiling terbesar, Nickels. Selepas Nickels tidak lagi boleh digunakan, menggunakan jumlah yang tinggal di beberapa sen. Dan akhirnya, mencetak bilangan syiling digunakan. 

Satu lagi cara yang anda boleh mendekati masalah yang tamak adalah dengan menggunakan pendekatan modulo itu. Modulo adalah pengendali yang mengembalikan baki bahagian di antara dua nombor. Katakanlah saya mempunyai 50 mod 5. Well, 5 adalah faktor 50, supaya bakinya adalah 0. 50 mod 10-- baik, 10 adalah juga faktor 50, jadi bakinya juga 0. 50 mod 50-- dengan baik, apa-apa bilangan arena sendiri tidak akan mempunyai apa-apa baki. 

Bagaimana pula dengan 50 mod 49? Well, 49 sahaja masuk ke dalam 50 sekali. Jadi bakinya akan menjadi 1. 53 mod 50 akan memberikan anda satu baki 3. 

Jadi bagaimana kita boleh menggunakan modulo dan mungkin beberapa bahagian untuk melaksanakan algoritma tamak kita? Nah, kita masih mahu kekal setia kepada tengah-tengah yang tamak algorithm-- yang adalah menggunakan duit syiling yang boleh. 

Jadi mari kita bertanya kepada diri kita jika kita boleh menggunakan apa-apa pihak untuk kembali $ 0,32 kepada pengguna. Well, 32 mod 25 memberikan kita baki $ 0.07. Supaya memberitahu kita bahawa kita boleh pasti menggunakan salah satu suku dengan $ 0,07 tinggal. 

Kami pula menggunakan mana-mana dimes? Well, no-- kerana $ 0,07 mod $ 0,10 memberikan kita baki 7. 10 tidak pergi ke 7 pada semua. 

Kemudian kita boleh menggunakan Nickels? Well $ 0,07 mod 5 sen memberikan kita dua yang tinggal. Dan akhir sekali, kita boleh menggunakan mana-mana beberapa sen? 2 mod 1 memberikan kita 0, yang akhirnya apa kita mahu kerana itulah bermakna bahawa kami telah kembali untuk pengguna semua perubahan yang terhutang. 

Jadi sekarang anda mempunyai dua kemungkinan cara melaksanakan algorithm-- yang tamak satu dengan gelung dan satu dengan kombinasi modulo dan pembahagian. Jadi akhirnya, kita hanya perlu mencetak nombor terakhir syiling. 

Jika saya mahu memberitahu anda bahawa saya mempunyai 3 Haiwan peliharaan, termasuk nilai ini telah dikodkeraskan, kemudian saya hanya boleh menggunakan mudah kenyataan ujian cetak. Tetapi nilai kita sebenarnya disimpan dalam pembolehubah. Jadi bagaimana anda mencetak nilai-nilai yang disimpan dalam pembolehubah? 

Untuk ini kita mengambil Gunakan ruang letak. Mengatakan saya telah pun diisytiharkan integer dimulakan n. Kemudian di kemudian hari jika saya mahu mencetak nilai, maka saya akan menulis tali. Dan bukannya nilai yang saya akan menggunakan pemegang tempat untuk% integer-- i. Kemudian selepas tali, saya mempunyai koma, diikuti oleh pembolehubah yang saya mahu untuk mencetak. Dan kemudian, apabila ia mencetak, ia akan mencetak nilai n. 

Saya juga boleh menggunakan pemegang tempat untuk apungan, misalnya. Jika saya mahu memberitahu anda bagaimana banyak wang tunai yang saya ada dalam poket saya, kemudian saya boleh katakan saya telah dolar% f. Dan kemudian apabila ia mencetak, maka n akan mengambil tempat yang pemegang tempat. Saya boleh juga, misalnya, menggunakan beberapa pemegang tempat bagi beberapa pembolehubah. Jadi selagi saya senaraikan mereka dalam perintah, maka saya boleh memberitahu anda berapa banyak anjing dan kucing saya ada. 

Sekarang kita tahu bagaimana untuk mendorong pengguna untuk jumlah perubahan, memastikan bahawa input yang adalah sah, dan kemudian kita mempunyai dua kemungkinan cara melaksanakan algoritma tamak selalu menggunakan duit syiling yang boleh. Kerana kita telah disimpan mengesan berapa banyak duit syiling yang kita gunakan, kita boleh mencetak nilai yang pada akhirnya, memberitahu pengguna berapa banyak duit syiling mereka mendapat kembali. 

Nama saya adalah Amayla, dan ini adalah CS50. 