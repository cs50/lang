1
00:00:00,000 --> 00:00:00,710

2
00:00:00,710 --> 00:00:02,900
>> Lähdetään ahne.

3
00:00:02,900 --> 00:00:06,810
Vuonna ahne, meidän tehtävämme on pelata
roolin ahne kassa.

4
00:00:06,810 --> 00:00:09,750
Käyttäjä kertoo meille, miten
paljon muuta me olemme heille,

5
00:00:09,750 --> 00:00:13,520
ja sitten meidän työ on laskea
vähimmäismäärä kolikoita

6
00:00:13,520 --> 00:00:17,240
että voimme käyttää tehdä
että muutosten määrä.

7
00:00:17,240 --> 00:00:19,560
>> Aloitetaan esimerkki.

8
00:00:19,560 --> 00:00:23,170
Sano käyttäjä vaatii $ 0,32 takaisin.

9
00:00:23,170 --> 00:00:28,960
Voisimme tehdä tätä antamalla
niitä 32 penniä, yksi senttiä.

10
00:00:28,960 --> 00:00:35,180
Tai voisin myös käyttää viittä coins-- by
heille kolme Dimes, $ 0,10 jokainen,

11
00:00:35,180 --> 00:00:38,060
ja kaksi penniä, $ 0,02.

12
00:00:38,060 --> 00:00:42,580
Mutta voisimme käyttää jopa
vähemmän kolikoita tehdä se?

13
00:00:42,580 --> 00:00:45,100
>> Koko taktiikka greedy--
on ahne cashier--

14
00:00:45,100 --> 00:00:47,600
on käyttää suurin kolikko mahdollista.

15
00:00:47,600 --> 00:00:50,670
Joten jos meillä on
neljäsosaa käytämme niitä.

16
00:00:50,670 --> 00:00:54,100
Ja sitten kun ne loppuvat,
käytämme Dimes, $ 0,10 kukin.

17
00:00:54,100 --> 00:00:58,840
Sitten Nickels, 5 senttiä kukin, ja
sitten alas penniä, yksi senttiä.

18
00:00:58,840 --> 00:01:01,792
Käyttämällä suurin kolikko
mahdollista aina kun voimme,

19
00:01:01,792 --> 00:01:07,350
voimme varmistaa, että käytämme Vähiten
Kolikoiden mahdollista tehdä muutos.

20
00:01:07,350 --> 00:01:09,180
>> Joten kävellä tätä kautta.

21
00:01:09,180 --> 00:01:11,660
Käyttäjä tarvitsee $ 0,32.

22
00:01:11,660 --> 00:01:14,200
Niinpä kysymme itseltämme,
voimme käyttää neljäsosa?

23
00:01:14,200 --> 00:01:15,560
No, kyllä ​​voimme.

24
00:01:15,560 --> 00:01:19,720
Nyt siis vain tietää ne
$ 0,07 ja käytimme yksi kolikko.

25
00:01:19,720 --> 00:01:20,970
>> Voimme käyttää toinen neljännes?

26
00:01:20,970 --> 00:01:21,890
No ei.

27
00:01:21,890 --> 00:01:27,570
$ 0,07 on alle $ 0,25, joten jatkamme
seuraavaksi suurimmalle kolikon käytettävissä.

28
00:01:27,570 --> 00:01:30,690
Dimes ovat $ 0,10 ja
uudelleen, emme voi käyttää Dimes.

29
00:01:30,690 --> 00:01:35,480
Koska dimes ovat arvoltaan $ 0,10 joka
on enemmän kuin muutoksen määrä velkaa.

30
00:01:35,480 --> 00:01:36,790
>> Menemme Nickels.

31
00:01:36,790 --> 00:01:40,890
Ja kyllä ​​tosiaankin, $ 0,05 alle
$ 0.10-- joten voimme käyttää nikkeliä.

32
00:01:40,890 --> 00:01:46,104
Nyt siis vain velkaa käyttäjä $ 0,02,
ja olemme tähän mennessä käytetty kaksi kolikkoa.

33
00:01:46,104 --> 00:01:47,270
Emme voi käyttää toista nikkeliä.

34
00:01:47,270 --> 00:01:51,140
Niinpä sitten siirry viimeiselle kolikko
käytettävissämme, jotka ovat penniä.

35
00:01:51,140 --> 00:01:52,270
>> Ja voimme käyttää penniäkään?

36
00:01:52,270 --> 00:01:59,060
No, yes-- ja päädymme kahdella
penniä yhteensä neljä kolikkoa.

37
00:01:59,060 --> 00:02:01,430
>> Kun olet valmis,
Ohjelma näyttää tältä.

38
00:02:01,430 --> 00:02:03,710
Kun käyttäjä juoksee
ahne ohjelma, he

39
00:02:03,710 --> 00:02:07,270
pyydetään antamaan määrään
muutos dollareissa että he velkaa.

40
00:02:07,270 --> 00:02:11,140
Ja sitten ohjelma ulostulo
vähimmäismäärä kolikoita

41
00:02:11,140 --> 00:02:14,740
että ahne kassa käyttäisi
tehdä kyseisen määrän muutos.

42
00:02:14,740 --> 00:02:18,160
>> Nyt Katsotaanpa murtaa
alas meidän alitehtäviä.

43
00:02:18,160 --> 00:02:21,410
Ensin aiomme jotta saat
käyttäjän määrän muutoksen.

44
00:02:21,410 --> 00:02:25,630
Ja kuten mikä tahansa käyttäjä syöttää, haluamme
varmistaa, että meillä vahvistaa, että panos

45
00:02:25,630 --> 00:02:29,360
ja varmistaa, että voimme käyttää sitä
ruokkivat muuta meidän ohjelman.

46
00:02:29,360 --> 00:02:32,480
Sitten me aiomme aina
käyttää suurinta piste mahdollisimman

47
00:02:32,480 --> 00:02:35,240
ja seurata kolikoiden käytetty.

48
00:02:35,240 --> 00:02:39,080
Ja lopuksi, tulostaa lopullinen
määrä kolikoita, jotka käytimme.

49
00:02:39,080 --> 00:02:40,970
>> Joten puhua kehotukset.

50
00:02:40,970 --> 00:02:43,550
Määrä on tehtävä senttiä,
ja tämä on dollareissa.

51
00:02:43,550 --> 00:02:48,440
Ja niin dollaria aiomme
käyttää float muuttuja tyyppiä.

52
00:02:48,440 --> 00:02:52,390
Nyt kun kysyt käyttäjä syöttää,
haluat varmistaa, että se on voimassa.

53
00:02:52,390 --> 00:02:56,640
Ja joten tässä haluamme hyödyntää
ja do-while-silmukka konstruktio.

54
00:02:56,640 --> 00:03:00,320
>> Tee-aikaa silmukka suorittaa
elin silmukan ainakin kerran.

55
00:03:00,320 --> 00:03:01,650
Joten tämä on kätevä.

56
00:03:01,650 --> 00:03:05,510
Tiedämme, että meidän on kysyy
Käyttäjä ainakin kerran float.

57
00:03:05,510 --> 00:03:07,100
Nyt jos se float on pätevä.

58
00:03:07,100 --> 00:03:07,710
Sepä hienoa.

59
00:03:07,710 --> 00:03:08,460
Me eteenpäin.

60
00:03:08,460 --> 00:03:11,910
Mutta jos ei, silmukka huolehtii
että saamme asianmukaisen float

61
00:03:11,910 --> 00:03:16,810
toistamalla jatkuvasti, kunnes
käyttäjä antaa meille kelvollinen arvo.

62
00:03:16,810 --> 00:03:18,760
>> Nyt tee-aikana
loop ehto, tarvitsemme

63
00:03:18,760 --> 00:03:22,000
pohtia, mitä se tarkoittaa
on virheellinen kellua.

64
00:03:22,000 --> 00:03:24,220
Joten yhteydessä
tämä ongelma, luultavasti

65
00:03:24,220 --> 00:03:27,450
on järkevää vain
hyväksyä positiivisia arvoja.

66
00:03:27,450 --> 00:03:32,010
>> Joten liikkuvat on-- olemme saaneet
arvo dollareissa käyttäjältä.

67
00:03:32,010 --> 00:03:35,380
Mutta olemme tekemisissä kolikoita,
jotka ovat täysin senttiä.

68
00:03:35,380 --> 00:03:38,660
$ 1 vastaa 100 senttiä.

69
00:03:38,660 --> 00:03:43,670
Joten hyvä asia tehdä, on
muuntaa nämä arvot senttiä.

70
00:03:43,670 --> 00:03:48,380
>> Nyt muunnettaessa kellua
kokonaisluku, joten dollaria senttiä,

71
00:03:48,380 --> 00:03:52,230
Haluamme varmistaa, että olemme varovaisia
noin liukulukuja epätarkkuutta.

72
00:03:52,230 --> 00:03:55,260
Joten se tarkoittaa that-- sanoa
my dollari value-- minun kellua

73
00:03:55,260 --> 00:04:00,260
value-- oli vielä $ 2 on vielä
voi olla joitakin irrallisia numeroita siellä.

74
00:04:00,260 --> 00:04:04,590
Joten me haluamme varmistaa, että ei vain
me moninkertaistaa 100 saada senttiä,

75
00:04:04,590 --> 00:04:06,480
mutta myös sen ympärille pois.

76
00:04:06,480 --> 00:04:09,210
>> Meillä on nyt siis määrää
Muutoksen velkaa käyttäjälle.

77
00:04:09,210 --> 00:04:13,430
Olemme alun perin saanut sen dollareissa,
ja nyt olemme muuntaneet sen senttiä.

78
00:04:13,430 --> 00:04:17,029
Nyt voimme jatkaa sydämessä
ahne algoritmi, joka on aina

79
00:04:17,029 --> 00:04:19,220
käyttäen suurimman kolikon mahdollista.

80
00:04:19,220 --> 00:04:21,930
Vaikka teemme tämän,
on tärkeää, että myös

81
00:04:21,930 --> 00:04:25,360
seurata, kuinka monta kolikot ovat
aiotaan palautetaan käyttäjälle

82
00:04:25,360 --> 00:04:28,630
sekä jäljellä
muuttaa velkaa käyttäjälle.

83
00:04:28,630 --> 00:04:31,130
>> Ohjelma näyttää
jotain tällaista.

84
00:04:31,130 --> 00:04:34,190
Kun saat määrä
dollaria ja muuntaa että senttiä,

85
00:04:34,190 --> 00:04:35,790
Tulet syöttää silmukka.

86
00:04:35,790 --> 00:04:38,400
Vaikka neljäsosaa voi olla
used-- toisin sanoen

87
00:04:38,400 --> 00:04:43,660
kun taas määrä muutoksen velkaa
Käyttäjä on suurempi tai yhtä suuri kuin 0,25 $

88
00:04:43,660 --> 00:04:45,040
voit käyttää neljäsosa.

89
00:04:45,040 --> 00:04:47,000
>> Nyt mitä käyttää neljännes aiheuttaa?

90
00:04:47,000 --> 00:04:51,280
No, one-- voit lisätä kolikon
laskea palautetaan käyttäjälle.

91
00:04:51,280 --> 00:04:55,890
Ja toinen voit vähentää nykyisen
määrän muutos velkaa takaisin käyttäjälle

92
00:04:55,890 --> 00:04:57,520
kirjoittaja $ 0,25.

93
00:04:57,520 --> 00:05:00,680
>> Sen jälkeen toistaa, että ennen
neljäsosaa voi enää käyttää,

94
00:05:00,680 --> 00:05:04,630
Siirrymme seuraavaksi suurimmalle
coin-- tässä tapauksessa Dimes, $ 0,10.

95
00:05:04,630 --> 00:05:07,750
Joten annat että silmukka kunnes
et voi enää käyttää Dimes.

96
00:05:07,750 --> 00:05:10,720
Jatka sitten seuraavaan
Suurin kolikko, Nickels.

97
00:05:10,720 --> 00:05:14,810
Jälkeen Nickels voi enää käyttää,
käyttää jäljellä summa penniä.

98
00:05:14,810 --> 00:05:17,800
Ja lopuksi, tulostaa
määrä kolikoita käytetään.

99
00:05:17,800 --> 00:05:20,350
>> Toinen tapa, että voit
lähestyä ahne ongelma

100
00:05:20,350 --> 00:05:22,950
on käyttää modulo lähestymistapaa.

101
00:05:22,950 --> 00:05:25,690
Modulo on operaattori
joka palauttaa loput

102
00:05:25,690 --> 00:05:27,680
jako kahden numerot.

103
00:05:27,680 --> 00:05:30,270
Sanoa saaneeni 50 mod 5.

104
00:05:30,270 --> 00:05:34,070
No, 5 on 50-kertaiseksi,
joten jäljellä on 0.

105
00:05:34,070 --> 00:05:39,230
50 mod 10-- hyvin, 10 on myös tekijä
50, joten jäljellä on myös 0.

106
00:05:39,230 --> 00:05:43,660
50 mod 50-- hyvin, mitään mod itse
ei tule mitään jäljellä.

107
00:05:43,660 --> 00:05:45,510
>> Entä 50 mod 49?

108
00:05:45,510 --> 00:05:47,910
No, 49 vain menee 50 kerran.

109
00:05:47,910 --> 00:05:50,290
Joten loput tulee olemaan 1.

110
00:05:50,290 --> 00:05:55,180
53 mod 50 on menossa
antaa sinulle jäljellä 3.

111
00:05:55,180 --> 00:05:59,120
>> Joten kuinka voimme käyttää modulo
ja ehkä jotkut divisioona

112
00:05:59,120 --> 00:06:01,690
toteuttaa meidän ahne algoritmi?

113
00:06:01,690 --> 00:06:05,550
No, haluamme kuitenkin pysyä uskollisena
sydämessä ahne algorithm-- että

114
00:06:05,550 --> 00:06:07,910
on käyttää suurin kolikko mahdollista.

115
00:06:07,910 --> 00:06:14,570
>> Joten kysyä itseltämme, voimme käyttää mitä tahansa
neljäsosaa palata $ 0,32 käyttäjälle.

116
00:06:14,570 --> 00:06:20,070
No, 32 mod 25 antaa
meille jäljellä $ 0,07.

117
00:06:20,070 --> 00:06:24,500
Joten joka kertoo meille, että voimme varmasti
Käytä neljäsosa kanssa $ 0,07 jäljellä.

118
00:06:24,500 --> 00:06:26,180
>> Voimmeko sitten käyttää mitä tahansa Dimes?

119
00:06:26,180 --> 00:06:32,740
No, no-- koska $ 0,07 mod
$ 0,10 antaa meille jäljellä 7.

120
00:06:32,740 --> 00:06:34,960
10 ei mene 7. ollenkaan.

121
00:06:34,960 --> 00:06:36,390
>> Sitten voimme käyttää Nickels?

122
00:06:36,390 --> 00:06:40,490
No $ 0,07 mod 5 senttiä
antaa meille kaksi jäljellä.

123
00:06:40,490 --> 00:06:42,930
Ja lopuksi, voimme käyttää mitä tahansa penniä?

124
00:06:42,930 --> 00:06:45,930
2 mod 1 antaa meille 0,
joka on loppujen lopuksi

125
00:06:45,930 --> 00:06:48,160
Haluamme koska silloin se
tarkoittaa, että olemme palanneet

126
00:06:48,160 --> 00:06:50,160
käyttäjälle kaikki muutoksen velkaa.

127
00:06:50,160 --> 00:06:54,320
>> Joten nyt sinulla on kaksi mahdollisuutta
toteuttamisessa ahne algorithm--

128
00:06:54,320 --> 00:06:59,230
yksi silmukat ja yksi
yhdistelmä modulo ja jako.

129
00:06:59,230 --> 00:07:03,010
Joten lopuksi, meidän täytyy vain
tulostaa lopullinen määrä kolikoita.

130
00:07:03,010 --> 00:07:06,520
>> Jos halusin kertoa, että sain
3 lemmikit ja tätä arvoa hardcoded,

131
00:07:06,520 --> 00:07:09,240
Sitten voisin vain käyttää
yksinkertainen print testi selvitys.

132
00:07:09,240 --> 00:07:12,320
Mutta arvo on oikeastaan
tallennetaan muuttujaan.

133
00:07:12,320 --> 00:07:15,260
Joten miten tulostaa
arvot tallennetaan muuttujiin?

134
00:07:15,260 --> 00:07:17,880
>> Tämän otamme
etuna paikkamerkkien.

135
00:07:17,880 --> 00:07:21,540
Sano Olin jo ilmoittanut
alustettu kokonaisluku n.

136
00:07:21,540 --> 00:07:25,170
Sitten myöhemmin, haluaisinko tulostaa että
arvo, niin haluan kirjoittaa merkkijonon.

137
00:07:25,170 --> 00:07:30,500
Ja sen sijaan, että arvo I käyttäisi
paikkamerkki joka integer--% i.

138
00:07:30,500 --> 00:07:33,800
Sitten kun merkkijono, olen
pilkku, jonka jälkeen muuttuja

139
00:07:33,800 --> 00:07:34,950
että haluan tulostaa.

140
00:07:34,950 --> 00:07:38,550
Ja myöhemmin, kun se tulostaa,
se tulee tulostaa arvon n.

141
00:07:38,550 --> 00:07:41,570
>> Olen myös käyttää paikkamerkki
float, esimerkiksi.

142
00:07:41,570 --> 00:07:44,000
Jos halusin kertoa, miten
paljon rahaa minulla on taskussani,

143
00:07:44,000 --> 00:07:46,820
Sitten voisin sanoa, että olen% f dollaria.

144
00:07:46,820 --> 00:07:51,330
Ja myöhemmin, kun se tulostuu, silloin n tulee
korvata tuon paikan haltijalle.

145
00:07:51,330 --> 00:07:55,530
Voisin myös esimerkiksi käyttää useita
paikkamerkit useita muuttujia.

146
00:07:55,530 --> 00:07:57,590
Niin kauan kuin minä luetella
ne järjestyksessä, niin minä

147
00:07:57,590 --> 00:08:00,390
voi kertoa kuinka monta
koiria ja kissoja olen.

148
00:08:00,390 --> 00:08:03,710
>> Nyt osaamme kysyy
käyttäjän määrän muutoksen,

149
00:08:03,710 --> 00:08:06,130
varmistaa, että panos
on voimassa, ja sitten

150
00:08:06,130 --> 00:08:10,370
on kaksi mahdollista tapaa toteuttaa
ahne algoritmi on aina käyttää

151
00:08:10,370 --> 00:08:12,090
suurin kolikko mahdollista.

152
00:08:12,090 --> 00:08:15,050
Koska olemme pitäneet kirjaa
kuinka monta kolikkoa käytämme,

153
00:08:15,050 --> 00:08:19,210
Voimme tulostaa että arvo lopussa,
kertoo käyttäjälle kuinka monta kolikkoa he

154
00:08:19,210 --> 00:08:20,240
saada takaisin.

155
00:08:20,240 --> 00:08:24,240
>> Nimeni on Amayla, ja tämä on CS50.

156
00:08:24,240 --> 00:08:25,915

