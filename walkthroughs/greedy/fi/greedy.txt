Lähdetään ahne. Vuonna ahne, meidän tehtävämme on pelata roolin ahne kassa. Käyttäjä kertoo meille, miten paljon muuta me olemme heille, ja sitten meidän työ on laskea vähimmäismäärä kolikoita että voimme käyttää tehdä että muutosten määrä. 

Aloitetaan esimerkki. Sano käyttäjä vaatii $ 0,32 takaisin. Voisimme tehdä tätä antamalla niitä 32 penniä, yksi senttiä. Tai voisin myös käyttää viittä coins-- by heille kolme Dimes, $ 0,10 jokainen, ja kaksi penniä, $ 0,02. Mutta voisimme käyttää jopa vähemmän kolikoita tehdä se? 

Koko taktiikka greedy-- on ahne cashier-- on käyttää suurin kolikko mahdollista. Joten jos meillä on neljäsosaa käytämme niitä. Ja sitten kun ne loppuvat, käytämme Dimes, $ 0,10 kukin. Sitten Nickels, 5 senttiä kukin, ja sitten alas penniä, yksi senttiä. Käyttämällä suurin kolikko mahdollista aina kun voimme, voimme varmistaa, että käytämme Vähiten Kolikoiden mahdollista tehdä muutos. 

Joten kävellä tätä kautta. Käyttäjä tarvitsee $ 0,32. Niinpä kysymme itseltämme, voimme käyttää neljäsosa? No, kyllä ​​voimme. Nyt siis vain tietää ne $ 0,07 ja käytimme yksi kolikko. 

Voimme käyttää toinen neljännes? No ei. $ 0,07 on alle $ 0,25, joten jatkamme seuraavaksi suurimmalle kolikon käytettävissä. Dimes ovat $ 0,10 ja uudelleen, emme voi käyttää Dimes. Koska dimes ovat arvoltaan $ 0,10 joka on enemmän kuin muutoksen määrä velkaa. 

Menemme Nickels. Ja kyllä ​​tosiaankin, $ 0,05 alle $ 0.10-- joten voimme käyttää nikkeliä. Nyt siis vain velkaa käyttäjä $ 0,02, ja olemme tähän mennessä käytetty kaksi kolikkoa. Emme voi käyttää toista nikkeliä. Niinpä sitten siirry viimeiselle kolikko käytettävissämme, jotka ovat penniä. 

Ja voimme käyttää penniäkään? No, yes-- ja päädymme kahdella penniä yhteensä neljä kolikkoa. 

Kun olet valmis, Ohjelma näyttää tältä. Kun käyttäjä juoksee ahne ohjelma, he pyydetään antamaan määrään muutos dollareissa että he velkaa. Ja sitten ohjelma ulostulo vähimmäismäärä kolikoita että ahne kassa käyttäisi tehdä kyseisen määrän muutos. 

Nyt Katsotaanpa murtaa alas meidän alitehtäviä. Ensin aiomme jotta saat käyttäjän määrän muutoksen. Ja kuten mikä tahansa käyttäjä syöttää, haluamme varmistaa, että meillä vahvistaa, että panos ja varmistaa, että voimme käyttää sitä ruokkivat muuta meidän ohjelman. Sitten me aiomme aina käyttää suurinta piste mahdollisimman ja seurata kolikoiden käytetty. Ja lopuksi, tulostaa lopullinen määrä kolikoita, jotka käytimme. 

Joten puhua kehotukset. Määrä on tehtävä senttiä, ja tämä on dollareissa. Ja niin dollaria aiomme käyttää float muuttuja tyyppiä. Nyt kun kysyt käyttäjä syöttää, haluat varmistaa, että se on voimassa. Ja joten tässä haluamme hyödyntää ja do-while-silmukka konstruktio. 

Tee-aikaa silmukka suorittaa elin silmukan ainakin kerran. Joten tämä on kätevä. Tiedämme, että meidän on kysyy Käyttäjä ainakin kerran float. Nyt jos se float on pätevä. Sepä hienoa. Me eteenpäin. Mutta jos ei, silmukka huolehtii että saamme asianmukaisen float toistamalla jatkuvasti, kunnes käyttäjä antaa meille kelvollinen arvo. 

Nyt tee-aikana loop ehto, tarvitsemme pohtia, mitä se tarkoittaa on virheellinen kellua. Joten yhteydessä tämä ongelma, luultavasti on järkevää vain hyväksyä positiivisia arvoja. 

Joten liikkuvat on-- olemme saaneet arvo dollareissa käyttäjältä. Mutta olemme tekemisissä kolikoita, jotka ovat täysin senttiä. $ 1 vastaa 100 senttiä. Joten hyvä asia tehdä, on muuntaa nämä arvot senttiä. 

Nyt muunnettaessa kellua kokonaisluku, joten dollaria senttiä, Haluamme varmistaa, että olemme varovaisia noin liukulukuja epätarkkuutta. Joten se tarkoittaa that-- sanoa my dollari value-- minun kellua value-- oli vielä $ 2 on vielä voi olla joitakin irrallisia numeroita siellä. Joten me haluamme varmistaa, että ei vain me moninkertaistaa 100 saada senttiä, mutta myös sen ympärille pois. 

Meillä on nyt siis määrää Muutoksen velkaa käyttäjälle. Olemme alun perin saanut sen dollareissa, ja nyt olemme muuntaneet sen senttiä. Nyt voimme jatkaa sydämessä ahne algoritmi, joka on aina käyttäen suurimman kolikon mahdollista. Vaikka teemme tämän, on tärkeää, että myös seurata, kuinka monta kolikot ovat aiotaan palautetaan käyttäjälle sekä jäljellä muuttaa velkaa käyttäjälle. 

Ohjelma näyttää jotain tällaista. Kun saat määrä dollaria ja muuntaa että senttiä, Tulet syöttää silmukka. Vaikka neljäsosaa voi olla used-- toisin sanoen kun taas määrä muutoksen velkaa Käyttäjä on suurempi tai yhtä suuri kuin 0,25 $ voit käyttää neljäsosa. 

Nyt mitä käyttää neljännes aiheuttaa? No, one-- voit lisätä kolikon laskea palautetaan käyttäjälle. Ja toinen voit vähentää nykyisen määrän muutos velkaa takaisin käyttäjälle kirjoittaja $ 0,25. 

Sen jälkeen toistaa, että ennen neljäsosaa voi enää käyttää, Siirrymme seuraavaksi suurimmalle coin-- tässä tapauksessa Dimes, $ 0,10. Joten annat että silmukka kunnes et voi enää käyttää Dimes. Jatka sitten seuraavaan Suurin kolikko, Nickels. Jälkeen Nickels voi enää käyttää, käyttää jäljellä summa penniä. Ja lopuksi, tulostaa määrä kolikoita käytetään. 

Toinen tapa, että voit lähestyä ahne ongelma on käyttää modulo lähestymistapaa. Modulo on operaattori joka palauttaa loput jako kahden numerot. Sanoa saaneeni 50 mod 5. No, 5 on 50-kertaiseksi, joten jäljellä on 0. 50 mod 10-- hyvin, 10 on myös tekijä 50, joten jäljellä on myös 0. 50 mod 50-- hyvin, mitään mod itse ei tule mitään jäljellä. 

Entä 50 mod 49? No, 49 vain menee 50 kerran. Joten loput tulee olemaan 1. 53 mod 50 on menossa antaa sinulle jäljellä 3. 

Joten kuinka voimme käyttää modulo ja ehkä jotkut divisioona toteuttaa meidän ahne algoritmi? No, haluamme kuitenkin pysyä uskollisena sydämessä ahne algorithm-- että on käyttää suurin kolikko mahdollista. 

Joten kysyä itseltämme, voimme käyttää mitä tahansa neljäsosaa palata $ 0,32 käyttäjälle. No, 32 mod 25 antaa meille jäljellä $ 0,07. Joten joka kertoo meille, että voimme varmasti Käytä neljäsosa kanssa $ 0,07 jäljellä. 

Voimmeko sitten käyttää mitä tahansa Dimes? No, no-- koska $ 0,07 mod $ 0,10 antaa meille jäljellä 7. 10 ei mene 7. ollenkaan. 

Sitten voimme käyttää Nickels? No $ 0,07 mod 5 senttiä antaa meille kaksi jäljellä. Ja lopuksi, voimme käyttää mitä tahansa penniä? 2 mod 1 antaa meille 0, joka on loppujen lopuksi Haluamme koska silloin se tarkoittaa, että olemme palanneet käyttäjälle kaikki muutoksen velkaa. 

Joten nyt sinulla on kaksi mahdollisuutta toteuttamisessa ahne algorithm-- yksi silmukat ja yksi yhdistelmä modulo ja jako. Joten lopuksi, meidän täytyy vain tulostaa lopullinen määrä kolikoita. 

Jos halusin kertoa, että sain 3 lemmikit ja tätä arvoa hardcoded, Sitten voisin vain käyttää yksinkertainen print testi selvitys. Mutta arvo on oikeastaan tallennetaan muuttujaan. Joten miten tulostaa arvot tallennetaan muuttujiin? 

Tämän otamme etuna paikkamerkkien. Sano Olin jo ilmoittanut alustettu kokonaisluku n. Sitten myöhemmin, haluaisinko tulostaa että arvo, niin haluan kirjoittaa merkkijonon. Ja sen sijaan, että arvo I käyttäisi paikkamerkki joka integer--% i. Sitten kun merkkijono, olen pilkku, jonka jälkeen muuttuja että haluan tulostaa. Ja myöhemmin, kun se tulostaa, se tulee tulostaa arvon n. 

Olen myös käyttää paikkamerkki float, esimerkiksi. Jos halusin kertoa, miten paljon rahaa minulla on taskussani, Sitten voisin sanoa, että olen% f dollaria. Ja myöhemmin, kun se tulostuu, silloin n tulee korvata tuon paikan haltijalle. Voisin myös esimerkiksi käyttää useita paikkamerkit useita muuttujia. Niin kauan kuin minä luetella ne järjestyksessä, niin minä voi kertoa kuinka monta koiria ja kissoja olen. 

Nyt osaamme kysyy käyttäjän määrän muutoksen, varmistaa, että panos on voimassa, ja sitten on kaksi mahdollista tapaa toteuttaa ahne algoritmi on aina käyttää suurin kolikko mahdollista. Koska olemme pitäneet kirjaa kuinka monta kolikkoa käytämme, Voimme tulostaa että arvo lopussa, kertoo käyttäjälle kuinka monta kolikkoa he saada takaisin. 

Nimeni on Amayla, ja tämä on CS50. 