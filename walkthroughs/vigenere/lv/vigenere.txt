Zamyla Chan: Pieņemsim pastiprināt mūsu spēle ar vigenere izrēķināt. Vigenere izrēķināt ir ļoti līdzīgs ķeizaram, izņemot Cēzars mēs pagājis viens vesels skaitlis kā mūsu atslēgu. In vigenere mēs ejam iziet ar atslēgvārdu. Tātad, ja es gribēju, lai novirzīt ciphertext tas ir CS 50 ar ohai, tad tas nozīmē, ka katru vēstuli ohai gatavojas kalpot par atslēgu, un es esmu gatavojas, lai riņķotu pa ka atslēgvārds manā maiņā padarot ciphertext daudz grūtāk atšifrēt. 

Ko tas nozīmē novirzīt ar atslēgvārdu? Nu, atslēgvārds ir virkne kur katrs burts atbilst zināmā skaitlim maiņā. Tātad, o atbilst atslēgu 14, h uz atslēgu 7. A ir atslēga 0, tā ka tas neko nemainīs, un tad es ir atslēga 8. 

Say I ilga vigenere A ar teksta tas ir CS50 labi, kas vienkārši dotu me nemainīta virkne. Ievērojiet, ka tas ir līdzvērtīgs darbojas Cēzaru ar atslēgu nulles. Patiesībā, darbojas vigenere ar jebkuru vienu rakstzīmi būtu līdzvērtīgi darbojas Caesar ar šo pašu skaitlim. 

Labi, tāpēc, jo tie ir tik līdzīgi, ka man tiešām iesaku, ja jums gribu jūs varat vienkārši iekopēt Cēzaru kodu savā vigenere kodu. Lietas mainīsies, bet vismaz jums ir daži mugurkauls, ka jūs varat strādāt. Jo Todos ir vienādi, mēs gribam lai saņemtu atslēgu, saņemt teksta, šifrēt ka teksta, un pēc tam izdrukāt ka out. 

Tāpat kā Cēzars atslēga gatavojas tikt pieņemts, jo otrajā komandrindas arguments ietverts argv indeksā 1, bet tas ir atšķirīgs šoreiz tāpēc, ka tas ir alfabēta. Tātad, mums ir nepieciešams atkārtot pār katru vienu rakstzīmi šajā atslēgā ka lietotājs pieņemts, un nodrošināt ka katrs raksturs ir alfabēta lai turpinātu. 

Kad mēs esam darījuši, tad mēs var saņemt virkni no lietotāja, tāpat kā mēs to darījām agrāk. Un tagad mēs nonākam pie sirds Problēmas par vigenere, kas ir tāpat kā Cēzars, kā izdomāt šifrēšanas modeli un vienādojums, un šifrēt visa teksta,. 

Tātad, jūs pamanīsiet, ka vienādojums par vigenere maiņā ir ļoti līdzīgs Cēzara vienu. Vienīgā atšķirība ir tā, ka nevis viena mainīga k pirms, tagad k ir apakšraksts, norādot JTH burta taustiņu. 

Apskatīsim piemēru. Say jums gribēja iet noslēpumu ziņa uz savu simpātiju, es tāpat kā jūs. Nu, jūsu atslēgu jūs izvēlēties kaut ko, ka jūsu zina simpātiju zina, ka jums patīk, pandas. Labi, tā kā mēs maiņās šo? 

Nu, mums ir mūsu teksta, indekss. Tas ir pie pirmo burtu un tā ir indekss mūsu atslēgu kas ir pie p, pirmais burts mūsu panda vārdu. Tātad, novirzot I ar p dod mums x, tad mēs virzīt teksta, indeksu. Tas izpaužas mūs atstarpi. Tagad telpa raksturs ir ne burtu, lai tas nozīmē, ka, ka tikai pārskaitījumi tiesības vairāk nekā uz ciphertext, mēs ieliekam atstarpi tur, un mums nav virzīt indeksu mūsu atslēgu. Tātad, mēs joprojām esam pie p šajā brīdī. 

Mēs pārietu uz nākamo indekss mūsu teksta,. Un tagad, jo tas ir vēstule, tad mazie l, mēs novirzīt ka ​​ar nākamais indekss mūsu taustiņu. Kurš ir, kurš ir nulle maiņu, lai vienkārši kļūst l mūsu ciphertext. Tad mēs iepriekš gan teksta, un galvenais rādītājs, jo tas ir alfabēta. Tātad mēs turpinām ka kamēr mēs uz e līdzīgos. 

Labi, lai jūs pamanīsiet pie šī norāda, ka, runājot par mūsu galveno indeksu, mēs esam sasnieguši panda vārdu, lai to, ko notiek, kad mēs nokļūt uz nākamo alfabētiskais burts teksta,? Nu, viss, kas notiek, ir mums wrap ap sākumā, uz pirmo indeksu mūsu atslēgu. Tātad, tad mēs pāriet ka y ar p, lai dotu mums n. Un tad mēs turpinām apdares kodējumu mūsu teksta, lai iegūtu x lvne Noh. 

Šajā piemērā, es parādīja, ka mēs tikai virzīt uz nākamo vēstuli atslēgvārdu ja raksturs vienkāršā tekstā ir burts tāpēc isalpha funkcija noderēs šeit. Un, tāpat kā Cēzars, mēs vēlamies saglabāt lietas, isupper un islower. Tātad, pievienot šo mazliet jo jūsu pseudocode. 

Tātad, kā mēs izdomāt galvenos maiņās? Nu, ja jūs atceraties mūsu diskusija par alfabēta indeksiem Cēzars problēma, tas ir ļoti līdzīgs. 

Ja atbilst ASCII vērtība 65, bet pāreja no 0, un pēc tam pēdējais burts alfabēts, Z, atbilst maiņā 25. Jūs pamanīsiet, ka pāreja ir identisks vai nav vēstule ir lielie burti vai mazo burtu. 

Labi, tāpēc tagad, ka jums zina, kā izdomāt skaitliskā pāreja ka atbilst vienam rakstura iesim atpakaļ uz mūsu vienādojumu. Tāpēc, ka mums ir divas dažādas Indeksi šeit, i un j, tas ir mājiens, ka mēs vēlamies, lai izsekotu Gan mūsu pozīciju teksta, kā arī mūsu pozīciju atslēgvārdu, tāpēc tie ir divi atsevišķi mainīgie ka mēs vēlamies, lai saglabātu kravas. 

Tagad stāvoklis mūsu teksta, gatavojas palielināt katru reizi, lai notiek būt nedaudz vairāk taisni uz priekšu atšķirībā no pozīcijā atslēgvārdu, ko mēs zinām, ir wrap ap, un dažreiz pieauguma, dažreiz paliek tāds pats. Tātad, kā mēs ieviest funkcionalitāte wrap ap indekss atslēgvārdu? 

Es esmu gatavojas izmantot skaitīt off piemēru. Skaitīšanas off ir populārs veids sadalīt cilvēkus grupās. Teikt, man bija 5 cilvēki, un es gribēju sadalīt tās trīs grupās, Nu tad es varētu sākt, skaitot off. Pirmā persona būtu teikt, es esmu komandas numur viens, nākamajai personai būtu komanda numurs divas, trešā persona komanda numurs trīs. Tagad, es tikai gribu trīs grupām, lai ceturtā persona faktiski sākas un teikt, labi, es esmu komandas numur viens, kā arī, un nākamais cilvēks būtu komandas numurs divi. Un, no turienes, viņi var pēc tam atsevišķi savās grupās. 

Tātad, kā es varētu izmantot modulo lai palīdzētu man īstenot šis skaits off aptīšanas funkcijas? Nu, pirmais cilvēks numurs 1, mod 3 dod mums 1. 2 mod 3 dod mums 2, un 3 mod 3 dod mums 0. 

Ceturtais cilvēks, skaitlis 4, mod 3 dod mums 1, un pēc tam 5 mod 3 dod mums 2. Tātad, jūs ievērosiet, ka pat tad, ja to cilvēku skaits, kas man ir palielinās, un ir virs 3, jo es esmu modding ar 3 Es vienmēr saņemt numurus 0, 1 un 2. Es nekad lielāks par 3. Tātad, pat tad, ja man bija 10 cilvēki, tad visus no tiem cilvēkiem joprojām būtu robežās 2 vai 0 grupas 1,. 

Tātad, tagad mēs zinām, ka, ja mums ir grupa 5 un mēs mod visiem tiem par 3, tad mēs nekad pārsniegt grupas, 0, 1, vai 2. Tātad, mēs nekad gatavojas saņemt grupu numurs, kas ir vienāda ar 3 vai iepriekš. Tātad, pat tad, ja es varu pievienot vēl piecus cilvēki, tad visus no tiem joprojām būtu piešķirts grupām 0, 1, vai 2, jo es modding ar 3. Es nekad gatavojas pārsniegt šo vāciņu. 

Labi, tāpēc pieņemsim redzēt, ja mēs varam piemērot šis jēdziens izmantojot modulo wrap ap grupu numurus un piemērot to vigenere kur mēs gribam izmantot modulo wrap ap indekss par atslēgvārdu. Pat ja mēs palielināšanai indekss mēs vienmēr vēlaties pārliecināties, ka mēs vienmēr wrap ap paša sākuma nekad pārsniedzot garums string. 

Labi, tāpēc es zinu, tas varētu būt mazliet milzīgs. Tur ir daudz vairāk darīt šajā p komplektu. Tātad, pārliecinieties, ka jūs rakstīt out labs pseudocode sev ka jūs saprotat un kas izpaužas darba darīts. Izmēģiniet un risināt katru single line patstāvīgi norādītas visas maz mazos gabaliņos puzzle Pirms liekot to kopā. 

Pārliecinieties, ka jūs varat iegūt galvenais no komandrindas un nodrošināt, ka tā ir burtu, saņemt teksta no lietotāja, un tad šifrēšanas, pārliecinieties, ka jūs zina, kā šifrēt vienu burtu, un pēc tam pāriet uz visu string ar visu aptīšanas funkcijas. Beidzot, jūs varat izdrukāt ciphertext. 

Mans vārds ir Zamyla, un tas bija vigenere. 