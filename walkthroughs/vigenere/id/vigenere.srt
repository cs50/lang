1
00:00:00,000 --> 00:00:00,930

2
00:00:00,930 --> 00:00:04,030
>> Zamyla Chan: Mari kita melangkah kami
game dengan cipher vigenere.

3
00:00:04,030 --> 00:00:06,710
The vigenere cipher adalah
sangat mirip dengan Caesar,

4
00:00:06,710 --> 00:00:11,060
kecuali di Caesar kami melewati di
satu bilangan bulat sebagai kunci kami.

5
00:00:11,060 --> 00:00:14,100
Dalam vigenere kita akan
untuk lulus dalam kata kunci.

6
00:00:14,100 --> 00:00:19,400
Jadi, jika saya ingin menggeser
ciphertext ini CS 50 oleh Ohai,

7
00:00:19,400 --> 00:00:23,260
maka itu berarti bahwa setiap huruf dalam
Ohai akan berfungsi sebagai kunci,

8
00:00:23,260 --> 00:00:27,160
dan aku akan siklus lebih
kata kunci untuk shift saya

9
00:00:27,160 --> 00:00:31,930
membuat ciphertext
banyak lebih sulit untuk memecahkan kode.

10
00:00:31,930 --> 00:00:34,540
>> Apa artinya
bergeser kata kunci?

11
00:00:34,540 --> 00:00:38,610
Nah, kata kunci adalah string
di mana setiap huruf sesuai

12
00:00:38,610 --> 00:00:41,080
beberapa pergeseran bilangan bulat.

13
00:00:41,080 --> 00:00:49,310
Jadi, o sesuai dengan kunci dari 14,
h ke tombol dari 7, memiliki kunci 0,

14
00:00:49,310 --> 00:00:54,670
sehingga tidak akan mengubah apa pun,
dan kemudian saya memiliki kunci 8.

15
00:00:54,670 --> 00:01:00,000
>> Katakanlah aku berlari vigenere A dengan
teks biasa ini CS50 baik,

16
00:01:00,000 --> 00:01:02,800
yang hanya akan memberikan
saya string tidak berubah.

17
00:01:02,800 --> 00:01:08,170
Perhatikan bahwa ini setara dengan
menjalankan Caesar dengan kunci dari nol.

18
00:01:08,170 --> 00:01:12,070
Bahkan, berjalan vigenere
dengan satu karakter apapun

19
00:01:12,070 --> 00:01:17,070
akan setara dengan berjalan
Caesar dengan itu bilangan bulat yang sama.

20
00:01:17,070 --> 00:01:20,400
>> Baiklah, jadi, karena
mereka sangat mirip saya akan

21
00:01:20,400 --> 00:01:24,300
sebenarnya menyarankan bahwa jika Anda
ingin Anda hanya dapat menyalin Caesar Anda

22
00:01:24,300 --> 00:01:26,932
kode ke kode vigenere Anda.

23
00:01:26,932 --> 00:01:28,640
Hal akan berubah,
tapi setidaknya Anda memiliki

24
00:01:28,640 --> 00:01:31,110
beberapa backbone yang Anda dapat bekerja dengan.

25
00:01:31,110 --> 00:01:36,410
Karena Todos yang sama yang kita inginkan
untuk mendapatkan kunci, dapatkan teks biasa,

26
00:01:36,410 --> 00:01:40,690
encipher bahwa teks biasa,
dan kemudian mencetak yang keluar.

27
00:01:40,690 --> 00:01:44,980
>> Sama seperti Caesar kunci akan
diteruskan sebagai baris perintah kedua

28
00:01:44,980 --> 00:01:50,540
Argumen yang terkandung dalam indeks argv
1, tapi itu berbeda kali ini

29
00:01:50,540 --> 00:01:52,560
karena itu harus abjad.

30
00:01:52,560 --> 00:01:56,390
Jadi, kita perlu iterate atas setiap
karakter tunggal di kunci yang

31
00:01:56,390 --> 00:02:00,800
bahwa pengguna berlalu dalam, dan memastikan
bahwa setiap karakter abjad

32
00:02:00,800 --> 00:02:02,800
untuk melanjutkan.

33
00:02:02,800 --> 00:02:05,560
>> Setelah kami selesai melakukannya, maka kita
bisa mendapatkan string dari pengguna,

34
00:02:05,560 --> 00:02:07,560
seperti yang kita lakukan sebelumnya.

35
00:02:07,560 --> 00:02:10,520
Dan sekarang, kita sampai hati
masalah untuk vigenere,

36
00:02:10,520 --> 00:02:14,665
yang seperti Caesar, bagaimana
mengetahui pola enciphering

37
00:02:14,665 --> 00:02:19,760
dan persamaan, dan encipher
seluruh plaintext.

38
00:02:19,760 --> 00:02:23,280
>> Jadi, Anda akan melihat bahwa
persamaan untuk pergeseran vigenere

39
00:02:23,280 --> 00:02:25,610
sangat mirip dengan yang Caesar.

40
00:02:25,610 --> 00:02:29,780
Satu-satunya perbedaan adalah bahwa
bukannya variabel k tunggal

41
00:02:29,780 --> 00:02:37,270
sebelumnya, sekarang k memiliki subscript,
menunjukkan surat j kunci.

42
00:02:37,270 --> 00:02:39,560
>> Mari kita berjalan melalui contoh.

43
00:02:39,560 --> 00:02:43,830
Katakanlah Anda ingin lulus rahasia
pesan ke naksir Anda, aku menyukaimu.

44
00:02:43,830 --> 00:02:46,325
Nah, untuk kunci Anda Anda
memilih sesuatu yang Anda

45
00:02:46,325 --> 00:02:49,790
tahu naksir tahu bahwa Anda suka, panda.

46
00:02:49,790 --> 00:02:52,290
Baiklah, jadi bagaimana kita menggeser ini?

47
00:02:52,290 --> 00:02:55,500
>> Yah, kita memiliki indeks plaintext kami.

48
00:02:55,500 --> 00:02:59,160
Itu pada huruf pertama dan
sehingga adalah indeks untuk kunci kami

49
00:02:59,160 --> 00:03:02,830
yang di p, yang pertama
huruf dalam kata panda kami.

50
00:03:02,830 --> 00:03:08,590
Jadi, pergeseran I oleh p memberi kita x,
maka kita memajukan indeks plaintext.

51
00:03:08,590 --> 00:03:10,460
Ini membuat kita untuk ruang.

52
00:03:10,460 --> 00:03:13,540
Sekarang, karakter spasi
adalah non abjad,

53
00:03:13,540 --> 00:03:16,930
sehingga berarti bahwa, yang hanya
transfer tepat ke ciphertext,

54
00:03:16,930 --> 00:03:23,430
kami menempatkan spasi di sana, dan kami tidak
memajukan indeks untuk kunci kami.

55
00:03:23,430 --> 00:03:25,820
Jadi, kita masih di p pada saat ini.

56
00:03:25,820 --> 00:03:30,130
>> Kami maju ke depan
Indeks di plaintext kami.

57
00:03:30,130 --> 00:03:34,030
Dan sekarang, karena itu adalah
surat, huruf kecil l,

58
00:03:34,030 --> 00:03:37,920
kita menggeser bahwa pada
indeks berikutnya di kunci kami.

59
00:03:37,920 --> 00:03:42,360
Yang merupakan, yang merupakan nol
pergeseran sehingga hanya menjadi

60
00:03:42,360 --> 00:03:44,370
sebuah l di ciphertext kami.

61
00:03:44,370 --> 00:03:51,120
Kemudian, kita maju baik plaintext, dan
indeks kunci karena abjad.

62
00:03:51,120 --> 00:03:56,210
Jadi kita terus yang
sampai kita mendapatkan e dalam seperti.

63
00:03:56,210 --> 00:04:01,090
>> Baiklah, sehingga Anda akan melihat di ini
menunjukkan bahwa, dalam hal indeks utama kami,

64
00:04:01,090 --> 00:04:03,940
kita telah mencapai akhir dari
kata panda, jadi apa

65
00:04:03,940 --> 00:04:08,750
terjadi ketika kita sampai ke depan
huruf abjad di plaintext?

66
00:04:08,750 --> 00:04:12,180
Nah, semua yang terjadi adalah kita
membungkus ke awal,

67
00:04:12,180 --> 00:04:14,710
untuk indeks pertama kunci kami.

68
00:04:14,710 --> 00:04:19,570
Jadi, maka kita menggeser bahwa
y oleh p untuk memberi kita n.

69
00:04:19,570 --> 00:04:26,860
Dan kemudian, kami terus menyelesaikan encoding
plaintext kami untuk mendapatkan x lvne noh.

70
00:04:26,860 --> 00:04:29,300
>> Dari contoh ini, saya
menunjukkan bahwa kita hanya memajukan

71
00:04:29,300 --> 00:04:33,140
untuk huruf berikutnya dalam kata kunci
jika karakter dalam teks biasa

72
00:04:33,140 --> 00:04:37,480
adalah surat sehingga isalpha yang
fungsi akan berguna di sini.

73
00:04:37,480 --> 00:04:43,030
Dan, seperti di Caesar, kita ingin
melestarikan kasus, isupper dan islower.

74
00:04:43,030 --> 00:04:46,100
Jadi, tambahkan sedikit ini
di dalam pseudocode Anda.

75
00:04:46,100 --> 00:04:48,510
>> Jadi bagaimana kita mengetahui pergeseran kunci?

76
00:04:48,510 --> 00:04:53,030
Nah, jika Anda ingat diskusi kita
pada indeks abjad di Caesar

77
00:04:53,030 --> 00:04:55,370
masalah, itu sangat mirip.

78
00:04:55,370 --> 00:05:01,130
>> Di mana A sesuai dengan ASCII
nilai 65 tetapi pergeseran 0,

79
00:05:01,130 --> 00:05:03,550
dan kemudian huruf terakhir
dalam alfabet, Z,

80
00:05:03,550 --> 00:05:06,940
sesuai dengan pergeseran 25.

81
00:05:06,940 --> 00:05:10,320
Anda akan melihat bahwa pergeseran
identik atau tidak

82
00:05:10,320 --> 00:05:14,880
surat itu adalah huruf atau huruf kecil.

83
00:05:14,880 --> 00:05:17,700
>> OK, jadi sekarang bahwa Anda
tahu bagaimana untuk mencari tahu

84
00:05:17,700 --> 00:05:21,470
pergeseran numerik yang
sesuai dengan karakter tunggal

85
00:05:21,470 --> 00:05:24,050
mari kita kembali ke persamaan kami.

86
00:05:24,050 --> 00:05:28,180
Karena kita memiliki dua yang berbeda
subscript sini, i dan j,

87
00:05:28,180 --> 00:05:32,130
itulah petunjuk yang kita ingin melacak
dari kedua posisi kami di plaintext

88
00:05:32,130 --> 00:05:36,600
serta posisi kami di kata kunci,
jadi mereka adalah dua variabel yang terpisah

89
00:05:36,600 --> 00:05:39,010
bahwa kita ingin tetap memegang.

90
00:05:39,010 --> 00:05:42,580
>> Sekarang, posisi di plaintext kami
akan meningkat setiap waktu,

91
00:05:42,580 --> 00:05:45,530
sehingga akan menjadi
Sedikit lebih lurus ke depan

92
00:05:45,530 --> 00:05:49,750
yang bertentangan dengan posisi kata kunci,
yang kita tahu memiliki untuk membungkus,

93
00:05:49,750 --> 00:05:52,910
dan kadang-kadang kenaikan,
kadang-kadang tetap sama.

94
00:05:52,910 --> 00:05:55,430
Jadi, bagaimana kita menerapkan
fungsionalitas

95
00:05:55,430 --> 00:05:59,820
untuk membungkus di sekitar
Indeks untuk kata kunci?

96
00:05:59,820 --> 00:06:01,640
>> Aku akan menggunakan menghitung off contoh.

97
00:06:01,640 --> 00:06:06,100
Menghitung off adalah cara yang populer
untuk membagi orang ke dalam kelompok-kelompok.

98
00:06:06,100 --> 00:06:10,660
Mengatakan saya punya 5 orang dan saya ingin
membaginya dalam tiga kelompok,

99
00:06:10,660 --> 00:06:13,640
baik maka saya akan mulai dengan menghitung off.

100
00:06:13,640 --> 00:06:16,980
Orang pertama akan
mengatakan saya tim nomor satu,

101
00:06:16,980 --> 00:06:21,030
orang berikutnya akan menjadi nomor tim
dua, jumlah tim orang ketiga

102
00:06:21,030 --> 00:06:21,910
tiga.

103
00:06:21,910 --> 00:06:25,910
Sekarang, saya hanya ingin tiga kelompok sehingga
orang keempat benar-benar akan

104
00:06:25,910 --> 00:06:30,160
mulai dari awal dan berkata,
baik, saya tim nomor satu juga,

105
00:06:30,160 --> 00:06:32,890
dan orang berikutnya
akan tim nomor dua.

106
00:06:32,890 --> 00:06:37,660
Dan, dari sana, mereka kemudian bisa
terpisah menjadi kelompok mereka.

107
00:06:37,660 --> 00:06:41,130
>> Jadi, bagaimana saya bisa menggunakan modulo
untuk membantu saya menerapkan

108
00:06:41,130 --> 00:06:44,160
ini menghitung off membungkus fungsi?

109
00:06:44,160 --> 00:06:50,140
Nah, orang pertama
nomor 1, mod 3 memberi kita 1.

110
00:06:50,140 --> 00:06:54,690
2 mod 3 memberi kita 2,
dan 3 mod 3 memberi kita 0.

111
00:06:54,690 --> 00:07:02,140
>> Orang keempat, nomor 4, 3 mod
memberi kita 1, dan kemudian 5 mod 3 memberi kita 2.

112
00:07:02,140 --> 00:07:05,370
Jadi, Anda akan melihat bahwa meskipun
jumlah orang yang saya miliki

113
00:07:05,370 --> 00:07:11,210
meningkatkan, dan di atas
3, karena aku modding oleh 3

114
00:07:11,210 --> 00:07:15,250
Saya selalu mendapatkan angka 0, 1, dan 2.

115
00:07:15,250 --> 00:07:19,040
Aku tidak pernah mendapatkan lebih besar dari 3.

116
00:07:19,040 --> 00:07:22,630
Jadi, bahkan jika saya memiliki 10
orang, maka semua orang-orang

117
00:07:22,630 --> 00:07:27,430
masih akan berada dalam kelompok 1, 2, atau 0.

118
00:07:27,430 --> 00:07:33,560
>> Jadi, sekarang kita tahu bahwa jika kita memiliki grup
dari 5 dan kami mod semua orang dengan 3,

119
00:07:33,560 --> 00:07:38,180
maka kita tidak akan pernah
melebihi kelompok 0, 1, atau 2.

120
00:07:38,180 --> 00:07:43,430
Jadi, kita tidak akan pernah mendapatkan kelompok
Jumlah itu sama dengan 3 atau di atas.

121
00:07:43,430 --> 00:07:46,980
Jadi, bahkan jika saya menambahkan lima lagi
orang, maka mereka semua

122
00:07:46,980 --> 00:07:53,150
masih akan ditugaskan untuk kelompok
0, 1, atau 2 karena aku modding oleh 3.

123
00:07:53,150 --> 00:07:56,510
Aku tidak akan melebihi topi itu.

124
00:07:56,510 --> 00:08:00,800
>> OK, jadi mari kita lihat apakah kita dapat menerapkan
Konsep ini menggunakan modulo

125
00:08:00,800 --> 00:08:03,710
untuk membungkus di sekitar
nomor kelompok dan menerapkan

126
00:08:03,710 --> 00:08:08,000
untuk Vigenere mana kita ingin
menggunakan Modulo untuk membungkus

127
00:08:08,000 --> 00:08:10,220
indeks untuk kata kunci.

128
00:08:10,220 --> 00:08:12,830
Meskipun kita incrementing
indeks kita selalu

129
00:08:12,830 --> 00:08:17,260
ingin memastikan bahwa kita selalu
membungkus ke awal

130
00:08:17,260 --> 00:08:20,050
tidak pernah melebihi
panjang string.

131
00:08:20,050 --> 00:08:23,510
>> OK, jadi saya tahu itu mungkin
sedikit berlebihan.

132
00:08:23,510 --> 00:08:26,670
Ada lebih banyak dilakukan di p set ini.

133
00:08:26,670 --> 00:08:30,050
Jadi, pastikan bahwa Anda menuliskan
pseudocode baik untuk diri sendiri

134
00:08:30,050 --> 00:08:32,870
bahwa Anda memahami dan
yang mendapatkan pekerjaan dilakukan.

135
00:08:32,870 --> 00:08:35,580
Mencoba dan mengatasi setiap
single line independen

136
00:08:35,580 --> 00:08:38,370
mencari tahu semua kecil
potongan-potongan kecil dari teka-teki

137
00:08:38,370 --> 00:08:40,260
sebelum menempatkan bersama-sama.

138
00:08:40,260 --> 00:08:43,110
>> Pastikan bahwa Anda bisa mendapatkan
kunci dari baris perintah

139
00:08:43,110 --> 00:08:46,780
dan memastikan bahwa itu abjad,
mendapatkan teks biasa dari pengguna,

140
00:08:46,780 --> 00:08:51,010
dan kemudian di enciphering, pastikan Anda
tahu bagaimana menulis dlm kode satu huruf,

141
00:08:51,010 --> 00:08:56,130
dan kemudian maju ke seluruh string
dengan semua membungkus fungsi.

142
00:08:56,130 --> 00:08:59,610
Akhirnya, Anda dapat mencetak ciphertext.

143
00:08:59,610 --> 00:09:04,050
>> Nama saya adalah Zamyla,
dan ini adalah vigenere.

144
00:09:04,050 --> 00:09:07,757

