1
00:00:00,000 --> 00:00:00,930

2
00:00:00,930 --> 00:00:04,030
>> Zamyla Chan: Poďme zintenzívniť naše
Hra s Vigener kód.

3
00:00:04,030 --> 00:00:06,710
Vigener kód je
veľmi podobný cisárovi,

4
00:00:06,710 --> 00:00:11,060
s výnimkou Caesar sme absolvovali v
jediné číslo ako náš kľúč.

5
00:00:11,060 --> 00:00:14,100
V Vigener ideme
odovzdať kľúčové slovo.

6
00:00:14,100 --> 00:00:19,400
Takže, keby som chcel posunúť
Ciphertext je to SK 50 podľa Ohai,

7
00:00:19,400 --> 00:00:23,260
potom to znamená, že každé písmeno v
Ohai bude slúžiť ako kľúč,

8
00:00:23,260 --> 00:00:27,160
a idem na bicykli cez
že kľúčové slovo pre moje smeny

9
00:00:27,160 --> 00:00:31,930
vďaka ciphertext
oveľa ťažšie dekódovať.

10
00:00:31,930 --> 00:00:34,540
>> Čo to znamená
posunúť o kľúčové slovo?

11
00:00:34,540 --> 00:00:38,610
No, kľúčové slovo je reťazec
kde každý písmeno zodpovedá

12
00:00:38,610 --> 00:00:41,080
do istej celé číslo posunu.

13
00:00:41,080 --> 00:00:49,310
Takže, o zodpovedá tlačidlu 14,
h na kľúč 7, A má kľúč 0,

14
00:00:49,310 --> 00:00:54,670
takže by sa nič nezmenilo,
a potom som má kľúč 8.

15
00:00:54,670 --> 00:01:00,000
>> Povedzme, že som bežal Vigener A s
obyčajný text je to CS50 dobre,

16
00:01:00,000 --> 00:01:02,800
že by jednoducho dať
me nezmenenej reťazec.

17
00:01:02,800 --> 00:01:08,170
Všimnite si, že to je ekvivalentná
beh Caesar s kľúčom nula.

18
00:01:08,170 --> 00:01:12,070
V skutočnosti, beh Vigener
s akýmkoľvek jedným znakom

19
00:01:12,070 --> 00:01:17,070
by bol ekvivalent k behu
Caesar s rovnakým celé číslo.

20
00:01:17,070 --> 00:01:20,400
>> Dobre, takže, pretože
oni sú tak podobné, že by som

21
00:01:20,400 --> 00:01:24,300
v skutočnosti odporučiť, že ak
chcete, môžete len skopírovať Caesar

22
00:01:24,300 --> 00:01:26,932
Kód do Vigener kódu.

23
00:01:26,932 --> 00:01:28,640
Veci sa menia,
ale aspoň máte

24
00:01:28,640 --> 00:01:31,110
niektorí chrbticu, ktoré môžete pracovať.

25
00:01:31,110 --> 00:01:36,410
Vzhľadom k tomu, Todos sú rovnaké chceme
získať kľúč, ten obyčajný text,

26
00:01:36,410 --> 00:01:40,690
zašifrovať, že obyčajný text,
a vytlačiť to von.

27
00:01:40,690 --> 00:01:44,980
>> Rovnako ako Caesar kľúč sa chystá
odovzdané v ako druhý príkazového riadku

28
00:01:44,980 --> 00:01:50,540
argumentácia obsiahnuté v indexe argv
1, ale je to tentoraz inak

29
00:01:50,540 --> 00:01:52,560
pretože musí byť abecedný.

30
00:01:52,560 --> 00:01:56,390
Takže musíme iteráciu každý
Jeden znak v tomto kľúči

31
00:01:56,390 --> 00:02:00,800
že používateľ prešiel v, a zaistiť
že každý znak je abecedný

32
00:02:00,800 --> 00:02:02,800
s cieľom pokračovať.

33
00:02:02,800 --> 00:02:05,560
>> Potom, čo sme urobili, potom by sme
môže dostať reťazec od užívateľa,

34
00:02:05,560 --> 00:02:07,560
rovnako ako sme to urobili predtým.

35
00:02:07,560 --> 00:02:10,520
A teraz sa dostávame k jadru
problému pre Vigener,

36
00:02:10,520 --> 00:02:14,665
čo je rovnako ako Caesar, ako sa
vymyslieť kódovacieho vzoru

37
00:02:14,665 --> 00:02:19,760
a rovnice, a zašifrovať
celý holý.

38
00:02:19,760 --> 00:02:23,280
>> Takže, zistíte, že
rovnica pre posun Vigener

39
00:02:23,280 --> 00:02:25,610
je veľmi podobný tomu, ktorý Caesar.

40
00:02:25,610 --> 00:02:29,780
Jediný rozdiel je, že
namiesto jedinej premennej k

41
00:02:29,780 --> 00:02:37,270
skôr, teraz k má dolný index,
označujúce JTH písmeno kľúča.

42
00:02:37,270 --> 00:02:39,560
>> Poďme sa prejsť príklad.

43
00:02:39,560 --> 00:02:43,830
Povedzme, že ste chcel odovzdať tajomstvo
Správa na svoju lásku, mám ťa rád.

44
00:02:43,830 --> 00:02:46,325
No, pre váš kľúče, ktorý
vybrať niečo, že váš

45
00:02:46,325 --> 00:02:49,790
viem tlačenica vie, že sa vám páči, pandy.

46
00:02:49,790 --> 00:02:52,290
Dobre, tak ako sme to posunúť?

47
00:02:52,290 --> 00:02:55,500
>> No, máme holého textu index.

48
00:02:55,500 --> 00:02:59,160
To je na prvé písmeno a
takže je index pre náš kľúč

49
00:02:59,160 --> 00:03:02,830
ktorý je u p, prvý
písmeno v našej panda slovo.

50
00:03:02,830 --> 00:03:08,590
Takže, presúva Aj podľa p us x udáva,
Potom sme sa posunúť holého textu index.

51
00:03:08,590 --> 00:03:10,460
To nás dostáva do priestoru.

52
00:03:10,460 --> 00:03:13,540
Teraz je medzera
je non abecedný,

53
00:03:13,540 --> 00:03:16,930
tak, že znamená, že, že práve
prevody priamo nad do ciphertext,

54
00:03:16,930 --> 00:03:23,430
dáme priestor tam, a my nie
posunúť index pre náš kľúč.

55
00:03:23,430 --> 00:03:25,820
Takže, sme stále na str v tomto bode.

56
00:03:25,820 --> 00:03:30,130
>> My postúpiť do ďalšej
index v našej obyčajného textu.

57
00:03:30,130 --> 00:03:34,030
A teraz, pretože to je
list je malé l,

58
00:03:34,030 --> 00:03:37,920
posunieme, že touto
ďalší index v našej kľúča.

59
00:03:37,920 --> 00:03:42,360
Ktorý je, ktorý je nulový
Posun takže jednoducho stane

60
00:03:42,360 --> 00:03:44,370
l v našej ciphertext.

61
00:03:44,370 --> 00:03:51,120
Potom sme postúpiť aj holý text, a
kľúč index, pretože to je abecedný.

62
00:03:51,120 --> 00:03:56,210
Takže budeme pokračovať, že
až sa dostaneme do e v podobne.

63
00:03:56,210 --> 00:04:01,090
>> V poriadku, takže si všimnete na to
ukazujú, že, pokiaľ ide o nášho indexu kľúča,

64
00:04:01,090 --> 00:04:03,940
sme došli na koniec
panda slovo, takže to, čo

65
00:04:03,940 --> 00:04:08,750
sa stane, keď sa dostaneme k druhému
abecedný list v holom texte?

66
00:04:08,750 --> 00:04:12,180
No, všetko, čo sa stane, je, že sme
zábal okolo na začiatok,

67
00:04:12,180 --> 00:04:14,710
na prvý index nášho kľúča.

68
00:04:14,710 --> 00:04:19,570
Áno, potom posunieme, že
y o p n dať nám.

69
00:04:19,570 --> 00:04:26,860
A potom budeme pokračovať dokončovacie kódovanie
Naše plaintext dostať x lvne NOH.

70
00:04:26,860 --> 00:04:29,300
>> Z tohto príkladu I
ukázala, že my len vopred

71
00:04:29,300 --> 00:04:33,140
na ďalšie písmeno v kľúčové slovo
v prípade, že postava vo formáte obyčajného textu

72
00:04:33,140 --> 00:04:37,480
je list, takže IsAlpha
funkcia príde vhod tu.

73
00:04:37,480 --> 00:04:43,030
A rovnako ako v Caesar, chceme
zachovať prípad, isupper a islower.

74
00:04:43,030 --> 00:04:46,100
Takže, pridajte tento trochu
V do svojho pseudokódu.

75
00:04:46,100 --> 00:04:48,510
>> Tak ako sme sa zistiť kľúčové posuny?

76
00:04:48,510 --> 00:04:53,030
No, ak si spomínate našu diskusiu
Na abecedný indexy v Caesar

77
00:04:53,030 --> 00:04:55,370
Problém, je to veľmi podobné.

78
00:04:55,370 --> 00:05:01,130
>> Kde A zodpovedá ASCII
hodnota 65, ale k posunu 0,

79
00:05:01,130 --> 00:05:03,550
a potom posledné písmeno
v abecede, Z,

80
00:05:03,550 --> 00:05:06,940
zodpovedá posunu 25 ° C.

81
00:05:06,940 --> 00:05:10,320
Všimnite si, že posun
je totožná tiež

82
00:05:10,320 --> 00:05:14,880
písmeno je veľké písmená alebo malé písmená.

83
00:05:14,880 --> 00:05:17,700
>> OK, tak teraz, keď vás
vedieť, ako prísť na to,

84
00:05:17,700 --> 00:05:21,470
číselné posun, ktorý
zodpovedá jednému znaku

85
00:05:21,470 --> 00:05:24,050
vráťme sa k našej rovnice.

86
00:05:24,050 --> 00:05:28,180
Pretože máme dva odlišné
indexy tu, i a j,

87
00:05:28,180 --> 00:05:32,130
To je náznak, že chceme sledovať
ako našej pozície v holom texte

88
00:05:32,130 --> 00:05:36,600
rovnako ako našu pozíciu v kľúčové slovo,
tak tie sú dve samostatné premenné

89
00:05:36,600 --> 00:05:39,010
že chceme udržať držanie.

90
00:05:39,010 --> 00:05:42,580
>> Teraz sa pozície v našej obyčajný text
porastie zakaždým,

91
00:05:42,580 --> 00:05:45,530
takže to bude byť
trochu viac priamočiara

92
00:05:45,530 --> 00:05:49,750
v protiklade k pozícii kľúčového slova,
ktorého poznáme má zabaliť okolo,

93
00:05:49,750 --> 00:05:52,910
a niekedy aj zvyšovať,
Niekedy zostane rovnaký.

94
00:05:52,910 --> 00:05:55,430
Tak, ako sme sa realizovať
funkčnosť

95
00:05:55,430 --> 00:05:59,820
zabaliť okolo
index pre kľúčové slovo?

96
00:05:59,820 --> 00:06:01,640
>> Budem používať započatia príklad.

97
00:06:01,640 --> 00:06:06,100
Počítanie off je populárny spôsob,
rozdeliť ľudí do skupín.

98
00:06:06,100 --> 00:06:10,660
Povedzme, že som mal 5 ľudí a chcel som
ich rozdeliť do troch skupín,

99
00:06:10,660 --> 00:06:13,640
no potom by som začať odpočítavať.

100
00:06:13,640 --> 00:06:16,980
Prvá osoba by
hovoria, že som tím číslo jedna,

101
00:06:16,980 --> 00:06:21,030
ďalšia osoba bude počet tím
dva, tím číslo tretia osoba

102
00:06:21,030 --> 00:06:21,910
tri.

103
00:06:21,910 --> 00:06:25,910
Teraz chcem len tri skupín, aby bolo
štvrtá osoba by v skutočnosti

104
00:06:25,910 --> 00:06:30,160
začať od začiatku a hovoria,
No, ja som team číslo jedna, rovnako,

105
00:06:30,160 --> 00:06:32,890
a ďalšia osoba
by tím číslo dva.

106
00:06:32,890 --> 00:06:37,660
A odtiaľ potom môžu
oddeliť do svojich skupín.

107
00:06:37,660 --> 00:06:41,130
>> Tak, ako by som mohol použiť modulo
aby mi pomohol realizovať

108
00:06:41,130 --> 00:06:44,160
Tento odpočítať zábal okolo funkciu?

109
00:06:44,160 --> 00:06:50,140
No, prvá osoba
číslo 1, mod 3 nám dáva 1.

110
00:06:50,140 --> 00:06:54,690
2 mod 3 nám dáva 2,
a 3 mod 3 nám dáva 0.

111
00:06:54,690 --> 00:07:02,140
>> Štvrtá osoba, číslo 4, mod 3
nám dáva 1 a potom 5 mod 3 nám dáva 2.

112
00:07:02,140 --> 00:07:05,370
Takže, všimnete si, že hoci
počet ľudí, ktoré mám

113
00:07:05,370 --> 00:07:11,210
zvyšuje, a je nad
3, pretože som modding o 3

114
00:07:11,210 --> 00:07:15,250
Vždy som si čísla 0, 1 a 2.

115
00:07:15,250 --> 00:07:19,040
Nikdy som sa dostať väčší ako 3.

116
00:07:19,040 --> 00:07:22,630
A tak, aj keď som mal 10
ľudí, potom všetky z tých ľudí,

117
00:07:22,630 --> 00:07:27,430
by ešte bolo v rámci skupín 1, 2, alebo 0.

118
00:07:27,430 --> 00:07:33,560
>> Takže teraz vieme, že ak máme skupinu
5 a my mod všetky tie, o 3,

119
00:07:33,560 --> 00:07:38,180
Potom sme nikdy
presiahnuť skupiny 0, 1 alebo 2.

120
00:07:38,180 --> 00:07:43,430
Takže sme nikdy dostať skupinu
číslo, ktoré je rovné 3 alebo vyššej.

121
00:07:43,430 --> 00:07:46,980
Takže, aj keď pridám ďalších päť
ľudí, potom všetky z nich

122
00:07:46,980 --> 00:07:53,150
by sa ešte zaradené do skupín
0, 1 alebo 2, pretože som modding o 3.

123
00:07:53,150 --> 00:07:56,510
Ja nikdy prekročiť tento čiapku.

124
00:07:56,510 --> 00:08:00,800
>> OK, takže uvidíme, či môžeme aplikovať
Tento koncept použitia modulo

125
00:08:00,800 --> 00:08:03,710
zabaliť okolo
Čísla skupín a aplikovať

126
00:08:03,710 --> 00:08:08,000
to Vigener kam chceme
používať modulo obtekanie

127
00:08:08,000 --> 00:08:10,220
Hodnota indexu pre kľúčové slovo.

128
00:08:10,220 --> 00:08:12,830
Aj napriek tomu, že sme postupne
index vždy

129
00:08:12,830 --> 00:08:17,260
chcete byť istý, že sme vždy
zábal okolo samého počiatku

130
00:08:17,260 --> 00:08:20,050
nikdy prekročení
dĺžka reťazca.

131
00:08:20,050 --> 00:08:23,510
>> OK, takže viem, že by to mohlo byť
trochu ohromujúce.

132
00:08:23,510 --> 00:08:26,670
Je tu oveľa viac robiť v tejto p sade.

133
00:08:26,670 --> 00:08:30,050
Takže, uistite sa, že ste vypísať
dobrý pseudocode pre seba

134
00:08:30,050 --> 00:08:32,870
že chápete a
že dostane úlohu.

135
00:08:32,870 --> 00:08:35,580
Pokúsiť sa riešiť každý
jednoriadkový nezávisle

136
00:08:35,580 --> 00:08:38,370
zisťuje, všetko malý
malé kúsky skladačky

137
00:08:38,370 --> 00:08:40,260
Pred uvedením dohromady.

138
00:08:40,260 --> 00:08:43,110
>> Uistite sa, že môžete získať
kľúče z príkazového riadku

139
00:08:43,110 --> 00:08:46,780
a zabezpečiť, že to je abecedný,
ten obyčajný text od užívateľa,

140
00:08:46,780 --> 00:08:51,010
a potom v zašifrovať, uistite sa, že
vedieť zašifrovať jedno písmeno,

141
00:08:51,010 --> 00:08:56,130
a potom postupujú do celého reťazca
so všetkými ovinutie funkcií.

142
00:08:56,130 --> 00:08:59,610
A konečne, môžete vytlačiť ciphertext.

143
00:08:59,610 --> 00:09:04,050
>> Moje meno je Zamyla,
a to bolo Vigener.

144
00:09:04,050 --> 00:09:07,757

