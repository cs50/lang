1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> AMILA: Kom ons pak die keiser.

3
00:00:02,270 --> 00:00:06,110
In die keiser, laat ons die gebruiker
om 'n geheime boodskap enkodeer.

4
00:00:06,110 --> 00:00:09,780
So laat ons spring sommer weg en kyk
by ons aan-dos vir hierdie probleem.

5
00:00:09,780 --> 00:00:12,210
So die eerste, kry ons die sleutel van die gebruiker.

6
00:00:12,210 --> 00:00:15,210
Dan kry ons die skoonteks
dat hulle wil enkodeer.

7
00:00:15,210 --> 00:00:21,380
Daarna het versleutelen ons dit vir hulle,
en uiteindelik druk ons ​​hul kriptoteks.

8
00:00:21,380 --> 00:00:23,600
>> So laat ons begin met 'n voorbeeld.

9
00:00:23,600 --> 00:00:26,920
Sê jy wou die enkodeer
hele alfabet met 'n sleutel van twee.

10
00:00:26,920 --> 00:00:31,360
Wel, jou hele alfabet sou
net verskuif word na briewe.

11
00:00:31,360 --> 00:00:37,060
So 'n wil enkodeer na C, B om
D, C tot E, so aan en so voort,

12
00:00:37,060 --> 00:00:42,470
totdat jy X, wat kodeer tot Z
of Zed, afhangende van waar jy vandaan kom.

13
00:00:42,470 --> 00:00:47,445
Dan sou Y dan skuif al die pad,
draai om die alfabet te A te kry,

14
00:00:47,445 --> 00:00:53,256
en dan uiteindelik die laaste letter van die
alfabet, Z, Zed, sal enkodeer na B.

15
00:00:53,256 --> 00:00:54,660
>> Jy het dit?

16
00:00:54,660 --> 00:00:56,380
Kom ons kyk na 'n paar voorbeelde.

17
00:00:56,380 --> 00:01:00,540
Die eerste voorbeeld hier is baie soortgelyk
wat ons net bo verduidelik.

18
00:01:00,540 --> 00:01:05,560
So as ek enkodeer paar deel van die
alfabet, 'n deur L, deur 'n sleutel van twee,

19
00:01:05,560 --> 00:01:09,760
dan kry ek net my hele
alfabet verskuif twee briewe.

20
00:01:09,760 --> 00:01:12,230
>> Dan, in my volgende voorbeeld,
die sleutel is nog twee,

21
00:01:12,230 --> 00:01:15,080
sodat jy moet nog steeds weet
wat briewe om te verwag.

22
00:01:15,080 --> 00:01:16,400
Maar hier is dit 'n frase.

23
00:01:16,400 --> 00:01:18,100
Dit is CS50.

24
00:01:18,100 --> 00:01:21,090
So jy sal sien dat ek
die behoud van die geval van my briewe,

25
00:01:21,090 --> 00:01:25,600
sodat geen hoofletters is ook
hoofletters in die kriptoteks.

26
00:01:25,600 --> 00:01:27,800
En enige klein
briewe in die skoonteks

27
00:01:27,800 --> 00:01:30,640
word ook kleinletters
briewe in die kriptoteks.

28
00:01:30,640 --> 00:01:34,020
Maar ek hou die letters
en enige uitroeptekens

29
00:01:34,020 --> 00:01:37,610
of enige ander leestekens dieselfde.

30
00:01:37,610 --> 00:01:40,360
>> So nou dat ons 'n sin
hoe die program werk,

31
00:01:40,360 --> 00:01:43,890
voel vry om te gaan hardloop 'n paar meer
voorbeelde van jou eie, as jy wil.

32
00:01:43,890 --> 00:01:47,072
Kom ons begin met die kry
die sleutel van die gebruiker.

33
00:01:47,072 --> 00:01:48,780
Tradisioneel, met
ander probleme, ons het

34
00:01:48,780 --> 00:01:51,450
is gewoond aan om
enige nommers wat ons

35
00:01:51,450 --> 00:01:54,710
moet deur waarna die gebruiker
met die funksie getint.

36
00:01:54,710 --> 00:01:58,850
Maar hierdie keer is ons eintlik gaan
om die command line argument gebruik

37
00:01:58,850 --> 00:02:01,760
en 'n nuwe funksie genoem atoi.

38
00:02:01,760 --> 00:02:05,130
>> Wanneer jy die belangrikste hardloop
program in C, dan is dit

39
00:02:05,130 --> 00:02:08,500
neem op twee parameters--
int argc, wat

40
00:02:08,500 --> 00:02:11,670
is die aantal argumente
geslaag, en dan

41
00:02:11,670 --> 00:02:15,920
argv, 'n verskeidenheid van snare wat bevat
die lys van al die argumente

42
00:02:15,920 --> 00:02:16,740
geslaag.

43
00:02:16,740 --> 00:02:19,740
Jy hoef nie uitdruklik het
om hierdie veranderlikes te verklaar.

44
00:02:19,740 --> 00:02:22,700
Hulle is bereken vir
jy deur die samesteller.

45
00:02:22,700 --> 00:02:28,160
Korrekte gebruik vir hierdie sou wees
vir argc twee wees in hierdie geval,

46
00:02:28,160 --> 00:02:32,630
want die gebruiker het om te slaag in
die oproep tot die program, ./caesar,

47
00:02:32,630 --> 00:02:35,570
en dan die sleutel,
ongeag aantal wat hulle wil.

48
00:02:35,570 --> 00:02:39,920
So dit beteken dat argc moet twee
ten einde vir 'n geldige gebruik van die keiser

49
00:02:39,920 --> 00:02:41,680
wat uitgevoer moet word.

50
00:02:41,680 --> 00:02:43,590
>> So kom ons kyk na 'n voorbeeld.

51
00:02:43,590 --> 00:02:47,760
Sê Ek het reeds 'n skrywe en
saamgestel 'n program genaamd blastoff.

52
00:02:47,760 --> 00:02:52,670
So as ek hardloop in die command line
./blastoff Team Rocket, wel, dan,

53
00:02:52,670 --> 00:02:57,750
argc sou drie wees, want ek
geslaag in drie afsonderlike argumente.

54
00:02:57,750 --> 00:02:59,830
Dan argv sou lyk.

55
00:02:59,830 --> 00:03:03,750
Dit is 'n skikking, en dit sou
bevat elk van die drie stringe.

56
00:03:03,750 --> 00:03:09,640
./blastoff in die eerste indeks, span
in die volgende, en vuurpyl in die laaste.

57
00:03:09,640 --> 00:03:11,610
>> Kom ons praat oor skikkings vir 'n sekonde.

58
00:03:11,610 --> 00:03:15,560
Skikkings is datastrukture wat hou
verskeie waardes van dieselfde soort.

59
00:03:15,560 --> 00:03:19,980
Dit kan handig te pas kom wanneer ons
het lyste van heelgetalle of snare.

60
00:03:19,980 --> 00:03:23,030
Onthou net hulle
om dieselfde soort wees.

61
00:03:23,030 --> 00:03:25,310
In rekenaarwetenskap, ons
lief tel van nul,

62
00:03:25,310 --> 00:03:29,260
so onthou dat skikkings
is ook nul-geïndekseer.

63
00:03:29,260 --> 00:03:34,360
Dus is die eerste element van my reeks
gaan wees by indeks nul.

64
00:03:34,360 --> 00:03:37,580
So in hierdie geval, as ek
'n verskeidenheid van lengte vier,

65
00:03:37,580 --> 00:03:41,350
dan is die laaste indeks van die
laaste element van my reeks

66
00:03:41,350 --> 00:03:44,970
is eintlik gaan wees
by indeks drie, nie vier.

67
00:03:44,970 --> 00:03:48,880
Want onthou, ons
begin tel op nul.

68
00:03:48,880 --> 00:03:52,530
>> Hier is 'n voorbeeld van hoe jy
kan 'n verskeidenheid van jou eie te skep.

69
00:03:52,530 --> 00:03:56,440
So sê Ek wou slaan my
drie gunsteling hond name.

70
00:03:56,440 --> 00:03:59,030
Dan sou ek 'n verskeidenheid van snare skep.

71
00:03:59,030 --> 00:04:04,450
So sou ek die tipe, string te kenne gee en
sit dan die naam van die skikking, honde,

72
00:04:04,450 --> 00:04:06,450
en dan in die vierkant
hakies sit die grootte

73
00:04:06,450 --> 00:04:09,260
van die array-- in hierdie geval, drie.

74
00:04:09,260 --> 00:04:12,690
>> So my eerste inskrywing gaan
honde by indeks nul,

75
00:04:12,690 --> 00:04:14,750
en wat gaan Milo wees.

76
00:04:14,750 --> 00:04:17,850
Dan honde indeks een
gaan stom te wees,

77
00:04:17,850 --> 00:04:23,060
Darling Mochi, en dan die laaste
inskrywing, die derde ingang by indeks twee,

78
00:04:23,060 --> 00:04:26,130
gaan oulike, soet Elphie wees.

79
00:04:26,130 --> 00:04:28,610
Jy sal sien dat die formaat
vir die invul van hierdie reeks

80
00:04:28,610 --> 00:04:32,150
is baie soos hoe jy dalk
verklaar enige ander veranderlike waar

81
00:04:32,150 --> 00:04:36,307
jy het die veranderlike naam gevolg deur
die waarde wat jy wil bewaar in dit.

82
00:04:36,307 --> 00:04:38,140
Die enigste verskil in
hierdie geval is dat jy

83
00:04:38,140 --> 00:04:42,700
moet onthou om die indeks te sit
van die waarde in vierkantige hakies.

84
00:04:42,700 --> 00:04:46,420
En daar het ons ons
drie gunsteling honde.

85
00:04:46,420 --> 00:04:48,780
>> Maar helaas, dit is tyd
om terug aan die keiser te kry.

86
00:04:48,780 --> 00:04:52,910
Onthou dat korrekte gebruik vir die
gebruiker gaan aanstuur in nie net

87
00:04:52,910 --> 00:04:57,430
die naam van die program ./caesar, maar
ook die sleutel wat hulle wil om te skuif

88
00:04:57,430 --> 00:04:58,850
hul skoonteks deur.

89
00:04:58,850 --> 00:05:01,540
So dit beteken dat argc twee moet wees.

90
00:05:01,540 --> 00:05:07,580
Hulle moet slaag in two-- nie meer nie, geen
minder as twee command line argumente.

91
00:05:07,580 --> 00:05:09,050
>> Nou, wat van argv?

92
00:05:09,050 --> 00:05:12,880
Wel, ons weet reeds dat die
verskeidenheid gaan lengte twee te wees,

93
00:05:12,880 --> 00:05:15,270
maar wat in elke element?

94
00:05:15,270 --> 00:05:19,330
Wel, die eerste element
gaan ./caesar te wees,

95
00:05:19,330 --> 00:05:24,190
en dan die volgende element gaan
bevat die sleutel wat die gebruiker ingetik.

96
00:05:24,190 --> 00:05:27,480
Nou, as hulle gebruik dit korrek
vir die gebruik van die keiser,

97
00:05:27,480 --> 00:05:29,350
dan gaan hulle in te tik 'n nommer.

98
00:05:29,350 --> 00:05:33,260
Maar selfs al is die karakter
dat hulle tik is 'n nommer,

99
00:05:33,260 --> 00:05:35,790
dis van datatipe string.

100
00:05:35,790 --> 00:05:40,390
>> So hoe kan ons skakel dit
string na 'n heelgetal?

101
00:05:40,390 --> 00:05:46,680
So sê Ek het NUM, 'n string,
met die string 50.

102
00:05:46,680 --> 00:05:49,000
As ek wil om te sit wat
om 'n heelgetal is, dan het ek net

103
00:05:49,000 --> 00:05:53,340
verklaar 'n nuwe veranderlike, 'n
heel getal Ek roep atoi.

104
00:05:53,340 --> 00:06:01,160
Ek slaag in my stringveranderlike, NUM, en
dan sal Ek dan bevat die getal 50.

105
00:06:01,160 --> 00:06:04,350
Maak seker dat jy die man kyk
bladsye vir die atoi funksie

106
00:06:04,350 --> 00:06:07,990
om seker te maak wat biblioteek dis
in, asook watter nut dit

107
00:06:07,990 --> 00:06:14,550
sal terugkeer as die string geslaag
in nie al die syfers bevat.

108
00:06:14,550 --> 00:06:16,950
>> So nou dat ons gekry
die sleutel, is die volgende stap

109
00:06:16,950 --> 00:06:19,430
is om die skoonteks van die gebruiker te kry.

110
00:06:19,430 --> 00:06:21,170
Nou, dit gaan
minder ingewikkeld

111
00:06:21,170 --> 00:06:23,410
as opgevolg rondom die
command line argumente.

112
00:06:23,410 --> 00:06:26,190
Al wat ons moet doen is bel
die getstring funksie

113
00:06:26,190 --> 00:06:29,660
aan die gebruiker gevra om op te gee
ons 'n string, maar onthou

114
00:06:29,660 --> 00:06:34,090
die spesifikasies vir hoe gaan ons
dalk wil die gebruiker vir daardie vinnige.

115
00:06:34,090 --> 00:06:36,420
>> Nou kom ons by die
hart van die problem--

116
00:06:36,420 --> 00:06:38,860
hoe om die skoonteks versleutelen.

117
00:06:38,860 --> 00:06:42,830
Wel, in die eerste, kom ons praat oor hoe
om een ​​karakter versleutelen op 'n tyd,

118
00:06:42,830 --> 00:06:47,370
en dan sal ons aan te spreek hoe om
Itereer oor die hele plat.

119
00:06:47,370 --> 00:06:50,440
Ek het 'n paar pseudokode geskryf
vir die keiser probleem.

120
00:06:50,440 --> 00:06:52,310
Ek wil u aanmoedig om
skryf jou eie sowel.

121
00:06:52,310 --> 00:06:55,900
Dit mag dalk nie identies te kyk
myne, en dit is OK, maar solank

122
00:06:55,900 --> 00:06:58,640
as die algemene idee is dieselfde.

123
00:06:58,640 --> 00:07:00,780
>> Die eerste drie stappe
Ons het reeds gedoen.

124
00:07:00,780 --> 00:07:03,100
Ons het die sleutel van gekry
die command line argument,

125
00:07:03,100 --> 00:07:05,510
Ons het omgedraai dat die sleutel
in 'n heelgetal, en ons het

126
00:07:05,510 --> 00:07:09,320
daartoe gelei dat die gebruiker vir die skoonteks
dat hulle wil omzetten.

127
00:07:09,320 --> 00:07:12,420
So dan is die volgende groot stuk
is dat vir elke karakter

128
00:07:12,420 --> 00:07:15,070
in die skoonteks string,
As dit is alfabetiese,

129
00:07:15,070 --> 00:07:17,750
ons wil bewaar
sy saak en skuif dit.

130
00:07:17,750 --> 00:07:20,900
Deur te bewaar geval, wat ek
beteken is dat alle hoofletters

131
00:07:20,900 --> 00:07:23,580
briewe moet boonste bly
geval en klein letters

132
00:07:23,580 --> 00:07:25,640
moet klein bly.

133
00:07:25,640 --> 00:07:29,110
So dan na ons skuif diegene
dan druk ons ​​die kriptoteks.

134
00:07:29,110 --> 00:07:33,100
>> Hier is drie funksies wat gaan
om handig te pas kom vir hierdie probleem.

135
00:07:33,100 --> 00:07:38,010
Onthou bo toe ek het die
voorbeeld vir die verskuiwing van hierdie is CS50?

136
00:07:38,010 --> 00:07:41,800
Onthou dat die 50 en die
uitroepteken nie skuif?

137
00:07:41,800 --> 00:07:45,680
So, hoe kan ons weet of ons
moet 'n brief te skuif of nie?

138
00:07:45,680 --> 00:07:48,650
Wel, "is Alpha" As
jy slaag dit 'n karakter,

139
00:07:48,650 --> 00:07:54,850
sal terugkeer waar as wat karakter
is 'n brief en valse anders.

140
00:07:54,850 --> 00:07:56,870
Om jou te help met
die behoud van hoofletters

141
00:07:56,870 --> 00:07:59,750
is die funksies "is
boonste "en" laer. "

142
00:07:59,750 --> 00:08:03,350
>> Hierdie twee funksies te neem ook
in 'n enkele karakter as insette

143
00:08:03,350 --> 00:08:06,580
en terug te keer jy 'n Boole,
waar of vals

144
00:08:06,580 --> 00:08:11,280
afhangende van of daardie karakter
is hoofletters of kleinletters.

145
00:08:11,280 --> 00:08:14,610
Omdat "is bo" en "is
laer "is Boole funksies,

146
00:08:14,610 --> 00:08:18,660
wat beteken dat hulle moet terugkeer jy 'n Boole,
jy kan dit gebruik in jou omstandighede.

147
00:08:18,660 --> 00:08:23,490
So hier is 'n kode uit dat slegs
druk 'n brief as dit hoofletters.

148
00:08:23,490 --> 00:08:27,790
So ek het my karakter verklaar
brief word die hoofletters Zed

149
00:08:27,790 --> 00:08:33,440
en dan as "is bo" opbrengste
waar is, dan druk ek die brief.

150
00:08:33,440 --> 00:08:38,200
>> Gaan terug na ons eenvoudige voorbeeld van
verskuiwing van die alfabet met 'n sleutel van twee,

151
00:08:38,200 --> 00:08:41,049
hoe kan ons eintlik kry dat om te werk?

152
00:08:41,049 --> 00:08:45,770
Wel, dit blyk dat karakters
en heelgetalle is baie nou verwant.

153
00:08:45,770 --> 00:08:48,840
Elke karakter het 'n
heelgetal waarde wat verband hou

154
00:08:48,840 --> 00:08:53,260
daarmee gevind in die ASCII tabel,
waar ASCII elke karakter se

155
00:08:53,260 --> 00:08:55,380
waarde vertoon.

156
00:08:55,380 --> 00:08:58,940
So 'n hoofletter A ooreenstem
'n ASCII-waarde van 65

157
00:08:58,940 --> 00:09:02,270
en 'n klein 'n te
'n ASCII-waarde van 97.

158
00:09:02,270 --> 00:09:04,940
>> Voel vry om op te kyk
enige ASCII grafiek aanlyn

159
00:09:04,940 --> 00:09:07,720
om hierdie waardes te sien vir jouself.

160
00:09:07,720 --> 00:09:12,096
So, wat dit beteken is dat ons kan
neem die karakter van hoofletters A,

161
00:09:12,096 --> 00:09:18,200
voeg die heelgetal twee om dit, en dan kry
die karakter hoofletters C as gevolg daarvan.

162
00:09:18,200 --> 00:09:23,720
Dit is omdat 65, die ASCII
waarde vir kapitale A, plus 2,

163
00:09:23,720 --> 00:09:29,960
gee ons 67, wat ooreenstem
om die karakter van hoofletters C.

164
00:09:29,960 --> 00:09:33,480
>> Ongelukkig dinge
sal nie heeltemal so eenvoudig nie.

165
00:09:33,480 --> 00:09:36,980
Ons het 'n vergelyking wat
ons het om te oorweeg.

166
00:09:36,980 --> 00:09:43,590
Hier is dit sê vir ons dat die et kriptoteks
brief ooreenstem met die et skoonteks

167
00:09:43,590 --> 00:09:48,900
brief, plus die key--
al wat, modulêre 26.

168
00:09:48,900 --> 00:09:50,810
Hoekom is dit die geval?

169
00:09:50,810 --> 00:09:55,430
Kom ons gaan terug na ons voorbeeld van
voor, waar kapitaal A, plus 2,

170
00:09:55,430 --> 00:09:57,590
gee ons kapitaal C.

171
00:09:57,590 --> 00:10:01,870
>> So toepassing van die vergelyking wat
die spesifikasie gee ons,

172
00:10:01,870 --> 00:10:06,660
dan laat ons kapitaal A
plus 2 en mod wat deur 26.

173
00:10:06,660 --> 00:10:10,730
So kapitaal A, toe ek sit dit in
diegene enkele aanhalingstekens,

174
00:10:10,730 --> 00:10:14,010
laat my toe om dit te hanteer as
'n heelgetal, sodat toelaat

175
00:10:14,010 --> 00:10:17,500
my te gooi om sy ASCII waarde, 65.

176
00:10:17,500 --> 00:10:20,080
65 plus 2 is 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 gee vir ons 15,
Maar dit beteken nie regtig

178
00:10:25,210 --> 00:10:32,590
maak sin, want ons dat die ken
kapitaal C ASCII waarde is 67, nie 15.

179
00:10:32,590 --> 00:10:35,580
So hoe kan ons versoen nie?

180
00:10:35,580 --> 00:10:39,840
>> Wel, hier Ek wil graag die postuleer
idee van 'n alfabetiese indeks.

181
00:10:39,840 --> 00:10:44,010
So het ons reeds gepraat oor hoe
elke karakter het sy ASCII waarde,

182
00:10:44,010 --> 00:10:48,810
maar ek wil sê, goed, kom ons
dink oor elke karakter het ook '

183
00:10:48,810 --> 00:10:52,230
'n alfabetiese indeks,
waar A byvoorbeeld

184
00:10:52,230 --> 00:10:58,800
as die eerste letter van die alfabet,
'n alfabetiese indeks van nul.

185
00:10:58,800 --> 00:11:02,070
So nou kom ons pas die
Dieselfde vergelyking soos voorheen,

186
00:11:02,070 --> 00:11:05,040
maar met behulp van 'n alfabetiese indeks.

187
00:11:05,040 --> 00:11:07,810
>> So 'n nul is, soos ons gedefinieer.

188
00:11:07,810 --> 00:11:15,640
So dan neem nul plus twee, mod 26,
dit is twee, mod 26, wat ons gee twee.

189
00:11:15,640 --> 00:11:18,780
En ook, in terme van
'n alfabetiese indeks,

190
00:11:18,780 --> 00:11:23,930
C is die derde brief in die
alfabet, sodat sou ooreenstem

191
00:11:23,930 --> 00:11:26,290
om 'n alfabetiese indeks van twee.

192
00:11:26,290 --> 00:11:29,850
So dit blyk dat die gebruik van die
alfabetiese indeks in hierdie geval

193
00:11:29,850 --> 00:11:32,840
eintlik gee ons die korrekte resultaat.

194
00:11:32,840 --> 00:11:35,020
>> So nou kom ons kyk na
kyk of die vergelyking werke

195
00:11:35,020 --> 00:11:37,210
met 'n alfabetiese indeks.

196
00:11:37,210 --> 00:11:42,540
alfabetiese indeks Y se 24 as die
tweede laaste brief in die alfabet.

197
00:11:42,540 --> 00:11:46,520
So dan 24 plus ons
sleutel van twee gee ons 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 gee vir ons 0, wat, gelukkig vir
ons is die alfabetiese indeks vir A.

199
00:11:54,750 --> 00:11:59,100
So hopelik dit is genoeg bewys dat
die alfabetiese indeks metode werk.

200
00:11:59,100 --> 00:12:03,180
Indien nie, voel vry om te probeer
'n paar voorbeelde van jou eie.

201
00:12:03,180 --> 00:12:08,030
>> Ten einde behoorlik te draai rondom die
alfabet en die toepassing van die keiser vergelyking,

202
00:12:08,030 --> 00:12:11,280
dan weet ons dat ons nodig het om te
hanteer alfabetiese indekse.

203
00:12:11,280 --> 00:12:15,130
Maar ons begin met ASCII
waardes, en dan eers

204
00:12:15,130 --> 00:12:18,530
ons dan te skakel na
die alfabetiese indeks.

205
00:12:18,530 --> 00:12:23,970
Van daar, ten einde te druk, moet ons
weer te gaan met die ASCII waardes.

206
00:12:23,970 --> 00:12:28,350
Daarom moet ons om uit te vind hoe om
gaan van ASCII te alfabeties

207
00:12:28,350 --> 00:12:31,080
en uit alfabetiese om ASCII.

208
00:12:31,080 --> 00:12:34,910
>> So ek laat dit aan jou om uit te vind
die patroon tussen 'n karakter

209
00:12:34,910 --> 00:12:38,590
en sy alfabetiese
indeks en sy ASCII waarde.

210
00:12:38,590 --> 00:12:41,530
Nou, onthou dat selfs al
hierdie tabel regs op die skyfie

211
00:12:41,530 --> 00:12:45,630
toon die hoofletters, ons ook
moet oorweeg of

212
00:12:45,630 --> 00:12:48,915
'n ander patroon van toepassing
vir die klein letters.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> So nou dat ons het uitgepluis het
hoe om 'n enkele karakter te skuif,

215
00:12:55,840 --> 00:13:02,200
dan sal al wat ons moet doen is skaal wat
up om te gaan oor die hele plat.

216
00:13:02,200 --> 00:13:04,260
So het die skoonteks is 'n string.

217
00:13:04,260 --> 00:13:08,210
Gelukkig vir ons, 'n string is regtig
net 'n verskeidenheid van karakters,

218
00:13:08,210 --> 00:13:12,150
so ten einde toegang tot elke karakter
van 'n string, al wat jy hoef te doen

219
00:13:12,150 --> 00:13:14,270
is om verskeidenheid notasie gebruik.

220
00:13:14,270 --> 00:13:20,270
Sê Ek het 'n veranderlike van tipe
string met die naam "text = 'hierdie is CS50."

221
00:13:20,270 --> 00:13:22,730
>> Wel, dan, ten einde
toegang elke karakter,

222
00:13:22,730 --> 00:13:25,880
al wat ek hoef te doen met
die veranderlike teks is

223
00:13:25,880 --> 00:13:31,660
om goed te sê, teks indeks nul, wat
ooreenstem met kapitaal T. teks op indeks

224
00:13:31,660 --> 00:13:35,100
een stem ooreen met die laer geval h.

225
00:13:35,100 --> 00:13:38,110
Nog 'n nuttige funksie is
die string lengte funksie.

226
00:13:38,110 --> 00:13:40,760
So verby in 'n tou aan
daardie funksie sal terugkeer

227
00:13:40,760 --> 00:13:44,610
'n heelgetal, die lengte van die string.

228
00:13:44,610 --> 00:13:47,060
>> Noudat ons het gepraat oor
al hierdie verskillende elemente,

229
00:13:47,060 --> 00:13:48,540
Kom ons sit dit terug saam.

230
00:13:48,540 --> 00:13:52,210
So terug te keer na óf my pseudokode
-kode of jou pseudokode

231
00:13:52,210 --> 00:13:55,920
en gaan deur en maak seker dat jy
weet hoe om elke enkele ding te doen.

232
00:13:55,920 --> 00:14:01,520
Aan die sleutel met behulp argc en argv,
draai die sleutel tot 'n heelgetal is, 'n

233
00:14:01,520 --> 00:14:06,840
om i, waarna vir skoonteks,
getstring, en dan iterating

234
00:14:06,840 --> 00:14:09,590
oor elke karakter in
die skoonteks string,

235
00:14:09,590 --> 00:14:14,910
die behoud van die geval van elke karakter
en die verskuiwing van daardie karakter deur die sleutel,

236
00:14:14,910 --> 00:14:17,520
seker te maak dat jy
wikkel om die alfabet,

237
00:14:17,520 --> 00:14:20,850
uiteindelik druk wat kriptoteks.

238
00:14:20,850 --> 00:14:25,470
My naam is Amila, en dit was die keiser.

239
00:14:25,470 --> 00:14:28,448

