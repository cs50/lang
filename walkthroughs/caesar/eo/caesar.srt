1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> AMILA: Ni pritraktas Cezaro.

3
00:00:02,270 --> 00:00:06,110
En Cezaro, ni permesas al la uzanto
kodi sekreta mesaĝo.

4
00:00:06,110 --> 00:00:09,780
Do ni plonĝi juste kaj rigardi
en nia por-dos por tiu problemo.

5
00:00:09,780 --> 00:00:12,210
Do unue, ni ricevas la ŝlosilon de la uzanto.

6
00:00:12,210 --> 00:00:15,210
Tiam ni preni la tekston
ke ili volas kodi.

7
00:00:15,210 --> 00:00:21,380
Post tio, ni encipher gxin por ili,
kaj fine ni presi sian ĉifrita teksto.

8
00:00:21,380 --> 00:00:23,600
>> Do ni komencu per ekzemplo.

9
00:00:23,600 --> 00:00:26,920
Diru vi volis kodi la
tuta alfabeto kun ŝlosilo de du.

10
00:00:26,920 --> 00:00:31,360
Nu, via tuta alfabeto estus
nur esti ŝanĝita al literoj.

11
00:00:31,360 --> 00:00:37,060
Do A estus kodi al C, B al
D, C al E, tiel plu kaj tiel plu,

12
00:00:37,060 --> 00:00:42,470
ĝis vi akiras al X, kiu kodas al Z
aŭ Zed, dependanta sur kie vi estas de.

13
00:00:42,470 --> 00:00:47,445
Tiam Y devus tiam movi la tutan vojon,
envolver ĉirkaŭ la alfabeto por akiri al A,

14
00:00:47,445 --> 00:00:53,256
kaj tiam fine la lasta litero de la
alfabeto, Z, Zed, estus kodi al B.

15
00:00:53,256 --> 00:00:54,660
>> Vi tion aŭdas?

16
00:00:54,660 --> 00:00:56,380
Ni rigardu kelkajn ekzemplojn.

17
00:00:56,380 --> 00:01:00,540
La unua ekzemplo tie estas tre simila
al kion ni ĵus klarigis supre.

18
00:01:00,540 --> 00:01:05,560
Do se mi kodi iu sekcio de la
alfabeto, A tra L, per ŝlosilo de du,

19
00:01:05,560 --> 00:01:09,760
tiam mi simple akiri mian tutan
alfabeto ŝanĝiĝis du literoj.

20
00:01:09,760 --> 00:01:12,230
>> Tiam, en mia sekva ekzemplo,
la ŝlosilo estas ankoraŭ du,

21
00:01:12,230 --> 00:01:15,080
tiel vi devus ankoraŭ scias
kiun literoj atendi.

22
00:01:15,080 --> 00:01:16,400
Sed tie estas frazo.

23
00:01:16,400 --> 00:01:18,100
Ĉi tiu estas CS50.

24
00:01:18,100 --> 00:01:21,090
Do vi rimarkos ke mi
konservi la kazon de miaj leteroj,

25
00:01:21,090 --> 00:01:25,600
tiel ajna majuskla literoj estas ankaŭ
majuskla literoj en la ĉifrita teksto.

26
00:01:25,600 --> 00:01:27,800
Kaj neniu minuskla
literojn en la teksto

27
00:01:27,800 --> 00:01:30,640
ankaŭ minuskla
literoj en la ĉifrita teksto.

28
00:01:30,640 --> 00:01:34,020
Sed mi teni la literoj
kaj neniu Krisigno

29
00:01:34,020 --> 00:01:37,610
aŭ ajna alia interpunkcia la sama.

30
00:01:37,610 --> 00:01:40,360
>> Do nun ke ni havas sencon
cxar kiel la programo funkcias,

31
00:01:40,360 --> 00:01:43,890
bonvolu iri kuri iuj pli
ekzemploj de via propra, se vi deziras.

32
00:01:43,890 --> 00:01:47,072
Komencu kun akiranta
la ŝlosilo de la uzanto.

33
00:01:47,072 --> 00:01:48,780
Tradicie, kun
aliaj problemoj, ni havas

34
00:01:48,780 --> 00:01:51,450
kutimis ricevi
ajna nombro ke ni

35
00:01:51,450 --> 00:01:54,710
bezonas per instigante la uzanto
kun la funkcio GetInt.

36
00:01:54,710 --> 00:01:58,850
Sed ĉifoje ni efektive tuj
uzi la komandlinio argumento

37
00:01:58,850 --> 00:02:01,760
kaj nova funkcio nomita atoi.

38
00:02:01,760 --> 00:02:05,130
>> Kiam vi kuros la ĉefa
programo en C, tiam

39
00:02:05,130 --> 00:02:08,500
prenas en du parameters--
int argc, kiu

40
00:02:08,500 --> 00:02:11,670
estas la nombro de argumentoj
pasis en, kaj tiam

41
00:02:11,670 --> 00:02:15,920
argv, tabelo de kordoj kiuj enhavas
la liston de ĉiuj la argumentoj

42
00:02:15,920 --> 00:02:16,740
pasis.

43
00:02:16,740 --> 00:02:19,740
Vi ne eksplicite havas
deklari tiuj variabloj.

44
00:02:19,740 --> 00:02:22,700
Ili komputita por
vi per la tradukilo.

45
00:02:22,700 --> 00:02:28,160
Korekta uzado por tiu estus
por argc esti du en tiu kazo,

46
00:02:28,160 --> 00:02:32,630
ĉar la uzanto devas pasi en
la alvoko al la programo, ./caesar,

47
00:02:32,630 --> 00:02:35,570
kaj tiam la ŝlosilo,
ajn nombro ili volas.

48
00:02:35,570 --> 00:02:39,920
Do tio signifas ke argc devas esti du
en ordo por validan uzon de Cezaro

49
00:02:39,920 --> 00:02:41,680
esti ekzekutita.

50
00:02:41,680 --> 00:02:43,590
>> Do ni rigardu ekzemplon.

51
00:02:43,590 --> 00:02:47,760
Diru mi jam skribis kaj
kompilita programo nomata blastoff.

52
00:02:47,760 --> 00:02:52,670
Do se mi kuris en la komandlinio
./blastoff Teamo Rocket, nu, tiam,

53
00:02:52,670 --> 00:02:57,750
argc estus tri ĉar mi
pasis en tri malsamaj argumentoj.

54
00:02:57,750 --> 00:02:59,830
Tiam argv aspektus kiel tio.

55
00:02:59,830 --> 00:03:03,750
Ĝi estas tabelo, kaj tio estus
enhavas ĉiu el la tri kordoj.

56
00:03:03,750 --> 00:03:09,640
./blastoff en la unua indico, teamo
en la sekva, kaj raketo en la lasta.

57
00:03:09,640 --> 00:03:11,610
>> Ni parolu pri arrays por sek.

58
00:03:11,610 --> 00:03:15,560
Arrays estas datumstrukturoj, kiuj gardas
multnombraj valoroj de la sama tipo.

59
00:03:15,560 --> 00:03:19,980
Tiu povas veni en oportuna kiam ni
havas listojn de entjeroj aŭ kordoj.

60
00:03:19,980 --> 00:03:23,030
Nur memori ke havas
esti la sama tipo.

61
00:03:23,030 --> 00:03:25,310
En komputiko, ni
amas rakonti de nulo,

62
00:03:25,310 --> 00:03:29,260
tiel memoras ke tabeloj
Ankaŭ estas nulo-indeksitaj.

63
00:03:29,260 --> 00:03:34,360
Do la unua elemento de mia tabelo
tuj estos ĉe indekso nulo.

64
00:03:34,360 --> 00:03:37,580
Do en ĉi tiu kazo, Kiam mi
tabelo de longo kvar,

65
00:03:37,580 --> 00:03:41,350
tiam la lasta indekso de la
lasta elemento de mia tabelo

66
00:03:41,350 --> 00:03:44,970
fakte tuj estos
indekso tri, ne kvar.

67
00:03:44,970 --> 00:03:48,880
Ĉar rememoru, ni
komenci kalkulon je nulo.

68
00:03:48,880 --> 00:03:52,530
>> Jen ekzemplo de kiel vi
povus krei tabelon de via propra.

69
00:03:52,530 --> 00:03:56,440
Tiel diru mi volis konservi miajn
tri preferataj hundo nomoj.

70
00:03:56,440 --> 00:03:59,030
Tiam mi kreus tabelo de kordoj.

71
00:03:59,030 --> 00:04:04,450
Do mi deklarus la tipo, kordoj, kaj
tiam meti la nomon de la tabelo, hundoj,

72
00:04:04,450 --> 00:04:06,450
kaj tiam el kvadrato
krampoj metu la grandeco

73
00:04:06,450 --> 00:04:09,260
de la tabelo en ĉi tiu kazo, tri.

74
00:04:09,260 --> 00:04:12,690
>> Do mia unua eniro tuj
esti hundoj ĉe indekso nulo,

75
00:04:12,690 --> 00:04:14,750
kaj ke tuj estos Milo.

76
00:04:14,750 --> 00:04:17,850
Tiam hundoj ĉe indekso oni
tuj esti ridinda,

77
00:04:17,850 --> 00:04:23,060
karulo Mochi, kaj tiam la lasta
eniro, la tria eniro ĉe indekso du,

78
00:04:23,060 --> 00:04:26,130
tuj estos bela, dolĉa Elphie.

79
00:04:26,130 --> 00:04:28,610
Vi rimarkos ke la formato
por plenigi tiun tabelo

80
00:04:28,610 --> 00:04:32,150
Estas tre kiel kiel vi povus
deklari ajna alia variablo kie

81
00:04:32,150 --> 00:04:36,307
vi havas la variablo nomo sekvata de
la valoro kiun vi volas stokitaj en ĝi.

82
00:04:36,307 --> 00:04:38,140
La nura diferenco en
tiu kazo estas ke vi

83
00:04:38,140 --> 00:04:42,700
devas memori meti la indekso
de la valoro en kvadrataj krampoj.

84
00:04:42,700 --> 00:04:46,420
Kaj tie ni havas niajn
tri preferataj hundoj.

85
00:04:46,420 --> 00:04:48,780
>> Sed ve, estas tempo
reiri al Cezaro.

86
00:04:48,780 --> 00:04:52,910
Memoru ke korekta uzado por la
uzanto tuj estos pasante en ne nur

87
00:04:52,910 --> 00:04:57,430
la nomo de la programo ./caesar, sed
Ankaŭ la kerna ke ili volas ŝanĝi

88
00:04:57,430 --> 00:04:58,850
ilia teksto de.

89
00:04:58,850 --> 00:05:01,540
Do tio signifas ke argc devas esti du.

90
00:05:01,540 --> 00:05:07,580
Ili devas pasi en two-- ekzistos, neniu
malpli ol du komandlinio argumentoj.

91
00:05:07,580 --> 00:05:09,050
>> Nun, kio pri argv?

92
00:05:09,050 --> 00:05:12,880
Nu, ni jam scias ke la
tabelo tuj estos de longo du,

93
00:05:12,880 --> 00:05:15,270
sed kio enhavis en ĉiu elemento?

94
00:05:15,270 --> 00:05:19,330
Nu, la unua elemento
tuj estos ./caesar,

95
00:05:19,330 --> 00:05:24,190
kaj tiam la sekva elemento tuj
enhavas la ŝlosilo kiu la uzanto tajpas in.

96
00:05:24,190 --> 00:05:27,480
Nun, se ili uzis ĝin ĝuste
por la uzado de Cezaro,

97
00:05:27,480 --> 00:05:29,350
tiam ili tuj tajpi en kelkaj.

98
00:05:29,350 --> 00:05:33,260
Sed kvankam la karaktero
ke ili tajpas estas nombro,

99
00:05:33,260 --> 00:05:35,790
ĝi estas de datumtipo kordoj.

100
00:05:35,790 --> 00:05:40,390
>> Do kiel ni konverti ke
ŝnuro al entjero?

101
00:05:40,390 --> 00:05:46,680
Tiel diru mi num, ŝnuro,
enhavanta la ĉeno 50.

102
00:05:46,680 --> 00:05:49,000
Se mi volas konverti ke
por entjero, tiam mi simple

103
00:05:49,000 --> 00:05:53,340
deklari nova variablo, oni
entjero mi, nomante atoi.

104
00:05:53,340 --> 00:06:01,160
Mi pasas en mia ŝnuro varia, num, kaj
tiam mi havos tiam enhavas la numeron 50.

105
00:06:01,160 --> 00:06:04,350
Fari certe kontroli la viro
paĝoj pri la atoi funkcio

106
00:06:04,350 --> 00:06:07,990
kontroli kiun biblioteko estas
en, tiel kiel kion taksi ĝin

107
00:06:07,990 --> 00:06:14,550
revenos se la kordo pasis
en ne enhavas ĉiuj nombroj.

108
00:06:14,550 --> 00:06:16,950
>> Do nun ke ni alvenas
la ŝlosilo, la sekva paŝo

109
00:06:16,950 --> 00:06:19,430
estas akiri la fontan tekston de la uzanto.

110
00:06:19,430 --> 00:06:21,170
Nun, ĉi tiu tuj
malpli komplika

111
00:06:21,170 --> 00:06:23,410
ol navigi ĉirkaŭ la
komandliniajn argumentojn.

112
00:06:23,410 --> 00:06:26,190
Ĉiuj ni devi fari estas alvoko
la GetString funkcio

113
00:06:26,190 --> 00:06:29,660
suflori la uzanto doni
ni kordo, sed memoru

114
00:06:29,660 --> 00:06:34,090
kontroli la especificaciones por kiom ni
eble volas instigas la uzanton por.

115
00:06:34,090 --> 00:06:36,420
>> Nun ni venas al la
koro de la problem--

116
00:06:36,420 --> 00:06:38,860
kiel encipher la kompletan tekston.

117
00:06:38,860 --> 00:06:42,830
Nu, unue, ni parolu pri kiel
al encipher unu signo samtempe,

118
00:06:42,830 --> 00:06:47,370
kaj tiam ni trakti kiel
persisti super la tuta teksto.

119
00:06:47,370 --> 00:06:50,440
Mi verkis iuj _pseudocode_
cxar la cezaro problemo.

120
00:06:50,440 --> 00:06:52,310
Mi instigas vin
skribi vian propran tiel.

121
00:06:52,310 --> 00:06:55,900
Eble ne aspektas identaj al
mia, kaj tio estas okej, sed kiel longe

122
00:06:55,900 --> 00:06:58,640
kiel la ĝenerala ideo estas la sama.

123
00:06:58,640 --> 00:07:00,780
>> La unuaj tri paŝoj
Ni jam faris.

124
00:07:00,780 --> 00:07:03,100
Ni alvenas la ŝlosilo de
la komandlinio argumento,

125
00:07:03,100 --> 00:07:05,510
ni turnis ke ŝlosilaj
en entjero, kaj ni havas

126
00:07:05,510 --> 00:07:09,320
instigis la uzanto por la teksto
ke ili volas encipher.

127
00:07:09,320 --> 00:07:12,420
Do tiam la sekva granda bloko
estas ke por ĉiu karaktero

128
00:07:12,420 --> 00:07:15,070
en la teksto kordoj,
se ĝi estas alfabeta,

129
00:07:15,070 --> 00:07:17,750
ni volas konservi
lia kazo kaj ŝanĝi ĝin.

130
00:07:17,750 --> 00:07:20,900
Per konservi kazo, kion mi
signifas estas ke ĉiuj majusklo

131
00:07:20,900 --> 00:07:23,580
leteroj devus resti supra
kazo kaj ĉiuj minuskla literoj

132
00:07:23,580 --> 00:07:25,640
devus resti minuskle.

133
00:07:25,640 --> 00:07:29,110
Tial post ni ŝanĝi tiujn,
tiam ni presi la ĉifrita teksto.

134
00:07:29,110 --> 00:07:33,100
>> Tie estas tri funkcioj kiuj tuj
veni en oportuna por tiu problemo.

135
00:07:33,100 --> 00:07:38,010
Memoru super kiam mi donis la
Ekzemple por sxangxigxantaj tiu estas CS50?

136
00:07:38,010 --> 00:07:41,800
Memoru ke la 50 kaj la
Krisigno ne movi?

137
00:07:41,800 --> 00:07:45,680
Do kiel ni povas distingi, ĉu ni
bezonas movi leteron aŭ ne?

138
00:07:45,680 --> 00:07:48,650
Nu, "estas alfa," se
vi pasi ĝin karaktero,

139
00:07:48,650 --> 00:07:54,850
revenos vera se tiu karaktero
estas letero kaj falsaj alie.

140
00:07:54,850 --> 00:07:56,870
Helpi vin kun
konservado capitalización

141
00:07:56,870 --> 00:07:59,750
estas la funkcioj "estas
supra "kaj" estas pli malalta. "

142
00:07:59,750 --> 00:08:03,350
>> Tiuj du funkcioj ankaŭ preni
en sola karaktero kiel enigo

143
00:08:03,350 --> 00:08:06,580
kaj redoni vin Bulea,
ĉu vera aŭ malvera

144
00:08:06,580 --> 00:08:11,280
Dependanta sur ĉu tiu karaktero
estas majuskla aŭ minuskla.

145
00:08:11,280 --> 00:08:14,610
Ĉar "estas supera" kaj "estas
malalta "estas Bulea funkcioj,

146
00:08:14,610 --> 00:08:18,660
Signifanta ke ili deturnu vin Bulea,
Vi povas uzi ĉi tiujn en via kondiĉoj.

147
00:08:18,660 --> 00:08:23,490
Do jen fragmento de kodo kiu nur
presas leteron, se ĝi estas majuskla.

148
00:08:23,490 --> 00:08:27,790
Do mi deklaris mian karakteron
letero esti la supra kazo Zed

149
00:08:27,790 --> 00:08:33,440
kaj tiam se "estas supera" revenoj
vera, tiam Mi presi tiu letero.

150
00:08:33,440 --> 00:08:38,200
>> Revenanta al nia simpla ekzemplo de
sxangxigxantaj la alfabeto per ŝlosilo de du,

151
00:08:38,200 --> 00:08:41,049
kiel ni reale preni ke labori?

152
00:08:41,049 --> 00:08:45,770
Nu, tio rezultas ke karakteroj
kaj entjeroj estas tre proksime rilataj.

153
00:08:45,770 --> 00:08:48,840
Ĉiu karaktero havas
entjera valoro asociita

154
00:08:48,840 --> 00:08:53,260
kun ĝi troviĝas en la ASCII-diagramo,
kie ĉiu karaktero ASCII

155
00:08:53,260 --> 00:08:55,380
valoro estas montrita.

156
00:08:55,380 --> 00:08:58,940
Tiel supra kazo A respondas
al ASCII valoro de 65

157
00:08:58,940 --> 00:09:02,270
kaj minuskla a al
an ASCII valoro de 97.

158
00:09:02,270 --> 00:09:04,940
>> Bonvolu rigardi supren
ajna ASCII abako rete

159
00:09:04,940 --> 00:09:07,720
vidi tiujn valorojn por vi mem.

160
00:09:07,720 --> 00:09:12,096
Do kion tio signifas estas ke ni povas
preni la karakteron de majuskla A,

161
00:09:12,096 --> 00:09:18,200
aldonu la entjera du al ĝi, kaj tiam akiri
la karaktero majuskla C rezulte.

162
00:09:18,200 --> 00:09:23,720
Tio estas ĉar 65, la ASCII
valoro por ĉefurbo A, plus 2,

163
00:09:23,720 --> 00:09:29,960
nin tostas 67, kiu respondas
al la karaktero de majuskla C

164
00:09:29,960 --> 00:09:33,480
>> Bedaŭrinde, aferoj
ne tute tiel simpla.

165
00:09:33,480 --> 00:09:36,980
Ni havas ekvacion kiu
ni devas konsideri.

166
00:09:36,980 --> 00:09:43,590
Jen ĝi diras nin ke la Ith ĉifrita teksto
letero respondas al la Ith teksto

167
00:09:43,590 --> 00:09:48,900
letero, plus la key--
ĉiuj kiuj, modula 26.

168
00:09:48,900 --> 00:09:50,810
Kial estas ke la kazo?

169
00:09:50,810 --> 00:09:55,430
Ni reiru al nia ekzemplo de
antaŭe, kie ĉefurbo A, plus 2,

170
00:09:55,430 --> 00:09:57,590
donas al ni ĉefurbo C.

171
00:09:57,590 --> 00:10:01,870
>> Do apliki la ekvacion, kiu
la specifo donas nin,

172
00:10:01,870 --> 00:10:06,660
tiam ni prenos ĉefurbo A
plus 2 kaj mod kiu per 26.

173
00:10:06,660 --> 00:10:10,730
Do ĉefurbo A, kiam mi metas ĝin en
tiuj sola citiloj,

174
00:10:10,730 --> 00:10:14,010
permesas al mi trakti ĝin kiel
entjero, tial permesas

175
00:10:14,010 --> 00:10:17,500
mi jxetis gxin al lia ASCII valoro, 65.

176
00:10:17,500 --> 00:10:20,080
65 plus 2 estas 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 donas al ni 15
sed tio ne vere

178
00:10:25,210 --> 00:10:32,590
sencon ĉar ni scias ke la
majuskla C ASCII valoro estas 67, ne 15.

179
00:10:32,590 --> 00:10:35,580
Do kiel ni repacigi ke?

180
00:10:35,580 --> 00:10:39,840
>> Nu, jen mi ŝatus premisi la
nocio de alfabeta indekso.

181
00:10:39,840 --> 00:10:44,010
Do ni jam parolis pri kiel
ĉiu karaktero havas sian ASCII valoro,

182
00:10:44,010 --> 00:10:48,810
sed mi ŝatus diri, nu, ni
pensas pri ĉiu karaktero ankaŭ havi

183
00:10:48,810 --> 00:10:52,230
alfabeta indekso,
kie A ekz

184
00:10:52,230 --> 00:10:58,800
kiel la unua litero de la alfabeto,
havas alfabeta indekso de nulo.

185
00:10:58,800 --> 00:11:02,070
Do nun ni aplikas la
sama ekvacio kiel antaŭe,

186
00:11:02,070 --> 00:11:05,040
sed uzanta alfabeta indekso.

187
00:11:05,040 --> 00:11:07,810
>> Tiel A estas nulo, kiel ni difinis.

188
00:11:07,810 --> 00:11:15,640
Tial prenante nulo plus du, mod 26,
jen du, mod 26, kiu donas al ni du.

189
00:11:15,640 --> 00:11:18,780
Kaj bone, laŭ
alfabeta indekso,

190
00:11:18,780 --> 00:11:23,930
C estas la tria litero en la
alfabeto, do kiu respondus

191
00:11:23,930 --> 00:11:26,290
por alfabeta indekso de du.

192
00:11:26,290 --> 00:11:29,850
Tial ĝi similas ke uzante la
alfabeta indekso tiukaze

193
00:11:29,850 --> 00:11:32,840
fakte donas al ni la korektan rezulton.

194
00:11:32,840 --> 00:11:35,020
>> Do nun ni kontrolu
ĉu la ekvacio verkoj

195
00:11:35,020 --> 00:11:37,210
kun alfabeta indekso.

196
00:11:37,210 --> 00:11:42,540
Y la alfabeta indekso estas 24 kiel la
dua al lasta letero en la alfabeto.

197
00:11:42,540 --> 00:11:46,520
Tial 24 plus nia
ŝlosilo de du al ni 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 donas ni 0, kiu, feliĉe por
ni, la alfabeta indekso de A.

199
00:11:54,750 --> 00:11:59,100
Tiel espereble tio sufiĉa provo ke
la alfabeta indekso metodo funkcias.

200
00:11:59,100 --> 00:12:03,180
Se ne, bonvolu provi
iuj ekzemploj de via propra.

201
00:12:03,180 --> 00:12:08,030
>> Por konvene envolver ĉirkaŭ la
alfabeto kaj apliki la cezaro ekvacio,

202
00:12:08,030 --> 00:12:11,280
tiam ni scias ke ni devas
trakti alfabeta indeksoj.

203
00:12:11,280 --> 00:12:15,130
Sed ni komencu per ASCII
valoroj, kaj nur tiam

204
00:12:15,130 --> 00:12:18,530
ni tiam konverti al
la alfabeta indekso.

205
00:12:18,530 --> 00:12:23,970
De tie, por presi, ni bezonas
trakti la ASCII valoroj denove.

206
00:12:23,970 --> 00:12:28,350
Do ni devas kalkuli ekstere kiel
iri de ASCII al Alfabeta

207
00:12:28,350 --> 00:12:31,080
kaj el alfabeta al ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Do mi lasos al vi eltrovi
la mastro inter gravulo

209
00:12:34,910 --> 00:12:38,590
kaj lia alfabeta
indekso kaj ĝia ASCII valoro.

210
00:12:38,590 --> 00:12:41,530
Nun, memoru ke kvankam
ĉi tablo dekstre sur la glito

211
00:12:41,530 --> 00:12:45,630
montras la majusklojn, ni ankaŭ
devas konsideri ĉu aŭ ne

212
00:12:45,630 --> 00:12:48,915
malsama skemo validas
cxar la minusklan karakteroj.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Do nun ke ni eltrovis
kiel ŝanĝi sola karaktero,

215
00:12:55,840 --> 00:13:02,200
tiam ĉiuj ni devas fari estas skalo kiu
supren iri tra la tuta teksto.

216
00:13:02,200 --> 00:13:04,260
Do la fonta teksto estas ĉeno.

217
00:13:04,260 --> 00:13:08,210
Bonsorta por ni, ŝnuro estas vere
nur tabelo de signoj,

218
00:13:08,210 --> 00:13:12,150
tiel por aliri ĉiu karaktero
de kordo, ĉiuj vi devas fari

219
00:13:12,150 --> 00:13:14,270
estas uzi tabelo skribmaniero.

220
00:13:14,270 --> 00:13:20,270
Diru mi havas variablo de tipo
ŝnuro nomita "text = 'tiu estas CS50.'"

221
00:13:20,270 --> 00:13:22,730
>> Nu, do por
aliri ĉiu karaktero,

222
00:13:22,730 --> 00:13:25,880
ĉiuj mi devi fari kun
la variablo teksto

223
00:13:25,880 --> 00:13:31,660
diri bone, teksto ĉe indekso nulo, ke
respondas al ĉefurbo T. Teksto indekso

224
00:13:31,660 --> 00:13:35,100
respondas al la minuskla h.

225
00:13:35,100 --> 00:13:38,110
Alia utila funkcio estas
la kordo longo funkcio.

226
00:13:38,110 --> 00:13:40,760
Tiel pasante en cxeno al
domadministranto revenos

227
00:13:40,760 --> 00:13:44,610
entjera, la longo de tiu linio.

228
00:13:44,610 --> 00:13:47,060
>> Nun ke ni jam parolis pri
ĉiuj tiuj malsamaj elementoj,

229
00:13:47,060 --> 00:13:48,540
ni metis ilin reen kune.

230
00:13:48,540 --> 00:13:52,210
Tiel reveni al ĉu mia _pseudocode_
kodo aŭ via _pseudocode_

231
00:13:52,210 --> 00:13:55,920
kaj iri tra kaj fari certe ke vi
scipovas fari ĉiu unuopa afero.

232
00:13:55,920 --> 00:14:01,520
Akiranta la ŝlosilon uzante argc kaj argv,
turninte la ŝlosilon en entjero, a

233
00:14:01,520 --> 00:14:06,840
al mi, instigante por teksto,
GetString kaj tiam ripetanta

234
00:14:06,840 --> 00:14:09,590
super ĉiu karaktero en
la teksto kordoj,

235
00:14:09,590 --> 00:14:14,910
konservante la kazon de ĉiu karaktero
kaj sxangxigxantaj tiu karaktero de la ŝlosilo,

236
00:14:14,910 --> 00:14:17,520
certigante ke vi estas
ĉirkaŭvolvinte ĉirkaŭ la alfabeto,

237
00:14:17,520 --> 00:14:20,850
fine presi ke ĉifrita teksto.

238
00:14:20,850 --> 00:14:25,470
Mia nomo estas Amila, kaj tio estis Cezaro.

239
00:14:25,470 --> 00:14:28,448

