1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Аміла: Давайце вырашаць Цэзар.

3
00:00:02,270 --> 00:00:06,110
У Цэзара, мы дазваляем карыстачу
для кадавання сакрэтнае паведамленне.

4
00:00:06,110 --> 00:00:09,780
Так што давайце ныраць прама і глядзець
у нашых да-DOS для гэтай задачы.

5
00:00:09,780 --> 00:00:12,210
Такім чынам, па-першае, мы атрымліваем ключ ад карыстальніка.

6
00:00:12,210 --> 00:00:15,210
Тады мы атрымаем адкрыты тэкст
што яны хочуць, каб кадзіраваць.

7
00:00:15,210 --> 00:00:21,380
Пасля гэтага, мы зашыфраваць гэта для іх,
і, нарэшце, мы выводзім іх шифротекста.

8
00:00:21,380 --> 00:00:23,600
>> Такім чынам, давайце пачнем з прыкладу.

9
00:00:23,600 --> 00:00:26,920
Дапусцім, вы хацелі, каб кадзіраваць
Ўвесь алфавіт з ключом двух.

10
00:00:26,920 --> 00:00:31,360
Ну, увесь ваш алфавіт будзе
проста быць ссунутыя на лісты.

11
00:00:31,360 --> 00:00:37,060
Такім чынам, будзе кадзіраваць C, B да
D, З да Е, гэтак далей і да таго падобнае,

12
00:00:37,060 --> 00:00:42,470
пакуль вы не атрымаеце да X, які кадуе да Z
або Зэт, у залежнасці ад таго, адкуль вы.

13
00:00:42,470 --> 00:00:47,445
Тады Y будзе затым перакласці ўсю дарогу,
абгарнуць вакол алфавіту, каб дабрацца да A,

14
00:00:47,445 --> 00:00:53,256
а затым, нарэшце, апошняя літара
алфавіту, Z, Зэт, будзе кадзіраваць B.

15
00:00:53,256 --> 00:00:54,660
>> Вы атрымалі гэта?

16
00:00:54,660 --> 00:00:56,380
Давайце паглядзім на некаторыя прыклады.

17
00:00:56,380 --> 00:01:00,540
Першы прыклад тут вельмі падобны
да таго, што мы толькі што апісана вышэй.

18
00:01:00,540 --> 00:01:05,560
Так што калі я закадаваць некаторую секцыю
алфавіт, А праз L, з дапамогай ключа з двух,

19
00:01:05,560 --> 00:01:09,760
тады я проста атрымаць ўся мая
алфавіт ссунутыя две буквы.

20
00:01:09,760 --> 00:01:12,230
>> Тады, у маім наступным прыкладзе,
ключ ўсё яшчэ два,

21
00:01:12,230 --> 00:01:15,080
так што вы павінны ведаць, па-ранейшаму
якія літары чакаць.

22
00:01:15,080 --> 00:01:16,400
Але вось гэта фраза.

23
00:01:16,400 --> 00:01:18,100
Гэта CS50.

24
00:01:18,100 --> 00:01:21,090
Такім чынам, вы заўважылі, што я
захаваць выпадак маіх лістоў,

25
00:01:21,090 --> 00:01:25,600
таму любыя загалоўныя літары таксама
загалоўныя літары ў зашыфраваным тэксце.

26
00:01:25,600 --> 00:01:27,800
І любы ніжні рэгістр
літары ў незашыфраваным

27
00:01:27,800 --> 00:01:30,640
Таксама ў ніжнім рэгістры
літары ў зашыфраваным тэксце.

28
00:01:30,640 --> 00:01:34,020
Але я трымаю лісты
і любыя клічнікі

29
00:01:34,020 --> 00:01:37,610
або любыя іншыя знакі пунктуацыі тое ж самае.

30
00:01:37,610 --> 00:01:40,360
>> Так што цяпер у нас ёсць пачуццё
за тое, як працуе праграма,

31
00:01:40,360 --> 00:01:43,890
не саромейцеся ісці працаваць яшчэ трохі
прыклады самастойна, калі вы хочаце.

32
00:01:43,890 --> 00:01:47,072
Давайце пачнем з атрыманнем
ключ ад карыстальніка.

33
00:01:47,072 --> 00:01:48,780
Традыцыйна, з
іншыя праблемы, мы

34
00:01:48,780 --> 00:01:51,450
прывыклі да атрымання
любыя лічбы, якія мы

35
00:01:51,450 --> 00:01:54,710
трэба шляхам падказкі карыстачу
з функцыяй GetInt.

36
00:01:54,710 --> 00:01:58,850
Але гэтым разам мы на самай справе адбываецца
выкарыстоўваць аргумент каманднага радка

37
00:01:58,850 --> 00:02:01,760
і новая функцыя называецца atoi.

38
00:02:01,760 --> 00:02:05,130
>> Пры запуску асноўнай
Праграма ў С, то яна

39
00:02:05,130 --> 00:02:08,500
прымае ў двух parameters--
INT ARGC, які

40
00:02:08,500 --> 00:02:11,670
гэты лік аргументаў
прайшло, і затым

41
00:02:11,670 --> 00:02:15,920
ARGV, масіў радкоў, які змяшчае
спіс усіх аргументаў

42
00:02:15,920 --> 00:02:16,740
прайшло.

43
00:02:16,740 --> 00:02:19,740
Вы відавочна не маюць
аб'явіць гэтыя зменныя.

44
00:02:19,740 --> 00:02:22,700
Яны разлічаны для
Вы кампілятарам.

45
00:02:22,700 --> 00:02:28,160
Правільнае выкарыстанне для гэтага было б
для ARGC быць у дадзеным выпадку два,

46
00:02:28,160 --> 00:02:32,630
таму што карыстальнік павінен прайсці ў
выклік праграмы, ./caesar,

47
00:02:32,630 --> 00:02:35,570
а затым ключ,
якую б лічбу яны жадаюць.

48
00:02:35,570 --> 00:02:39,920
Такім чынам, гэта азначае, што ARGC павінна быць два
для таго, каб сапраўднага выкарыстання Цэзара

49
00:02:39,920 --> 00:02:41,680
для выканання.

50
00:02:41,680 --> 00:02:43,590
>> Такім чынам, давайце разгледзім прыклад.

51
00:02:43,590 --> 00:02:47,760
Скажам, я ўжо напісаў і
склаў праграму пад назвай Бластоф.

52
00:02:47,760 --> 00:02:52,670
Так што, калі я пабег у камандным радку
./blastoff Rocket Team, ну, тады,

53
00:02:52,670 --> 00:02:57,750
ARGC бы тры, таму што я
прайшло ў трох розных аргументаў.

54
00:02:57,750 --> 00:02:59,830
Тады ARGV будзе выглядаць наступным чынам.

55
00:02:59,830 --> 00:03:03,750
Гэта масіў, і гэта было б
ўтрымліваюць кожны з трох радкоў.

56
00:03:03,750 --> 00:03:09,640
./blastoff ў першым індэкса, каманда
у наступным, і ракеты ў апошні.

57
00:03:09,640 --> 00:03:11,610
>> Давайце пагаворым аб масівах на секунду.

58
00:03:11,610 --> 00:03:15,560
Масівы ўяўляюць сабой структуры дадзеных, якія трымаюць
некалькі значэнняў аднаго і таго ж тыпу.

59
00:03:15,560 --> 00:03:19,980
Гэта можа спатрэбіцца, калі мы
ёсць спісы цэлых лікаў або радкоў.

60
00:03:19,980 --> 00:03:23,030
Проста памятаеце, у іх ёсць
каб быць таго ж тыпу.

61
00:03:23,030 --> 00:03:25,310
У кампутарнай навуцы, мы
каханне лічачы ад нуля,

62
00:03:25,310 --> 00:03:29,260
так што памятаеце, што масівы
таксама нулявы праіндэксаваныя.

63
00:03:29,260 --> 00:03:34,360
Так што першы элемент майго масіва
будзе індэксам нуль.

64
00:03:34,360 --> 00:03:37,580
Так што ў гэтым выпадку, калі ў мяне ёсць
масіў даўжыні чатыры,

65
00:03:37,580 --> 00:03:41,350
то апошні індэкс устаўленага
Апошні элемент майго масіва

66
00:03:41,350 --> 00:03:44,970
на самай справе будзе
па індэксе тры, а не чатыры.

67
00:03:44,970 --> 00:03:48,880
Таму што памятаеце, што мы
пачаць адлік з нуля.

68
00:03:48,880 --> 00:03:52,530
>> Вось прыклад таго, як вы
можа стварыць масіў самастойна.

69
00:03:52,530 --> 00:03:56,440
Так што сказаць, што я хацеў, каб захаваць мой
тры любімыя назвы сабакі.

70
00:03:56,440 --> 00:03:59,030
Тады я хацеў бы стварыць масіў радкоў.

71
00:03:59,030 --> 00:04:04,450
Таму я хацеў бы абвясціць тып, радок, і
затым змясціць імя масіва, сабакі,

72
00:04:04,450 --> 00:04:06,450
а затым у тых квадраце
дужкі паставіць памер

73
00:04:06,450 --> 00:04:09,260
з array-- у дадзеным выпадку, тры.

74
00:04:09,260 --> 00:04:12,690
>> Так што мая першая запіс будзе
каб сабакі з індэксам нуль,

75
00:04:12,690 --> 00:04:14,750
і што будзе майл.

76
00:04:14,750 --> 00:04:17,850
Тады сабакі з індэксам адной
будзе бесталковай,

77
00:04:17,850 --> 00:04:23,060
дарагая Матывацыйнай сфер асо, а затым апошні
запіс, трэцяя запіс на індэкса два,

78
00:04:23,060 --> 00:04:26,130
будзе міла, салодкі Elphie.

79
00:04:26,130 --> 00:04:28,610
Вы заўважыце, што фармат
для запаўнення гэтага масіва

80
00:04:28,610 --> 00:04:32,150
вельмі падобна, як вы маглі б
аб'явіць любую іншую зменную, у якой

81
00:04:32,150 --> 00:04:36,307
ў вас ёсць імя зменнай, за якой варта
значэнне, якое вы хочаце захоўваць у ім.

82
00:04:36,307 --> 00:04:38,140
Адзінае адрозненне ў
гэты выпадак з'яўляецца тое, што вам

83
00:04:38,140 --> 00:04:42,700
павінны памятаць, каб паставіць індэкс
значэння ў квадратных дужках.

84
00:04:42,700 --> 00:04:46,420
І там у нас ёсць нашы
тры любімыя сабакі.

85
00:04:46,420 --> 00:04:48,780
>> Але, на жаль, прыйшоў час
каб вярнуцца да Цэзару.

86
00:04:48,780 --> 00:04:52,910
Памятаеце, што правільнае выкарыстанне для
карыстальнік будзе праходзіць не толькі ў

87
00:04:52,910 --> 00:04:57,430
назва праграмы ./caesar, але
таксама ключ, што яны хочуць перакласці

88
00:04:57,430 --> 00:04:58,850
іх адкрытага тэксту з дапамогай.

89
00:04:58,850 --> 00:05:01,540
Такім чынам, гэта азначае, што ARGC павінна быць два.

90
00:05:01,540 --> 00:05:07,580
Яны павінны прайсці ў two-- ні больш, ні
менш за два аргументаў каманднага радка.

91
00:05:07,580 --> 00:05:09,050
>> Цяпер, што тычыцца ARGV?

92
00:05:09,050 --> 00:05:12,880
Ну, мы ўжо ведаем, што
масіў будзе мець даўжыню два,

93
00:05:12,880 --> 00:05:15,270
але тое, што змяшчаецца ў кожным элеменце?

94
00:05:15,270 --> 00:05:19,330
Ну, першы элемент
будзе ./caesar,

95
00:05:19,330 --> 00:05:24,190
а затым наступны элемент будзе
ўтрымліваюць ключ, які карыстальнік надрукавалі.

96
00:05:24,190 --> 00:05:27,480
Цяпер, калі яны выкарыстоўвалі яго правільна
для выкарыстання Цэзара,

97
00:05:27,480 --> 00:05:29,350
Затым яны збіраюцца ўвесці нумар.

98
00:05:29,350 --> 00:05:33,260
Але нават калі характар
што яны друкуюць гэты лік,

99
00:05:33,260 --> 00:05:35,790
гэта тыпу дадзеных радка.

100
00:05:35,790 --> 00:05:40,390
>> Дык як жа мы преобразуем, што
радок у цэлы лік?

101
00:05:40,390 --> 00:05:46,680
Так што ў мяне ёсць Num, радок,
якая змяшчае радок 50.

102
00:05:46,680 --> 00:05:49,000
Калі я хачу, каб пераўтварыць яго
ў цэлы лік, то я проста

103
00:05:49,000 --> 00:05:53,340
абвясціць новую зменнай,
цэлага г, называючы atoi.

104
00:05:53,340 --> 00:06:01,160
Я праходжу ў маёй зменнай радкі, Num і
Затым я будзе ўтрымліваць нумар 50.

105
00:06:01,160 --> 00:06:04,350
Пераканайцеся ў тым, каб праверыць мужчыну
старонкі для функцыі atoi

106
00:06:04,350 --> 00:06:07,990
каб праверыць, якая бібліятэка гэта
у, а таксама тое, што сутнасьць яго

107
00:06:07,990 --> 00:06:14,550
вернецца, калі радок, перададзеная
у ўтрымлівае не ўсе нумары.

108
00:06:14,550 --> 00:06:16,950
>> Так што цяпер мы атрымалі
ключ, наступны крок

109
00:06:16,950 --> 00:06:19,430
каб атрымаць адкрыты тэкст ад карыстальніка.

110
00:06:19,430 --> 00:06:21,170
Цяпер, гэта будзе
быць менш складаным

111
00:06:21,170 --> 00:06:23,410
чым навігацыі па
аргументы каманднага радка.

112
00:06:23,410 --> 00:06:26,190
Усё, што нам трэба зрабіць, гэта выклік
функцыя GetString

113
00:06:26,190 --> 00:06:29,660
падказаць карыстачу, каб даць
нам радок, але памятайце,

114
00:06:29,660 --> 00:06:34,090
каб праверыць спецыфікацыі для таго, як мы
можа спатрэбіцца падказаць карыстачу для гэтага.

115
00:06:34,090 --> 00:06:36,420
>> Цяпер мы падышлі да
сэрца problem--

116
00:06:36,420 --> 00:06:38,860
як зашыфраваць адкрыты тэкст.

117
00:06:38,860 --> 00:06:42,830
Ну, па-першае, давайце пагаворым пра тое, як
зашыфраваць адзін знак у той час,

118
00:06:42,830 --> 00:06:47,370
і тады мы будзем вырашаць, як
перабіраць ўвесь адкрыты тэкст.

119
00:06:47,370 --> 00:06:50,440
Я напісаў некаторыя псевдокод
для задачы Цэзара.

120
00:06:50,440 --> 00:06:52,310
Я заклікаю вас
напісаць свой уласны, а таксама.

121
00:06:52,310 --> 00:06:55,900
Ён не можа выглядаць ідэнтычна
маё, і гэта нармальна, але да таго часу,

122
00:06:55,900 --> 00:06:58,640
як агульная ідэя тая ж.

123
00:06:58,640 --> 00:07:00,780
>> Першыя тры крокі
мы ўжо зрабілі.

124
00:07:00,780 --> 00:07:03,100
Мы атрымалі ключ ад
аргумент каманднага радка,

125
00:07:03,100 --> 00:07:05,510
мы ператварылі гэты ключ
ў цэлы лік, і мы

126
00:07:05,510 --> 00:07:09,320
запыт карыстальніка для адкрытага тэксту
што яны хочуць, каб зашыфраваць.

127
00:07:09,320 --> 00:07:12,420
Так тады наступны вялікі кавалак
у тым, што для кожнага знака

128
00:07:12,420 --> 00:07:15,070
у радку адкрытага тэксту,
калі гэта алфавітны,

129
00:07:15,070 --> 00:07:17,750
мы хочам захаваць
яе корпус і зрушыць яго.

130
00:07:17,750 --> 00:07:20,900
Па захаваць справа, што я
азначае, што верхні рэгістр

131
00:07:20,900 --> 00:07:23,580
літары павінны заставацца Upper
Корпус і ўсе літары ніжняга рэгістра

132
00:07:23,580 --> 00:07:25,640
павінны заставацца ў ніжнім рэгістры.

133
00:07:25,640 --> 00:07:29,110
Такім чынам, пасля мы перамяшчаем тыя,
Затым мы выводзім шифротекста.

134
00:07:29,110 --> 00:07:33,100
>> Вось тры функцыі, якія збіраюцца
каб прыйсці ў зручны для гэтай праблемы.

135
00:07:33,100 --> 00:07:38,010
Памятаеце, наверсе, калі я даў
Прыклад для зруху гэта CS50?

136
00:07:38,010 --> 00:07:41,800
Памятаеце, што 50 і
Клічнік ня перакладаў?

137
00:07:41,800 --> 00:07:45,680
Дык як жа мы можам сказаць, ці з'яўляецца мы
неабходна перамясціць ліст ці не?

138
00:07:45,680 --> 00:07:48,650
Ну, "альфа", калі
вы перадаеце яго персанаж,

139
00:07:48,650 --> 00:07:54,850
вяртае ісціну, калі гэты сімвал
гэты ліст і хлусня ў адваротным выпадку.

140
00:07:54,850 --> 00:07:56,870
Каб дапамагчы вам
захаванне капіталізацыі

141
00:07:56,870 --> 00:07:59,750
з'яўляюцца функцыямі "з'яўляецца
верхні "і" ніжэй ".

142
00:07:59,750 --> 00:08:03,350
>> Гэтыя дзве функцыі таксама прымаюць
у адзін знак у якасці ўваходных дадзеных

143
00:08:03,350 --> 00:08:06,580
і вярнуць вам лагічнае значэнне,
сапраўдным або ілжывым

144
00:08:06,580 --> 00:08:11,280
у залежнасці ад таго, што характар
ў верхнім рэгістры або ніжнім рэгістры.

145
00:08:11,280 --> 00:08:14,610
Таму што "зверху" і "з'яўляецца
ніжэй "з'яўляюцца Булевы функцыі,

146
00:08:14,610 --> 00:08:18,660
Гэта азначае, што яны вяртаюць вам лагічнае значэнне,
Вы можаце выкарыстоўваць іх у сваіх умовах.

147
00:08:18,660 --> 00:08:23,490
Дык вось фрагмент кода, які толькі
друкуе ліст, калі гэта ў верхнім рэгістры.

148
00:08:23,490 --> 00:08:27,790
Так што я абвясціў мой характар
лісты ў верхні корпус Зэт

149
00:08:27,790 --> 00:08:33,440
а затым, калі "зверху" вяртаецца
праўда, то я друкую гэты ліст.

150
00:08:33,440 --> 00:08:38,200
>> Вяртаючыся да нашага просты прыклад
зрушваючы алфавіт ключом з двух,

151
00:08:38,200 --> 00:08:41,049
як жа мы на самой справе атрымаць, каб працаваць?

152
00:08:41,049 --> 00:08:45,770
Што ж, атрымліваецца, што персанажы
і цэлыя лікі вельмі цесна звязаныя паміж сабой.

153
00:08:45,770 --> 00:08:48,840
Кожны персанаж мае
цэлае значэнне, звязанае

154
00:08:48,840 --> 00:08:53,260
з ім знаходзіцца ў ASCII графіцы,
дзе ASCII кожнага сімвала

155
00:08:53,260 --> 00:08:55,380
адлюстроўваецца значэнне.

156
00:08:55,380 --> 00:08:58,940
Так што адпавядае верхні рэгістр A
да значэння ASCII 65

157
00:08:58,940 --> 00:09:02,270
і малой а да
Значэнне ASCII з 97.

158
00:09:02,270 --> 00:09:04,940
>> Не саромейцеся глядзець
любы ASCII дыяграмы онлайн

159
00:09:04,940 --> 00:09:07,720
каб убачыць гэтыя каштоўнасці для сябе.

160
00:09:07,720 --> 00:09:12,096
Дык што ж гэта азначае, што мы можам
прымаюць характар ​​верхняга рэгістра A,

161
00:09:12,096 --> 00:09:18,200
дадаць цэлае два да яго, а затым атрымаць
сімвал верхняга рэгістра C у выніку.

162
00:09:18,200 --> 00:09:23,720
Гэта таму, што 65 гадоў ASCII
значэнне капіталу А, плюс 2,

163
00:09:23,720 --> 00:09:29,960
дае нам 67, што адпавядае
характары верхняга рэгістра С.

164
00:09:29,960 --> 00:09:33,480
>> На жаль, справы
не зусім так проста.

165
00:09:33,480 --> 00:09:36,980
У нас ёсць раўнанне,
мы павінны разгледзець.

166
00:09:36,980 --> 00:09:43,590
Тут ён кажа пра тое, што г-й шифротекста
літара адпавядае г-ы адкрыты тэкст

167
00:09:43,590 --> 00:09:48,900
ліст, плюс key--
усё гэта модульная 26.

168
00:09:48,900 --> 00:09:50,810
Чаму гэта так?

169
00:09:50,810 --> 00:09:55,430
Давайце вернемся да нашага прыкладу з
да таго, дзе капітал А, плюс 2,

170
00:09:55,430 --> 00:09:57,590
дае нам капітал C.

171
00:09:57,590 --> 00:10:01,870
>> Такім чынам, ужываючы ўраўненні,
спецыфікацыя дае нам,

172
00:10:01,870 --> 00:10:06,660
то давайце возьмем капітал A
плюс 2 і мод, які на 26.

173
00:10:06,660 --> 00:10:10,730
Так капітал А, калі я паклаў яго ў
гэтыя адзінкавыя двукоссі,

174
00:10:10,730 --> 00:10:14,010
дазваляе мне разглядаць яго як
цэлы лік, так што дазваляе

175
00:10:14,010 --> 00:10:17,500
мне кінуць яго ў ASCII-значэння, 65.

176
00:10:17,500 --> 00:10:20,080
65 плюс 2 67.

177
00:10:20,080 --> 00:10:25,210
67 мод 26 дае нам 15,
але гэта на самай справе не

178
00:10:25,210 --> 00:10:32,590
мае сэнс, таму што мы ведаем, што
капітал C значэнне ASCII складае 67, а не 15.

179
00:10:32,590 --> 00:10:35,580
Так як жа нам прымірыць гэта?

180
00:10:35,580 --> 00:10:39,840
>> Ну, тут я хацеў бы пастуляваць
Паняцце алфавітным паказальнікам.

181
00:10:39,840 --> 00:10:44,010
Такім чынам, мы ўжо казалі пра тое, як
кожны знак мае ASCII-значэнне,

182
00:10:44,010 --> 00:10:48,810
але я хацеў бы сказаць, ну, давайце
думаць пра кожны знак, які мае таксама

183
00:10:48,810 --> 00:10:52,230
алфавітны паказальнік,
дзе А, напрыклад,

184
00:10:52,230 --> 00:10:58,800
як першая літара алфавіту,
мае алфавітны паказальнік нуля.

185
00:10:58,800 --> 00:11:02,070
Такім чынам, цяпер давайце выкарыстоўваецца і ў дачыненні
такое ж раўнанне, як і раней,

186
00:11:02,070 --> 00:11:05,040
але з дапамогай алфавітнага паказальніка.

187
00:11:05,040 --> 00:11:07,810
>> Такім чынам, роўная нулю, так як мы вызначылі.

188
00:11:07,810 --> 00:11:15,640
Такім чынам, тое, узяўшы нуль плюс два, па модулю 26,
гэта два, па модулю 26, які дае нам два.

189
00:11:15,640 --> 00:11:18,780
І добра, у тэрмінах
алфавітны паказальнік,

190
00:11:18,780 --> 00:11:23,930
C з'яўляецца трэцяя літара ў
алфавіт, так што будзе адпавядаць

191
00:11:23,930 --> 00:11:26,290
да алфавітным паказальніку двух.

192
00:11:26,290 --> 00:11:29,850
Такім чынам, здаецца, што з дапамогай
алфавітны паказальнік у гэтым выпадку

193
00:11:29,850 --> 00:11:32,840
на самай справе дае нам правільны вынік.

194
00:11:32,840 --> 00:11:35,020
>> Так што цяпер давайце праверым на
см, калі раўнанне работ

195
00:11:35,020 --> 00:11:37,210
з алфавітным паказальнікам.

196
00:11:37,210 --> 00:11:42,540
алфавітны паказальнік Y з'яўляецца 24, як
другое месца апошняй літары ў алфавіце.

197
00:11:42,540 --> 00:11:46,520
Такім чынам 24 плюс наш
Ключ двух дае нам 26.

198
00:11:46,520 --> 00:11:54,750
26 мод 26 дае нам 0, што, на шчасце для
нас, і ёсць алфавітны паказальнік для А.

199
00:11:54,750 --> 00:11:59,100
Такім чынам, мы спадзяемся, што дастаткова таго, што доказ
алфавітны індэксны метад працуе.

200
00:11:59,100 --> 00:12:03,180
Калі няма, не саромейцеся паспрабаваць
некаторыя прыклады самастойна.

201
00:12:03,180 --> 00:12:08,030
>> Для таго, каб належным чынам абгарнуць вакол
алфавіт і прымяніць раўнанне Цэзар,

202
00:12:08,030 --> 00:12:11,280
то мы ведаем, што нам трэба
мець справу з літарнымі індэксамі.

203
00:12:11,280 --> 00:12:15,130
Але мы пачынаем з ASCII
значэння, і толькі потым

204
00:12:15,130 --> 00:12:18,530
мы затым пераўтварыць у
алфавітны паказальнік.

205
00:12:18,530 --> 00:12:23,970
Адтуль, каб надрукаваць, нам трэба
мець справу са значэннямі ASCII зноў.

206
00:12:23,970 --> 00:12:28,350
Такім чынам, мы павінны высветліць, як
перайсці ад ASCII да алфавітнай

207
00:12:28,350 --> 00:12:31,080
і ад алфавітнага ў ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Так што я пакідаю вам, каб высветліць,
шаблон паміж характарам

209
00:12:34,910 --> 00:12:38,590
і яго алфавітны
Індэкс і яго ASCII значэнне.

210
00:12:38,590 --> 00:12:41,530
Такім чынам, памятаеце, што нават калі
гэтую табліцу прама на слайдзе

211
00:12:41,530 --> 00:12:45,630
паказвае, загалоўныя літары, мы таксама
павінны разгледзець пытанне аб мэтазгоднасці або няма

212
00:12:45,630 --> 00:12:48,915
ўжываецца іншы шаблон
для ніжняга рэгістра.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Так што цяпер, калі мы высветлілі,
як перамясціць адзін знак,

215
00:12:55,840 --> 00:13:02,200
то ўсё, што мы павінны зрабіць, гэта шкала,
каб ісці праз увесь тэкст.

216
00:13:02,200 --> 00:13:04,260
Такім чынам, зыходны тэкст з'яўляецца радком.

217
00:13:04,260 --> 00:13:08,210
На шчасце для нас, радок сапраўды
проста масіў сімвалаў,

218
00:13:08,210 --> 00:13:12,150
таму для таго, каб атрымаць доступ кожны знак
радкі, усё, што вам трэба зрабіць,

219
00:13:12,150 --> 00:13:14,270
заключаецца ў выкарыстанні масіва абазначэння.

220
00:13:14,270 --> 00:13:20,270
Скажам, у мяне ёсць пераменная тыпу
радок называецца "тэкст = 'гэта CS50.'"

221
00:13:20,270 --> 00:13:22,730
>> Ну, тады, для таго, каб
доступ кожнага знака,

222
00:13:22,730 --> 00:13:25,880
усё, што я павінен рабіць з
пераменная тэкст

223
00:13:25,880 --> 00:13:31,660
сказаць, добра, тэкст з індэксам нуль, то
адпавядае капіталу Т. Тэкст па індэксе

224
00:13:31,660 --> 00:13:35,100
адзін адпавядае маленькай ч.

225
00:13:35,100 --> 00:13:38,110
Яшчэ адна карысная функцыя
функцыя даўжыні радка.

226
00:13:38,110 --> 00:13:40,760
Так пераходзячы ў радок, каб
што функцыя будзе вяртаць

227
00:13:40,760 --> 00:13:44,610
цэлы лік, даўжыня гэтага радка.

228
00:13:44,610 --> 00:13:47,060
>> Цяпер, калі мы казалі пра
усе гэтыя розныя элементы,

229
00:13:47,060 --> 00:13:48,540
давайце іх разам.

230
00:13:48,540 --> 00:13:52,210
Так што вярнуцца да любой маёй псевдокоде
код або ваш псевдокод

231
00:13:52,210 --> 00:13:55,920
і ісці да канца і пераканайцеся, што вы
ведаюць, як зрабіць любую рэч.

232
00:13:55,920 --> 00:14:01,520
Атрыманне ключа з дапамогай ARGC і ARGV,
паваротам ключа ў цэлы лік,

233
00:14:01,520 --> 00:14:06,840
да I, запытваючы адкрытага тэксту,
GetString, а затым пераборы

234
00:14:06,840 --> 00:14:09,590
над кожным сімвалам ў
незашыфраванымі радок,

235
00:14:09,590 --> 00:14:14,910
захоўваючы выпадак кожнага сімвала
і пераход гэты сімвал з дапамогай ключа,

236
00:14:14,910 --> 00:14:17,520
забеспячэнне таго, каб вы
обцяканьне алфавіту,

237
00:14:17,520 --> 00:14:20,850
нарэшце-то друк, што шифротекста.

238
00:14:20,850 --> 00:14:25,470
Мяне клічуць аміла, і гэта быў Цэзар.

239
00:14:25,470 --> 00:14:28,448

