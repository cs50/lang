1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Vamos abordar César.

3
00:00:02,270 --> 00:00:06,110
Em César, que permitem que o usuário
para codificar uma mensagem secreta.

4
00:00:06,110 --> 00:00:09,780
Então, vamos mergulhar na direita e olhar
em nossas to-dos para este problema.

5
00:00:09,780 --> 00:00:12,210
Então, primeiro, temos a chave do usuário.

6
00:00:12,210 --> 00:00:15,210
Então, temos o texto plano
que deseja codificar.

7
00:00:15,210 --> 00:00:21,380
Depois disso, nós cifrar-lo para eles,
e, finalmente, imprimir seu texto cifrado.

8
00:00:21,380 --> 00:00:23,600
>> Então, vamos começar com um exemplo.

9
00:00:23,600 --> 00:00:26,920
Digamos que você queria para codificar o
toda alfabeto com uma chave de duas.

10
00:00:26,920 --> 00:00:31,360
Bem, todo o seu alfabeto seria
apenas ser deslocado para letras.

11
00:00:31,360 --> 00:00:37,060
Assim, um iria codificar para C, B para
D, C e E, assim por diante e assim por diante,

12
00:00:37,060 --> 00:00:42,470
até chegar ao X, que codifica a Z
ou zed, dependendo de onde você é.

13
00:00:42,470 --> 00:00:47,445
Então Y, então, mudar toda a maneira,
envolver em torno do alfabeto para chegar a A,

14
00:00:47,445 --> 00:00:53,256
e, em seguida, finalmente, a última letra da
alfabeto, Z, zed, que codificam para B.

15
00:00:53,256 --> 00:00:54,660
>> Você entendeu?

16
00:00:54,660 --> 00:00:56,380
Vejamos alguns exemplos.

17
00:00:56,380 --> 00:01:00,540
O primeiro exemplo é muito semelhante
ao que nós apenas explicado acima.

18
00:01:00,540 --> 00:01:05,560
Então, se eu codificar alguma seção do
alfabeto, de A a G, por uma chave de duas,

19
00:01:05,560 --> 00:01:09,760
então eu só pegar minha inteira
alfabeto deslocou duas cartas.

20
00:01:09,760 --> 00:01:12,230
>> Então, no meu próximo exemplo,
a chave é ainda dois,

21
00:01:12,230 --> 00:01:15,080
assim você ainda deve saber
que as letras que esperar.

22
00:01:15,080 --> 00:01:16,400
Mas aqui é uma frase.

23
00:01:16,400 --> 00:01:18,100
Este é CS50.

24
00:01:18,100 --> 00:01:21,090
Então você vai perceber que eu
preservar o caso de minhas cartas,

25
00:01:21,090 --> 00:01:25,600
por isso todas as letras maiúsculas são também
letras maiúsculas no texto cifrado.

26
00:01:25,600 --> 00:01:27,800
E qualquer minúsculas
letras no texto simples

27
00:01:27,800 --> 00:01:30,640
também são minúsculas
letras no texto cifrado.

28
00:01:30,640 --> 00:01:34,020
Mas eu continuo as letras
e quaisquer pontos de exclamação

29
00:01:34,020 --> 00:01:37,610
ou qualquer outro tipo de pontuação da mesma.

30
00:01:37,610 --> 00:01:40,360
>> Portanto, agora que temos um senso
de como o programa funciona,

31
00:01:40,360 --> 00:01:43,890
sinta-se livre para ir correr um pouco mais
exemplos de seu próprio país, se desejar.

32
00:01:43,890 --> 00:01:47,072
Vamos começar com a obtenção
a chave do utilizador.

33
00:01:47,072 --> 00:01:48,780
Tradicionalmente, com
outros problemas, nós temos

34
00:01:48,780 --> 00:01:51,450
foi acostumado a obter
todos os números que nós

35
00:01:51,450 --> 00:01:54,710
precisa de avisar o usuário
com a getInt função.

36
00:01:54,710 --> 00:01:58,850
Mas desta vez nós estamos indo realmente
usar o argumento de linha de comando

37
00:01:58,850 --> 00:02:01,760
e uma nova função chamada atoi.

38
00:02:01,760 --> 00:02:05,130
>> Quando você executa o principal
programa em C, então

39
00:02:05,130 --> 00:02:08,500
leva em dois parameters--
int argc, que

40
00:02:08,500 --> 00:02:11,670
é o número de argumentos
transmitido, e então

41
00:02:11,670 --> 00:02:15,920
argv, uma matriz de strings que contém
uma lista de todos os argumentos

42
00:02:15,920 --> 00:02:16,740
passado.

43
00:02:16,740 --> 00:02:19,740
Você não tem explicitamente
para declarar essas variáveis.

44
00:02:19,740 --> 00:02:22,700
Eles estão computados para
você pelo compilador.

45
00:02:22,700 --> 00:02:28,160
uso correto para isso seria
argc para ser duas neste caso,

46
00:02:28,160 --> 00:02:32,630
porque o usuário tem de passar em
a chamada para o programa, ./caesar,

47
00:02:32,630 --> 00:02:35,570
e, em seguida, a tecla,
qualquer número que desejar.

48
00:02:35,570 --> 00:02:39,920
Então isso significa que argc deve ser dois
Para que uma utilização válida de César

49
00:02:39,920 --> 00:02:41,680
para ser executado.

50
00:02:41,680 --> 00:02:43,590
>> Então, vamos olhar um exemplo.

51
00:02:43,590 --> 00:02:47,760
Digamos que eu já escrevi e
compilado um programa chamado blastoff.

52
00:02:47,760 --> 00:02:52,670
Então, se eu corri na linha de comando
./blastoff Equipe Rocket, bem, então,

53
00:02:52,670 --> 00:02:57,750
argc seriam três, porque eu
passados ​​em três argumentos distintos.

54
00:02:57,750 --> 00:02:59,830
Então argv ficaria assim.

55
00:02:59,830 --> 00:03:03,750
É uma matriz, e seria
conter cada uma das três cordas.

56
00:03:03,750 --> 00:03:09,640
./blastoff no primeiro índice, equipe
no próximo, e foguete no último.

57
00:03:09,640 --> 00:03:11,610
>> Vamos falar sobre matrizes para um segundo.

58
00:03:11,610 --> 00:03:15,560
Matrizes são estruturas de dados que armazenam
vários valores do mesmo tipo.

59
00:03:15,560 --> 00:03:19,980
Isto pode vir a calhar quando
têm listas de números inteiros ou strings.

60
00:03:19,980 --> 00:03:23,030
Basta lembrar que eles têm
para ser do mesmo tipo.

61
00:03:23,030 --> 00:03:25,310
Na ciência da computação, nós
amor contando a partir de zero,

62
00:03:25,310 --> 00:03:29,260
então lembre-se que as matrizes
também estão com índice zero.

63
00:03:29,260 --> 00:03:34,360
Assim, o primeiro elemento da minha matriz
vai ser no índice zero.

64
00:03:34,360 --> 00:03:37,580
Portanto, neste caso, quando tenho
uma matriz de comprimento de quatro,

65
00:03:37,580 --> 00:03:41,350
em seguida, o último índice do
último elemento da minha matriz

66
00:03:41,350 --> 00:03:44,970
é realmente vai ser
no índice três, não quatro.

67
00:03:44,970 --> 00:03:48,880
Porque lembre-se, nós
começar a contar em zero.

68
00:03:48,880 --> 00:03:52,530
>> Aqui está um exemplo de como você
pode criar uma matriz de seu próprio país.

69
00:03:52,530 --> 00:03:56,440
Então, digamos que eu queria para guardar a minha
três nomes favoritos do cão.

70
00:03:56,440 --> 00:03:59,030
Então eu iria criar uma matriz de strings.

71
00:03:59,030 --> 00:04:04,450
Assim, gostaria de declarar o tipo, corda, e
em seguida, colocar o nome da matriz, cães,

72
00:04:04,450 --> 00:04:06,450
e, em seguida, os quadrados
suportes de colocar o tamanho

73
00:04:06,450 --> 00:04:09,260
do array-- neste caso, três.

74
00:04:09,260 --> 00:04:12,690
>> Assim, a minha primeira entrada vai
para ser cães no índice zero,

75
00:04:12,690 --> 00:04:14,750
e que vai ser Milo.

76
00:04:14,750 --> 00:04:17,850
Então cães em um índice de
vai ser pateta,

77
00:04:17,850 --> 00:04:23,060
querida Mochi, e, em seguida, o último
entrada, a terceira entrada no índice dois,

78
00:04:23,060 --> 00:04:26,130
vai ser bonito, doce Elphie.

79
00:04:26,130 --> 00:04:28,610
Você vai notar que o formato
para preencher essa matriz

80
00:04:28,610 --> 00:04:32,150
é muito parecido como você pode
declarar qualquer outra variável, onde

81
00:04:32,150 --> 00:04:36,307
você tem o nome da variável seguido por
o valor que você deseja armazenados nele.

82
00:04:36,307 --> 00:04:38,140
A única diferença em
Neste caso é que você

83
00:04:38,140 --> 00:04:42,700
tem que se lembrar de colocar o índice
do valor entre colchetes.

84
00:04:42,700 --> 00:04:46,420
E aí temos o nosso
três cães favoritos.

85
00:04:46,420 --> 00:04:48,780
>> Mas, infelizmente, é hora
para voltar a César.

86
00:04:48,780 --> 00:04:52,910
Lembre-se que o uso correto para o
usuário vai estar passando, não só

87
00:04:52,910 --> 00:04:57,430
o nome do programa ./caesar, mas
também a chave que eles querem mudar

88
00:04:57,430 --> 00:04:58,850
seu texto simples por.

89
00:04:58,850 --> 00:05:01,540
Então isso significa que argc deve ser dois.

90
00:05:01,540 --> 00:05:07,580
Eles devem passar em dois-- nem mais, nem
menos de dois argumentos de linha de comando.

91
00:05:07,580 --> 00:05:09,050
>> Agora, que tal argv?

92
00:05:09,050 --> 00:05:12,880
Bem, já sabemos que a
matriz vai ser de comprimento dois,

93
00:05:12,880 --> 00:05:15,270
mas o que está contido em cada elemento?

94
00:05:15,270 --> 00:05:19,330
Bem, o primeiro elemento
vai ser ./caesar,

95
00:05:19,330 --> 00:05:24,190
e, em seguida, o próximo elemento vai
conter a chave que o usuário digitou.

96
00:05:24,190 --> 00:05:27,480
Agora, se eles usaram-lo corretamente
para o uso de César,

97
00:05:27,480 --> 00:05:29,350
em seguida, eles vão para digitar um número.

98
00:05:29,350 --> 00:05:33,260
Mas mesmo que o personagem
que tipo é um número,

99
00:05:33,260 --> 00:05:35,790
é do tipo string de dados.

100
00:05:35,790 --> 00:05:40,390
>> Então, como vamos converter essa
string para um inteiro?

101
00:05:40,390 --> 00:05:46,680
Então, dizer que tenho num, uma corda,
que contém a cadeia 50.

102
00:05:46,680 --> 00:05:49,000
Se eu quiser converter esse
para um inteiro, então eu simplesmente

103
00:05:49,000 --> 00:05:53,340
declarar uma nova variável, um
inteiro I, chamando atoi.

104
00:05:53,340 --> 00:06:01,160
Eu passar no meu variável de cadeia, num, e
então eu conterá então o número 50.

105
00:06:01,160 --> 00:06:04,350
Certifique-se de verificar o homem
páginas para a função atoi

106
00:06:04,350 --> 00:06:07,990
para verificar qual biblioteca é
no, bem como o valor que

107
00:06:07,990 --> 00:06:14,550
voltará se a string passada
se em não conter todos os números.

108
00:06:14,550 --> 00:06:16,950
>> Portanto, agora que temos obtido
a chave, a próxima etapa

109
00:06:16,950 --> 00:06:19,430
é fazer com que o texto original do usuário.

110
00:06:19,430 --> 00:06:21,170
Agora, isso vai
ser menos complicada

111
00:06:21,170 --> 00:06:23,410
do que navegar ao redor do
argumentos de linha de comando.

112
00:06:23,410 --> 00:06:26,190
Tudo o que temos a fazer é chamar
a função getString

113
00:06:26,190 --> 00:06:29,660
para pedir ao utilizador para dar
-nos uma corda, mas lembre-se

114
00:06:29,660 --> 00:06:34,090
para verificar as especificações de como nós
pode querer para solicitar ao usuário para isso.

115
00:06:34,090 --> 00:06:36,420
>> Agora chegamos à
coração do problema--

116
00:06:36,420 --> 00:06:38,860
como cifrar o texto plano.

117
00:06:38,860 --> 00:06:42,830
Bem, em primeiro lugar, vamos falar sobre como
para cifrar um carácter de cada vez,

118
00:06:42,830 --> 00:06:47,370
e depois vamos abordar como
iterar sobre todo o texto simples.

119
00:06:47,370 --> 00:06:50,440
Eu escrevi alguns pseudocódigo
para o problema de César.

120
00:06:50,440 --> 00:06:52,310
Encorajo-vos a
escrever o seu próprio bem.

121
00:06:52,310 --> 00:06:55,900
Pode não parecer idêntico à
meu, e isso é OK, mas contanto

122
00:06:55,900 --> 00:06:58,640
como a ideia geral é a mesma.

123
00:06:58,640 --> 00:07:00,780
>> Os três primeiros passos
já fizemos.

124
00:07:00,780 --> 00:07:03,100
Nós começamos a chave
o argumento de linha de comando,

125
00:07:03,100 --> 00:07:05,510
nós transformamos essa chave
em um número inteiro, e nós

126
00:07:05,510 --> 00:07:09,320
solicitado ao utilizador para o texto simples
que querem cifrar.

127
00:07:09,320 --> 00:07:12,420
Então a próxima grande pedaço
é que, para cada caractere

128
00:07:12,420 --> 00:07:15,070
na seqüência de texto simples,
se é alfabética,

129
00:07:15,070 --> 00:07:17,750
queremos preservar
seu caso e transferi-lo.

130
00:07:17,750 --> 00:07:20,900
Ao preservar a caso, o que eu
quero dizer é que todas as letras maiúsculas

131
00:07:20,900 --> 00:07:23,580
letras deve permanecer superior
caso e todas as letras minúsculas

132
00:07:23,580 --> 00:07:25,640
deve permanecer em minúsculas.

133
00:07:25,640 --> 00:07:29,110
Então, em seguida, depois de mudar aqueles,
então nós imprimir o texto cifrado.

134
00:07:29,110 --> 00:07:33,100
>> Aqui estão três funções que vão
de vir a calhar para este problema.

135
00:07:33,100 --> 00:07:38,010
Recorde-se acima quando eu dei o
exemplo para deslocar este é CS50?

136
00:07:38,010 --> 00:07:41,800
Lembre-se que o 50 eo
ponto de exclamação não mudar?

137
00:07:41,800 --> 00:07:45,680
Então, como podemos dizer se nós
precisa mudar uma letra ou não?

138
00:07:45,680 --> 00:07:48,650
Bem, "é alfa," se
você passá-lo um personagem,

139
00:07:48,650 --> 00:07:54,850
retornará true se esse personagem
é uma letra e falso caso contrário.

140
00:07:54,850 --> 00:07:56,870
Para ajudá-lo com
preservando capitalização

141
00:07:56,870 --> 00:07:59,750
são as funções "está
superior "e" inferior é. "

142
00:07:59,750 --> 00:08:03,350
>> Estas duas funções também tomar
em um único caractere como entrada

143
00:08:03,350 --> 00:08:06,580
e retornar um booleano,
verdadeiro ou falso

144
00:08:06,580 --> 00:08:11,280
dependendo se esse personagem
é maiúsculas ou minúsculas.

145
00:08:11,280 --> 00:08:14,610
Porque "é superior" e "é
inferior "são funções booleanas,

146
00:08:14,610 --> 00:08:18,660
o que significa que eles retornam um booleano,
você pode usá-los em suas condições.

147
00:08:18,660 --> 00:08:23,490
Então aqui está um trecho de código que só
imprime uma carta se é maiúscula.

148
00:08:23,490 --> 00:08:27,790
Então eu declarou o meu personagem
carta para ser o caso superior zed

149
00:08:27,790 --> 00:08:33,440
e então, se "é superior" retornos
verdade, então eu imprimir essa letra.

150
00:08:33,440 --> 00:08:38,200
>> Voltando ao nosso exemplo simples de
deslocando o alfabeto por uma chave de duas,

151
00:08:38,200 --> 00:08:41,049
como é que vamos realmente ter que trabalhar?

152
00:08:41,049 --> 00:08:45,770
Bem, acontece que personagens
e inteiros estão intimamente relacionados.

153
00:08:45,770 --> 00:08:48,840
Cada personagem tem uma
valor inteiro associado

154
00:08:48,840 --> 00:08:53,260
com ele encontrada no gráfico ASCII,
onde ASCII de cada personagem

155
00:08:53,260 --> 00:08:55,380
valor é exibido.

156
00:08:55,380 --> 00:08:58,940
Assim, um corresponde um caso superior
para um valor ASCII de 65

157
00:08:58,940 --> 00:09:02,270
e uma minúscula ao
um valor ASCII de 97.

158
00:09:02,270 --> 00:09:04,940
>> Sinta-se livre para olhar para cima
qualquer gráfico ASCII on-line

159
00:09:04,940 --> 00:09:07,720
para ver esses valores para si mesmo.

160
00:09:07,720 --> 00:09:12,096
Então, o que isto significa é que nós podemos
assumir o caráter de maiúsculas A,

161
00:09:12,096 --> 00:09:18,200
adicionar o número inteiro de dois a ela, e em seguida, obter
o caso de caracteres C superior como resultado.

162
00:09:18,200 --> 00:09:23,720
Isso porque 65, o ASCII
valor para o capital de A, mais 2,

163
00:09:23,720 --> 00:09:29,960
dá-nos 67, o que corresponde
ao caráter de maiúsculas C.

164
00:09:29,960 --> 00:09:33,480
>> Infelizmente, as coisas
não bastante ser tão simples.

165
00:09:33,480 --> 00:09:36,980
Nós temos uma equação que
temos de considerar.

166
00:09:36,980 --> 00:09:43,590
Aqui nos diz que o texto cifrado om
letra corresponde ao texto simples om

167
00:09:43,590 --> 00:09:48,900
carta, além da key--
tudo isso, modular 26.

168
00:09:48,900 --> 00:09:50,810
Por que é esse o caso?

169
00:09:50,810 --> 00:09:55,430
Vamos voltar ao nosso exemplo de
antes, onde o capital A, mais 2,

170
00:09:55,430 --> 00:09:57,590
dá-nos de capital C.

171
00:09:57,590 --> 00:10:01,870
>> Assim que a aplicação da equação
a especificação nos dá,

172
00:10:01,870 --> 00:10:06,660
em seguida, vamos dar maiúsculo
além de 2 e mod que 26.

173
00:10:06,660 --> 00:10:10,730
Assim, o capital A, quando eu colocá-lo em
essas aspas,

174
00:10:10,730 --> 00:10:14,010
permite-me a tratá-lo como
um número inteiro, de modo que permite

175
00:10:14,010 --> 00:10:17,500
me para lançá-lo para o seu valor ASCII, 65.

176
00:10:17,500 --> 00:10:20,080
65 + 2 é 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 nos dá 15,
mas isso realmente não

178
00:10:25,210 --> 00:10:32,590
faz sentido, porque sabemos que o
capital de valor ASCII C é de 67, e não 15.

179
00:10:32,590 --> 00:10:35,580
Então, como podemos conciliar isso?

180
00:10:35,580 --> 00:10:39,840
>> Bem, aqui eu gostaria de postular a
noção de um índice alfabético.

181
00:10:39,840 --> 00:10:44,010
Então, nós já falamos sobre como
cada personagem tem seu valor ASCII,

182
00:10:44,010 --> 00:10:48,810
mas eu gostaria de dizer, bem, vamos
pensar em cada personagem também ter

183
00:10:48,810 --> 00:10:52,230
um índice alfabético,
onde A, por exemplo,

184
00:10:52,230 --> 00:10:58,800
como a primeira letra do alfabeto,
tem um índice alfabético de zero.

185
00:10:58,800 --> 00:11:02,070
Então agora vamos aplicar o
mesma equação, como antes,

186
00:11:02,070 --> 00:11:05,040
mas usando um índice alfabético.

187
00:11:05,040 --> 00:11:07,810
>> Então A é zero, como já definido.

188
00:11:07,810 --> 00:11:15,640
Então, em seguida, tendo zero mais dois, mod 26,
que é dois, mod 26, o que nos dá dois.

189
00:11:15,640 --> 00:11:18,780
E bem, em termos de
um índice alfabético,

190
00:11:18,780 --> 00:11:23,930
C é a terceira letra na
alfabeto, de modo que corresponderia

191
00:11:23,930 --> 00:11:26,290
para um índice alfabético de dois.

192
00:11:26,290 --> 00:11:29,850
Assim, parece que a utilização do
índice alfabético, neste caso,

193
00:11:29,850 --> 00:11:32,840
realmente nos dá o resultado correto.

194
00:11:32,840 --> 00:11:35,020
>> Então agora vamos verificar para
ver se as obras de equações

195
00:11:35,020 --> 00:11:37,210
com um índice alfabético.

196
00:11:37,210 --> 00:11:42,540
índice alfabético de Y é de 24 como a
segundo a última letra do alfabeto.

197
00:11:42,540 --> 00:11:46,520
Assim então 24 mais a nossa
chave de dois nos dá 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 nos dá 0, o que, por sorte
nós, é o índice alfabético para A.

199
00:11:54,750 --> 00:11:59,100
Portanto, esperamos que isso é prova suficiente de que
o método índice alfabético funciona.

200
00:11:59,100 --> 00:12:03,180
Se não, sinta-se livre para experimentar
alguns exemplos de seu próprio país.

201
00:12:03,180 --> 00:12:08,030
>> A fim de envolver adequadamente em torno da
alfabeto e aplicar a equação de César,

202
00:12:08,030 --> 00:12:11,280
então sabemos que precisamos
lidar com índices alfabéticos.

203
00:12:11,280 --> 00:12:15,130
Mas vamos começar com ASCII
valores, e só então

204
00:12:15,130 --> 00:12:18,530
nós, em seguida, converter para
o índice alfabético.

205
00:12:18,530 --> 00:12:23,970
De lá, a fim de imprimir, precisamos
para lidar com os valores ASCII novamente.

206
00:12:23,970 --> 00:12:28,350
Então, precisamos descobrir como
ir de ASCII a ordem alfabética

207
00:12:28,350 --> 00:12:31,080
e de alfabética para ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Então eu deixo para você descobrir
o padrão entre um personagem

209
00:12:34,910 --> 00:12:38,590
e os seus alfabética
índice e seu valor ASCII.

210
00:12:38,590 --> 00:12:41,530
Agora, lembre-se que, apesar de
este direito tabela no slide

211
00:12:41,530 --> 00:12:45,630
mostra as letras maiúsculas, nós também
tem que considerar se ou não

212
00:12:45,630 --> 00:12:48,915
um padrão diferente se aplica
para os caracteres minúsculos.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Portanto, agora que nós descobrimos
como mudar um único personagem,

215
00:12:55,840 --> 00:13:02,200
em seguida, todos nós temos que fazer é escala que
-se para ir ao longo de todo o texto plano.

216
00:13:02,200 --> 00:13:04,260
Assim, o texto original é uma string.

217
00:13:04,260 --> 00:13:08,210
Sorte para nós, uma string é realmente
apenas um array de caracteres,

218
00:13:08,210 --> 00:13:12,150
por isso, para acessar cada personagem
de uma cadeia, tudo que você tem a fazer

219
00:13:12,150 --> 00:13:14,270
é usar a notação de matriz.

220
00:13:14,270 --> 00:13:20,270
Digamos que eu tenha uma variável do tipo
string chamada "text =" este é CS50 '. "

221
00:13:20,270 --> 00:13:22,730
>> Pois bem, a fim de
acessar cada personagem,

222
00:13:22,730 --> 00:13:25,880
tudo o que tenho a ver com
O texto variável é

223
00:13:25,880 --> 00:13:31,660
para dizer bem, o texto no índice zero, que
corresponde ao capital T. texto no índice

224
00:13:31,660 --> 00:13:35,100
uma corresponde ao caso inferior h.

225
00:13:35,100 --> 00:13:38,110
Outra função útil é
a função comprimento da corda.

226
00:13:38,110 --> 00:13:40,760
Então, passando em uma string para
que a função irá retornar

227
00:13:40,760 --> 00:13:44,610
um inteiro, o comprimento dessa corda.

228
00:13:44,610 --> 00:13:47,060
>> Agora que nós já conversamos sobre
todos estes elementos diferentes,

229
00:13:47,060 --> 00:13:48,540
vamos juntá-los novamente.

230
00:13:48,540 --> 00:13:52,210
Então, voltar a qualquer meu pseudocódigo
código ou o seu pseudocódigo

231
00:13:52,210 --> 00:13:55,920
e passar por e certifique-se de que você
sabe como fazer cada coisa.

232
00:13:55,920 --> 00:14:01,520
Obtendo a chave usando argc e argv,
girando a chave para um número inteiro, um

233
00:14:01,520 --> 00:14:06,840
para i, alertando para texto simples,
getString, em seguida, a iteração

234
00:14:06,840 --> 00:14:09,590
sobre cada personagem
a cadeia de texto simples,

235
00:14:09,590 --> 00:14:14,910
preservando o caso de cada caractere
e mudando esse caráter pela chave,

236
00:14:14,910 --> 00:14:17,520
garantir que você está
enrolar o alfabeto,

237
00:14:17,520 --> 00:14:20,850
finalmente, imprimir o texto cifrado.

238
00:14:20,850 --> 00:14:25,470
Meu nome é Amila, e esta era César.

239
00:14:25,470 --> 00:14:28,448

