1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> AMILA: Mari kita menangani Caesar.

3
00:00:02,270 --> 00:00:06,110
Dalam Caesar, kami membenarkan pengguna
untuk mengekod mesej rahsia.

4
00:00:06,110 --> 00:00:09,780
Jadi mari kita menyelam kanan dalam dan melihat
pada tugasan kami untuk masalah ini.

5
00:00:09,780 --> 00:00:12,210
Jadi pertama, kita akan mendapat kunci dari pengguna.

6
00:00:12,210 --> 00:00:15,210
Kemudian kami mendapatkan plaintext yang
yang mereka mahu untuk mengekod.

7
00:00:15,210 --> 00:00:21,380
Selepas itu, kami menulis dlm kod untuk mereka,
dan akhirnya kita mencetak tulisan rahsia mereka.

8
00:00:21,380 --> 00:00:23,600
>> Jadi mari kita mulakan dengan contoh.

9
00:00:23,600 --> 00:00:26,920
Katakanlah anda mahu mengekod
abjad keseluruhan dengan kunci dua.

10
00:00:26,920 --> 00:00:31,360
Well, abjad keseluruhan anda akan
hanya akan beralih kepada huruf.

11
00:00:31,360 --> 00:00:37,060
Jadi A akan mengekod kepada C, B untuk
D, C hingga E, sebagainya dan sebagainya,

12
00:00:37,060 --> 00:00:42,470
sehingga anda sampai ke X, yang mengkod ke Z
atau zed, bergantung kepada di mana anda daripada.

13
00:00:42,470 --> 00:00:47,445
Kemudian Y kemudian akan beralih sepanjang jalan,
membungkus abjad untuk sampai ke A,

14
00:00:47,445 --> 00:00:53,256
dan akhirnya surat terakhir
abjad, Z, zed, akan mengekod ke B.

15
00:00:53,256 --> 00:00:54,660
>> Anda mendapat bahawa?

16
00:00:54,660 --> 00:00:56,380
Mari kita lihat beberapa contoh.

17
00:00:56,380 --> 00:01:00,540
Contoh yang pertama di sini adalah hampir sama
dengan apa yang kita hanya diterangkan di atas.

18
00:01:00,540 --> 00:01:05,560
Jadi jika saya mengekod beberapa bahagian daripada
abjad, A hingga L, oleh kunci dua,

19
00:01:05,560 --> 00:01:09,760
maka saya hanya mendapat keseluruhan saya
abjad beralih dua huruf.

20
00:01:09,760 --> 00:01:12,230
>> Kemudian, dalam contoh saya akan datang,
kunci masih dua,

21
00:01:12,230 --> 00:01:15,080
jadi anda masih perlu tahu
yang surat yang diharapkan.

22
00:01:15,080 --> 00:01:16,400
Tetapi di sini ia adalah frasa.

23
00:01:16,400 --> 00:01:18,100
Ini adalah CS50.

24
00:01:18,100 --> 00:01:21,090
Jadi, anda akan notis bahawa saya
memelihara kes surat saya,

25
00:01:21,090 --> 00:01:25,600
jadi apa-apa huruf besar juga
huruf besar dalam tulisan rahsia.

26
00:01:25,600 --> 00:01:27,800
Dan mana-mana huruf kecil
huruf dalam plaintext yang

27
00:01:27,800 --> 00:01:30,640
juga huruf kecil
huruf dalam tulisan rahsia.

28
00:01:30,640 --> 00:01:34,020
Tetapi saya terus huruf
dan apa-apa tanda seru

29
00:01:34,020 --> 00:01:37,610
atau apa-apa tanda baca lain yang sama.

30
00:01:37,610 --> 00:01:40,360
>> Jadi sekarang kita mempunyai perasaan yang
untuk bagaimana program ini berfungsi,

31
00:01:40,360 --> 00:01:43,890
berasa bebas untuk pergi menjalankan beberapa lebih
contoh anda sendiri, jika anda mahu.

32
00:01:43,890 --> 00:01:47,072
Mari kita mulakan dengan mendapatkan
kunci dari pengguna.

33
00:01:47,072 --> 00:01:48,780
Secara tradisinya, dengan
masalah lain, kami telah

34
00:01:48,780 --> 00:01:51,450
sudah biasa dengan mendapat
mana-mana nombor yang kita

35
00:01:51,450 --> 00:01:54,710
perlukan dengan mendorong pengguna
dengan GetInt fungsi.

36
00:01:54,710 --> 00:01:58,850
Tetapi kali ini kita sebenarnya akan
untuk menggunakan hujah baris arahan

37
00:01:58,850 --> 00:02:01,760
dan fungsi baru yang dipanggil atoi.

38
00:02:01,760 --> 00:02:05,130
>> Apabila anda menjalankan utama
program dalam C, maka ia

39
00:02:05,130 --> 00:02:08,500
mengambil masa dalam dua parameters--
int argc, yang

40
00:02:08,500 --> 00:02:11,670
adalah bilangan hujah
diluluskan pada, dan kemudian

41
00:02:11,670 --> 00:02:15,920
argv, pelbagai rentetan yang mengandungi
senarai semua hujah-hujah

42
00:02:15,920 --> 00:02:16,740
berlalu.

43
00:02:16,740 --> 00:02:19,740
Anda tidak jelas mempunyai
untuk mengisytiharkan pembolehubah ini.

44
00:02:19,740 --> 00:02:22,700
Mereka dikira bagi
anda oleh pengkompil.

45
00:02:22,700 --> 00:02:28,160
penggunaan yang betul untuk ini akan menjadi
untuk argc menjadi dua dalam kes ini,

46
00:02:28,160 --> 00:02:32,630
kerana pengguna mempunyai untuk lulus dalam
panggilan untuk program ini, ./caesar,

47
00:02:32,630 --> 00:02:35,570
dan kemudian kunci,
apa bilangan mereka mahu.

48
00:02:35,570 --> 00:02:39,920
Ini bermakna bahawa argc mesti dua
dalam usaha untuk kegunaan yang sah Caesar

49
00:02:39,920 --> 00:02:41,680
yang akan dilaksanakan.

50
00:02:41,680 --> 00:02:43,590
>> Jadi mari kita lihat satu contoh.

51
00:02:43,590 --> 00:02:47,760
Mengatakan saya sudah menulis dan
menyusun program yang dikenali sebagai BlastOff.

52
00:02:47,760 --> 00:02:52,670
Jadi jika saya berlari dalam baris arahan
./blastoff pasukan roket, baik, maka,

53
00:02:52,670 --> 00:02:57,750
argc akan menjadi tiga kerana saya
diluluskan pada tiga hujah yang berbeza.

54
00:02:57,750 --> 00:02:59,830
Kemudian argv akan kelihatan seperti ini.

55
00:02:59,830 --> 00:03:03,750
Ia adalah pelbagai, dan ia akan
mengandungi setiap satu daripada tiga tali.

56
00:03:03,750 --> 00:03:09,640
./blastoff indeks, pasukan pertama
di depan, dan roket di lepas.

57
00:03:09,640 --> 00:03:11,610
>> Mari kita bercakap tentang tatasusunan sekejap.

58
00:03:11,610 --> 00:03:15,560
Tatasusunan adalah struktur data yang memegang
pelbagai nilai dari jenis yang sama.

59
00:03:15,560 --> 00:03:19,980
Ini boleh datang dalam berguna apabila kita
mempunyai senarai integer atau tali.

60
00:03:19,980 --> 00:03:23,030
Hanya ingat mereka mempunyai
menjadi jenis yang sama.

61
00:03:23,030 --> 00:03:25,310
Dalam sains komputer, kita
suka mengira dari sifar,

62
00:03:25,310 --> 00:03:29,260
jadi ingat bahawa tatasusunan
juga sifar diindeks.

63
00:03:29,260 --> 00:03:34,360
Jadi elemen pertama pelbagai saya
akan menjadi pada indeks sifar.

64
00:03:34,360 --> 00:03:37,580
Jadi dalam kes ini, apabila saya mempunyai
pelbagai panjang empat,

65
00:03:37,580 --> 00:03:41,350
maka indeks terakhir
elemen terakhir pelbagai saya

66
00:03:41,350 --> 00:03:44,970
sebenarnya akan menjadi
pada indeks tiga, bukan empat.

67
00:03:44,970 --> 00:03:48,880
Kerana ingat, kita
mula mengira pada sifar.

68
00:03:48,880 --> 00:03:52,530
>> Berikut adalah contoh bagaimana anda
mungkin mewujudkan pelbagai anda sendiri.

69
00:03:52,530 --> 00:03:56,440
Jadi mengatakan saya mahu menyimpan saya
tiga nama anjing kegemaran.

70
00:03:56,440 --> 00:03:59,030
Kemudian saya akan mewujudkan pelbagai rentetan.

71
00:03:59,030 --> 00:04:04,450
Jadi, saya akan mengisytiharkan jenis, tali, dan
kemudian meletakkan nama array, anjing,

72
00:04:04,450 --> 00:04:06,450
dan kemudian di dataran yang
kurungan meletakkan saiz

73
00:04:06,450 --> 00:04:09,260
daripada array-- dalam kes ini, tiga.

74
00:04:09,260 --> 00:04:12,690
>> Jadi kemasukan pertama saya akan
menjadi anjing pada indeks sifar,

75
00:04:12,690 --> 00:04:14,750
dan itu akan menjadi Milo.

76
00:04:14,750 --> 00:04:17,850
Kemudian Anjing pada indeks satu
akan menjadi bodoh,

77
00:04:17,850 --> 00:04:23,060
darling Mochi, dan kemudian yang terakhir
kemasukan, pintu yang ketiga pada indeks dua,

78
00:04:23,060 --> 00:04:26,130
akan menjadi comel, manis Elphie.

79
00:04:26,130 --> 00:04:28,610
Anda akan melihat bahawa format
untuk mengisi dalam pelbagai ini

80
00:04:28,610 --> 00:04:32,150
adalah seperti bagaimana anda boleh
mengisytiharkan mana-mana pembolehubah lain di mana

81
00:04:32,150 --> 00:04:36,307
anda mempunyai nama pembolehubah diikuti oleh
nilai yang anda mahu disimpan di dalamnya.

82
00:04:36,307 --> 00:04:38,140
Satu-satunya perbezaan dalam
kes ini adalah bahawa anda

83
00:04:38,140 --> 00:04:42,700
perlu ingat untuk meletakkan indeks
nilai dalam kurungan persegi.

84
00:04:42,700 --> 00:04:46,420
Dan kita ada kami
tiga anjing kegemaran.

85
00:04:46,420 --> 00:04:48,780
>> Tetapi malangnya, ia adalah masa
untuk kembali kepada Kaisar.

86
00:04:48,780 --> 00:04:52,910
Ingat bahawa penggunaan yang betul bagi
pengguna akan dapat lulus dalam bukan sahaja

87
00:04:52,910 --> 00:04:57,430
nama ./caesar program ini, tetapi
juga kunci yang mereka mahu beralih

88
00:04:57,430 --> 00:04:58,850
plaintext mereka dengan.

89
00:04:58,850 --> 00:05:01,540
Ini bermakna bahawa argc mesti dua.

90
00:05:01,540 --> 00:05:07,580
Mereka mesti lulus dalam two-- tidak lebih, tidak
kurang daripada dua hujah baris arahan.

91
00:05:07,580 --> 00:05:09,050
>> Sekarang, bagaimana pula argv?

92
00:05:09,050 --> 00:05:12,880
Nah, kita sudah tahu bahawa
pelbagai akan menjadi panjang dua,

93
00:05:12,880 --> 00:05:15,270
tetapi apa yang terkandung dalam setiap elemen?

94
00:05:15,270 --> 00:05:19,330
Well, elemen pertama
akan menjadi ./caesar,

95
00:05:19,330 --> 00:05:24,190
dan kemudian elemen seterusnya akan
mengandungi kunci yang pengguna ditaip.

96
00:05:24,190 --> 00:05:27,480
Sekarang, jika mereka menggunakan dengan betul
untuk kegunaan Caesar,

97
00:05:27,480 --> 00:05:29,350
kemudian mereka akan menaip nombor.

98
00:05:29,350 --> 00:05:33,260
Tetapi walaupun watak
bahawa mereka menaip nombor,

99
00:05:33,260 --> 00:05:35,790
ia adalah jenis data rentetan.

100
00:05:35,790 --> 00:05:40,390
>> Jadi bagaimana kita menukar yang
rentetan kepada integer?

101
00:05:40,390 --> 00:05:46,680
Jadi mengatakan saya mempunyai num, rentetan,
yang mengandungi rentetan 50.

102
00:05:46,680 --> 00:05:49,000
Jika saya mahu menukar yang
kepada integer, maka saya hanya

103
00:05:49,000 --> 00:05:53,340
mengisytiharkan pembolehubah baru,
integer i, memanggil atoi.

104
00:05:53,340 --> 00:06:01,160
Saya lulus dalam pembolehubah rentetan saya, num, dan
kemudian saya akan mengandungi nombor 50.

105
00:06:01,160 --> 00:06:04,350
Pastikan untuk memeriksa lelaki itu
muka surat untuk fungsi atoi yang

106
00:06:04,350 --> 00:06:07,990
untuk memeriksa perpustakaan itu
dalam, dan juga apa yang menghargainya

107
00:06:07,990 --> 00:06:14,550
akan kembali jika rentetan diluluskan
dalam tidak mengandungi semua nombor.

108
00:06:14,550 --> 00:06:16,950
>> Jadi sekarang kita telah mendapat
kunci, langkah seterusnya

109
00:06:16,950 --> 00:06:19,430
adalah untuk mendapatkan plaintext dari pengguna.

110
00:06:19,430 --> 00:06:21,170
Sekarang, ini akan
menjadi lebih mudah

111
00:06:21,170 --> 00:06:23,410
daripada mengemudi sekitar
hujah baris arahan.

112
00:06:23,410 --> 00:06:26,190
Apa yang perlu kita lakukan adalah panggilan
fungsi getstring yang

113
00:06:26,190 --> 00:06:29,660
untuk meminta pengguna untuk memberikan
kita rentetan, tetapi ingat

114
00:06:29,660 --> 00:06:34,090
untuk memeriksa spesifikasi untuk bagaimana kita
mungkin mahu meminta pengguna untuk itu.

115
00:06:34,090 --> 00:06:36,420
>> Sekarang kita sampai kepada
tengah-tengah problem-- yang

116
00:06:36,420 --> 00:06:38,860
bagaimana untuk menulis dlm kod plaintext itu.

117
00:06:38,860 --> 00:06:42,830
Well, pertama, mari kita bercakap tentang bagaimana
untuk menulis dlm kod satu aksara pada satu masa,

118
00:06:42,830 --> 00:06:47,370
dan kemudian kami akan menangani bagaimana untuk
melelar atas seluruh plaintext itu.

119
00:06:47,370 --> 00:06:50,440
Saya telah menulis beberapa kod pseudo
untuk masalah Caesar.

120
00:06:50,440 --> 00:06:52,310
Saya menggalakkan anda untuk
tulis sendiri juga.

121
00:06:52,310 --> 00:06:55,900
Ia mungkin tidak kelihatan sama dengan
saya, dan tidak apa-apa, tetapi selagi

122
00:06:55,900 --> 00:06:58,640
sebagai idea umum adalah sama.

123
00:06:58,640 --> 00:07:00,780
>> Tiga langkah pertama
kami telah bekerja di.

124
00:07:00,780 --> 00:07:03,100
Kami telah mendapat kunci dari
hujah baris arahan,

125
00:07:03,100 --> 00:07:05,510
kami telah berpaling kunci yang
ke dalam integer, dan kami telah

126
00:07:05,510 --> 00:07:09,320
mendorong pengguna untuk plaintext yang
bahawa mereka mahu menulis dlm kod.

127
00:07:09,320 --> 00:07:12,420
Oleh itu, maka sebahagian besar yang akan datang
adalah bahawa untuk setiap watak

128
00:07:12,420 --> 00:07:15,070
dalam rentetan plaintext,
jika ia abjad,

129
00:07:15,070 --> 00:07:17,750
kita mahu mengekalkan
kes dan beralih.

130
00:07:17,750 --> 00:07:20,900
Dengan memelihara kes, apa yang saya
maksudkan adalah bahawa semua huruf besar

131
00:07:20,900 --> 00:07:23,580
surat harus kekal atas
kes dan semua huruf kecil

132
00:07:23,580 --> 00:07:25,640
perlu kekal kecil.

133
00:07:25,640 --> 00:07:29,110
Sebab itu selepas kita beralih itu,
maka kita mencetak tulisan rahsia.

134
00:07:29,110 --> 00:07:33,100
>> Berikut adalah tiga fungsi yang akan
datang berguna untuk masalah ini.

135
00:07:33,100 --> 00:07:38,010
Ingat sehingga di atas apabila aku memberikan
contoh untuk beralih ini adalah CS50?

136
00:07:38,010 --> 00:07:41,800
Ingatlah bahawa 50 dan
tanda seru tidak beralih?

137
00:07:41,800 --> 00:07:45,680
Jadi bagaimana kita boleh memberitahu sama ada kita
perlu beralih surat atau tidak?

138
00:07:45,680 --> 00:07:48,650
Nah, "adalah alpha," jika
anda lulus watak,

139
00:07:48,650 --> 00:07:54,850
akan kembali benar jika watak yang
adalah surat dan palsu sebaliknya.

140
00:07:54,850 --> 00:07:56,870
Untuk membantu anda dengan
memelihara permodalan

141
00:07:56,870 --> 00:07:59,750
adalah fungsi "adalah
atas "dan" lebih rendah. "

142
00:07:59,750 --> 00:08:03,350
>> Kedua-dua fungsi juga mengambil
dalam watak tunggal sebagai input

143
00:08:03,350 --> 00:08:06,580
dan anda akan kembali Boolean,
sama ada benar atau palsu

144
00:08:06,580 --> 00:08:11,280
bergantung kepada sama ada watak yang
adalah huruf besar atau huruf kecil.

145
00:08:11,280 --> 00:08:14,610
Kerana "adalah atas" dan "adalah
lebih rendah "adalah fungsi Boolean,

146
00:08:14,610 --> 00:08:18,660
yang bererti bahawa mereka mengembalikan kamu yang Boolean,
anda boleh menggunakan ini dalam keadaan anda.

147
00:08:18,660 --> 00:08:23,490
Jadi di sini adalah coretan kod yang hanya
mencetak surat jika ia huruf besar.

148
00:08:23,490 --> 00:08:27,790
Jadi saya telah diisytiharkan watak saya
bertulis ke kes atas zed

149
00:08:27,790 --> 00:08:33,440
dan kemudian jika "adalah atas" pulangan
benar, maka saya mencetak surat itu.

150
00:08:33,440 --> 00:08:38,200
>> Kembali kepada contoh mudah kami
beralih abjad dengan kunci dua,

151
00:08:38,200 --> 00:08:41,049
bagaimana kita benar-benar mendapatkan yang bekerja?

152
00:08:41,049 --> 00:08:45,770
Nah, ternyata bahawa watak-watak
dan bilangan bulat sangat berkait rapat.

153
00:08:45,770 --> 00:08:48,840
Setiap watak mempunyai
nilai integer yang berkaitan

154
00:08:48,840 --> 00:08:53,260
dengan itu dijumpai di dalam carta ASCII,
mana ASCII setiap watak itu

155
00:08:53,260 --> 00:08:55,380
nilai dipaparkan.

156
00:08:55,380 --> 00:08:58,940
Jadi satu huruf sepadan A
kepada nilai ASCII 65

157
00:08:58,940 --> 00:09:02,270
dan huruf kecil untuk
nilai ASCII 97.

158
00:09:02,270 --> 00:09:04,940
>> Jangan ragu untuk melihat ke atas
mana-mana carta ASCII talian

159
00:09:04,940 --> 00:09:07,720
untuk melihat nilai-nilai ini untuk diri sendiri.

160
00:09:07,720 --> 00:09:12,096
Jadi apa ini bermakna bahawa kita boleh
mengambil watak huruf besar A,

161
00:09:12,096 --> 00:09:18,200
menambah integer dua kepadanya, dan kemudian mendapatkan
watak atas kes C akibat.

162
00:09:18,200 --> 00:09:23,720
Ini kerana 65, ASCII
Nilai untuk modal A, campur 2,

163
00:09:23,720 --> 00:09:29,960
memberikan kita 67, yang sepadan
kepada watak huruf C.

164
00:09:29,960 --> 00:09:33,480
>> Malangnya, perkara
tidak akan cukup menjadi begitu mudah.

165
00:09:33,480 --> 00:09:36,980
Kami mempunyai persamaan yang
kita perlu mempertimbangkan.

166
00:09:36,980 --> 00:09:43,590
Di sini ia memberitahu kita bahawa tulisan rahsia-i
surat sepadan dengan plaintext engan

167
00:09:43,590 --> 00:09:48,900
surat, ditambah key-- yang
semua itu, modular 26.

168
00:09:48,900 --> 00:09:50,810
Mengapa keadaan tersebut berlaku?

169
00:09:50,810 --> 00:09:55,430
Mari kita kembali kepada contoh dari
sebelum ini, di mana modal A, campur 2,

170
00:09:55,430 --> 00:09:57,590
memberikan kita modal C.

171
00:09:57,590 --> 00:10:01,870
>> Jadi menggunakan persamaan yang
spesifikasi yang memberikan kita,

172
00:10:01,870 --> 00:10:06,660
maka mari kita mengambil modal A
ditambah 2 dan mod dengan 26.

173
00:10:06,660 --> 00:10:10,730
Jadi modal A, apabila saya memasukkannya ke dalam
mereka tanda petikan tunggal,

174
00:10:10,730 --> 00:10:14,010
membolehkan saya untuk merawat sebagai
integer, supaya membolehkan

175
00:10:14,010 --> 00:10:17,500
saya melemparkannya kepada nilai ASCII kemuncak, 65.

176
00:10:17,500 --> 00:10:20,080
65 campur 2 ialah 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 memberikan kita 15,
tetapi itu tidak benar-benar

178
00:10:25,210 --> 00:10:32,590
masuk akal kerana kita tahu bahawa
modal C nilai ASCII adalah 67, bukan 15.

179
00:10:32,590 --> 00:10:35,580
Jadi bagaimana kita mendamaikan itu?

180
00:10:35,580 --> 00:10:39,840
>> Nah, di sini saya ingin menempatkan yang
tanggapan indeks mengikut abjad.

181
00:10:39,840 --> 00:10:44,010
Oleh itu, kita telah bercakap tentang bagaimana
setiap watak mempunyai nilai ASCII itu,

182
00:10:44,010 --> 00:10:48,810
tetapi saya ingin berkata, baik, mari kita
berfikir tentang setiap watak juga mempunyai

183
00:10:48,810 --> 00:10:52,230
indeks mengikut abjad,
di mana A misalnya,

184
00:10:52,230 --> 00:10:58,800
sebagai huruf pertama abjad,
mempunyai indeks mengikut abjad sifar.

185
00:10:58,800 --> 00:11:02,070
Jadi sekarang mari kita memohon
Persamaan yang sama seperti sebelum ini,

186
00:11:02,070 --> 00:11:05,040
tetapi menggunakan indeks mengikut abjad.

187
00:11:05,040 --> 00:11:07,810
>> Jadi A adalah sifar, seperti yang kita telah ditakrifkan.

188
00:11:07,810 --> 00:11:15,640
Sebab itu mengambil sifar campur dua, mod 26,
yang dua, mod 26, yang memberikan kita dua.

189
00:11:15,640 --> 00:11:18,780
Dan juga, dari segi
indeks mengikut abjad,

190
00:11:18,780 --> 00:11:23,930
C adalah huruf ketiga dalam
abjad, supaya akan sesuai

191
00:11:23,930 --> 00:11:26,290
kepada indeks abjad dua.

192
00:11:26,290 --> 00:11:29,850
Oleh itu, ia seolah-olah bahawa menggunakan
indeks mengikut abjad dalam kes ini

193
00:11:29,850 --> 00:11:32,840
sebenarnya memberikan kita keputusan yang betul.

194
00:11:32,840 --> 00:11:35,020
>> Jadi sekarang mari kita lihat kepada
melihat jika kerja-kerja persamaan

195
00:11:35,020 --> 00:11:37,210
dengan indeks abjad.

196
00:11:37,210 --> 00:11:42,540
indeks abjad Y adalah 24 sebagai
kedua untuk surat terakhir dalam abjad.

197
00:11:42,540 --> 00:11:46,520
Oleh itu, maka 24 plus kami
utama dua memberikan kita 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 memberikan kita 0, yang, bertuah untuk
kita, adalah indeks abjad untuk A.

199
00:11:54,750 --> 00:11:59,100
Jadi diharapkan itu sudah cukup bahawa bukti
kaedah indeks abjad berfungsi.

200
00:11:59,100 --> 00:12:03,180
Jika tidak, jangan ragu untuk mencuba
beberapa contoh anda sendiri.

201
00:12:03,180 --> 00:12:08,030
>> Untuk betul membalut sekitar
abjad dan menggunakan persamaan Caesar,

202
00:12:08,030 --> 00:12:11,280
maka kita tahu bahawa kita perlu
menangani indeks abjad.

203
00:12:11,280 --> 00:12:15,130
Tetapi kita mulakan dengan ASCII
nilai-nilai, dan hanya kemudian

204
00:12:15,130 --> 00:12:18,530
kita kemudian memeluk
indeks abjad.

205
00:12:18,530 --> 00:12:23,970
Dari situ, untuk mencetak, kita perlu
untuk berurusan dengan nilai ASCII lagi.

206
00:12:23,970 --> 00:12:28,350
Oleh itu, kita perlu memikirkan bagaimana untuk
pergi dari ASCII untuk abjad

207
00:12:28,350 --> 00:12:31,080
dan dari abjad untuk ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Jadi saya serahkan kepada anda untuk memikirkan
corak di antara watak

209
00:12:34,910 --> 00:12:38,590
dan abjad yang
indeks dan nilai ASCII itu.

210
00:12:38,590 --> 00:12:41,530
Sekarang, ingat bahawa walaupun
jadual ini tepat pada slaid

211
00:12:41,530 --> 00:12:45,630
menunjukkan huruf besar, kami juga
perlu mengambil kira sama ada atau tidak

212
00:12:45,630 --> 00:12:48,915
corak yang berbeza dikenakan
untuk watak-watak huruf kecil.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Jadi sekarang kita telah anda ketahui
bagaimana untuk beralih watak tunggal,

215
00:12:55,840 --> 00:13:02,200
maka apa yang harus kita lakukan adalah skala yang
sehingga pergi di seluruh plaintext itu.

216
00:13:02,200 --> 00:13:04,260
Jadi plaintext adalah rentetan.

217
00:13:04,260 --> 00:13:08,210
Bagi kita sekarang, rentetan adalah benar-benar
hanya pelbagai aksara,

218
00:13:08,210 --> 00:13:12,150
jadi untuk mengakses setiap watak
tali, semua yang anda perlu lakukan

219
00:13:12,150 --> 00:13:14,270
adalah dengan menggunakan pelbagai notasi.

220
00:13:14,270 --> 00:13:20,270
Katakanlah saya mempunyai pembolehubah jenis
rentetan dipanggil "text = 'ini adalah CS50."

221
00:13:20,270 --> 00:13:22,730
>> Nah, kemudian, untuk
mengakses setiap watak,

222
00:13:22,730 --> 00:13:25,880
semua yang saya perlu lakukan dengan
teks yang berubah-ubah adalah

223
00:13:25,880 --> 00:13:31,660
untuk mengatakan baik, teks pada indeks sifar, yang
sepadan dengan modal T. Teks pada indeks

224
00:13:31,660 --> 00:13:35,100
satu sepadan dengan mana-mana yang h lebih rendah.

225
00:13:35,100 --> 00:13:38,110
Satu lagi fungsi yang berguna adalah
fungsi panjang tali.

226
00:13:38,110 --> 00:13:40,760
Jadi lulus dalam rentetan kepada
fungsi yang akan kembali

227
00:13:40,760 --> 00:13:44,610
integer, panjang tali itu.

228
00:13:44,610 --> 00:13:47,060
>> Sekarang kita telah bercakap tentang
semua unsur-unsur yang berbeza,

229
00:13:47,060 --> 00:13:48,540
mari kita meletakkan mereka kembali bersama-sama.

230
00:13:48,540 --> 00:13:52,210
Jadi kembali ke sama ada pseudokod saya
kod atau pseudokod anda

231
00:13:52,210 --> 00:13:55,920
dan pergi melalui dan memastikan bahawa anda
tahu bagaimana untuk melakukan setiap perkara.

232
00:13:55,920 --> 00:14:01,520
Mendapatkan kunci menggunakan argc dan argv,
beralih kunci ke dalam integer, yang

233
00:14:01,520 --> 00:14:06,840
untuk i, menggesa untuk plaintext,
getstring, dan kemudian iterating

234
00:14:06,840 --> 00:14:09,590
atas setiap watak dalam
tali plaintext,

235
00:14:09,590 --> 00:14:14,910
memelihara kes setiap watak
dan beralih watak dengan kekunci,

236
00:14:14,910 --> 00:14:17,520
memastikan bahawa anda
melingkari abjad,

237
00:14:17,520 --> 00:14:20,850
akhirnya mencetak tulisan rahsia itu.

238
00:14:20,850 --> 00:14:25,470
Nama saya Amila, dan ini adalah Caesar.

239
00:14:25,470 --> 00:14:28,448

