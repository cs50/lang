1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Naj reševanje Cezarja.

3
00:00:02,270 --> 00:00:06,110
V cesarju, smo omogočajo uporabniku
za kodiranje skrivno sporočilo.

4
00:00:06,110 --> 00:00:09,780
Torej, kaj je potopite v desno in poiščete
na naših opravke za ta problem.

5
00:00:09,780 --> 00:00:12,210
Torej, najprej smo dobili ključ od uporabnika.

6
00:00:12,210 --> 00:00:15,210
Potem smo dobili čistim
da želijo za kodiranje.

7
00:00:15,210 --> 00:00:21,380
Po tem, smo ga šifriranje za njih,
in na koncu smo natisnete svoj šifropisom.

8
00:00:21,380 --> 00:00:23,600
>> Torej začnimo s primerom.

9
00:00:23,600 --> 00:00:26,920
Povejte, da ste želeli za kodiranje
Celotna abeceda s ključem dveh.

10
00:00:26,920 --> 00:00:31,360
No, bi celoten abeceda
samo prestavijo na pisma.

11
00:00:31,360 --> 00:00:37,060
Torej bi kodirajo do C, B
D C do E, tako naprej in tako naprej,

12
00:00:37,060 --> 00:00:42,470
dokler ne prideš do X, ki nosi zapis do Ž
ali Zed, odvisno od tega, kje ste s.

13
00:00:42,470 --> 00:00:47,445
Potem bi Y nato prestavite vso pot,
ovijte okoli abecede priti do A,

14
00:00:47,445 --> 00:00:53,256
in potem na koncu zadnje pismo od
abeceda, Z, Zed, bi kodiranje do točke B.

15
00:00:53,256 --> 00:00:54,660
>> Si razumel?

16
00:00:54,660 --> 00:00:56,380
Oglejmo si nekaj primerov.

17
00:00:56,380 --> 00:01:00,540
Prvi primer tukaj je zelo podoben
s tem, kar smo pravkar razloženo zgoraj.

18
00:01:00,540 --> 00:01:05,560
Torej, če sem kodiranje nekaj oddelka
abecedo, A do L, s ključem dveh,

19
00:01:05,560 --> 00:01:09,760
Nato sem dobil moj cele
abeceda premaknilo dve črki.

20
00:01:09,760 --> 00:01:12,230
>> Nato v moj naslednji primer,
ključ je še dva

21
00:01:12,230 --> 00:01:15,080
zato bi morali še vedeti
katere črke pričakovati.

22
00:01:15,080 --> 00:01:16,400
Tu pa je stavek.

23
00:01:16,400 --> 00:01:18,100
To je CS50.

24
00:01:18,100 --> 00:01:21,090
Tako boste opazili, da sem
ohraniti primer mojih pisem,

25
00:01:21,090 --> 00:01:25,600
tako da vse zgornje črke so tudi
Velike črke v šifropisom.

26
00:01:25,600 --> 00:01:27,800
In vse male črke
Črke v čistim

27
00:01:27,800 --> 00:01:30,640
so male črke tudi
Črke v šifropisom.

28
00:01:30,640 --> 00:01:34,020
Vendar sem obdržati črke
in vse klicaji

29
00:01:34,020 --> 00:01:37,610
ali katera koli druga ločila enaka.

30
00:01:37,610 --> 00:01:40,360
>> Torej, zdaj, ko imamo občutek
kako deluje program,

31
00:01:40,360 --> 00:01:43,890
vas prosimo, da gredo teči nekaj več
primeri sami, če želite.

32
00:01:43,890 --> 00:01:47,072
Začnimo pri pridobivanju
ključ od uporabnika.

33
00:01:47,072 --> 00:01:48,780
Tradicionalno, z
druge težave, ki smo jih

34
00:01:48,780 --> 00:01:51,450
bili navajeni, da dobim
vse številke, da smo

35
00:01:51,450 --> 00:01:54,710
Potrebujemo ga poziva uporabniku
s funkcijo getint.

36
00:01:54,710 --> 00:01:58,850
Toda tokrat bo pravzaprav
uporabiti kot argument ukazne vrstice

37
00:01:58,850 --> 00:02:01,760
in nova funkcija, imenovana atoi.

38
00:02:01,760 --> 00:02:05,130
>> Ko zaženete glavni
program C, potem

39
00:02:05,130 --> 00:02:08,500
je v dveh parameters--
int argc, ki

40
00:02:08,500 --> 00:02:11,670
je število argumentov
sprejet, in potem

41
00:02:11,670 --> 00:02:15,920
argv, niz nizov, ki vsebuje
seznam vseh argumentov

42
00:02:15,920 --> 00:02:16,740
minilo.

43
00:02:16,740 --> 00:02:19,740
Nimate izrecno imajo
da se ugotovi, teh spremenljivk.

44
00:02:19,740 --> 00:02:22,700
Oni izračuna za
ti, ki jih prevajalnik.

45
00:02:22,700 --> 00:02:28,160
Pravilna uporaba za to bi bilo
za argc biti dva, v tem primeru,

46
00:02:28,160 --> 00:02:32,630
ker mora uporabnik prenese v
poziv k programu, ./caesar,

47
00:02:32,630 --> 00:02:35,570
in nato ključ,
ne glede na število želijo.

48
00:02:35,570 --> 00:02:39,920
To pomeni, da mora biti argc dva
da za veljavno uporabo Cezarja

49
00:02:39,920 --> 00:02:41,680
ki jih je treba izvesti.

50
00:02:41,680 --> 00:02:43,590
>> Torej, si oglejmo primer.

51
00:02:43,590 --> 00:02:47,760
Povejte, da sem že napisal in
sestavila program, imenovan blastoff.

52
00:02:47,760 --> 00:02:52,670
Torej, če sem tekel v ukazni vrstici
./blastoff Team Rocket, dobro, potem pa,

53
00:02:52,670 --> 00:02:57,750
argc bi bila tri, ker I
opravili v treh različnih argumentov.

54
00:02:57,750 --> 00:02:59,830
Potem bi argv videti takole.

55
00:02:59,830 --> 00:03:03,750
To je niz, in to bi
vsebuje vsako od treh nizih.

56
00:03:03,750 --> 00:03:09,640
./blastoff v prvi indeks, ekipe
v naslednjem, in rakete v zadnji.

57
00:03:09,640 --> 00:03:11,610
>> Spregovorimo o nizi za sekundo.

58
00:03:11,610 --> 00:03:15,560
Polja so podatkovne strukture, ki imajo
več vrednosti istega tipa.

59
00:03:15,560 --> 00:03:19,980
To lahko prišel prav, ko smo
spisek celih ali nizov.

60
00:03:19,980 --> 00:03:23,030
Zapomnite si, da imajo
biti enakega tipa.

61
00:03:23,030 --> 00:03:25,310
V računalništva smo
Radi se šteje od nič,

62
00:03:25,310 --> 00:03:29,260
tako ne pozabite, da nizi
tudi zero-indeksirajo.

63
00:03:29,260 --> 00:03:34,360
Torej je prvi element mojega niza
se bo pri indeksu nič.

64
00:03:34,360 --> 00:03:37,580
Torej, v tem primeru, ko imam
niz dolžine štirih,

65
00:03:37,580 --> 00:03:41,350
Nato zadnji indeks izmed
zadnji del mojega niza

66
00:03:41,350 --> 00:03:44,970
dejansko bo
pri indeksu tri, štiri ne.

67
00:03:44,970 --> 00:03:48,880
Ker se spomnim, smo
začnemo na nič.

68
00:03:48,880 --> 00:03:52,530
>> Tukaj je primer, kako vas
lahko ustvarite niz svoje.

69
00:03:52,530 --> 00:03:56,440
Tako, da sem želel shraniti moj
tri najljubše imena pes.

70
00:03:56,440 --> 00:03:59,030
Potem bi ustvarili niz nizov.

71
00:03:59,030 --> 00:04:04,450
Zato bi Izjavljam vrsto, niz, in
nato pa ime matrike, psi,

72
00:04:04,450 --> 00:04:06,450
in potem v tistih trgu
nosilci dal velikost

73
00:04:06,450 --> 00:04:09,260
na array-- v tem primeru, tri.

74
00:04:09,260 --> 00:04:12,690
>> Torej moj prvi vpis se dogaja
da so psi na indeksu nič,

75
00:04:12,690 --> 00:04:14,750
in da se bo Milo.

76
00:04:14,750 --> 00:04:17,850
Potem psi na indeksu enem
se bo neumen,

77
00:04:17,850 --> 00:04:23,060
draga Mochi, nato pa zadnji
vnos, tretji vpis v indeksu dva,

78
00:04:23,060 --> 00:04:26,130
se bo luštna, sladko Elphie.

79
00:04:26,130 --> 00:04:28,610
Opazili boste, da je format
za polnjenje v tem polju

80
00:04:28,610 --> 00:04:32,150
je zelo všeč, kako bi lahko
ugotovi, katere koli druge spremenljivke, kadar je

81
00:04:32,150 --> 00:04:36,307
imate ime spremenljivke, ki ji sledi
vrednost, ki jo želite shraniti v njem.

82
00:04:36,307 --> 00:04:38,140
Edina razlika
V tem primeru je, da vas

83
00:04:38,140 --> 00:04:42,700
pozabiti dati indeks
vrednosti v oglatih oklepajih.

84
00:04:42,700 --> 00:04:46,420
In tam imamo
tri najljubše psi.

85
00:04:46,420 --> 00:04:48,780
>> Ampak žal, da je čas,
da se vrnem k cesarju.

86
00:04:48,780 --> 00:04:52,910
Ne pozabite, da se pravilno uporablja za
Uporabnik se bo poteka v ne le

87
00:04:52,910 --> 00:04:57,430
ime programa ./caesar, vendar
tudi ključ, ki želijo preusmeriti

88
00:04:57,430 --> 00:04:58,850
njihova čistim s.

89
00:04:58,850 --> 00:05:01,540
To pomeni, da mora biti argc dva.

90
00:05:01,540 --> 00:05:07,580
Morajo opraviti v dvo nič več, nič
manj kot dva argumenta ukazne vrstice.

91
00:05:07,580 --> 00:05:09,050
>> Zdaj pa, kaj pa argv?

92
00:05:09,050 --> 00:05:12,880
No, že vemo, da je
Niz se bo dolžine dveh,

93
00:05:12,880 --> 00:05:15,270
ampak kaj je vsebovana v vsakem elementu?

94
00:05:15,270 --> 00:05:19,330
No, prvi element
se bo ./caesar,

95
00:05:19,330 --> 00:05:24,190
in potem naslednji element bo
vsebuje ključ, ki je uporabnik vnesli v.

96
00:05:24,190 --> 00:05:27,480
Zdaj, če se ga pravilno uporablja
za uporabo Cezarja,

97
00:05:27,480 --> 00:05:29,350
potem boš vnesti številko.

98
00:05:29,350 --> 00:05:33,260
Toda čeprav značaja
da tip je številka,

99
00:05:33,260 --> 00:05:35,790
to je podatkovni tip niza.

100
00:05:35,790 --> 00:05:40,390
>> Torej, kako spremeniti, da
niz na celo število?

101
00:05:40,390 --> 00:05:46,680
Tako pravijo imam tel, niz,
vsebuje niz 50.

102
00:05:46,680 --> 00:05:49,000
Če želim spremeniti, da
na celo število, potem pa sem preprosto

103
00:05:49,000 --> 00:05:53,340
razglasi novo spremenljivko, An
celo število i, kliče atoi.

104
00:05:53,340 --> 00:06:01,160
I prenese v svoj niz spremenljivko num, in
potem bom pa vsebuje številko 50.

105
00:06:01,160 --> 00:06:04,350
Poskrbite, da preverite človeka
Strani za funkcijo atoi

106
00:06:04,350 --> 00:06:07,990
Preverite, katera knjižnica je
V kakor tudi tisto ceniti

107
00:06:07,990 --> 00:06:14,550
se bo vrnil, če niz opravil
v ne vsebuje vseh številk.

108
00:06:14,550 --> 00:06:16,950
>> Zdaj, ko smo gotten
ključ, je naslednji korak

109
00:06:16,950 --> 00:06:19,430
je, da se čistim od uporabnika.

110
00:06:19,430 --> 00:06:21,170
Zdaj, to se dogaja, da
je manj zapleten

111
00:06:21,170 --> 00:06:23,410
kot navigacijo okoli
argumenti v ukazni vrstici.

112
00:06:23,410 --> 00:06:26,190
Vse kar moramo storiti je, da klic
funkcija getstring

113
00:06:26,190 --> 00:06:29,660
da pozove uporabnika, da bi
nas niz, vendar ne pozabite,

114
00:06:29,660 --> 00:06:34,090
preveriti specifikacije za kako
morda želeli poziv uporabniku za to.

115
00:06:34,090 --> 00:06:36,420
>> Zdaj smo prišli do
Srce problem--

116
00:06:36,420 --> 00:06:38,860
kako šifriranje s čistim.

117
00:06:38,860 --> 00:06:42,830
No, najprej, kaj je govoril o tem, kako
za šifriranje en znak naenkrat,

118
00:06:42,830 --> 00:06:47,370
in potem bomo obravnavali, kako
Ponovil po celotni čistim.

119
00:06:47,370 --> 00:06:50,440
Napisal sem nekaj psevdokoda
za problem cesarja.

120
00:06:50,440 --> 00:06:52,310
Spodbujam vas, da
Napišite svoj kot dobro.

121
00:06:52,310 --> 00:06:55,900
To ne bo videti enak
mine, in da je v redu, ampak tako dolgo,

122
00:06:55,900 --> 00:06:58,640
kot splošna ideja je enaka.

123
00:06:58,640 --> 00:07:00,780
>> Prvi trije koraki
smo že storili.

124
00:07:00,780 --> 00:07:03,100
Smo gotten ključ
argument v ukazni vrstici,

125
00:07:03,100 --> 00:07:05,510
smo obrnili, da je ključ
v celo število, in smo jih

126
00:07:05,510 --> 00:07:09,320
pozove uporabnika za čistim
da želijo šifriranje.

127
00:07:09,320 --> 00:07:12,420
Torej naslednji velik kos
je, da je za vsak znak

128
00:07:12,420 --> 00:07:15,070
v besedilni niz,
če je po abecedi,

129
00:07:15,070 --> 00:07:17,750
želimo ohraniti
njegov primer in jo premika.

130
00:07:17,750 --> 00:07:20,900
Z ohraniti primer, kaj sem
pomeni, da vse velike črke

131
00:07:20,900 --> 00:07:23,580
Črke morajo ostati Zgornji
primera in vse male črke

132
00:07:23,580 --> 00:07:25,640
mora ostati male črke.

133
00:07:25,640 --> 00:07:29,110
Torej, ko smo premik tiste,
potem natisniti šifropisom.

134
00:07:29,110 --> 00:07:33,100
>> Tu so tri funkcije, ki se bodo
da pridejo v priročni za ta problem.

135
00:07:33,100 --> 00:07:38,010
Zapomni si tam zgoraj, ko sem dal
Primer za prenos je to CS50?

136
00:07:38,010 --> 00:07:41,800
Ne pozabite, da je 50 in
klicaj ne premika?

137
00:07:41,800 --> 00:07:45,680
Torej, kako lahko povedali, ali mi
morali preusmeriti pismo ali ne?

138
00:07:45,680 --> 00:07:48,650
No, "alfa", če
si je znak mimo,

139
00:07:48,650 --> 00:07:54,850
bo vrnil true, če je znak
je pismo in false sicer.

140
00:07:54,850 --> 00:07:56,870
Da bi vam pomagali pri
ohranjanje kapitalizacija

141
00:07:56,870 --> 00:07:59,750
so funkcije "je
zgornji "in" nižji ".

142
00:07:59,750 --> 00:08:03,350
>> Ti dve funkciji tudi sprejeti
v enem značaja vhod

143
00:08:03,350 --> 00:08:06,580
in vrnejo vam Boolean,
bodisi true ali false

144
00:08:06,580 --> 00:08:11,280
odvisno od tega, ali je ta učinka
je zgornji ali malimi črkami.

145
00:08:11,280 --> 00:08:14,610
Ker je "zgornji" in "je
nižji "so Boolove funkcije,

146
00:08:14,610 --> 00:08:18,660
kar pomeni, da se vam vrne Boolean,
lahko uporabite te v svojih pogojih.

147
00:08:18,660 --> 00:08:23,490
Torej, tukaj je delček kode, ki le
natisne pismo, če je z velikimi črkami.

148
00:08:23,490 --> 00:08:27,790
Tako sem razglasila svoj značaj
pismo se z velikimi črkami Zed

149
00:08:27,790 --> 00:08:33,440
in potem, če je "zgornji" vrne
res, potem sem natisnete to pismo.

150
00:08:33,440 --> 00:08:38,200
>> Če se vrnemo k naši preprost primer
premikajo abecedo s ključem dveh,

151
00:08:38,200 --> 00:08:41,049
kako bomo dejansko dobili, da deluje?

152
00:08:41,049 --> 00:08:45,770
No, se izkaže, da znakov
in so cela števila zelo tesno povezana.

153
00:08:45,770 --> 00:08:48,840
Vsak lik ima
celo vrednost povezana

154
00:08:48,840 --> 00:08:53,260
z ugotovljeno v ASCII tabeli,
kjer ASCII vsakega lika

155
00:08:53,260 --> 00:08:55,380
je prikazana vrednost.

156
00:08:55,380 --> 00:08:58,940
Torej ustreza AN velike črke
na ASCII vrednost 65

157
00:08:58,940 --> 00:09:02,270
in male črke a do
ASCII vrednost 97.

158
00:09:02,270 --> 00:09:04,940
>> Vas prosimo, da pogledate
koli ASCII grafikon spletu

159
00:09:04,940 --> 00:09:07,720
da se te vrednosti za sebe.

160
00:09:07,720 --> 00:09:12,096
Torej, kaj to pomeni, da smo lahko
prevzame značaj zgornjem primeru A,

161
00:09:12,096 --> 00:09:18,200
dodamo celo dva nanj, in nato dobili
znak velike črke C kot rezultat.

162
00:09:18,200 --> 00:09:23,720
To je zato, ker 65, ASCII
Vrednost za začetnico, plus 2,

163
00:09:23,720 --> 00:09:29,960
nam daje 67, kar ustreza
z naravo zgornjem primeru C.

164
00:09:29,960 --> 00:09:33,480
>> Na žalost, stvari
ne bo čisto tako enostavno.

165
00:09:33,480 --> 00:09:36,980
Imamo enačbo, ki
moramo upoštevati.

166
00:09:36,980 --> 00:09:43,590
Tukaj nam pove, da je i-šifropisom
črka ustreza i-čistim

167
00:09:43,590 --> 00:09:48,900
pismo, plus key--
vse to, modularni 26.

168
00:09:48,900 --> 00:09:50,810
Zakaj je tako?

169
00:09:50,810 --> 00:09:55,430
Vrnimo se na naš primer iz
prej, če je kapital A, plus 2,

170
00:09:55,430 --> 00:09:57,590
nam daje kapitala C.

171
00:09:57,590 --> 00:10:01,870
>> Torej uporabi enačbe, da
specifikacija nam daje,

172
00:10:01,870 --> 00:10:06,660
nato pa si kapitalsko A
plus 2 in mod, ki ga 26.

173
00:10:06,660 --> 00:10:10,730
Torej kapitala A, ko sem ga dal v
ti enojnimi navednicami,

174
00:10:10,730 --> 00:10:14,010
omogoča, da se jo obravnava kot
celo tako, da omogoča

175
00:10:14,010 --> 00:10:17,500
mi, da ga vrže na svojo ASCII vrednost, 65.

176
00:10:17,500 --> 00:10:20,080
65 plus 2 je 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 nam daje 15,
ampak da v resnici ne

178
00:10:25,210 --> 00:10:32,590
smisla, saj vemo, da je
kapital C ASCII vrednost 67, ne 15.

179
00:10:32,590 --> 00:10:35,580
Torej, kako uskladiti to?

180
00:10:35,580 --> 00:10:39,840
>> No, tukaj bi rad zastavljam
Pojem abecedno kazalo.

181
00:10:39,840 --> 00:10:44,010
Tako smo že govorili o tem, kako
vsak lik ima svojo ASCII vrednost,

182
00:10:44,010 --> 00:10:48,810
vendar pa bi rad povedal, no,
misliti vsak znak tudi ob

183
00:10:48,810 --> 00:10:52,230
abecedni indeks,
kjer so A, na primer,

184
00:10:52,230 --> 00:10:58,800
kot prvo črko abecede,
ima abecedno kazalo nič.

185
00:10:58,800 --> 00:11:02,070
Torej, zdaj pa velja
Enako enačba kot prej,

186
00:11:02,070 --> 00:11:05,040
vendar z uporabo abecedno kazalo.

187
00:11:05,040 --> 00:11:07,810
>> Torej A je nič, saj smo določena.

188
00:11:07,810 --> 00:11:15,640
Torej ob ničlo plus dva, mod 26,
to je dva, mod 26, kar nam daje dve.

189
00:11:15,640 --> 00:11:18,780
In tudi v smislu
abecedni indeks,

190
00:11:18,780 --> 00:11:23,930
C je tretja črka v
abecedo, tako da bi ustrezala

191
00:11:23,930 --> 00:11:26,290
na abecedni indeks dva.

192
00:11:26,290 --> 00:11:29,850
Tako se zdi, da z uporabo
abecedni indeks v tem primeru

193
00:11:29,850 --> 00:11:32,840
pravzaprav nam daje pravilnega rezultata.

194
00:11:32,840 --> 00:11:35,020
>> Zdaj pa preverite,
vidim, če so enačbe del

195
00:11:35,020 --> 00:11:37,210
z abecedno kazalo.

196
00:11:37,210 --> 00:11:42,540
abecedni indeks Y je 24 kot
predzadnji črko v abecedi.

197
00:11:42,540 --> 00:11:46,520
Torej 24 plus naše
Ključni dveh nam daje 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 nam daje 0, ki je srečen za
nas, je abecedni indeks A.

199
00:11:54,750 --> 00:11:59,100
Torej, upajmo, da je to dovolj, da je dokaz
metoda abecedni indeks deluje.

200
00:11:59,100 --> 00:12:03,180
Če ne, vas prosimo, da preizkusite
nekaj primerov svoje.

201
00:12:03,180 --> 00:12:08,030
>> Za primerno zaviti okoli
abeceda in uporabljajo Caesar enačbo,

202
00:12:08,030 --> 00:12:11,280
potem vemo, da moramo
ukvarjajo s črkovnimi indeksov.

203
00:12:11,280 --> 00:12:15,130
Vendar pa smo začeli z ASCII
vrednosti, in šele nato

204
00:12:15,130 --> 00:12:18,530
bomo potem pretvoriti v
abecedni indeks.

205
00:12:18,530 --> 00:12:23,970
Od tam, da se tiskanje, moramo
ukvarjati z vrednostmi ASCII znova.

206
00:12:23,970 --> 00:12:28,350
Zato moramo ugotoviti, kako
gredo iz ASCII abecednega

207
00:12:28,350 --> 00:12:31,080
in iz črk na ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Zato sem ga pustite, da vas, da ugotovimo,
vzorec med značaja

209
00:12:34,910 --> 00:12:38,590
in njegova abecedna
indeks in njegovo ASCII vrednost.

210
00:12:38,590 --> 00:12:41,530
Zdaj, ne pozabite, da čeprav
ta tabela prav na diapozitiv

211
00:12:41,530 --> 00:12:45,630
kaže velikih črk, smo tudi
morali razmisliti, ali ne

212
00:12:45,630 --> 00:12:48,915
uporablja drugačen vzorec
Za malimi črkami.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Zdaj, ko smo ugotovili,
kako preusmeriti posamezen znak,

215
00:12:55,840 --> 00:13:02,200
potem vse, kar moramo storiti, je lestvica, ki
up, da gredo v vsej čistim.

216
00:13:02,200 --> 00:13:04,260
Torej čistim je niz.

217
00:13:04,260 --> 00:13:08,210
Sreča za nas, niz je res
samo niz znakov,

218
00:13:08,210 --> 00:13:12,150
tako da bi se dostop vsak znak
iz niza, vse, kar morate storiti

219
00:13:12,150 --> 00:13:14,270
je uporaba matrike zapis.

220
00:13:14,270 --> 00:13:20,270
Povejte, da imam spremenljivko tipa
Niz se imenuje "text = 'To je CS50.'"

221
00:13:20,270 --> 00:13:22,730
>> Torej, da bi
dostop vsak znak,

222
00:13:22,730 --> 00:13:25,880
Vse kar moram storiti s
spremenljivka besedilo

223
00:13:25,880 --> 00:13:31,660
reči tudi, besedilo v indeksu nič, da
ustreza kapitala T. Besedilo na indeksu

224
00:13:31,660 --> 00:13:35,100
eden ustreza spodnji primera h.

225
00:13:35,100 --> 00:13:38,110
Druga uporabna funkcija
funkcija dolžine niza.

226
00:13:38,110 --> 00:13:40,760
Torej gre v nizu za
da funkcija vrne

227
00:13:40,760 --> 00:13:44,610
celo število, dolžina tega niza.

228
00:13:44,610 --> 00:13:47,060
>> Zdaj, ko smo se pogovarjali o
vsi ti različni elementi,

229
00:13:47,060 --> 00:13:48,540
pa jih nazaj skupaj.

230
00:13:48,540 --> 00:13:52,210
Tako se vrnete na obeh mojih psevdokoda
koda ali vaš psevdokoda

231
00:13:52,210 --> 00:13:55,920
in iti skozi in se prepričajte, da vas
vedeti, kako narediti vsak stvar.

232
00:13:55,920 --> 00:14:01,520
Dobili ključ uporabo argc in argv,
obrnete ključ v celo število, A

233
00:14:01,520 --> 00:14:06,840
na i, zaradi česar za čistim,
getstring, nato pa ponavljanjem

234
00:14:06,840 --> 00:14:09,590
več kot vsak znak v
čistim niz,

235
00:14:09,590 --> 00:14:14,910
ohranjanje primer vsak znak
in premikajo, da je znak, ki ga je ključ,

236
00:14:14,910 --> 00:14:17,520
zagotavlja, da ste
ovije okoli abecede,

237
00:14:17,520 --> 00:14:20,850
končno natisnete to šifropisom.

238
00:14:20,850 --> 00:14:25,470
Moje ime je Amila, in to je bil Cezar.

239
00:14:25,470 --> 00:14:28,448

