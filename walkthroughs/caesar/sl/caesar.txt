Amila: Naj reševanje Cezarja. V cesarju, smo omogočajo uporabniku za kodiranje skrivno sporočilo. Torej, kaj je potopite v desno in poiščete na naših opravke za ta problem. Torej, najprej smo dobili ključ od uporabnika. Potem smo dobili čistim da želijo za kodiranje. Po tem, smo ga šifriranje za njih, in na koncu smo natisnete svoj šifropisom. 

Torej začnimo s primerom. Povejte, da ste želeli za kodiranje Celotna abeceda s ključem dveh. No, bi celoten abeceda samo prestavijo na pisma. Torej bi kodirajo do C, B D C do E, tako naprej in tako naprej, dokler ne prideš do X, ki nosi zapis do Ž ali Zed, odvisno od tega, kje ste s. Potem bi Y nato prestavite vso pot, ovijte okoli abecede priti do A, in potem na koncu zadnje pismo od abeceda, Z, Zed, bi kodiranje do točke B. 

Si razumel? Oglejmo si nekaj primerov. Prvi primer tukaj je zelo podoben s tem, kar smo pravkar razloženo zgoraj. Torej, če sem kodiranje nekaj oddelka abecedo, A do L, s ključem dveh, Nato sem dobil moj cele abeceda premaknilo dve črki. 

Nato v moj naslednji primer, ključ je še dva zato bi morali še vedeti katere črke pričakovati. Tu pa je stavek. To je CS50. Tako boste opazili, da sem ohraniti primer mojih pisem, tako da vse zgornje črke so tudi Velike črke v šifropisom. In vse male črke Črke v čistim so male črke tudi Črke v šifropisom. Vendar sem obdržati črke in vse klicaji ali katera koli druga ločila enaka. 

Torej, zdaj, ko imamo občutek kako deluje program, vas prosimo, da gredo teči nekaj več primeri sami, če želite. Začnimo pri pridobivanju ključ od uporabnika. Tradicionalno, z druge težave, ki smo jih bili navajeni, da dobim vse številke, da smo Potrebujemo ga poziva uporabniku s funkcijo getint. Toda tokrat bo pravzaprav uporabiti kot argument ukazne vrstice in nova funkcija, imenovana atoi. 

Ko zaženete glavni program C, potem je v dveh parameters-- int argc, ki je število argumentov sprejet, in potem argv, niz nizov, ki vsebuje seznam vseh argumentov minilo. Nimate izrecno imajo da se ugotovi, teh spremenljivk. Oni izračuna za ti, ki jih prevajalnik. Pravilna uporaba za to bi bilo za argc biti dva, v tem primeru, ker mora uporabnik prenese v poziv k programu, ./caesar, in nato ključ, ne glede na število želijo. To pomeni, da mora biti argc dva da za veljavno uporabo Cezarja ki jih je treba izvesti. 

Torej, si oglejmo primer. Povejte, da sem že napisal in sestavila program, imenovan blastoff. Torej, če sem tekel v ukazni vrstici ./blastoff Team Rocket, dobro, potem pa, argc bi bila tri, ker I opravili v treh različnih argumentov. Potem bi argv videti takole. To je niz, in to bi vsebuje vsako od treh nizih. ./blastoff v prvi indeks, ekipe v naslednjem, in rakete v zadnji. 

Spregovorimo o nizi za sekundo. Polja so podatkovne strukture, ki imajo več vrednosti istega tipa. To lahko prišel prav, ko smo spisek celih ali nizov. Zapomnite si, da imajo biti enakega tipa. V računalništva smo Radi se šteje od nič, tako ne pozabite, da nizi tudi zero-indeksirajo. Torej je prvi element mojega niza se bo pri indeksu nič. Torej, v tem primeru, ko imam niz dolžine štirih, Nato zadnji indeks izmed zadnji del mojega niza dejansko bo pri indeksu tri, štiri ne. Ker se spomnim, smo začnemo na nič. 

Tukaj je primer, kako vas lahko ustvarite niz svoje. Tako, da sem želel shraniti moj tri najljubše imena pes. Potem bi ustvarili niz nizov. Zato bi Izjavljam vrsto, niz, in nato pa ime matrike, psi, in potem v tistih trgu nosilci dal velikost na array-- v tem primeru, tri. 

Torej moj prvi vpis se dogaja da so psi na indeksu nič, in da se bo Milo. Potem psi na indeksu enem se bo neumen, draga Mochi, nato pa zadnji vnos, tretji vpis v indeksu dva, se bo luštna, sladko Elphie. Opazili boste, da je format za polnjenje v tem polju je zelo všeč, kako bi lahko ugotovi, katere koli druge spremenljivke, kadar je imate ime spremenljivke, ki ji sledi vrednost, ki jo želite shraniti v njem. Edina razlika V tem primeru je, da vas pozabiti dati indeks vrednosti v oglatih oklepajih. In tam imamo tri najljubše psi. 

Ampak žal, da je čas, da se vrnem k cesarju. Ne pozabite, da se pravilno uporablja za Uporabnik se bo poteka v ne le ime programa ./caesar, vendar tudi ključ, ki želijo preusmeriti njihova čistim s. To pomeni, da mora biti argc dva. Morajo opraviti v dvo nič več, nič manj kot dva argumenta ukazne vrstice. 

Zdaj pa, kaj pa argv? No, že vemo, da je Niz se bo dolžine dveh, ampak kaj je vsebovana v vsakem elementu? No, prvi element se bo ./caesar, in potem naslednji element bo vsebuje ključ, ki je uporabnik vnesli v. Zdaj, če se ga pravilno uporablja za uporabo Cezarja, potem boš vnesti številko. Toda čeprav značaja da tip je številka, to je podatkovni tip niza. 

Torej, kako spremeniti, da niz na celo število? Tako pravijo imam tel, niz, vsebuje niz 50. Če želim spremeniti, da na celo število, potem pa sem preprosto razglasi novo spremenljivko, An celo število i, kliče atoi. I prenese v svoj niz spremenljivko num, in potem bom pa vsebuje številko 50. Poskrbite, da preverite človeka Strani za funkcijo atoi Preverite, katera knjižnica je V kakor tudi tisto ceniti se bo vrnil, če niz opravil v ne vsebuje vseh številk. 

Zdaj, ko smo gotten ključ, je naslednji korak je, da se čistim od uporabnika. Zdaj, to se dogaja, da je manj zapleten kot navigacijo okoli argumenti v ukazni vrstici. Vse kar moramo storiti je, da klic funkcija getstring da pozove uporabnika, da bi nas niz, vendar ne pozabite, preveriti specifikacije za kako morda želeli poziv uporabniku za to. 

Zdaj smo prišli do Srce problem-- kako šifriranje s čistim. No, najprej, kaj je govoril o tem, kako za šifriranje en znak naenkrat, in potem bomo obravnavali, kako Ponovil po celotni čistim. Napisal sem nekaj psevdokoda za problem cesarja. Spodbujam vas, da Napišite svoj kot dobro. To ne bo videti enak mine, in da je v redu, ampak tako dolgo, kot splošna ideja je enaka. 

Prvi trije koraki smo že storili. Smo gotten ključ argument v ukazni vrstici, smo obrnili, da je ključ v celo število, in smo jih pozove uporabnika za čistim da želijo šifriranje. Torej naslednji velik kos je, da je za vsak znak v besedilni niz, če je po abecedi, želimo ohraniti njegov primer in jo premika. Z ohraniti primer, kaj sem pomeni, da vse velike črke Črke morajo ostati Zgornji primera in vse male črke mora ostati male črke. Torej, ko smo premik tiste, potem natisniti šifropisom. 

Tu so tri funkcije, ki se bodo da pridejo v priročni za ta problem. Zapomni si tam zgoraj, ko sem dal Primer za prenos je to CS50? Ne pozabite, da je 50 in klicaj ne premika? Torej, kako lahko povedali, ali mi morali preusmeriti pismo ali ne? No, "alfa", če si je znak mimo, bo vrnil true, če je znak je pismo in false sicer. Da bi vam pomagali pri ohranjanje kapitalizacija so funkcije "je zgornji "in" nižji ". 

Ti dve funkciji tudi sprejeti v enem značaja vhod in vrnejo vam Boolean, bodisi true ali false odvisno od tega, ali je ta učinka je zgornji ali malimi črkami. Ker je "zgornji" in "je nižji "so Boolove funkcije, kar pomeni, da se vam vrne Boolean, lahko uporabite te v svojih pogojih. Torej, tukaj je delček kode, ki le natisne pismo, če je z velikimi črkami. Tako sem razglasila svoj značaj pismo se z velikimi črkami Zed in potem, če je "zgornji" vrne res, potem sem natisnete to pismo. 

Če se vrnemo k naši preprost primer premikajo abecedo s ključem dveh, kako bomo dejansko dobili, da deluje? No, se izkaže, da znakov in so cela števila zelo tesno povezana. Vsak lik ima celo vrednost povezana z ugotovljeno v ASCII tabeli, kjer ASCII vsakega lika je prikazana vrednost. Torej ustreza AN velike črke na ASCII vrednost 65 in male črke a do ASCII vrednost 97. 

Vas prosimo, da pogledate koli ASCII grafikon spletu da se te vrednosti za sebe. Torej, kaj to pomeni, da smo lahko prevzame značaj zgornjem primeru A, dodamo celo dva nanj, in nato dobili znak velike črke C kot rezultat. To je zato, ker 65, ASCII Vrednost za začetnico, plus 2, nam daje 67, kar ustreza z naravo zgornjem primeru C. 

Na žalost, stvari ne bo čisto tako enostavno. Imamo enačbo, ki moramo upoštevati. Tukaj nam pove, da je i-šifropisom črka ustreza i-čistim pismo, plus key-- vse to, modularni 26. Zakaj je tako? Vrnimo se na naš primer iz prej, če je kapital A, plus 2, nam daje kapitala C. 

Torej uporabi enačbe, da specifikacija nam daje, nato pa si kapitalsko A plus 2 in mod, ki ga 26. Torej kapitala A, ko sem ga dal v ti enojnimi navednicami, omogoča, da se jo obravnava kot celo tako, da omogoča mi, da ga vrže na svojo ASCII vrednost, 65. 65 plus 2 je 67. 67 mod 26 nam daje 15, ampak da v resnici ne smisla, saj vemo, da je kapital C ASCII vrednost 67, ne 15. Torej, kako uskladiti to? 

No, tukaj bi rad zastavljam Pojem abecedno kazalo. Tako smo že govorili o tem, kako vsak lik ima svojo ASCII vrednost, vendar pa bi rad povedal, no, misliti vsak znak tudi ob abecedni indeks, kjer so A, na primer, kot prvo črko abecede, ima abecedno kazalo nič. Torej, zdaj pa velja Enako enačba kot prej, vendar z uporabo abecedno kazalo. 

Torej A je nič, saj smo določena. Torej ob ničlo plus dva, mod 26, to je dva, mod 26, kar nam daje dve. In tudi v smislu abecedni indeks, C je tretja črka v abecedo, tako da bi ustrezala na abecedni indeks dva. Tako se zdi, da z uporabo abecedni indeks v tem primeru pravzaprav nam daje pravilnega rezultata. 

Zdaj pa preverite, vidim, če so enačbe del z abecedno kazalo. abecedni indeks Y je 24 kot predzadnji črko v abecedi. Torej 24 plus naše Ključni dveh nam daje 26. 26 mod 26 nam daje 0, ki je srečen za nas, je abecedni indeks A. Torej, upajmo, da je to dovolj, da je dokaz metoda abecedni indeks deluje. Če ne, vas prosimo, da preizkusite nekaj primerov svoje. 

Za primerno zaviti okoli abeceda in uporabljajo Caesar enačbo, potem vemo, da moramo ukvarjajo s črkovnimi indeksov. Vendar pa smo začeli z ASCII vrednosti, in šele nato bomo potem pretvoriti v abecedni indeks. Od tam, da se tiskanje, moramo ukvarjati z vrednostmi ASCII znova. Zato moramo ugotoviti, kako gredo iz ASCII abecednega in iz črk na ASCII. 

Zato sem ga pustite, da vas, da ugotovimo, vzorec med značaja in njegova abecedna indeks in njegovo ASCII vrednost. Zdaj, ne pozabite, da čeprav ta tabela prav na diapozitiv kaže velikih črk, smo tudi morali razmisliti, ali ne uporablja drugačen vzorec Za malimi črkami. 

Zdaj, ko smo ugotovili, kako preusmeriti posamezen znak, potem vse, kar moramo storiti, je lestvica, ki up, da gredo v vsej čistim. Torej čistim je niz. Sreča za nas, niz je res samo niz znakov, tako da bi se dostop vsak znak iz niza, vse, kar morate storiti je uporaba matrike zapis. Povejte, da imam spremenljivko tipa Niz se imenuje "text = 'To je CS50.'" 

Torej, da bi dostop vsak znak, Vse kar moram storiti s spremenljivka besedilo reči tudi, besedilo v indeksu nič, da ustreza kapitala T. Besedilo na indeksu eden ustreza spodnji primera h. Druga uporabna funkcija funkcija dolžine niza. Torej gre v nizu za da funkcija vrne celo število, dolžina tega niza. 

Zdaj, ko smo se pogovarjali o vsi ti različni elementi, pa jih nazaj skupaj. Tako se vrnete na obeh mojih psevdokoda koda ali vaš psevdokoda in iti skozi in se prepričajte, da vas vedeti, kako narediti vsak stvar. Dobili ključ uporabo argc in argv, obrnete ključ v celo število, A na i, zaradi česar za čistim, getstring, nato pa ponavljanjem več kot vsak znak v čistim niz, ohranjanje primer vsak znak in premikajo, da je znak, ki ga je ključ, zagotavlja, da ste ovije okoli abecede, končno natisnete to šifropisom. Moje ime je Amila, in to je bil Cezar. 