1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> AMILA: Affrontiamo Cesare.

3
00:00:02,270 --> 00:00:06,110
In Cesare, lasciamo che l'utente
per codificare un messaggio segreto.

4
00:00:06,110 --> 00:00:09,780
Quindi cerchiamo di immergersi in dettaglio e guardare
le nostre cose da fare per questo problema.

5
00:00:09,780 --> 00:00:12,210
Quindi, prima, si ottiene la chiave da parte dell'utente.

6
00:00:12,210 --> 00:00:15,210
Poi si ottiene il testo in chiaro
che vogliono codificare.

7
00:00:15,210 --> 00:00:21,380
Dopo di che, abbiamo cifrare per loro,
e, infine, il risultato della stampa il testo cifrato.

8
00:00:21,380 --> 00:00:23,600
>> Quindi cominciamo con un esempio.

9
00:00:23,600 --> 00:00:26,920
Diciamo che si voleva per codificare il
intero alfabeto con una chiave di due.

10
00:00:26,920 --> 00:00:31,360
Bene, il vostro intero alfabeto sarebbe
solo essere spostato a lettere.

11
00:00:31,360 --> 00:00:37,060
Quindi, A dovrebbe codificare in C, B per
D, C a E, così via e così via,

12
00:00:37,060 --> 00:00:42,470
fino ad arrivare a X, che codifica per Z
o zed, a seconda di dove vieni.

13
00:00:42,470 --> 00:00:47,445
Poi Y sarebbe poi passare tutta la strada,
avvolgere l'alfabeto per arrivare ad A,

14
00:00:47,445 --> 00:00:53,256
e infine l'ultima lettera del
alfabeto, Z, zed, sarebbe codificare B.

15
00:00:53,256 --> 00:00:54,660
>> Hai capito?

16
00:00:54,660 --> 00:00:56,380
Diamo un'occhiata ad alcuni esempi.

17
00:00:56,380 --> 00:01:00,540
Il primo esempio è molto simile
a quello che abbiamo appena spiegato sopra.

18
00:01:00,540 --> 00:01:05,560
Quindi, se ho codificare alcune sezione del
alfabeto, da A a L, da una chiave di due,

19
00:01:05,560 --> 00:01:09,760
allora ottengo solo tutta la mia
alfabeto spostato due lettere.

20
00:01:09,760 --> 00:01:12,230
>> Poi, nel mio prossimo esempio,
la chiave è ancora due,

21
00:01:12,230 --> 00:01:15,080
così si dovrebbe ancora sapere
che le lettere di aspettarsi.

22
00:01:15,080 --> 00:01:16,400
Ma qui si tratta di una frase.

23
00:01:16,400 --> 00:01:18,100
Questo è CS50.

24
00:01:18,100 --> 00:01:21,090
Quindi, si noterà che ho
preservare il caso delle mie lettere,

25
00:01:21,090 --> 00:01:25,600
così eventuali lettere maiuscole sono anche
lettere maiuscole nel testo cifrato.

26
00:01:25,600 --> 00:01:27,800
E qualsiasi minuscolo
lettere nel testo in chiaro

27
00:01:27,800 --> 00:01:30,640
sono anche minuscole
lettere nel testo cifrato.

28
00:01:30,640 --> 00:01:34,020
Ma io continuo le lettere
e gli eventuali punti esclamativi

29
00:01:34,020 --> 00:01:37,610
o qualsiasi altra punteggiatura stesso.

30
00:01:37,610 --> 00:01:40,360
>> Quindi, ora che abbiamo un senso
per il funzionamento del programma,

31
00:01:40,360 --> 00:01:43,890
sentitevi liberi di andare correre ancora un po '
esempi di proprio, se lo si desidera.

32
00:01:43,890 --> 00:01:47,072
Cominciamo con ottenere
il tasto da parte dell'utente.

33
00:01:47,072 --> 00:01:48,780
Tradizionalmente, con
altri problemi, abbiamo

34
00:01:48,780 --> 00:01:51,450
stato abituato ad ottenere
tutti i numeri che abbiamo

35
00:01:51,450 --> 00:01:54,710
bisogno per chiedere conferma all'utente
con la funzione getint.

36
00:01:54,710 --> 00:01:58,850
Ma questa volta stiamo effettivamente andando
utilizzare l'argomento della riga di comando

37
00:01:58,850 --> 00:02:01,760
e una nuova funzione chiamata atoi.

38
00:02:01,760 --> 00:02:05,130
>> Quando si esegue il principale
programma C, allora

39
00:02:05,130 --> 00:02:08,500
prende in due parameters--
int argc, che

40
00:02:08,500 --> 00:02:11,670
è il numero di argomenti
passato, e poi

41
00:02:11,670 --> 00:02:15,920
argv, un array di stringhe che contiene
l'elenco di tutti gli argomenti

42
00:02:15,920 --> 00:02:16,740
passato.

43
00:02:16,740 --> 00:02:19,740
Non è necessario in modo esplicito
per dichiarare queste variabili.

44
00:02:19,740 --> 00:02:22,700
Sono calcolati per
si dal compilatore.

45
00:02:22,700 --> 00:02:28,160
uso corretto per questo sarebbe
per argc essere due in questo caso,

46
00:02:28,160 --> 00:02:32,630
perché l'utente deve passare in
la chiamata al programma, ./caesar,

47
00:02:32,630 --> 00:02:35,570
e poi il tasto,
qualunque sia il numero che desiderano.

48
00:02:35,570 --> 00:02:39,920
Quindi questo significa che argc deve essere due
affinché un valido utilizzo di Cesare

49
00:02:39,920 --> 00:02:41,680
da eseguire.

50
00:02:41,680 --> 00:02:43,590
>> Quindi diamo un'occhiata a un esempio.

51
00:02:43,590 --> 00:02:47,760
Dire che ho già scritto e
compilato un programma chiamato blastoff.

52
00:02:47,760 --> 00:02:52,670
Quindi, se ho eseguito nella riga di comando
./blastoff Team Rocket, beh, allora,

53
00:02:52,670 --> 00:02:57,750
argc sarebbe tre perché ho
passato in tre argomenti distinti.

54
00:02:57,750 --> 00:02:59,830
Poi argv sarebbe simile a questa.

55
00:02:59,830 --> 00:03:03,750
E 'un array, e sarebbe
contenere ciascuno dei tre corde.

56
00:03:03,750 --> 00:03:09,640
./blastoff nel primo indice, squadra
nel prossimo, e rucola nell'ultima.

57
00:03:09,640 --> 00:03:11,610
>> Parliamo di array per un secondo.

58
00:03:11,610 --> 00:03:15,560
Gli array sono strutture di dati che contengono
più valori dello stesso tipo.

59
00:03:15,560 --> 00:03:19,980
Questo può tornare utile quando abbiamo
hanno liste di numeri interi o stringhe.

60
00:03:19,980 --> 00:03:23,030
Basta ricordare che hanno
per essere dello stesso tipo.

61
00:03:23,030 --> 00:03:25,310
In informatica, abbiamo
amore a contare da zero,

62
00:03:25,310 --> 00:03:29,260
in modo da ricordare che gli array
sono anche zero indicizzato.

63
00:03:29,260 --> 00:03:34,360
Quindi il primo elemento del mio allineamento
sta per essere a indice zero.

64
00:03:34,360 --> 00:03:37,580
Quindi, in questo caso, quando ho
un array di lunghezza quattro,

65
00:03:37,580 --> 00:03:41,350
quindi l'ultimo indice della
ultimo elemento della mia serie

66
00:03:41,350 --> 00:03:44,970
è in realtà sta per essere
a indice di tre, non quattro.

67
00:03:44,970 --> 00:03:48,880
Perché ricordate, abbiamo
iniziare a contare da zero.

68
00:03:48,880 --> 00:03:52,530
>> Ecco un esempio di come si
potrebbe creare un array di tua scelta.

69
00:03:52,530 --> 00:03:56,440
Quindi dico che volevo conservare la mia
tre nomi cane preferito.

70
00:03:56,440 --> 00:03:59,030
Poi vorrei creare un array di stringhe.

71
00:03:59,030 --> 00:04:04,450
Quindi mi sento di dichiarare il tipo, stringa e
poi mettere il nome della matrice, i cani,

72
00:04:04,450 --> 00:04:06,450
e poi in quelli piazza
staffe messo la dimensione

73
00:04:06,450 --> 00:04:09,260
del array-- in questo caso, tre.

74
00:04:09,260 --> 00:04:12,690
>> Così la mia prima voce sta andando
per essere cani a indice zero,

75
00:04:12,690 --> 00:04:14,750
e che sta per essere Milo.

76
00:04:14,750 --> 00:04:17,850
Poi cani in un indice
sta per essere goofy,

77
00:04:17,850 --> 00:04:23,060
cara Mochi, e poi l'ultimo
ingresso, la terza voce di indice due,

78
00:04:23,060 --> 00:04:26,130
sta per essere carino, dolce Elphie.

79
00:04:26,130 --> 00:04:28,610
Si noterà che il formato
per il riempimento in questo array

80
00:04:28,610 --> 00:04:32,150
è molto simile a come si potrebbe
dichiarare qualsiasi altra variabile in cui

81
00:04:32,150 --> 00:04:36,307
si ha il nome della variabile seguito da
il valore che si desidera in essa memorizzati.

82
00:04:36,307 --> 00:04:38,140
L'unica differenza
questo caso è che si

83
00:04:38,140 --> 00:04:42,700
ricordarsi di mettere all'indice
del valore tra parentesi quadre.

84
00:04:42,700 --> 00:04:46,420
E lì abbiamo il nostro
tre cani preferiti.

85
00:04:46,420 --> 00:04:48,780
>> Ma, ahimè, è il momento
per tornare a Cesare.

86
00:04:48,780 --> 00:04:52,910
Ricordate che l'uso corretto per il
utente sta per essere passando non solo

87
00:04:52,910 --> 00:04:57,430
il nome del ./caesar programma, ma
anche la chiave che vogliono spostare

88
00:04:57,430 --> 00:04:58,850
il testo in chiaro da.

89
00:04:58,850 --> 00:05:01,540
Quindi questo significa che argc deve essere due.

90
00:05:01,540 --> 00:05:07,580
Devono passare two-- né più, né
meno di due argomenti della riga di comando.

91
00:05:07,580 --> 00:05:09,050
>> Ora, per quanto riguarda argv?

92
00:05:09,050 --> 00:05:12,880
Beh, sappiamo già che la
serie sta per essere di lunghezza due,

93
00:05:12,880 --> 00:05:15,270
ma ciò che è contenuto in ogni elemento?

94
00:05:15,270 --> 00:05:19,330
Ebbene, il primo elemento
sta per essere ./caesar,

95
00:05:19,330 --> 00:05:24,190
e poi l'elemento successivo sta per
contenere la chiave che l'utente ha inserito.

96
00:05:24,190 --> 00:05:27,480
Ora, se hanno usato correttamente
per l'utilizzo di Cesare,

97
00:05:27,480 --> 00:05:29,350
poi che stanno andando a digitare un numero.

98
00:05:29,350 --> 00:05:33,260
Ma anche se il carattere
che tipo è un numero,

99
00:05:33,260 --> 00:05:35,790
è del tipo di dati stringa.

100
00:05:35,790 --> 00:05:40,390
>> Quindi, come possiamo convertire tale
stringa in un intero?

101
00:05:40,390 --> 00:05:46,680
Quindi dire che ho num, una stringa,
contenente la stringa 50.

102
00:05:46,680 --> 00:05:49,000
Se voglio convertire tale
a un numero intero, poi ho semplicemente

103
00:05:49,000 --> 00:05:53,340
dichiarare una nuova variabile, un
intero i, chiamando atoi.

104
00:05:53,340 --> 00:06:01,160
Passo nella mia variabile stringa, num, e
allora io poi contenere il numero 50.

105
00:06:01,160 --> 00:06:04,350
Assicurati di controllare l'uomo
pagine per la funzione atoi

106
00:06:04,350 --> 00:06:07,990
per verificare quale libreria è
in, così come quello che valorizzarla

107
00:06:07,990 --> 00:06:14,550
restituirà se la stringa passata
in non contiene tutti i numeri.

108
00:06:14,550 --> 00:06:16,950
>> Quindi, ora che abbiamo ottenuto
la chiave, il passo successivo

109
00:06:16,950 --> 00:06:19,430
è quello di ottenere il testo in chiaro dall'utente.

110
00:06:19,430 --> 00:06:21,170
Ora, questo sta per
meno complicato

111
00:06:21,170 --> 00:06:23,410
di navigazione intorno al
argomenti della riga di comando.

112
00:06:23,410 --> 00:06:26,190
Tutto ciò che dobbiamo fare è chiamare
la funzione getString

113
00:06:26,190 --> 00:06:29,660
per richiedere all'utente di dare
noi una stringa, ma ricorda

114
00:06:29,660 --> 00:06:34,090
di verificare le specifiche per il modo in cui
potrebbe desiderare di richiedere all'utente per questo.

115
00:06:34,090 --> 00:06:36,420
>> Ora veniamo alla
cuore della problem--

116
00:06:36,420 --> 00:06:38,860
Come per cifrare il testo in chiaro.

117
00:06:38,860 --> 00:06:42,830
Beh, prima, parliamo di come
per cifrare un carattere per volta,

118
00:06:42,830 --> 00:06:47,370
e poi ci rivolgiamo come
iterare su tutto il testo in chiaro.

119
00:06:47,370 --> 00:06:50,440
Ho scritto alcuni pseudocodice
per il problema Cesare.

120
00:06:50,440 --> 00:06:52,310
Vi incoraggio a
scrivere il proprio così.

121
00:06:52,310 --> 00:06:55,900
Potrebbe non sembrare identici a
la mia, e va bene, ma fino a

122
00:06:55,900 --> 00:06:58,640
come l'idea generale è la stessa.

123
00:06:58,640 --> 00:07:00,780
>> I primi tre passi
abbiamo già fatto.

124
00:07:00,780 --> 00:07:03,100
Abbiamo ottenuto la chiave
l'argomento della linea di comando,

125
00:07:03,100 --> 00:07:05,510
abbiamo girato quella chiave
in un numero intero, e abbiamo

126
00:07:05,510 --> 00:07:09,320
viene richiesto all'utente per il testo in chiaro
che vogliono per cifrare.

127
00:07:09,320 --> 00:07:12,420
Allora la prossima grande pezzo
è che per ogni carattere

128
00:07:12,420 --> 00:07:15,070
nella stringa di testo in chiaro,
se è alfabetico,

129
00:07:15,070 --> 00:07:17,750
vogliamo preservare
custodia e spostamento di esso.

130
00:07:17,750 --> 00:07:20,900
Con preservare caso, quello che ho
dire è che tutto maiuscolo

131
00:07:20,900 --> 00:07:23,580
le lettere devono rimanere in alto
caso e tutte le lettere minuscole

132
00:07:23,580 --> 00:07:25,640
dovrebbe rimanere in minuscolo.

133
00:07:25,640 --> 00:07:29,110
Così, poi dopo ci spostiamo quelli,
poi stampiamo il testo cifrato.

134
00:07:29,110 --> 00:07:33,100
>> Qui ci sono tre funzioni che sono in corso
di tornare utile per questo problema.

135
00:07:33,100 --> 00:07:38,010
Ricordate sopra quando ho dato il
ad esempio per spostare questo è CS50?

136
00:07:38,010 --> 00:07:41,800
Ricordate che il 50 e il
punto esclamativo non spostare?

137
00:07:41,800 --> 00:07:45,680
Quindi, come possiamo dire se ci
necessario spostare una lettera o no?

138
00:07:45,680 --> 00:07:48,650
Ebbene, "è alpha," se
si passa un carattere,

139
00:07:48,650 --> 00:07:54,850
restituisce vero se quel personaggio
è una lettera e false altrimenti.

140
00:07:54,850 --> 00:07:56,870
Per aiutarvi con
preservando capitalizzazione

141
00:07:56,870 --> 00:07:59,750
sono le funzioni "viene
superiore "e" inferiore ".

142
00:07:59,750 --> 00:08:03,350
>> Queste due funzioni anche prendere
in un singolo carattere come input

143
00:08:03,350 --> 00:08:06,580
e restituire un booleano,
vero o falso

144
00:08:06,580 --> 00:08:11,280
a seconda che quel carattere
è maiuscolo o minuscolo.

145
00:08:11,280 --> 00:08:14,610
Poiché "è superiore" e "è
inferiore "sono funzioni booleane,

146
00:08:14,610 --> 00:08:18,660
il che significa che si restituiscono un valore booleano,
è possibile utilizzare questi nelle vostre condizioni.

147
00:08:18,660 --> 00:08:23,490
Quindi, ecco un frammento di codice che solo
stampa una lettera, se è maiuscola.

148
00:08:23,490 --> 00:08:27,790
Così ho dichiarato il mio personaggio
lettera da maiuscolo zed

149
00:08:27,790 --> 00:08:33,440
e poi se "è superiore" ritorni
vero, allora stampo quella lettera.

150
00:08:33,440 --> 00:08:38,200
>> Tornando al nostro esempio semplice di
spostando l'alfabeto da una chiave di due,

151
00:08:38,200 --> 00:08:41,049
come possiamo effettivamente ottenere che al lavoro?

152
00:08:41,049 --> 00:08:45,770
Beh, si scopre che i personaggi
e interi sono strettamente correlati.

153
00:08:45,770 --> 00:08:48,840
Ogni personaggio ha un
valore intero associato

154
00:08:48,840 --> 00:08:53,260
con trovato nella tabella ASCII,
dove ASCII di ogni personaggio

155
00:08:53,260 --> 00:08:55,380
viene visualizzato il valore.

156
00:08:55,380 --> 00:08:58,940
Quindi, un maiuscole A corrisponde
per un valore ASCII di 65

157
00:08:58,940 --> 00:09:02,270
e un minuscolo un a
un valore ASCII di 97.

158
00:09:02,270 --> 00:09:04,940
>> Sentitevi liberi di guardare in alto
qualsiasi grafico ASCII in linea

159
00:09:04,940 --> 00:09:07,720
per vedere questi valori per lei.

160
00:09:07,720 --> 00:09:12,096
Così che cosa questo significa è che possiamo
prendere il carattere di lettere maiuscole A,

161
00:09:12,096 --> 00:09:18,200
aggiungere il numero intero di due ad esso, e quindi ottenere
il carattere maiuscola C come risultato.

162
00:09:18,200 --> 00:09:23,720
Questo perché 65, l'ASCII
valore per il capitale A, più 2,

163
00:09:23,720 --> 00:09:29,960
ci dà 67, che corrisponde
al carattere gambale caso C.

164
00:09:29,960 --> 00:09:33,480
>> Purtroppo, le cose
non sarà abbastanza essere così semplice.

165
00:09:33,480 --> 00:09:36,980
Abbiamo un'equazione che
dobbiamo considerare.

166
00:09:36,980 --> 00:09:43,590
Qui ci dice che il testo cifrato esimo
lettera corrisponde al testo in chiaro esima

167
00:09:43,590 --> 00:09:48,900
lettera, più il key--
tutto questo, modulare 26.

168
00:09:48,900 --> 00:09:50,810
Perché è che il caso?

169
00:09:50,810 --> 00:09:55,430
Torniamo al nostro esempio da
prima, dove il capitale A, più 2,

170
00:09:55,430 --> 00:09:57,590
ci dà il capitale C.

171
00:09:57,590 --> 00:10:01,870
>> Così applicando l'equazione che
la specificazione ci dà,

172
00:10:01,870 --> 00:10:06,660
poi prendiamo maiuscola
più 2 e mod che entro il 26.

173
00:10:06,660 --> 00:10:10,730
Così maiuscola, quando ho messo in
quelle singole virgolette,

174
00:10:10,730 --> 00:10:14,010
mi permette di trattarlo come
un intero, in modo che permette

175
00:10:14,010 --> 00:10:17,500
me per lanciare al suo valore ASCII, 65.

176
00:10:17,500 --> 00:10:20,080
65 + 2 fa 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 ci dà 15,
ma che in realtà non

178
00:10:25,210 --> 00:10:32,590
dare un senso perché sappiamo che la
capitale valore ASCII C è 67, non 15.

179
00:10:32,590 --> 00:10:35,580
Quindi, come possiamo conciliare questo?

180
00:10:35,580 --> 00:10:39,840
>> Bene, qui vorrei porre la
nozione di un indice alfabetico.

181
00:10:39,840 --> 00:10:44,010
Quindi abbiamo già parlato di come
ogni personaggio ha il suo valore ASCII,

182
00:10:44,010 --> 00:10:48,810
ma mi piacerebbe dire, beh, andiamo
pensare a ogni personaggio avendo anche

183
00:10:48,810 --> 00:10:52,230
un indice alfabetico,
dove A, per esempio,

184
00:10:52,230 --> 00:10:58,800
come prima lettera dell'alfabeto,
ha un indice alfabetico di zero.

185
00:10:58,800 --> 00:11:02,070
Così ora cerchiamo di applicare la
stessa equazione come prima,

186
00:11:02,070 --> 00:11:05,040
ma utilizzando un indice alfabetico.

187
00:11:05,040 --> 00:11:07,810
>> Quindi A è pari a zero, come abbiamo definito.

188
00:11:07,810 --> 00:11:15,640
Così poi prendendo a zero più due, mod 26,
Sono due, mod 26, che ci dà due.

189
00:11:15,640 --> 00:11:18,780
E bene, in termini di
un indice alfabetico,

190
00:11:18,780 --> 00:11:23,930
C è la terza lettera del
alfabeto, di modo che corrisponderebbe

191
00:11:23,930 --> 00:11:26,290
ad un indice alfabetico dei due.

192
00:11:26,290 --> 00:11:29,850
Così sembra che utilizzando il
indice alfabetico in questo caso

193
00:11:29,850 --> 00:11:32,840
in realtà ci dà il risultato corretto.

194
00:11:32,840 --> 00:11:35,020
>> Così ora cerchiamo di controllare a
vedere se le opere equazione

195
00:11:35,020 --> 00:11:37,210
con un indice alfabetico.

196
00:11:37,210 --> 00:11:42,540
indice alfabetico di Y è come il 24
secondo per ultima lettera dell'alfabeto.

197
00:11:42,540 --> 00:11:46,520
Allora 24 più il nostro
chiave di due ci dà 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 ci dà 0, che, per fortuna
Stati Uniti, è l'indice alfabetico per A.

199
00:11:54,750 --> 00:11:59,100
Così si spera che sia sufficiente che la prova
il metodo indice alfabetico funziona.

200
00:11:59,100 --> 00:12:03,180
In caso contrario, non esitate a provare
alcuni esempi di tua scelta.

201
00:12:03,180 --> 00:12:08,030
>> Per avvolgere attorno ad esso
alfabeto e applicare l'equazione Cesare,

202
00:12:08,030 --> 00:12:11,280
allora sappiamo che abbiamo bisogno di
trattare con indici alfabetici.

203
00:12:11,280 --> 00:12:15,130
Ma iniziamo con ASCII
valori, e solo allora

204
00:12:15,130 --> 00:12:18,530
dobbiamo poi convertire in
l'indice alfabetico.

205
00:12:18,530 --> 00:12:23,970
Da lì, per stampare, abbiamo bisogno
a che fare con i valori ASCII di nuovo.

206
00:12:23,970 --> 00:12:28,350
Quindi abbiamo bisogno di capire come
andare da ASCII a alfabetici

207
00:12:28,350 --> 00:12:31,080
e da alfabetico a ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Così lascio a voi per capire
il modello tra un carattere

209
00:12:34,910 --> 00:12:38,590
e la sua alfabetico
l'indice e il suo valore ASCII.

210
00:12:38,590 --> 00:12:41,530
Ora, ricordate che anche se
questa tabella direttamente sulla slitta

211
00:12:41,530 --> 00:12:45,630
mostra le lettere maiuscole, abbiamo anche
prendere in considerazione o meno

212
00:12:45,630 --> 00:12:48,915
un modello diverso si applica
per i caratteri minuscoli.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Quindi, ora che abbiamo capito
come spostare un singolo carattere,

215
00:12:55,840 --> 00:13:02,200
allora tutto quello che dobbiamo fare è quello di scala
fino a passare attraverso l'intero testo in chiaro.

216
00:13:02,200 --> 00:13:04,260
Così il testo in chiaro è una stringa.

217
00:13:04,260 --> 00:13:08,210
Fortunatamente per noi, una stringa è davvero
solo un array di caratteri,

218
00:13:08,210 --> 00:13:12,150
Quindi, al fine di accedere a ogni personaggio
di una stringa, tutto quello che dovete fare

219
00:13:12,150 --> 00:13:14,270
è quello di utilizzare la notazione di matrice.

220
00:13:14,270 --> 00:13:20,270
Dire che ho una variabile di tipo
stringa chiamata "text = 'questo è CS50.'"

221
00:13:20,270 --> 00:13:22,730
>> Allora, per
accedere a ogni personaggio,

222
00:13:22,730 --> 00:13:25,880
tutto quello che ho a che fare con
Il testo variabile è

223
00:13:25,880 --> 00:13:31,660
a dire bene, testo a indice zero, che
corrisponde al capitale T. testo in corrispondenza dell'indice

224
00:13:31,660 --> 00:13:35,100
una corrisponde minuscolo h.

225
00:13:35,100 --> 00:13:38,110
Un'altra funzione utile è
la funzione lunghezza della stringa.

226
00:13:38,110 --> 00:13:40,760
Quindi, passando una stringa di
che funzione restituirà

227
00:13:40,760 --> 00:13:44,610
un numero intero, la lunghezza di tale stringa.

228
00:13:44,610 --> 00:13:47,060
>> Ora che abbiamo parlato
tutti questi elementi diversi,

229
00:13:47,060 --> 00:13:48,540
cerchiamo di mettere di nuovo insieme.

230
00:13:48,540 --> 00:13:52,210
Quindi tornare a uno mia pseudocodice
codice o il vostro pseudocodice

231
00:13:52,210 --> 00:13:55,920
e passare attraverso e assicurarsi che si
sapere come fare ogni singola cosa.

232
00:13:55,920 --> 00:14:01,520
Ottenere la chiave utilizzando argc e argv,
ruotando la chiave in un numero intero, un

233
00:14:01,520 --> 00:14:06,840
a I, spingendo per testo in chiaro,
getString, e quindi l'iterazione

234
00:14:06,840 --> 00:14:09,590
su ogni personaggio
la stringa di testo in chiaro,

235
00:14:09,590 --> 00:14:14,910
preservando il caso di ciascun carattere
e spostando tale carattere dalla chiave,

236
00:14:14,910 --> 00:14:17,520
assicurando che sei
avvolgendo intorno l'alfabeto,

237
00:14:17,520 --> 00:14:20,850
infine di stampare tale testo cifrato.

238
00:14:20,850 --> 00:14:25,470
Il mio nome è Amila, e questo era Cesare.

239
00:14:25,470 --> 00:14:28,448

