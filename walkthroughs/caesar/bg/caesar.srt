1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Нека да се справи с Цезар.

3
00:00:02,270 --> 00:00:06,110
В Цезар, ние позволи на потребителя
за кодиране на тайно послание.

4
00:00:06,110 --> 00:00:09,780
Така че нека да се потопите право и да погледнем
в нашите списъци със задачи за този проблем.

5
00:00:09,780 --> 00:00:12,210
Така че на първо място, ние получите ключ от страна на потребителя.

6
00:00:12,210 --> 00:00:15,210
Тогава получаваме прав текст
че те искат да се кодира.

7
00:00:15,210 --> 00:00:21,380
След това, ние го пиша с шифър за тях,
и най-накрая се печата им ciphertext.

8
00:00:21,380 --> 00:00:23,600
>> Така че нека да започнем с един пример.

9
00:00:23,600 --> 00:00:26,920
Да речем, че е искал да кодират
цялата азбука с ключ на две.

10
00:00:26,920 --> 00:00:31,360
Е, цялата си азбука би
просто се измества към писма.

11
00:00:31,360 --> 00:00:37,060
Така че А ще се кодират за C, B, за да
D, С до Е, така нататък и така нататък,

12
00:00:37,060 --> 00:00:42,470
докато не стигнем до X, който кодира до Z
или зет, в зависимост от това къде сте от.

13
00:00:42,470 --> 00:00:47,445
Тогава Y ще може да премине целия път,
увийте около азбуката, за да стигнем до A,

14
00:00:47,445 --> 00:00:53,256
и след това най-накрая последната буква на
азбука, Z, зет, ще се кодират до Б.

15
00:00:53,256 --> 00:00:54,660
>> Имаш ли, че?

16
00:00:54,660 --> 00:00:56,380
Нека да разгледаме някои примери.

17
00:00:56,380 --> 00:01:00,540
Първият пример тук е много подобен
на това, което ние просто обяснено по-горе.

18
00:01:00,540 --> 00:01:05,560
Така че, ако аз се кодират някои раздел на
азбука, от А до L, с ключ на две,

19
00:01:05,560 --> 00:01:09,760
тогава аз просто да си взема цялата
азбука изместен две букви.

20
00:01:09,760 --> 00:01:12,230
>> След това, през следващата ми например,
ключът е все още двама,

21
00:01:12,230 --> 00:01:15,080
така че все още трябва да знаем
който писма да се очаква.

22
00:01:15,080 --> 00:01:16,400
Но тук това е една фраза.

23
00:01:16,400 --> 00:01:18,100
Това е CS50.

24
00:01:18,100 --> 00:01:21,090
Така че вие ​​ще забележите, че аз
запази случай на писмата ми,

25
00:01:21,090 --> 00:01:25,600
така че всички главни букви са също
главни букви в ciphertext.

26
00:01:25,600 --> 00:01:27,800
И всеки с малки букви
букви в прав текст

27
00:01:27,800 --> 00:01:30,640
също са малки букви
букви в ciphertext.

28
00:01:30,640 --> 00:01:34,020
Но аз държа на буквите
и всякакви удивителни знаци

29
00:01:34,020 --> 00:01:37,610
или всяка друга пунктуацията същото.

30
00:01:37,610 --> 00:01:40,360
>> Така че сега ние имаме чувство
за това как работи програмата,

31
00:01:40,360 --> 00:01:43,890
Чувствайте се свободни да се работи повече
примери на собствения си, ако желаят.

32
00:01:43,890 --> 00:01:47,072
Нека да започнем с получаване на
ключа от потребителя.

33
00:01:47,072 --> 00:01:48,780
Традиционно, с
други проблеми, ние сме

34
00:01:48,780 --> 00:01:51,450
са свикнали да получавате
всякакви номера, че ние

35
00:01:51,450 --> 00:01:54,710
нужда от подканване на потребителя
с getint на функция.

36
00:01:54,710 --> 00:01:58,850
Но този път ние всъщност ще
да се използва аргументът на командния ред

37
00:01:58,850 --> 00:02:01,760
и нова функция, наречена atoi.

38
00:02:01,760 --> 00:02:05,130
>> Когато стартирате основните
програма на С, след това

39
00:02:05,130 --> 00:02:08,500
отнема в две parameters--
INT argc, които

40
00:02:08,500 --> 00:02:11,670
е броят на аргументите
преминали в, и след това

41
00:02:11,670 --> 00:02:15,920
argv, масив от низове, който съдържа
списък на всички аргументи

42
00:02:15,920 --> 00:02:16,740
преминал.

43
00:02:16,740 --> 00:02:19,740
Не е ясно има
да декларират тези променливи.

44
00:02:19,740 --> 00:02:22,700
Те са изчислени за
ти от компилатора.

45
00:02:22,700 --> 00:02:28,160
Правилното използване на това ще бъде
за argc да бъде две в този случай,

46
00:02:28,160 --> 00:02:32,630
тъй като потребителят трябва да премине през
поканата към програмата, ./caesar,

47
00:02:32,630 --> 00:02:35,570
и след това ключът,
независимо от броя желаят.

48
00:02:35,570 --> 00:02:39,920
Така че това означава, че argc трябва да бъде две
, за валиден използване на Цезар

49
00:02:39,920 --> 00:02:41,680
да бъде изпълнена.

50
00:02:41,680 --> 00:02:43,590
>> Така че нека да разгледаме един пример.

51
00:02:43,590 --> 00:02:47,760
Да речем, аз вече съм писал и
съставена програма, наречена изстрелване.

52
00:02:47,760 --> 00:02:52,670
Така че, ако аз се завтече в командния ред
./blastoff Team Rocket, добре, тогава,

53
00:02:52,670 --> 00:02:57,750
argc ще бъде три, защото аз
преминал през три различни аргументи.

54
00:02:57,750 --> 00:02:59,830
Тогава argv ще изглежда така.

55
00:02:59,830 --> 00:03:03,750
Това е масив, и би
съдържа всяка от трите струни.

56
00:03:03,750 --> 00:03:09,640
./blastoff в първия индекс, екипът
в следващия, и ракетата в последната.

57
00:03:09,640 --> 00:03:11,610
>> Нека поговорим за масиви за сек.

58
00:03:11,610 --> 00:03:15,560
Масивите са структури от данни, които държат
няколко стойности от същия тип.

59
00:03:15,560 --> 00:03:19,980
Това може да дойде по-удобно, когато ние
има списъци с цели числа или низове.

60
00:03:19,980 --> 00:03:23,030
Само не забравяйте, че имат
да бъде от същия тип.

61
00:03:23,030 --> 00:03:25,310
В компютърните науки, ние
Обичам да се брои от нула,

62
00:03:25,310 --> 00:03:29,260
така не забравяйте, че масиви
също са нулеви индексиран.

63
00:03:29,260 --> 00:03:34,360
Така че първият елемент на моя масив
ще бъде най-индекс нула.

64
00:03:34,360 --> 00:03:37,580
Така че в този случай, когато имам
набор от четири дължина,

65
00:03:37,580 --> 00:03:41,350
след последния индекс на
Последният елемент от моя масив

66
00:03:41,350 --> 00:03:44,970
всъщност ще бъде
при индекс три, не четири.

67
00:03:44,970 --> 00:03:48,880
Защото не забравяйте, ние
започне преброяване на нула.

68
00:03:48,880 --> 00:03:52,530
>> Ето един пример за това как можете
може да се създаде масив от собствения си.

69
00:03:52,530 --> 00:03:56,440
Така се каже, че искам да се съхранява ми
три любими имена куче.

70
00:03:56,440 --> 00:03:59,030
Тогава ще се създаде масив от низове.

71
00:03:59,030 --> 00:04:04,450
Така че аз ще декларира тип, низ, и
След това сложи името на масива, кучета,

72
00:04:04,450 --> 00:04:06,450
и след това в тези квадратен
скоби, поставени на размера

73
00:04:06,450 --> 00:04:09,260
на array-- в този случай, три.

74
00:04:09,260 --> 00:04:12,690
>> Така че първият ми пост ще
да бъде кучета в индекса на нула,

75
00:04:12,690 --> 00:04:14,750
и че ще бъде Мило.

76
00:04:14,750 --> 00:04:17,850
Тогава кучета в индекса един
ще е шантаво,

77
00:04:17,850 --> 00:04:23,060
скъпа Mochi, и след това последният
влизане, третото влизане в индекса на две,

78
00:04:23,060 --> 00:04:26,130
ще бъде сладко, сладко Elphie.

79
00:04:26,130 --> 00:04:28,610
Ще забележите, че форматът
за попълване на този масив

80
00:04:28,610 --> 00:04:32,150
много прилича на това как може да се
декларират всяка друга променлива, където

81
00:04:32,150 --> 00:04:36,307
имате името на променливата, последвано от
стойността, която искате да се съхранява в него.

82
00:04:36,307 --> 00:04:38,140
Разликата само в
този случай е, че

83
00:04:38,140 --> 00:04:42,700
Трябва да се помни, да се постави на индекса
на стойността в квадратни скоби.

84
00:04:42,700 --> 00:04:46,420
И там ние имаме
три любими кучета.

85
00:04:46,420 --> 00:04:48,780
>> Но уви, това е време
да се върнем към Цезар.

86
00:04:48,780 --> 00:04:52,910
Не забравяйте, че правилното използване на
потребител ще се преминава през не само

87
00:04:52,910 --> 00:04:57,430
името на ./caesar програмата, но
Също така ключа, че те искат да се смени

88
00:04:57,430 --> 00:04:58,850
тяхната прав текст от.

89
00:04:58,850 --> 00:05:01,540
Така че това означава, че argc трябва да е два.

90
00:05:01,540 --> 00:05:07,580
Те трябва да преминат през two-- нито повече, нито
по-малко от две аргументи на командния ред.

91
00:05:07,580 --> 00:05:09,050
>> Сега, какво да кажем за argv?

92
00:05:09,050 --> 00:05:12,880
Е, ние вече знаем, че
масив ще бъде с дължина два,

93
00:05:12,880 --> 00:05:15,270
но това, което се съдържа във всяка елемент?

94
00:05:15,270 --> 00:05:19,330
Е, първият елемент
ще бъде ./caesar,

95
00:05:19,330 --> 00:05:24,190
и след това на следващия елемент ще
съдържа ключа, че потребителят въведе вътре.

96
00:05:24,190 --> 00:05:27,480
Сега, ако те го използват правилно
за използването на Цезар,

97
00:05:27,480 --> 00:05:29,350
След това те ще напишете в редица.

98
00:05:29,350 --> 00:05:33,260
Но въпреки че характер
че те написали е число,

99
00:05:33,260 --> 00:05:35,790
това е от тип данни низ.

100
00:05:35,790 --> 00:05:40,390
>> И как ще конвертирате, че
низ до цяло число?

101
00:05:40,390 --> 00:05:46,680
Така кажем, че имам бр, низ,
съдържащ низа 50.

102
00:05:46,680 --> 00:05:49,000
Ако искате да конвертирате, че
до цяло число, тогава просто

103
00:05:49,000 --> 00:05:53,340
декларира нова променлива, на
цяло число аз, наричайки atoi.

104
00:05:53,340 --> 00:06:01,160
Минавам с низ променлива, бр, и
тогава аз тогава ще съдържа номера 50.

105
00:06:01,160 --> 00:06:04,350
Уверете се, че за да се провери на мъжа
страници за функцията atoi

106
00:06:04,350 --> 00:06:07,990
да се провери кои библиотека е
в, както и това, което го ценим

107
00:06:07,990 --> 00:06:14,550
ще се върне, ако низа преминал
в не съдържа всички числа.

108
00:06:14,550 --> 00:06:16,950
>> Така че сега, че ние сме придобили
ключа, следващата стъпка

109
00:06:16,950 --> 00:06:19,430
е да се получи прав текст от потребителя.

110
00:06:19,430 --> 00:06:21,170
Сега, това ще
да бъде по-сложно

111
00:06:21,170 --> 00:06:23,410
от навигацията около
аргументи на командния ред.

112
00:06:23,410 --> 00:06:26,190
Всичко, което трябва да направите е повикване
Функцията на getstring

113
00:06:26,190 --> 00:06:29,660
да подтикне потребителя да даде
ни низ, но не забравяйте,

114
00:06:29,660 --> 00:06:34,090
да се провери спецификациите за това как ние
Може би искате да напомни на потребителя за това.

115
00:06:34,090 --> 00:06:36,420
>> Сега стигаме до
Сърцето на problem--

116
00:06:36,420 --> 00:06:38,860
как да пиша с шифър на прав текст.

117
00:06:38,860 --> 00:06:42,830
Ами, първо, нека да говорим за това как
за шифроване на един знак в момент,

118
00:06:42,830 --> 00:06:47,370
и след това ще разгледа как да
обхождане на цялата прав текст.

119
00:06:47,370 --> 00:06:50,440
Аз съм писал някои Псевдокод
за проблема Цезар.

120
00:06:50,440 --> 00:06:52,310
Препоръчвам ви да
напишете своето собствено, както добре.

121
00:06:52,310 --> 00:06:55,900
Тя може и да не изглежда идентичен
мина, и това е ОК, но толкова дълго,

122
00:06:55,900 --> 00:06:58,640
като общата идея е същото.

123
00:06:58,640 --> 00:07:00,780
>> Първите три стъпки
ние вече сме направили.

124
00:07:00,780 --> 00:07:03,100
Ние сме придобили ключа от
аргумент на командния ред,

125
00:07:03,100 --> 00:07:05,510
ние сме се обърна, че ключовата
в цяло число, и ние сме

126
00:07:05,510 --> 00:07:09,320
подкана на потребителя за прав текст
че те искат да шифроване.

127
00:07:09,320 --> 00:07:12,420
Така че след следващото голямо парче
е, че за всеки един от героите

128
00:07:12,420 --> 00:07:15,070
в прав текст низ,
ако това е азбучен,

129
00:07:15,070 --> 00:07:17,750
ние искаме да се запази
неговото дело и го смени.

130
00:07:17,750 --> 00:07:20,900
Чрез запазване случай, това, което мога
да кажа е, че всички главни букви

131
00:07:20,900 --> 00:07:23,580
писма следва да останат горната
случай и всички малки букви

132
00:07:23,580 --> 00:07:25,640
трябва да остане само с малки букви.

133
00:07:25,640 --> 00:07:29,110
Така че след това, след като сме се измести тези,
След това ние отпечатате ciphertext.

134
00:07:29,110 --> 00:07:33,100
>> Ето три функции, които ще
да дойде по-удобно за този проблем.

135
00:07:33,100 --> 00:07:38,010
Запомни до горе, когато дадох
Например за изместване това е CS50?

136
00:07:38,010 --> 00:07:41,800
Не забравяйте, че на 50, и
удивителен знак не се смени?

137
00:07:41,800 --> 00:07:45,680
Така че как можем да се каже дали ние
Трябва да се измести писмо или не?

138
00:07:45,680 --> 00:07:48,650
Е, "е алфа", ако
можете да го герой мине,

139
00:07:48,650 --> 00:07:54,850
ще се върне вярно, ако този характер
е писмо и фалшива друго.

140
00:07:54,850 --> 00:07:56,870
За да ви помогне с
запазване капитализация

141
00:07:56,870 --> 00:07:59,750
са функциите "е
горна "и" е по-ниска. "

142
00:07:59,750 --> 00:08:03,350
>> Тези две функции също така да вземат
в един символ като вход

143
00:08:03,350 --> 00:08:06,580
и да се върнете на Булева,
или вярно или невярно

144
00:08:06,580 --> 00:08:11,280
в зависимост от това дали този характер
е с малки или главни случай.

145
00:08:11,280 --> 00:08:14,610
Защото "е горната" и "е
по-ниски "са булеви функции,

146
00:08:14,610 --> 00:08:18,660
което означава, че те се върнете булева,
Можете да използвате тези във вашите условия.

147
00:08:18,660 --> 00:08:23,490
Така че тук е фрагмент от кода, че само
отпечатва писмо, ако това е горния случай.

148
00:08:23,490 --> 00:08:27,790
Така че аз съм обявен моя характер
писмо за горния случай зет

149
00:08:27,790 --> 00:08:33,440
и след това, ако "е горната част на" приходи
вярно, тогава аз отпечатате това писмо.

150
00:08:33,440 --> 00:08:38,200
>> Ако се върнем към нашия прост пример за
изместване на азбуката с ключ на две,

151
00:08:38,200 --> 00:08:41,049
как да се получи в действителност, че да работи?

152
00:08:41,049 --> 00:08:45,770
Е, оказва се, че героите
и числа са много тясно свързани.

153
00:08:45,770 --> 00:08:48,840
Всеки герой има
целочислена стойност, свързана

154
00:08:48,840 --> 00:08:53,260
с него се намери в класацията ASCII,
където ASCII всеки знак

155
00:08:53,260 --> 00:08:55,380
се показва стойност.

156
00:08:55,380 --> 00:08:58,940
Така че съответства с а главни
на ASCII стойност на 65

157
00:08:58,940 --> 00:09:02,270
и с малки букви а да
на ASCII стойност на 97.

158
00:09:02,270 --> 00:09:04,940
>> Чувствайте се свободни да погледнете нагоре
всеки ASCII графика онлайн

159
00:09:04,940 --> 00:09:07,720
за да видите тези стойности за себе си.

160
00:09:07,720 --> 00:09:12,096
И така, какво означава това е, че ние можем
вземат характера на горния случай A,

161
00:09:12,096 --> 00:09:18,200
добавете цялото число два до него, и след това да получите
характера главни букви C, като резултат.

162
00:09:18,200 --> 00:09:23,720
Това е така, защото 65, на ASCII
стойност за капитал A, плюс 2,

163
00:09:23,720 --> 00:09:29,960
ни дава 67, което съответства
за характера на горния случай C.

164
00:09:29,960 --> 00:09:33,480
>> За съжаление, нещата
няма да доста да е толкова прост.

165
00:09:33,480 --> 00:09:36,980
Ние имаме едно уравнение, че
ние трябва да се помисли.

166
00:09:36,980 --> 00:09:43,590
Ето това ни казва, че ciphertext на Ith
писмо съответства на прав текст на Ith

167
00:09:43,590 --> 00:09:48,900
писмо, плюс key--
всичко това модулни 26.

168
00:09:48,900 --> 00:09:50,810
Защо е, че е така?

169
00:09:50,810 --> 00:09:55,430
Да се ​​върнем към нашия пример от
преди, когато капитал A, плюс 2,

170
00:09:55,430 --> 00:09:57,590
ни дава капитал C.

171
00:09:57,590 --> 00:10:01,870
>> Така прилагането на уравнението, че
спецификацията ни дава,

172
00:10:01,870 --> 00:10:06,660
тогава нека да капитал A
плюс 2 и Министерството на отбраната, който от 26.

173
00:10:06,660 --> 00:10:10,730
Така капитал A, когато го постави в
тези единични кавички,

174
00:10:10,730 --> 00:10:14,010
ми позволява да го третира като
цяло число, така че позволява

175
00:10:14,010 --> 00:10:17,500
ми да я хвърли към своя ASCII стойност, 65.

176
00:10:17,500 --> 00:10:20,080
65 плюс 2 е 67.

177
00:10:20,080 --> 00:10:25,210
67 мод 26 ни дава 15,
Но това не наистина

178
00:10:25,210 --> 00:10:32,590
да има смисъл, защото ние знаем, че
капитал C ASCII стойност е 67, а не 15.

179
00:10:32,590 --> 00:10:35,580
И така, как можем да приемем, че?

180
00:10:35,580 --> 00:10:39,840
>> Е, тук бих искал да предпоставят
понятие за азбучен индекс.

181
00:10:39,840 --> 00:10:44,010
Така че ние вече говорихме за това как
Всеки герой има своя ASCII стойност,

182
00:10:44,010 --> 00:10:48,810
но бих искал да кажа, добре, нека
мисля за всеки един от героите също като

183
00:10:48,810 --> 00:10:52,230
азбучен индекс,
където А например,

184
00:10:52,230 --> 00:10:58,800
като първата буква от азбуката,
има азбучен индекс на нула.

185
00:10:58,800 --> 00:11:02,070
Така че сега нека да се приложи
същото уравнение, както и преди,

186
00:11:02,070 --> 00:11:05,040
но с помощта азбучен индекс.

187
00:11:05,040 --> 00:11:07,810
>> Така че A е равно на нула, тъй като ние сме определени.

188
00:11:07,810 --> 00:11:15,640
Така че след като нула плюс две, мод 26,
това е две, мод 26, което ни дава две.

189
00:11:15,640 --> 00:11:18,780
И добре, от гледна точка на
азбучен индекс,

190
00:11:18,780 --> 00:11:23,930
C е третата буква в
азбука, така че да съответства

191
00:11:23,930 --> 00:11:26,290
да азбучен индекс на две.

192
00:11:26,290 --> 00:11:29,850
Така че изглежда, че използването на
азбучен указател в този случай

193
00:11:29,850 --> 00:11:32,840
всъщност ни дава правилния резултат.

194
00:11:32,840 --> 00:11:35,020
>> Така че сега нека да се провери, за да
видим дали уравнение работи

195
00:11:35,020 --> 00:11:37,210
с азбучен индекс.

196
00:11:37,210 --> 00:11:42,540
азбучен индекс Y е 24, като
втори до последния писмо в азбуката.

197
00:11:42,540 --> 00:11:46,520
Така след 24 плюс нашата
ключ на две ни дава 26.

198
00:11:46,520 --> 00:11:54,750
26 мод 26 ни дава 0, което, късмет за
нас, е азбучен индекс за A.

199
00:11:54,750 --> 00:11:59,100
Така че се надяваме, че това е достатъчно, че доказателството
Методът на азбучен индекс работи.

200
00:11:59,100 --> 00:12:03,180
Ако не, не се колебайте да опитате
някои примери за себе си.

201
00:12:03,180 --> 00:12:08,030
>> За да бъде правилно обгърне
азбука и се прилага уравнението Цезар,

202
00:12:08,030 --> 00:12:11,280
След това ние знаем, че ние трябва да се
справят с буквени индекси.

203
00:12:11,280 --> 00:12:15,130
Но да започнем с ASCII
ценности, и едва след

204
00:12:15,130 --> 00:12:18,530
можем след това преобразуване на
азбучния указател.

205
00:12:18,530 --> 00:12:23,970
От там, за да се отпечата, ние се нуждаем от
да се справят с ценностите на ASCII отново.

206
00:12:23,970 --> 00:12:28,350
Така че ние трябва да разбера как да се
премине от ASCII да азбучен

207
00:12:28,350 --> 00:12:31,080
и от азбучен да ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Така че аз го оставя на вас да разбера
модела между герой

209
00:12:34,910 --> 00:12:38,590
и неговата азбучен
индекс и неговата ASCII стойност.

210
00:12:38,590 --> 00:12:41,530
Сега, не забравяйте, че въпреки че
това право маса на слайда

211
00:12:41,530 --> 00:12:45,630
показва, главни букви, ние също
Трябва да се помисли дали или не

212
00:12:45,630 --> 00:12:48,915
прилага различен модел
за малки букви.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Така че сега, че ние сме измислили
как да се смени един символ,

215
00:12:55,840 --> 00:13:02,200
След това всички ние трябва да направим, е скала, която
до отида в цялата прав текст.

216
00:13:02,200 --> 00:13:04,260
Така че прав текст е низ.

217
00:13:04,260 --> 00:13:08,210
За наше щастие, низ е наистина
само един набор от символи,

218
00:13:08,210 --> 00:13:12,150
така че, за да получите достъп до всеки герой
на низ, всичко, което трябва да направите,

219
00:13:12,150 --> 00:13:14,270
е да се използва масив нотация.

220
00:13:14,270 --> 00:13:20,270
Да речем, че имам променлива от тип
низ, наречен "текст = 'това е CS50.'"

221
00:13:20,270 --> 00:13:22,730
>> Е, тогава, за да се
достъп до всеки един от героите,

222
00:13:22,730 --> 00:13:25,880
всичко, което трябва да се направи с
променлив текст е

223
00:13:25,880 --> 00:13:31,660
да се каже, добре, текст на индекса на нула, че
съответства на капитала T. Текст на индекс

224
00:13:31,660 --> 00:13:35,100
един съответства на долната случай ч.

225
00:13:35,100 --> 00:13:38,110
Друга полезна функция е
Функцията на дължина низ.

226
00:13:38,110 --> 00:13:40,760
Така че, минаваща през низ да
тази функция ще се върне

227
00:13:40,760 --> 00:13:44,610
цяло число, дължината на тази поредица.

228
00:13:44,610 --> 00:13:47,060
>> Сега, когато сме говорили за
всички тези различни елементи,

229
00:13:47,060 --> 00:13:48,540
нека да ги пуснат обратно заедно.

230
00:13:48,540 --> 00:13:52,210
Така се върне или да ми Псевдокод
код или си Псевдокод

231
00:13:52,210 --> 00:13:55,920
и проверете и се уверете, че сте
знаете как да направите всяко едно нещо.

232
00:13:55,920 --> 00:14:01,520
Първи ключът използване argc и argv,
завъртане на ключа в цяло число, а

233
00:14:01,520 --> 00:14:06,840
да съм, с което предизвика за прав текст,
getstring, и след това повтаряне

234
00:14:06,840 --> 00:14:09,590
над всеки герой в
на прав текст низ,

235
00:14:09,590 --> 00:14:14,910
запазване случая на всеки един от героите
и измества този характер чрез ключа,

236
00:14:14,910 --> 00:14:17,520
гарантира, че вие ​​сте
обвивка около азбуката,

237
00:14:17,520 --> 00:14:20,850
накрая отпечатване че ciphertext.

238
00:14:20,850 --> 00:14:25,470
Моето име е Amila, и това беше Цезар.

239
00:14:25,470 --> 00:14:28,448

