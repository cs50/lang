1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Амила: Давайте решать Цезарь.

3
00:00:02,270 --> 00:00:06,110
В Цезаря, мы позволяем пользователю
для кодирования секретное сообщение.

4
00:00:06,110 --> 00:00:09,780
Так что давайте нырять прямо и смотреть
у наших к-DOS для этой задачи.

5
00:00:09,780 --> 00:00:12,210
Таким образом, во-первых, мы получаем ключ от пользователя.

6
00:00:12,210 --> 00:00:15,210
Тогда мы получим открытый текст
что они хотят, чтобы кодировать.

7
00:00:15,210 --> 00:00:21,380
После этого, мы зашифровать это для них,
и, наконец, мы выводим их шифротекста.

8
00:00:21,380 --> 00:00:23,600
>> Итак, давайте начнем с примера.

9
00:00:23,600 --> 00:00:26,920
Допустим, вы хотели, чтобы кодировать
Весь алфавит с ключом двух.

10
00:00:26,920 --> 00:00:31,360
Ну, весь ваш алфавит будет
просто быть сдвинуты на письма.

11
00:00:31,360 --> 00:00:37,060
Таким образом, будет кодировать C, B к
D, С к Е, так далее и тому подобное,

12
00:00:37,060 --> 00:00:42,470
пока вы не получите до X, который кодирует до Z
или зет, в зависимости от того, откуда вы.

13
00:00:42,470 --> 00:00:47,445
Тогда Y будет затем переложить всю дорогу,
обернуть вокруг алфавита, чтобы добраться до A,

14
00:00:47,445 --> 00:00:53,256
а затем, наконец, последняя буква
алфавита, Z, зет, будет кодировать B.

15
00:00:53,256 --> 00:00:54,660
>> Ты понял?

16
00:00:54,660 --> 00:00:56,380
Давайте посмотрим на некоторые примеры.

17
00:00:56,380 --> 00:01:00,540
Первый пример здесь очень похож
к тому, что мы только что описано выше.

18
00:01:00,540 --> 00:01:05,560
Так что если я закодировать некоторую секцию
алфавит, А через L, с помощью ключа из двух,

19
00:01:05,560 --> 00:01:09,760
тогда я просто получить вся моя
алфавит сдвинуты две буквы.

20
00:01:09,760 --> 00:01:12,230
>> Тогда, в моем следующем примере,
ключ все еще два,

21
00:01:12,230 --> 00:01:15,080
так что вы должны знать, по-прежнему
какие буквы ожидать.

22
00:01:15,080 --> 00:01:16,400
Но вот это фраза.

23
00:01:16,400 --> 00:01:18,100
Это CS50.

24
00:01:18,100 --> 00:01:21,090
Таким образом, вы заметили, что я
сохранить случай моих писем,

25
00:01:21,090 --> 00:01:25,600
поэтому любые заглавные буквы также
заглавные буквы в зашифрованном тексте.

26
00:01:25,600 --> 00:01:27,800
И любой нижний регистр
буквы в незашифрованном

27
00:01:27,800 --> 00:01:30,640
Также в нижнем регистре
буквы в зашифрованном тексте.

28
00:01:30,640 --> 00:01:34,020
Но я держу письма
и любые восклицательные знаки

29
00:01:34,020 --> 00:01:37,610
или любые другие знаки пунктуации то же самое.

30
00:01:37,610 --> 00:01:40,360
>> Так что теперь у нас есть чувство
за то, как работает программа,

31
00:01:40,360 --> 00:01:43,890
не стесняйтесь идти работать еще немного
примеры самостоятельно, если вы хотите.

32
00:01:43,890 --> 00:01:47,072
Давайте начнем с получением
ключ от пользователя.

33
00:01:47,072 --> 00:01:48,780
Традиционно, с
другие проблемы, мы

34
00:01:48,780 --> 00:01:51,450
привыкли к получению
любые цифры, которые мы

35
00:01:51,450 --> 00:01:54,710
нужно путем подсказки пользователю
с функцией GetInt.

36
00:01:54,710 --> 00:01:58,850
Но на этот раз мы на самом деле происходит
использовать аргумент командной строки

37
00:01:58,850 --> 00:02:01,760
и новая функция называется atoi.

38
00:02:01,760 --> 00:02:05,130
>> При запуске основной
Программа в С, то она

39
00:02:05,130 --> 00:02:08,500
принимает в двух parameters--
INT ARGC, который

40
00:02:08,500 --> 00:02:11,670
это число аргументов
прошло, и затем

41
00:02:11,670 --> 00:02:15,920
ARGV, массив строк, который содержит
список всех аргументов

42
00:02:15,920 --> 00:02:16,740
прошло.

43
00:02:16,740 --> 00:02:19,740
Вы явно не имеют
объявить эти переменные.

44
00:02:19,740 --> 00:02:22,700
Они рассчитаны для
Вы компилятором.

45
00:02:22,700 --> 00:02:28,160
Правильное использование для этого было бы
для ARGC быть в данном случае два,

46
00:02:28,160 --> 00:02:32,630
потому что пользователь должен пройти в
вызов программы, ./caesar,

47
00:02:32,630 --> 00:02:35,570
а затем ключ,
какое бы число они желают.

48
00:02:35,570 --> 00:02:39,920
Таким образом, это означает, что ARGC должно быть два
для того, чтобы действительного использования Цезаря

49
00:02:39,920 --> 00:02:41,680
для выполнения.

50
00:02:41,680 --> 00:02:43,590
>> Итак, давайте рассмотрим пример.

51
00:02:43,590 --> 00:02:47,760
Скажем, я уже написал и
составил программу под названием Бластоф.

52
00:02:47,760 --> 00:02:52,670
Так что, если я побежал в командной строке
./blastoff Rocket Team, ну, тогда,

53
00:02:52,670 --> 00:02:57,750
ARGC бы три, потому что я
прошло в трех различных аргументов.

54
00:02:57,750 --> 00:02:59,830
Тогда ARGV будет выглядеть следующим образом.

55
00:02:59,830 --> 00:03:03,750
Это массив, и это было бы
содержат каждый из трех строк.

56
00:03:03,750 --> 00:03:09,640
./blastoff в первом индекса, команда
в следующем, и ракеты в последний.

57
00:03:09,640 --> 00:03:11,610
>> Давайте поговорим о массивах на секунду.

58
00:03:11,610 --> 00:03:15,560
Массивы представляют собой структуры данных, которые держат
несколько значений одного и того же типа.

59
00:03:15,560 --> 00:03:19,980
Это может пригодиться, когда мы
есть списки целых чисел или строк.

60
00:03:19,980 --> 00:03:23,030
Просто помните, у них есть
чтобы быть того же типа.

61
00:03:23,030 --> 00:03:25,310
В компьютерной науке, мы
любовь считая от нуля,

62
00:03:25,310 --> 00:03:29,260
так что помните, что массивы
также нулевой проиндексированы.

63
00:03:29,260 --> 00:03:34,360
Так что первый элемент моего массива
будет индексом ноль.

64
00:03:34,360 --> 00:03:37,580
Так что в этом случае, когда у меня есть
массив длины четыре,

65
00:03:37,580 --> 00:03:41,350
то последний индекс вставленного
Последний элемент моего массива

66
00:03:41,350 --> 00:03:44,970
на самом деле будет
по индексу три, а не четыре.

67
00:03:44,970 --> 00:03:48,880
Потому что помните, что мы
начать отсчет с нуля.

68
00:03:48,880 --> 00:03:52,530
>> Вот пример того, как вы
может создать массив самостоятельно.

69
00:03:52,530 --> 00:03:56,440
Так что сказать, что я хотел, чтобы сохранить мой
три любимые названия собаки.

70
00:03:56,440 --> 00:03:59,030
Тогда я хотел бы создать массив строк.

71
00:03:59,030 --> 00:04:04,450
Поэтому я хотел бы объявить тип, строку, и
затем поместить имя массива, собаки,

72
00:04:04,450 --> 00:04:06,450
а затем в тех квадрате
скобки поставить размер

73
00:04:06,450 --> 00:04:09,260
из array-- в данном случае, три.

74
00:04:09,260 --> 00:04:12,690
>> Так что моя первая запись будет
чтобы собаки с индексом ноль,

75
00:04:12,690 --> 00:04:14,750
и что будет Майло.

76
00:04:14,750 --> 00:04:17,850
Тогда собаки с индексом одной
будет бестолковой,

77
00:04:17,850 --> 00:04:23,060
дорогая Моти, а затем последний
запись, третья запись на индекса два,

78
00:04:23,060 --> 00:04:26,130
будет мило, сладкий Elphie.

79
00:04:26,130 --> 00:04:28,610
Вы заметите, что формат
для заполнения этого массива

80
00:04:28,610 --> 00:04:32,150
очень похоже, как вы могли бы
объявить любую другую переменную, в которой

81
00:04:32,150 --> 00:04:36,307
у вас есть имя переменной, за которой следует
значение, которое вы хотите хранить в нем.

82
00:04:36,307 --> 00:04:38,140
Единственное различие в
этот случай является то, что вам

83
00:04:38,140 --> 00:04:42,700
должны помнить, чтобы поставить индекс
значения в квадратных скобках.

84
00:04:42,700 --> 00:04:46,420
И там у нас есть наши
три любимые собаки.

85
00:04:46,420 --> 00:04:48,780
>> Но, увы, пришло время
чтобы вернуться к Цезарю.

86
00:04:48,780 --> 00:04:52,910
Помните, что правильное использование для
пользователь будет проходит не только в

87
00:04:52,910 --> 00:04:57,430
название программы ./caesar, но
также ключ, что они хотят переложить

88
00:04:57,430 --> 00:04:58,850
их открытого текста с помощью.

89
00:04:58,850 --> 00:05:01,540
Таким образом, это означает, что ARGC должно быть два.

90
00:05:01,540 --> 00:05:07,580
Они должны пройти в two-- ни больше, ни
менее двух аргументов командной строки.

91
00:05:07,580 --> 00:05:09,050
>> Теперь, что касается ARGV?

92
00:05:09,050 --> 00:05:12,880
Ну, мы уже знаем, что
массив будет иметь длину два,

93
00:05:12,880 --> 00:05:15,270
но то, что содержится в каждом элементе?

94
00:05:15,270 --> 00:05:19,330
Ну, первый элемент
будет ./caesar,

95
00:05:19,330 --> 00:05:24,190
а затем следующий элемент будет
содержат ключ, который пользователь напечатали.

96
00:05:24,190 --> 00:05:27,480
Теперь, если они использовали его правильно
для использования Цезаря,

97
00:05:27,480 --> 00:05:29,350
Затем они собираются ввести номер.

98
00:05:29,350 --> 00:05:33,260
Но даже если характер
что они печатают это число,

99
00:05:33,260 --> 00:05:35,790
это типа данных строки.

100
00:05:35,790 --> 00:05:40,390
>> Так как же мы преобразуем, что
строка в целое число?

101
00:05:40,390 --> 00:05:46,680
Так что у меня есть Num, строка,
содержащая строку 50.

102
00:05:46,680 --> 00:05:49,000
Если я хочу, чтобы преобразовать его
в целое число, то я просто

103
00:05:49,000 --> 00:05:53,340
объявить новую переменной,
целого г, называя atoi.

104
00:05:53,340 --> 00:06:01,160
Я прохожу в моей переменной строки, Num и
Затем я будет содержать номер 50.

105
00:06:01,160 --> 00:06:04,350
Убедитесь в том, чтобы проверить мужчину
страницы для функции atoi

106
00:06:04,350 --> 00:06:07,990
чтобы проверить, какая библиотека это
в, а также то, что значение его

107
00:06:07,990 --> 00:06:14,550
вернется, если строка, переданная
в содержит не все номера.

108
00:06:14,550 --> 00:06:16,950
>> Так что теперь мы получили
ключ, следующий шаг

109
00:06:16,950 --> 00:06:19,430
чтобы получить открытый текст от пользователя.

110
00:06:19,430 --> 00:06:21,170
Теперь, это будет
быть менее сложным

111
00:06:21,170 --> 00:06:23,410
чем навигации по
аргументы командной строки.

112
00:06:23,410 --> 00:06:26,190
Все, что нам нужно сделать, это вызов
функция GetString

113
00:06:26,190 --> 00:06:29,660
подсказать пользователю, чтобы дать
нам строка, но помните,

114
00:06:29,660 --> 00:06:34,090
чтобы проверить спецификации для того, как мы
может потребоваться подсказать пользователю для этого.

115
00:06:34,090 --> 00:06:36,420
>> Теперь мы подошли к
Сердце problem--

116
00:06:36,420 --> 00:06:38,860
как зашифровать открытый текст.

117
00:06:38,860 --> 00:06:42,830
Ну, во-первых, давайте поговорим о том, как
зашифровать один символ в то время,

118
00:06:42,830 --> 00:06:47,370
и тогда мы будем решать, как
перебирать весь открытый текст.

119
00:06:47,370 --> 00:06:50,440
Я написал некоторые псевдокод
для задачи Цезаря.

120
00:06:50,440 --> 00:06:52,310
Я призываю вас
написать свой собственный, а также.

121
00:06:52,310 --> 00:06:55,900
Он не может выглядеть идентично
мое, и это нормально, но до тех пор,

122
00:06:55,900 --> 00:06:58,640
как общая идея та же.

123
00:06:58,640 --> 00:07:00,780
>> Первые три шага
мы уже сделали.

124
00:07:00,780 --> 00:07:03,100
Мы получили ключ от
аргумент командной строки,

125
00:07:03,100 --> 00:07:05,510
мы превратили этот ключ
в целое число, и мы

126
00:07:05,510 --> 00:07:09,320
запрос пользователя для открытого текста
что они хотят, чтобы зашифровать.

127
00:07:09,320 --> 00:07:12,420
Так тогда следующий большой кусок
в том, что для каждого символа

128
00:07:12,420 --> 00:07:15,070
в строке открытого текста,
если это алфавитный,

129
00:07:15,070 --> 00:07:17,750
мы хотим сохранить
ее корпус и сдвинуть его.

130
00:07:17,750 --> 00:07:20,900
По сохранить дело, что я
означает, что верхний регистр

131
00:07:20,900 --> 00:07:23,580
буквы должны оставаться Upper
Корпус и все буквы нижнего регистра

132
00:07:23,580 --> 00:07:25,640
должны оставаться в нижнем регистре.

133
00:07:25,640 --> 00:07:29,110
Итак, после мы перемещаем те,
Затем мы выводим шифротекста.

134
00:07:29,110 --> 00:07:33,100
>> Вот три функции, которые собираются
чтобы прийти в удобный для этой проблемы.

135
00:07:33,100 --> 00:07:38,010
Помните, наверху, когда я дал
Пример для сдвига это CS50?

136
00:07:38,010 --> 00:07:41,800
Помните, что 50 и
Восклицательный знак не перекладывал?

137
00:07:41,800 --> 00:07:45,680
Так как же мы можем сказать, является ли мы
необходимо переместить письмо или нет?

138
00:07:45,680 --> 00:07:48,650
Ну, "альфа", если
вы передаете его персонаж,

139
00:07:48,650 --> 00:07:54,850
возвращает истину, если этот символ
это письмо и ложь в противном случае.

140
00:07:54,850 --> 00:07:56,870
Чтобы помочь вам
сохранение капитализации

141
00:07:56,870 --> 00:07:59,750
являются функциями "является
верхний "и" ниже ".

142
00:07:59,750 --> 00:08:03,350
>> Эти две функции также принимают
в один символ в качестве входных данных

143
00:08:03,350 --> 00:08:06,580
и вернуть вам логическое значение,
истинным или ложным

144
00:08:06,580 --> 00:08:11,280
в зависимости от того, что характер
в верхнем регистре или нижнем регистре.

145
00:08:11,280 --> 00:08:14,610
Потому что "сверху" и "является
ниже "являются булевы функции,

146
00:08:14,610 --> 00:08:18,660
Это означает, что они возвращают вам логическое значение,
Вы можете использовать их в своих условиях.

147
00:08:18,660 --> 00:08:23,490
Так вот фрагмент кода, который только
печатает письмо, если это в верхнем регистре.

148
00:08:23,490 --> 00:08:27,790
Так что я объявил мой характер
письма в верхний корпус зет

149
00:08:27,790 --> 00:08:33,440
а затем, если "сверху" возвращается
правда, то я печатаю это письмо.

150
00:08:33,440 --> 00:08:38,200
>> Возвращаясь к нашему простой пример
сдвигая алфавит ключом из двух,

151
00:08:38,200 --> 00:08:41,049
как же мы на самом деле получить, чтобы работать?

152
00:08:41,049 --> 00:08:45,770
Что ж, получается, что персонажи
и целые числа очень тесно связаны между собой.

153
00:08:45,770 --> 00:08:48,840
Каждый персонаж имеет
целое значение, связанное

154
00:08:48,840 --> 00:08:53,260
с ним находится в ASCII графике,
где ASCII каждого символа

155
00:08:53,260 --> 00:08:55,380
отображается значение.

156
00:08:55,380 --> 00:08:58,940
Так что соответствует верхний регистр A
к значению ASCII 65

157
00:08:58,940 --> 00:09:02,270
и строчной а к
Значение ASCII из 97.

158
00:09:02,270 --> 00:09:04,940
>> Не стесняйтесь смотреть
любой ASCII диаграммы онлайн

159
00:09:04,940 --> 00:09:07,720
чтобы увидеть эти ценности для себя.

160
00:09:07,720 --> 00:09:12,096
Так что же это означает, что мы можем
принимают характер верхнего регистра A,

161
00:09:12,096 --> 00:09:18,200
добавить целое два к нему, а затем получить
символ верхнего регистра C в результате.

162
00:09:18,200 --> 00:09:23,720
Это потому, что 65 лет ASCII
значение капитала А, плюс 2,

163
00:09:23,720 --> 00:09:29,960
дает нам 67, что соответствует
характеру верхнего регистра С.

164
00:09:29,960 --> 00:09:33,480
>> К сожалению, дела
не совсем так просто.

165
00:09:33,480 --> 00:09:36,980
У нас есть уравнение,
мы должны рассмотреть.

166
00:09:36,980 --> 00:09:43,590
Здесь он говорит о том, что г-й шифротекста
буква соответствует г-й открытый текст

167
00:09:43,590 --> 00:09:48,900
письмо, плюс key--
все это модульная 26.

168
00:09:48,900 --> 00:09:50,810
Почему это так?

169
00:09:50,810 --> 00:09:55,430
Давайте вернемся к нашему примеру с
до того, где капитал А, плюс 2,

170
00:09:55,430 --> 00:09:57,590
дает нам капитал C.

171
00:09:57,590 --> 00:10:01,870
>> Таким образом, применяя уравнения,
спецификация дает нам,

172
00:10:01,870 --> 00:10:06,660
то давайте возьмем капитал A
плюс 2 и мод, который на 26.

173
00:10:06,660 --> 00:10:10,730
Так капитал А, когда я положил его в
эти одиночные кавычки,

174
00:10:10,730 --> 00:10:14,010
позволяет мне рассматривать его как
целое число, так что позволяет

175
00:10:14,010 --> 00:10:17,500
мне бросить его в ASCII-значения, 65.

176
00:10:17,500 --> 00:10:20,080
65 плюс 2 67.

177
00:10:20,080 --> 00:10:25,210
67 мод 26 дает нам 15,
но это на самом деле не

178
00:10:25,210 --> 00:10:32,590
имеет смысл, потому что мы знаем, что
капитал C значение ASCII составляет 67, а не 15.

179
00:10:32,590 --> 00:10:35,580
Так как же нам примирить это?

180
00:10:35,580 --> 00:10:39,840
>> Ну, здесь я хотел бы постулировать
Понятие алфавитным указателем.

181
00:10:39,840 --> 00:10:44,010
Таким образом, мы уже говорили о том, как
каждый символ имеет ASCII-значение,

182
00:10:44,010 --> 00:10:48,810
но я хотел бы сказать, ну, давайте
думать о каждый символ, имеющий также

183
00:10:48,810 --> 00:10:52,230
алфавитный указатель,
где А, например,

184
00:10:52,230 --> 00:10:58,800
как первая буква алфавита,
имеет алфавитный указатель нуля.

185
00:10:58,800 --> 00:11:02,070
Итак, теперь давайте применим
такое же уравнение, как и раньше,

186
00:11:02,070 --> 00:11:05,040
но с помощью алфавитного указателя.

187
00:11:05,040 --> 00:11:07,810
>> Таким образом, равна нулю, так как мы определили.

188
00:11:07,810 --> 00:11:15,640
Таким образом, то, взяв ноль плюс два, по модулю 26,
это два, по модулю 26, который дает нам два.

189
00:11:15,640 --> 00:11:18,780
И хорошо, в терминах
алфавитный указатель,

190
00:11:18,780 --> 00:11:23,930
C является третья буква в
алфавит, так что будет соответствовать

191
00:11:23,930 --> 00:11:26,290
к алфавитному указателю двух.

192
00:11:26,290 --> 00:11:29,850
Таким образом, кажется, что с помощью
алфавитный указатель в этом случае

193
00:11:29,850 --> 00:11:32,840
на самом деле дает нам правильный результат.

194
00:11:32,840 --> 00:11:35,020
>> Так что теперь давайте проверим на
см, если уравнение работ

195
00:11:35,020 --> 00:11:37,210
с алфавитным указателем.

196
00:11:37,210 --> 00:11:42,540
алфавитный указатель Y является 24, как
второе место последней буквы в алфавите.

197
00:11:42,540 --> 00:11:46,520
Итак 24 плюс наш
Ключ двух дает нам 26.

198
00:11:46,520 --> 00:11:54,750
26 мод 26 дает нам 0, что, к счастью для
нас, и есть алфавитный указатель для А.

199
00:11:54,750 --> 00:11:59,100
Таким образом, мы надеемся, что достаточно того, что доказательство
алфавитный индексный метод работает.

200
00:11:59,100 --> 00:12:03,180
Если нет, не стесняйтесь попробовать
некоторые примеры самостоятельно.

201
00:12:03,180 --> 00:12:08,030
>> Для того, чтобы должным образом обернуть вокруг
алфавит и применить уравнение Цезарь,

202
00:12:08,030 --> 00:12:11,280
то мы знаем, что нам нужно
иметь дело с буквенными индексами.

203
00:12:11,280 --> 00:12:15,130
Но мы начинаем с ASCII
значения, и только потом

204
00:12:15,130 --> 00:12:18,530
мы затем преобразовать в
алфавитный указатель.

205
00:12:18,530 --> 00:12:23,970
Оттуда, чтобы напечатать, нам нужно
иметь дело со значениями ASCII снова.

206
00:12:23,970 --> 00:12:28,350
Таким образом, мы должны выяснить, как
перейти от ASCII к алфавитной

207
00:12:28,350 --> 00:12:31,080
и от алфавитного в ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Так что я оставляю вам, чтобы выяснить,
шаблон между характером

209
00:12:34,910 --> 00:12:38,590
и его алфавитный
Индекс и его ASCII значение.

210
00:12:38,590 --> 00:12:41,530
Итак, помните, что даже если
эту таблицу прямо на слайде

211
00:12:41,530 --> 00:12:45,630
показывает, заглавные буквы, мы также
должны рассмотреть вопрос о целесообразности или нет

212
00:12:45,630 --> 00:12:48,915
применяется другой шаблон
для нижнего регистра.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Так что теперь, когда мы выяснили,
как переместить один символ,

215
00:12:55,840 --> 00:13:02,200
то все, что мы должны сделать, это шкала,
чтобы идти через весь текст.

216
00:13:02,200 --> 00:13:04,260
Таким образом, исходный текст является строкой.

217
00:13:04,260 --> 00:13:08,210
К счастью для нас, строка действительно
просто массив символов,

218
00:13:08,210 --> 00:13:12,150
поэтому для того, чтобы получить доступ каждый символ
строки, все, что вам нужно сделать,

219
00:13:12,150 --> 00:13:14,270
заключается в использовании массива обозначения.

220
00:13:14,270 --> 00:13:20,270
Скажем, у меня есть переменная типа
строка называется "текст = 'это CS50.'"

221
00:13:20,270 --> 00:13:22,730
>> Ну, тогда, для того, чтобы
доступ каждого символа,

222
00:13:22,730 --> 00:13:25,880
все, что я должен делать с
переменная текст

223
00:13:25,880 --> 00:13:31,660
сказать, хорошо, текст с индексом ноль, то
соответствует капитала Т. Текст по индексу

224
00:13:31,660 --> 00:13:35,100
один соответствует строчной ч.

225
00:13:35,100 --> 00:13:38,110
Еще одна полезная функция
функция длины строки.

226
00:13:38,110 --> 00:13:40,760
Так переходя в строку, чтобы
что функция будет возвращать

227
00:13:40,760 --> 00:13:44,610
целое число, длина этой строки.

228
00:13:44,610 --> 00:13:47,060
>> Теперь, когда мы говорили о
все эти различные элементы,

229
00:13:47,060 --> 00:13:48,540
давайте их вместе.

230
00:13:48,540 --> 00:13:52,210
Так что вернуться к любой моей псевдокоде
код или ваш псевдокод

231
00:13:52,210 --> 00:13:55,920
и идти до конца и убедитесь, что вы
знают, как сделать каждую вещь.

232
00:13:55,920 --> 00:14:01,520
Получение ключа с помощью ARGC и ARGV,
поворотом ключа в целое число,

233
00:14:01,520 --> 00:14:06,840
к I, запрашивая открытого текста,
GetString, а затем переборе

234
00:14:06,840 --> 00:14:09,590
над каждым символом в
незашифрованная строка,

235
00:14:09,590 --> 00:14:14,910
сохраняя случай каждого символа
и переход этот символ с помощью ключа,

236
00:14:14,910 --> 00:14:17,520
обеспечение того, чтобы вы
обтекание алфавита,

237
00:14:17,520 --> 00:14:20,850
наконец-то печать, что шифротекста.

238
00:14:20,850 --> 00:14:25,470
Меня зовут Амила, и это был Цезарь.

239
00:14:25,470 --> 00:14:28,448

