1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Lássuk a Caesar.

3
00:00:02,270 --> 00:00:06,110
Caesar, hagyjuk, hogy a felhasználó
kódolni egy titkos üzenetet.

4
00:00:06,110 --> 00:00:09,780
Tehát lássuk zuhanásra, és nézd
a mi to-dos erre a problémára.

5
00:00:09,780 --> 00:00:12,210
Tehát először is, hogy a kulcs a felhasználó.

6
00:00:12,210 --> 00:00:15,210
Akkor megkapjuk az egyszerű szöveges
hogy akarnak kódolni.

7
00:00:15,210 --> 00:00:21,380
Ezt követően, sifríroz ez nekik,
és végül kinyomtathatják rejtjelezett.

8
00:00:21,380 --> 00:00:23,600
>> Tehát kezdjük egy példát.

9
00:00:23,600 --> 00:00:26,920
Tegyük fel akarta kódolásához
teljes ábécé kulcsfontosságú a kettő.

10
00:00:26,920 --> 00:00:31,360
Nos, az egész ábécé lenne
Csak eltolható leveleket.

11
00:00:31,360 --> 00:00:37,060
Tehát egy kódolják a C, B
D, C-E, így tovább és így tovább,

12
00:00:37,060 --> 00:00:42,470
amíg eljut X, amely kódolja a Z
vagy Zed, attól függően, hogy honnan jöttél.

13
00:00:42,470 --> 00:00:47,445
Akkor Y aztán váltás egészen,
körbefogja az ábécé, hogy az A,

14
00:00:47,445 --> 00:00:53,256
és végül az utolsó levél a
abc, Z, Zed, kódolják a B.

15
00:00:53,256 --> 00:00:54,660
>> Megkaptad?

16
00:00:54,660 --> 00:00:56,380
Nézzünk néhány példát.

17
00:00:56,380 --> 00:01:00,540
Az első példa itt nagyon hasonló
hogy amit most kifejtettük.

18
00:01:00,540 --> 00:01:05,560
Tehát, ha azt kódolja néhány szakasza a
ábécé, AL, egy kulcs, két,

19
00:01:05,560 --> 00:01:09,760
akkor csak kap az egész
ábécé eltolt két betű.

20
00:01:09,760 --> 00:01:12,230
>> Aztán az én következő példában,
A kulcs még mindig két,

21
00:01:12,230 --> 00:01:15,080
ezért mindig tudom
mely betűk számíthat.

22
00:01:15,080 --> 00:01:16,400
De itt ez a kifejezés.

23
00:01:16,400 --> 00:01:18,100
Ez CS50.

24
00:01:18,100 --> 00:01:21,090
Így láthatja, hogy én
megőrzése esetén a leveleimet,

25
00:01:21,090 --> 00:01:25,600
így minden nagybetűket is
nagybetűket a rejtjelezett.

26
00:01:25,600 --> 00:01:27,800
És minden kisbetűs
betűk a titkosítatlan

27
00:01:27,800 --> 00:01:30,640
is kisbetűs
betűk a rejtjelezett.

28
00:01:30,640 --> 00:01:34,020
De én is a leveleket
és bármely felkiáltójelek

29
00:01:34,020 --> 00:01:37,610
vagy bármely más írásjelek ugyanaz.

30
00:01:37,610 --> 00:01:40,360
>> Tehát most, hogy van értelme
hogyan működik a program,

31
00:01:40,360 --> 00:01:43,890
nyugodtan menjen még néhány
példákat a saját, ha akarja.

32
00:01:43,890 --> 00:01:47,072
Kezdjük szerzés
a kulcsot a felhasználó.

33
00:01:47,072 --> 00:01:48,780
Hagyományosan, a
más problémák, most már

34
00:01:48,780 --> 00:01:51,450
megszokta, hogy egyre
számot sem, hogy mi

35
00:01:51,450 --> 00:01:54,710
szükség szerint a felhasználó megkérdezése
A funkció getint.

36
00:01:54,710 --> 00:01:58,850
De ezúttal mi történt valójában
használja a parancssori argumentum

37
00:01:58,850 --> 00:02:01,760
és az új funkció az úgynevezett atoi.

38
00:02:01,760 --> 00:02:05,130
>> Amikor futtatja a fő
program C, majd azt

39
00:02:05,130 --> 00:02:08,500
vesz két parameters--
int argc, ami

40
00:02:08,500 --> 00:02:11,670
az argumentumok számát
telt el, majd

41
00:02:11,670 --> 00:02:15,920
argv egy tömböt, amely tartalmazza
A lista az összes érvet

42
00:02:15,920 --> 00:02:16,740
elmúlt.

43
00:02:16,740 --> 00:02:19,740
Nem kifejezetten rendelkezik
nyilatkozni a változókat.

44
00:02:19,740 --> 00:02:22,700
Ők számítanának
Ön a fordító.

45
00:02:22,700 --> 00:02:28,160
Helyes használat erre lenne
A ARGC, hogy két ebben az esetben,

46
00:02:28,160 --> 00:02:32,630
mert a felhasználónak át kell haladnia a
A hívást a programot, ./caesar,

47
00:02:32,630 --> 00:02:35,570
majd a kulcsot,
bármilyen számot akarnak.

48
00:02:35,570 --> 00:02:39,920
Tehát ez azt jelenti, hogy argc kell két
Annak érdekében, hogy egy érvényes használata Caesar

49
00:02:39,920 --> 00:02:41,680
végre kell hajtani.

50
00:02:41,680 --> 00:02:43,590
>> Tehát nézzük meg egy példát.

51
00:02:43,590 --> 00:02:47,760
Mondjuk én már írtam, és
összeállított program neve kilövésre.

52
00:02:47,760 --> 00:02:52,670
Tehát, ha én futott a parancssorból
./blastoff Rakéta csapat, nos, akkor,

53
00:02:52,670 --> 00:02:57,750
argc lenne három, mert
telt három különböző érveket.

54
00:02:57,750 --> 00:02:59,830
Akkor argv nézne ki.

55
00:02:59,830 --> 00:03:03,750
Ez egy tömb, és ez
tartalmazzák mindhárom szálakat.

56
00:03:03,750 --> 00:03:09,640
./blastoff az első index, csapat
A következő, és rakéta az utolsó.

57
00:03:09,640 --> 00:03:11,610
>> Beszéljünk tömbök egy percet.

58
00:03:11,610 --> 00:03:15,560
A tömbök adatszerkezetek, hogy tartsa
több értéke azonos típusú.

59
00:03:15,560 --> 00:03:19,980
Ez jól jöhet, amikor
Van listák egész számok vagy karakterláncok.

60
00:03:19,980 --> 00:03:23,030
Csak arra emlékszem, hogy van
hogy az azonos típusú.

61
00:03:23,030 --> 00:03:25,310
Számítástechnika, mi
Szeretem számítva nulla,

62
00:03:25,310 --> 00:03:29,260
úgy emlékszem, hogy a tömbök
szintén nulla indexelt.

63
00:03:29,260 --> 00:03:34,360
Tehát az első eleme az én tömb
lesz indexen nulla.

64
00:03:34,360 --> 00:03:37,580
Tehát ebben az esetben, ha van
tömb hossza négy,

65
00:03:37,580 --> 00:03:41,350
majd az utolsó indexe
utolsó eleme az én tömb

66
00:03:41,350 --> 00:03:44,970
valóban lesz
indexű három, nem négy.

67
00:03:44,970 --> 00:03:48,880
Mert emlékszem, mi
elkezd számolás nulla.

68
00:03:48,880 --> 00:03:52,530
>> Íme egy példa arra, hogy hogyan
létrehozhat egy sor saját.

69
00:03:52,530 --> 00:03:56,440
Tehát mondjuk akartam tárolni én
három kedvenc kutya nevét.

70
00:03:56,440 --> 00:03:59,030
Aztán lenne létrehozni egy tömböt.

71
00:03:59,030 --> 00:04:04,450
Tehát azt állapítsa meg a típusát, húr, és
majd fel a nevét a tömb, kutyák,

72
00:04:04,450 --> 00:04:06,450
majd az említett tér
zárójelben rész méretét

73
00:04:06,450 --> 00:04:09,260
A array-- ebben az esetben három.

74
00:04:09,260 --> 00:04:12,690
>> Tehát az első bejegyzés lesz
hogy kutyák index nulla,

75
00:04:12,690 --> 00:04:14,750
és hogy lesz Milo.

76
00:04:14,750 --> 00:04:17,850
Aztán kutyák index egy
lesz ostoba,

77
00:04:17,850 --> 00:04:23,060
drágám Mochi, majd az utolsó
bejegyzés, a harmadik belépést index két,

78
00:04:23,060 --> 00:04:26,130
lesz aranyos, édes Elphie.

79
00:04:26,130 --> 00:04:28,610
Észre fogod venni, hogy a formátum
kitöltési ez a tömb

80
00:04:28,610 --> 00:04:32,150
nagyon hasonlít arra, hogyan lehet
bejelenteni minden más változót, ahol

81
00:04:32,150 --> 00:04:36,307
akkor a változó nevét, majd
az értéket, amit szeretne tárolni benne.

82
00:04:36,307 --> 00:04:38,140
Az egyetlen különbség a
Ebben az esetben az, hogy

83
00:04:38,140 --> 00:04:42,700
meg kell emlékezni, hogy az index
Az érték a szögletes zárójelben.

84
00:04:42,700 --> 00:04:46,420
És ott van a mi
három kedvenc kutyákat.

85
00:04:46,420 --> 00:04:48,780
>> De sajnos, itt az ideje,
hogy újra Caesar.

86
00:04:48,780 --> 00:04:52,910
Ne feledje, hogy helyes használata a
felhasználó lesz átadva nemcsak

87
00:04:52,910 --> 00:04:57,430
A program neve ./caesar, de
továbbá a legfontosabb, hogy meg akarják váltani

88
00:04:57,430 --> 00:04:58,850
a nyílt szöveg által.

89
00:04:58,850 --> 00:05:01,540
Tehát ez azt jelenti, hogy argc kell kettő.

90
00:05:01,540 --> 00:05:07,580
Meg kell felelniük a two-- nem több, nem
Kevesebb, mint két parancssori paramétereket.

91
00:05:07,580 --> 00:05:09,050
>> De mi a helyzet argv?

92
00:05:09,050 --> 00:05:12,880
Nos, azt már tudjuk, hogy a
tömb lesz a hossza két,

93
00:05:12,880 --> 00:05:15,270
de mit tartalmazott minden eleme?

94
00:05:15,270 --> 00:05:19,330
Nos, az első elem
lesz ./caesar,

95
00:05:19,330 --> 00:05:24,190
majd a következő elem fog
tartalmazzák a legfontosabb, hogy a felhasználó beírta.

96
00:05:24,190 --> 00:05:27,480
Most, ha használják helyesen
a használat Caesar,

97
00:05:27,480 --> 00:05:29,350
akkor fognak írja be a számot.

98
00:05:29,350 --> 00:05:33,260
De még ha a karakter
hogy írjon egy számot,

99
00:05:33,260 --> 00:05:35,790
ez az adat string típusú.

100
00:05:35,790 --> 00:05:40,390
>> Szóval hogyan lehet átalakítani, hogy
húr egy egész?

101
00:05:40,390 --> 00:05:46,680
Tehát mondjuk van num, egy string,
karakterláncot tartalmazó 50.

102
00:05:46,680 --> 00:05:49,000
Ha szeretnék átalakítani, hogy a
az egész, akkor egyszerűen

103
00:05:49,000 --> 00:05:53,340
állapítsa meg egy új változót, egy
integer i, amelyben atoi.

104
00:05:53,340 --> 00:06:01,160
Elmegyek én string változó, num, és
akkor én majd tartalmazza a szám 50.

105
00:06:01,160 --> 00:06:04,350
Győződjön meg arról, hogy ellenőrizze a férfi
oldalakon a atoi funkció

106
00:06:04,350 --> 00:06:07,990
hogy ellenőrizze, hogy melyik könyvtárból ez
a, valamint milyen értéket

107
00:06:07,990 --> 00:06:14,550
majd vissza, ha a húr át
az nem tartalmazza az összes számot.

108
00:06:14,550 --> 00:06:16,950
>> Most, hogy ütött
a kulcsot, a következő lépés

109
00:06:16,950 --> 00:06:19,430
az, hogy a nyílt szöveg a felhasználó.

110
00:06:19,430 --> 00:06:21,170
Nos, ez fog
kevésbé bonyolult

111
00:06:21,170 --> 00:06:23,410
mint a navigációt a
parancssori paramétereket.

112
00:06:23,410 --> 00:06:26,190
Mindössze annyit kell tennie, hogy hívja
A getstring funkció

113
00:06:26,190 --> 00:06:29,660
figyelmezteti a felhasználót, hogy
nekünk egy húr, de ne feledje,

114
00:06:29,660 --> 00:06:34,090
hogy ellenőrizze az előírások arra nézve, hogyan
Lehet, hogy figyelmezteti a felhasználót, hogy.

115
00:06:34,090 --> 00:06:36,420
>> Most jön a
szívében problem--

116
00:06:36,420 --> 00:06:38,860
hogyan sifríroz az egyszerű szöveges.

117
00:06:38,860 --> 00:06:42,830
Nos, először is, beszéljünk arról, hogyan
a titkosítás egy karakter egy időben,

118
00:06:42,830 --> 00:06:47,370
aztán majd foglalkozik az
végighaladni az egész nyílt szöveg.

119
00:06:47,370 --> 00:06:50,440
Írtam néhány pszeudokód
A Caesar probléma.

120
00:06:50,440 --> 00:06:52,310
Azt javasoljuk, hogy
írhatunk is.

121
00:06:52,310 --> 00:06:55,900
Lehet, hogy nem néz azonosak
az enyém, és ez rendben van, de amíg

122
00:06:55,900 --> 00:06:58,640
mint az általános ötlet ugyanaz.

123
00:06:58,640 --> 00:07:00,780
>> Az első három lépés
ezt már megtettük.

124
00:07:00,780 --> 00:07:03,100
Kaptunk a kulcsot
A parancssori argumentum

125
00:07:03,100 --> 00:07:05,510
már kiderült, hogy a legfontosabb
egy egész, és mi már

126
00:07:05,510 --> 00:07:09,320
kéri a felhasználótól a nyílt szöveg
hogy akarnak titkosítás.

127
00:07:09,320 --> 00:07:12,420
Így aztán a következő nagy darab
az, hogy minden egyes karakter

128
00:07:12,420 --> 00:07:15,070
Az egyszerű szöveges karakterlánc,
ha ez az alfabetikus,

129
00:07:15,070 --> 00:07:17,750
meg akarjuk őrizni
tokjába és műszak.

130
00:07:17,750 --> 00:07:20,900
By megőrzése esetén, amit én
jelenti, hogy az összes nagybetűk

131
00:07:20,900 --> 00:07:23,580
leveleket kell maradnia a felső
esetében és minden kisbetű

132
00:07:23,580 --> 00:07:25,640
maradjon kisbetűs.

133
00:07:25,640 --> 00:07:29,110
Így aztán, miután váltani azokat,
majd kiírjuk a rejtjelezett.

134
00:07:29,110 --> 00:07:33,100
>> Íme három funkciót folynak
jól jöhet erre a problémára.

135
00:07:33,100 --> 00:07:38,010
Emlékezz fönt, amikor adtam a
például változó ez CS50?

136
00:07:38,010 --> 00:07:41,800
Ne feledje, hogy a 50 és a
felkiáltójel nem váltás?

137
00:07:41,800 --> 00:07:45,680
Tehát hogyan tudjuk megmondani, hogy mi
kell váltani írni, vagy nem?

138
00:07:45,680 --> 00:07:48,650
Nos, "alfa", ha
adsz meg egy karaktert,

139
00:07:48,650 --> 00:07:54,850
true értéket ad vissza, ha a karakter
egy levelet, és egyébként false.

140
00:07:54,850 --> 00:07:56,870
Hogy segítsen
megőrzése kapitalizáció

141
00:07:56,870 --> 00:07:59,750
azok a funkciók "van
felső "és" alacsonyabb ".

142
00:07:59,750 --> 00:08:03,350
>> Ez a két funkció is figyelembe
egyetlen karakter, mint bemenet

143
00:08:03,350 --> 00:08:06,580
és visszatér a logikai,
igaz vagy hamis

144
00:08:06,580 --> 00:08:11,280
attól függően, hogy az adott karakter
nagybetűs vagy kisbetűs.

145
00:08:11,280 --> 00:08:14,610
Mivel a "a felső" és "a
alsó "Boole-függvények,

146
00:08:14,610 --> 00:08:18,660
ami azt jelenti, hogy visszatér a logikai,
használhatja ezeket a feltételeket.

147
00:08:18,660 --> 00:08:23,490
Tehát itt egy kódrészletet, hogy csak a
nyomtat írni, ha ez a felső burkolatot.

148
00:08:23,490 --> 00:08:27,790
Úgyhogy nyilvánították a karakterem
levél a nagybetűk zed

149
00:08:27,790 --> 00:08:33,440
és ha "a felső" visszatér
igaz, akkor tudok nyomtatni azt a levelet.

150
00:08:33,440 --> 00:08:38,200
>> Visszatérve a mi egyszerű példa
változó az ábécé egy kulcs két,

151
00:08:38,200 --> 00:08:41,049
hogyan valóban kap, hogy működjön?

152
00:08:41,049 --> 00:08:45,770
Nos, kiderült, hogy a karakterek
és egész nagyon közel állnak egymáshoz.

153
00:08:45,770 --> 00:08:48,840
Minden karakternek van egy
kapcsolódóan egy egész értéket

154
00:08:48,840 --> 00:08:53,260
vele megtalálható az ASCII táblázatban,
ahol minden egyes karakter ASCII

155
00:08:53,260 --> 00:08:55,380
érték jelenik meg.

156
00:08:55,380 --> 00:08:58,940
Így egy nagybetű A megfelel
ASCII értéke 65

157
00:08:58,940 --> 00:09:02,270
és egy kisbetűs egy a
ASCII értéke 97.

158
00:09:02,270 --> 00:09:04,940
>> Nyugodtan nézz fel
ASCII táblázat Online

159
00:09:04,940 --> 00:09:07,720
hogy ezek az értékek magad.

160
00:09:07,720 --> 00:09:12,096
Tehát ez mit jelent az, hogy tudjuk,
hogy a karakter a nagybetűk A,

161
00:09:12,096 --> 00:09:18,200
hozzá az egész két hozzá, és akkor kap
a karakter nagybetű C ennek eredményeként.

162
00:09:18,200 --> 00:09:23,720
Ennek oka, hogy a 65, az ASCII
érték tőke A, plusz 2,

163
00:09:23,720 --> 00:09:29,960
ad 67, ami megfelel
a karakter nagybetű C.

164
00:09:29,960 --> 00:09:33,480
>> Sajnos, a dolgok
Nem egészen ilyen egyszerű.

165
00:09:33,480 --> 00:09:36,980
Van egy egyenletet, hogy
figyelembe kell vennünk.

166
00:09:36,980 --> 00:09:43,590
Itt azt mondja, hogy az i-edik rejtjelezett
levél megfelel az i-edik egyszerű szöveges

167
00:09:43,590 --> 00:09:48,900
levél, valamint a key--
minden, hogy a moduláris 26.

168
00:09:48,900 --> 00:09:50,810
Miért van ez így?

169
00:09:50,810 --> 00:09:55,430
Térjünk vissza a példát
előtt, ahol a tőke egy, plusz 2,

170
00:09:55,430 --> 00:09:57,590
ad nekünk tőke C.

171
00:09:57,590 --> 00:10:01,870
>> Tehát alkalmazása egyenlet
A leírás ad nekünk,

172
00:10:01,870 --> 00:10:06,660
akkor vessünk tőke A
plusz 2 és a mod, hogy a 26.

173
00:10:06,660 --> 00:10:10,730
Tehát a tőke A, amikor betette
ezek egyszeres idézőjelbe,

174
00:10:10,730 --> 00:10:14,010
lehetővé teszi, hogy kezelje azt
egy egész szám, úgy, hogy lehetővé teszi, hogy

175
00:10:14,010 --> 00:10:17,500
engem vesd annak ASCII értéke 65.

176
00:10:17,500 --> 00:10:20,080
65 plusz 2 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 ad 15,
de ez nem igazán

178
00:10:25,210 --> 00:10:32,590
értelme, mert tudjuk, hogy a
tőke C ASCII értéke 67, és nem 15.

179
00:10:32,590 --> 00:10:35,580
Szóval hogyan lehet összeegyeztetni ezt?

180
00:10:35,580 --> 00:10:39,840
>> Nos, itt szeretnék állít a
fogalmát betűrendes index.

181
00:10:39,840 --> 00:10:44,010
Tehát mi már beszéltünk arról, hogyan
Minden karakternek megvan a ASCII értéke,

182
00:10:44,010 --> 00:10:48,810
de azt szeretném mondani, nos,
gondolni minden egyes karakter is, amelyek

183
00:10:48,810 --> 00:10:52,230
betűrendes index,
ahol A például

184
00:10:52,230 --> 00:10:58,800
mint az első betű az ábécé,
van egy alfabetikus index nulla.

185
00:10:58,800 --> 00:11:02,070
Így most nézzük alkalmazza
azonos egyenlet, mint korábban,

186
00:11:02,070 --> 00:11:05,040
de a betűrendes index.

187
00:11:05,040 --> 00:11:07,810
>> Tehát egy nulla, ahogy már megadott.

188
00:11:07,810 --> 00:11:15,640
Tehát figyelembe nulla, plusz két, mod 26,
ez a két, mod 26, ami számunkra kettő.

189
00:11:15,640 --> 00:11:18,780
És hát, tekintve
betűrendes index,

190
00:11:18,780 --> 00:11:23,930
C a harmadik betű a
ábécé, így felelne

191
00:11:23,930 --> 00:11:26,290
egy alfabetikus index kettő.

192
00:11:26,290 --> 00:11:29,850
Tehát úgy tűnik, hogy a
alfabetikus index ebben az esetben

193
00:11:29,850 --> 00:11:32,840
valóban ad nekünk a helyes eredményt.

194
00:11:32,840 --> 00:11:35,020
>> Tehát most nézzük, hogy
hátha az egyenlet munkák

195
00:11:35,020 --> 00:11:37,210
egy alfabetikus index.

196
00:11:37,210 --> 00:11:42,540
Y alfabetikus index 24, mint a
második az utolsó betű az ábécé.

197
00:11:42,540 --> 00:11:46,520
Így aztán 24 plusz a
gombot két számunkra 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 ad 0, ami szerencsés
minket, az alfabetikus index A.

199
00:11:54,750 --> 00:11:59,100
Így remélhetőleg ez elég bizonyíték, hogy
betűrendes mutató módszer működik.

200
00:11:59,100 --> 00:12:03,180
Ha nem, nyugodtan próbálja ki
Néhány példa a saját.

201
00:12:03,180 --> 00:12:08,030
>> Annak érdekében, hogy megfelelően beburkolják az
ábécé és alkalmazza a Caesar-egyenlet

202
00:12:08,030 --> 00:12:11,280
akkor tudjuk, hogy meg kell
foglalkoznak ABC indexek.

203
00:12:11,280 --> 00:12:15,130
De kezdjük az ASCII
értékeket, és csak ezután

204
00:12:15,130 --> 00:12:18,530
tudjuk majd áttért a
betűrendes mutató.

205
00:12:18,530 --> 00:12:23,970
Onnan, hogy nyomtatni, meg kell
foglalkozni az ASCII értékek újra.

206
00:12:23,970 --> 00:12:28,350
Tehát meg kell kitalálni, hogyan
megy ASCII alphabetical

207
00:12:28,350 --> 00:12:31,080
és ABC ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Szóval hagyjuk, hogy ki lehessen deríteni,
a minta között egy karakter

209
00:12:34,910 --> 00:12:38,590
és annak ábécé
index és ASCII értéke.

210
00:12:38,590 --> 00:12:41,530
Emlékszel, hogy bár
E táblázat jobb a dián

211
00:12:41,530 --> 00:12:45,630
mutatja a nagybetűket, mi is
kell vizsgálni, hogy az

212
00:12:45,630 --> 00:12:48,915
egy másik mintát kell alkalmazni
A kisbetűk.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Most, hogy kitaláltam
hogyan kell váltani egy karaktert,

215
00:12:55,840 --> 00:13:02,200
akkor minden meg kell tennünk az, hogy skála
fel menni az egész nyílt szöveg.

216
00:13:02,200 --> 00:13:04,260
Tehát a nyílt szöveg egy szöveg.

217
00:13:04,260 --> 00:13:08,210
Szerencsénkre, egy húr valóban
Csak egy sor karakterek,

218
00:13:08,210 --> 00:13:12,150
így annak érdekében, hogy hozzáférést minden karakter
egy string, mindössze annyit kell tennie,

219
00:13:12,150 --> 00:13:14,270
az, hogy az array jelöléssel.

220
00:13:14,270 --> 00:13:20,270
Mondom, van egy változó típusú
karakterláncot az úgynevezett "text = 'ez CS50."

221
00:13:20,270 --> 00:13:22,730
>> Nos, akkor annak érdekében, hogy
hozzáférhet minden karaktert,

222
00:13:22,730 --> 00:13:25,880
minden, amit meg kell csinálni
A változó szöveg

223
00:13:25,880 --> 00:13:31,660
azt is, szöveget index nulla, hogy
megfelel tőke T. szöveg indexen

224
00:13:31,660 --> 00:13:35,100
az egyik megfelel a kisbetűs H.

225
00:13:35,100 --> 00:13:38,110
Egy másik hasznos funkció
a húr hossza funkciót.

226
00:13:38,110 --> 00:13:40,760
Így halad egy string
hogy függvény visszatérési

227
00:13:40,760 --> 00:13:44,610
egy egész, a hossza a húr.

228
00:13:44,610 --> 00:13:47,060
>> Most, hogy már beszéltünk
ezeket a különböző elemeket,

229
00:13:47,060 --> 00:13:48,540
tegyük őket újra együtt.

230
00:13:48,540 --> 00:13:52,210
Így vissza, hogy akár én pszeudokód
kódot vagy a pszeudokód

231
00:13:52,210 --> 00:13:55,920
és megy keresztül, és győződjön meg arról, hogy
tudja, hogyan kell csinálni minden egyes dolog.

232
00:13:55,920 --> 00:14:01,520
Ismerkedés a kulcsot argc és argv,
a kulcs elfordítása egy egész,

233
00:14:01,520 --> 00:14:06,840
az i, kéri az egyszerű szöveges,
getString, majd iterációjával

234
00:14:06,840 --> 00:14:09,590
mint minden karakter
Az egyszerű szöveges karakterlánc,

235
00:14:09,590 --> 00:14:14,910
megőrizve az esetben minden egyes karakter
és igyekszik, hogy a karakter a kulcsot,

236
00:14:14,910 --> 00:14:17,520
annak biztosítása, hogy te
körülveszik az ábécé,

237
00:14:17,520 --> 00:14:20,850
végül a nyomtatás, hogy rejtjelezett.

238
00:14:20,850 --> 00:14:25,470
A nevem Amila, és ez volt Caesar.

239
00:14:25,470 --> 00:14:28,448

