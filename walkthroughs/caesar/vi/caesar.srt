1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> AMILA: Hãy giải quyết Caesar.

3
00:00:02,270 --> 00:00:06,110
Trong Caesar, chúng tôi cho phép người sử dụng
để mã hóa một thông điệp bí mật.

4
00:00:06,110 --> 00:00:09,780
Vì vậy, chúng ta hãy cùng tìm hiểu ngay và tìm kiếm
tại của chúng tôi to-dos cho vấn đề này.

5
00:00:09,780 --> 00:00:12,210
Vì vậy, đầu tiên, chúng tôi nhận được chìa khóa từ người sử dụng.

6
00:00:12,210 --> 00:00:15,210
Sau đó, chúng tôi nhận được bản rõ
rằng họ muốn để mã hóa.

7
00:00:15,210 --> 00:00:21,380
Sau đó, chúng tôi Mã hóa nó cho họ,
và cuối cùng chúng tôi in bản mã của họ.

8
00:00:21,380 --> 00:00:23,600
>> Vì vậy, chúng ta hãy bắt đầu với một ví dụ.

9
00:00:23,600 --> 00:00:26,920
Giả sử bạn muốn mã hóa
toàn bộ bảng chữ cái với khóa hai.

10
00:00:26,920 --> 00:00:31,360
Vâng, toàn bộ bảng chữ cái của bạn sẽ
chỉ được chuyển sang chữ cái.

11
00:00:31,360 --> 00:00:37,060
Vì vậy, A sẽ mã hóa để C, B
D, C đến E, vv và vv,

12
00:00:37,060 --> 00:00:42,470
cho đến khi bạn nhận được để X, mã hóa đến Z
hoặc Zed, tùy thuộc vào nơi bạn đang từ.

13
00:00:42,470 --> 00:00:47,445
Sau đó, Y sau đó sẽ thay đổi tất cả các cách,
quấn quanh bảng chữ cái để có được A,

14
00:00:47,445 --> 00:00:53,256
và cuối cùng là lá thư cuối cùng của
bảng chữ cái, Z, Zed, sẽ mã hóa đến B.

15
00:00:53,256 --> 00:00:54,660
>> Hiểu rồi chứ?

16
00:00:54,660 --> 00:00:56,380
Hãy xem xét một số ví dụ.

17
00:00:56,380 --> 00:01:00,540
Ví dụ đầu tiên ở đây là rất tương tự
những gì chúng ta vừa giải thích ở trên.

18
00:01:00,540 --> 00:01:05,560
Vì vậy, nếu tôi mã hóa một số khu vực
bảng chữ cái từ A đến L, theo một khóa hai,

19
00:01:05,560 --> 00:01:09,760
sau đó tôi chỉ nhận được toàn bộ của tôi
bảng chữ cái chuyển hai bức thư.

20
00:01:09,760 --> 00:01:12,230
>> Sau đó, trong ví dụ tiếp theo của tôi,
phím vẫn là hai,

21
00:01:12,230 --> 00:01:15,080
vì vậy bạn vẫn nên biết
mà chữ để mong đợi.

22
00:01:15,080 --> 00:01:16,400
Nhưng ở đây, đó là một cụm từ.

23
00:01:16,400 --> 00:01:18,100
Đây là CS50.

24
00:01:18,100 --> 00:01:21,090
Vì vậy, bạn sẽ nhận thấy rằng tôi
bảo tồn các trường hợp của các chữ cái của tôi,

25
00:01:21,090 --> 00:01:25,600
vì vậy bất kỳ trường hợp chữ hoa cũng là
chữ cái viết hoa trong các bản mã.

26
00:01:25,600 --> 00:01:27,800
Và bất kỳ chữ thường
chữ trong plaintext

27
00:01:27,800 --> 00:01:30,640
cũng được chữ thường
chữ cái trong bản mã.

28
00:01:30,640 --> 00:01:34,020
Nhưng tôi giữ các chữ cái
và bất kỳ dấu chấm than

29
00:01:34,020 --> 00:01:37,610
hoặc bất kỳ dấu chấm câu khác nhau.

30
00:01:37,610 --> 00:01:40,360
>> Vì vậy, bây giờ chúng ta có một cảm giác
cho cách chương trình làm,

31
00:01:40,360 --> 00:01:43,890
cảm thấy tự do để đi chạy một số chi tiết
ví dụ của riêng của bạn, nếu bạn muốn.

32
00:01:43,890 --> 00:01:47,072
Hãy bắt đầu với việc
chìa khóa từ người sử dụng.

33
00:01:47,072 --> 00:01:48,780
Theo truyền thống, với
các vấn đề khác, chúng tôi đã

34
00:01:48,780 --> 00:01:51,450
đã quen với việc nhận được
bất kỳ con số mà chúng tôi

35
00:01:51,450 --> 00:01:54,710
cần bằng cách khiến người sử dụng
với chức năng getInt.

36
00:01:54,710 --> 00:01:58,850
Nhưng lần này, chúng tôi đang thực sự đi
sử dụng các đối số dòng lệnh

37
00:01:58,850 --> 00:02:01,760
và một chức năng mới được gọi là atoi.

38
00:02:01,760 --> 00:02:05,130
>> Khi bạn chạy các chính
chương trình trong C, sau đó nó

39
00:02:05,130 --> 00:02:08,500
mất trong hai parameters--
int argc, mà

40
00:02:08,500 --> 00:02:11,670
là số đối số
thông qua tại, và sau đó

41
00:02:11,670 --> 00:02:15,920
argv, một mảng các chuỗi có chứa
danh sách của tất cả các đối số

42
00:02:15,920 --> 00:02:16,740
thông qua.

43
00:02:16,740 --> 00:02:19,740
Bạn không cần phải rõ ràng
để khai báo các biến này.

44
00:02:19,740 --> 00:02:22,700
Họ đang tính toán cho
bạn bởi trình biên dịch.

45
00:02:22,700 --> 00:02:28,160
sử dụng chính xác cho điều này sẽ là
cho argc là hai trong trường hợp này,

46
00:02:28,160 --> 00:02:32,630
bởi vì người dùng phải vượt qua trong
các cuộc gọi đến các chương trình, ./caesar,

47
00:02:32,630 --> 00:02:35,570
và sau đó là quan trọng,
bất kỳ số họ muốn.

48
00:02:35,570 --> 00:02:39,920
Vì vậy, đó có nghĩa là phải có hai argc
để cho việc sử dụng hợp lệ của Caesar

49
00:02:39,920 --> 00:02:41,680
được thực thi.

50
00:02:41,680 --> 00:02:43,590
>> Vì vậy, chúng ta hãy xem xét một ví dụ.

51
00:02:43,590 --> 00:02:47,760
Nói rằng tôi đã viết và
biên soạn một chương trình gọi là blastoff.

52
00:02:47,760 --> 00:02:52,670
Vì vậy, nếu tôi chạy trong dòng lệnh
./blastoff Team Rocket, tốt, sau đó,

53
00:02:52,670 --> 00:02:57,750
argc sẽ là ba vì tôi
thông qua trong ba đối số riêng biệt.

54
00:02:57,750 --> 00:02:59,830
Sau đó argv sẽ trông như thế này.

55
00:02:59,830 --> 00:03:03,750
Đây là một mảng, và nó sẽ
chứa một trong ba chuỗi.

56
00:03:03,750 --> 00:03:09,640
./blastoff trong chỉ mục, đội đầu tiên
ở bên cạnh, và tên lửa cuối cùng.

57
00:03:09,640 --> 00:03:11,610
>> Hãy nói về mảng cho một giây.

58
00:03:11,610 --> 00:03:15,560
Mảng là những cấu trúc dữ liệu mà giữ
nhiều giá trị cùng loại.

59
00:03:15,560 --> 00:03:19,980
Điều này có thể có ích khi chúng ta
có danh sách các số nguyên hoặc chuỗi.

60
00:03:19,980 --> 00:03:23,030
Chỉ cần nhớ rằng họ có
là cùng loại.

61
00:03:23,030 --> 00:03:25,310
Trong khoa học máy tính, chúng tôi
thích đếm từ số không,

62
00:03:25,310 --> 00:03:29,260
vì vậy hãy nhớ rằng các mảng
cũng không lập chỉ mục.

63
00:03:29,260 --> 00:03:34,360
Vì vậy, các phần tử đầu tiên của mảng của tôi
sẽ là ở chỉ số zero.

64
00:03:34,360 --> 00:03:37,580
Vì vậy, trong trường hợp này, khi tôi có
một mảng có độ dài bốn,

65
00:03:37,580 --> 00:03:41,350
sau đó chỉ số cuối cùng của
Yếu tố cuối cùng của mảng của tôi

66
00:03:41,350 --> 00:03:44,970
thực sự sẽ là
tại mục ba, không phải bốn.

67
00:03:44,970 --> 00:03:48,880
Bởi vì nhớ, chúng tôi
bắt đầu đếm từ số không.

68
00:03:48,880 --> 00:03:52,530
>> Dưới đây là một ví dụ về cách bạn
có thể tạo ra một mảng của riêng bạn.

69
00:03:52,530 --> 00:03:56,440
Vì vậy, nói tôi muốn để lưu trữ của tôi
ba tên con chó yêu thích.

70
00:03:56,440 --> 00:03:59,030
Sau đó, tôi sẽ tạo ra một mảng các chuỗi.

71
00:03:59,030 --> 00:04:04,450
Vì vậy, tôi sẽ khai báo các loại, chuỗi, và
sau đó đặt tên của mảng, chó,

72
00:04:04,450 --> 00:04:06,450
và sau đó trong những vuông
dấu ngoặc đặt size

73
00:04:06,450 --> 00:04:09,260
của array-- trong trường hợp này, ba.

74
00:04:09,260 --> 00:04:12,690
>> Vì vậy, mục đầu tiên của tôi là đi
là con chó ở chỉ số không,

75
00:04:12,690 --> 00:04:14,750
và đó sẽ là Milo.

76
00:04:14,750 --> 00:04:17,850
Sau đó, con chó ở chỉ số một
sẽ là ngu ngốc,

77
00:04:17,850 --> 00:04:23,060
yêu Mochi, và sau đó cuối cùng
nhập cảnh, nhập cảnh thứ ba tại chỉ số hai,

78
00:04:23,060 --> 00:04:26,130
sẽ là dễ thương, ngọt ngào Elphie.

79
00:04:26,130 --> 00:04:28,610
Bạn sẽ nhận thấy rằng định dạng
cho điền vào mảng này

80
00:04:28,610 --> 00:04:32,150
là rất nhiều như thế nào có lẽ bạn
tuyên bố bất kỳ biến khác, nơi

81
00:04:32,150 --> 00:04:36,307
bạn có tên biến tiếp theo
các giá trị mà bạn muốn lưu trữ trong nó.

82
00:04:36,307 --> 00:04:38,140
Sự khác biệt chỉ có tại
trường hợp này là bạn

83
00:04:38,140 --> 00:04:42,700
phải nhớ để đưa chỉ số
giá trị trong ngoặc vuông.

84
00:04:42,700 --> 00:04:46,420
Và chúng tôi đã có của chúng tôi
ba con chó yêu thích.

85
00:04:46,420 --> 00:04:48,780
>> Nhưng than ôi, đó là thời gian
để lại cho Caesar.

86
00:04:48,780 --> 00:04:52,910
Hãy nhớ rằng việc sử dụng chính xác cho các
người sử dụng sẽ được đi qua trong không chỉ

87
00:04:52,910 --> 00:04:57,430
tên của ./caesar chương trình, nhưng
còn là chìa khóa mà họ muốn thay đổi

88
00:04:57,430 --> 00:04:58,850
bản rõ bằng cách.

89
00:04:58,850 --> 00:05:01,540
Vì vậy, đó có nghĩa là argc phải có hai người.

90
00:05:01,540 --> 00:05:07,580
Họ phải vượt qua trong two-- không hơn, không
ít hơn so với hai đối số dòng lệnh.

91
00:05:07,580 --> 00:05:09,050
>> Bây giờ, những gì về argv?

92
00:05:09,050 --> 00:05:12,880
Vâng, chúng tôi đã biết rằng các
mảng là sẽ có chiều dài hai,

93
00:05:12,880 --> 00:05:15,270
nhưng những gì chứa trong mỗi phần tử?

94
00:05:15,270 --> 00:05:19,330
Vâng, yếu tố đầu tiên
sẽ là ./caesar,

95
00:05:19,330 --> 00:05:24,190
và sau đó các phần tử tiếp theo sẽ
chứa chìa khóa mà người dùng gõ vào.

96
00:05:24,190 --> 00:05:27,480
Bây giờ, nếu họ sử dụng nó một cách chính xác
cho việc sử dụng của Caesar,

97
00:05:27,480 --> 00:05:29,350
sau đó chúng ta sẽ phải nhập một số.

98
00:05:29,350 --> 00:05:33,260
Nhưng mặc dù các nhân vật
mà họ gõ là một số,

99
00:05:33,260 --> 00:05:35,790
đó là các kiểu dữ liệu chuỗi.

100
00:05:35,790 --> 00:05:40,390
>> Vì vậy, làm thế nào để chúng ta chuyển đổi đó
chuỗi số nguyên?

101
00:05:40,390 --> 00:05:46,680
Vì vậy, nói tôi có num, một chuỗi,
chứa chuỗi 50.

102
00:05:46,680 --> 00:05:49,000
Nếu tôi muốn chuyển đổi đó
để một số nguyên, sau đó tôi chỉ đơn giản

103
00:05:49,000 --> 00:05:53,340
khai báo một biến mới, một
số nguyên i, gọi atoi.

104
00:05:53,340 --> 00:06:01,160
Tôi vượt qua trong biến chuỗi của tôi, num, và
sau đó tôi sẽ chứa số 50.

105
00:06:01,160 --> 00:06:04,350
Hãy chắc chắn để kiểm tra người đàn ông
trang cho hàm atoi

106
00:06:04,350 --> 00:06:07,990
để kiểm tra thư viện mà nó
trong, cũng như những gì nó có giá trị

107
00:06:07,990 --> 00:06:14,550
sẽ trở lại nếu các chuỗi thông qua
trong không chứa tất cả các số.

108
00:06:14,550 --> 00:06:16,950
>> Vì vậy, bây giờ mà chúng tôi đã nhận được
chìa khóa, bước tiếp theo

109
00:06:16,950 --> 00:06:19,430
là để có được bản rõ từ người sử dụng.

110
00:06:19,430 --> 00:06:21,170
Bây giờ, điều này sẽ
ít phức tạp

111
00:06:21,170 --> 00:06:23,410
hơn điều hướng xung quanh
đối số dòng lệnh.

112
00:06:23,410 --> 00:06:26,190
Tất cả chúng ta phải làm là gọi
chức năng getString

113
00:06:26,190 --> 00:06:29,660
để nhắc nhở người dùng để cung cấp cho
chúng tôi là một chuỗi, nhưng hãy nhớ

114
00:06:29,660 --> 00:06:34,090
để kiểm tra các thông số kỹ thuật cho chúng ta như thế nào
có thể muốn nhắc nhở người dùng đó.

115
00:06:34,090 --> 00:06:36,420
>> Bây giờ chúng ta đến với
trái tim của problem--

116
00:06:36,420 --> 00:06:38,860
cách Mã hóa bản rõ.

117
00:06:38,860 --> 00:06:42,830
Vâng, đầu tiên, chúng ta hãy nói về làm thế nào
để Mã hóa một ký tự tại một thời gian,

118
00:06:42,830 --> 00:06:47,370
và sau đó chúng tôi sẽ giải quyết như thế nào để
lặp lại trên toàn bộ bản rõ.

119
00:06:47,370 --> 00:06:50,440
Tôi đã viết một số giả
cho vấn đề Caesar.

120
00:06:50,440 --> 00:06:52,310
Tôi khuyến khích bạn
viết riêng của bạn là tốt.

121
00:06:52,310 --> 00:06:55,900
Nó có thể không trông giống hệt
tôi, và đó là OK, nhưng miễn

122
00:06:55,900 --> 00:06:58,640
như là ý tưởng chung là như nhau.

123
00:06:58,640 --> 00:07:00,780
>> Ba bước đầu tiên
chúng ta đã làm.

124
00:07:00,780 --> 00:07:03,100
Chúng tôi đã nhận được chìa khóa từ
các đối số dòng lệnh,

125
00:07:03,100 --> 00:07:05,510
chúng tôi đã bật chìa khóa mà
vào một số nguyên, và chúng tôi đã

126
00:07:05,510 --> 00:07:09,320
nhắc nhở người sử dụng cho bản rõ
rằng họ muốn Mã hóa.

127
00:07:09,320 --> 00:07:12,420
Vì vậy, sau đó các đoạn lớn tiếp theo
đây là mỗi một nhân vật

128
00:07:12,420 --> 00:07:15,070
trong chuỗi chữ thô,
nếu nó là chữ cái,

129
00:07:15,070 --> 00:07:17,750
chúng ta muốn bảo tồn
trường hợp của mình và thay đổi nó.

130
00:07:17,750 --> 00:07:20,900
Bằng cách giữ gìn trường hợp, những gì tôi
có nghĩa là tất cả các trường hợp trên

131
00:07:20,900 --> 00:07:23,580
chữ nên vẫn còn trên
trường hợp và tất cả chữ thường

132
00:07:23,580 --> 00:07:25,640
nên vẫn còn chữ thường.

133
00:07:25,640 --> 00:07:29,110
Vì vậy, sau đó sau khi chúng tôi chuyển những,
sau đó chúng tôi in các bản mã.

134
00:07:29,110 --> 00:07:33,100
>> Dưới đây là ba chức năng đó sẽ
để có ích cho vấn đề này.

135
00:07:33,100 --> 00:07:38,010
Ghi lên trên khi tôi đã cho
Ví dụ cho việc chuyển đổi này là CS50?

136
00:07:38,010 --> 00:07:41,800
Hãy nhớ rằng 50 và
dấu chấm than không thay đổi?

137
00:07:41,800 --> 00:07:45,680
Vậy làm thế nào chúng ta có thể nói cho dù chúng tôi
cần phải thay đổi một lá thư hay không?

138
00:07:45,680 --> 00:07:48,650
Vâng, "là alpha," nếu
bạn vượt qua nó một ký tự,

139
00:07:48,650 --> 00:07:54,850
sẽ trả về true nếu nhân vật đó
là một bức thư và false.

140
00:07:54,850 --> 00:07:56,870
Để giúp bạn với
bảo quản vốn

141
00:07:56,870 --> 00:07:59,750
là chức năng "được
thượng "và" thấp ".

142
00:07:59,750 --> 00:08:03,350
>> Hai chức năng này cũng mất
trong một nhân vật duy nhất là đầu vào

143
00:08:03,350 --> 00:08:06,580
và trả lại cho bạn một Boolean,
đúng hoặc sai

144
00:08:06,580 --> 00:08:11,280
tùy thuộc vào việc nhân vật
là chữ hoa hay chữ thường.

145
00:08:11,280 --> 00:08:14,610
Bởi vì "là thượng" và "là
thấp hơn "là các hàm Boolean,

146
00:08:14,610 --> 00:08:18,660
có nghĩa là họ trả lại cho bạn một Boolean,
bạn có thể sử dụng chúng trong điều kiện của bạn.

147
00:08:18,660 --> 00:08:23,490
Vì vậy, đây là một đoạn mã mà chỉ
in thư nếu đó là trường hợp trên.

148
00:08:23,490 --> 00:08:27,790
Vì vậy, tôi đã tuyên bố nhân vật của tôi
thư được các trường hợp trên zed

149
00:08:27,790 --> 00:08:33,440
và sau đó nếu "là trên" trả về
sự thật, sau đó tôi in chữ đó.

150
00:08:33,440 --> 00:08:38,200
>> Trở lại với ví dụ đơn giản của chúng tôi
chuyển các bảng chữ cái bằng cách khóa hai,

151
00:08:38,200 --> 00:08:41,049
làm thế nào để chúng tôi thực sự nhận được rằng để làm việc?

152
00:08:41,049 --> 00:08:45,770
Vâng, nó chỉ ra rằng nhân vật
và số nguyên có liên quan rất chặt chẽ.

153
00:08:45,770 --> 00:08:48,840
Mỗi nhân vật có một
giá trị số nguyên liên quan

154
00:08:48,840 --> 00:08:53,260
với nó được tìm thấy trong các biểu đồ ASCII,
nơi ASCII của từng nhân vật

155
00:08:53,260 --> 00:08:55,380
giá trị được hiển thị.

156
00:08:55,380 --> 00:08:58,940
Vì vậy, một trường hợp trên tương ứng với A
đến một giá trị ASCII của 65

157
00:08:58,940 --> 00:09:02,270
và chữ thường a đến
một giá trị ASCII của 97.

158
00:09:02,270 --> 00:09:04,940
>> Hãy nhìn lên
bất kỳ ASCII biểu đồ trực tuyến

159
00:09:04,940 --> 00:09:07,720
để xem các giá trị cho chính mình.

160
00:09:07,720 --> 00:09:12,096
Vì vậy, điều này có nghĩa là chúng ta có thể
đưa các ký tự của chữ hoa A,

161
00:09:12,096 --> 00:09:18,200
thêm các số nguyên hai với nó, và sau đó nhận được
các nhân vật trên trường hợp C như một kết quả.

162
00:09:18,200 --> 00:09:23,720
Đó là bởi vì 65, ASCII
giá trị vốn A, cộng với 2,

163
00:09:23,720 --> 00:09:29,960
cho chúng ta 67, tương ứng
với nhân vật của trường hợp trên C.

164
00:09:29,960 --> 00:09:33,480
>> Thật không may, điều
sẽ không hoàn toàn đơn giản như vậy.

165
00:09:33,480 --> 00:09:36,980
Chúng tôi có một phương trình mà
chúng ta phải xem xét.

166
00:09:36,980 --> 00:09:43,590
Ở đây nó cho chúng ta biết rằng các bản mã thứ i
thư tương ứng với bản rõ thứ i

167
00:09:43,590 --> 00:09:48,900
thư, cộng với key--
tất cả điều đó, mô-đun 26.

168
00:09:48,900 --> 00:09:50,810
Tại sao lại như vậy không?

169
00:09:50,810 --> 00:09:55,430
Hãy trở lại với ví dụ của chúng tôi từ
trước, nơi vốn A, cộng với 2,

170
00:09:55,430 --> 00:09:57,590
cho chúng ta vốn C.

171
00:09:57,590 --> 00:10:01,870
>> Vì vậy, việc áp dụng các phương trình đó
các đặc điểm kỹ thuật cho chúng ta,

172
00:10:01,870 --> 00:10:06,660
sau đó hãy lấy vốn Một
cộng với 2 và mod 26.

173
00:10:06,660 --> 00:10:10,730
Vì vậy, vốn A, khi tôi đặt nó trong
những dấu ngoặc kép duy nhất,

174
00:10:10,730 --> 00:10:14,010
cho phép tôi để xử lý nó như
một số nguyên, do đó cho phép

175
00:10:14,010 --> 00:10:17,500
tôi bỏ nó vào giá trị ASCII của nó, 65.

176
00:10:17,500 --> 00:10:20,080
65 cộng với 2 là 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 cung cấp cho chúng tôi 15,
nhưng điều đó không thực sự

178
00:10:25,210 --> 00:10:32,590
có ý nghĩa bởi vì chúng ta biết rằng
vốn C giá trị ASCII là 67, không phải 15.

179
00:10:32,590 --> 00:10:35,580
Vì vậy, làm thế nào để chúng tôi tiến hành hoà giải mà?

180
00:10:35,580 --> 00:10:39,840
>> Vâng, ở đây tôi muốn thừa nhận những
khái niệm về một chỉ số theo thứ tự abc.

181
00:10:39,840 --> 00:10:44,010
Vì vậy, chúng tôi đã nói chuyện về làm thế nào
mỗi nhân vật có giá trị ASCII của nó,

182
00:10:44,010 --> 00:10:48,810
nhưng tôi muốn nói rằng, tốt, chúng ta hãy
suy nghĩ về mỗi nhân vật cũng có

183
00:10:48,810 --> 00:10:52,230
một số chữ cái,
trong đó A chẳng hạn,

184
00:10:52,230 --> 00:10:58,800
là chữ cái đầu tiên của bảng chữ cái,
có một chỉ số theo thứ tự abc bằng không.

185
00:10:58,800 --> 00:11:02,070
Vì vậy, bây giờ hãy áp dụng các
cùng một phương trình như trước,

186
00:11:02,070 --> 00:11:05,040
nhưng sử dụng một chỉ số theo thứ tự abc.

187
00:11:05,040 --> 00:11:07,810
>> Vì vậy, A là số không, như chúng ta đã xác định.

188
00:11:07,810 --> 00:11:15,640
Vì vậy, sau đó tham gia không cộng hai, mod 26,
đó là hai, mod 26, mà cho chúng ta hai.

189
00:11:15,640 --> 00:11:18,780
Và tốt, về
một số chữ cái,

190
00:11:18,780 --> 00:11:23,930
C là ký tự thứ ba trong
bảng chữ cái, do đó sẽ tương ứng

191
00:11:23,930 --> 00:11:26,290
đến một chỉ số chữ cái của hai.

192
00:11:26,290 --> 00:11:29,850
Vì vậy, có vẻ như sử dụng
Chỉ số chữ cái trong trường hợp này

193
00:11:29,850 --> 00:11:32,840
thực sự mang đến cho chúng ta những kết quả chính xác.

194
00:11:32,840 --> 00:11:35,020
>> Vì vậy, bây giờ hãy kiểm tra để
xem các công trình phương trình

195
00:11:35,020 --> 00:11:37,210
với một chỉ số theo thứ tự abc.

196
00:11:37,210 --> 00:11:42,540
Chỉ số chữ cái của Y là 24 là
thứ hai để lá thư cuối cùng trong bảng chữ cái.

197
00:11:42,540 --> 00:11:46,520
Vì vậy, sau đó 24 cộng với chúng tôi
quan trọng của hai cho chúng ta 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 cho chúng ta 0, trong đó, may mắn cho
chúng ta, là những chỉ số chữ cái cho A.

199
00:11:54,750 --> 00:11:59,100
Vì vậy, hy vọng đó là đủ để chứng minh
phương pháp chỉ số chữ cái hoạt động.

200
00:11:59,100 --> 00:12:03,180
Nếu không được, cảm thấy tự do để thử
một số ví dụ của riêng bạn.

201
00:12:03,180 --> 00:12:08,030
>> Để thi hành đúng quấn quanh
bảng chữ cái và áp dụng các phương trình Caesar,

202
00:12:08,030 --> 00:12:11,280
sau đó chúng ta biết rằng chúng ta cần phải
đối phó với các chỉ số theo thứ tự abc.

203
00:12:11,280 --> 00:12:15,130
Nhưng chúng ta bắt đầu với ASCII
giá trị, và chỉ sau đó

204
00:12:15,130 --> 00:12:18,530
Chúng ta sau đó chuyển sang
các chỉ số theo thứ tự abc.

205
00:12:18,530 --> 00:12:23,970
Từ đó, để in, chúng ta cần
để đối phó với các giá trị ASCII một lần nữa.

206
00:12:23,970 --> 00:12:28,350
Vì vậy, chúng ta cần phải tìm ra cách để
đi từ ASCII để thuộc về mẫu tự

207
00:12:28,350 --> 00:12:31,080
và từ chữ cái ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Vì vậy, tôi để lại nó cho bạn để tìm ra
mô hình giữa một nhân vật

209
00:12:34,910 --> 00:12:38,590
và chữ cái của nó
chỉ số và giá trị ASCII của nó.

210
00:12:38,590 --> 00:12:41,530
Bây giờ, hãy nhớ rằng mặc dù
bảng này ngay trên slide

211
00:12:41,530 --> 00:12:45,630
cho thấy các chữ in hoa, chúng tôi cũng
phải xem xét có hay không

212
00:12:45,630 --> 00:12:48,915
một mô hình khác nhau được áp dụng
đối với trường hợp nhân vật thấp hơn.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Vì vậy, bây giờ mà chúng tôi đã tìm ra
làm thế nào để thay đổi một nhân vật duy nhất,

215
00:12:55,840 --> 00:13:02,200
sau đó tất cả chúng ta phải làm là quy mô mà
lên để đi trên toàn bộ bản rõ.

216
00:13:02,200 --> 00:13:04,260
Vì vậy, rõ là một chuỗi.

217
00:13:04,260 --> 00:13:08,210
May mắn cho chúng tôi, một chuỗi thực sự là
chỉ là một mảng kí tự,

218
00:13:08,210 --> 00:13:12,150
do đó để truy cập vào tất cả các nhân vật
của một chuỗi, tất cả các bạn phải làm

219
00:13:12,150 --> 00:13:14,270
là sử dụng ký hiệu mảng.

220
00:13:14,270 --> 00:13:20,270
Nói rằng tôi có một biến kiểu
chuỗi gọi là "text = 'này là CS50.'"

221
00:13:20,270 --> 00:13:22,730
>> Vâng, sau đó, để
truy cập vào từng nhân vật,

222
00:13:22,730 --> 00:13:25,880
tất cả tôi phải làm với
các văn bản biến là

223
00:13:25,880 --> 00:13:31,660
nói tốt, văn bản tại chỉ số không, mà
tương ứng với T. vốn chữ ở chỉ số

224
00:13:31,660 --> 00:13:35,100
một tương ứng với các trường hợp thấp hơn h.

225
00:13:35,100 --> 00:13:38,110
Một chức năng hữu ích là
chức năng chiều dài chuỗi.

226
00:13:38,110 --> 00:13:40,760
Vì vậy, đi qua trong một chuỗi
chức năng đó sẽ trở lại

227
00:13:40,760 --> 00:13:44,610
một số nguyên, chiều dài của chuỗi.

228
00:13:44,610 --> 00:13:47,060
>> Bây giờ chúng ta đã nói về
tất cả những yếu tố khác nhau,

229
00:13:47,060 --> 00:13:48,540
chúng ta hãy đặt chúng lại với nhau.

230
00:13:48,540 --> 00:13:52,210
Vì vậy, trở lại hoặc giả của tôi
mã hoặc giả bạn

231
00:13:52,210 --> 00:13:55,920
và đi qua và chắc chắn rằng bạn
biết làm thế nào để làm mọi điều duy nhất.

232
00:13:55,920 --> 00:14:01,520
Bắt khóa bằng argc và argv,
biến chiếc chìa khóa vào một số nguyên, một

233
00:14:01,520 --> 00:14:06,840
cho tôi, khiến cho bản rõ,
getString, và sau đó lặp lại

234
00:14:06,840 --> 00:14:09,590
trên mỗi nhân vật trong
chuỗi chữ thô,

235
00:14:09,590 --> 00:14:14,910
bảo quản các trường hợp của từng nhân vật
và chuyển nhân vật bằng phím,

236
00:14:14,910 --> 00:14:17,520
đảm bảo rằng bạn đang
quấn quanh bảng chữ cái,

237
00:14:17,520 --> 00:14:20,850
cuối cùng đã in bản mã đó.

238
00:14:20,850 --> 00:14:25,470
Tên tôi là Amila, và điều này là Caesar.

239
00:14:25,470 --> 00:14:28,448

