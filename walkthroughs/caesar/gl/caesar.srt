1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Imos abordar César.

3
00:00:02,270 --> 00:00:06,110
En César, que permiten que o usuario
para codificar unha mensaxe secreta.

4
00:00:06,110 --> 00:00:09,780
Entón, imos mergullar na dereita e ollar
nas nosas to-dos a este problema.

5
00:00:09,780 --> 00:00:12,210
Entón, primeiro, temos a clave do usuario.

6
00:00:12,210 --> 00:00:15,210
Entón, temos o texto plano
querer codificar.

7
00:00:15,210 --> 00:00:21,380
Despois diso, nós cifrar-lo para eles,
e, finalmente, imprimir o seu texto cifrado.

8
00:00:21,380 --> 00:00:23,600
>> Entón, imos comezar cun exemplo.

9
00:00:23,600 --> 00:00:26,920
Digamos que quería para codificar o
toda alfabeto cunha chave de dúas.

10
00:00:26,920 --> 00:00:31,360
Ben, todo o seu alfabeto sería
só ser desprazado para letras.

11
00:00:31,360 --> 00:00:37,060
Así, un ía codificar para C, B para
D, C e E, así por diante e así por diante,

12
00:00:37,060 --> 00:00:42,470
ata chegar ao X, que codifica a Z
ou zed, dependendo de onde é.

13
00:00:42,470 --> 00:00:47,445
Entón Y, entón, cambiar toda a maneira,
participa en torno do alfabeto para chegar a A,

14
00:00:47,445 --> 00:00:53,256
e logo, finalmente, a última letra da
alfabeto, Z, zed, que codifican para B.

15
00:00:53,256 --> 00:00:54,660
>> Vostede entendeu?

16
00:00:54,660 --> 00:00:56,380
Vexamos algúns exemplos.

17
00:00:56,380 --> 00:01:00,540
O primeiro exemplo é moi semellante
ao que só se explica anteriormente.

18
00:01:00,540 --> 00:01:05,560
Entón, se eu codificar algunha sección do
alfabeto, de A a G, por unha chave de dúas,

19
00:01:05,560 --> 00:01:09,760
entón eu só incorporarse miña enteira
alfabeto desprazou dúas cartas.

20
00:01:09,760 --> 00:01:12,230
>> Entón, o meu seguinte exemplo,
a clave é aínda dous,

21
00:01:12,230 --> 00:01:15,080
así aínda que saber
que as letras que esperar.

22
00:01:15,080 --> 00:01:16,400
Pero aquí é unha frase.

23
00:01:16,400 --> 00:01:18,100
Este é CS50.

24
00:01:18,100 --> 00:01:21,090
Entón vai entender que eu
preservar o caso miñas cartas,

25
00:01:21,090 --> 00:01:25,600
polo que todas as letras maiúsculas son tamén
maiúsculas no texto cifrado.

26
00:01:25,600 --> 00:01:27,800
E calquera minúsculas
letras en texto

27
00:01:27,800 --> 00:01:30,640
tamén son minúsculas
letras no texto cifrado.

28
00:01:30,640 --> 00:01:34,020
Pero eu sigo as letras
e os puntos de exclamación

29
00:01:34,020 --> 00:01:37,610
ou calquera outro tipo de puntuación da mesma.

30
00:01:37,610 --> 00:01:40,360
>> Polo tanto, agora que temos un sentido
de como traballa o programa,

31
00:01:40,360 --> 00:01:43,890
Sinto-se libre para ir correr un pouco máis
exemplos do seu propio país, se o desexa.

32
00:01:43,890 --> 00:01:47,072
Imos comezar coa obtención
a clave do usuario.

33
00:01:47,072 --> 00:01:48,780
Tradicionalmente, con
outros problemas, temos

34
00:01:48,780 --> 00:01:51,450
foi acostumado a obter
todos os números que

35
00:01:51,450 --> 00:01:54,710
Debe avisar o usuario
coa getInt función.

36
00:01:54,710 --> 00:01:58,850
Pero esta vez imos realmente
usar o argumento da liña de comandos

37
00:01:58,850 --> 00:02:01,760
e unha nova función chamada atoi.

38
00:02:01,760 --> 00:02:05,130
>> Cando fai o principal
programa en C, entón

39
00:02:05,130 --> 00:02:08,500
leva en dous parameters--
int argc, que

40
00:02:08,500 --> 00:02:11,670
é o número de argumentos
transmitido, e entón

41
00:02:11,670 --> 00:02:15,920
argv, unha matriz de cadeas que contén
unha lista de todos os argumentos

42
00:02:15,920 --> 00:02:16,740
pasado.

43
00:02:16,740 --> 00:02:19,740
Non ten explicitamente
para declarar estas variables.

44
00:02:19,740 --> 00:02:22,700
Están computados para
vostede polo compilador.

45
00:02:22,700 --> 00:02:28,160
uso correcto para iso sería
argc para ser dúas neste caso

46
00:02:28,160 --> 00:02:32,630
porque o usuario ten que pasar en
a chamada ao programa, ./caesar,

47
00:02:32,630 --> 00:02:35,570
e, a continuación, a tecla,
calquera número que desexa.

48
00:02:35,570 --> 00:02:39,920
Entón isto significa que argc debe ser dous
Para que un uso válida de César

49
00:02:39,920 --> 00:02:41,680
para ser executado.

50
00:02:41,680 --> 00:02:43,590
>> Entón, imos ollar un exemplo.

51
00:02:43,590 --> 00:02:47,760
Digamos que eu xa escribín e
compilado un programa chamado blastoff.

52
00:02:47,760 --> 00:02:52,670
Entón, se eu execute na liña de comandos
./blastoff Equipo Rocket, ben, entón,

53
00:02:52,670 --> 00:02:57,750
argc serían tres, porque
pasados ​​en tres argumentos distintos.

54
00:02:57,750 --> 00:02:59,830
Entón argv quedaría así.

55
00:02:59,830 --> 00:03:03,750
É unha matriz, e sería
conter cada un dos tres cordas.

56
00:03:03,750 --> 00:03:09,640
./blastoff o primeiro índice, equipo
o próximo, e foguete no último.

57
00:03:09,640 --> 00:03:11,610
>> Imos falar sobre matrices para un segundo.

58
00:03:11,610 --> 00:03:15,560
Matrices son estruturas de datos que almacenan
varios valores do mesmo tipo.

59
00:03:15,560 --> 00:03:19,980
Isto pode vir a cadra cando
teñen listas de números enteiros ou cadeas.

60
00:03:19,980 --> 00:03:23,030
Basta lembrar que teñen
para ser do mesmo tipo.

61
00:03:23,030 --> 00:03:25,310
Na ciencia da computación, nós
amor contando desde cero,

62
00:03:25,310 --> 00:03:29,260
entón recorda que as matrices
tamén están con índice cero.

63
00:03:29,260 --> 00:03:34,360
Así, o primeiro elemento da miña matriz
será no índice cero.

64
00:03:34,360 --> 00:03:37,580
Polo tanto, neste caso, cando teño
unha matriz de lonxitude de catro,

65
00:03:37,580 --> 00:03:41,350
a continuación, o último índice do
último elemento da miña matriz

66
00:03:41,350 --> 00:03:44,970
é realmente vai ser
no índice tres, non catro.

67
00:03:44,970 --> 00:03:48,880
Porque lembre, nós
comezar a contar en cero.

68
00:03:48,880 --> 00:03:52,530
>> Aquí está un exemplo de como
Pode crear unha matriz de seu propio país.

69
00:03:52,530 --> 00:03:56,440
Entón, digamos que eu quería para gardar a miña
tres nomes favoritos do can.

70
00:03:56,440 --> 00:03:59,030
Entón eu ía crear unha matriz de cadeas.

71
00:03:59,030 --> 00:04:04,450
Así, quere declarar o tipo, corda, e
a continuación, colocar o nome da matriz, cans,

72
00:04:04,450 --> 00:04:06,450
e, a continuación, os cadrados
soportes de poñer o tamaño

73
00:04:06,450 --> 00:04:09,260
do array-- neste caso tres.

74
00:04:09,260 --> 00:04:12,690
>> Así, a miña primeira entrada vai
para ser cans no índice cero,

75
00:04:12,690 --> 00:04:14,750
e que será Milo.

76
00:04:14,750 --> 00:04:17,850
Entón cans nun índice de
será pateta,

77
00:04:17,850 --> 00:04:23,060
querida Mochi, e, a continuación, o último
entrada, a terceira entrada no índice dous,

78
00:04:23,060 --> 00:04:26,130
vai ser bonito, doce Elphie.

79
00:04:26,130 --> 00:04:28,610
Vai notar que o formato
para cubrir esa matriz

80
00:04:28,610 --> 00:04:32,150
é moi parecido como pode
declarar outra variable, onde

81
00:04:32,150 --> 00:04:36,307
ten o nome da variable seguido
o valor que quere almacenados nel.

82
00:04:36,307 --> 00:04:38,140
A única diferenza en
Neste caso é que

83
00:04:38,140 --> 00:04:42,700
Ten que se lembrar de poñer o índice
do valor entre corchetes.

84
00:04:42,700 --> 00:04:46,420
E aí temos o noso
tres cans favoritos.

85
00:04:46,420 --> 00:04:48,780
>> Pero, desgraciadamente, é hora
para volver a César.

86
00:04:48,780 --> 00:04:52,910
Lembre que o uso correcto para o
usuario estará pasando, non só

87
00:04:52,910 --> 00:04:57,430
o nome do programa ./caesar pero
tamén a clave que queren cambiar

88
00:04:57,430 --> 00:04:58,850
seu texto por.

89
00:04:58,850 --> 00:05:01,540
Entón isto significa que argc debe ser dous.

90
00:05:01,540 --> 00:05:07,580
Deben pasar dois-- nin máis, nin
menos de dous argumentos de liña de comandos.

91
00:05:07,580 --> 00:05:09,050
>> Agora, que tal argv?

92
00:05:09,050 --> 00:05:12,880
Ben, xa sabemos que a
matriz será de lonxitude dous,

93
00:05:12,880 --> 00:05:15,270
pero o que está contido en cada elemento?

94
00:05:15,270 --> 00:05:19,330
Ben, o primeiro elemento
será ./caesar,

95
00:05:19,330 --> 00:05:24,190
e, a continuación, o seguinte elemento vai
conter a clave que o usuario inseriu.

96
00:05:24,190 --> 00:05:27,480
Agora, se utilizaban-lo correctamente
para o uso de César,

97
00:05:27,480 --> 00:05:29,350
A continuación, eles van para inserir un número.

98
00:05:29,350 --> 00:05:33,260
Pero aínda que o personaxe
que tipo é un número,

99
00:05:33,260 --> 00:05:35,790
é do tipo cadea de datos.

100
00:05:35,790 --> 00:05:40,390
>> Entón, como imos converter esta
cadea para un enteiro?

101
00:05:40,390 --> 00:05:46,680
Entón, dicir que teño un, unha corda,
que contén a cadea 50.

102
00:05:46,680 --> 00:05:49,000
Se eu queira converter ese
para un enteiro, entón eu simplemente

103
00:05:49,000 --> 00:05:53,340
declarar unha nova variable, un
enteiro I, chamando atoi.

104
00:05:53,340 --> 00:06:01,160
Pasar o meu variable de cadea, nun, e
entón eu conterá entón o número 50.

105
00:06:01,160 --> 00:06:04,350
Asegúrese de comprobar o home
páxinas para a función atoi

106
00:06:04,350 --> 00:06:07,990
para comprobar cal biblioteca é
no, así como o valor que

107
00:06:07,990 --> 00:06:14,550
volverá a cadea pasada
en non conter todos os números.

108
00:06:14,550 --> 00:06:16,950
>> Polo tanto, agora que obtivemos
a clave, o seguinte paso

109
00:06:16,950 --> 00:06:19,430
é facer que o texto orixinal do usuario.

110
00:06:19,430 --> 00:06:21,170
Agora, iso vai
ser menos complicada

111
00:06:21,170 --> 00:06:23,410
que navegar arredor do
argumentos de liña de comandos.

112
00:06:23,410 --> 00:06:26,190
Todo o que temos que facer é chamar
a función getString

113
00:06:26,190 --> 00:06:29,660
para pedir ao usuario para dar
-Nos unha corda, pero lembre se

114
00:06:29,660 --> 00:06:34,090
para comprobar as especificacións de como nós
Pode querer para solicitar ao usuario para iso.

115
00:06:34,090 --> 00:06:36,420
>> Agora chegamos á
corazón do problema--

116
00:06:36,420 --> 00:06:38,860
como cifrar o texto plano.

117
00:06:38,860 --> 00:06:42,830
Ben, en primeiro lugar, imos falar sobre como
para cifrar un carácter de cada vez,

118
00:06:42,830 --> 00:06:47,370
e despois imos abordar como
iterado sobre todo o texto simple.

119
00:06:47,370 --> 00:06:50,440
Escribín algúns pseudocódigo
ao problema de César.

120
00:06:50,440 --> 00:06:52,310
Estimula-vos a
escribir o seu propio ben.

121
00:06:52,310 --> 00:06:55,900
Pode non parecer idéntico á
meu, e iso é OK, pero sempre

122
00:06:55,900 --> 00:06:58,640
como a idea xeral é a mesma.

123
00:06:58,640 --> 00:07:00,780
>> Os tres primeiros pasos
xa fixemos.

124
00:07:00,780 --> 00:07:03,100
Comezamos a clave
argumento da liña de comandos,

125
00:07:03,100 --> 00:07:05,510
nós transformamos esa chave
nun número enteiro, e

126
00:07:05,510 --> 00:07:09,320
solicitado ao usuario para o texto
que queren cifrar.

127
00:07:09,320 --> 00:07:12,420
Entón a próxima gran peza
é que, para cada carácter

128
00:07:12,420 --> 00:07:15,070
na secuencia de texto,
se é alfabético,

129
00:07:15,070 --> 00:07:17,750
queremos conservar
o caso e transferir-lo.

130
00:07:17,750 --> 00:07:20,900
Ao conservar a caso, o que eu
quero dicir é que todas as letras maiúsculas

131
00:07:20,900 --> 00:07:23,580
letras debe permanecer superior
caso e todas as letras minúsculas

132
00:07:23,580 --> 00:07:25,640
debe permanecer en minúsculas.

133
00:07:25,640 --> 00:07:29,110
Entón, a continuación, despois de cambiar os,
entón imprimir o texto cifrado.

134
00:07:29,110 --> 00:07:33,100
>> Aquí están tres funcións que van
de vir a cadra para este problema.

135
00:07:33,100 --> 00:07:38,010
Marca-se por riba cando eu dei o
exemplo para desprazarse este é CS50?

136
00:07:38,010 --> 00:07:41,800
Lembre que o 50 eo
signo de exclamación non cambiar?

137
00:07:41,800 --> 00:07:45,680
Entón, como podemos dicir si
que cambiar unha letra ou non?

138
00:07:45,680 --> 00:07:48,650
Ben, "é alfa," se
vostede pasalo un personaxe,

139
00:07:48,650 --> 00:07:54,850
volverá true se ese personaxe
é unha letra e falso se non.

140
00:07:54,850 --> 00:07:56,870
Para axudar con
preservando capitalización

141
00:07:56,870 --> 00:07:59,750
son as funcións "está
superior "e" inferior é. "

142
00:07:59,750 --> 00:08:03,350
>> Estas dúas funcións tamén tomar
nun único carácter como entrada

143
00:08:03,350 --> 00:08:06,580
e voltar un booleano,
verdadeiro ou falso

144
00:08:06,580 --> 00:08:11,280
dependendo se ese personaxe
é maiúsculas ou minúsculas.

145
00:08:11,280 --> 00:08:14,610
Porque "é superior" e "é
inferior "son funcións booleanas,

146
00:08:14,610 --> 00:08:18,660
o que significa que eles retornan un booleano,
podes usalos nas súas condicións.

147
00:08:18,660 --> 00:08:23,490
Entón aquí está o treito de código que só
imprime carta se é maiúscula.

148
00:08:23,490 --> 00:08:27,790
Entón eu dixo a miña personaxe
carta para ser o caso superior zed

149
00:08:27,790 --> 00:08:33,440
e entón, se "é superior" retorno
verdade, entón eu imprimir esta letra.

150
00:08:33,440 --> 00:08:38,200
>> Volvendo ao noso exemplo simple
desprazando o alfabeto por unha chave de dúas,

151
00:08:38,200 --> 00:08:41,049
como é que imos realmente ter que traballar?

152
00:08:41,049 --> 00:08:45,770
Ben, acontece que personaxes
e enteiros están intimamente relacionados.

153
00:08:45,770 --> 00:08:48,840
Cada personaxe ten unha
valor enteiro asociado

154
00:08:48,840 --> 00:08:53,260
con el atopou no gráfico ASCII,
onde ASCII de cada personaxe

155
00:08:53,260 --> 00:08:55,380
valor aparece.

156
00:08:55,380 --> 00:08:58,940
Así, un corresponde un caso superior
para un valor ASCII de 65

157
00:08:58,940 --> 00:09:02,270
e unha minúscula ao
un valor ASCII de 97.

158
00:09:02,270 --> 00:09:04,940
>> Sinto-se libre para mirar para arriba
calquera gráfico ASCII en liña

159
00:09:04,940 --> 00:09:07,720
para ver eses valores para si mesmo.

160
00:09:07,720 --> 00:09:12,096
Entón, o que isto significa que podemos
asumir o carácter de maiúsculas A,

161
00:09:12,096 --> 00:09:18,200
engadir o número enteiro de dous a ela, e logo, obter
o caso de caracteres C superior como resultado.

162
00:09:18,200 --> 00:09:23,720
Porque 65, o ASCII
valor para o capital de A, máis 2,

163
00:09:23,720 --> 00:09:29,960
ofrécenos 67, o que corresponde
ao carácter de maiúsculas C.

164
00:09:29,960 --> 00:09:33,480
>> Desafortunadamente, as cousas
non moi ser tan sinxelo.

165
00:09:33,480 --> 00:09:36,980
Temos unha ecuación que
debemos considerar.

166
00:09:36,980 --> 00:09:43,590
Aquí nos di que o texto cifrado om
letra corresponde ao texto om

167
00:09:43,590 --> 00:09:48,900
carta, ademais da key--
todo isto, modular 26.

168
00:09:48,900 --> 00:09:50,810
Por que é este o caso?

169
00:09:50,810 --> 00:09:55,430
Imos volver ao noso exemplo de
antes, onde o capital A, máis 2,

170
00:09:55,430 --> 00:09:57,590
dános de capital C.

171
00:09:57,590 --> 00:10:01,870
>> Así que a aplicación da ecuación
especificación dános,

172
00:10:01,870 --> 00:10:06,660
logo imos dar maiúsculo
ademais de 2 e mod que 26.

173
00:10:06,660 --> 00:10:10,730
Así, o capital A, cando poñelas
esas comiñas,

174
00:10:10,730 --> 00:10:14,010
permíteme a trata-lo como
un número enteiro, de xeito que permite

175
00:10:14,010 --> 00:10:17,500
me para lanzalo ao seu valor ASCII, 65.

176
00:10:17,500 --> 00:10:20,080
65 + 2 e 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 dános 15,
pero iso realmente non

178
00:10:25,210 --> 00:10:32,590
ten sentido, porque sabemos que o
capital de valor ASCII C é de 67, e non 15.

179
00:10:32,590 --> 00:10:35,580
Entón, como podemos conciliar iso?

180
00:10:35,580 --> 00:10:39,840
>> Ben, aquí gustaríame postular a
noción dun índice alfabético.

181
00:10:39,840 --> 00:10:44,010
Entón, nós xa falamos de como
Cada personaxe ten o seu valor ASCII,

182
00:10:44,010 --> 00:10:48,810
pero gustaríame dicir, ben, imos
pensar en cada personaxe ter

183
00:10:48,810 --> 00:10:52,230
un índice alfabético,
onde A, por exemplo,

184
00:10:52,230 --> 00:10:58,800
como a primeira letra do alfabeto,
ten un índice alfabético de cero.

185
00:10:58,800 --> 00:11:02,070
Entón agora imos aplicar o
mesma ecuación, como antes,

186
00:11:02,070 --> 00:11:05,040
pero usando un índice alfabético.

187
00:11:05,040 --> 00:11:07,810
>> Entón A é cero, como xa definido.

188
00:11:07,810 --> 00:11:15,640
Entón, a continuación, tendo cero dous, mod 26,
que é dous, mod 26, o que nos dá dous.

189
00:11:15,640 --> 00:11:18,780
E así, en termos de
un índice alfabético,

190
00:11:18,780 --> 00:11:23,930
C é a terceira letra na
alfabeto, de xeito que correspondería

191
00:11:23,930 --> 00:11:26,290
para un índice alfabético de dous.

192
00:11:26,290 --> 00:11:29,850
Así, parece que a utilización do
Índice alfabético, neste caso,

193
00:11:29,850 --> 00:11:32,840
realmente nos dá o resultado correcto.

194
00:11:32,840 --> 00:11:35,020
>> Entón agora imos comprobar a
ver as obras de ecuacións

195
00:11:35,020 --> 00:11:37,210
cun índice alfabético.

196
00:11:37,210 --> 00:11:42,540
Índice alfabético de Y é de 24 como a
segundo a última letra do alfabeto.

197
00:11:42,540 --> 00:11:46,520
Así entón 24 máis a nosa
clave de dous dános 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 dános 0, o que, por sorte
nós, é o índice alfabético para A.

199
00:11:54,750 --> 00:11:59,100
Polo tanto, esperamos que iso é proba suficiente de que
o método índice alfabético funciona.

200
00:11:59,100 --> 00:12:03,180
Se non, Sinto-se libre para probar
algúns exemplos do seu propio país.

201
00:12:03,180 --> 00:12:08,030
>> A fin de involucrar adecuadamente en torno á
alfabeto e aplicar a ecuación de César,

202
00:12:08,030 --> 00:12:11,280
entón sabemos que necesitamos
xestionar índices alfabéticos.

203
00:12:11,280 --> 00:12:15,130
Pero imos comezar con ASCII
valores, e só entón

204
00:12:15,130 --> 00:12:18,530
nós, logo converter a
o índice alfabético.

205
00:12:18,530 --> 00:12:23,970
De alí, a fin de imprimir, cómpre
para xestionar os valores ASCII novo.

206
00:12:23,970 --> 00:12:28,350
Entón, necesitamos descubrir como
ir de ASCII a orde alfabética

207
00:12:28,350 --> 00:12:31,080
e de alfabética para ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Entón eu deixo para descubrir
o estándar entre un personaxe

209
00:12:34,910 --> 00:12:38,590
e os seus alfabética
Índice eo seu valor ASCII.

210
00:12:38,590 --> 00:12:41,530
Agora lembre que, a pesar de
este dereito táboa no slide

211
00:12:41,530 --> 00:12:45,630
mostra as maiúsculas, nós tamén
Ten que considerar se é ou non

212
00:12:45,630 --> 00:12:48,915
un patrón diferente aplicable
para os caracteres minúsculos.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Polo tanto, agora que descubrimos
como cambiar un único personaxe,

215
00:12:55,840 --> 00:13:02,200
logo todos temos que facer é escala que
-Se para ir ao longo de todo o texto plano.

216
00:13:02,200 --> 00:13:04,260
Así, o texto orixinal é unha cadea.

217
00:13:04,260 --> 00:13:08,210
Sorte para nós, unha cadea é realmente
só un array de caracteres,

218
00:13:08,210 --> 00:13:12,150
por iso, para acceder cada personaxe
dunha cadea, o único que tes que facer

219
00:13:12,150 --> 00:13:14,270
é usar a notación de matriz.

220
00:13:14,270 --> 00:13:20,270
Digamos que teña unha variable do tipo
cadea chamada "text =" este é CS50 '. "

221
00:13:20,270 --> 00:13:22,730
>> Pois ben, a fin de
acceder cada personaxe,

222
00:13:22,730 --> 00:13:25,880
todo o que teño que ver con
O texto variable é

223
00:13:25,880 --> 00:13:31,660
para dicir ben, o texto no índice cero, que
corresponde ao capital T. texto no índice

224
00:13:31,660 --> 00:13:35,100
unha corresponde ao caso inferior h.

225
00:13:35,100 --> 00:13:38,110
Outra función útil é
a función lonxitude da corda.

226
00:13:38,110 --> 00:13:40,760
Entón, pasando nunha cadea
que a función pode voltar

227
00:13:40,760 --> 00:13:44,610
un enteiro, a lonxitude desta corda.

228
00:13:44,610 --> 00:13:47,060
>> Agora que xa falamos sobre
todos estes elementos diferentes,

229
00:13:47,060 --> 00:13:48,540
imos xuntalos de novo.

230
00:13:48,540 --> 00:13:52,210
Entón, volver en calquera meu pseudocódigo
código é o pseudocódigo

231
00:13:52,210 --> 00:13:55,920
e pasar por e asegúrese de que
sabe como facer cada cousa.

232
00:13:55,920 --> 00:14:01,520
Obtendo a chave a usar argc e argv,
xirando a clave para un número enteiro, un

233
00:14:01,520 --> 00:14:06,840
para i, alertando para texto,
getString, a continuación, a iteración

234
00:14:06,840 --> 00:14:09,590
sobre cada personaxe
a cadea de texto,

235
00:14:09,590 --> 00:14:14,910
preservando o caso de cada carácter
e cambiando ese carácter pola chave,

236
00:14:14,910 --> 00:14:17,520
garantir que está
enrolar o alfabeto,

237
00:14:17,520 --> 00:14:20,850
finalmente, imprimir o texto cifrado.

238
00:14:20,850 --> 00:14:25,470
O meu nome é Amila, e esta era César.

239
00:14:25,470 --> 00:14:28,448

