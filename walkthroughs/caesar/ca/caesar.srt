1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Anem a fer front a César.

3
00:00:02,270 --> 00:00:06,110
En César, permetem que l'usuari
per codificar un missatge secret.

4
00:00:06,110 --> 00:00:09,780
Així que anem a bussejar en dret i mirar
en les nostres tasques pendents per aquest problema.

5
00:00:09,780 --> 00:00:12,210
Així que, primer, s'obté la clau de l'usuari.

6
00:00:12,210 --> 00:00:15,210
Llavors vam aconseguir el text pla
que volen codificar.

7
00:00:15,210 --> 00:00:21,380
Després d'això, es xifren per a ells,
i, finalment, és la impressió del seu text xifrat.

8
00:00:21,380 --> 00:00:23,600
>> Així que començarem amb un exemple.

9
00:00:23,600 --> 00:00:26,920
Digues que vols codificar el
tota alfabet amb una clau de dos.

10
00:00:26,920 --> 00:00:31,360
Bé, tot l'alfabet faria
acaba de ser desplaçat a les cartes.

11
00:00:31,360 --> 00:00:37,060
Així que seria una codificar a C, B
D, C i E, així successivament i així successivament,

12
00:00:37,060 --> 00:00:42,470
fins a arribar a X, que codifica a la Z
o zeta, depenent d'on ets.

13
00:00:42,470 --> 00:00:47,445
Llavors I llavors canviar tot el camí,
embolicar al voltant de l'alfabet per arribar a A,

14
00:00:47,445 --> 00:00:53,256
i, finalment, l'última lletra de la
alfabet, Z, zeta, codificaria a B.

15
00:00:53,256 --> 00:00:54,660
>> En això tens?

16
00:00:54,660 --> 00:00:56,380
Vegem alguns exemples.

17
00:00:56,380 --> 00:01:00,540
El primer exemple és molt similar
al que s'acaba d'explicar.

18
00:01:00,540 --> 00:01:05,560
Així que si puc codificar alguna secció del
alfabet, A a L, per una clau de dos,

19
00:01:05,560 --> 00:01:09,760
llavors almenys ficar tota
alfabet va canviar dues cartes.

20
00:01:09,760 --> 00:01:12,230
>> Llavors, al meu següent exemple,
la clau segueix sent dos,

21
00:01:12,230 --> 00:01:15,080
de manera que encara ha de saber
que les lletres a esperar.

22
00:01:15,080 --> 00:01:16,400
Però aquí es tracta d'una frase.

23
00:01:16,400 --> 00:01:18,100
Això és CS50.

24
00:01:18,100 --> 00:01:21,090
Així s'adonarà que jo
preservar el cas de les meves cartes,

25
00:01:21,090 --> 00:01:25,600
pel que qualsevol lletres majúscules són també
les lletres majúscules en el text xifrat.

26
00:01:25,600 --> 00:01:27,800
I qualsevol minúscules
lletres en el text pla

27
00:01:27,800 --> 00:01:30,640
També s'escriuen en minúscula
lletres en el text xifrat.

28
00:01:30,640 --> 00:01:34,020
Però guardo les lletres
i qualsevol signe d'exclamació

29
00:01:34,020 --> 00:01:37,610
o qualsevol altre puntuació la mateixa.

30
00:01:37,610 --> 00:01:40,360
>> Així que ara que tenim un sentit
per al funcionament del programa,

31
00:01:40,360 --> 00:01:43,890
no dubteu a anar córrer una mica més
exemples de la seva pròpia, si ho desitja.

32
00:01:43,890 --> 00:01:47,072
Anem a començar amb aconseguir
la clau de l'usuari.

33
00:01:47,072 --> 00:01:48,780
Tradicionalment, amb
altres problemes, hem

34
00:01:48,780 --> 00:01:51,450
acostumat a aconseguir
qualsevol nombre que ens

35
00:01:51,450 --> 00:01:54,710
necessita per preguntar a l'usuari
amb la getInt funció.

36
00:01:54,710 --> 00:01:58,850
Però aquesta vegada estem realment va
utilitzar l'argument de la línia d'ordres

37
00:01:58,850 --> 00:02:01,760
i una nova funció anomenada atoi.

38
00:02:01,760 --> 00:02:05,130
>> Quan s'executa el principal
programa en C, llavors es

39
00:02:05,130 --> 00:02:08,500
presa en dos parameters--
int argc, que

40
00:02:08,500 --> 00:02:11,670
és el nombre d'arguments
aprovada en, i després

41
00:02:11,670 --> 00:02:15,920
argv, una matriu de cadenes que conté
la llista de tots els arguments

42
00:02:15,920 --> 00:02:16,740
passat.

43
00:02:16,740 --> 00:02:19,740
No cal que de forma explícita
per declarar aquestes variables.

44
00:02:19,740 --> 00:02:22,700
Estan calculats per
pel compilador.

45
00:02:22,700 --> 00:02:28,160
L'ús correcte per això seria
per argc sigui dues en aquest cas,

46
00:02:28,160 --> 00:02:32,630
perquè l'usuari ha de passar a
la crida al programa, ./caesar,

47
00:02:32,630 --> 00:02:35,570
i després la tecla,
qualsevol que sigui el nombre que desitgin.

48
00:02:35,570 --> 00:02:39,920
Això vol dir que ha d'haver dos argc
Perquè un ús vàlid de César

49
00:02:39,920 --> 00:02:41,680
per a ser executat.

50
00:02:41,680 --> 00:02:43,590
>> Així que anem a veure un exemple.

51
00:02:43,590 --> 00:02:47,760
Diguem que ja he escrit i
compilat un programa anomenat enlairament.

52
00:02:47,760 --> 00:02:52,670
Així que si em vaig trobar en la línia d'ordres
./blastoff Equip Rocket, bé, llavors,

53
00:02:52,670 --> 00:02:57,750
argc serien tres, perquè jo
aprovada en tres arguments diferents.

54
00:02:57,750 --> 00:02:59,830
Llavors argv es veuria així.

55
00:02:59,830 --> 00:03:03,750
És una matriu, i seria
contenir cadascuna de les tres cadenes.

56
00:03:03,750 --> 00:03:09,640
./blastoff en el primer índex, l'equip
en el següent, i el coet en el passat.

57
00:03:09,640 --> 00:03:11,610
>> Anem a parlar sobre les matrius d'un segon.

58
00:03:11,610 --> 00:03:15,560
Les matrius són estructures de dades que mantenen
diversos valors del mateix tipus.

59
00:03:15,560 --> 00:03:19,980
Això pot ser útil quan ens
tenir llistes de nombres sencers o cadenes.

60
00:03:19,980 --> 00:03:23,030
Només recorda que tenen
a ser del mateix tipus.

61
00:03:23,030 --> 00:03:25,310
En informàtica, ens
amor a comptar des de zero,

62
00:03:25,310 --> 00:03:29,260
per tal de recordar que les matrius
són també zero-indexada.

63
00:03:29,260 --> 00:03:34,360
Així que el primer element de la meva matriu
serà en l'índex zero.

64
00:03:34,360 --> 00:03:37,580
Així doncs, en aquest cas, quan tinc
una matriu de longitud 4,

65
00:03:37,580 --> 00:03:41,350
a continuació, l'últim índex de la
últim element de la meva matriu

66
00:03:41,350 --> 00:03:44,970
és en realitat serà
en l'índex de tres, no quatre.

67
00:03:44,970 --> 00:03:48,880
Perquè recorda, ens
començarà a comptar des de zero.

68
00:03:48,880 --> 00:03:52,530
>> Heus aquí un exemple de com es
podria crear una matriu de la seva compte.

69
00:03:52,530 --> 00:03:56,440
Així que dir que volia guardar el meu
tres noms gos preferit.

70
00:03:56,440 --> 00:03:59,030
A continuació, m'agradaria crear una matriu de cadenes.

71
00:03:59,030 --> 00:04:04,450
Així que m'agradaria declarar el tipus, seqüència, i
a continuació, posar el nom de la matriu, gossos,

72
00:04:04,450 --> 00:04:06,450
i després en els quadrats
suports de posar la mida

73
00:04:06,450 --> 00:04:09,260
de la array-- en aquest cas, tres.

74
00:04:09,260 --> 00:04:12,690
>> Així que la meva primera entrada va
per ser gossos en l'índex zero,

75
00:04:12,690 --> 00:04:14,750
i que va a ser Milo.

76
00:04:14,750 --> 00:04:17,850
A continuació, els gossos en l'índex 1
va a ser maldestre,

77
00:04:17,850 --> 00:04:23,060
Mochi estimada, i després l'última
entrada, la tercera entrada en l'índex 2,

78
00:04:23,060 --> 00:04:26,130
va a ser valent, dolç Elphie.

79
00:04:26,130 --> 00:04:28,610
Es donarà compte de que el format
per a l'ompliment en aquesta matriu

80
00:04:28,610 --> 00:04:32,150
és molt semblant a com es pot
declarar qualsevol altra variable on

81
00:04:32,150 --> 00:04:36,307
vostè té el nom de la variable seguit de
el valor que voleu emmagatzemar en ell.

82
00:04:36,307 --> 00:04:38,140
L'única diferència en
aquest cas és que es

83
00:04:38,140 --> 00:04:42,700
Cal recordar que posar l'índex
del valor entre claudàtors.

84
00:04:42,700 --> 00:04:46,420
I aquí tenim la nostra
tres gossos favorits.

85
00:04:46,420 --> 00:04:48,780
>> Però, per desgràcia, és el moment
per tornar a César.

86
00:04:48,780 --> 00:04:52,910
Recordeu que l'ús correcte de la
usuari serà passant en no només

87
00:04:52,910 --> 00:04:57,430
el nom de la ./caesar programa, però
També la clau que volen canviar

88
00:04:57,430 --> 00:04:58,850
el seu text pla per.

89
00:04:58,850 --> 00:05:01,540
Això vol dir que argc ha d'haver dos.

90
00:05:01,540 --> 00:05:07,580
Ells han de passar a dos-- ni més ni
menys de dos arguments de línia de comandes.

91
00:05:07,580 --> 00:05:09,050
>> Ara, què passa amb argv?

92
00:05:09,050 --> 00:05:12,880
Bé, ja sabem que la
matriu tindrà una longitud de dos,

93
00:05:12,880 --> 00:05:15,270
però el que està continguda en cada element?

94
00:05:15,270 --> 00:05:19,330
Bé, el primer element
serà ./caesar,

95
00:05:19,330 --> 00:05:24,190
i després el següent element es va a
contenir la clau que l'usuari va escriure.

96
00:05:24,190 --> 00:05:27,480
Ara, si s'utilitzen correctament
per a l'ús de César,

97
00:05:27,480 --> 00:05:29,350
a continuació, van a escriure un nombre.

98
00:05:29,350 --> 00:05:33,260
Però tot i que el caràcter
que tipus és un nombre,

99
00:05:33,260 --> 00:05:35,790
que és de tipus cadena de dades.

100
00:05:35,790 --> 00:05:40,390
>> Llavors, com convertir aquest
cadena en un enter?

101
00:05:40,390 --> 00:05:46,680
Així que dir que tinc num, una cadena,
que conté la cadena 50.

102
00:05:46,680 --> 00:05:49,000
Si vull convertir aquest
a un sencer, llavors jo simplement

103
00:05:49,000 --> 00:05:53,340
declarar una nova variable, un
enter i, cridant atoi.

104
00:05:53,340 --> 00:06:01,160
Jo pas en la meva variable de cadena, num, i
llavors jo llavors contindrà el número 50.

105
00:06:01,160 --> 00:06:04,350
Assegureu-vos de revisar l'home
pàgines per a la funció atoi

106
00:06:04,350 --> 00:06:07,990
per comprovar quina biblioteca és
en, així com quin valor

107
00:06:07,990 --> 00:06:14,550
retornarà si la cadena va passar
en no conté tots els nombres.

108
00:06:14,550 --> 00:06:16,950
>> Així que ara que hem aconseguit
la clau, el següent pas

109
00:06:16,950 --> 00:06:19,430
és aconseguir que el text en clar per part de l'usuari.

110
00:06:19,430 --> 00:06:21,170
Ara, això va a
ser menys complicat

111
00:06:21,170 --> 00:06:23,410
de navegar al voltant de la
arguments de línia de comandes.

112
00:06:23,410 --> 00:06:26,190
Tot el que hem de fer és trucar
la funció getString

113
00:06:26,190 --> 00:06:29,660
per demanar a l'usuari per donar
som una cadena, però recorda

114
00:06:29,660 --> 00:06:34,090
per comprovar les especificacions de la forma en què
pot ser que vulgui demanar a l'usuari per això.

115
00:06:34,090 --> 00:06:36,420
>> Ara arribem a la
cor de la problema--

116
00:06:36,420 --> 00:06:38,860
com xifrar el text en clar.

117
00:06:38,860 --> 00:06:42,830
Bé, en primer lloc, parlarem sobre com
per xifrar un caràcter alhora,

118
00:06:42,830 --> 00:06:47,370
i després abordarem com
iterar al llarg de tot el text en clar.

119
00:06:47,370 --> 00:06:50,440
He escrit alguns pseudocodi
per al problema de César.

120
00:06:50,440 --> 00:06:52,310
Us animo a
escriure la seva pròpia també.

121
00:06:52,310 --> 00:06:55,900
Podria no semblar idèntics
la meva, i això està bé, però sempre

122
00:06:55,900 --> 00:06:58,640
com la idea general és la mateixa.

123
00:06:58,640 --> 00:07:00,780
>> Els primers tres passos
que ja hem fet.

124
00:07:00,780 --> 00:07:03,100
Hem rebut la clau de
l'argument de línia d'ordres,

125
00:07:03,100 --> 00:07:05,510
hem donat volta a aquesta tecla
en un sencer, i hem

126
00:07:05,510 --> 00:07:09,320
se li demanarà que el text pla
que volen xifrar.

127
00:07:09,320 --> 00:07:12,420
Així llavors el següent tros gran
és que per a cada caràcter

128
00:07:12,420 --> 00:07:15,070
a la cadena de text clar,
si és alfabètic,

129
00:07:15,070 --> 00:07:17,750
volem preservar
el seu cas i el desplacen.

130
00:07:17,750 --> 00:07:20,900
Per preservar cas, el que
volen dir és que tot en majúscules

131
00:07:20,900 --> 00:07:23,580
cartes han de seguir sent superior
cas i totes les lletres minúscules

132
00:07:23,580 --> 00:07:25,640
ha de romandre en minúscules.

133
00:07:25,640 --> 00:07:29,110
Així que a continuació, després vam canviar aquells,
a continuació, vam imprimir el text xifrat.

134
00:07:29,110 --> 00:07:33,100
>> Aquí hi ha tres funcions que es van
a ser molt útil per a aquest problema.

135
00:07:33,100 --> 00:07:38,010
Recordeu dalt quan em va donar el
exemple per al desplaçament d'aquest és CS50?

136
00:07:38,010 --> 00:07:41,800
Recordeu que el 50 i el
signe d'exclamació no va canviar?

137
00:07:41,800 --> 00:07:45,680
Llavors, com podem saber si estem
que hagi de canviar una lletra o no?

138
00:07:45,680 --> 00:07:48,650
Bé, "és alfa," si
se li passa un personatge,

139
00:07:48,650 --> 00:07:54,850
retornarà veritable si aquest personatge
és una carta i fals en cas contrari.

140
00:07:54,850 --> 00:07:56,870
Per ajudar amb
capitalització de la preservació

141
00:07:56,870 --> 00:07:59,750
són les funcions "es
superior "i" és menor ".

142
00:07:59,750 --> 00:08:03,350
>> Aquestes dues funcions també prenen
en un sol personatge com a entrada

143
00:08:03,350 --> 00:08:06,580
i retornar un booleà,
ja sigui vertadera o falsa

144
00:08:06,580 --> 00:08:11,280
depenent de si aquest caràcter
en majúscula o minúscula.

145
00:08:11,280 --> 00:08:14,610
Perquè "és superior" i "és
inferior "són funcions de Boole,

146
00:08:14,610 --> 00:08:18,660
el que significa que es retornen un booleà,
pot utilitzar aquests en les seves condicions.

147
00:08:18,660 --> 00:08:23,490
Així que aquí està un fragment de codi que només
imprimeix una carta si és majúscula.

148
00:08:23,490 --> 00:08:27,790
Així que he declarat el meu personatge
carta a ser la caixa superior zed

149
00:08:27,790 --> 00:08:33,440
i després, si "és" retorns superiors
veritat, llavors puc imprimir aquesta lletra.

150
00:08:33,440 --> 00:08:38,200
>> Tornant al nostre exemple simple de
canviant l'alfabet per una clau de dos,

151
00:08:38,200 --> 00:08:41,049
¿Com podem aconseguir que funcioni?

152
00:08:41,049 --> 00:08:45,770
Doncs bé, resulta que els caràcters
i nombres enters estan molt estretament relacionats.

153
00:08:45,770 --> 00:08:48,840
Cada personatge té una
valor sencer associat

154
00:08:48,840 --> 00:08:53,260
amb el trobat en la taula ASCII,
on ASCII de cada caràcter

155
00:08:53,260 --> 00:08:55,380
Es mostra el valor.

156
00:08:55,380 --> 00:08:58,940
Pel que una caixa superior correspon una
a un valor ASCII de 65

157
00:08:58,940 --> 00:09:02,270
i una minúscula de
un valor ASCII de 97.

158
00:09:02,270 --> 00:09:04,940
>> No dubti a consultar
qualsevol gràfic ASCII en línia

159
00:09:04,940 --> 00:09:07,720
per veure aquests valors per si mateix.

160
00:09:07,720 --> 00:09:12,096
Així que el que això significa és que podem
prendre el caràcter de majúscules A,

161
00:09:12,096 --> 00:09:18,200
afegir el número sencer de dos a ella, i després
el caràcter superior cas C com a resultat.

162
00:09:18,200 --> 00:09:23,720
Això es deu a 65, l'ASCII
valor per al capital A, més 2,

163
00:09:23,720 --> 00:09:29,960
ens dóna 67, que correspon
al caràcter de la caixa superior C.

164
00:09:29,960 --> 00:09:33,480
>> Desafortunadament, les coses
es no és tan senzill.

165
00:09:33,480 --> 00:09:36,980
Tenim una equació que
hem de considerar.

166
00:09:36,980 --> 00:09:43,590
Aquí se'ns diu que el text xifrat ITH
lletra correspon al text clar ITH

167
00:09:43,590 --> 00:09:48,900
carta, a més de la key--
tot això, modular 26.

168
00:09:48,900 --> 00:09:50,810
Per què és aquest el cas?

169
00:09:50,810 --> 00:09:55,430
Tornem al nostre exemple de
abans, on el capital A, més 2,

170
00:09:55,430 --> 00:09:57,590
ens dóna el capital C.

171
00:09:57,590 --> 00:10:01,870
>> Així l'aplicació de l'equació que
l'especificació ens dóna,

172
00:10:01,870 --> 00:10:06,660
a continuació, anem a fer majúscula
més 2 i mod que en un 26.

173
00:10:06,660 --> 00:10:10,730
Així majúscula, quan ho poso en
aquestes cometes simples,

174
00:10:10,730 --> 00:10:14,010
em permet tractar com
un nombre sencer, de manera que permet

175
00:10:14,010 --> 00:10:17,500
la meva intenció de posar al seu valor ASCII, de 65 anys.

176
00:10:17,500 --> 00:10:20,080
65 més 2 és 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 ens dóna 15,
però que en realitat no es

178
00:10:25,210 --> 00:10:32,590
té sentit perquè sabem que la
C majúscula valor ASCII és 67, no 15.

179
00:10:32,590 --> 00:10:35,580
Llavors, com podem reconciliar això?

180
00:10:35,580 --> 00:10:39,840
>> Bé, aquí m'agradaria plantejar la
noció d'un índex alfabètic.

181
00:10:39,840 --> 00:10:44,010
Així que ja hem parlat de com
cada personatge té el seu valor ASCII,

182
00:10:44,010 --> 00:10:48,810
però m'agradaria dir, bé, anem a
pensar en cada personatge també té

183
00:10:48,810 --> 00:10:52,230
un índex alfabètic,
en la qual A, per exemple,

184
00:10:52,230 --> 00:10:58,800
com la primera lletra de l'alfabet,
té un índex alfabètic de zero.

185
00:10:58,800 --> 00:11:02,070
Així que ara anem a aplicar la
mateixa equació que abans,

186
00:11:02,070 --> 00:11:05,040
però l'ús d'un índex alfabètic.

187
00:11:05,040 --> 00:11:07,810
>> Així que A és zero, ja que hem definit.

188
00:11:07,810 --> 00:11:15,640
Així que després de prendre zero més dos, mod 26,
això és dues, mod 26, el que ens dóna dues.

189
00:11:15,640 --> 00:11:18,780
I així, en termes de
un índex alfabètic,

190
00:11:18,780 --> 00:11:23,930
C és la tercera lletra en el
alfabet, de manera que correspondria

191
00:11:23,930 --> 00:11:26,290
a un índex alfabètic de tots dos.

192
00:11:26,290 --> 00:11:29,850
Per tant, sembla que l'ús de la
índex alfabètic en aquest cas

193
00:11:29,850 --> 00:11:32,840
en realitat ens dóna el resultat correcte.

194
00:11:32,840 --> 00:11:35,020
>> Així que ara anem a veure a
veure si les obres d'equacions

195
00:11:35,020 --> 00:11:37,210
amb un índex alfabètic.

196
00:11:37,210 --> 00:11:42,540
índex alfabètic de I és com el 24
segona a l'última lletra de l'alfabet.

197
00:11:42,540 --> 00:11:46,520
Així llavors 24 més la nostra
clau de dues ens dóna 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 ens dóna 0, el que, per sort per a
nosaltres, és l'índex alfabètic d'A

199
00:11:54,750 --> 00:11:59,100
Així que espero que això és suficient que la prova
el mètode de l'índex alfabètic funciona.

200
00:11:59,100 --> 00:12:03,180
Si no és així, no dubteu a provar
alguns exemples del seu propi.

201
00:12:03,180 --> 00:12:08,030
>> Per tal d'embolicar adequadament al voltant de la
alfabet i aplicar l'equació de Cèsar,

202
00:12:08,030 --> 00:12:11,280
llavors sabem que necessitem
fer front als índexs alfabètics.

203
00:12:11,280 --> 00:12:15,130
Però comencem amb ASCII
valors, i només llavors

204
00:12:15,130 --> 00:12:18,530
Com podem llavors convertim a
l'índex alfabètic.

205
00:12:18,530 --> 00:12:23,970
A partir d'aquí, per tal d'imprimir, ens cal
per fer front als valors ASCII de nou.

206
00:12:23,970 --> 00:12:28,350
Així que hem de trobar la manera de
anar d'ASCII alfabètics

207
00:12:28,350 --> 00:12:31,080
i des alfabètic per ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Així que ho deixo a vostè per esbrinar
el patró entre un caràcter

209
00:12:34,910 --> 00:12:38,590
i el seu alfabètic
índex i el seu valor ASCII.

210
00:12:38,590 --> 00:12:41,530
Ara, recordeu que encara que
aquesta taula a la dreta a la diapositiva

211
00:12:41,530 --> 00:12:45,630
Mostra el majúscules, també
considerar si o no

212
00:12:45,630 --> 00:12:48,915
un patró diferent s'aplica
per als caràcters en minúscula.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Així que ara que hem descobert
com canviar un sol caràcter,

215
00:12:55,840 --> 00:13:02,200
llavors tot el que hem de fer és que l'escala
per anar a través de tot el text en clar.

216
00:13:02,200 --> 00:13:04,260
Pel que el text pla és una cadena.

217
00:13:04,260 --> 00:13:08,210
Per sort per a nosaltres, una cadena és realment
simplement un conjunt de caràcters,

218
00:13:08,210 --> 00:13:12,150
així per tal d'accedir a cada caràcter
d'una cadena, tot el que ha de fer

219
00:13:12,150 --> 00:13:14,270
és l'ús de la notació de matriu.

220
00:13:14,270 --> 00:13:20,270
Dir que tinc una variable de tipus
cadena anomenat "text =" això és CS50. ' "

221
00:13:20,270 --> 00:13:22,730
>> Bé, llavors, per tal de
accedir a cada personatge,

222
00:13:22,730 --> 00:13:25,880
tot el que he de veure amb
El text variable és

223
00:13:25,880 --> 00:13:31,660
dir així, el text en l'índex zero,
es correspon amb T majúscula de text en l'índex

224
00:13:31,660 --> 00:13:35,100
1 correspon a la caixa inferior h.

225
00:13:35,100 --> 00:13:38,110
Una altra funció útil és
la funció de longitud de la cadena.

226
00:13:38,110 --> 00:13:40,760
Pel que passa en una cadena de
que funció retornarà

227
00:13:40,760 --> 00:13:44,610
un nombre sencer, la longitud d'aquesta cadena.

228
00:13:44,610 --> 00:13:47,060
>> Ara que ja hem parlat de
tots aquests elements diferents,

229
00:13:47,060 --> 00:13:48,540
posarem de nou junts.

230
00:13:48,540 --> 00:13:52,210
Així que tornar a qualsevol de la meva pseudocodi
codi o el seu pseudocodi

231
00:13:52,210 --> 00:13:55,920
i anar a través i assegureu-vos que vostè
saber com fer cada cosa.

232
00:13:55,920 --> 00:14:01,520
Obtenció de la clau utilitzant argc i argv,
girant la clau en un sencer, una

233
00:14:01,520 --> 00:14:06,840
a i, el que va portar a text pla,
getString i, a continuació, la iteració

234
00:14:06,840 --> 00:14:09,590
sobre tots els personatges de
la cadena de text clar,

235
00:14:09,590 --> 00:14:14,910
preservant el cas de cada caràcter
i canviant el caràcter amb la tecla,

236
00:14:14,910 --> 00:14:17,520
assegurant que ets
embolicar al voltant de l'alfabet,

237
00:14:17,520 --> 00:14:20,850
finalment la impressió que el text xifrat.

238
00:14:20,850 --> 00:14:25,470
El meu nom és Amila, i això era César.

239
00:14:25,470 --> 00:14:28,448

