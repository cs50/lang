Amila: Katsotaanpa puuttua Caesar. Vuonna Caesar, annamme käyttäjä koodata salaista. Joten sukellus oikealle ja katsoa meidän tehtävälistoja tähän ongelmaan. Ensin, saamme avain käyttäjän. Sitten saamme selväkielisenä että he haluavat koodata. Sen jälkeen meidän encipher se heille, ja lopulta me tulostaa niiden salakieli. 

Joten aloitetaan esimerkillä. Sano halusi koodata Koko aakkoset avaimella kaksi. No, koko aakkoset olisi vain siirretään kirjaimia. Joten voisi koodata C, B D, C-E, niin edelleen ja niin edelleen, kunnes saat X, joka koodaa Z tai zed, riippuen siitä, missä olet kotoisin. Niin Y sitten siirtää koko matkan, kietoa aakkoset päästä A, ja sitten lopulta viimeinen kirjain aakkoset, Z, zed, olisi koodata B. 

Ymmärsitkö? Katsotaanpa muutamia esimerkkejä. Ensimmäinen esimerkki tästä on hyvin samankaltainen mitä me juuri edellä on selitetty. Jos siis koodata joitakin osa aakkoset, Kautta L, jonka keskeinen kaksi, Sitten saan vain minun koko aakkoset siirtynyt kaksi kirjainta. 

Sitten minun seuraava esimerkki, avain on vielä kaksi, joten kannattaa silti tietää mitkä kirjaimet odottaa. Mutta tässä se on lause. Tämä on CS50. Joten huomaat, että minä säilyttää tapauksessa kirjeeni, joten kaikki isot kirjaimet ovat myös isoja kirjaimia salakieli. Ja mitään pieniä kirjaimia selväkielisenä Myös pieniä kirjaimia kirjaimia salakieli. Mutta pidän kirjaimet ja kaikki huutomerkkejä tai mikä tahansa muu välimerkkejä sama. 

Joten nyt meillä on tunnetta kuinka ohjelma toimii, vapaasti mennä ajaa lisää esimerkkejä oman, jos haluat. Aloitetaan saada avain käyttäjän. Perinteisesti kanssa muita ongelmia, olemme tottuneet saamaan numeroita, että me tarvitsevat kehottamalla käyttäjää funktiolla getint. Mutta tällä kertaa olemme todella menossa käyttää komentorivillä ja uusi toiminto nimeltään atoi. 

Kun ajaa tärkeimmät ohjelma C, niin se vie kaksi parameters-- int argc, joka on argumenttien lukumäärä kului, ja sitten argv, merkkijonojen joukko, joka sisältää luettelon kaikista argumentit kulunut. Et itse ole julistaa näistä muuttujista. He laskettu varten te kääntäjä. Oikea käyttö tähän olisi for argc olevan kaksi tässä tapauksessa, koska käyttäjän on kulkea puhelun ohjelman ./caesar, ja sitten avain, mitä numero he haluavat. Niin se tarkoittaa, että argc on kaksi Jotta pätevä käytön Caesar suoritettavaksi. 

Joten Katsotaanpa esimerkkiä. Sano Olen jo kirjoittanut ja koonnut ohjelma nimeltä BlastOff. Joten jos juoksin komentorivin ./blastoff rakettiryhmä, hyvin, sitten, argc olisi kolme, koska olen hyväksyttiin kolme erillistä väitettä. Sitten argv näyttää tältä. Se on jono, ja se olisi sisältävät kukin kolmesta jouset. ./blastoff ensimmäisen indeksin, joukkue seuraavassa, ja raketti viimeisessä. 

Puhutaanpa paneelit sek. Taulukot ovat tietorakenteita, jotka pitävät useita arvoja samaa tyyppiä. Tämä on kätevää, kun on luettelot kokonaislukuja tai merkkijonoja. Muista vain niillä olla samaa tyyppiä. Tietotekniikassa, me Rakastamme laskenta nollasta, niin muista, että paneelit Myös nolla-indeksoitu. Niinpä ensimmäinen osa minun array on menossa olevan indeksin nolla. Joten tässä tapauksessa, kun olen joukko pituudeltaan neljä, sitten viimeinen indeksi viimeinen osa minun array on todella olemaan indeksissä kolme, ei neljä. Koska muistaa, me alkaa laskea nollasta. 

Tässä on esimerkki siitä, miten voisi luoda joukko omia. Joten sanoa halusin tallenna kolme suosikki koiran nimet. Sitten minä loisi Merkkijonotaulukko. Siksi haluan julistaa tyyppi, string, ja sitten laittaa taulukon nimen, koirat, ja sitten ne neliön suluissa laittaa koko n array-- tässä tapauksessa kolme. 

Joten minun ensimmäinen merkintä on menossa olla koiria indeksi nolla, ja että tulee olemaan Milo. Sitten koirat indeksissä yksi tulee olemaan Hessu, Darling Mochi, ja sitten viimeinen merkintä, kolmas merkintä indeksin kaksi, tulee olemaan söpö, suloinen Elphie. Huomaat, että formaatti täyttämistä tähän array on hyvin samankaltainen kuin miten saatat ilmoitettava kaikki muut muuttuvat, joissa olet muuttujan nimen perässä arvo, jonka haluat tallennetut sitä. Ainoa ero Tässä tapauksessa on, että on muistettava laittaa indeksiin arvon hakasuluissa. Ja meillä on kolme suosikki koiraa. 

Mutta valitettavasti, on aika päästä takaisin Caesar. Muista, että oikea käyttö varten Käyttäjä aiotaan ohimennen paitsi nimi ohjelman ./caesar, mutta myös avain, että he haluavat siirtää niiden selväkielisenä mukaan. Niin se tarkoittaa, että argc oltava kaksi. Niiden on kulkea two-- ei enempää eikä alle kaksi komentoriviargumentteja. 

Nyt entä argv? No, me tiedämme jo, että array tulee olemaan pituuden kaksi, mutta mitä sisältämän jokaisen elementin? No, ensimmäinen elementti tulee olemaan ./caesar, ja sitten seuraava elementti on menossa sisältävät näppäintä, että käyttäjä kirjoitettu. Nyt, jos niitä käytetään oikein että käyttö Caesar, Sitten he tulevat kirjoittaa numeron. Mutta vaikka merkki että he kirjoittavat on numero, se on tietojen tyypin merkkijono. 

Miten siis muuntaa että merkkijono kokonaisluku? Niin sanon on num, merkkijono, jossa lukee 50. Jos haluan muuntaa että kokonaisluku, niin en yksinkertaisesti julistaa uusi muuttuja, joka on kokonaislukulaskutoimituksen i kutsuen atoi. Välitän minun merkkijono muuttujan, num, ja niin minä sitten sisältää numeron 50. Muista tarkistaa miehelle sivuja atoi toiminto tarkistamaan, mitä kirjaston se in, sekä mitä arvostavat sitä palauttaa jos merkkijono välitetään in ei sisällä kaikkia numeroita. 

Joten nyt olemme saaneet avain, seuraava askel on saada selkokielisen käyttäjältä. Nyt tämä tulee olla vähemmän monimutkaista kuin navigointia komentoriviargumentteja. Meidän täytyy vain soittaa getstring toiminto pyytää käyttäjältä antamaan meille merkkijonon, mutta muista tarkistaa tiedot, miten me kannattaa tiedustella käyttäjältä, jotka. 

Nyt tulemme sydän problem-- miten sala selväkielisenä. No, ensinnäkin, puhutaanpa miten salakirjoittaa yksi merkki kerrallaan, ja sitten me käsitellä sitä, kuinka kerrata koko selväkielisenä. Olen kirjoittanut joitakin pseudokoodina että Caesar ongelma. Kannustan teitä kirjoita samoin. Se ei ehkä näytä identtisiä minun, ja se on OK, mutta niin kauan koska yleinen ajatus on sama. 

Ensimmäiset kolme vaihetta olemme jo tehneet. Olemme saaneet avain komentoriviltä argumentti, olemme ottaneet että avain osaksi kokonaisluku, ja olemme kehotetaan käyttäjää antamaan selkokielisen että he haluavat encipher. Niin seuraava iso möhkäle on se, että kunkin merkin selvätekstissä merkkijono, jos se on aakkosellinen, haluamme säilyttää asiaansa ja siirtää sitä. Vuoteen säilyttää tapauksessa mitä sanoa, että kaikki isoilla kirjaimilla kirjaimet pitäisi pysyä ylemmän kotelo ja pieniä kirjaimia olisi edelleen pieniä. Niinpä sitten kun siirrämme ne, sitten tulostaa salakieli. 

Tässä on kolme toimintoa, jotka ovat menossa tulla kätevä tähän ongelmaan. Muista ylhäällä kun annoin esimerkiksi siirtämällä tämä on CS50? Muista, että 50 ja huutomerkki ei siirrä? Joten kuinka voimme kertoa, onko meillä täytyy siirtää kirjeen vai ei? No, "on alpha", jos ohitat sen merkin, palauttaa true, jos kyseisen merkin on kirjain ja väärän toisin. Auttaa sinua säilöntä-arvo ovat toiminnot "on ylempi "ja" on alempi. " 

Nämä kaksi funktiota myös yhdessä merkin syötteenä ja palauttaa sinulle totuusarvoarvoja joko tosi tai epätosi riippuen siitä, että merkki on isoja tai pieniä kirjaimia. Koska "on ylempi" ja "on alempi "ovat Boolen toimintoja, mikä tarkoittaa, että he palaavat sinulle totuusarvoarvoja voit käyttää näitä teidän olosuhteissa. Joten tässä on koodinpätkä, joka vain tulostaa kirjeen, jos se isoiksi. Joten olen julistettu hahmoni kirjaimen kohdalle ylempään koteloon Zed ja sitten jos "on ylempi" tuotto totta, sitten tulostaa, että kirjeen. 

Menee takaisin meidän yksinkertainen esimerkki siirtämällä aakkoset avaimella kaksi, miten me itse saada se toimimaan? No, käy ilmi, että merkkiä ja kokonaisluvut ovat hyvin läheistä sukua. Jokaisella hahmolla on kokonaislukuarvo liittyvä se löytyy ASCII kaavio, jossa jokaisen hahmon ASCII arvo näkyy. Niin isoja A vastaa ASCII-arvo 65 ja pieniä a- ASCII-arvo 97. 

Voit vapaasti etsiä tahansa ASCII kaavio verkossa nähdä nämä arvot itse. Joten mitä tämä tarkoittaa, että voimme ottaa luonnetta yläkotelon A, lisätä kokonaisluku kaksi siihen, ja sitten saat merkki yläkotelo C seurauksena. Tämä johtuu 65, ASCII arvoa pääoman A plus 2, antaa meille 67, mikä vastaa luonnetta suuria kirjaimia C. 

Valitettavasti asiat ei aivan niin yksinkertaista. Meillä on yhtälö, joka meidän on harkittava. Tässä se kertoo, että i: nnen salakieli kirjain vastaa nteen selväkielisenä kirjain, plus key-- kaikki tämä, modulaarinen 26. Miksi näin? Palataan takaisin meidän esimerkki ennen, joissa pääoman A plus 2, antaa meille pääoma C. 

Joten soveltamalla yhtälö erittely antaa meille, niin ottakaamme Capitalille plus 2 ja mod että 26. Joten pääoma A, kun laitan sen nämä lainausmerkkejä, sallii minun pitää sitä kokonaisluku, niin että voidaan minun heittää sen ASCII-arvo, 65. 65 plus 2 on 67. 67 mod 26 antaa meille 15, mutta joka ei oikeastaan järkeä, koska tiedämme, että pääoma C ASCII-arvo 67, ei 15. Miten siis sovittaa yhteen, että? 

No, tässä haluaisin posit käsitteenkin aakkosellinen hakemisto. Siksi olemme jo puhuneet, miten jokainen merkki on sen ASCII-arvo, mutta haluaisin sanoa, no, sanotaan miettiä kunkin merkin myös ottaa aakkosellinen hakemisto, jossa A esimerkiksi, ensimmäisenä kirjain, on aakkosellinen hakemisto nolla. Nyt Katsotaanpa soveltaa Sama yhtälö kuin ennen, mutta käyttäen aakkosellinen hakemisto. 

Joten A on nolla, koska olemme määritelty. Joten sitten kun nolla plus kaksi, mod 26, se kaksi, mod 26, joka antaa meille kaksi. Ja hyvin, mitattuna aakkosellinen hakemisto, C on kolmas kirjain aakkoset, jotta vastaisi on aakkosellinen hakemisto kaksi. Näyttää siis siltä, ​​että käyttämällä aakkosellinen hakemisto tässä tapauksessa itse asiassa antaa meille oikean tuloksen. 

Nyt Katsotaanpa tarkistaa onko yhtälö työt jossa on aakkosellinen hakemisto. Y: n aakkosellinen hakemisto on 24, koska toiseksi viimeinen kirjain aakkosissa. Joten sitten 24 plus meidän avain kahden antaa meille 26. 26 mod 26 antaa meille 0, joka, onnekas Meille on aakkosellinen hakemisto A. Toivottavasti se todiste riitä, että aakkoshakemistosta menetelmä toimii. Jos ei, voit kokeilla joitakin esimerkkejä oman. 

Jotta kunnolla kietoa aakkoset ja soveltaa Caesar yhtälö, me tiedämme, että meidän on käsitellä aakkosellinen indeksit. Mutta aloitamme ASCII arvot, ja vasta sitten me sitten muuntaa aakkoshakemistosta. Sieltä halutaan tulostaa, tarvitsemme käsittelemään ASCII-arvojen uudelleen. Joten meidän täytyy selvittää, miten menevät ASCII aakkosellinen ja aakkosellinen ASCII. 

Joten jätän sen sinulle selvittää kuvio välinen merkki ja sen aakkosellinen indeksi ja sen ASCII-arvo. Nyt, muista, että vaikka Tässä taulukossa aivan dian esittää isoja kirjaimia, myös on harkittava, onko toinen malli koskee että pieniä kirjaimia. 

Joten nyt olemme selvittäneet miten siirtää yhden merkin, Sitten meidän täytyy tehdä, on asteikko, joka jopa mennä koko selväkielisenä. Joten selkokielisen on merkkijono. Onneksemme merkkijono on todella vain joukko merkkejä, joten päästäkseen jokainen merkki merkkijono, kaikki mitä on tehtävä on käyttää array notaatio. Sano Olen muuttuja tyyppiä string nimeltään "text =" tämä on CS50. ' " 

No, sitten, jotta pääsy kunkin merkin, kaikki minun täytyy tehdä muuttuja teksti on sanoa hyvin, tekstiä indeksi nolla, että vastaa pääoman T. Teksti indeksitasolla yksi vastaa alakotelon h. Toinen hyödyllinen toiminto on merkkijonon pituus toiminto. Joten kulkee naru että funktio palauttaa kokonaisluku, pituus merkkijonon. 

Nyt kun olemme puhuneet kaikki nämä eri tekijät, Laitetaan ne takaisin yhteen. Joten palaa joko minun pseudokoodina koodi tai pseudokoodi ja käydä läpi ja varmista, että olet osaavat tehdä joka ikinen asia. Getting avaimen avulla argc ja argv, kääntämällä avain kokonaisluku, joka on i, kehotukset selväkielisenä, getstring, ja sitten iteroimalla yli joka merkki selväkielisenä merkkijono, säilyttäen tapauksessa jokaisen merkin ja siirtämällä että merkin avain, varmistaa, että olet kiertyy aakkoset, lopullista tulostamista että salakieli. Nimeni on Amila, ja tämä oli Caesar. 