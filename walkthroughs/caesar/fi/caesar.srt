1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Katsotaanpa puuttua Caesar.

3
00:00:02,270 --> 00:00:06,110
Vuonna Caesar, annamme käyttäjä
koodata salaista.

4
00:00:06,110 --> 00:00:09,780
Joten sukellus oikealle ja katsoa
meidän tehtävälistoja tähän ongelmaan.

5
00:00:09,780 --> 00:00:12,210
Ensin, saamme avain käyttäjän.

6
00:00:12,210 --> 00:00:15,210
Sitten saamme selväkielisenä
että he haluavat koodata.

7
00:00:15,210 --> 00:00:21,380
Sen jälkeen meidän encipher se heille,
ja lopulta me tulostaa niiden salakieli.

8
00:00:21,380 --> 00:00:23,600
>> Joten aloitetaan esimerkillä.

9
00:00:23,600 --> 00:00:26,920
Sano halusi koodata
Koko aakkoset avaimella kaksi.

10
00:00:26,920 --> 00:00:31,360
No, koko aakkoset olisi
vain siirretään kirjaimia.

11
00:00:31,360 --> 00:00:37,060
Joten voisi koodata C, B
D, C-E, niin edelleen ja niin edelleen,

12
00:00:37,060 --> 00:00:42,470
kunnes saat X, joka koodaa Z
tai zed, riippuen siitä, missä olet kotoisin.

13
00:00:42,470 --> 00:00:47,445
Niin Y sitten siirtää koko matkan,
kietoa aakkoset päästä A,

14
00:00:47,445 --> 00:00:53,256
ja sitten lopulta viimeinen kirjain
aakkoset, Z, zed, olisi koodata B.

15
00:00:53,256 --> 00:00:54,660
>> Ymmärsitkö?

16
00:00:54,660 --> 00:00:56,380
Katsotaanpa muutamia esimerkkejä.

17
00:00:56,380 --> 00:01:00,540
Ensimmäinen esimerkki tästä on hyvin samankaltainen
mitä me juuri edellä on selitetty.

18
00:01:00,540 --> 00:01:05,560
Jos siis koodata joitakin osa
aakkoset, Kautta L, jonka keskeinen kaksi,

19
00:01:05,560 --> 00:01:09,760
Sitten saan vain minun koko
aakkoset siirtynyt kaksi kirjainta.

20
00:01:09,760 --> 00:01:12,230
>> Sitten minun seuraava esimerkki,
avain on vielä kaksi,

21
00:01:12,230 --> 00:01:15,080
joten kannattaa silti tietää
mitkä kirjaimet odottaa.

22
00:01:15,080 --> 00:01:16,400
Mutta tässä se on lause.

23
00:01:16,400 --> 00:01:18,100
Tämä on CS50.

24
00:01:18,100 --> 00:01:21,090
Joten huomaat, että minä
säilyttää tapauksessa kirjeeni,

25
00:01:21,090 --> 00:01:25,600
joten kaikki isot kirjaimet ovat myös
isoja kirjaimia salakieli.

26
00:01:25,600 --> 00:01:27,800
Ja mitään pieniä
kirjaimia selväkielisenä

27
00:01:27,800 --> 00:01:30,640
Myös pieniä kirjaimia
kirjaimia salakieli.

28
00:01:30,640 --> 00:01:34,020
Mutta pidän kirjaimet
ja kaikki huutomerkkejä

29
00:01:34,020 --> 00:01:37,610
tai mikä tahansa muu välimerkkejä sama.

30
00:01:37,610 --> 00:01:40,360
>> Joten nyt meillä on tunnetta
kuinka ohjelma toimii,

31
00:01:40,360 --> 00:01:43,890
vapaasti mennä ajaa lisää
esimerkkejä oman, jos haluat.

32
00:01:43,890 --> 00:01:47,072
Aloitetaan saada
avain käyttäjän.

33
00:01:47,072 --> 00:01:48,780
Perinteisesti kanssa
muita ongelmia, olemme

34
00:01:48,780 --> 00:01:51,450
tottuneet saamaan
numeroita, että me

35
00:01:51,450 --> 00:01:54,710
tarvitsevat kehottamalla käyttäjää
funktiolla getint.

36
00:01:54,710 --> 00:01:58,850
Mutta tällä kertaa olemme todella menossa
käyttää komentorivillä

37
00:01:58,850 --> 00:02:01,760
ja uusi toiminto nimeltään atoi.

38
00:02:01,760 --> 00:02:05,130
>> Kun ajaa tärkeimmät
ohjelma C, niin se

39
00:02:05,130 --> 00:02:08,500
vie kaksi parameters--
int argc, joka

40
00:02:08,500 --> 00:02:11,670
on argumenttien lukumäärä
kului, ja sitten

41
00:02:11,670 --> 00:02:15,920
argv, merkkijonojen joukko, joka sisältää
luettelon kaikista argumentit

42
00:02:15,920 --> 00:02:16,740
kulunut.

43
00:02:16,740 --> 00:02:19,740
Et itse ole
julistaa näistä muuttujista.

44
00:02:19,740 --> 00:02:22,700
He laskettu varten
te kääntäjä.

45
00:02:22,700 --> 00:02:28,160
Oikea käyttö tähän olisi
for argc olevan kaksi tässä tapauksessa,

46
00:02:28,160 --> 00:02:32,630
koska käyttäjän on kulkea
puhelun ohjelman ./caesar,

47
00:02:32,630 --> 00:02:35,570
ja sitten avain,
mitä numero he haluavat.

48
00:02:35,570 --> 00:02:39,920
Niin se tarkoittaa, että argc on kaksi
Jotta pätevä käytön Caesar

49
00:02:39,920 --> 00:02:41,680
suoritettavaksi.

50
00:02:41,680 --> 00:02:43,590
>> Joten Katsotaanpa esimerkkiä.

51
00:02:43,590 --> 00:02:47,760
Sano Olen jo kirjoittanut ja
koonnut ohjelma nimeltä BlastOff.

52
00:02:47,760 --> 00:02:52,670
Joten jos juoksin komentorivin
./blastoff rakettiryhmä, hyvin, sitten,

53
00:02:52,670 --> 00:02:57,750
argc olisi kolme, koska olen
hyväksyttiin kolme erillistä väitettä.

54
00:02:57,750 --> 00:02:59,830
Sitten argv näyttää tältä.

55
00:02:59,830 --> 00:03:03,750
Se on jono, ja se olisi
sisältävät kukin kolmesta jouset.

56
00:03:03,750 --> 00:03:09,640
./blastoff ensimmäisen indeksin, joukkue
seuraavassa, ja raketti viimeisessä.

57
00:03:09,640 --> 00:03:11,610
>> Puhutaanpa paneelit sek.

58
00:03:11,610 --> 00:03:15,560
Taulukot ovat tietorakenteita, jotka pitävät
useita arvoja samaa tyyppiä.

59
00:03:15,560 --> 00:03:19,980
Tämä on kätevää, kun
on luettelot kokonaislukuja tai merkkijonoja.

60
00:03:19,980 --> 00:03:23,030
Muista vain niillä
olla samaa tyyppiä.

61
00:03:23,030 --> 00:03:25,310
Tietotekniikassa, me
Rakastamme laskenta nollasta,

62
00:03:25,310 --> 00:03:29,260
niin muista, että paneelit
Myös nolla-indeksoitu.

63
00:03:29,260 --> 00:03:34,360
Niinpä ensimmäinen osa minun array
on menossa olevan indeksin nolla.

64
00:03:34,360 --> 00:03:37,580
Joten tässä tapauksessa, kun olen
joukko pituudeltaan neljä,

65
00:03:37,580 --> 00:03:41,350
sitten viimeinen indeksi
viimeinen osa minun array

66
00:03:41,350 --> 00:03:44,970
on todella olemaan
indeksissä kolme, ei neljä.

67
00:03:44,970 --> 00:03:48,880
Koska muistaa, me
alkaa laskea nollasta.

68
00:03:48,880 --> 00:03:52,530
>> Tässä on esimerkki siitä, miten
voisi luoda joukko omia.

69
00:03:52,530 --> 00:03:56,440
Joten sanoa halusin tallenna
kolme suosikki koiran nimet.

70
00:03:56,440 --> 00:03:59,030
Sitten minä loisi Merkkijonotaulukko.

71
00:03:59,030 --> 00:04:04,450
Siksi haluan julistaa tyyppi, string, ja
sitten laittaa taulukon nimen, koirat,

72
00:04:04,450 --> 00:04:06,450
ja sitten ne neliön
suluissa laittaa koko

73
00:04:06,450 --> 00:04:09,260
n array-- tässä tapauksessa kolme.

74
00:04:09,260 --> 00:04:12,690
>> Joten minun ensimmäinen merkintä on menossa
olla koiria indeksi nolla,

75
00:04:12,690 --> 00:04:14,750
ja että tulee olemaan Milo.

76
00:04:14,750 --> 00:04:17,850
Sitten koirat indeksissä yksi
tulee olemaan Hessu,

77
00:04:17,850 --> 00:04:23,060
Darling Mochi, ja sitten viimeinen
merkintä, kolmas merkintä indeksin kaksi,

78
00:04:23,060 --> 00:04:26,130
tulee olemaan söpö, suloinen Elphie.

79
00:04:26,130 --> 00:04:28,610
Huomaat, että formaatti
täyttämistä tähän array

80
00:04:28,610 --> 00:04:32,150
on hyvin samankaltainen kuin miten saatat
ilmoitettava kaikki muut muuttuvat, joissa

81
00:04:32,150 --> 00:04:36,307
olet muuttujan nimen perässä
arvo, jonka haluat tallennetut sitä.

82
00:04:36,307 --> 00:04:38,140
Ainoa ero
Tässä tapauksessa on, että

83
00:04:38,140 --> 00:04:42,700
on muistettava laittaa indeksiin
arvon hakasuluissa.

84
00:04:42,700 --> 00:04:46,420
Ja meillä on
kolme suosikki koiraa.

85
00:04:46,420 --> 00:04:48,780
>> Mutta valitettavasti, on aika
päästä takaisin Caesar.

86
00:04:48,780 --> 00:04:52,910
Muista, että oikea käyttö varten
Käyttäjä aiotaan ohimennen paitsi

87
00:04:52,910 --> 00:04:57,430
nimi ohjelman ./caesar, mutta
myös avain, että he haluavat siirtää

88
00:04:57,430 --> 00:04:58,850
niiden selväkielisenä mukaan.

89
00:04:58,850 --> 00:05:01,540
Niin se tarkoittaa, että argc oltava kaksi.

90
00:05:01,540 --> 00:05:07,580
Niiden on kulkea two-- ei enempää eikä
alle kaksi komentoriviargumentteja.

91
00:05:07,580 --> 00:05:09,050
>> Nyt entä argv?

92
00:05:09,050 --> 00:05:12,880
No, me tiedämme jo, että
array tulee olemaan pituuden kaksi,

93
00:05:12,880 --> 00:05:15,270
mutta mitä sisältämän jokaisen elementin?

94
00:05:15,270 --> 00:05:19,330
No, ensimmäinen elementti
tulee olemaan ./caesar,

95
00:05:19,330 --> 00:05:24,190
ja sitten seuraava elementti on menossa
sisältävät näppäintä, että käyttäjä kirjoitettu.

96
00:05:24,190 --> 00:05:27,480
Nyt, jos niitä käytetään oikein
että käyttö Caesar,

97
00:05:27,480 --> 00:05:29,350
Sitten he tulevat kirjoittaa numeron.

98
00:05:29,350 --> 00:05:33,260
Mutta vaikka merkki
että he kirjoittavat on numero,

99
00:05:33,260 --> 00:05:35,790
se on tietojen tyypin merkkijono.

100
00:05:35,790 --> 00:05:40,390
>> Miten siis muuntaa että
merkkijono kokonaisluku?

101
00:05:40,390 --> 00:05:46,680
Niin sanon on num, merkkijono,
jossa lukee 50.

102
00:05:46,680 --> 00:05:49,000
Jos haluan muuntaa että
kokonaisluku, niin en yksinkertaisesti

103
00:05:49,000 --> 00:05:53,340
julistaa uusi muuttuja, joka on
kokonaislukulaskutoimituksen i kutsuen atoi.

104
00:05:53,340 --> 00:06:01,160
Välitän minun merkkijono muuttujan, num, ja
niin minä sitten sisältää numeron 50.

105
00:06:01,160 --> 00:06:04,350
Muista tarkistaa miehelle
sivuja atoi toiminto

106
00:06:04,350 --> 00:06:07,990
tarkistamaan, mitä kirjaston se
in, sekä mitä arvostavat sitä

107
00:06:07,990 --> 00:06:14,550
palauttaa jos merkkijono välitetään
in ei sisällä kaikkia numeroita.

108
00:06:14,550 --> 00:06:16,950
>> Joten nyt olemme saaneet
avain, seuraava askel

109
00:06:16,950 --> 00:06:19,430
on saada selkokielisen käyttäjältä.

110
00:06:19,430 --> 00:06:21,170
Nyt tämä tulee
olla vähemmän monimutkaista

111
00:06:21,170 --> 00:06:23,410
kuin navigointia
komentoriviargumentteja.

112
00:06:23,410 --> 00:06:26,190
Meidän täytyy vain soittaa
getstring toiminto

113
00:06:26,190 --> 00:06:29,660
pyytää käyttäjältä antamaan
meille merkkijonon, mutta muista

114
00:06:29,660 --> 00:06:34,090
tarkistaa tiedot, miten me
kannattaa tiedustella käyttäjältä, jotka.

115
00:06:34,090 --> 00:06:36,420
>> Nyt tulemme
sydän problem--

116
00:06:36,420 --> 00:06:38,860
miten sala selväkielisenä.

117
00:06:38,860 --> 00:06:42,830
No, ensinnäkin, puhutaanpa miten
salakirjoittaa yksi merkki kerrallaan,

118
00:06:42,830 --> 00:06:47,370
ja sitten me käsitellä sitä, kuinka
kerrata koko selväkielisenä.

119
00:06:47,370 --> 00:06:50,440
Olen kirjoittanut joitakin pseudokoodina
että Caesar ongelma.

120
00:06:50,440 --> 00:06:52,310
Kannustan teitä
kirjoita samoin.

121
00:06:52,310 --> 00:06:55,900
Se ei ehkä näytä identtisiä
minun, ja se on OK, mutta niin kauan

122
00:06:55,900 --> 00:06:58,640
koska yleinen ajatus on sama.

123
00:06:58,640 --> 00:07:00,780
>> Ensimmäiset kolme vaihetta
olemme jo tehneet.

124
00:07:00,780 --> 00:07:03,100
Olemme saaneet avain
komentoriviltä argumentti,

125
00:07:03,100 --> 00:07:05,510
olemme ottaneet että avain
osaksi kokonaisluku, ja olemme

126
00:07:05,510 --> 00:07:09,320
kehotetaan käyttäjää antamaan selkokielisen
että he haluavat encipher.

127
00:07:09,320 --> 00:07:12,420
Niin seuraava iso möhkäle
on se, että kunkin merkin

128
00:07:12,420 --> 00:07:15,070
selvätekstissä merkkijono,
jos se on aakkosellinen,

129
00:07:15,070 --> 00:07:17,750
haluamme säilyttää
asiaansa ja siirtää sitä.

130
00:07:17,750 --> 00:07:20,900
Vuoteen säilyttää tapauksessa mitä
sanoa, että kaikki isoilla kirjaimilla

131
00:07:20,900 --> 00:07:23,580
kirjaimet pitäisi pysyä ylemmän
kotelo ja pieniä kirjaimia

132
00:07:23,580 --> 00:07:25,640
olisi edelleen pieniä.

133
00:07:25,640 --> 00:07:29,110
Niinpä sitten kun siirrämme ne,
sitten tulostaa salakieli.

134
00:07:29,110 --> 00:07:33,100
>> Tässä on kolme toimintoa, jotka ovat menossa
tulla kätevä tähän ongelmaan.

135
00:07:33,100 --> 00:07:38,010
Muista ylhäällä kun annoin
esimerkiksi siirtämällä tämä on CS50?

136
00:07:38,010 --> 00:07:41,800
Muista, että 50 ja
huutomerkki ei siirrä?

137
00:07:41,800 --> 00:07:45,680
Joten kuinka voimme kertoa, onko meillä
täytyy siirtää kirjeen vai ei?

138
00:07:45,680 --> 00:07:48,650
No, "on alpha", jos
ohitat sen merkin,

139
00:07:48,650 --> 00:07:54,850
palauttaa true, jos kyseisen merkin
on kirjain ja väärän toisin.

140
00:07:54,850 --> 00:07:56,870
Auttaa sinua
säilöntä-arvo

141
00:07:56,870 --> 00:07:59,750
ovat toiminnot "on
ylempi "ja" on alempi. "

142
00:07:59,750 --> 00:08:03,350
>> Nämä kaksi funktiota myös
yhdessä merkin syötteenä

143
00:08:03,350 --> 00:08:06,580
ja palauttaa sinulle totuusarvoarvoja
joko tosi tai epätosi

144
00:08:06,580 --> 00:08:11,280
riippuen siitä, että merkki
on isoja tai pieniä kirjaimia.

145
00:08:11,280 --> 00:08:14,610
Koska "on ylempi" ja "on
alempi "ovat Boolen toimintoja,

146
00:08:14,610 --> 00:08:18,660
mikä tarkoittaa, että he palaavat sinulle totuusarvoarvoja
voit käyttää näitä teidän olosuhteissa.

147
00:08:18,660 --> 00:08:23,490
Joten tässä on koodinpätkä, joka vain
tulostaa kirjeen, jos se isoiksi.

148
00:08:23,490 --> 00:08:27,790
Joten olen julistettu hahmoni
kirjaimen kohdalle ylempään koteloon Zed

149
00:08:27,790 --> 00:08:33,440
ja sitten jos "on ylempi" tuotto
totta, sitten tulostaa, että kirjeen.

150
00:08:33,440 --> 00:08:38,200
>> Menee takaisin meidän yksinkertainen esimerkki
siirtämällä aakkoset avaimella kaksi,

151
00:08:38,200 --> 00:08:41,049
miten me itse saada se toimimaan?

152
00:08:41,049 --> 00:08:45,770
No, käy ilmi, että merkkiä
ja kokonaisluvut ovat hyvin läheistä sukua.

153
00:08:45,770 --> 00:08:48,840
Jokaisella hahmolla on
kokonaislukuarvo liittyvä

154
00:08:48,840 --> 00:08:53,260
se löytyy ASCII kaavio,
jossa jokaisen hahmon ASCII

155
00:08:53,260 --> 00:08:55,380
arvo näkyy.

156
00:08:55,380 --> 00:08:58,940
Niin isoja A vastaa
ASCII-arvo 65

157
00:08:58,940 --> 00:09:02,270
ja pieniä a-
ASCII-arvo 97.

158
00:09:02,270 --> 00:09:04,940
>> Voit vapaasti etsiä
tahansa ASCII kaavio verkossa

159
00:09:04,940 --> 00:09:07,720
nähdä nämä arvot itse.

160
00:09:07,720 --> 00:09:12,096
Joten mitä tämä tarkoittaa, että voimme
ottaa luonnetta yläkotelon A,

161
00:09:12,096 --> 00:09:18,200
lisätä kokonaisluku kaksi siihen, ja sitten saat
merkki yläkotelo C seurauksena.

162
00:09:18,200 --> 00:09:23,720
Tämä johtuu 65, ASCII
arvoa pääoman A plus 2,

163
00:09:23,720 --> 00:09:29,960
antaa meille 67, mikä vastaa
luonnetta suuria kirjaimia C.

164
00:09:29,960 --> 00:09:33,480
>> Valitettavasti asiat
ei aivan niin yksinkertaista.

165
00:09:33,480 --> 00:09:36,980
Meillä on yhtälö, joka
meidän on harkittava.

166
00:09:36,980 --> 00:09:43,590
Tässä se kertoo, että i: nnen salakieli
kirjain vastaa nteen selväkielisenä

167
00:09:43,590 --> 00:09:48,900
kirjain, plus key--
kaikki tämä, modulaarinen 26.

168
00:09:48,900 --> 00:09:50,810
Miksi näin?

169
00:09:50,810 --> 00:09:55,430
Palataan takaisin meidän esimerkki
ennen, joissa pääoman A plus 2,

170
00:09:55,430 --> 00:09:57,590
antaa meille pääoma C.

171
00:09:57,590 --> 00:10:01,870
>> Joten soveltamalla yhtälö
erittely antaa meille,

172
00:10:01,870 --> 00:10:06,660
niin ottakaamme Capitalille
plus 2 ja mod että 26.

173
00:10:06,660 --> 00:10:10,730
Joten pääoma A, kun laitan sen
nämä lainausmerkkejä,

174
00:10:10,730 --> 00:10:14,010
sallii minun pitää sitä
kokonaisluku, niin että voidaan

175
00:10:14,010 --> 00:10:17,500
minun heittää sen ASCII-arvo, 65.

176
00:10:17,500 --> 00:10:20,080
65 plus 2 on 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 antaa meille 15,
mutta joka ei oikeastaan

178
00:10:25,210 --> 00:10:32,590
järkeä, koska tiedämme, että
pääoma C ASCII-arvo 67, ei 15.

179
00:10:32,590 --> 00:10:35,580
Miten siis sovittaa yhteen, että?

180
00:10:35,580 --> 00:10:39,840
>> No, tässä haluaisin posit
käsitteenkin aakkosellinen hakemisto.

181
00:10:39,840 --> 00:10:44,010
Siksi olemme jo puhuneet, miten
jokainen merkki on sen ASCII-arvo,

182
00:10:44,010 --> 00:10:48,810
mutta haluaisin sanoa, no, sanotaan
miettiä kunkin merkin myös ottaa

183
00:10:48,810 --> 00:10:52,230
aakkosellinen hakemisto,
jossa A esimerkiksi,

184
00:10:52,230 --> 00:10:58,800
ensimmäisenä kirjain,
on aakkosellinen hakemisto nolla.

185
00:10:58,800 --> 00:11:02,070
Nyt Katsotaanpa soveltaa
Sama yhtälö kuin ennen,

186
00:11:02,070 --> 00:11:05,040
mutta käyttäen aakkosellinen hakemisto.

187
00:11:05,040 --> 00:11:07,810
>> Joten A on nolla, koska olemme määritelty.

188
00:11:07,810 --> 00:11:15,640
Joten sitten kun nolla plus kaksi, mod 26,
se kaksi, mod 26, joka antaa meille kaksi.

189
00:11:15,640 --> 00:11:18,780
Ja hyvin, mitattuna
aakkosellinen hakemisto,

190
00:11:18,780 --> 00:11:23,930
C on kolmas kirjain
aakkoset, jotta vastaisi

191
00:11:23,930 --> 00:11:26,290
on aakkosellinen hakemisto kaksi.

192
00:11:26,290 --> 00:11:29,850
Näyttää siis siltä, ​​että käyttämällä
aakkosellinen hakemisto tässä tapauksessa

193
00:11:29,850 --> 00:11:32,840
itse asiassa antaa meille oikean tuloksen.

194
00:11:32,840 --> 00:11:35,020
>> Nyt Katsotaanpa tarkistaa
onko yhtälö työt

195
00:11:35,020 --> 00:11:37,210
jossa on aakkosellinen hakemisto.

196
00:11:37,210 --> 00:11:42,540
Y: n aakkosellinen hakemisto on 24, koska
toiseksi viimeinen kirjain aakkosissa.

197
00:11:42,540 --> 00:11:46,520
Joten sitten 24 plus meidän
avain kahden antaa meille 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 antaa meille 0, joka, onnekas
Meille on aakkosellinen hakemisto A.

199
00:11:54,750 --> 00:11:59,100
Toivottavasti se todiste riitä, että
aakkoshakemistosta menetelmä toimii.

200
00:11:59,100 --> 00:12:03,180
Jos ei, voit kokeilla
joitakin esimerkkejä oman.

201
00:12:03,180 --> 00:12:08,030
>> Jotta kunnolla kietoa
aakkoset ja soveltaa Caesar yhtälö,

202
00:12:08,030 --> 00:12:11,280
me tiedämme, että meidän on
käsitellä aakkosellinen indeksit.

203
00:12:11,280 --> 00:12:15,130
Mutta aloitamme ASCII
arvot, ja vasta sitten

204
00:12:15,130 --> 00:12:18,530
me sitten muuntaa
aakkoshakemistosta.

205
00:12:18,530 --> 00:12:23,970
Sieltä halutaan tulostaa, tarvitsemme
käsittelemään ASCII-arvojen uudelleen.

206
00:12:23,970 --> 00:12:28,350
Joten meidän täytyy selvittää, miten
menevät ASCII aakkosellinen

207
00:12:28,350 --> 00:12:31,080
ja aakkosellinen ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Joten jätän sen sinulle selvittää
kuvio välinen merkki

209
00:12:34,910 --> 00:12:38,590
ja sen aakkosellinen
indeksi ja sen ASCII-arvo.

210
00:12:38,590 --> 00:12:41,530
Nyt, muista, että vaikka
Tässä taulukossa aivan dian

211
00:12:41,530 --> 00:12:45,630
esittää isoja kirjaimia, myös
on harkittava, onko

212
00:12:45,630 --> 00:12:48,915
toinen malli koskee
että pieniä kirjaimia.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Joten nyt olemme selvittäneet
miten siirtää yhden merkin,

215
00:12:55,840 --> 00:13:02,200
Sitten meidän täytyy tehdä, on asteikko, joka
jopa mennä koko selväkielisenä.

216
00:13:02,200 --> 00:13:04,260
Joten selkokielisen on merkkijono.

217
00:13:04,260 --> 00:13:08,210
Onneksemme merkkijono on todella
vain joukko merkkejä,

218
00:13:08,210 --> 00:13:12,150
joten päästäkseen jokainen merkki
merkkijono, kaikki mitä on tehtävä

219
00:13:12,150 --> 00:13:14,270
on käyttää array notaatio.

220
00:13:14,270 --> 00:13:20,270
Sano Olen muuttuja tyyppiä
string nimeltään "text =" tämä on CS50. ' "

221
00:13:20,270 --> 00:13:22,730
>> No, sitten, jotta
pääsy kunkin merkin,

222
00:13:22,730 --> 00:13:25,880
kaikki minun täytyy tehdä
muuttuja teksti on

223
00:13:25,880 --> 00:13:31,660
sanoa hyvin, tekstiä indeksi nolla, että
vastaa pääoman T. Teksti indeksitasolla

224
00:13:31,660 --> 00:13:35,100
yksi vastaa alakotelon h.

225
00:13:35,100 --> 00:13:38,110
Toinen hyödyllinen toiminto on
merkkijonon pituus toiminto.

226
00:13:38,110 --> 00:13:40,760
Joten kulkee naru
että funktio palauttaa

227
00:13:40,760 --> 00:13:44,610
kokonaisluku, pituus merkkijonon.

228
00:13:44,610 --> 00:13:47,060
>> Nyt kun olemme puhuneet
kaikki nämä eri tekijät,

229
00:13:47,060 --> 00:13:48,540
Laitetaan ne takaisin yhteen.

230
00:13:48,540 --> 00:13:52,210
Joten palaa joko minun pseudokoodina
koodi tai pseudokoodi

231
00:13:52,210 --> 00:13:55,920
ja käydä läpi ja varmista, että olet
osaavat tehdä joka ikinen asia.

232
00:13:55,920 --> 00:14:01,520
Getting avaimen avulla argc ja argv,
kääntämällä avain kokonaisluku, joka on

233
00:14:01,520 --> 00:14:06,840
i, kehotukset selväkielisenä,
getstring, ja sitten iteroimalla

234
00:14:06,840 --> 00:14:09,590
yli joka merkki
selväkielisenä merkkijono,

235
00:14:09,590 --> 00:14:14,910
säilyttäen tapauksessa jokaisen merkin
ja siirtämällä että merkin avain,

236
00:14:14,910 --> 00:14:17,520
varmistaa, että olet
kiertyy aakkoset,

237
00:14:17,520 --> 00:14:20,850
lopullista tulostamista että salakieli.

238
00:14:20,850 --> 00:14:25,470
Nimeni on Amila, ja tämä oli Caesar.

239
00:14:25,470 --> 00:14:28,448

