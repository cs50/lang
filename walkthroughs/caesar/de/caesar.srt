1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> AMILA: Lassen Sie uns Caesar angehen.

3
00:00:02,270 --> 00:00:06,110
In Caesar, ermöglichen wir den Benutzer
eine geheime Nachricht zu kodieren.

4
00:00:06,110 --> 00:00:09,780
Also lassen Sie uns tauchen rechts in und schauen
auf unserer To-dos für dieses Problem.

5
00:00:09,780 --> 00:00:12,210
Also zuerst, erhalten wir den Schlüssel vom Benutzer.

6
00:00:12,210 --> 00:00:15,210
Dann erhalten wir den Klartext
dass sie wollen, zu kodieren.

7
00:00:15,210 --> 00:00:21,380
Danach wird chiffrieren wir es für sie,
und schließlich drucken wir ihre Geheimtext.

8
00:00:21,380 --> 00:00:23,600
>> Lassen Sie uns also mit einem Beispiel an.

9
00:00:23,600 --> 00:00:26,920
Angenommen, Sie wollten das zu kodieren
gesamte Alphabet mit einem Schlüssel von zwei Kindern.

10
00:00:26,920 --> 00:00:31,360
Nun, Ihre gesamte Alphabet würde
nur Buchstaben verschoben werden.

11
00:00:31,360 --> 00:00:37,060
So würde A bis C, B kodieren
D, C bis E, so weiter und so fort,

12
00:00:37,060 --> 00:00:42,470
bis Sie zu X bekommen, die bis Z kodiert
oder zed, je nachdem, wo man herkommt.

13
00:00:42,470 --> 00:00:47,445
Dann würde Y dann verschieben den ganzen Weg,
Verpackung um das Alphabet zu A zu bekommen,

14
00:00:47,445 --> 00:00:53,256
und dann schließlich der letzte Buchstabe der
Alphabet, Z, zed, würde B. kodieren

15
00:00:53,256 --> 00:00:54,660
>> Du hast das bekommen?

16
00:00:54,660 --> 00:00:56,380
Schauen wir uns einige Beispiele an.

17
00:00:56,380 --> 00:01:00,540
Das erste Beispiel ist hier sehr ähnlich
zu dem, was wir oben gerade erklärt.

18
00:01:00,540 --> 00:01:05,560
Also, wenn ich einige Abschnitt des kodieren
Alphabet, A bis L, mit einem Schlüssel von zwei,

19
00:01:05,560 --> 00:01:09,760
Ich bekomme dann nur meine ganze
Alphabet verschoben zwei Buchstaben.

20
00:01:09,760 --> 00:01:12,230
>> Dann wird in meinem nächsten Beispiel,
der Schlüssel ist, immer noch zwei,

21
00:01:12,230 --> 00:01:15,080
wissen, so sollten Sie noch
die Buchstaben zu erwarten.

22
00:01:15,080 --> 00:01:16,400
Aber hier ist es eine Phrase.

23
00:01:16,400 --> 00:01:18,100
Dies ist CS50.

24
00:01:18,100 --> 00:01:21,090
So werden Sie, dass ich merke,
den Fall meiner Briefe erhalten,

25
00:01:21,090 --> 00:01:25,600
so dass alle Großbuchstaben sind auch
Großbuchstaben in der Chiffretext.

26
00:01:25,600 --> 00:01:27,800
Und jeder Klein
Buchstaben im Klartext

27
00:01:27,800 --> 00:01:30,640
auch sind klein geschrieben
Buchstaben im Geheimtext.

28
00:01:30,640 --> 00:01:34,020
Aber ich halte die Buchstaben
und alle Ausrufezeichen

29
00:01:34,020 --> 00:01:37,610
oder jede andere Interpunktion gleich.

30
00:01:37,610 --> 00:01:40,360
>> So, jetzt haben wir ein Gefühl haben
für wie das Programm funktioniert,

31
00:01:40,360 --> 00:01:43,890
fühlen Sie sich frei zu gehen, laufen einige mehr
Beispiele für Ihre eigenen, wenn Sie es wünschen.

32
00:01:43,890 --> 00:01:47,072
Beginnen wir mit dem Ausstieg
der Schlüssel vom Benutzer.

33
00:01:47,072 --> 00:01:48,780
Traditionell mit
andere Probleme, wir haben

34
00:01:48,780 --> 00:01:51,450
wurden daran gewöhnt, immer
alle Zahlen, dass wir

35
00:01:51,450 --> 00:01:54,710
müssen durch den Benutzer auffordert,
mit der Funktion getint.

36
00:01:54,710 --> 00:01:58,850
Aber dieses Mal werden wir tatsächlich
die Befehlszeilenargument verwenden

37
00:01:58,850 --> 00:02:01,760
und eine neue Funktion namens atoi.

38
00:02:01,760 --> 00:02:05,130
>> Wenn Sie laufen Haupt
Programm in C, dann

39
00:02:05,130 --> 00:02:08,500
nimmt in zwei parameters--
int argc, die

40
00:02:08,500 --> 00:02:11,670
ist die Anzahl der Argumente
eingeleitet, und dann

41
00:02:11,670 --> 00:02:15,920
argv, ein Array von Strings, die enthält
die Liste der alle Argumente

42
00:02:15,920 --> 00:02:16,740
bestanden.

43
00:02:16,740 --> 00:02:19,740
Sie haben nicht explizit
diese Variablen zu erklären.

44
00:02:19,740 --> 00:02:22,700
Sie sind berechnet für
Sie durch den Compiler.

45
00:02:22,700 --> 00:02:28,160
Die korrekte Verwendung hierfür wäre
für argc zwei in diesem Fall zu sein,

46
00:02:28,160 --> 00:02:32,630
da der Benutzer muss passieren in
der Anruf an das Programm, ./caesar,

47
00:02:32,630 --> 00:02:35,570
und dann der Schlüssel,
was Zahl, die sie wünschen.

48
00:02:35,570 --> 00:02:39,920
Das heißt also, dass argc zwei sein müssen
um für eine gültige Verwendung von Caesar

49
00:02:39,920 --> 00:02:41,680
ermordet werden.

50
00:02:41,680 --> 00:02:43,590
>> Also lassen Sie uns ein Beispiel an.

51
00:02:43,590 --> 00:02:47,760
Sagen wir, ich habe schon geschrieben und
ein Programm namens blastoff zusammengestellt.

52
00:02:47,760 --> 00:02:52,670
Also, wenn ich lief in der Kommandozeile
./blastoff Team Rocket, na ja, dann,

53
00:02:52,670 --> 00:02:57,750
argc wäre drei, weil ich
in drei verschiedene Argumente übergeben.

54
00:02:57,750 --> 00:02:59,830
Dann würde argv wie folgt aussehen.

55
00:02:59,830 --> 00:03:03,750
Es ist ein Array, und es wäre
enthält jeder der drei Saiten.

56
00:03:03,750 --> 00:03:09,640
./blastoff im ersten Index-Team
in der nächsten, und Rakete in die andere.

57
00:03:09,640 --> 00:03:11,610
>> Lassen Sie uns über Arrays für eine Sekunde sprechen.

58
00:03:11,610 --> 00:03:15,560
Arrays sind Datenstrukturen, die halten
mehrere Werte desselben Typs.

59
00:03:15,560 --> 00:03:19,980
Dies kann nützlich sein, wenn wir
haben Listen von ganzen Zahlen oder Strings.

60
00:03:19,980 --> 00:03:23,030
Denken Sie daran, sie haben
vom gleichen Typ zu sein.

61
00:03:23,030 --> 00:03:25,310
In der Informatik, wir
Liebe von Null zu zählen,

62
00:03:25,310 --> 00:03:29,260
so denken Sie daran, dass Arrays
auch nullindizierte sind.

63
00:03:29,260 --> 00:03:34,360
Also das erste Element meiner Array
wird mit dem Index Null.

64
00:03:34,360 --> 00:03:37,580
Also in diesem Fall, wenn ich
ein Array von vier Länge,

65
00:03:37,580 --> 00:03:41,350
dann der letzte Index der
letzte Element meiner Array

66
00:03:41,350 --> 00:03:44,970
wird tatsächlich sein
bei Index drei, nicht vier.

67
00:03:44,970 --> 00:03:48,880
Denn denken Sie daran, wir
beginnen bei Null zu zählen.

68
00:03:48,880 --> 00:03:52,530
>> Hier ist ein Beispiel dafür, wie Sie
könnte eine Reihe von Ihrer eigenen erstellen.

69
00:03:52,530 --> 00:03:56,440
Also sage ich wollte meine speichern
drei Lieblingshundenamen.

70
00:03:56,440 --> 00:03:59,030
Dann würde ich ein Array von Strings erstellen.

71
00:03:59,030 --> 00:04:04,450
Deshalb würde ich die Art, Schnur, erklären und
setzen Sie den Namen des Arrays dann, Hunde,

72
00:04:04,450 --> 00:04:06,450
und dann in diesen Platz
Klammern die Größe

73
00:04:06,450 --> 00:04:09,260
des array-- in diesem Fall drei.

74
00:04:09,260 --> 00:04:12,690
>> Also mein erster Eintrag wird
um Hunde auf dem Index Null,

75
00:04:12,690 --> 00:04:14,750
und das wird Milo sein.

76
00:04:14,750 --> 00:04:17,850
Dann Hunde am Index ein
sein wird, doof,

77
00:04:17,850 --> 00:04:23,060
Liebling Mochi, und dann die letzte
Eintrag, der dritte Eintrag im Index zwei,

78
00:04:23,060 --> 00:04:26,130
geht niedlich, süß Elphie zu sein.

79
00:04:26,130 --> 00:04:28,610
Sie werden feststellen, dass das Format bemerken
in dieser Anordnung füllt

80
00:04:28,610 --> 00:04:32,150
sehr viel ist wie, wie könnte man
deklarieren andere Variable, in

81
00:04:32,150 --> 00:04:36,307
Sie haben den Variablennamen, gefolgt von
der Wert, der in ihm gespeichert werden sollen.

82
00:04:36,307 --> 00:04:38,140
Der einzige Unterschied in
dieser Fall ist, dass Sie

83
00:04:38,140 --> 00:04:42,700
haben sich daran zu erinnern, den Index zu setzen
der Wert in eckigen Klammern.

84
00:04:42,700 --> 00:04:46,420
Und da haben wir unsere
drei Lieblingshunde.

85
00:04:46,420 --> 00:04:48,780
>> Aber ach, es ist Zeit,
zurück zu Caesar zu bekommen.

86
00:04:48,780 --> 00:04:52,910
Denken Sie daran, dass die richtige Verwendung der
Benutzer wird nicht nur zu vorbei

87
00:04:52,910 --> 00:04:57,430
der Name des Programms ./caesar, aber
auch der Schlüssel, dass sie verschieben wollen

88
00:04:57,430 --> 00:04:58,850
ihre Klartext durch.

89
00:04:58,850 --> 00:05:01,540
Das heißt also, dass argc zwei sein müssen.

90
00:05:01,540 --> 00:05:07,580
Sie müssen in two-- nicht mehr passieren, nein
weniger als zwei Befehlszeilenargumente.

91
00:05:07,580 --> 00:05:09,050
>> Nun, was ist argv?

92
00:05:09,050 --> 00:05:12,880
Nun, wir wissen bereits, dass die
Array wird mit einer Länge von zwei zu sein,

93
00:05:12,880 --> 00:05:15,270
aber was ist in jedem Element enthalten?

94
00:05:15,270 --> 00:05:19,330
Nun, das erste Element
sein wird ./caesar,

95
00:05:19,330 --> 00:05:24,190
und dann das nächste Element wird zu
enthalten den Schlüssel, den der Benutzer eingegeben.

96
00:05:24,190 --> 00:05:27,480
Nun, wenn sie verwendet es richtig
für die Nutzung von Caesar,

97
00:05:27,480 --> 00:05:29,350
dann werden sie eine Nummer eingeben.

98
00:05:29,350 --> 00:05:33,260
Aber auch wenn der Charakter
dass sie geben eine Zahl,

99
00:05:33,260 --> 00:05:35,790
es ist vom Datentyp String.

100
00:05:35,790 --> 00:05:40,390
>> So, wie Sie konvertieren wir, dass
String in einen Integer?

101
00:05:40,390 --> 00:05:46,680
Also sage ich haben num, eine Zeichenfolge,
mit der Zeichenfolge 50.

102
00:05:46,680 --> 00:05:49,000
Wenn ich konvertieren wollen, dass
auf eine ganze Zahl, dann ich einfach

103
00:05:49,000 --> 00:05:53,340
deklarieren Sie eine neue Variable, ein
integer i, atoi Aufruf.

104
00:05:53,340 --> 00:06:01,160
Ich gehe in meine String-Variable, num, und
Danach werde ich dann enthalten die Nummer 50.

105
00:06:01,160 --> 00:06:04,350
Achten Sie darauf, den Mann zu überprüfen
Seiten für die Funktion atoi

106
00:06:04,350 --> 00:06:07,990
die Bibliothek zu überprüfen, es ist
in, als auch, was es Wert

107
00:06:07,990 --> 00:06:14,550
zurück, wenn die Zeichenfolge übergeben
in dem nicht alle Zahlen.

108
00:06:14,550 --> 00:06:16,950
>> So, jetzt haben wir bekommen haben
der Schlüssel ist, der nächste Schritt

109
00:06:16,950 --> 00:06:19,430
wird der Klartext von dem Benutzer zu erhalten.

110
00:06:19,430 --> 00:06:21,170
Nun, das wird
weniger kompliziert sein

111
00:06:21,170 --> 00:06:23,410
als die Navigation um die
Kommandozeilenargumente.

112
00:06:23,410 --> 00:06:26,190
Alles, was wir Anruf zu tun haben, ist
die getstring Funktion

113
00:06:26,190 --> 00:06:29,660
den Benutzer aufzufordern, zu geben,
uns eine Zeichenfolge, aber nicht vergessen

114
00:06:29,660 --> 00:06:34,090
die Spezifikationen zu überprüfen, wie wir
Möglicherweise möchten Sie die Benutzer dazu aufzufordern.

115
00:06:34,090 --> 00:06:36,420
>> Nun kommen wir zu den
Herz des problem--

116
00:06:36,420 --> 00:06:38,860
wie die Text-zu chiffrieren.

117
00:06:38,860 --> 00:06:42,830
Nun, lassen Sie uns zuerst darüber reden, wie
ein Zeichen in einer Zeit zu chiffrieren,

118
00:06:42,830 --> 00:06:47,370
und dann werden wir ansprechen, wie man
laufen den gesamten Text-über.

119
00:06:47,370 --> 00:06:50,440
Ich habe einige Pseudo-Code geschrieben
für das Caesar Problem.

120
00:06:50,440 --> 00:06:52,310
Ich ermutige Sie,
schreiben auch Sie Ihre eigenen.

121
00:06:52,310 --> 00:06:55,900
Es ist vielleicht nicht identisch aussehen
mir, und das ist in Ordnung, aber so lange

122
00:06:55,900 --> 00:06:58,640
als allgemeine Idee ist die gleiche.

123
00:06:58,640 --> 00:07:00,780
>> Die ersten drei Schritte
wir haben bereits getan.

124
00:07:00,780 --> 00:07:03,100
Wir haben den Schlüssel bekommen aus
die Befehlszeilenargument,

125
00:07:03,100 --> 00:07:05,510
wir haben den Schlüssel gedreht
in eine ganze Zahl ist, und wir haben

126
00:07:05,510 --> 00:07:09,320
aufgefordert, den Benutzer für den Klar
dass sie wollen chiffrieren.

127
00:07:09,320 --> 00:07:12,420
Also dann der nächste große Brocken
ist, dass für jedes Zeichen,

128
00:07:12,420 --> 00:07:15,070
in dem unverschlüsselten Text-String,
wenn es alphabetisch,

129
00:07:15,070 --> 00:07:17,750
wir wollen, zu erhalten
seinen Fall und es verschieben.

130
00:07:17,750 --> 00:07:20,900
Mit dem wahren Fall, was ich
meine ist, dass Großbuchstaben

131
00:07:20,900 --> 00:07:23,580
Briefe sollten obere bleiben
Fall und alle Kleinbuchstaben

132
00:07:23,580 --> 00:07:25,640
sollte Klein bleiben.

133
00:07:25,640 --> 00:07:29,110
Also dann, nachdem wir jene verschieben,
dann drucken wir den Geheimtext.

134
00:07:29,110 --> 00:07:33,100
>> Hier sind drei Funktionen, die gehen werden
praktisch für dieses Problem zu finden.

135
00:07:33,100 --> 00:07:38,010
Denken Sie daran, sich oben, wenn ich gab die
Beispiel für diese Verschiebung ist CS50?

136
00:07:38,010 --> 00:07:41,800
Denken Sie daran, dass die 50 und die
Ausrufezeichen hat verlagern nicht?

137
00:07:41,800 --> 00:07:45,680
Wie können wir also sagen, ob wir
brauchen einen Brief oder nicht zu verschieben?

138
00:07:45,680 --> 00:07:48,650
Nun, "Alpha", wenn
Sie übergeben ein Zeichen,

139
00:07:48,650 --> 00:07:54,850
gibt true zurück, wenn das Zeichen
ansonsten ist ein Brief und falsch.

140
00:07:54,850 --> 00:07:56,870
Um Ihnen zu helfen
Erhaltung der Kapitalisierung

141
00:07:56,870 --> 00:07:59,750
sind die Funktionen "ist
obere "und" niedriger ist. "

142
00:07:59,750 --> 00:08:03,350
>> Diese beiden Funktionen übernehmen auch
in einem einzelnen Zeichen als Eingabe

143
00:08:03,350 --> 00:08:06,580
und kehren Sie ein Boolean,
entweder wahr oder falsch

144
00:08:06,580 --> 00:08:11,280
je nachdem, ob dieses Zeichen
ist Groß- oder Kleinschreibung.

145
00:08:11,280 --> 00:08:14,610
Denn "ist oben" und "ist
niedriger "sind Booleschen Funktionen,

146
00:08:14,610 --> 00:08:18,660
was bedeutet, dass sie Ihnen einen Boolean zurückgeben,
Sie können diese in Ihren Bedingungen.

147
00:08:18,660 --> 00:08:23,490
Also hier ist ein Code-Snippet, dass nur
druckt einen Brief, wenn sie in die obere Fall ist.

148
00:08:23,490 --> 00:08:27,790
Also ich habe meinen Charakter erklärt
Brief das obere Gehäuse zu zed

149
00:08:27,790 --> 00:08:33,440
und dann, wenn "ist oben" zurückkehrt
wahr ist, dann drucke ich diesen Brief.

150
00:08:33,440 --> 00:08:38,200
>> Gehen wir zurück zu unserem einfachen Beispiel von
das Alphabet durch einen Schlüssel von zwei Schalt,

151
00:08:38,200 --> 00:08:41,049
wie kommen wir, dass tatsächlich zu arbeiten?

152
00:08:41,049 --> 00:08:45,770
Nun, es stellt sich heraus, dass Zeichen
und ganze Zahlen sind sehr eng miteinander verbunden.

153
00:08:45,770 --> 00:08:48,840
Jeder Charakter hat eine
Integer-Wert zugeordnet

154
00:08:48,840 --> 00:08:53,260
mit ihm in der ASCII-Grafik gefunden,
wobei jedes Zeichen des ASCII

155
00:08:53,260 --> 00:08:55,380
Wert wird angezeigt.

156
00:08:55,380 --> 00:08:58,940
So ein oberes Gehäuse A entspricht
zu einem ASCII-Wert von 65

157
00:08:58,940 --> 00:09:02,270
und ein Klein ein zu
ein ASCII-Wert von 97.

158
00:09:02,270 --> 00:09:04,940
>> Fühlen Sie sich frei zu sehen
jede ASCII-Chart Online

159
00:09:04,940 --> 00:09:07,720
diese Werte für sich selbst zu sehen.

160
00:09:07,720 --> 00:09:12,096
Also, was das bedeutet, ist, dass wir
nehmen den Charakter von Großbuchstaben A,

161
00:09:12,096 --> 00:09:18,200
fügen Sie die ganze Zahl zwei, und dann bekommen
die Zeichen in Großbuchstaben C als Ergebnis.

162
00:09:18,200 --> 00:09:23,720
Das ist, weil 65, die ASCII
Wert für Kapital A, sowie 2,

163
00:09:23,720 --> 00:09:29,960
gibt uns 67, das entspricht
auf den Charakter des oberen Gehäuses C.

164
00:09:29,960 --> 00:09:33,480
>> Leider Dinge
nicht mehr ganz so einfach sein.

165
00:09:33,480 --> 00:09:36,980
Wir haben eine Gleichung,
wir haben zu prüfen.

166
00:09:36,980 --> 00:09:43,590
Hier sagt uns, dass der i-ten verschlüsselten Text
Buchstabe entspricht dem i-ten Klar

167
00:09:43,590 --> 00:09:48,900
Brief, plus die key--
all das, modular 26.

168
00:09:48,900 --> 00:09:50,810
Warum ist das der Fall?

169
00:09:50,810 --> 00:09:55,430
Kommen wir zu unserem Beispiel zurück aus
vor, wo das Kapital A, sowie 2,

170
00:09:55,430 --> 00:09:57,590
gibt uns Kapital C.

171
00:09:57,590 --> 00:10:01,870
>> So Anwendung der Gleichung, dass
die Spezifikation gibt uns,

172
00:10:01,870 --> 00:10:06,660
dann lassen Sie uns Kapital A nehmen
plus 2 und mod, dass um 26.

173
00:10:06,660 --> 00:10:10,730
So Kapital A, wenn ich es in
diese einfache Anführungszeichen,

174
00:10:10,730 --> 00:10:14,010
erlaubt es mir, sie zu behandeln wie
eine ganze Zahl ist, dass ermöglicht so

175
00:10:14,010 --> 00:10:17,500
mich auf seine ASCII-Wert zu werfen, 65.

176
00:10:17,500 --> 00:10:20,080
65 plus 2 ist 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 gibt uns 15,
aber das ist nicht wirklich

178
00:10:25,210 --> 00:10:32,590
Sinn machen, weil wir wissen, dass die
Kapital C ASCII-Wert ist 67, nicht 15.

179
00:10:32,590 --> 00:10:35,580
So wie versöhnen wir das?

180
00:10:35,580 --> 00:10:39,840
>> Nun, hier würde Ich mag die postulieren
Vorstellung eines alphabetischen Index.

181
00:10:39,840 --> 00:10:44,010
Deshalb haben wir bereits darüber gesprochen, wie
jeder Charakter hat seine ASCII-Wert,

182
00:10:44,010 --> 00:10:48,810
aber ich möchte sagen, na ja, lassen Sie uns
denken über jedes Zeichen auch mit

183
00:10:48,810 --> 00:10:52,230
einen alphabetischen Index,
wobei A beispielsweise

184
00:10:52,230 --> 00:10:58,800
als ersten Buchstaben des Alphabets,
hat einen alphabetischen Index von Null.

185
00:10:58,800 --> 00:11:02,070
So, jetzt lassen Sie uns die Anwendung
elbe Gleichung wie zuvor,

186
00:11:02,070 --> 00:11:05,040
aber mit einem alphabetischen Index.

187
00:11:05,040 --> 00:11:07,810
>> So eine Null ist, wie wir definiert haben.

188
00:11:07,810 --> 00:11:15,640
Also dann nehmen Null plus zwei, mod 26,
das ist zwei, mod 26, das gibt uns zwei.

189
00:11:15,640 --> 00:11:18,780
Und auch im Hinblick auf die
einen alphabetischen Index,

190
00:11:18,780 --> 00:11:23,930
C ist der dritte Buchstabe in der
Alphabet, das wäre so entsprechen

191
00:11:23,930 --> 00:11:26,290
auf einen alphabetischen Index von zwei Kindern.

192
00:11:26,290 --> 00:11:29,850
So scheint es, dass die Verwendung von
alphabetischen Index in diesem Fall

193
00:11:29,850 --> 00:11:32,840
tatsächlich gibt uns das richtige Ergebnis.

194
00:11:32,840 --> 00:11:35,020
>> So, jetzt wollen wir prüfen,
sehen, ob die Gleichung funktioniert

195
00:11:35,020 --> 00:11:37,210
mit einem alphabetischen Index.

196
00:11:37,210 --> 00:11:42,540
Y im alphabetischen Index 24 als die
zweitletzten Buchstaben im Alphabet.

197
00:11:42,540 --> 00:11:46,520
Also dann 24 plus unsere
Schlüssel von zwei gibt uns 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 gibt uns 0, die, zum Glück für
uns ist der alphabetischen Index für A.

199
00:11:54,750 --> 00:11:59,100
Hoffentlich ist das Beweis genug, dass
die alphabetische Index-Methode funktioniert.

200
00:11:59,100 --> 00:12:03,180
Wenn nicht, fühlen sich frei, zu versuchen,
einige Beispiele für Ihre eigenen.

201
00:12:03,180 --> 00:12:08,030
>> Um rund um die richtig wickeln
Alphabet und wenden Sie die Caesar-Gleichung,

202
00:12:08,030 --> 00:12:11,280
dann wissen wir, dass wir brauchen, um
befassen sich mit alphabetischen Indizes.

203
00:12:11,280 --> 00:12:15,130
Aber wir beginnen mit ASCII
Werte, und nur dann

204
00:12:15,130 --> 00:12:18,530
konvertiere wir dann zu
die alphabetischen Index.

205
00:12:18,530 --> 00:12:23,970
Von dort aus zu drucken, um, müssen wir
mit den ASCII-Werten wieder zu beschäftigen.

206
00:12:23,970 --> 00:12:28,350
Also müssen wir, um herauszufinden, wie man
gehen von ASCII nach alphabetisch

207
00:12:28,350 --> 00:12:31,080
und alphabetisch nach ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Also habe ich überlasse es Ihnen, um herauszufinden,
das Muster zwischen einem Zeichen

209
00:12:34,910 --> 00:12:38,590
und seine alphabetisch
Index und dessen ASCII-Wert.

210
00:12:38,590 --> 00:12:41,530
Nun, denken Sie daran, dass, obwohl
In dieser Tabelle sind direkt auf der Folie

211
00:12:41,530 --> 00:12:45,630
zeigt die Großbuchstaben, wir auch
haben zu prüfen, ob oder nicht

212
00:12:45,630 --> 00:12:48,915
ein anderes Muster gilt
für die Kleinbuchstaben.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> So, jetzt haben wir herausgefunden haben,
wie ein einzelnes Zeichen zu verschieben,

215
00:12:55,840 --> 00:13:02,200
dann alles, was wir tun müssen, ist Skala,
bis über den gesamten Text-zu gehen.

216
00:13:02,200 --> 00:13:04,260
So ist der Text-String.

217
00:13:04,260 --> 00:13:08,210
Zum Glück für uns, ist ein String wirklich
nur ein Array von Zeichen,

218
00:13:08,210 --> 00:13:12,150
so um jedes Zeichen zuzugreifen
einer Zeichenkette, alle müssen Sie tun

219
00:13:12,150 --> 00:13:14,270
ist Array-Notation zu verwenden.

220
00:13:14,270 --> 00:13:20,270
Sagen, dass ich eine Variable vom Typ haben
Zeichenfolge mit der Bezeichnung "text =" Dies ist CS50. "

221
00:13:20,270 --> 00:13:22,730
>> Nun, dann, um zu
Zugriff auf jedes Zeichen,

222
00:13:22,730 --> 00:13:25,880
Alle habe ich zu tun mit
der variable Text ist

223
00:13:25,880 --> 00:13:31,660
zu sagen, gut, Text auf dem Index Null, dass
entspricht Kapital T. Text im Index

224
00:13:31,660 --> 00:13:35,100
ein entspricht dem unteren Fall h.

225
00:13:35,100 --> 00:13:38,110
Eine weitere nützliche Funktion ist
die String-Länge-Funktion.

226
00:13:38,110 --> 00:13:40,760
So vorbei in einem String
diese Funktion wird wieder

227
00:13:40,760 --> 00:13:44,610
eine ganze Zahl, die Länge dieser Zeichenkette.

228
00:13:44,610 --> 00:13:47,060
>> Nun, da wir sprachen über
Alle diese verschiedenen Elemente,

229
00:13:47,060 --> 00:13:48,540
wir setzen sie wieder zusammen.

230
00:13:48,540 --> 00:13:52,210
So kehren Sie entweder mein Pseudo-Code
Code oder Ihre Pseudo-Code

231
00:13:52,210 --> 00:13:55,920
und gehen Sie durch und stellen Sie sicher, dass Sie
wissen, wie jede einzelne Sache zu tun.

232
00:13:55,920 --> 00:14:01,520
Den Schlüssel zu bekommen argc und argv verwenden,
den Schlüssel in eine ganze Zahl drehen, ein

233
00:14:01,520 --> 00:14:06,840
i, woraufhin für Klartext,
getstring und dann iteriert

234
00:14:06,840 --> 00:14:09,590
über jedes Zeichen in
die Klartextkette,

235
00:14:09,590 --> 00:14:14,910
Erhaltung der Fall jedes Zeichens
und das Zeichen durch den Schlüssel Verschiebung,

236
00:14:14,910 --> 00:14:17,520
sicherzustellen, dass Sie
um das Alphabet Einwickeln,

237
00:14:17,520 --> 00:14:20,850
schließlich die Druckausgabe des chiffrierten Text.

238
00:14:20,850 --> 00:14:25,470
Mein Name ist Amila, und das war Caesar.

239
00:14:25,470 --> 00:14:28,448

