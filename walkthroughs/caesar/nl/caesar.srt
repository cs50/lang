1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Laten we pakken Caesar.

3
00:00:02,270 --> 00:00:06,110
In Caesar, laten we de gebruiker
een geheime boodschap coderen.

4
00:00:06,110 --> 00:00:09,780
Dus laten we duiken recht in en kijk
onze Taken voor dit probleem.

5
00:00:09,780 --> 00:00:12,210
Dus eerst, krijgen we de sleutel van de gebruiker.

6
00:00:12,210 --> 00:00:15,210
Dan krijgen we de plaintext
dat ze willen coderen.

7
00:00:15,210 --> 00:00:21,380
Daarna vercijferen we het voor hen,
en ten slotte een afdruk van hun cijfertekst.

8
00:00:21,380 --> 00:00:23,600
>> Dus laten we beginnen met een voorbeeld.

9
00:00:23,600 --> 00:00:26,920
Stel dat je wilde het coderen
volledige alfabet met een sleutel van twee.

10
00:00:26,920 --> 00:00:31,360
Nou, je hele alfabet zou
gewoon worden verschoven naar letters.

11
00:00:31,360 --> 00:00:37,060
Dus A zou coderen naar C, B aan
D, C naar E, enzovoort enzovoort,

12
00:00:37,060 --> 00:00:42,470
totdat je bij X, dat codeert tot Z
of zed, afhankelijk van waar je vandaan komt.

13
00:00:42,470 --> 00:00:47,445
Dan zou Y dan verschuiven de hele weg,
wikkel rond het alfabet om A te krijgen,

14
00:00:47,445 --> 00:00:53,256
en dan eindelijk de laatste letter van de
alfabet, Z, zed, zou coderen naar B.

15
00:00:53,256 --> 00:00:54,660
>> Je hebt het?

16
00:00:54,660 --> 00:00:56,380
Laten we eens kijken naar enkele voorbeelden.

17
00:00:56,380 --> 00:01:00,540
Het eerste voorbeeld is hier vergelijkbaar
met wat we net boven uitgelegd.

18
00:01:00,540 --> 00:01:05,560
Dus als ik het coderen van een aantal deel van de
alfabet A tot L, met een sleutel van twee,

19
00:01:05,560 --> 00:01:09,760
dan krijg ik gewoon mijn hele
alfabet verschoven twee letters.

20
00:01:09,760 --> 00:01:12,230
>> Dan, in mijn volgende voorbeeld,
de sleutel nog twee

21
00:01:12,230 --> 00:01:15,080
dus je moet nog steeds weten
die brieven te verwachten.

22
00:01:15,080 --> 00:01:16,400
Maar hier is het een zin.

23
00:01:16,400 --> 00:01:18,100
Dit is CS50.

24
00:01:18,100 --> 00:01:21,090
Dus je zult merken dat ik
het behoud van het geval van mijn brieven,

25
00:01:21,090 --> 00:01:25,600
dus elke hoofdletters zijn ook
hoofdletters in de cijfertekst.

26
00:01:25,600 --> 00:01:27,800
En alle kleine letters
letters in het leesbare

27
00:01:27,800 --> 00:01:30,640
Ook kleine letters
letters in de cijfertekst.

28
00:01:30,640 --> 00:01:34,020
Maar ik blijf de letters
en eventuele uitroeptekens

29
00:01:34,020 --> 00:01:37,610
of andere leestekens hetzelfde.

30
00:01:37,610 --> 00:01:40,360
>> Dus nu hebben we een gevoel
voor hoe het programma werkt,

31
00:01:40,360 --> 00:01:43,890
voel je vrij om te gaan lopen wat meer
voorbeelden van je eigen, als je wilt.

32
00:01:43,890 --> 00:01:47,072
Laten we beginnen met het krijgen van
de sleutel van de gebruiker.

33
00:01:47,072 --> 00:01:48,780
Traditioneel, met
andere problemen, we hebben

34
00:01:48,780 --> 00:01:51,450
gewend aan het krijgen
alle nummers die we

35
00:01:51,450 --> 00:01:54,710
moet door de gebruiker wordt gevraagd
met de functie getint.

36
00:01:54,710 --> 00:01:58,850
Maar deze keer zijn we eigenlijk aan de hand
aan de opdrachtregel argument gebruiken

37
00:01:58,850 --> 00:02:01,760
en een nieuwe functie genaamd atoi.

38
00:02:01,760 --> 00:02:05,130
>> Wanneer u de belangrijkste run
programma in C, dan

39
00:02:05,130 --> 00:02:08,500
neemt in twee parameters--
int argc, die

40
00:02:08,500 --> 00:02:11,670
is het aantal argumenten
doorgegeven, en dan

41
00:02:11,670 --> 00:02:15,920
argv, een array van strings die bevat
de lijst van alle argumenten

42
00:02:15,920 --> 00:02:16,740
doorgegeven.

43
00:02:16,740 --> 00:02:19,740
Je hoeft niet expliciet hebben
deze variabelen verklaren.

44
00:02:19,740 --> 00:02:22,700
Ze zijn berekend voor
u door de compiler.

45
00:02:22,700 --> 00:02:28,160
Correct gebruik hiervoor zou zijn
voor argc twee in dit geval,

46
00:02:28,160 --> 00:02:32,630
omdat de gebruiker door te geven in
de oproep tot het programma, ./caesar,

47
00:02:32,630 --> 00:02:35,570
en dan de sleutel,
welk nummer ze willen.

48
00:02:35,570 --> 00:02:39,920
Dus dat betekent dat argc moeten twee
Om een ​​geldig gebruik van Caesar

49
00:02:39,920 --> 00:02:41,680
worden uitgevoerd.

50
00:02:41,680 --> 00:02:43,590
>> Dus laten we eens kijken naar een voorbeeld.

51
00:02:43,590 --> 00:02:47,760
Zeggen dat ik heb al geschreven en
stelde een programma genaamd blastoff.

52
00:02:47,760 --> 00:02:52,670
Dus als ik liep in de opdrachtregel
./blastoff Team Rocket, nou, dan,

53
00:02:52,670 --> 00:02:57,750
argc zou drie zijn, want ik
aangenomen in drie verschillende argumenten.

54
00:02:57,750 --> 00:02:59,830
Dan argv zou er zo uitzien.

55
00:02:59,830 --> 00:03:03,750
Het is een array en het zou
bevatten elk van de drie snaren.

56
00:03:03,750 --> 00:03:09,640
./blastoff de eerste index, team
in de volgende, en de raket in de laatste.

57
00:03:09,640 --> 00:03:11,610
>> Laten we praten over arrays voor een sec.

58
00:03:11,610 --> 00:03:15,560
Arrays zijn datastructuren die in het bezit
meerdere waarden van hetzelfde type.

59
00:03:15,560 --> 00:03:19,980
Dit kan van pas komen wanneer we
hebben lijsten van integers of strings.

60
00:03:19,980 --> 00:03:23,030
Vergeet niet ze hebben
hetzelfde type zijn.

61
00:03:23,030 --> 00:03:25,310
In de informatica, we
hou tellen van nul,

62
00:03:25,310 --> 00:03:29,260
dus vergeet niet dat arrays
Ook nul geïndexeerd.

63
00:03:29,260 --> 00:03:34,360
Dus het eerste element van mijn serie
gaat worden op index nul.

64
00:03:34,360 --> 00:03:37,580
Dus in dit geval, als ik
een array met lengte vier,

65
00:03:37,580 --> 00:03:41,350
dan is de laatste index van de
laatste element van mijn serie

66
00:03:41,350 --> 00:03:44,970
is eigenlijk gaat worden
bij index drie, niet vier.

67
00:03:44,970 --> 00:03:48,880
Want vergeet niet, we
beginnen te tellen bij nul.

68
00:03:48,880 --> 00:03:52,530
>> Hier is een voorbeeld van hoe u
misschien een reeks van je eigen te maken.

69
00:03:52,530 --> 00:03:56,440
Dus zeg ik wilde slaan mijn
drie favoriete hond namen.

70
00:03:56,440 --> 00:03:59,030
Dan zou ik een array van strings te creëren.

71
00:03:59,030 --> 00:04:04,450
Dus ik zou het soort, touwtje te verklaren, en
zet dan de naam van de array, honden,

72
00:04:04,450 --> 00:04:06,450
en dan in die vierkante
haakjes zet de grootte

73
00:04:06,450 --> 00:04:09,260
van de array-- in dit geval drie.

74
00:04:09,260 --> 00:04:12,690
>> Dus mijn eerste binnenkomst gaat
voor honden op index nul,

75
00:04:12,690 --> 00:04:14,750
en dat gaat Milo zijn.

76
00:04:14,750 --> 00:04:17,850
Dan honden bij index één
goofy zal zijn,

77
00:04:17,850 --> 00:04:23,060
lieveling Mochi, en dan de laatste
binnenkomst, de derde ingang op index twee,

78
00:04:23,060 --> 00:04:26,130
gaat schattig, lief Elphie zijn.

79
00:04:26,130 --> 00:04:28,610
U zult merken dat het formaat
voor het invullen van deze array

80
00:04:28,610 --> 00:04:32,150
lijkt erg op hoe je misschien
verklaren een andere variabele, waar

81
00:04:32,150 --> 00:04:36,307
je hebt de naam van de variabele, gevolgd door
de waarde die u wilt opslaan in.

82
00:04:36,307 --> 00:04:38,140
Het enige verschil in
dit geval is dat je

83
00:04:38,140 --> 00:04:42,700
aan te denken om de index te zetten
van de waarde tussen vierkante haken.

84
00:04:42,700 --> 00:04:46,420
En daar hebben we onze
drie favoriete honden.

85
00:04:46,420 --> 00:04:48,780
>> Maar helaas, het is tijd
terug naar Caesar te krijgen.

86
00:04:48,780 --> 00:04:52,910
Vergeet niet dat het juiste gebruik van de
gebruiker zal passeren in niet alleen

87
00:04:52,910 --> 00:04:57,430
de naam van het programma ./caesar, maar
ook de sleutel die ze willen verschuiven

88
00:04:57,430 --> 00:04:58,850
hun plaintext door.

89
00:04:58,850 --> 00:05:01,540
Dus dat betekent dat argc twee moeten zijn.

90
00:05:01,540 --> 00:05:07,580
Zij moeten passeren two-- niet meer, niet
minder dan twee command line argumenten.

91
00:05:07,580 --> 00:05:09,050
>> Nu, hoe zit het met argv?

92
00:05:09,050 --> 00:05:12,880
Nou, we weten al dat de
reeks gaat lengte twee zijn,

93
00:05:12,880 --> 00:05:15,270
maar wat er in elk element?

94
00:05:15,270 --> 00:05:19,330
Nou, het eerste element
zal ./caesar zijn,

95
00:05:19,330 --> 00:05:24,190
en dan de volgende element gaat
bevat de sleutel die de gebruiker getypt.

96
00:05:24,190 --> 00:05:27,480
Nu, als ze gebruikt correct
voor het gebruik van Caesar,

97
00:05:27,480 --> 00:05:29,350
dan zijn ze gaan in een getal.

98
00:05:29,350 --> 00:05:33,260
Maar hoewel het karakter
dat ze typen een getal,

99
00:05:33,260 --> 00:05:35,790
het is van het type data string.

100
00:05:35,790 --> 00:05:40,390
>> Dus hoe kunnen we zetten dat
string naar een integer?

101
00:05:40,390 --> 00:05:46,680
Dus zeg ik num, een string,
met het koord 50.

102
00:05:46,680 --> 00:05:49,000
Als ik wil om te zetten die
naar een integer, dan heb ik gewoon

103
00:05:49,000 --> 00:05:53,340
verklaren een nieuwe variabele, een
integer i, belt atoi.

104
00:05:53,340 --> 00:06:01,160
Ik pas in mijn stringvariabele, num, en
dan zal ik dan bevat het nummer 50.

105
00:06:01,160 --> 00:06:04,350
Zorg ervoor dat u de man te controleren
pagina's voor de atoi functie

106
00:06:04,350 --> 00:06:07,990
om te controleren welke bibliotheek het is
in, en welke waarde het

107
00:06:07,990 --> 00:06:14,550
zal terugkeren als de string doorgegeven
in niet alle nummers bevatten.

108
00:06:14,550 --> 00:06:16,950
>> Dus nu dat we hebben gekregen
de sleutel, de volgende stap

109
00:06:16,950 --> 00:06:19,430
is het leesbare van de gebruiker ontvangen.

110
00:06:19,430 --> 00:06:21,170
Nu, dit gaat
minder ingewikkeld

111
00:06:21,170 --> 00:06:23,410
dan navigeren rond de
command line argumenten.

112
00:06:23,410 --> 00:06:26,190
Alles wat we moeten doen is bellen
de getString functie

113
00:06:26,190 --> 00:06:29,660
om de gebruiker te vragen geven
ons een string, maar vergeet niet

114
00:06:29,660 --> 00:06:34,090
aan de specificaties voor de manier waarop we controleren
Wellicht wilt u de gebruiker voor die vragen.

115
00:06:34,090 --> 00:06:36,420
>> Nu komen we bij de
hart van de probleem--

116
00:06:36,420 --> 00:06:38,860
hoe de plaintext vercijferen.

117
00:06:38,860 --> 00:06:42,830
Nou, ten eerste, laten we praten over hoe
een teken vercijferen tegelijk,

118
00:06:42,830 --> 00:06:47,370
en dan zullen we pakken hoe
itereren over de hele plaintext.

119
00:06:47,370 --> 00:06:50,440
Ik heb een aantal pseudocode geschreven
voor de Caesar probleem.

120
00:06:50,440 --> 00:06:52,310
Ik moedig u aan
schrijf uw eigen ook.

121
00:06:52,310 --> 00:06:55,900
Het is misschien niet identiek te kijken
de mijne, en dat is OK, maar zolang

122
00:06:55,900 --> 00:06:58,640
de algemene idee is hetzelfde.

123
00:06:58,640 --> 00:07:00,780
>> De eerste drie stappen
hebben we al gedaan.

124
00:07:00,780 --> 00:07:03,100
We hebben de sleutel van gekregen
de command line argument,

125
00:07:03,100 --> 00:07:05,510
we hebben bleek dat de belangrijkste
in een integer, en we hebben

126
00:07:05,510 --> 00:07:09,320
gevraagd de gebruiker voor de plaintext
dat ze willen vercijferen.

127
00:07:09,320 --> 00:07:12,420
Dus dan is de volgende grote brok
dat voor elke letter

128
00:07:12,420 --> 00:07:15,070
in het leesbare tekenreeks,
als het alfabetisch,

129
00:07:15,070 --> 00:07:17,750
we willen behouden
haar zaak en verschuiven.

130
00:07:17,750 --> 00:07:20,900
Door het behoud van het geval, wat ik
bedoel is dat alle hoofdletters

131
00:07:20,900 --> 00:07:23,580
brieven moeten bovenste blijven
zaak en kleine letters

132
00:07:23,580 --> 00:07:25,640
moet blijven kleine letters.

133
00:07:25,640 --> 00:07:29,110
Dan, nadat we verschuiven die,
vervolgens afdrukken we de cijfertekst.

134
00:07:29,110 --> 00:07:33,100
>> Hier zijn drie functies die gaan
te pas komen voor dit probleem.

135
00:07:33,100 --> 00:07:38,010
Vergeet niet boven toen ik gaf de
Bijvoorbeeld voor het verschuiven is CS50?

136
00:07:38,010 --> 00:07:41,800
Vergeet niet dat de 50 en de
uitroepteken niet verschuiven?

137
00:07:41,800 --> 00:07:45,680
Dus hoe kunnen we zeggen of we
nodig hebt om een ​​brief te verschuiven of niet?

138
00:07:45,680 --> 00:07:48,650
Nou, "is alpha," als
passeer je het een karakter,

139
00:07:48,650 --> 00:07:54,850
zal terugkeren waar als dat personage
is een brief en anders false.

140
00:07:54,850 --> 00:07:56,870
Om u te helpen bij
behoud van kapitalisatie

141
00:07:56,870 --> 00:07:59,750
zijn de functies "wordt
bovenste "en" lager ".

142
00:07:59,750 --> 00:08:03,350
>> Deze twee functies houden ook
in een enkel karakter als input

143
00:08:03,350 --> 00:08:06,580
en keert u terug een Booleaanse,
waar of onwaar

144
00:08:06,580 --> 00:08:11,280
gelang dat teken
is hoofdletters of kleine letters.

145
00:08:11,280 --> 00:08:14,610
Omdat "is boven" en "is
lager "zijn Booleaanse functies,

146
00:08:14,610 --> 00:08:18,660
wat betekent dat zij terugkeren u een Booleaanse,
kunt u deze gebruiken in uw omstandigheden.

147
00:08:18,660 --> 00:08:23,490
Dus hier is een stukje code dat alleen
drukt een brief als het hoofdletters.

148
00:08:23,490 --> 00:08:27,790
Dus ik heb mijn karakter verklaard
brief worden de hoofdletters zed

149
00:08:27,790 --> 00:08:33,440
en dan als "is de bovenste" returns
waar is, dan printen ik die brief.

150
00:08:33,440 --> 00:08:38,200
>> Teruggaan naar onze eenvoudig voorbeeld van
verschuiven van het alfabet met een sleutel van twee,

151
00:08:38,200 --> 00:08:41,049
hoe kunnen we eigenlijk die aan het werk?

152
00:08:41,049 --> 00:08:45,770
Nou, het blijkt dat de personages
en integers zijn zeer nauw verwant.

153
00:08:45,770 --> 00:08:48,840
Elk personage heeft een
integer waarde geassocieerd

154
00:08:48,840 --> 00:08:53,260
met het gevonden in de ASCII grafiek,
waarbij ASCII elk personage

155
00:08:53,260 --> 00:08:55,380
waarde wordt weergegeven.

156
00:08:55,380 --> 00:08:58,940
Dus een hoofdletter A correspondeert
een ASCII-waarde van 65

157
00:08:58,940 --> 00:09:02,270
en een kleine naar een
een ASCII-waarde van 97.

158
00:09:02,270 --> 00:09:04,940
>> Voel je vrij om te zoeken
elke ASCII grafiek online

159
00:09:04,940 --> 00:09:07,720
om deze waarden te zien voor jezelf.

160
00:09:07,720 --> 00:09:12,096
Dus wat dit betekent is dat we kunnen
neem het karakter van hoofdletter A,

161
00:09:12,096 --> 00:09:18,200
voeg de integer twee om het, en dan krijg
het karakter hoofdletter C als gevolg.

162
00:09:18,200 --> 00:09:23,720
Dat komt omdat 65, de ASCII
waarde voor het kapitaal A, plus 2,

163
00:09:23,720 --> 00:09:29,960
geeft ons 67, wat overeenkomt
om het karakter van hoofdletter C.

164
00:09:29,960 --> 00:09:33,480
>> Helaas, dingen
zal niet helemaal zo eenvoudig.

165
00:09:33,480 --> 00:09:36,980
We hebben een vergelijking die
we moeten overwegen.

166
00:09:36,980 --> 00:09:43,590
Hier vertelt ons dat de ide ciphertext
letter correspondeert met de i-plaintext

167
00:09:43,590 --> 00:09:48,900
letter, plus de key--
dat alles, modulaire 26.

168
00:09:48,900 --> 00:09:50,810
Waarom is dat zo?

169
00:09:50,810 --> 00:09:55,430
Laten we teruggaan naar ons voorbeeld van
vóór, waar de hoofdletter A, plus 2,

170
00:09:55,430 --> 00:09:57,590
geeft ons kapitaal C.

171
00:09:57,590 --> 00:10:01,870
>> Dus het aanbrengen van de vergelijking die
de specificatie geeft ons,

172
00:10:01,870 --> 00:10:06,660
dan laten we kapitaal A
plus 2 en mod die met 26.

173
00:10:06,660 --> 00:10:10,730
Dus hoofdletter A, toen ik het in
die enkele aanhalingstekens,

174
00:10:10,730 --> 00:10:14,010
stelt me ​​in staat om het te behandelen als
een integer, zodat toelaat

175
00:10:14,010 --> 00:10:17,500
me om het te werpen om de ASCII-waarde, 65.

176
00:10:17,500 --> 00:10:20,080
65 plus 2 is 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 geeft ons 15,
maar dat niet echt

178
00:10:25,210 --> 00:10:32,590
zinvol, omdat we dat weten
hoofdletter C ASCII-waarde is 67, niet 15.

179
00:10:32,590 --> 00:10:35,580
Dus hoe kunnen we dat met elkaar te verzoenen?

180
00:10:35,580 --> 00:10:39,840
>> Nou, hier wil ik het poneren
notie van een alfabetische index.

181
00:10:39,840 --> 00:10:44,010
Dus we hebben al gesproken over hoe
elk personage heeft zijn ASCII-waarde,

182
00:10:44,010 --> 00:10:48,810
maar ik zou willen zeggen, nou ja, laten we
na te denken over elk personage ook met

183
00:10:48,810 --> 00:10:52,230
een alfabetische index,
waarbij A bijvoorbeeld

184
00:10:52,230 --> 00:10:58,800
als de eerste letter van het alfabet,
heeft een alfabetische index van nul.

185
00:10:58,800 --> 00:11:02,070
Dus laten we nu toepassen
dezelfde vergelijking als voorheen,

186
00:11:02,070 --> 00:11:05,040
maar met behulp van een alfabetische index.

187
00:11:05,040 --> 00:11:07,810
>> Dus A nul is, zoals we hebben gedefinieerd.

188
00:11:07,810 --> 00:11:15,640
Dus vervolgens het nemen van nul plus twee, mod 26,
dat is twee, mod 26, die geeft ons twee.

189
00:11:15,640 --> 00:11:18,780
En ja, in termen van
een alfabetische index,

190
00:11:18,780 --> 00:11:23,930
C is de derde letter in de
alfabet, dat overeenkomt

191
00:11:23,930 --> 00:11:26,290
naar een alfabetische index van twee.

192
00:11:26,290 --> 00:11:29,850
Dus lijkt het erop dat met de
alfabetische index in dit geval

193
00:11:29,850 --> 00:11:32,840
eigenlijk geeft ons het juiste resultaat.

194
00:11:32,840 --> 00:11:35,020
>> Dus laten we nu controleren
zien of de vergelijking werken

195
00:11:35,020 --> 00:11:37,210
met een alfabetische index.

196
00:11:37,210 --> 00:11:42,540
alfabetische index Y is 24 als de
na laatste letter in het alfabet.

197
00:11:42,540 --> 00:11:46,520
Dus dan 24 plus onze
sleutel van twee geeft ons 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 geeft ons 0, die, gelukkig voor
ons, is de alfabetische index voor A.

199
00:11:54,750 --> 00:11:59,100
Dus hopelijk dat is bewijs genoeg dat
de alfabetische index methode werkt.

200
00:11:59,100 --> 00:12:03,180
Zo niet, dan voel je vrij om uit te proberen
enkele voorbeelden van uw eigen.

201
00:12:03,180 --> 00:12:08,030
>> Om goed te wikkelen rond de
alfabet en breng de Caesar vergelijking,

202
00:12:08,030 --> 00:12:11,280
dan weten we dat we moeten
omgaan met alfabetische indices.

203
00:12:11,280 --> 00:12:15,130
Maar we beginnen met ASCII
waarden, en dan pas

204
00:12:15,130 --> 00:12:18,530
Doen wij dan om te zetten in
de alfabetische index.

205
00:12:18,530 --> 00:12:23,970
Vandaar, om te kunnen afdrukken, moeten we
opnieuw te behandelen met ASCII waarden.

206
00:12:23,970 --> 00:12:28,350
Dus we moeten uitzoeken hoe om te
gaan van ASCII naar alfabetische

207
00:12:28,350 --> 00:12:31,080
en van alfabetisch naar ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Dus ik laat het aan u om erachter te komen
het patroon tussen een personage

209
00:12:34,910 --> 00:12:38,590
en zijn alfabetisch
index en de ASCII-waarde.

210
00:12:38,590 --> 00:12:41,530
Nu, vergeet niet dat ook al
deze tabel rechts op de dia

211
00:12:41,530 --> 00:12:45,630
toont de hoofdletters, wij ook
moeten overwegen of niet

212
00:12:45,630 --> 00:12:48,915
een ander patroon van toepassing
voor de kleine letters.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Dus nu hebben we bedacht
hoe je een enkel karakter te verschuiven,

215
00:12:55,840 --> 00:13:02,200
dan alles wat we moeten doen, is schaal die
up te gaan over de hele plaintext.

216
00:13:02,200 --> 00:13:04,260
Dus de plaintext is een string.

217
00:13:04,260 --> 00:13:08,210
Gelukkig voor ons, een string is echt
slechts een array van karakters,

218
00:13:08,210 --> 00:13:12,150
dus in om toegang te krijgen tot elk karakter
van een string, alles wat je hoeft te doen

219
00:13:12,150 --> 00:13:14,270
is array notatie.

220
00:13:14,270 --> 00:13:20,270
Zeggen dat ik een variabele van het type
tekenreeks genaamd "text = 'dit is CS50.' '

221
00:13:20,270 --> 00:13:22,730
>> Nou, dan, met het oog op
toegang tot elk karakter,

222
00:13:22,730 --> 00:13:25,880
alles wat ik heb te maken met
de variabele tekst is

223
00:13:25,880 --> 00:13:31,660
om goed te zeggen, tekst bij index nul, dat
komt overeen met het kapitaal T. tekst bij index

224
00:13:31,660 --> 00:13:35,100
men overeen met de kleine letters h.

225
00:13:35,100 --> 00:13:38,110
Een andere handige functie is
de lengte van de string functie.

226
00:13:38,110 --> 00:13:40,760
Zo passeren in een string
die functie zal terugkeren

227
00:13:40,760 --> 00:13:44,610
een geheel getal dat de lengte van string.

228
00:13:44,610 --> 00:13:47,060
>> Nu we hebben gesproken over
al deze elementen,

229
00:13:47,060 --> 00:13:48,540
laten we ze weer bij elkaar.

230
00:13:48,540 --> 00:13:52,210
Dus terug naar ofwel mijn pseudocode
code of uw pseudocode

231
00:13:52,210 --> 00:13:55,920
en ga door en zorg ervoor dat u
weten hoe ze elk ding te doen.

232
00:13:55,920 --> 00:14:01,520
Het verkrijgen van de sleutel met behulp van argc en argv,
de sleutel tot een geheel getal, een

233
00:14:01,520 --> 00:14:06,840
i, wordt gevraagd voor platte tekst,
getString, en dan itereren

234
00:14:06,840 --> 00:14:09,590
meer dan elk karakter in
het leesbare tekenreeks,

235
00:14:09,590 --> 00:14:14,910
bewaren bij elk teken
en het verschuiven van dat karakter door de sleutel,

236
00:14:14,910 --> 00:14:17,520
ervoor te zorgen dat u bent
wikkelen rond het alfabet,

237
00:14:17,520 --> 00:14:20,850
eindelijk afdrukt dat cijfertekst.

238
00:14:20,850 --> 00:14:25,470
Mijn naam is Amila, en dit was Caesar.

239
00:14:25,470 --> 00:14:28,448

