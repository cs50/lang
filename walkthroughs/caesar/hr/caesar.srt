1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Idemo u obrani Cezara.

3
00:00:02,270 --> 00:00:06,110
U caru ćemo dopustiti korisniku
kodirati jednu tajnu.

4
00:00:06,110 --> 00:00:09,780
Tako ćemo roniti u pravu i gledati
u našim zadatke za ovaj problem.

5
00:00:09,780 --> 00:00:12,210
Dakle, prvo smo dobili ključ od korisnika.

6
00:00:12,210 --> 00:00:15,210
Onda smo dobili cisti
da oni žele da se kodirati.

7
00:00:15,210 --> 00:00:21,380
Nakon toga, mi ga za šifriranje za njih,
i na kraju mi ​​ispisati svoje šifrirana.

8
00:00:21,380 --> 00:00:23,600
>> Počnimo s primjerom.

9
00:00:23,600 --> 00:00:26,920
Recimo da je želio kodiraju
Cijela abeceda s ključem od dva.

10
00:00:26,920 --> 00:00:31,360
Pa, cijeli alfabet bi
Samo se pomaknuo na slova.

11
00:00:31,360 --> 00:00:37,060
Tako da bi se kodirati u C, B
D, C u E, tako dalje i tako dalje,

12
00:00:37,060 --> 00:00:42,470
dok ne dođete do X, koji kodira do Z
ili zed, ovisno o tome gdje ste iz.

13
00:00:42,470 --> 00:00:47,445
Tada je Y bi onda prebaciti sve na putu,
zaokrenuti abecede doći do A,

14
00:00:47,445 --> 00:00:53,256
a onda na kraju posljednje slovo
abeceda, Z, zed, će kodirati do točke B.

15
00:00:53,256 --> 00:00:54,660
>> Imaš li to?

16
00:00:54,660 --> 00:00:56,380
Pogledajmo neke primjere.

17
00:00:56,380 --> 00:01:00,540
Prvi primjer ovdje je vrlo sličan
na ono što smo upravo objašnjeno gore.

18
00:01:00,540 --> 00:01:05,560
Dakle, ako sam kodirati neki dio od
abeceda, A do L, pomoću ključa za dva,

19
00:01:05,560 --> 00:01:09,760
onda sam samo dobiti moj cijeli
abeceda pomaknuo dva slova.

20
00:01:09,760 --> 00:01:12,230
>> Zatim, u mom sljedećem primjeru,
ključ je još dva,

21
00:01:12,230 --> 00:01:15,080
tako da i dalje treba znati
koja slova očekivati.

22
00:01:15,080 --> 00:01:16,400
No, ovdje je fraza.

23
00:01:16,400 --> 00:01:18,100
Ovo je CS50.

24
00:01:18,100 --> 00:01:21,090
Tako ćete primijetiti da ja
sačuvati slučaj mojih slova,

25
00:01:21,090 --> 00:01:25,600
tako da bilo gornji slova su također
gornja slova u šifrirana.

26
00:01:25,600 --> 00:01:27,800
I bilo mala
slova u čistim

27
00:01:27,800 --> 00:01:30,640
Također su mala slova
slova u šifrirana.

28
00:01:30,640 --> 00:01:34,020
Ali držim slova
i bilo uskličnike

29
00:01:34,020 --> 00:01:37,610
ili bilo koje druge interpunkcije isti.

30
00:01:37,610 --> 00:01:40,360
>> Tako da sada imamo osjećaj
za kako program radi,

31
00:01:40,360 --> 00:01:43,890
slobodno otići raditi nešto više
primjeri svoj vlastiti, ako želite.

32
00:01:43,890 --> 00:01:47,072
Počnimo s dobiti
ključ od korisnika.

33
00:01:47,072 --> 00:01:48,780
Tradicionalno, s
drugih problema, mi smo

34
00:01:48,780 --> 00:01:51,450
navikli na dobivanje
Bilo koji broj da mi

35
00:01:51,450 --> 00:01:54,710
potrebno tako potiče korisnika
s funkcijom getint.

36
00:01:54,710 --> 00:01:58,850
Ali ovaj put mi zapravo idemo
za korištenje naredbenog retka argumente

37
00:01:58,850 --> 00:02:01,760
i nova funkcija zove atoi.

38
00:02:01,760 --> 00:02:05,130
>> Kada pokrenete glavni
Program u C, a zatim ga

39
00:02:05,130 --> 00:02:08,500
Potrebno je u dva parameters--
int argc, što

40
00:02:08,500 --> 00:02:11,670
je broj argumenata
donesen, a potom

41
00:02:11,670 --> 00:02:15,920
argv, niz nizova koji sadrži
popis sve argumente

42
00:02:15,920 --> 00:02:16,740
prošao.

43
00:02:16,740 --> 00:02:19,740
Vi izričito ne moraju
proglasiti ove varijable.

44
00:02:19,740 --> 00:02:22,700
Oni računaju za
što je prevodilac.

45
00:02:22,700 --> 00:02:28,160
Ispravno korištenje za to će biti
za argc biti dva, u ovom slučaju,

46
00:02:28,160 --> 00:02:32,630
jer korisnik mora proći
poziv za program, ./caesar,

47
00:02:32,630 --> 00:02:35,570
a onda ključ,
bez obzira na broj žele.

48
00:02:35,570 --> 00:02:39,920
Dakle, to znači da argc moraju biti dva
kako za valjanu upotrebu Cezara

49
00:02:39,920 --> 00:02:41,680
treba izvršiti.

50
00:02:41,680 --> 00:02:43,590
>> Pa pogledajmo primjer.

51
00:02:43,590 --> 00:02:47,760
Recimo Već sam napisao i
sastaviti program koji se zove Blastoff.

52
00:02:47,760 --> 00:02:52,670
Dakle, ako sam išla u naredbenom retku
./blastoff Tim Raketa, pa, dakle,

53
00:02:52,670 --> 00:02:57,750
argc će biti tri, jer sam
donesen u tri različite argumente.

54
00:02:57,750 --> 00:02:59,830
Zatim argv će izgledati ovako.

55
00:02:59,830 --> 00:03:03,750
To je polje, a to bi
sadrže svaki od tri žice.

56
00:03:03,750 --> 00:03:09,640
./blastoff u prvom registriranom tima
u sljedećem, a raketa u posljednja.

57
00:03:09,640 --> 00:03:11,610
>> Razgovarajmo o polja za sekundu.

58
00:03:11,610 --> 00:03:15,560
Nizovi su strukture podataka koji drže
više vrijednosti iste vrste.

59
00:03:15,560 --> 00:03:19,980
To može doći u ruci kada smo
imaju popise brojeva ili žice.

60
00:03:19,980 --> 00:03:23,030
Dovoljno je sjetiti da su
biti isti tip.

61
00:03:23,030 --> 00:03:25,310
U računalnoj znanosti, mi
volim brojati od nule,

62
00:03:25,310 --> 00:03:29,260
pa ne zaboravite da nizovi
također nula indeksiraju.

63
00:03:29,260 --> 00:03:34,360
Dakle, prvi element mog niza
će biti na indeks nula.

64
00:03:34,360 --> 00:03:37,580
Dakle, u ovom slučaju, kad sam
polje duljine četiri,

65
00:03:37,580 --> 00:03:41,350
onda posljednji indeks
Posljednji element mog niza

66
00:03:41,350 --> 00:03:44,970
zapravo će biti
na indeksu tri, a ne četiri.

67
00:03:44,970 --> 00:03:48,880
Jer zapamtite, mi
početi računajući na nulu.

68
00:03:48,880 --> 00:03:52,530
>> Evo jedan primjer kako vas
može stvoriti niz svoju vlastitu.

69
00:03:52,530 --> 00:03:56,440
Tako kažu ja sam htjela spremiti moj
tri omiljena pas imena.

70
00:03:56,440 --> 00:03:59,030
Tada bih stvoriti niz žice.

71
00:03:59,030 --> 00:04:04,450
Tako bih proglasiti tip, niz, a
zatim staviti naziv polja, psi,

72
00:04:04,450 --> 00:04:06,450
a onda u tim kvadrata
zagrade stavio veličinu

73
00:04:06,450 --> 00:04:09,260
od array-- u ovom slučaju, tri.

74
00:04:09,260 --> 00:04:12,690
>> Dakle, moj prvi ulazak ide
da se psi na indeks nula,

75
00:04:12,690 --> 00:04:14,750
i da će biti Milo.

76
00:04:14,750 --> 00:04:17,850
Zatim psi na indeksu jednom
će biti glup,

77
00:04:17,850 --> 00:04:23,060
draga Mochi, a zatim posljednja
ulaz, treći ulaz u indeksu dva,

78
00:04:23,060 --> 00:04:26,130
će biti slatka, slatka Elphie.

79
00:04:26,130 --> 00:04:28,610
Primijetit ćete da formatu
za popunjavanje ovog polja

80
00:04:28,610 --> 00:04:32,150
je vrlo mnogo kao kako biste mogli
proglasiti bilo koju drugu varijablu gdje

81
00:04:32,150 --> 00:04:36,307
imate naziv varijable slijedi
vrijednost koju želite pohraniti u njoj.

82
00:04:36,307 --> 00:04:38,140
Jedina razlika u
ovaj slučaj je da vas

83
00:04:38,140 --> 00:04:42,700
imati na umu da se stavi indeksa
vrijednosti u uglatim zagradama.

84
00:04:42,700 --> 00:04:46,420
I tamo imamo naše
tri omiljena pasa.

85
00:04:46,420 --> 00:04:48,780
>> No, nažalost, to je vrijeme
da se vratim na cara.

86
00:04:48,780 --> 00:04:52,910
Sjeti se da ispravnog korištenja za
Korisnik će biti u prolazu, ne samo

87
00:04:52,910 --> 00:04:57,430
naziv programa ./caesar, ali
također ključ koji žele pomak

88
00:04:57,430 --> 00:04:58,850
njihov cisti strane.

89
00:04:58,850 --> 00:05:01,540
Dakle, to znači da argc moraju biti dva.

90
00:05:01,540 --> 00:05:07,580
Oni moraju proći two-- ništa više ni
manje od dva argumente naredbenog retka.

91
00:05:07,580 --> 00:05:09,050
>> Sada, što je argv?

92
00:05:09,050 --> 00:05:12,880
Pa, mi već znamo da je
polje će biti dužine dva,

93
00:05:12,880 --> 00:05:15,270
ali ono što je sadržano u svakom elementu?

94
00:05:15,270 --> 00:05:19,330
Pa, prvi element
će biti ./caesar,

95
00:05:19,330 --> 00:05:24,190
a onda sljedeći element koji će se
sadrži ključ koji je korisnik upisali u.

96
00:05:24,190 --> 00:05:27,480
Sada, ako su ga se koristi ispravno
za korištenje Cezara,

97
00:05:27,480 --> 00:05:29,350
onda oni će upisati broj.

98
00:05:29,350 --> 00:05:33,260
No, iako je karaktera
da tip je broj,

99
00:05:33,260 --> 00:05:35,790
to je od tipa podataka string.

100
00:05:35,790 --> 00:05:40,390
>> Pa kako ćemo pretvoriti da
string na cijeli broj?

101
00:05:40,390 --> 00:05:46,680
Tako da imam broj, niz,
sadrži niz 50.

102
00:05:46,680 --> 00:05:49,000
Ako želim pretvoriti da
u cijeli broj, onda sam jednostavno

103
00:05:49,000 --> 00:05:53,340
proglasiti novu varijablu
cijeli broj ja, pozivajući atoi.

104
00:05:53,340 --> 00:06:01,160
I prođe u mom string varijablu broj, a
onda ću onda redni broj 50.

105
00:06:01,160 --> 00:06:04,350
Svakako provjerite čovjeka
stranice za funkciju atoi

106
00:06:04,350 --> 00:06:07,990
provjeriti koje knjižnica je
u, kao što je to vrijednost

107
00:06:07,990 --> 00:06:14,550
vratit će se ako je string prošao
u ne sadrži sve brojeve.

108
00:06:14,550 --> 00:06:16,950
>> Sada kada smo stečen
ključ, sljedeći korak

109
00:06:16,950 --> 00:06:19,430
je da se cisti od korisnika.

110
00:06:19,430 --> 00:06:21,170
Sada, to će
biti manje komplicirana

111
00:06:21,170 --> 00:06:23,410
od navigacije oko
argumente naredbenog retka.

112
00:06:23,410 --> 00:06:26,190
Sve što morate učiniti je poziv
funkcija getstring

113
00:06:26,190 --> 00:06:29,660
potaknuti korisnika da daju
nas niz, ali ne zaboravite

114
00:06:29,660 --> 00:06:34,090
provjeriti specifikacije po kojima bismo
možda žele brz korisnik za to.

115
00:06:34,090 --> 00:06:36,420
>> Sada smo došli do
Srce problem--

116
00:06:36,420 --> 00:06:38,860
Kako za šifriranje na čistim.

117
00:06:38,860 --> 00:06:42,830
Pa, kao prvo, pričajmo o tome
za šifriranje jedan znak na vrijeme,

118
00:06:42,830 --> 00:06:47,370
a zatim ćemo se obratiti kako
ponoviti po cijeloj čistim.

119
00:06:47,370 --> 00:06:50,440
Napisao sam neki pseudokod
za Caesar problem.

120
00:06:50,440 --> 00:06:52,310
Ja vas potaknuti da
Napišite vlastiti, kao dobro.

121
00:06:52,310 --> 00:06:55,900
To ne može izgledati identično
mina, i to je u redu, ali sve dok

122
00:06:55,900 --> 00:06:58,640
kao opće ideje je isti.

123
00:06:58,640 --> 00:07:00,780
>> Prva tri koraka
već smo učinili.

124
00:07:00,780 --> 00:07:03,100
Mi smo stečen ključ iz
komandna linija argument,

125
00:07:03,100 --> 00:07:05,510
mi smo se okrenuo taj ključ
u cijeli broj, a mi smo

126
00:07:05,510 --> 00:07:09,320
zatraži od korisnika za čistim
da žele šifriranje.

127
00:07:09,320 --> 00:07:12,420
Pa onda sljedeći veliki komad
je da za svaki znak

128
00:07:12,420 --> 00:07:15,070
u čistim niza,
ako je traka,

129
00:07:15,070 --> 00:07:17,750
želimo sačuvati
njegov slučaj i pomak.

130
00:07:17,750 --> 00:07:20,900
Do sačuvati slučaj, što sam
znači da je sve velika slova

131
00:07:20,900 --> 00:07:23,580
slova treba ostati Gornji
Slučaj i sve mala slova

132
00:07:23,580 --> 00:07:25,640
treba ostati mala.

133
00:07:25,640 --> 00:07:29,110
Dakle, nakon što smo pomak one,
onda ćemo ispisati šifrirana.

134
00:07:29,110 --> 00:07:33,100
>> Ovdje su tri funkcije koje će
doći u ruci za ovaj problem.

135
00:07:33,100 --> 00:07:38,010
Sjeti se iznad kad sam dao
Primjer za pomicanje ovo je CS50?

136
00:07:38,010 --> 00:07:41,800
Sjeti se da je 50 i
uskličnik nije pomak?

137
00:07:41,800 --> 00:07:45,680
Pa kako možemo reći da li mi
treba da promijenimo pismo ili ne?

138
00:07:45,680 --> 00:07:48,650
Pa, "alfa", ako
što je to lik prođe,

139
00:07:48,650 --> 00:07:54,850
vratit će se vrijedi ako taj lik
je pismo i lažno drugačije.

140
00:07:54,850 --> 00:07:56,870
Da bi vam pomoći s
očuvanje kapitalizacija

141
00:07:56,870 --> 00:07:59,750
su funkcije "se
gornja "i" niži ".

142
00:07:59,750 --> 00:08:03,350
>> Ove dvije funkcije također uzeti
u jednom karaktera kao ulaz

143
00:08:03,350 --> 00:08:06,580
i vratiti vam Boolean,
true ili false

144
00:08:06,580 --> 00:08:11,280
ovisno o tome je li taj lik
je veliko ili malo slovo.

145
00:08:11,280 --> 00:08:14,610
Budući da "je gornja" i "je
niži "su Booleova funkcija,

146
00:08:14,610 --> 00:08:18,660
što znači da su vam vratiti Boolean,
možete koristiti ove u svojim uvjetima.

147
00:08:18,660 --> 00:08:23,490
Dakle, ovdje je isječak koda koji samo
ispisuje slovo ako je gornji slučaj.

148
00:08:23,490 --> 00:08:27,790
Tako sam proglasio moj karakter
Pismo se gornji slučaj zed

149
00:08:27,790 --> 00:08:33,440
i onda ako "je gornji" povrati
istina, onda sam ispisati pismo.

150
00:08:33,440 --> 00:08:38,200
>> Vraćajući se na naše jednostavnom primjeru
prebacuje abecedu pomoću ključa za dva,

151
00:08:38,200 --> 00:08:41,049
Kako ćemo zaista dobiti taj posao?

152
00:08:41,049 --> 00:08:45,770
Pa, ispada da likovi
i cijeli brojevi su vrlo usko povezani.

153
00:08:45,770 --> 00:08:48,840
Svaki lik ima
cijeli broj povezan

154
00:08:48,840 --> 00:08:53,260
uz to naći u ASCII tablicu,
gdje je svaki lik u ASCII

155
00:08:53,260 --> 00:08:55,380
Prikazuje vrijednost.

156
00:08:55,380 --> 00:08:58,940
Tako da se velika slova A odgovara
da ASCII vrijednost od 65

157
00:08:58,940 --> 00:09:02,270
i mala slova a da
ASCII vrijednost od 97.

158
00:09:02,270 --> 00:09:04,940
>> Slobodno pogledati
bilo ASCII tablica na internetu

159
00:09:04,940 --> 00:09:07,720
vidjeti te vrijednosti za sebe.

160
00:09:07,720 --> 00:09:12,096
Dakle, što to znači da možemo
uzeti karakter velika slova A,

161
00:09:12,096 --> 00:09:18,200
dodati cijeli broj dva na njega, a zatim se
znak velika slova C kao rezultat.

162
00:09:18,200 --> 00:09:23,720
To je zato 65, ASCII
Vrijednost za kapitalne A, plus 2,

163
00:09:23,720 --> 00:09:29,960
daje nam 67, što odgovara
karakteru gornjeg slučaja C.

164
00:09:29,960 --> 00:09:33,480
>> Nažalost, stvari
neće baš biti tako jednostavna.

165
00:09:33,480 --> 00:09:36,980
Imamo jednadžbu koja
moramo uzeti u obzir.

166
00:09:36,980 --> 00:09:43,590
Evo što nam govori da je i-tog šifrirana
Pismo odgovara i-tog otvorenog teksta

167
00:09:43,590 --> 00:09:48,900
pismo, plus key--
sve to, modularni 26.

168
00:09:48,900 --> 00:09:50,810
Zašto je to tako?

169
00:09:50,810 --> 00:09:55,430
Vratimo se našem primjeru iz
prije, gdje je glavni A, plus 2,

170
00:09:55,430 --> 00:09:57,590
daje nam kapital C.

171
00:09:57,590 --> 00:10:01,870
>> Dakle, primjenom jednadžbe koja
specifikacija nam daje,

172
00:10:01,870 --> 00:10:06,660
onda uzmimo kapitalu
plus 2 i mod da do 26.

173
00:10:06,660 --> 00:10:10,730
Dakle, glavni A, kada sam ga stavio u
ti navodnika,

174
00:10:10,730 --> 00:10:14,010
mi omogućuje da ga tretiraju kao
cijeli broj, tako da se dopušta

175
00:10:14,010 --> 00:10:17,500
mi da ga baci u svoj ASCII vrijednosti, 65.

176
00:10:17,500 --> 00:10:20,080
65 plus 2 je 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 daje nam 15,
ali to ne stvarno

178
00:10:25,210 --> 00:10:32,590
smisla, jer znamo da je
kapital C ASCII vrijednost 67, a ne 15.

179
00:10:32,590 --> 00:10:35,580
Pa kako ćemo pomiriti to?

180
00:10:35,580 --> 00:10:39,840
>> Pa, ovdje bih naciju
Pojam abecedi indeksa.

181
00:10:39,840 --> 00:10:44,010
Dakle, već smo razgovarali o tome kako
svaki lik ima svoj ASCII vrijednost,

182
00:10:44,010 --> 00:10:48,810
ali ja bih reći, dobro, neka je
razmišljati o tome svaki lik također imaju

183
00:10:48,810 --> 00:10:52,230
abecedni indeks,
gdje su A, na primjer,

184
00:10:52,230 --> 00:10:58,800
kao prvo slovo abecede,
ima abecedni indeks nula.

185
00:10:58,800 --> 00:11:02,070
Dakle, sada ćemo primijeniti
Ista jednadžba kao i prije,

186
00:11:02,070 --> 00:11:05,040
ali pomoću abecednog kazala.

187
00:11:05,040 --> 00:11:07,810
>> Tako je nula, kao što smo definirano.

188
00:11:07,810 --> 00:11:15,640
Pa onda da nula plus dva, mod 26,
to je dva, mod 26, što nam daje dva.

189
00:11:15,640 --> 00:11:18,780
I dobro, s obzirom na
abecedni indeks,

190
00:11:18,780 --> 00:11:23,930
C je treće slovo u
abeceda, da bi odgovaralo

191
00:11:23,930 --> 00:11:26,290
do abecedni popis dvoje.

192
00:11:26,290 --> 00:11:29,850
Tako se čini da pomoću
abecedni popis u ovom slučaju

193
00:11:29,850 --> 00:11:32,840
zapravo nam daje ispravan rezultat.

194
00:11:32,840 --> 00:11:35,020
>> Dakle, sada ćemo provjeriti
vidjeti ako je jednadžba djela

195
00:11:35,020 --> 00:11:37,210
s abecednim indeksa.

196
00:11:37,210 --> 00:11:42,540
Y je abecedni indeks je 24 kao
Drugi na zadnju riječ u abecede.

197
00:11:42,540 --> 00:11:46,520
Dakle 24 plus naš
Ključ od dva daje nam 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 daje nam 0, koji je, na sreću za
nas, je abecedni indeks za A.

199
00:11:54,750 --> 00:11:59,100
Dakle, nadam se da je dovoljno da je dokaz
abecedni metoda indeks radi.

200
00:11:59,100 --> 00:12:03,180
Ako ne, slobodno isprobati
neki primjeri svoj vlastiti.

201
00:12:03,180 --> 00:12:08,030
>> Da bi se pravilno omotati oko
abeceda i primijeniti Caesar jednadžbe,

202
00:12:08,030 --> 00:12:11,280
onda znamo da moramo
bave abecednom indeksa.

203
00:12:11,280 --> 00:12:15,130
Ali mi početi s ASCII
vrijednosti, a tek onda

204
00:12:15,130 --> 00:12:18,530
mi onda pretvoriti u
abecedni indeks.

205
00:12:18,530 --> 00:12:23,970
Od tamo, kako bi se ispisati, moramo
se nositi s ASCII vrijednostima opet.

206
00:12:23,970 --> 00:12:28,350
Dakle, moramo shvatiti kako
ići od ASCII prema abecednom

207
00:12:28,350 --> 00:12:31,080
i od abecednom u ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Tako sam ga ostaviti na vas shvatiti
uzorak između lika

209
00:12:34,910 --> 00:12:38,590
a njegov abecedni
Indeks i njegov ASCII vrijednost.

210
00:12:38,590 --> 00:12:41,530
Sada, sjetite se da, iako
ova tablica pravo na zatvaraču

211
00:12:41,530 --> 00:12:45,630
pokazuje velika slova, mi također
uzeti u obzir da li ili ne

212
00:12:45,630 --> 00:12:48,915
vrijedi drugačiji uzorak
za malih slova.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Dakle, sada kada smo shvatili
kako prebaciti jedan znak,

215
00:12:55,840 --> 00:13:02,200
onda sve što morate učiniti je mjerilo koje
spreman ići preko cijelog čistim.

216
00:13:02,200 --> 00:13:04,260
Tako je cisti je niz.

217
00:13:04,260 --> 00:13:08,210
Srećom po nas, niz je stvarno
samo niz znakova,

218
00:13:08,210 --> 00:13:12,150
tako da bi mogli pristupiti svaki lik
od niza, sve što morate učiniti

219
00:13:12,150 --> 00:13:14,270
je koristiti array zapis.

220
00:13:14,270 --> 00:13:20,270
Recimo imam varijablu tipa
niz pod nazivom "text = 'Ovo je CS50."

221
00:13:20,270 --> 00:13:22,730
>> Onda, kako bi se
pristupiti svaki lik,

222
00:13:22,730 --> 00:13:25,880
sve što ima veze s
varijabla tekst

223
00:13:25,880 --> 00:13:31,660
reći dobro, tekst na indeksu nulu, da
odgovara kapital T. Tekst na indeks

224
00:13:31,660 --> 00:13:35,100
jedan odgovara donjem slučaju h.

225
00:13:35,100 --> 00:13:38,110
Još jedna korisna funkcija
funkcija Duljina niza.

226
00:13:38,110 --> 00:13:40,760
Tako prolaze u nizu na
da je funkcija će se vratiti

227
00:13:40,760 --> 00:13:44,610
cijeli broj, duljina toga niza.

228
00:13:44,610 --> 00:13:47,060
>> Sada kada smo govorili o
svi ti različiti elementi,

229
00:13:47,060 --> 00:13:48,540
neka je staviti ih zajedno.

230
00:13:48,540 --> 00:13:52,210
Tako se vratiti na bilo moje pseudokod
broj ili tvoj pseudokod

231
00:13:52,210 --> 00:13:55,920
i proći i biti sigurni da vam
znati kako to učiniti svaku stvar.

232
00:13:55,920 --> 00:14:01,520
Dobivanje ključ pomoću argc i argv,
zakretanjem ključa u cijeli broj, A

233
00:14:01,520 --> 00:14:06,840
na i, što je navelo za čistim,
getstring, a zatim ponavljanjem

234
00:14:06,840 --> 00:14:09,590
nad svakim lika u
cisti string,

235
00:14:09,590 --> 00:14:14,910
očuvanje slučaj svaki znak
i prebacujući taj lik pomoću ključa,

236
00:14:14,910 --> 00:14:17,520
osiguravajući da ste
omotava oko abecede,

237
00:14:17,520 --> 00:14:20,850
napokon ispisivanja tog šifrirana.

238
00:14:20,850 --> 00:14:25,470
Moje ime je Amila, a to je Cezar.

239
00:14:25,470 --> 00:14:28,448

