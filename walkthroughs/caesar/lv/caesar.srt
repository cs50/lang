1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Pieņemsim risināt Cēzaru.

3
00:00:02,270 --> 00:00:06,110
In ķeizaram, mēs ļauj lietotājam
lai kodētu slepenu ziņu.

4
00:00:06,110 --> 00:00:09,780
Tā ļauj nirt tiesības un meklēt
mūsu darāmo šīs problēmas.

5
00:00:09,780 --> 00:00:12,210
Tātad, pirmkārt, mēs atslēgu no lietotāja.

6
00:00:12,210 --> 00:00:15,210
Tad mēs iegūtu teksta,
ka viņi vēlas, lai šifrēt.

7
00:00:15,210 --> 00:00:21,380
Pēc tam, mēs šifrēt to viņiem,
un, visbeidzot, mēs drukāt savu ciphertext.

8
00:00:21,380 --> 00:00:23,600
>> Tāpēc sāksim ar piemēru.

9
00:00:23,600 --> 00:00:26,920
Say jums gribēja šifrēt
Visa alfabēts ar atslēgu divi.

10
00:00:26,920 --> 00:00:31,360
Nu, visa jūsu alfabēts būtu
vienkārši pārvietoti uz vēstulēm.

11
00:00:31,360 --> 00:00:37,060
Tātad varētu šifrēt uz C, B
D, C līdz E, tā tālāk un tā tālāk,

12
00:00:37,060 --> 00:00:42,470
līdz jums X, kas kodē līdz Z
vai zed, atkarībā no tā, kur jūs esat no.

13
00:00:42,470 --> 00:00:47,445
Tad Y tad novirzīt visu ceļu,
wrap ap alfabētu, lai saņemtu A,

14
00:00:47,445 --> 00:00:53,256
un tad beidzot pēdējais burts
alfabēts, Z, zed, būtu šifrēt uz B.

15
00:00:53,256 --> 00:00:54,660
>> Jums, ka?

16
00:00:54,660 --> 00:00:56,380
Apskatīsim dažus piemērus.

17
00:00:56,380 --> 00:01:00,540
Pirmais piemērs šeit ir ļoti līdzīgs
ar to, ko mēs tikko paskaidrots iepriekš.

18
00:01:00,540 --> 00:01:05,560
Tātad, ja es kodēt kādu sekciju
alfabēts, no A līdz L, ar atslēgu divi,

19
00:01:05,560 --> 00:01:09,760
tad es tikai saņemt savu visu vielas
alfabēts pārvietoti divus burtus.

20
00:01:09,760 --> 00:01:12,230
>> Tad manā nākamajā piemēram,
galvenais ir vēl divi,

21
00:01:12,230 --> 00:01:15,080
lai jūs joprojām vajadzētu zināt
kas burti sagaidīt.

22
00:01:15,080 --> 00:01:16,400
Bet šeit tas ir frāze.

23
00:01:16,400 --> 00:01:18,100
Tas ir CS50.

24
00:01:18,100 --> 00:01:21,090
Tātad, jūs pamanīsiet, ka es
saglabāt lietu manas vēstules,

25
00:01:21,090 --> 00:01:25,600
tāpēc jebkurš augšējo burti ir arī
augšējo burti šajā ciphertext.

26
00:01:25,600 --> 00:01:27,800
Un jebkurš mazie burti
burti teksta,

27
00:01:27,800 --> 00:01:30,640
ir arī mazie burti
burti ciphertext.

28
00:01:30,640 --> 00:01:34,020
Bet es saglabāt vēstules
un jebkādi izsaukuma zīmes

29
00:01:34,020 --> 00:01:37,610
vai jebkurš cits punktācija tāds pats.

30
00:01:37,610 --> 00:01:40,360
>> Tāpēc tagad, ka mums ir sajūta
par to, kā programma darbojas,

31
00:01:40,360 --> 00:01:43,890
justies brīvi iet palaist dažas vairāk
piemēri savu, ja vēlaties.

32
00:01:43,890 --> 00:01:47,072
Sāksim ar kļūst
galvenais no lietotāja.

33
00:01:47,072 --> 00:01:48,780
Tradicionāli, ar
citas problēmas, mēs esam

34
00:01:48,780 --> 00:01:51,450
pieraduši, lai iegūtu
kādi skaitļi, kas mēs

35
00:01:51,450 --> 00:01:54,710
vajag ko pamudinot lietotājam
ar funkciju getint.

36
00:01:54,710 --> 00:01:58,850
Bet šoreiz mēs patiesībā notiek
izmantot komandrindas argumentu

37
00:01:58,850 --> 00:02:01,760
un jaunu funkciju sauc atoi.

38
00:02:01,760 --> 00:02:05,130
>> Palaižot galvenā
programma C, tad tas

39
00:02:05,130 --> 00:02:08,500
notiek divās parameters--
int argc, kas

40
00:02:08,500 --> 00:02:11,670
ir skaitlis no argumentus
pieņemts, un pēc tam

41
00:02:11,670 --> 00:02:15,920
argv, masīvs stīgām, kas satur
saraksts, kas visi no argumentus

42
00:02:15,920 --> 00:02:16,740
pagājis.

43
00:02:16,740 --> 00:02:19,740
Jums nav skaidri ir
atzīt šos mainīgos.

44
00:02:19,740 --> 00:02:22,700
Viņi aprēķināti
jūs ar kompilatoru.

45
00:02:22,700 --> 00:02:28,160
Pareiza izmantošana tas būtu
par argc būt divi, šajā gadījumā,

46
00:02:28,160 --> 00:02:32,630
jo lietotājs ir caurlaide
zvans ar programmu ./caesar,

47
00:02:32,630 --> 00:02:35,570
un pēc tam taustiņu,
neatkarīgi numurs viņi vēlas.

48
00:02:35,570 --> 00:02:39,920
Tātad tas nozīmē, ka argc jābūt divām
Lai derīgu lietošanai Cēzara

49
00:02:39,920 --> 00:02:41,680
jāizpilda.

50
00:02:41,680 --> 00:02:43,590
>> Tātad aplūkosim piemēru.

51
00:02:43,590 --> 00:02:47,760
Teikt, es esmu jau uzrakstījis un
apkopo programmu, ko sauc Blastoff.

52
00:02:47,760 --> 00:02:52,670
Tātad, ja es skrēja komandrindas
./blastoff Team Rocket, labi, tad,

53
00:02:52,670 --> 00:02:57,750
argc būtu trīs, jo I
pagājuši trīs atsevišķos argumentus.

54
00:02:57,750 --> 00:02:59,830
Tad argv varētu izskatīties šādi.

55
00:02:59,830 --> 00:03:03,750
Tas ir masīvs, un tas būtu
satur katra no trim stīgām.

56
00:03:03,750 --> 00:03:09,640
./blastoff pirmajā indeksa, komanda
nākamajā, un raķeti pēdējais.

57
00:03:09,640 --> 00:03:11,610
>> Parunāsim par masīvu par sek.

58
00:03:11,610 --> 00:03:15,560
Masīvi ir datu struktūras, kas tur
vairākas vērtības viena un tā paša tipa.

59
00:03:15,560 --> 00:03:19,980
Tas var noderēt, ja mēs
ir saraksti integers vai virknes.

60
00:03:19,980 --> 00:03:23,030
Tikai atceraties tie ir
lai pie tā paša tipa.

61
00:03:23,030 --> 00:03:25,310
Datorzinātnēs, mēs
mīlu skaitot no nulles,

62
00:03:25,310 --> 00:03:29,260
tāpēc atcerieties, ka bloki
Ir arī nulles indeksēti.

63
00:03:29,260 --> 00:03:34,360
Tāpēc mana masīva pirmais elements
būs nulles indeksu.

64
00:03:34,360 --> 00:03:37,580
Tātad šajā gadījumā, kad man ir
masīvs garuma četri,

65
00:03:37,580 --> 00:03:41,350
pēc tam pēdējo indekss no
pēdējais elements mana masīvs

66
00:03:41,350 --> 00:03:44,970
faktiski būs
pie trīs, nevis četri indeksā.

67
00:03:44,970 --> 00:03:48,880
Jo atceros, mēs
sāk skaitīt no nulles.

68
00:03:48,880 --> 00:03:52,530
>> Lūk, piemērs, kā jūs
varētu izveidot masīvu savu.

69
00:03:52,530 --> 00:03:56,440
Tā teikt, es gribēju, lai saglabātu manu
trīs mīļākie suņu vārdi.

70
00:03:56,440 --> 00:03:59,030
Tad es varētu izveidot masīvu stīgas.

71
00:03:59,030 --> 00:04:04,450
Tāpēc es apliecinu, tipa, stīgu, un
tad ielieciet nosaukumu masīva, suņiem,

72
00:04:04,450 --> 00:04:06,450
un tad tajās laukumā
iekavās likt izmēru

73
00:04:06,450 --> 00:04:09,260
no array-- šajā gadījumā, trīs.

74
00:04:09,260 --> 00:04:12,690
>> Tātad mans pirmais ieraksts notiek
būt suņiem pie nulles indeksu,

75
00:04:12,690 --> 00:04:14,750
un kas būs Milo.

76
00:04:14,750 --> 00:04:17,850
Tad suņi vienā indeksā
būs dumjš,

77
00:04:17,850 --> 00:04:23,060
mīļš mochi, un pēc tam pēdējais
ierakstu, trešais ieraksts pie divām indeksu,

78
00:04:23,060 --> 00:04:26,130
būs gudrs, salds Elphie.

79
00:04:26,130 --> 00:04:28,610
Jūs pamanīsiet, ka formātā
aizpildīšanai šajā masīvā

80
00:04:28,610 --> 00:04:32,150
ir ļoti daudz, piemēram, kā jūs varētu
paziņot jebkuru citu mainīgo kur

81
00:04:32,150 --> 00:04:36,307
Jums ir mainīgā nosaukumu, kam seko
vērtība, ka jūs vēlaties saglabāti tajā.

82
00:04:36,307 --> 00:04:38,140
Vienīgā atšķirība
šī lieta ir tā, ka jums

83
00:04:38,140 --> 00:04:42,700
ir jāatceras, lai indeksu
vērtības kvadrātiekavās.

84
00:04:42,700 --> 00:04:46,420
Un tur mums ir mūsu
trīs mīļākie suņiem.

85
00:04:46,420 --> 00:04:48,780
>> Bet diemžēl, ir pienācis laiks
lai saņemtu atpakaļ ķeizaram.

86
00:04:48,780 --> 00:04:52,910
Atcerieties, ka pareiza izmantošana par
lietotājs būs iet ne tikai

87
00:04:52,910 --> 00:04:57,430
nosaukums programmas ./caesar, bet
arī galvenais, ka viņi vēlas, lai pārslēgtos

88
00:04:57,430 --> 00:04:58,850
to teksta, ko.

89
00:04:58,850 --> 00:05:01,540
Tātad tas nozīmē, ka argc jābūt divi.

90
00:05:01,540 --> 00:05:07,580
Tām jāiztur in two-- ne vairāk, ne
mazāk nekā divas komandrindas argumentus.

91
00:05:07,580 --> 00:05:09,050
>> Tagad, ko par argv?

92
00:05:09,050 --> 00:05:12,880
Nu, mēs jau zinām, ka
masīvs būs garums divas,

93
00:05:12,880 --> 00:05:15,270
bet to, kas ietverts katrā elementā?

94
00:05:15,270 --> 00:05:19,330
Nu, pirmais elements
būs ./caesar,

95
00:05:19,330 --> 00:05:24,190
un pēc tam nākamais elements, kas notiek pie
satur atslēgu, ka lietotājs drukāti.

96
00:05:24,190 --> 00:05:27,480
Tagad, ja viņi to izmanto pareizi
par izmantošanas ķeizaru,

97
00:05:27,480 --> 00:05:29,350
tad viņi gatavojas ierakstīt numuru.

98
00:05:29,350 --> 00:05:33,260
Bet pat ja raksturs
ka tie tips ir skaitlis,

99
00:05:33,260 --> 00:05:35,790
tas ir datu tipa virknes.

100
00:05:35,790 --> 00:05:40,390
>> Tātad, kā mēs pārvērst ka
string līdz veselam skaitlim?

101
00:05:40,390 --> 00:05:46,680
Tā teikt, man ir num, virkne,
satur virkni 50.

102
00:05:46,680 --> 00:05:49,000
Ja es gribu, lai pārvērstu ka
līdz veselam skaitlim, tad es vienkārši

103
00:05:49,000 --> 00:05:53,340
pasludināt jaunu mainīgo, kas ir
skaitlim i, aicinot atoi.

104
00:05:53,340 --> 00:06:01,160
Es iet manā stīgu mainīgo, num, un
tad es tam satur skaitli 50.

105
00:06:01,160 --> 00:06:04,350
Pārliecinieties, lai pārbaudītu vīru
lapas par atoi funkcijas

106
00:06:04,350 --> 00:06:07,990
lai pārbaudītu, ko bibliotēka tā
in, kā arī to, kas vērtība, ko tā

107
00:06:07,990 --> 00:06:14,550
atgriezīsies, ja virkne pagājis
jo nesatur visus numurus.

108
00:06:14,550 --> 00:06:16,950
>> Tāpēc tagad, ka mēs esam gotten
galvenais, nākamais solis

109
00:06:16,950 --> 00:06:19,430
ir iegūt teksta, no lietotāja.

110
00:06:19,430 --> 00:06:21,170
Tagad tas ir gatavojas
būt mazāk sarežģīta

111
00:06:21,170 --> 00:06:23,410
nekā navigāciju ap
komandrindas argumentus.

112
00:06:23,410 --> 00:06:26,190
Viss, kas mums jādara, ir zvans
getstring funkcija

113
00:06:26,190 --> 00:06:29,660
pamudinājusi lietotājam dotu
mums virkne, bet atcerieties

114
00:06:29,660 --> 00:06:34,090
lai pārbaudītu specifikācijas, kā mēs
varētu vēlēties, lai nekavējoties lietotājam par to.

115
00:06:34,090 --> 00:06:36,420
>> Tagad mēs nonākam pie
sirds problem--

116
00:06:36,420 --> 00:06:38,860
kā šifrēt šo teksta,.

117
00:06:38,860 --> 00:06:42,830
Nu, pirmkārt, parunāsim par to, kā
lai šifrēt vienu rakstzīmi laikā,

118
00:06:42,830 --> 00:06:47,370
un tad mēs jārisina kā
atkārtot pār visu teksta,.

119
00:06:47,370 --> 00:06:50,440
Es esmu uzrakstījis dažas pseudocode
par Caesar problēmu.

120
00:06:50,440 --> 00:06:52,310
Es aicinu jūs, lai
Uzrakstiet savu, kā arī.

121
00:06:52,310 --> 00:06:55,900
Tas varētu neizskatās identisks
raktuves, un tas ir OK, bet, kamēr

122
00:06:55,900 --> 00:06:58,640
kā vispārējā iecere ir tāda pati.

123
00:06:58,640 --> 00:07:00,780
>> Pirmie trīs soļi
mēs jau esam darījuši.

124
00:07:00,780 --> 00:07:03,100
Mēs esam gotten atslēgu
komandrindas arguments,

125
00:07:03,100 --> 00:07:05,510
mēs esam izrādījās, ka atslēga
stājas skaitlim, un mēs esam

126
00:07:05,510 --> 00:07:09,320
pamudināja lietotājam par teksta,
ka viņi vēlas, lai šifrēt.

127
00:07:09,320 --> 00:07:12,420
Tātad nākamais lielais rieciens
ir tas, ka par katru rakstzīmi

128
00:07:12,420 --> 00:07:15,070
no teksta, virknes,
ja tas ir alfabēta,

129
00:07:15,070 --> 00:07:17,750
mēs vēlamies saglabāt
tā lieta un novirzīt to.

130
00:07:17,750 --> 00:07:20,900
Ar saglabāt lieta, ko es
domāju, ka visiem lielajiem burtiem

131
00:07:20,900 --> 00:07:23,580
burti jāpaliek Augšējais
lieta un visi mazie burti

132
00:07:23,580 --> 00:07:25,640
jāpaliek mazie burti.

133
00:07:25,640 --> 00:07:29,110
Tāpēc tad, kad mēs pāriet tiem,
tad mēs izdrukāt ciphertext.

134
00:07:29,110 --> 00:07:33,100
>> Šeit ir trīs funkcijas, kas gatavojas
lai noderēs šo problēmu.

135
00:07:33,100 --> 00:07:38,010
Atcerēties augšas, kad es deva
piemērs novirzot tas ir CS50?

136
00:07:38,010 --> 00:07:41,800
Atcerieties, ka 50 un
izsaukuma zīme nebija maiņu?

137
00:07:41,800 --> 00:07:45,680
Tātad, kā mēs varam pateikt, vai mēs
nepieciešams pāriet vēstuli vai ne?

138
00:07:45,680 --> 00:07:48,650
Nu, "ir alfa," ja
jums iet tas raksturs,

139
00:07:48,650 --> 00:07:54,850
atgriezīsies taisnība, ja tas raksturs
ir burts un viltus citādi.

140
00:07:54,850 --> 00:07:56,870
Lai palīdzētu jums ar
saglabājot kapitalizācija

141
00:07:56,870 --> 00:07:59,750
ir funkcijas "ir
augšējais "un" ir mazāks. "

142
00:07:59,750 --> 00:08:03,350
>> Šīs divas funkcijas arī veikt
vienā raksturs kā ieejas

143
00:08:03,350 --> 00:08:06,580
un atgriešanās jums Būla,
nu patiess vai nepatiess

144
00:08:06,580 --> 00:08:11,280
atkarībā no tā, vai šo raksturu
ir lielie burti vai mazo burtu.

145
00:08:11,280 --> 00:08:14,610
Tāpēc, ka "ir augšējā" un "ir
zemāks "ir Būla funkcijas,

146
00:08:14,610 --> 00:08:18,660
kas nozīmē, ka viņi atgriežas jums Būla,
Jūs varat izmantot šos jūsu apstākļos.

147
00:08:18,660 --> 00:08:23,490
Tātad, šeit ir koda fragments, ka tikai
drukā vēstuli, ja tas ir lielie burti.

148
00:08:23,490 --> 00:08:27,790
Tāpēc es esmu atzīts par manu raksturu
vēstule tiks augšējo lieta zed

149
00:08:27,790 --> 00:08:33,440
un tad, ja "ir augšējie" atgriežas
taisnība, tad es izdrukāt šo vēstuli.

150
00:08:33,440 --> 00:08:38,200
>> Atgriežoties pie mūsu vienkāršu piemēru
novirzot alfabētu ar atslēgu divi,

151
00:08:38,200 --> 00:08:41,049
kā mēs faktiski nokļūt, ka uz darbu?

152
00:08:41,049 --> 00:08:45,770
Nu, izrādās, ka varoņi
un veseli skaitļi ir ļoti cieši saistītas.

153
00:08:45,770 --> 00:08:48,840
Katram no viņiem ir
vesels vērtība saistīta

154
00:08:48,840 --> 00:08:53,260
ar to konstatēts ASCII tabulā,
kur katra varoņa ASCII

155
00:08:53,260 --> 00:08:55,380
tiek parādīta vērtība.

156
00:08:55,380 --> 00:08:58,940
Tātad augšējo gadījumā Atbilst
uz ASCII vērtību 65

157
00:08:58,940 --> 00:09:02,270
un mazie burti a to
ASCII vērtību 97.

158
00:09:02,270 --> 00:09:04,940
>> Jūtieties brīvi, lai uzmeklētu
jebkuru ASCII diagramma online

159
00:09:04,940 --> 00:09:07,720
redzēt šīs vērtības pats.

160
00:09:07,720 --> 00:09:12,096
Tātad, ko tas nozīmē, ka mēs varam
ņemt raksturu lielo burtu A,

161
00:09:12,096 --> 00:09:18,200
pievienot vesels skaitlis divas, lai to, un pēc tam iegūt
raksturs augšējais lieta C, kā rezultātā.

162
00:09:18,200 --> 00:09:23,720
Tas ir tāpēc, ka 65, tad ASCII
vērtība kapitāla A, plus 2,

163
00:09:23,720 --> 00:09:29,960
dod mums 67, kas atbilst
raksturam lielo burtu C

164
00:09:29,960 --> 00:09:33,480
>> Diemžēl, lietas
nebūs gluži tik vienkārši.

165
00:09:33,480 --> 00:09:36,980
Mums vienādojumu, kas
mums ir jāapsver.

166
00:09:36,980 --> 00:09:43,590
Te tā stāsta mums, ka i-ciphertext
vēstule atbilst kārtējam teksta,

167
00:09:43,590 --> 00:09:48,900
vēstule, plus key--
visi, kas, modulāra 26.

168
00:09:48,900 --> 00:09:50,810
Kāpēc ir tā, ka lieta?

169
00:09:50,810 --> 00:09:55,430
Iesim atpakaļ uz mūsu piemēram, no
pirms, kur kapitāls A, plus 2,

170
00:09:55,430 --> 00:09:57,590
dod mums kapitāla C.

171
00:09:57,590 --> 00:10:01,870
>> Tātad, piemērojot vienādojumu ka
specifikācija dod mums,

172
00:10:01,870 --> 00:10:06,660
tad pieņemsim kapitāla A
plus 2 un mod, ka līdz 26.

173
00:10:06,660 --> 00:10:10,730
Tātad kapitāls A, kad man to
šie vienpēdiņas,

174
00:10:10,730 --> 00:10:14,010
ļauj man, lai ārstētu to kā
vesels skaitlis, tā, ka ļauj

175
00:10:14,010 --> 00:10:17,500
man mest tās ASCII vērtību, 65.

176
00:10:17,500 --> 00:10:20,080
65 plus 2 ir 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 dod mums 15,
bet tas nav īsti

178
00:10:25,210 --> 00:10:32,590
jēgas, jo mēs zinām, ka
kapitāls C ASCII vērtība ir 67, nevis 15.

179
00:10:32,590 --> 00:10:35,580
Tātad, kā mēs saskaņot, ka?

180
00:10:35,580 --> 00:10:39,840
>> Nu, šeit es gribētu postulēt
jēdziens no alfabētiskajā sarakstā.

181
00:10:39,840 --> 00:10:44,010
Tātad mēs jau runājām par to, kā
Katram no viņiem ir sava ASCII vērtību,

182
00:10:44,010 --> 00:10:48,810
bet es gribētu teikt, labi, pieņemsim
domā par katru rakstzīmi, kam arī

183
00:10:48,810 --> 00:10:52,230
alfabētisks indekss,
kur A, piemēram,

184
00:10:52,230 --> 00:10:58,800
kā pirmo alfabēta burtu,
ir alfabētisko indeksu nulles.

185
00:10:58,800 --> 00:11:02,070
Tāpēc tagad pieņemsim piemēro
pats vienādojums kā iepriekš,

186
00:11:02,070 --> 00:11:05,040
bet, izmantojot alfabētisko rādītāju.

187
00:11:05,040 --> 00:11:07,810
>> Tātad ir nulle, jo mēs esam definēts.

188
00:11:07,810 --> 00:11:15,640
Tātad, ņemot nulle plus divi, mod 26,
tas ir divi, mod 26, kas dod mums divas.

189
00:11:15,640 --> 00:11:18,780
Un labi, runājot par
alfabētisks indekss,

190
00:11:18,780 --> 00:11:23,930
C ir trešais burts
alfabēts, lai atbilstu

191
00:11:23,930 --> 00:11:26,290
ar alfabētiskajā sarakstā divi.

192
00:11:26,290 --> 00:11:29,850
Tāpēc šķiet, ka, izmantojot
alfabētisks indekss šajā gadījumā

193
00:11:29,850 --> 00:11:32,840
faktiski dod mums pareizu rezultātu.

194
00:11:32,840 --> 00:11:35,020
>> Tāpēc tagad pieņemsim pārbaudīt, lai
redzēt, ja vienādojums darbiem

195
00:11:35,020 --> 00:11:37,210
ar alfabētiskajā sarakstā.

196
00:11:37,210 --> 00:11:42,540
Y alfabētiskais rādītājs ir 24, jo
otrā līdz pēdējam alfabēts.

197
00:11:42,540 --> 00:11:46,520
Tātad 24 plus mūsu
atslēga divi dod mums 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 dod mums 0, kas, laimīgs
mums, ir alfabētisko indekss A.

199
00:11:54,750 --> 00:11:59,100
Tik cerams, tas ir pietiekami, ka pierādījums
alfabētisko indeksu metode darbojas.

200
00:11:59,100 --> 00:12:03,180
Ja nē, justies brīvi izmēģināt
daži piemēri savu.

201
00:12:03,180 --> 00:12:08,030
>> Lai pareizi wrap ap
alfabēts un piemērot Caesar vienādojumu,

202
00:12:08,030 --> 00:12:11,280
tad mēs zinām, ka mums ir nepieciešams, lai
galā ar burtu indeksiem.

203
00:12:11,280 --> 00:12:15,130
Bet sākam ar ASCII
vērtībām, un tikai tad

204
00:12:15,130 --> 00:12:18,530
mēs pēc tam konvertēt uz
alfabētisko indeksu.

205
00:12:18,530 --> 00:12:23,970
No turienes, lai varētu drukāt, mums vajag
galā ar ASCII vērtībām vēlreiz.

206
00:12:23,970 --> 00:12:28,350
Tāpēc mums ir nepieciešams, lai noskaidrotu, kā
aiziet no ASCII alfabēta

207
00:12:28,350 --> 00:12:31,080
un no alfabētiskā ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Tāpēc es atstāt to jums, lai noskaidrotu
modelis starp raksturu

209
00:12:34,910 --> 00:12:38,590
un tās alfabēta
indekss un tā ASCII vērtība.

210
00:12:38,590 --> 00:12:41,530
Tagad, atcerieties, ka, pat ja
Šī tabula tiesības uz slaidu

211
00:12:41,530 --> 00:12:45,630
parāda lielos burtus, mēs arī
ir jāapsver, vai

212
00:12:45,630 --> 00:12:48,915
atšķirīgs modelis attiecas
par mazajiem burtiem.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Tāpēc tagad, ka mēs esam izpētījuši,
kā novirzīt vienu rakstzīmi,

215
00:12:55,840 --> 00:13:02,200
tad viss, kas mums ir jādara, ir skala, kas
līdz iet pāri visam parastā teksta.

216
00:13:02,200 --> 00:13:04,260
Tātad teksta, ir virkne.

217
00:13:04,260 --> 00:13:08,210
Lucky mums, virkne ir patiešām
tikai masīvs rakstzīmes,

218
00:13:08,210 --> 00:13:12,150
tāpēc, lai piekļūtu katru rakstzīmi
no virknes, viss, kas jums jādara,

219
00:13:12,150 --> 00:13:14,270
ir izmantot masīvu notācija.

220
00:13:14,270 --> 00:13:20,270
Teikt, man ir mainīgo tipu
stīgu sauc "text = 'tas ir CS50."

221
00:13:20,270 --> 00:13:22,730
>> Nu, pēc tam, lai
piekļūt katru rakstzīmi,

222
00:13:22,730 --> 00:13:25,880
visi man ir jādara ar
mainīgais teksts ir

223
00:13:25,880 --> 00:13:31,660
teikt labi, teksts nulles indeksu, kas
atbilst kapitāls T. Teksts pie indeksa

224
00:13:31,660 --> 00:13:35,100
viens sakrīt ar mazo burtu h.

225
00:13:35,100 --> 00:13:38,110
Vēl viena noderīga funkcija ir
stīgu garuma funkcija.

226
00:13:38,110 --> 00:13:40,760
Tik iet ar virknes
ka funkcija atgriezīsies

227
00:13:40,760 --> 00:13:44,610
vesels skaitlis, garums no minētā virkni.

228
00:13:44,610 --> 00:13:47,060
>> Tagad, kad mēs esam runājuši par
visi šie dažādie elementi,

229
00:13:47,060 --> 00:13:48,540
pieņemsim viņus atpakaļ kopā.

230
00:13:48,540 --> 00:13:52,210
Tāpēc atgriežas nu manu pseudocode
kodu vai jūsu pseudocode

231
00:13:52,210 --> 00:13:55,920
un iet cauri, un pārliecinieties, ka jums
zināt, kā to darīt katru lieta.

232
00:13:55,920 --> 00:14:01,520
Getting atslēgu izmantojot argc un argv,
pagriežot atslēgu veselam skaitlim A

233
00:14:01,520 --> 00:14:06,840
uz i, pamudinot uz teksta,,
getstring, un pēc tam, atkārtojot

234
00:14:06,840 --> 00:14:09,590
pār katru rakstura
teksta, string,

235
00:14:09,590 --> 00:14:14,910
saglabājot gadījumu katru rakstzīmi
un novirzot šo raksturu ar atslēgu,

236
00:14:14,910 --> 00:14:17,520
nodrošinot, ka jūs esat
ietīšana ap alfabētu,

237
00:14:17,520 --> 00:14:20,850
beidzot drukāšanas šo ciphertext.

238
00:14:20,850 --> 00:14:25,470
Mans vārds ir Amila, un tas bija Cēzars.

239
00:14:25,470 --> 00:14:28,448

