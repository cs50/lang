1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Poďme riešiť Caesara.

3
00:00:02,270 --> 00:00:06,110
V Caesar, necháme užívateľovi
zakódovať tajnú správu.

4
00:00:06,110 --> 00:00:09,780
Takže poďme sa rovno dovnútra a hľadať
u našich TO-DOS tohto problému.

5
00:00:09,780 --> 00:00:12,210
Takže prvý, dostaneme kľúč od užívateľa.

6
00:00:12,210 --> 00:00:15,210
Potom dostaneme holý text
že chcú kódovať.

7
00:00:15,210 --> 00:00:21,380
Za to, že sme to zašifrovať pre nich,
a nakoniec sme tlačiť ich ciphertext.

8
00:00:21,380 --> 00:00:23,600
>> Takže začnime s príkladom.

9
00:00:23,600 --> 00:00:26,920
Povedzme, že ste chceli zakódovať
Celá abeceda s kľúčom dva.

10
00:00:26,920 --> 00:00:31,360
Tak by celá vaša abeceda
len sa presunul na listy.

11
00:00:31,360 --> 00:00:37,060
Tak by sa kódovať C, B
D, C až E, a tak ďalej a tak ďalej,

12
00:00:37,060 --> 00:00:42,470
až sa dostanete k X, ktorá kóduje od A do Z
alebo múr, v závislosti na tom, kde ste od.

13
00:00:42,470 --> 00:00:47,445
Potom Y by potom posunúť celú cestu,
zábal okolo abecedy sa dostať do A,

14
00:00:47,445 --> 00:00:53,256
a potom konečne posledné písmeno
abeceda, Z, múr, bude kódovať do bodu B.

15
00:00:53,256 --> 00:00:54,660
>> Je to jasné?

16
00:00:54,660 --> 00:00:56,380
Pozrime sa na niektoré príklady.

17
00:00:56,380 --> 00:01:00,540
Prvým príkladom je veľmi podobná
s tým, čo sme práve vysvetlené vyššie.

18
00:01:00,540 --> 00:01:05,560
Takže keď som zakódovať nejaký úsek
abeceda, A až L, kľúčom dvoch,

19
00:01:05,560 --> 00:01:09,760
Potom som len dostať svoju celokrajné
abeceda posunul dva listy.

20
00:01:09,760 --> 00:01:12,230
>> Potom, v mojom ďalšom príklade,
kľúč je stále dva,

21
00:01:12,230 --> 00:01:15,080
takže by ste mali ešte vedieť
ktorý listy očakávať.

22
00:01:15,080 --> 00:01:16,400
Ale tu je to fráza.

23
00:01:16,400 --> 00:01:18,100
To je CS50.

24
00:01:18,100 --> 00:01:21,090
Takže si všimnete, že ja
zachovať prípad mojich listov,

25
00:01:21,090 --> 00:01:25,600
takže akékoľvek veľké písmená sú tiež
veľké písmená v ciphertext.

26
00:01:25,600 --> 00:01:27,800
A akákoľvek malé písmená
listov v holom texte

27
00:01:27,800 --> 00:01:30,640
sú tiež malé písmená
Písmená v ciphertext.

28
00:01:30,640 --> 00:01:34,020
Ale stále písmená
a prípadné výkričníky

29
00:01:34,020 --> 00:01:37,610
alebo akékoľvek iné interpunkcie rovnaké.

30
00:01:37,610 --> 00:01:40,360
>> Takže teraz, že máme pocit
za to, ako program funguje,

31
00:01:40,360 --> 00:01:43,890
neváhajte ísť bežať niečo viac
príklady svoje vlastné, ak si budete priať.

32
00:01:43,890 --> 00:01:47,072
Začnime s dostať
kľúč od užívateľa.

33
00:01:47,072 --> 00:01:48,780
Tradične, s
ďalšie problémy, máme

34
00:01:48,780 --> 00:01:51,450
boli zvyknutí na získanie
akékoľvek čísla, ktorá my

35
00:01:51,450 --> 00:01:54,710
Potrebujete tým vyzvanie užívateľa
s funkciou getint.

36
00:01:54,710 --> 00:01:58,850
Ale tentoraz sme vlastne deje
používať príkazový riadok argumentu

37
00:01:58,850 --> 00:02:01,760
a nová funkcia nazvaná atoi.

38
00:02:01,760 --> 00:02:05,130
>> Pri spustení hlavného
Program v C, potom sa

39
00:02:05,130 --> 00:02:08,500
sa v dvoch parameters--
int argc, ktorý

40
00:02:08,500 --> 00:02:11,670
je počet argumentov
prešiel v roku, a potom

41
00:02:11,670 --> 00:02:15,920
argv, pole reťazcov, ktoré obsahujú
zoznam všetkých argumentov

42
00:02:15,920 --> 00:02:16,740
prešiel.

43
00:02:16,740 --> 00:02:19,740
Nemusíte mať explicitne
deklarovať tieto premenné.

44
00:02:19,740 --> 00:02:22,700
Sú vypočítané pre
ste kompilátorom.

45
00:02:22,700 --> 00:02:28,160
Správne využitie pre to by bolo
Pre argc byť dve v tomto prípade,

46
00:02:28,160 --> 00:02:32,630
pretože užívateľ musí odovzdať
hovor s programom, ./caesar,

47
00:02:32,630 --> 00:02:35,570
a kľúč,
bez ohľadu na počet chcú.

48
00:02:35,570 --> 00:02:39,920
Tak, že znamená, že musí byť dva argc
K tomu, aby platnú použitie Caesar

49
00:02:39,920 --> 00:02:41,680
ktoré majú byť vykonané.

50
00:02:41,680 --> 00:02:43,590
>> Takže poďme sa pozrieť na príklad.

51
00:02:43,590 --> 00:02:47,760
Povedzme, že som už napísal a
zostavili program s názvom odpálenie.

52
00:02:47,760 --> 00:02:52,670
Takže keď som bežal do príkazového riadku
./blastoff Team Rocket, dobre, potom,

53
00:02:52,670 --> 00:02:57,750
argc by mali byť tri, pretože som
prešiel v troch rôznych argumentov.

54
00:02:57,750 --> 00:02:59,830
Potom argv bude vyzerať takto.

55
00:02:59,830 --> 00:03:03,750
Je to pole, a to by
obsahuje každú z troch reťazcov.

56
00:03:03,750 --> 00:03:09,640
./blastoff v prvom indexe, tímu
v budúcom, a rakety v poslednej.

57
00:03:09,640 --> 00:03:11,610
>> Hovorme o poliach na chvíľku.

58
00:03:11,610 --> 00:03:15,560
Polia sú dátové štruktúry, ktoré držia
viac hodnôt rovnakého typu.

59
00:03:15,560 --> 00:03:19,980
To sa môže hodiť, keď sme
k dispozícii zoznam čísel alebo reťazcov.

60
00:03:19,980 --> 00:03:23,030
Len nezabudnite, že majú
byť rovnakého typu.

61
00:03:23,030 --> 00:03:25,310
Vo vede o počítačoch, my
love počítanie od nuly,

62
00:03:25,310 --> 00:03:29,260
takže si uvedomiť, že pole
sú takisto nulové indexovaný.

63
00:03:29,260 --> 00:03:34,360
Takže prvý prvok mojej poľa
bude na indexe nula.

64
00:03:34,360 --> 00:03:37,580
Takže v tomto prípade, keď mám
poľa dĺžky štyri,

65
00:03:37,580 --> 00:03:41,350
potom posledný index
Posledným prvkom môjho poľa

66
00:03:41,350 --> 00:03:44,970
je v skutočnosti bude
indexom tri, nie štyri.

67
00:03:44,970 --> 00:03:48,880
Vzhľadom k tomu, pamätajte, my
začať počítať od nuly.

68
00:03:48,880 --> 00:03:52,530
>> Tu je príklad toho, ako ste
by mohlo vytvoriť pole vlastné.

69
00:03:52,530 --> 00:03:56,440
Takže povedať, chcel som Store Môj
tri najobľúbenejšie mená psa.

70
00:03:56,440 --> 00:03:59,030
Potom by som vytvoriť pole reťazcov.

71
00:03:59,030 --> 00:04:04,450
Takže by som vyhlásiť typ, reťazec, a
potom dal názov poľa, psy,

72
00:04:04,450 --> 00:04:06,450
a potom v tých námestí
držiaky dal veľkosti

73
00:04:06,450 --> 00:04:09,260
z array-- v tomto prípade tri.

74
00:04:09,260 --> 00:04:12,690
>> Takže môj prvý vstup sa deje
byť psy na indexe nula,

75
00:04:12,690 --> 00:04:14,750
a že to bude Milo.

76
00:04:14,750 --> 00:04:17,850
Potom psy na indexe jednom
bude praštěná,

77
00:04:17,850 --> 00:04:23,060
miláčik Mocha, a potom posledný
entry, tretí vstup na indexe dva,

78
00:04:23,060 --> 00:04:26,130
bude roztomilý, sladký Elphie.

79
00:04:26,130 --> 00:04:28,610
Všimnite si, že formát
pre vyplnenie tohto poľa

80
00:04:28,610 --> 00:04:32,150
Je veľmi podobné, ako by ste mohli
deklarovať akoukoľvek inou premennou kde

81
00:04:32,150 --> 00:04:36,307
Máte názov premennej nasledované
hodnota, ktorú chcete uložené v ňom.

82
00:04:36,307 --> 00:04:38,140
Jediný rozdiel v
Tento prípad je, že vás

83
00:04:38,140 --> 00:04:42,700
mať na pamäti, dať indexu
hodnoty v hranatých zátvorkách.

84
00:04:42,700 --> 00:04:46,420
A tam Máme
Tri obľúbené psy.

85
00:04:46,420 --> 00:04:48,780
>> Ale beda, je čas
vrátiť sa k cisárovi.

86
00:04:48,780 --> 00:04:52,910
Nezabudnite, že správne použitie pre The
Užívateľ sa bude odovzdaním nielen

87
00:04:52,910 --> 00:04:57,430
názov programu ./caesar, ale
tiež kľúčom, že chcú posunúť

88
00:04:57,430 --> 00:04:58,850
Ich plaintext tým.

89
00:04:58,850 --> 00:05:01,540
Tak, že znamená, že argc musí byť dva.

90
00:05:01,540 --> 00:05:07,580
Musia vyhovieť v two-- nie viac, nie
menej ako dva argumenty príkazového riadka.

91
00:05:07,580 --> 00:05:09,050
>> A teraz, čo argv?

92
00:05:09,050 --> 00:05:12,880
No, my už vieme, že
pole bude mať dĺžku dvoch,

93
00:05:12,880 --> 00:05:15,270
ale to, čo je obsiahnuté v každom prvku?

94
00:05:15,270 --> 00:05:19,330
No, prvý element
bude ./caesar,

95
00:05:19,330 --> 00:05:24,190
a potom ďalší prvok bude
obsahujú kľúč, ktorý užívateľ zadať.

96
00:05:24,190 --> 00:05:27,480
Teraz, keď to správne používané
Pre využitie Caesar,

97
00:05:27,480 --> 00:05:29,350
potom idú na zadanie čísla.

98
00:05:29,350 --> 00:05:33,260
Ale aj keď charakter
že typ je číslo,

99
00:05:33,260 --> 00:05:35,790
to je dátového typu string.

100
00:05:35,790 --> 00:05:40,390
>> Ako teda previesť, že
reťazec na celé číslo?

101
00:05:40,390 --> 00:05:46,680
Takže povedať, že mám num, reťazec,
obsahujúce reťazec 50.

102
00:05:46,680 --> 00:05:49,000
Ak chcem previesť, že
na celé číslo, potom som jednoducho

103
00:05:49,000 --> 00:05:53,340
deklarovať novú premennú, čo
celé číslo i, volá atoi.

104
00:05:53,340 --> 00:06:01,160
Aj prejsť vo svojom reťazcové premenné, num, a
Potom som potom bude obsahovať číslo 50.

105
00:06:01,160 --> 00:06:04,350
Uistite sa muža
Stránky pre funkciu atoi

106
00:06:04,350 --> 00:06:07,990
skontrolovať, ktoré knižnica je to
v, rovnako ako to, čo sa cení

107
00:06:07,990 --> 00:06:14,550
ak vráti odovzdaný reťazec
v neobsahuje všetky čísla.

108
00:06:14,550 --> 00:06:16,950
>> Takže teraz, že sme dostali
kľúčom, ďalším krokom

109
00:06:16,950 --> 00:06:19,430
je dostať holý od užívateľa.

110
00:06:19,430 --> 00:06:21,170
Teraz to bude
menej komplikované

111
00:06:21,170 --> 00:06:23,410
než navigovanie okolo
príkazového riadka argumenty.

112
00:06:23,410 --> 00:06:26,190
Všetko, čo musíme urobiť, je výzva
funkcia getString

113
00:06:26,190 --> 00:06:29,660
vyzvať používateľa, čím sa získa
us reťazec, ale pamätajte,

114
00:06:29,660 --> 00:06:34,090
skontrolovať špecifikácie, ako
chcieť vyzvať užívateľa za to.

115
00:06:34,090 --> 00:06:36,420
>> Teraz sa dostávame k
srdcom problem--

116
00:06:36,420 --> 00:06:38,860
Ako zašifrovať holý text.

117
00:06:38,860 --> 00:06:42,830
Tak za prvé, poďme hovoriť o tom, ako
zašifrovať jeden znak v čase,

118
00:06:42,830 --> 00:06:47,370
a potom sa budeme zaoberať otázkou, ako sa
iteráciu cez celý holý.

119
00:06:47,370 --> 00:06:50,440
Napísal som nejaké pseudocode
za problém Caesar.

120
00:06:50,440 --> 00:06:52,310
Povzbudzujem vás, aby ste
napísať svoj vlastný rovnako.

121
00:06:52,310 --> 00:06:55,900
To nemusí vyzerať totožný s
baňa, a to je v poriadku, ale kým

122
00:06:55,900 --> 00:06:58,640
ako všeobecný princíp je rovnaký.

123
00:06:58,640 --> 00:07:00,780
>> Prvé tri kroky
sme už urobili.

124
00:07:00,780 --> 00:07:03,100
Sme dostali kľúče od
Argument príkazového riadku,

125
00:07:03,100 --> 00:07:05,510
sme sa obrátil ten kľúč
na celé číslo, a my sme

126
00:07:05,510 --> 00:07:09,320
vyzvanie užívateľa na zadanie holého textu
že chcú zašifrovať.

127
00:07:09,320 --> 00:07:12,420
Takže potom ďalší veľký kus
je to, že pre každý znak

128
00:07:12,420 --> 00:07:15,070
V holého textu reťazci,
ak je to abecedný,

129
00:07:15,070 --> 00:07:17,750
Ak chceme zachovať
svojho prípadu a posunúť ju.

130
00:07:17,750 --> 00:07:20,900
Tým zachovať prípad, čo som
znamenať, že všetky veľkými písmenami

131
00:07:20,900 --> 00:07:23,580
listy by mali zostať Horný
púzdro a malé písmená

132
00:07:23,580 --> 00:07:25,640
by mali zostať malé písmená.

133
00:07:25,640 --> 00:07:29,110
Takže potom, čo sme sa posunúť tie,
potom vytlačiť ciphertext.

134
00:07:29,110 --> 00:07:33,100
>> Tu sú tri funkcie, ktoré idú
prísť vhod tohto problému.

135
00:07:33,100 --> 00:07:38,010
Nezabudnite, hore, keď som dal
Príkladom pre to je posun CS50?

136
00:07:38,010 --> 00:07:41,800
Uvedomte si, že 50 a
výkričník nezmenil?

137
00:07:41,800 --> 00:07:45,680
Ako teda môžeme povedať, či sme
treba posunúť list, alebo nie?

138
00:07:45,680 --> 00:07:48,650
No, "je alfa," pokiaľ
ste to znak prejsť,

139
00:07:48,650 --> 00:07:54,850
vráti true, ak je tento znak
je písmeno a falošné inak.

140
00:07:54,850 --> 00:07:56,870
Ktoré vám pomôžu s
zachovanie kapitalizácie

141
00:07:56,870 --> 00:07:59,750
sú funkcie "je
horný "a" nižšia ".

142
00:07:59,750 --> 00:08:03,350
>> Tieto dve funkcie tiež vziať
v jeden znak ako vstup

143
00:08:03,350 --> 00:08:06,580
a vráti vám logickú,
true alebo false

144
00:08:06,580 --> 00:08:11,280
V závislosti na tom, či tento znak
Je veľké písmená alebo malé písmená.

145
00:08:11,280 --> 00:08:14,610
Vzhľadom k tomu, "je horná" a "je
nižšia "sú logické funkcie,

146
00:08:14,610 --> 00:08:18,660
To znamená, že sa vráti vám logickú,
môžete použiť tieto vo svojich podmienkach.

147
00:08:18,660 --> 00:08:23,490
Takže tu je úryvok kódu, ktorý iba
vytlačí list, či je to veľké písmená.

148
00:08:23,490 --> 00:08:27,790
Tak som deklaroval svoju postavu
List má byť verzálky múr

149
00:08:27,790 --> 00:08:33,440
a potom, ak "je horná" sa vracia
pravda, potom som vytlačiť ten list.

150
00:08:33,440 --> 00:08:38,200
>> Vráťme sa späť k nášmu jednoduchý príklad
posunutie abecedy kľúčom dvoch,

151
00:08:38,200 --> 00:08:41,049
Ako sme vlastne dostať, že do práce?

152
00:08:41,049 --> 00:08:45,770
No, ukázalo sa, že znaky
a celé čísla sú veľmi úzko súvisí.

153
00:08:45,770 --> 00:08:48,840
Každá postava má
celočíselná hodnota spojená

154
00:08:48,840 --> 00:08:53,260
s tým nájdený v ASCII tabuľke,
kde ASCII každá postava má

155
00:08:53,260 --> 00:08:55,380
Zobrazí sa hodnota.

156
00:08:55,380 --> 00:08:58,940
Takže an zodpovedá veľké písmená A
na hodnotu ASCII 65

157
00:08:58,940 --> 00:09:02,270
a malé písmená a až
Hodnota ASCII 97.

158
00:09:02,270 --> 00:09:04,940
>> Nebojte sa pozrieť hore
akýkoľvek ASCII tabuľka on-line

159
00:09:04,940 --> 00:09:07,720
vidieť tieto hodnoty pre seba.

160
00:09:07,720 --> 00:09:12,096
Takže to, čo to znamená, že môžeme
mať charakter veľké písmená A,

161
00:09:12,096 --> 00:09:18,200
pridať číslo dva na neho, a potom sa
znak veľké písmená C ako výsledok.

162
00:09:18,200 --> 00:09:23,720
To preto, že 65 rokov, ASCII
hodnota kapitálové A plus 2,

163
00:09:23,720 --> 00:09:29,960
nám dáva 67, čo zodpovedá
charakteru veľké písmená C.

164
00:09:29,960 --> 00:09:33,480
>> Bohužiaľ, veci
nebude úplne tak jednoduché.

165
00:09:33,480 --> 00:09:36,980
Máme rovnicu, ktorá
musíme vziať do úvahy.

166
00:09:36,980 --> 00:09:43,590
Tu nám hovorí, že i-tej ciphertext
písmeno zodpovedá i-tej holého textu

167
00:09:43,590 --> 00:09:48,900
list, plus key--
všetko, modulárne 26.

168
00:09:48,900 --> 00:09:50,810
Prečo je to tak?

169
00:09:50,810 --> 00:09:55,430
Vráťme sa k nášmu príkladu z
predtým, kde kapitál A, a naviac 2,

170
00:09:55,430 --> 00:09:57,590
nám dáva kapitálovú C.

171
00:09:57,590 --> 00:10:01,870
>> Takže použitie rovnice, ktorá
špecifikácia nám dáva,

172
00:10:01,870 --> 00:10:06,660
Potom sa poďme kapitálu
a 2 a mod, že 26 rokov.

173
00:10:06,660 --> 00:10:10,730
Takže kapitál A, keď som ju v
tieto jednoduché úvodzovky,

174
00:10:10,730 --> 00:10:14,010
mi umožňuje zaobchádzať ako
celé číslo, tak, že umožňuje

175
00:10:14,010 --> 00:10:17,500
me hodiť ho jeho ASCII hodnota 65.

176
00:10:17,500 --> 00:10:20,080
65 a 2 je 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 nám dáva 15,
ale to nie je naozaj

178
00:10:25,210 --> 00:10:32,590
zmysel, pretože vieme, že
kapitál C ASCII hodnota je 67, nie 15.

179
00:10:32,590 --> 00:10:35,580
Tak ako sme sa zmieriť, že?

180
00:10:35,580 --> 00:10:39,840
>> No, tu by som chcel predpokladať
Pojem abecednom indexu.

181
00:10:39,840 --> 00:10:44,010
Tak už sme hovorili o tom, ako
každá postava má svoj ASCII hodnotu,

182
00:10:44,010 --> 00:10:48,810
ale ja by som rád povedal, dobre, poďme
premýšľať o tom, každá postava má takisto

183
00:10:48,810 --> 00:10:52,230
abecedný register,
kde A napríklad,

184
00:10:52,230 --> 00:10:58,800
ako prvé písmeno v abecede,
má abecedný zoznam nula.

185
00:10:58,800 --> 00:11:02,070
Takže teraz poďme uplatňovať
rovnaké rovnice ako predtým,

186
00:11:02,070 --> 00:11:05,040
ale za použitia abecedný register.

187
00:11:05,040 --> 00:11:07,810
>> Tak je nulová, ako sme definované.

188
00:11:07,810 --> 00:11:15,640
Takže potom brať nula plus dva, MOD 26,
To sú dva, mod 26, čo nám dáva dve.

189
00:11:15,640 --> 00:11:18,780
A dobre, v rámci
abecedný register,

190
00:11:18,780 --> 00:11:23,930
C je tretie písmeno v
abeceda, aby zodpovedalo

191
00:11:23,930 --> 00:11:26,290
do abecedného indexu dva.

192
00:11:26,290 --> 00:11:29,850
Zdá sa teda, že využitie
abecedný register v tomto prípade

193
00:11:29,850 --> 00:11:32,840
v skutočnosti nám dáva správny výsledok.

194
00:11:32,840 --> 00:11:35,020
>> Takže teraz poďme skontrolovať,
či rovnicou prác

195
00:11:35,020 --> 00:11:37,210
abecedný register.

196
00:11:37,210 --> 00:11:42,540
abecedný register Y je 24, pretože
Druhý na posledné písmeno v abecede.

197
00:11:42,540 --> 00:11:46,520
Takže 24 a naše
Kľúčovým dvoch nám dáva 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 nám dáva 0, čo, našťastie pre
us, je abecedný zoznam pre A.

199
00:11:54,750 --> 00:11:59,100
Takže dúfajme, že to stačí, že dôkaz
abecedný register metóda funguje.

200
00:11:59,100 --> 00:12:03,180
Ak tomu tak nie je, neváhajte vyskúšať
niektoré príklady sami.

201
00:12:03,180 --> 00:12:08,030
>> Aby bolo možné správne zabaliť okolo
abecedy a aplikovať Caesar rovnice,

202
00:12:08,030 --> 00:12:11,280
potom vieme, že musíme
vysporiadať s abecedný indexy.

203
00:12:11,280 --> 00:12:15,130
Ale začneme s ASCII
hodnôt a až potom

204
00:12:15,130 --> 00:12:18,530
my potom previesť do
abecedný register.

205
00:12:18,530 --> 00:12:23,970
Odtiaľ, aby bolo možné tlačiť, musíme
vysporiadať s hodnotami ASCII znova.

206
00:12:23,970 --> 00:12:28,350
Takže musíme vymyslieť, ako
prejsť z ASCII do abecedný

207
00:12:28,350 --> 00:12:31,080
az abecednom na ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Tak Nechám na vás, aby ste zistili
vzor medzi charakterom

209
00:12:34,910 --> 00:12:38,590
a jeho abecedný
index a jeho hodnota ASCII.

210
00:12:38,590 --> 00:12:41,530
Teraz si uvedomiť, že hoci
toto právo tabuľka na snímke

211
00:12:41,530 --> 00:12:45,630
zobrazuje veľké písmená, sme tiež
musieť zvážiť, či je alebo nie je

212
00:12:45,630 --> 00:12:48,915
iný vzor platí
Pre malými písmenami.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Takže teraz, keď sme zistili
Ako posunúť jeden znak,

215
00:12:55,840 --> 00:13:02,200
potom všetko, čo musíme urobiť, je meradlo, ktoré
up ísť v celej obyčajného textu.

216
00:13:02,200 --> 00:13:04,260
Takže holý text je reťazec.

217
00:13:04,260 --> 00:13:08,210
Našťastie pre nás, reťazec je naozaj
Len rada postáv,

218
00:13:08,210 --> 00:13:12,150
tak, aby sa prístup každý znak
z reťazca, všetko, čo musíte urobiť,

219
00:13:12,150 --> 00:13:14,270
je použitie poľa notáciu.

220
00:13:14,270 --> 00:13:20,270
Povedzme, že mám premennú typu
string nazvaný "text = 'Toto je CS50."

221
00:13:20,270 --> 00:13:22,730
>> Tak, aby sa
pristupovať každý znak,

222
00:13:22,730 --> 00:13:25,880
všetko, čo mám robiť s
premenná text

223
00:13:25,880 --> 00:13:31,660
hovoriť dobre, textu na indexe nula, že
zodpovedá kapitál T. Text na indexe

224
00:13:31,660 --> 00:13:35,100
jeden zodpovedá malými písmenami h.

225
00:13:35,100 --> 00:13:38,110
Ďalšou užitočnou funkciou je
Funkcia dĺžka reťazca.

226
00:13:38,110 --> 00:13:40,760
Takže prejde v reťazci
že funkcia vráti

227
00:13:40,760 --> 00:13:44,610
celé číslo, je dĺžka tohto reťazca.

228
00:13:44,610 --> 00:13:47,060
>> Teraz, keď sme hovorili o
Všetky tieto rôzne prvky,

229
00:13:47,060 --> 00:13:48,540
poďme dať je zase dohromady.

230
00:13:48,540 --> 00:13:52,210
Takže návrat k jednej mojej pseudokódu
kód alebo Váš pseudocode

231
00:13:52,210 --> 00:13:55,920
a prejsť a uistiť sa, že vás
vedieť, ako sa to robí každý jednotlivý vec.

232
00:13:55,920 --> 00:14:01,520
Získanie kľúč pomocou argc a argv,
otočením kľúča do celé číslo, je

233
00:14:01,520 --> 00:14:06,840
až i výzvou pre holého textu,
getString, a potom iterácie

234
00:14:06,840 --> 00:14:09,590
cez každý znak v
holý text reťazec,

235
00:14:09,590 --> 00:14:14,910
zachovanie prípad každého znaku
a presúva tento znak kľúčom,

236
00:14:14,910 --> 00:14:17,520
zabezpečenie toho, že ste
obal okolo abecedy,

237
00:14:17,520 --> 00:14:20,850
Nakoniec tlačou danej ciphertext.

238
00:14:20,850 --> 00:14:25,470
Volám sa Amila, a to bol Caesar.

239
00:14:25,470 --> 00:14:28,448

