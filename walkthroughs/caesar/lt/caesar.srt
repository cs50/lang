1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Leiskite spręsti tiktai ciesorių ".

3
00:00:02,270 --> 00:00:06,110
Be Cezaris, mes leisti vartotojui
koduoti slaptą žinutę.

4
00:00:06,110 --> 00:00:09,780
Taigi leiskite pasinerti į dešinę ir ieškoti
mūsų TO-DOS šią problemą.

5
00:00:09,780 --> 00:00:12,210
Todėl pirmiausia, mes gauti raktą iš vartotojo.

6
00:00:12,210 --> 00:00:15,210
Tada mes gauti paprastojo
kad jie nori koduoti.

7
00:00:15,210 --> 00:00:21,380
Po to, mes šifruoti už jį,
ir pagaliau mes spausdinti savo ciphertext.

8
00:00:21,380 --> 00:00:23,600
>> Taigi pradėkime su pavyzdys.

9
00:00:23,600 --> 00:00:26,920
Pasakykite, kad norėjo koduoti
Visa abėcėlė su dviejų raktu.

10
00:00:26,920 --> 00:00:31,360
Na, visą savo abėcėlė būtų
tiesiog būti perkeltas į laiškus.

11
00:00:31,360 --> 00:00:37,060
Taigi būtų koduoti C, B
D, C-E, taip toliau ir taip toliau,

12
00:00:37,060 --> 00:00:42,470
kol gausite į X, kuris koduoja iki Z
arba Zed, priklausomai nuo to, kur esate iš.

13
00:00:42,470 --> 00:00:47,445
Tada Y tuomet pereiti visą kelią,
apvynioti abėcėlės patekti į A,

14
00:00:47,445 --> 00:00:53,256
ir galiausiai paskutinis laiškas
abėcėlė, Z Zed, bus koduoti į tašką B.

15
00:00:53,256 --> 00:00:54,660
>> Jūs turite tai?

16
00:00:54,660 --> 00:00:56,380
Pažvelkime į keletą pavyzdžių.

17
00:00:56,380 --> 00:01:00,540
Pirmasis pavyzdys čia yra labai panašus
kas mes ką tik paaiškinta pirmiau.

18
00:01:00,540 --> 00:01:05,560
Taigi, jei aš koduoti kai skirsnį
abėcėlė, nuo A iki L, iš dviejų raktą,

19
00:01:05,560 --> 00:01:09,760
tada aš tiesiog gauti savo visą
abėcėlė perėjo dvi raides.

20
00:01:09,760 --> 00:01:12,230
>> Tada, mano kitą, pavyzdžiui,
svarbiausia yra dar du,

21
00:01:12,230 --> 00:01:15,080
todėl jūs vis dar reikia žinoti
kokios raidės tikėtis.

22
00:01:15,080 --> 00:01:16,400
Bet čia tai frazė.

23
00:01:16,400 --> 00:01:18,100
Tai CS50.

24
00:01:18,100 --> 00:01:21,090
Taigi, jūs pastebėsite, kad aš
išsaugoti savo laiškuose bylą,

25
00:01:21,090 --> 00:01:25,600
taip bet didžiosios raidės, taip pat
didžiosios raidės į ciphertext.

26
00:01:25,600 --> 00:01:27,800
Ir bet mažosiomis raidėmis
raidės paprastojo

27
00:01:27,800 --> 00:01:30,640
taip pat mažąsias
raidės ciphertext.

28
00:01:30,640 --> 00:01:34,020
Bet aš nuolat raides
ir bet šauktukai

29
00:01:34,020 --> 00:01:37,610
arba bet kuri kita skyryba tą patį.

30
00:01:37,610 --> 00:01:40,360
>> Taigi dabar, kad mes turime jausmą
už tai, kaip programa veikia,

31
00:01:40,360 --> 00:01:43,890
nedvejodami eiti paleisti kai daugiau
pavyzdžių savo, jei norite.

32
00:01:43,890 --> 00:01:47,072
Pradėkime su vis
raktas nuo naudotojo.

33
00:01:47,072 --> 00:01:48,780
Tradiciškai su
kitų problemų, mes

34
00:01:48,780 --> 00:01:51,450
buvo įpratę gauti
bet numeriai, kad mes

35
00:01:51,450 --> 00:01:54,710
reikia iki paskatino vartotoją
su funkcija getint.

36
00:01:54,710 --> 00:01:58,850
Bet šį kartą mes iš tikrųjų ketiname
naudoti komandinės eilutės argumentus

37
00:01:58,850 --> 00:02:01,760
ir nauja funkcija vadinama atoi.

38
00:02:01,760 --> 00:02:05,130
>> Paleidus pagrindinis
programa C, tada jis

39
00:02:05,130 --> 00:02:08,500
trunka dvi parameters--
INT argc, kuris

40
00:02:08,500 --> 00:02:11,670
yra argumentų skaičius
priimtas, ir tada

41
00:02:11,670 --> 00:02:15,920
argv, kurio stygos masyvas, kuriame yra
kai visų iš argumentų sąrašas

42
00:02:15,920 --> 00:02:16,740
praėjo.

43
00:02:16,740 --> 00:02:19,740
Jūs neturite aiškiai turi
pripažinti šiuos kintamuosius.

44
00:02:19,740 --> 00:02:22,700
Jie apskaičiuojami
Jūs sudarytojas.

45
00:02:22,700 --> 00:02:28,160
Teisingas naudojimas tai būtų
už argc būti du šiuo atveju,

46
00:02:28,160 --> 00:02:32,630
nes vartotojas turi pereiti į
kvietimas į programą, ./caesar,

47
00:02:32,630 --> 00:02:35,570
ir tada raktas,
kokia numerį jie nori.

48
00:02:35,570 --> 00:02:39,920
Taigi, tai reiškia, kad argc turi būti du
tam, kad galiojantis naudojimo Cezaris

49
00:02:39,920 --> 00:02:41,680
turi būti vykdomi.

50
00:02:41,680 --> 00:02:43,590
>> Taigi pažvelkime pavyzdys.

51
00:02:43,590 --> 00:02:47,760
Pasakyti, kad aš jau parašyta ir
parengė programą "blastoff.

52
00:02:47,760 --> 00:02:52,670
Taigi, jei išbėgau į komandų eilutę
./blastoff Komanda raketų, gerai, tada,

53
00:02:52,670 --> 00:02:57,750
argc būtų tris, nes aš
praėjo trys atskiri argumentais.

54
00:02:57,750 --> 00:02:59,830
Tada argv atrodytų taip.

55
00:02:59,830 --> 00:03:03,750
Tai masyvas, ir tai būtų
būti kiekvieną iš trijų stygos.

56
00:03:03,750 --> 00:03:09,640
./blastoff pirmoje indekso, komanda
į kitą, ir raketų paskutinis.

57
00:03:09,640 --> 00:03:11,610
>> Pakalbėkime apie masyvų DĖL sek.

58
00:03:11,610 --> 00:03:15,560
Masyvai yra duomenų struktūros, turinčių
keletą reikšmių, tos pačios rūšies.

59
00:03:15,560 --> 00:03:19,980
Tai gali praversti, kai mes
turi sąrašus sveikieji ar tinkleliuose.

60
00:03:19,980 --> 00:03:23,030
Tiesiog neužmirškite, jie turi
būti to paties tipo.

61
00:03:23,030 --> 00:03:25,310
Computer Science, mes
myliu skaičiuoti nuo nulio,

62
00:03:25,310 --> 00:03:29,260
todėl nepamirškite, kad masyvai
Taip pat yra nulinės indeksuojami.

63
00:03:29,260 --> 00:03:34,360
Taip pirmojo elemento savo masyvo
bus ne indeksą nulio.

64
00:03:34,360 --> 00:03:37,580
Šiuo atveju taip, kai aš turėti
kurio ilgis keturių masyvas,

65
00:03:37,580 --> 00:03:41,350
tada paskutinis indeksas
paskutinis elementas mano masyvo

66
00:03:41,350 --> 00:03:44,970
iš tikrųjų bus
ne trys, o ne keturi indeksą.

67
00:03:44,970 --> 00:03:48,880
Nes atsimenu, mes
pradėti skaičiuoti iki nulio.

68
00:03:48,880 --> 00:03:52,530
>> Štai kaip jūs pavyzdys
gali sukurti jūsų pačių masyvo.

69
00:03:52,530 --> 00:03:56,440
Taigi pasakyti, kad aš norėjau išsaugoti savo
trys mėgstamiausios Šunų vardai.

70
00:03:56,440 --> 00:03:59,030
Tada aš norėčiau sukurti eilučių masyvo.

71
00:03:59,030 --> 00:04:04,450
Taigi norėčiau juos paskelbti tipo, eilutę, ir
tada įdėti pavadinimą masyvo, Šunys,

72
00:04:04,450 --> 00:04:06,450
ir tada tose aikštėje
skliausteliuose įdėti dydį

73
00:04:06,450 --> 00:04:09,260
iš šiuo atveju, trijų array--.

74
00:04:09,260 --> 00:04:12,690
>> Taigi mano pirmasis įrašas vyksta
būti šunų indeksas lygus nuliui,

75
00:04:12,690 --> 00:04:14,750
ir tai bus Milo.

76
00:04:14,750 --> 00:04:17,850
Tada šunims indeksą vieno
bus Goofy,

77
00:04:17,850 --> 00:04:23,060
Darling Moto, tada paskutinis
įrašas, trečias įrašas dviejų indeksas,

78
00:04:23,060 --> 00:04:26,130
bus mielas, saldus Elphie.

79
00:04:26,130 --> 00:04:28,610
Jūs pastebėsite, kad formatu
pildymo šio masyvo

80
00:04:28,610 --> 00:04:32,150
yra labai panašūs kaip galite
pranešti apie bet kokią kitą kintamąjį kur

81
00:04:32,150 --> 00:04:36,307
Jūs turite kintamojo pavadinimą, po to
vertė, kuriuos norite laikyti jį.

82
00:04:36,307 --> 00:04:38,140
Vienintelis skirtumas
šiuo atveju yra tai, kad jums

83
00:04:38,140 --> 00:04:42,700
prisiminti įdėti indeksą
iš kvadrātiekavām vertės.

84
00:04:42,700 --> 00:04:46,420
Ir mes turime
trys mėgstamiausios šunys.

85
00:04:46,420 --> 00:04:48,780
>> Bet deja, atėjo laikas
grįžti į Cezaris.

86
00:04:48,780 --> 00:04:52,910
Atminkite, kad teisingą naudojimą už
vartotojas bus einančios į ne tik

87
00:04:52,910 --> 00:04:57,430
iš programos ./caesar vardas, bet
Taip pat svarbu, kad jie nori pereiti

88
00:04:57,430 --> 00:04:58,850
jų paprastasis iki.

89
00:04:58,850 --> 00:05:01,540
Taigi, tai reiškia, kad argc turi būti du.

90
00:05:01,540 --> 00:05:07,580
Jie turi praeiti two-- ne daugiau ir ne
mažiau nei du komandinės eilutės argumentus.

91
00:05:07,580 --> 00:05:09,050
>> Dabar, ką apie argv?

92
00:05:09,050 --> 00:05:12,880
Na, mes jau žinome, kad
masyvas bus Ilgio du,

93
00:05:12,880 --> 00:05:15,270
bet kas esantis kiekvieno elemento?

94
00:05:15,270 --> 00:05:19,330
Na, pirmasis elementas
bus ./caesar,

95
00:05:19,330 --> 00:05:24,190
ir tada kitas elementas ketina
yra raktas, kad vartotojas turi įvesti.

96
00:05:24,190 --> 00:05:27,480
Dabar, jei jie naudojami teisingai
už Cezaris naudojimas,

97
00:05:27,480 --> 00:05:29,350
tada jie ketina įvesti skaičių.

98
00:05:29,350 --> 00:05:33,260
Bet nors charakterio
kad jie tipo yra skaičius,

99
00:05:33,260 --> 00:05:35,790
tai duomenų tipas eilutę.

100
00:05:35,790 --> 00:05:40,390
>> Taigi, kaip mes konvertuoti, kad
eilutė iki sveikojo skaičiaus?

101
00:05:40,390 --> 00:05:46,680
Taigi sako Turiu num, styginių,
kuriame eilutę 50.

102
00:05:46,680 --> 00:05:49,000
Jei aš noriu konvertuoti, kad
iki sveikojo skaičiaus, tada aš tiesiog

103
00:05:49,000 --> 00:05:53,340
paskelbti naują kintamąjį,
sveikasis skaičius i, telefonu atoi.

104
00:05:53,340 --> 00:06:01,160
Galiu perduoti mano styginių kintamojo, num, ir
tada aš tada yra skaičių 50.

105
00:06:01,160 --> 00:06:04,350
Įsitikinkite, kad patikrinti vyro
puslapių, atoi funkcija

106
00:06:04,350 --> 00:06:07,990
patikrinti, kurie biblioteka tai
į, taip pat, kas jį vertina

107
00:06:07,990 --> 00:06:14,550
grįš jei eilutė praėjo
į nėra visų numerius.

108
00:06:14,550 --> 00:06:16,950
>> Taigi, dabar, kad mes Dotarłeś
raktas, kitas žingsnis

109
00:06:16,950 --> 00:06:19,430
yra gauti paprastojo iš vartotojo.

110
00:06:19,430 --> 00:06:21,170
Dabar tai vyksta į
būti mažiau sudėtingas

111
00:06:21,170 --> 00:06:23,410
nei naršyti aplink
komandinės eilutės argumentai.

112
00:06:23,410 --> 00:06:26,190
Visi mes turime padaryti, tai paskambinti
getstring funkcija

113
00:06:26,190 --> 00:06:29,660
kad tai paskatins vartotoją duoti
mums eilutę, tačiau nepamirškite,

114
00:06:29,660 --> 00:06:34,090
patikrinti kiek specifikacijas mes
galbūt norėsite greitai už tą vartotoją.

115
00:06:34,090 --> 00:06:36,420
>> Dabar mes einame į
širdis problem--

116
00:06:36,420 --> 00:06:38,860
Kaip šifruoti paprastojo.

117
00:06:38,860 --> 00:06:42,830
Na, visų pirma, pakalbėkime apie tai, kaip
į šifruoti vieną simbolį vienu metu,

118
00:06:42,830 --> 00:06:47,370
ir tada mes spręsti, kaip
pakartoti per visą paprastojo.

119
00:06:47,370 --> 00:06:50,440
Aš parašiau šiek tiek Pseudocode
už Cezario problema.

120
00:06:50,440 --> 00:06:52,310
Raginu jus
Parašykite savo taip pat.

121
00:06:52,310 --> 00:06:55,900
Tai gali ne atrodo identiškas
mano, ir kad viskas OK, bet kaip ilgai

122
00:06:55,900 --> 00:06:58,640
kaip bendra idėja yra ta pati.

123
00:06:58,640 --> 00:07:00,780
>> Pirmieji trys žingsniai
mes jau padaryta.

124
00:07:00,780 --> 00:07:03,100
Mes Dotarłeś raktą iš
komandinės eilutės argumentas,

125
00:07:03,100 --> 00:07:05,510
mes pasuko tą raktą
į sveikojo skaičiaus, ir mes

126
00:07:05,510 --> 00:07:09,320
paskatino dėl paprastojo vartotoją
kad jie nori šifruoti.

127
00:07:09,320 --> 00:07:12,420
Taigi šalia didelis gabalas
yra tai, kad kiekvieną simbolį

128
00:07:12,420 --> 00:07:15,070
į paprastojo eilutę,
jei tai Abėcėlinis,

129
00:07:15,070 --> 00:07:17,750
norime išsaugoti
savo argumentus ir perkelti ją.

130
00:07:17,750 --> 00:07:20,900
Iki išsaugoti atveju, ką aš
reiškia, kad visi didžiosiomis raidėmis

131
00:07:20,900 --> 00:07:23,580
raidės turi išlikti Aukštutinė
atveju ir mažosiomis raidėmis

132
00:07:23,580 --> 00:07:25,640
turėtų likti mažosiomis raidėmis.

133
00:07:25,640 --> 00:07:29,110
Taigi, kai mes pereiti tiems,
tada mes spausdinti ciphertext.

134
00:07:29,110 --> 00:07:33,100
>> Čia yra trys funkcijos, kurie ketina
ateiti patogu šią problemą.

135
00:07:33,100 --> 00:07:38,010
Įsiminti iki aukščiau, kai daviau
pavyzdys perkeliant tai CS50?

136
00:07:38,010 --> 00:07:41,800
Atminkite, kad 50 ir
šauktukas nebuvo perkelti?

137
00:07:41,800 --> 00:07:45,680
Taigi, kaip mes galime pasakyti, ar mes
reikia perkelti laišką ar ne?

138
00:07:45,680 --> 00:07:48,650
Na, "yra alfa", jei
pereisite tai charakteris,

139
00:07:48,650 --> 00:07:54,850
grįš tiesa, jei tai charakteris
yra raidė ir false kitaip.

140
00:07:54,850 --> 00:07:56,870
Norėdami padėti jums su
išsaugoti kapitalizacija

141
00:07:56,870 --> 00:07:59,750
yra funkcijos "yra
viršutinis "ir" yra mažesnis. "

142
00:07:59,750 --> 00:08:03,350
>> Šios dvi funkcijos taip pat imtis
vienu pobūdžio kaip įėjimo

143
00:08:03,350 --> 00:08:06,580
ir grąžinti jums Būlio,
arba true arba false

144
00:08:06,580 --> 00:08:11,280
priklausomai nuo to, ar tą charakterio
yra didžiosiomis arba mažosiomis raidėmis.

145
00:08:11,280 --> 00:08:14,610
Nes "yra viršutinio" ir "yra
mažesnis "yra Bulio funkcijos,

146
00:08:14,610 --> 00:08:18,660
tai reiškia, kad jie grįžta jums Būlio,
Galite naudoti šias savo sąlygas.

147
00:08:18,660 --> 00:08:23,490
Taigi čia kodo fragmentą, kad tik
spausdina laišką, jei tai viršutinė atveju.

148
00:08:23,490 --> 00:08:27,790
Taigi aš paskelbė savo charakterį
laiškas turi būti viršutinis dėklas Zed

149
00:08:27,790 --> 00:08:33,440
ir tada, jei "yra viršutinis" grįžta
tiesa, tada atspausdinti šį laišką.

150
00:08:33,440 --> 00:08:38,200
>> Grįžtant prie mūsų paprastą pavyzdį
perkeliant abėcėlė iš dviejų raktą,

151
00:08:38,200 --> 00:08:41,049
kaip mes iš tikrųjų gauti, kad į darbą?

152
00:08:41,049 --> 00:08:45,770
Na, paaiškėja, kad simbolių
ir sveikieji skaičiai yra labai glaudžiai susiję.

153
00:08:45,770 --> 00:08:48,840
Kiekvienas personažas turi
sveikas reikšmė, susijusi

154
00:08:48,840 --> 00:08:53,260
su juo rasti ASCII lentelę,
kur kiekvienas simbolis yra ASCII

155
00:08:53,260 --> 00:08:55,380
rodoma reikšmė.

156
00:08:55,380 --> 00:08:58,940
Taigi viršutinę atveju Atitinka
į ASCII vertės 65

157
00:08:58,940 --> 00:09:02,270
ir mažosiomis raidėmis nuo A iki
ASCII vertė 97.

158
00:09:02,270 --> 00:09:04,940
>> Jauskitės laisvai ieškoti
bet ascii diagrama internete

159
00:09:04,940 --> 00:09:07,720
pamatyti šias vertybes sau.

160
00:09:07,720 --> 00:09:12,096
Taigi, ką tai reiškia, kad mes galime
imtis iš didžiųjų raidžių simbolį,

161
00:09:12,096 --> 00:09:18,200
pridėti sveiką skaičių nuo dviejų iki jį, ir tada gauti
simbolis viršutinė byla C, kaip rezultatas.

162
00:09:18,200 --> 00:09:23,720
Tai todėl, kad 65, ASCII
Vertė kapitalo A, plius 2,

163
00:09:23,720 --> 00:09:29,960
suteikia mums 67, o tai atitinka
į didžiųjų raidžių C pobūdžio

164
00:09:29,960 --> 00:09:33,480
>> Deja, viskas
nebus gana būti taip paprasta.

165
00:09:33,480 --> 00:09:36,980
Mes turime lygtį, kad
mes turime apsvarstyti.

166
00:09:36,980 --> 00:09:43,590
Čia jis pasakoja, kad i-tojo ciphertext
laiškas atitinka i-ajai paprastojo

167
00:09:43,590 --> 00:09:48,900
laiškas, plius key--
visa tai, modulinė 26.

168
00:09:48,900 --> 00:09:50,810
Kodėl yra tai, kad tuo atveju?

169
00:09:50,810 --> 00:09:55,430
Grįžkime prie mūsų pavyzdžio iš
anksčiau, kur kapitalas A plius 2,

170
00:09:55,430 --> 00:09:57,590
suteikia mums kapitalo C.

171
00:09:57,590 --> 00:10:01,870
>> Taigi taikant lygtį, kad
specifikacija suteikia mums,

172
00:10:01,870 --> 00:10:06,660
tada galime imtis kapitalo A
plius 2 ir mod, kad 26.

173
00:10:06,660 --> 00:10:10,730
Taigi kapitalo A, kai aš įdėti jį į
tie viengubų kabučių,

174
00:10:10,730 --> 00:10:14,010
leidžia man ją gydyti, kaip
sveikas skaičius, taip, kad leidžia

175
00:10:14,010 --> 00:10:17,500
man mesti savo ASCII vertės, 65.

176
00:10:17,500 --> 00:10:20,080
65 plius 2 yra 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 suteikia mums 15,
bet tikrai ne

178
00:10:25,210 --> 00:10:32,590
prasmės, nes mes žinome, kad
kapitalas, C ASCII reikšmė yra 67, o ne 15.

179
00:10:32,590 --> 00:10:35,580
Taigi, kaip mes suderinti, kad?

180
00:10:35,580 --> 00:10:39,840
>> Na, čia aš norėčiau Teigti
sąvoka abėcėlinė rodyklė.

181
00:10:39,840 --> 00:10:44,010
Taigi, mes jau kalbėjome apie tai, kaip
Kiekvienas personažas turi savo ASCII vertę,

182
00:10:44,010 --> 00:10:48,810
bet aš norėčiau pasakyti, gerai, tegul
galvoti apie kiekvienas simbolis, taip pat turintys

183
00:10:48,810 --> 00:10:52,230
abėcėlinė rodyklė,
kur A pavyzdžiui,

184
00:10:52,230 --> 00:10:58,800
kaip pirmąją abėcėlės raidė,
turi abėcėlinė rodyklė nulio.

185
00:10:58,800 --> 00:11:02,070
Taigi dabar galime taikyti
tas pats lygtis kaip ir anksčiau,

186
00:11:02,070 --> 00:11:05,040
bet naudojant abėcėlinę rodyklę.

187
00:11:05,040 --> 00:11:07,810
>> Taigi A yra nulis, kaip mes apibrėžti.

188
00:11:07,810 --> 00:11:15,640
Taigi atsižvelgiant nulis plius du, mod 26,
tai du, mod 26, kuris suteikia mums du.

189
00:11:15,640 --> 00:11:18,780
Ir gerai, kalbant apie
abėcėlinė rodyklė,

190
00:11:18,780 --> 00:11:23,930
C yra trečioji raidė
abėcėlės, taip, kad atitiktų

191
00:11:23,930 --> 00:11:26,290
į abėcėlinė rodyklė dviejų.

192
00:11:26,290 --> 00:11:29,850
Taigi atrodo, kad naudojant
abėcėlinė rodyklė šiuo atveju

193
00:11:29,850 --> 00:11:32,840
iš tikrųjų mums suteikia teisingą rezultatą.

194
00:11:32,840 --> 00:11:35,020
>> Taigi dabar galime patikrinti,
pamatyti, jei lygties darbų

195
00:11:35,020 --> 00:11:37,210
su abėcėlinė rodyklė.

196
00:11:37,210 --> 00:11:42,540
Y raidiniai indeksas yra 24, nes
Antrasis į paskutinę raidę abėcėlėje.

197
00:11:42,540 --> 00:11:46,520
Taigi 24 plius mūsų
pagrindinis iš dviejų suteikia mums 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 suteikia mums 0, kuris, Lucky
mums, yra abėcėlinis indeksas A.

199
00:11:54,750 --> 00:11:59,100
Taigi tikiuosi, kad tai pakankamai, kad įrodymas
Abėcėlinis indekso metodas veikia.

200
00:11:59,100 --> 00:12:03,180
Jei ne, nedvejodami išbandyti
kai savo pavyzdžių.

201
00:12:03,180 --> 00:12:08,030
>> Siekiant tinkamai apvynioti
abėcėlė ir taikyti Caesar lygtį,

202
00:12:08,030 --> 00:12:11,280
tada mes žinome, kad reikia
susidoroti su abėcėlės indeksus.

203
00:12:11,280 --> 00:12:15,130
Bet mes pradėti su ASCII
vertės, ir tik tada

204
00:12:15,130 --> 00:12:18,530
mes tada konvertuoti į
Abėcėlinis indeksas.

205
00:12:18,530 --> 00:12:23,970
Iš ten, kad būtų atspausdinti, turime
susidoroti su ASCII vertybių dar kartą.

206
00:12:23,970 --> 00:12:28,350
Taigi, mes turime išsiaiškinti, kaip
eik iš ASCII abėcėlės

207
00:12:28,350 --> 00:12:31,080
ir nuo abėcėlę ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Taigi, aš palikti jį jums išsiaiškinti
tarp personažo modelis

209
00:12:34,910 --> 00:12:38,590
ir jos pagal abėcėlę
indeksas ir jo ASCII reikšmė.

210
00:12:38,590 --> 00:12:41,530
Dabar, prisiminkite, kad nors
Šioje lentelėje tiesiai ant skaidrės

211
00:12:41,530 --> 00:12:45,630
rodo didžiosios raidės, mes taip pat
turi apsvarstyti, ar

212
00:12:45,630 --> 00:12:48,915
taikomas kitoks modelis
žemesnių raidėmis.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Taigi, dabar, kad mes suprato,
kaip pereiti vieną simbolį,

215
00:12:55,840 --> 00:13:02,200
tada visi mes turime padaryti, tai masto, kad
iki go visoje paprastojo.

216
00:13:02,200 --> 00:13:04,260
Taigi paprastasis yra eilutė.

217
00:13:04,260 --> 00:13:08,210
Lucky mus seka yra tikrai
tik simbolių masyvas,

218
00:13:08,210 --> 00:13:12,150
taip, kad būtų pasiekti kiekvieną požymį
Styga, viskas, ką turite daryti

219
00:13:12,150 --> 00:13:14,270
yra naudoti masyvo notacijos.

220
00:13:14,270 --> 00:13:20,270
Pasakykite turiu tipo kintamasis
eilutė vadinama "tekstas =" tai CS50 ".

221
00:13:20,270 --> 00:13:22,730
>> Gerai, tada, tam, kad
prieigos prie kiekvieno charakterį,

222
00:13:22,730 --> 00:13:25,880
viskas, ką turiu daryti su
kintamasis tekstas

223
00:13:25,880 --> 00:13:31,660
pasakyti gerai, tekstas ne indeksą nulio, kad
atitinka kapitalo T. tekstą indeksą

224
00:13:31,660 --> 00:13:35,100
vienas atitinka mažąją h.

225
00:13:35,100 --> 00:13:38,110
Dar viena naudinga funkcija yra
eilutė ilgis funkcija.

226
00:13:38,110 --> 00:13:40,760
Taigi einančios į eilutę
kad funkcija grįš

227
00:13:40,760 --> 00:13:44,610
sveikas skaičius, šios eilutės ilgis.

228
00:13:44,610 --> 00:13:47,060
>> Dabar, kad mes kalbėjome apie
Visi šie skirtingi elementai,

229
00:13:47,060 --> 00:13:48,540
tegul juos atgal kartu.

230
00:13:48,540 --> 00:13:52,210
Taigi sugrįžti į bet mano Pseudocode
kodas arba jūsų Pseudocode

231
00:13:52,210 --> 00:13:55,920
ir eiti per ir įsitikinkite, kad jums
žinoti, kaip tai padaryti kiekvienas dalykas.

232
00:13:55,920 --> 00:14:01,520
Kelionė raktą naudojant argc ir argv,
sukdami raktą į visumą A

233
00:14:01,520 --> 00:14:06,840
I, stebinčių paprastojo,
getstring, tada Iteracja

234
00:14:06,840 --> 00:14:09,590
per kiekvieną personažo
paprastojo eilutė,

235
00:14:09,590 --> 00:14:14,910
išlaikant kiekvieno pobūdžio bylą
ir perkelia tą simbolį raktą,

236
00:14:14,910 --> 00:14:17,520
užtikrinti, kad esate
vyniojimo aplink abėcėlės,

237
00:14:17,520 --> 00:14:20,850
pagaliau spausdinant kad ciphertext.

238
00:14:20,850 --> 00:14:25,470
Mano vardas Amila, ir tai buvo Cezaris.

239
00:14:25,470 --> 00:14:28,448

