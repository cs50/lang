1
00:00:00,000 --> 00:00:00,760

2
00:00:00,760 --> 00:00:02,270
>> Amila: Olgem lahendada Caesar.

3
00:00:02,270 --> 00:00:06,110
In Caesar, laseme kasutaja
kodeerida salajane sõnum.

4
00:00:06,110 --> 00:00:09,780
Nii saab sukelduda õigus ning otsida
meie ülesanded selle probleemi.

5
00:00:09,780 --> 00:00:12,210
Nii et kõigepealt me ​​saada võti kasutaja.

6
00:00:12,210 --> 00:00:15,210
Siis saame polegi
et nad tahavad kodeerida.

7
00:00:15,210 --> 00:00:21,380
Pärast seda me šifreerimine seda nende eest,
ja lõpuks me printida oma ciphertext.

8
00:00:21,380 --> 00:00:23,600
>> Nii alustame näiteks.

9
00:00:23,600 --> 00:00:26,920
Ütle, et tahtis kodeerida
Kogu tähestiku võtmega kaks.

10
00:00:26,920 --> 00:00:31,360
Noh, kogu oma tähestikus oleks
lihtsalt nihkunud tähed.

11
00:00:31,360 --> 00:00:37,060
Nii oleks kodeerid C, B
D, C-E, nii edasi ja nii edasi,

12
00:00:37,060 --> 00:00:42,470
kuni saad X, mis kodeerib kuni Z
või Teed, sõltuvalt sellest, kus sa oled.

13
00:00:42,470 --> 00:00:47,445
Siis Y siis nihkub kogu tee,
ümbritsev tähestiku pääseda,

14
00:00:47,445 --> 00:00:53,256
ja siis lõpuks viimane täht
tähestiku, Z, Teed, mis kodeerib B.

15
00:00:53,256 --> 00:00:54,660
>> Sul on see?

16
00:00:54,660 --> 00:00:56,380
Vaatame mõned näited.

17
00:00:56,380 --> 00:01:00,540
Esimene näide on siin väga sarnane
mida me lihtsalt selgitatud.

18
00:01:00,540 --> 00:01:05,560
Nii et kui ma kodeerida mõned osa
tähestiku A kuni L, võtme kahe,

19
00:01:05,560 --> 00:01:09,760
siis ma lihtsalt saan kogu
tähestiku nihkus kaks tähte.

20
00:01:09,760 --> 00:01:12,230
>> Siis minu kõrval näiteks
võti on ikka kaks,

21
00:01:12,230 --> 00:01:15,080
nii et sa peaks ikka teadma,
mis tähed oodata.

22
00:01:15,080 --> 00:01:16,400
Aga siin on see väljend.

23
00:01:16,400 --> 00:01:18,100
See on CS50.

24
00:01:18,100 --> 00:01:21,090
Nii märkad, et ma
säilitada puhul minu kirjad,

25
00:01:21,090 --> 00:01:25,600
nii et kõik suurtähed on ka
suurtähed on ciphertext.

26
00:01:25,600 --> 00:01:27,800
Ja mõni väiketähed
tähed polegi

27
00:01:27,800 --> 00:01:30,640
Samuti väiketäheliseks
tähed ciphertext.

28
00:01:30,640 --> 00:01:34,020
Aga ma saan tähed
ja kõik hüüumärki

29
00:01:34,020 --> 00:01:37,610
või muu kirjavahemärgi sama.

30
00:01:37,610 --> 00:01:40,360
>> Nüüd, et meil on mõistlik
kuidas programm töötab,

31
00:01:40,360 --> 00:01:43,890
vabalt minna tööle mõned rohkem
näiteid oma, kui soovite.

32
00:01:43,890 --> 00:01:47,072
Alustame saada
võti kasutaja.

33
00:01:47,072 --> 00:01:48,780
Traditsiooniliselt koos
muid probleeme, me oleme

34
00:01:48,780 --> 00:01:51,450
harjunud saada
numbreid, et me

35
00:01:51,450 --> 00:01:54,710
vaja teavitades kasutajat,
funktsiooniga getint.

36
00:01:54,710 --> 00:01:58,850
Aga seekord me tegelikult toimub
kasutada käsureaargumenti

37
00:01:58,850 --> 00:02:01,760
ja uus funktsioon nimega atoi.

38
00:02:01,760 --> 00:02:05,130
>> Kui sa jooksed peamine
programmi C, siis

39
00:02:05,130 --> 00:02:08,500
võtab kaks parameters--
int Argc, mis

40
00:02:08,500 --> 00:02:11,670
on mitmeid argumente
möödunud aastal ja seejärel

41
00:02:11,670 --> 00:02:15,920
argv, massiivi stringe, mis sisaldab
nimekirja kõik argumendid

42
00:02:15,920 --> 00:02:16,740
möödas.

43
00:02:16,740 --> 00:02:19,740
Sa ei ole selgesõnaliselt on
kuulutada need muutujad.

44
00:02:19,740 --> 00:02:22,700
Nad arvutati
teile koostaja.

45
00:02:22,700 --> 00:02:28,160
Õigekeelsus oleks see
jaoks Argc olevat kaks sel juhul

46
00:02:28,160 --> 00:02:32,630
kuna kasutaja peab läbima
Kõne programmi, ./caesar,

47
00:02:32,630 --> 00:02:35,570
ja siis võti,
mis iganes number, mida nad soovivad.

48
00:02:35,570 --> 00:02:39,920
Nii et see tähendab, et Argc peab olema kaks
Selleks, et kehtiv kasutamine Caesar

49
00:02:39,920 --> 00:02:41,680
tuleb täita.

50
00:02:41,680 --> 00:02:43,590
>> Nii vaatame näiteks.

51
00:02:43,590 --> 00:02:47,760
Öelda, et ma olen juba kirjutanud ja
koostatud programmi nimega blastoff.

52
00:02:47,760 --> 00:02:52,670
Nii et kui ma jooksin käsureal
./blastoff Team Rocket, hästi, siis,

53
00:02:52,670 --> 00:02:57,750
Argc oleks kolm, sest ma
möödunud aastal kolm erinevat argumente.

54
00:02:57,750 --> 00:02:59,830
Siis argv näeks välja selline.

55
00:02:59,830 --> 00:03:03,750
See massiiv, ja see oleks
sisaldavad iga kolme stringid.

56
00:03:03,750 --> 00:03:09,640
./blastoff esimeses indeks, meeskond
järgmisel ja raketi viimase.

57
00:03:09,640 --> 00:03:11,610
>> Räägime massiivid Sec.

58
00:03:11,610 --> 00:03:15,560
Massiivid on andmestruktuurid, mis hoiavad
Mitme väärtuse sama tüüpi.

59
00:03:15,560 --> 00:03:19,980
See võib tulla mugav, kui me
on nimekirjad täisarvud või stringid.

60
00:03:19,980 --> 00:03:23,030
Pea meeles, nad on
olema sama tüüpi.

61
00:03:23,030 --> 00:03:25,310
Infotehnoloogia, me
armastan arvestades nullist,

62
00:03:25,310 --> 00:03:29,260
seega pea meeles, massiivid
Samuti on null-indekseeritud.

63
00:03:29,260 --> 00:03:34,360
Nii et esimene osa minu rida
läheb kell indeks null.

64
00:03:34,360 --> 00:03:37,580
Nii sel juhul, kui mul on
massiivi pikkus neli,

65
00:03:37,580 --> 00:03:41,350
siis viimane indeks
viimane element minu rida

66
00:03:41,350 --> 00:03:44,970
tegelikult saab olema
kell indeks kolm, mitte neli.

67
00:03:44,970 --> 00:03:48,880
Sest mäletan, me
alustada nullist.

68
00:03:48,880 --> 00:03:52,530
>> Siin on näide sellest, kuidas
võib tekitada hulgaliselt oma.

69
00:03:52,530 --> 00:03:56,440
Nii öelda tahtsin hoida oma
kolm lemmik koer nimed.

70
00:03:56,440 --> 00:03:59,030
Siis ma looks massiivi stringe.

71
00:03:59,030 --> 00:04:04,450
Nii et ma kuulutada tüübist, nööri ja
siis pane nime massiivi, koerad,

72
00:04:04,450 --> 00:04:06,450
ja siis nendes ruudu
Sulgudes panna suurus

73
00:04:06,450 --> 00:04:09,260
on array-- sel juhul kolm.

74
00:04:09,260 --> 00:04:12,690
>> Nii et minu esimene sissekanne läheb
olema koertel indeks null,

75
00:04:12,690 --> 00:04:14,750
ja mis saab olema Milo.

76
00:04:14,750 --> 00:04:17,850
Siis koertel indeks üks
läheb tobe,

77
00:04:17,850 --> 00:04:23,060
Darling mochi ja siis viimase
kanne, kolmanda sisenemise indeks kaks,

78
00:04:23,060 --> 00:04:26,130
saab olema armas, armas Elphie.

79
00:04:26,130 --> 00:04:28,610
Märkad, et vormi
täitmiseks antud massiivi

80
00:04:28,610 --> 00:04:32,150
on väga sarnane, kuidas sa võiksid
Kinnitan muu muutuja, kus

81
00:04:32,150 --> 00:04:36,307
sul on muutuja nimi, millele järgneb
väärtus, mida te soovite salvestada see.

82
00:04:36,307 --> 00:04:38,140
Ainus erinevus
Sel juhul on see, et sa

83
00:04:38,140 --> 00:04:42,700
Tuleb meeles pidada, et panna indeks
väärtusest nurksulgudes.

84
00:04:42,700 --> 00:04:46,420
Ja seal oleme meie
kolm lemmik koera.

85
00:04:46,420 --> 00:04:48,780
>> Aga kahjuks on aeg
et saada tagasi Caesar.

86
00:04:48,780 --> 00:04:52,910
Pea meeles, et õige kasutamise eest
kasutaja saab veeretada mitte ainult

87
00:04:52,910 --> 00:04:57,430
nimi programm ./caesar, kuid
Samuti võti, et nad tahavad minna

88
00:04:57,430 --> 00:04:58,850
oma polegi poolt.

89
00:04:58,850 --> 00:05:01,540
Nii et see tähendab, et Argc peab olema kaks.

90
00:05:01,540 --> 00:05:07,580
Nad peavad läbima two-- ei rohkem ega
vähem kui kaks käsurea argumente.

91
00:05:07,580 --> 00:05:09,050
>> Nüüd, kuidas argv?

92
00:05:09,050 --> 00:05:12,880
Noh, me teame juba, et
massiivi saab olema pikkusega kaks,

93
00:05:12,880 --> 00:05:15,270
Aga mis sisalduvad iga element?

94
00:05:15,270 --> 00:05:19,330
Noh, esimene osa
läheb ./caesar,

95
00:05:19,330 --> 00:05:24,190
ja siis järgmine element läheb
sisaldama võtit, et kasutaja sisestatud.

96
00:05:24,190 --> 00:05:27,480
Nüüd, kui nad kasutasid seda õigesti
kasutamise eest Caesar,

97
00:05:27,480 --> 00:05:29,350
siis nad ei kavatse kirjuta number.

98
00:05:29,350 --> 00:05:33,260
Aga kuigi iseloomu
et nad tüüp on number,

99
00:05:33,260 --> 00:05:35,790
see on andmete tüübile string.

100
00:05:35,790 --> 00:05:40,390
>> Niisiis, kuidas me teisendada, et
string täisarv?

101
00:05:40,390 --> 00:05:46,680
Nii et mul on num, jada,
mis sisaldab stringi 50.

102
00:05:46,680 --> 00:05:49,000
Kui ma tahan, et konverteerida see
täisarv, siis ma lihtsalt

103
00:05:49,000 --> 00:05:53,340
kuulutada uus muutuja, mis on
täisarv i, kutsudes atoi.

104
00:05:53,340 --> 00:06:01,160
Annan minu string muutuja num ja
siis ma sisaldab siis number 50.

105
00:06:01,160 --> 00:06:04,350
Veenduge, et kontrollida mees
lehtede atoi funktsiooni

106
00:06:04,350 --> 00:06:07,990
kontrollida, mis raamatukogu see
aastal, samuti seda, mida väärtustada

107
00:06:07,990 --> 00:06:14,550
tagasi, kui string edasi
aastal ei sisalda kõiki numbreid.

108
00:06:14,550 --> 00:06:16,950
>> Nüüd, et me oleme saanud
võti, järgmine samm

109
00:06:16,950 --> 00:06:19,430
on saada polegi kasutaja.

110
00:06:19,430 --> 00:06:21,170
Nüüd, see saab
olla vähem keeruline

111
00:06:21,170 --> 00:06:23,410
kui navigeerimise ümber
käsurea argumente.

112
00:06:23,410 --> 00:06:26,190
Kõik me peame tegema, on kõne
getString funktsiooni

113
00:06:26,190 --> 00:06:29,660
ajendab kasutaja anda
meil string, kuid pea meeles,

114
00:06:29,660 --> 00:06:34,090
kontrollida kirjeldused, kuidas me
Võiksid palub kasutajal selle eest.

115
00:06:34,090 --> 00:06:36,420
>> Nüüd jõuame
süda problem--

116
00:06:36,420 --> 00:06:38,860
kuidas šifreerimine avateksti.

117
00:06:38,860 --> 00:06:42,830
Noh, esiteks, räägime, kuidas
kuni šifreerimine üks täht korraga,

118
00:06:42,830 --> 00:06:47,370
ja siis me tegeleda kuidas
itereerima kogu polegi.

119
00:06:47,370 --> 00:06:50,440
Olen kirjutanud mõned pseudokoodi
Caesar probleem.

120
00:06:50,440 --> 00:06:52,310
Ma kutsun teid üles
kirjutada oma samuti.

121
00:06:52,310 --> 00:06:55,900
See ei pruugi otsida identne
minu, ja see on OK, kuid nii kaua

122
00:06:55,900 --> 00:06:58,640
kui üldise idee on sama.

123
00:06:58,640 --> 00:07:00,780
>> Esimesed kolm etappi
me oleme juba teinud.

124
00:07:00,780 --> 00:07:03,100
Oleme saanud võti
käsurea argumenti,

125
00:07:03,100 --> 00:07:05,510
oleme välja, et võti
arvesse täisarv, ja me oleme

126
00:07:05,510 --> 00:07:09,320
küsitakse kasutaja jaoks polegi
et nad tahavad šifreerimine.

127
00:07:09,320 --> 00:07:12,420
Nii siis järgmine suure tüki
on see, et iga märk

128
00:07:12,420 --> 00:07:15,070
et polegi string,
kas see on tähestikuline,

129
00:07:15,070 --> 00:07:17,750
me tahame säilitada
oma seisukohad ja nihutades.

130
00:07:17,750 --> 00:07:20,900
Autor säilitada juhul, mida ma
tähenda see, et kõik suurtähed

131
00:07:20,900 --> 00:07:23,580
tähed peaks jääma ülemise
juhul ja kõik väiketähed

132
00:07:23,580 --> 00:07:25,640
peaks jääma väiketähed.

133
00:07:25,640 --> 00:07:29,110
Nii siis pärast muudame need,
siis prinditakse ciphertext.

134
00:07:29,110 --> 00:07:33,100
>> Siin on kolm funktsiooni, mis hakkavad
et tulevad mugav selles probleemi.

135
00:07:33,100 --> 00:07:38,010
Pea meeles, kuni eespool, kui ma andsin
Näiteks nihkub see on CS50?

136
00:07:38,010 --> 00:07:41,800
Pea meeles, et 50 ja
hüüumärk ei suunata?

137
00:07:41,800 --> 00:07:45,680
Niisiis, kuidas me saame öelda, kas me
pead minema kirja või mitte?

138
00:07:45,680 --> 00:07:48,650
Noh, "on alfa," kui
te kaotate seda iseloomu,

139
00:07:48,650 --> 00:07:54,850
naaseb tõsi, kui see tegelane
on kirjas ja vale teisiti.

140
00:07:54,850 --> 00:07:56,870
Et aidata teil
säilitades kapitalisatsiooni

141
00:07:56,870 --> 00:07:59,750
on funktsioonid "on
ülemine "ja" on väiksem. "

142
00:07:59,750 --> 00:08:03,350
>> Need kaks funktsiooni võtta ka
ühes iseloomu sisend

143
00:08:03,350 --> 00:08:06,580
ja sind tagasi Boole'i,
kas õige või vale

144
00:08:06,580 --> 00:08:11,280
sõltuvalt sellest, kas see märk
on suur- või väiketähed.

145
00:08:11,280 --> 00:08:14,610
Kuna "on ülemine" ja "on
väiksem "on Boole'i ​​funktsioonid,

146
00:08:14,610 --> 00:08:18,660
mis tähendab, et nad sind tagasi Boole'i,
saate need oma tingimused.

147
00:08:18,660 --> 00:08:23,490
Nii et siin on koodilõiku, et ainult
prindib kirjas, kui see on suurtähtedega.

148
00:08:23,490 --> 00:08:27,790
Nii et ma olen deklareerinud oma iseloomu
kirja ülemises juhul Teed

149
00:08:27,790 --> 00:08:33,440
ja siis, kui "on ülemine" naaseb
tõsi, siis ma printida, et kirja.

150
00:08:33,440 --> 00:08:38,200
>> Tulles tagasi meie lihtne näide
nihutades tähestiku võti kaks,

151
00:08:38,200 --> 00:08:41,049
Kuidas me tegelikult saada, et töötada?

152
00:08:41,049 --> 00:08:45,770
Noh, selgub, et tähemärki
ja täisarvud on väga tihedalt seotud.

153
00:08:45,770 --> 00:08:48,840
Iga märk on
täisarvuni seotud

154
00:08:48,840 --> 00:08:53,260
kus see leidub ASCII tabel,
kus iga tegelase ASCII

155
00:08:53,260 --> 00:08:55,380
väärtus.

156
00:08:55,380 --> 00:08:58,940
Nii ülemine juhul A vastab
ASCII väärtus 65

157
00:08:58,940 --> 00:09:02,270
ja väiketähti A
ASCII väärtus 97.

158
00:09:02,270 --> 00:09:04,940
>> Julgelt otsida
mis tahes ASCII tabel Internetis

159
00:09:04,940 --> 00:09:07,720
näha neid väärtusi ise.

160
00:09:07,720 --> 00:09:12,096
Mida see tähendab, et saame
võta iseloomu suurtähtedega A,

161
00:09:12,096 --> 00:09:18,200
lisada täisarv kaks, ja siis saan
iseloomu suur- C tulemusena.

162
00:09:18,200 --> 00:09:23,720
Seda sellepärast, et 65 ASCII
hinna ja kapitali A, pluss 2

163
00:09:23,720 --> 00:09:29,960
annab meile 67, mis vastab
iseloomule suur- C.

164
00:09:29,960 --> 00:09:33,480
>> Kahjuks asjad
ei ole päris nii lihtne.

165
00:09:33,480 --> 00:09:36,980
Meil on võrrand, mis
peame kaaluma.

166
00:09:36,980 --> 00:09:43,590
Siin see ütleb meile, et nda ciphertext
kirja vastab nda polegi

167
00:09:43,590 --> 00:09:48,900
kirja, millele lisandub key--
kõik see, modulaarne 26.

168
00:09:48,900 --> 00:09:50,810
Miks on see nii?

169
00:09:50,810 --> 00:09:55,430
Lähme tagasi meie näite
Enne, kus kapitali A, pluss 2

170
00:09:55,430 --> 00:09:57,590
annab meile kapitali C.

171
00:09:57,590 --> 00:10:01,870
>> Nii kohaldades võrrand, mis
spetsifikatsioon annab meile,

172
00:10:01,870 --> 00:10:06,660
Seejärel võtame Kapitali vorm
pluss 2 ja mod, et 26.

173
00:10:06,660 --> 00:10:10,730
Nii kapitali A, kui ma panin selle
need jutumärkideta,

174
00:10:10,730 --> 00:10:14,010
võimaldab mul seda ravida
täisarv, nii et lahtrisse

175
00:10:14,010 --> 00:10:17,500
ma viskasin oma ASCII väärtus 65.

176
00:10:17,500 --> 00:10:20,080
65 plus 2 on 67.

177
00:10:20,080 --> 00:10:25,210
67 mod 26 annab meile 15
kuid see ei ole tegelikult

178
00:10:25,210 --> 00:10:32,590
mõtet, sest me teame, et
kapitali C ASCII väärtus on 67, mitte 15.

179
00:10:32,590 --> 00:10:35,580
Niisiis, kuidas me sobitada seda?

180
00:10:35,580 --> 00:10:39,840
>> Noh, siin ma tahaks posit
mõiste tähestikuline indeks.

181
00:10:39,840 --> 00:10:44,010
Nii et me oleme juba rääkinud, kuidas
Iga märk on oma ASCII väärtus,

182
00:10:44,010 --> 00:10:48,810
aga ma tahaks öelda, noh, olgem
mõelda iga märk oleks ka

183
00:10:48,810 --> 00:10:52,230
tähestikregister,
kus A näiteks

184
00:10:52,230 --> 00:10:58,800
kui esimene täht,
on tähestikuline indeks null.

185
00:10:58,800 --> 00:11:02,070
Vaatame nüüd kohaldada
Sama võrrandi nagu enne,

186
00:11:02,070 --> 00:11:05,040
kuid kasutades tähestikregistris.

187
00:11:05,040 --> 00:11:07,810
>> Nii on null, sest me oleme määratletud.

188
00:11:07,810 --> 00:11:15,640
Nii siis võttes null pluss kaks, mod 26,
see on kaks, mod 26, mis annab meile kaks.

189
00:11:15,640 --> 00:11:18,780
Ja noh, nii
tähestikregister,

190
00:11:18,780 --> 00:11:23,930
C on kolmas täht
tähestiku, nii et see vastaks

191
00:11:23,930 --> 00:11:26,290
kuni tähestikuline indeks kaks.

192
00:11:26,290 --> 00:11:29,850
Seega tundub, et kasutades
tähestikregistris sel juhul

193
00:11:29,850 --> 00:11:32,840
tegelikult annab meile õige tulemuse.

194
00:11:32,840 --> 00:11:35,020
>> Nüüd oletame, kontrollige
vaata, kas võrrand tööd

195
00:11:35,020 --> 00:11:37,210
alfabeetiline indeks.

196
00:11:37,210 --> 00:11:42,540
Y tähestikregister 24 kui
eelviimases tähestiku tähe.

197
00:11:42,540 --> 00:11:46,520
Nii siis 24 pluss meie
võti kaks annab meile 26.

198
00:11:46,520 --> 00:11:54,750
26 mod 26 annab meile 0, mis õnneks
meil on tähestikregistris A.

199
00:11:54,750 --> 00:11:59,100
Loodetavasti see piisav tõestus, et
tähestikregistris meetod töötab.

200
00:11:59,100 --> 00:12:03,180
Kui ei, siis võid vabalt proovida
mõned näited oma.

201
00:12:03,180 --> 00:12:08,030
>> Et korralikult ümbritsev
tähestiku ja kohaldada Caesar võrrand,

202
00:12:08,030 --> 00:12:11,280
siis me teame, et me peame
tegeleda tähestikulises indeksid.

203
00:12:11,280 --> 00:12:15,130
Aga alustame ASCII
väärtuste ja alles siis

204
00:12:15,130 --> 00:12:18,530
Kas me siis teisendada
tähestikregistris.

205
00:12:18,530 --> 00:12:23,970
Sealt et printida, peame
tegelema ASCII väärtused uuesti.

206
00:12:23,970 --> 00:12:28,350
Seega peame välja mõtlema, kuidas
minna ASCII alfabeetiline

207
00:12:28,350 --> 00:12:31,080
ja tähestikulises ASCII.

208
00:12:31,080 --> 00:12:34,910
>> Nii et ma jätan teile välja mõtlema
muster vahel märk

209
00:12:34,910 --> 00:12:38,590
ja selle tähestikulises
indeks ja selle ASCII väärtus.

210
00:12:38,590 --> 00:12:41,530
Nüüd, pea meeles, et kuigi
Selle tabeli paremas slaidile

211
00:12:41,530 --> 00:12:45,630
näitab suurtähtedega, me ka
pead arvestama, kas

212
00:12:45,630 --> 00:12:48,915
teistsugusteks kehtib
jaoks väiketähed.

213
00:12:48,915 --> 00:12:52,070

214
00:12:52,070 --> 00:12:55,840
>> Nüüd, et me oleme aru saanud
kuidas suunata ühe märgi,

215
00:12:55,840 --> 00:13:02,200
siis kõik me peame tegema, on skaala, mis
üles minna kogu polegi.

216
00:13:02,200 --> 00:13:04,260
Nii polegi on string.

217
00:13:04,260 --> 00:13:08,210
Lucky meile, string on tõesti
lihtsalt massiivi märke,

218
00:13:08,210 --> 00:13:12,150
nii, et pääseda iga tegelane
string, kõik mida sa pead tegema

219
00:13:12,150 --> 00:13:14,270
on kasutada hulgaliselt märke.

220
00:13:14,270 --> 00:13:20,270
Ütle mul tüüpi muutuja
string nimega "text =" See on CS50. "

221
00:13:20,270 --> 00:13:22,730
>> Noh, siis selleks, et
pääseda iga märk,

222
00:13:22,730 --> 00:13:25,880
kõik, mis mul pistmist
muutuja tekst on

223
00:13:25,880 --> 00:13:31,660
öelda ka, teksti indeks null, et
vastab kapitali T. Tekst on indeks

224
00:13:31,660 --> 00:13:35,100
üks vastab väiketähti h.

225
00:13:35,100 --> 00:13:38,110
Veel üks kasulik funktsioon on
stringi pikkuse funktsioon.

226
00:13:38,110 --> 00:13:40,760
Nii kulgeb stringi
et funktsioon tagastab

227
00:13:40,760 --> 00:13:44,610
täisarv, pikkus, et string.

228
00:13:44,610 --> 00:13:47,060
>> Nüüd, kui oleme rääkinud
kõik need erinevad elemendid,

229
00:13:47,060 --> 00:13:48,540
paneme need tagasi kokku.

230
00:13:48,540 --> 00:13:52,210
Nii tagasi kas minu pseudokoodi
kood või oma pseudokoodi

231
00:13:52,210 --> 00:13:55,920
ja minna läbi ja veenduge, et teil
tea, kuidas seda teha iga asi.

232
00:13:55,920 --> 00:14:01,520
Kuidas võti kasutades Argc ja argv,
keerates võtme täisarv, et

233
00:14:01,520 --> 00:14:06,840
i, küsimata polegi,
getString ja seejärel iterating

234
00:14:06,840 --> 00:14:09,590
üle iga märk
avateksti string,

235
00:14:09,590 --> 00:14:14,910
säilitades puhul iga märk
ja suunates selle sümbol võti,

236
00:14:14,910 --> 00:14:17,520
tagades, et sa oled
ümbritsedes tähestikku,

237
00:14:17,520 --> 00:14:20,850
Lõpuks trükivajaduste ciphertext.

238
00:14:20,850 --> 00:14:25,470
Minu nimi on Amila, ja see oli Caesar.

239
00:14:25,470 --> 00:14:28,448

