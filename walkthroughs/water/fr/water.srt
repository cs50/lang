1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,960
ENCEINTE 1: Parlons de l'eau.

3
00:00:01,960 --> 00:00:07,280
Dans ce problème, nous demandons à l'utilisateur de dire
nous combien de temps en minutes de leur douche était

4
00:00:07,280 --> 00:00:11,040
puis on calcule l'équivalent
nombre de bouteilles d'eau

5
00:00:11,040 --> 00:00:12,970
que leur douche utilisée.

6
00:00:12,970 --> 00:00:16,379
>> Alors, quelles sont nos choses à faire
pour ce problème?

7
00:00:16,379 --> 00:00:20,050
Tout d'abord, nous allons vouloir
pour inviter et puis validez

8
00:00:20,050 --> 00:00:22,100
l'entrée que l'utilisateur nous donne.

9
00:00:22,100 --> 00:00:24,790
Une fois que nous nous assurons que nous
ont l'entrée d'utilisateur valide,

10
00:00:24,790 --> 00:00:28,230
nous allons calculer la
nombre équivalent de bouteilles d'eau

11
00:00:28,230 --> 00:00:30,770
que l'utilisateur avait lors
leur douche, puis nous sommes

12
00:00:30,770 --> 00:00:33,720
allez leur dire par
l'impression de ce numéro.

13
00:00:33,720 --> 00:00:37,230
>> Donc, nous allons aborder notre premier
tâche, ce qui incite et valider

14
00:00:37,230 --> 00:00:38,550
l'entrée d'utilisateur.

15
00:00:38,550 --> 00:00:40,910
Pour cela, nous avons écrit un
fonction pour que vous avez appelé

16
00:00:40,910 --> 00:00:43,950
get_int situé dans la Bibliothèque CS50.

17
00:00:43,950 --> 00:00:48,710
get_int garantit que les entrées de l'utilisateur
un nombre entier, de sorte que toute les nombres positifs,

18
00:00:48,710 --> 00:00:51,700
les nombres négatifs, ou
zéro sont acceptées.

19
00:00:51,700 --> 00:00:55,900
Mais si l'utilisateur entre autre chose,
de sorte que toute combinaison de lettres ou de chiffres

20
00:00:55,900 --> 00:00:59,710
ou des nombres décimaux, le
utilisateur sera invité à réessayer

21
00:00:59,710 --> 00:01:04,319
et la fonction ne sera pas accepter quoi que ce soit
jusqu'à ce que l'utilisateur leur donne un entier.

22
00:01:04,319 --> 00:01:06,410
>> Alors, comment nous utilisons get_int?

23
00:01:06,410 --> 00:01:10,830
Si vous ouvrez votre espace de travail et
créer un fichier nommé entier.c nous allons

24
00:01:10,830 --> 00:01:12,110
tapez la commande suivante.

25
00:01:12,110 --> 00:01:14,760
Hashtag comprennent cs50.h.

26
00:01:14,760 --> 00:01:18,480
Ceci est nécessaire parce que get_int
est une fonction de bibliothèque CS50,

27
00:01:18,480 --> 00:01:21,890
nous devons donc inclure hashtag
sa déclaration pour

28
00:01:21,890 --> 00:01:23,370
d'utiliser la fonction.

29
00:01:23,370 --> 00:01:26,570
Et puis, dans mon principal
Fonction Je vais juste

30
00:01:26,570 --> 00:01:29,560
simplement appeler la fonction get_int.

31
00:01:29,560 --> 00:01:31,750
>> Donc, nous allons exécuter cela et voir comment cela fonctionne.

32
00:01:31,750 --> 00:01:35,092
Je l'ai déjà compilé, afin de laisser
juste aller de l'avant et exécuter ce programme,

33
00:01:35,092 --> 00:01:36,480
./entier.

34
00:01:36,480 --> 00:01:39,880
Ici, j'ai une invite et
voici où je saisir la valeur.

35
00:01:39,880 --> 00:01:44,880
Disons que je mets dans juste un entier,
50, les excepts et quitte programme

36
00:01:44,880 --> 00:01:45,960
et c'est ça.

37
00:01:45,960 --> 00:01:49,350
>> Mais dis que je le lance à nouveau et
Je entrée autre chose.

38
00:01:49,350 --> 00:01:51,350
Peut-être, bonjour monde.

39
00:01:51,350 --> 00:01:55,660
Ce n'est pas un nombre entier de sorte que le
programme me demandera de réessayer.

40
00:01:55,660 --> 00:01:59,160
Essayons à nouveau avec
peut-être un nombre décimal cette fois.

41
00:01:59,160 --> 00:02:03,450
0,5, encore une fois, pas un entier afin
le programme ne sera pas l'accepter

42
00:02:03,450 --> 00:02:05,290
et il va me dire de réessayer.

43
00:02:05,290 --> 00:02:07,070
Donc, nous allons lui donner un autre numéro.

44
00:02:07,070 --> 00:02:09,830
Le programme accepte,
quittes, et nous avons terminé.

45
00:02:09,830 --> 00:02:13,520
>> Alors maintenant, nous avons une fonction
qui nous permet et assure

46
00:02:13,520 --> 00:02:16,790
que l'utilisateur saisit un
entier, mais comment pouvons-nous

47
00:02:16,790 --> 00:02:20,330
effectivement garder une trace de la
entier entré par l'utilisateur?

48
00:02:20,330 --> 00:02:25,260
Eh bien, tout ce que nous ferons est un magasin
cette valeur dans une variable, disons n.

49
00:02:25,260 --> 00:02:30,580
Donc, si je déclare un entier n,
et je mets cette valeur à get_int,

50
00:02:30,580 --> 00:02:34,700
alors n sera ensuite stocker quelque
la valeur de l'utilisateur entré.

51
00:02:34,700 --> 00:02:38,620
>> Très bien, alors maintenant nous avons veillé à ce que
l'utilisateur va nous donner un nombre entier

52
00:02:38,620 --> 00:02:42,550
et nous savons comment garder une trace
de l'entier, mais rappelez-vous,

53
00:02:42,550 --> 00:02:45,610
entiers sont à la fois positif et négatif.

54
00:02:45,610 --> 00:02:49,110
Donc, il n'a pas vraiment de sens
dans le contexte de ce problème

55
00:02:49,110 --> 00:02:53,570
que l'utilisateur prend une douche
de dire négatifs 12 minutes.

56
00:02:53,570 --> 00:02:59,310
Nous devons donc faire en sorte que l'utilisateur
nous donne effectivement un nombre entier positif.

57
00:02:59,310 --> 00:03:02,130
Maintenant, nous ne disposons pas juste un
fonction unique pour cela,

58
00:03:02,130 --> 00:03:04,620
de sorte que nous allons avoir
pour créer ce que nous-mêmes.

59
00:03:04,620 --> 00:03:07,190
>> Donc, nous voulons continuellement
invite l'utilisateur

60
00:03:07,190 --> 00:03:09,730
jusqu'à ce qu'ils nous donnent un nombre entier positif.

61
00:03:09,730 --> 00:03:14,300
Si je fais quelque chose en continu alors
qui est semblable à une boucle, une répétition.

62
00:03:14,300 --> 00:03:19,130
Donc, l'une des constructions que nous utilisons
à c pour mettre en œuvre la répétition et boucles

63
00:03:19,130 --> 00:03:20,410
est une boucle while.

64
00:03:20,410 --> 00:03:23,020
Donc, une boucle while, comme
montré ici, exécutera

65
00:03:23,020 --> 00:03:27,030
tout ce qui est dans le corps de la boucle que
tant que la condition évalue donné

66
00:03:27,030 --> 00:03:27,900
à true.

67
00:03:27,900 --> 00:03:30,640
Dès que cette condition
évalue à faux,

68
00:03:30,640 --> 00:03:34,830
le programme se déroulera à tout
vient après que le corps de la boucle.

69
00:03:34,830 --> 00:03:39,400
>> Ainsi, alors que les boucles vont
être vraiment utile dans CS50.

70
00:03:39,400 --> 00:03:42,590
Mais dans ce cas particulier
cas, nous savons que nous sommes

71
00:03:42,590 --> 00:03:48,140
va demander à l'utilisateur au moins
une fois, puis seulement en boucle si nécessaire.

72
00:03:48,140 --> 00:03:51,080
Donc, ici nous arrivons à un
construction spéciale et c'est

73
00:03:51,080 --> 00:03:55,020
très similaire au temps
boucle appelée une boucle do-while.

74
00:03:55,020 --> 00:03:58,840
>> Donc, une boucle do-while exécute la
corps de la boucle au moins une fois

75
00:03:58,840 --> 00:04:01,750
puis il vérifie
si elle doit exécuter,

76
00:04:01,750 --> 00:04:05,310
par opposition à une boucle while,
qui va vérifier l'état

77
00:04:05,310 --> 00:04:07,200
puis exécuter le corps.

78
00:04:07,200 --> 00:04:11,880
Donc, dans une boucle do-tout ce que nous pourrions
faire est inviter l'utilisateur à un nombre entier,

79
00:04:11,880 --> 00:04:14,450
puis vérifier si elle est valide ou non.

80
00:04:14,450 --> 00:04:18,130
Si elle est valide, nous allons
répéter le processus demandant à l'utilisateur

81
00:04:18,130 --> 00:04:22,290
pour nous donner un autre entier, puis
seulement quand cet entier est valide,

82
00:04:22,290 --> 00:04:25,060
nous allons continuer à
tout ce qui vient après.

83
00:04:25,060 --> 00:04:28,030
>> Maintenant, vous remarquerez que la
déclaration de l'entier n

84
00:04:28,030 --> 00:04:31,670
est légèrement différent de ce que nous
fait avant dans l'exemple précédent

85
00:04:31,670 --> 00:04:33,640
et cela est à cause de la portée.

86
00:04:33,640 --> 00:04:37,920
Si nous avions déclaré l'entier n intérieur
du corps de la boucle do-temps,

87
00:04:37,920 --> 00:04:42,640
alors nous ne serions pas en mesure d'accéder
que la valeur de n en dehors de ceux bouclés

88
00:04:42,640 --> 00:04:45,050
croisillons indiquant le corps de la boucle.

89
00:04:45,050 --> 00:04:51,080
Mais nous ne voulons en fait d'accéder à la
valeur de n plus tard dans notre programme.

90
00:04:51,080 --> 00:04:55,730
>> OK, donc maintenant nous allons parler
ce que cette condition devrait être.

91
00:04:55,730 --> 00:05:00,400
Nous voulons seulement le reprompt
l'utilisateur aussi longtemps que n est invalide.

92
00:05:00,400 --> 00:05:04,640
Alors, pensez à vous-même ce qui invalide un
valeur entière ressemblerait

93
00:05:04,640 --> 00:05:08,060
et puis créer un booléen
expression pour exprimer cela.

94
00:05:08,060 --> 00:05:13,070
>> Nous avons presque terminé avec notre sous-tâche
d'inciter et de valider l'entrée utilisateur.

95
00:05:13,070 --> 00:05:16,010
Donc, nous allons faire cela un peu
peu plus convivial

96
00:05:16,010 --> 00:05:18,390
et donner un peu de l'utilisateur
peu plus d'informations

97
00:05:18,390 --> 00:05:20,510
de ce que nous sommes les incitant pour.

98
00:05:20,510 --> 00:05:24,500
Donc, nous allons demander à l'utilisateur, par le
spec, avec les minutes de chaîne.

99
00:05:24,500 --> 00:05:28,935
Donc, en utilisant vos instructions printf, faire
vous que vous correspondez exactement cela.

100
00:05:28,935 --> 00:05:30,230
>> D'accord.

101
00:05:30,230 --> 00:05:33,840
Nous avons donc maintenant un utilisateur valide
entrée, un nombre entier positif

102
00:05:33,840 --> 00:05:37,400
la valeur pour le nombre de minutes
ils ont passé dans la douche.

103
00:05:37,400 --> 00:05:41,300
Alors, quelle est la prochaine étape consiste à calculer
le nombre équivalent de bouteilles.

104
00:05:41,300 --> 00:05:45,250
Ce que nous allons faire ici pourrait
être très évident pour vous au premier abord,

105
00:05:45,250 --> 00:05:46,640
et c'est OK.

106
00:05:46,640 --> 00:05:49,320
Ce que nous voulons faire est de nous
veulent commencer à pratiquer

107
00:05:49,320 --> 00:05:53,810
l'idée de détecter des motifs et
développer des formules pour le problème.

108
00:05:53,810 --> 00:05:57,200
>> Donc, nous dit par la spécification
qu'une minute dans la douche

109
00:05:57,200 --> 00:05:59,960
est équivalente à environ
12 bouteilles d'eau.

110
00:05:59,960 --> 00:06:03,020
Alors deux minutes serait
équivalent à 24,

111
00:06:03,020 --> 00:06:05,850
et cinq minutes serait
équivalent à 60.

112
00:06:05,850 --> 00:06:08,390
Alors maintenant, si vous pensez
vous avez, puis nous allons

113
00:06:08,390 --> 00:06:10,390
voir si vous pouvez venir
avec un motif ou de formule

114
00:06:10,390 --> 00:06:14,990
pour exprimer si nous avons dit, n
minutes, combien de bouteilles d'eau

115
00:06:14,990 --> 00:06:17,930
cela serait-il exprimé en termes de n?

116
00:06:17,930 --> 00:06:20,680
>> Encore une fois, même si cela
pourrait être simple au premier abord,

117
00:06:20,680 --> 00:06:23,240
plus tard, quand nous arrivons à
des problèmes les plus compliqués

118
00:06:23,240 --> 00:06:26,360
nous allons vouloir entrer dans
la pratique consistant à identifier

119
00:06:26,360 --> 00:06:30,120
les modèles et les formules en développement
pour comprendre ces choses.

120
00:06:30,120 --> 00:06:33,450
>> En c vous avez accès à
des opérations arithmétiques standard,

121
00:06:33,450 --> 00:06:36,520
addition, soustraction,
multiplication et division.

122
00:06:36,520 --> 00:06:38,420
Donc, je vais laisser à
vous maintenant à comprendre

123
00:06:38,420 --> 00:06:41,300
comment exprimer la
nombre équivalent de bouteilles

124
00:06:41,300 --> 00:06:43,990
que l'utilisateur a consommé
pendant leur douche.

125
00:06:43,990 --> 00:06:45,700
>> Très bien, nous avons presque terminé.

126
00:06:45,700 --> 00:06:50,650
Nous avons incité les utilisateurs pour leur entrée,
nous avons veillé à ce que c'est entrée valide,

127
00:06:50,650 --> 00:06:53,330
puis nous avons compris comment
pour calculer l'équivalent

128
00:06:53,330 --> 00:06:55,480
nombre de bouteilles qu'ils consommaient.

129
00:06:55,480 --> 00:06:59,430
Donc la dernière chose à faire est de sortie
le nombre équivalent de bouteilles

130
00:06:59,430 --> 00:07:02,410
et nous espérons encourager
qu'ils conservent un peu d'eau.

131
00:07:02,410 --> 00:07:06,270
>> Restitution la valeur sera
une instruction printf.

132
00:07:06,270 --> 00:07:09,720
Si je voulais vous dire que je
avoir trois animaux de compagnie, par exemple,

133
00:07:09,720 --> 00:07:13,090
Je pourrais utiliser une instruction printf
qui ressemble à quelque chose comme ça.

134
00:07:13,090 --> 00:07:15,880
J'ai trois animaux de compagnie, et un nouveau
ligne pour belle mise en forme.

135
00:07:15,880 --> 00:07:17,880
>> Maintenant, nous ne voulons pas
simplement les choses de code dur.

136
00:07:17,880 --> 00:07:20,740
Dites le numéro de ma
animaux de compagnie change au fil du temps.

137
00:07:20,740 --> 00:07:25,080
Ensuite, je vais faire usage de
placeholders dans ma déclaration de printf.

138
00:07:25,080 --> 00:07:27,350
Alors, voici mon numéro est un entier.

139
00:07:27,350 --> 00:07:31,480
Donc, je vais faire un espace réservé
pour un entier en utilisant% i.

140
00:07:31,480 --> 00:07:33,930
Je vais écrire la chaîne,
puis après la chaîne

141
00:07:33,930 --> 00:07:38,000
Je vous écris une virgule, puis le
variables que je veux imprimer.

142
00:07:38,000 --> 00:07:42,730
Alors que la valeur sera imprimée
en lieu et place de cet espace réservé,% i.

143
00:07:42,730 --> 00:07:47,630
>> Vous pouvez utiliser des espaces réservés, comme
ainsi, pour les flotteurs avec un% f.

144
00:07:47,630 --> 00:07:50,420
Vous pouvez également avoir plusieurs
placeholders dans une chaîne.

145
00:07:50,420 --> 00:07:53,950
Par exemple, si je dois un certain nombre
des chiens et un certain nombre de chats,

146
00:07:53,950 --> 00:07:59,210
Je mets deux espaces réservés ici, puis
mes deux variables dans l'ordre respectif.

147
00:07:59,210 --> 00:08:03,130
>> Alors, maintenant que nous savons comment imprimer
les valeurs mémorisées dans des variables,

148
00:08:03,130 --> 00:08:06,030
la dernière chose à
faire est de veiller à ce que nous

149
00:08:06,030 --> 00:08:10,920
imprimer la valeur dans le format exact
indiqué dans la description.

150
00:08:10,920 --> 00:08:14,990
Avec cela, nous avons incité les
utilisateur et validé leur entrée.

151
00:08:14,990 --> 00:08:17,920
Nous avons ensuite calculé l'équivalent
nombre de bouteilles d'eau

152
00:08:17,920 --> 00:08:22,100
qu'ils consomment pendant leur douche,
et nous avons fourni en sortie que la valeur pour eux.

153
00:08:22,100 --> 00:08:24,440
Et donc, nous avons terminé l'eau.

154
00:08:24,440 --> 00:08:28,730
>> Mon nom est [? Zamila,?]
et cela est CS50.

155
00:08:28,730 --> 00:08:29,909

