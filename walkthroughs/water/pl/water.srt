1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,960
Głośnik 1: Porozmawiajmy o wodzie.

3
00:00:01,960 --> 00:00:07,280
W tym problem, poproś użytkownika, aby powiedzieć
nam, jak długo w ciągu kilku minut ich prysznic był

4
00:00:07,280 --> 00:00:11,040
a następnie obliczyć ekwiwalent
liczba butelek wody

5
00:00:11,040 --> 00:00:12,970
że ich prysznic używany.

6
00:00:12,970 --> 00:00:16,379
>> Więc jakie są nasze do robić,
dla tego problemu?

7
00:00:16,379 --> 00:00:20,050
Po pierwsze, będziemy chcieli
z pytaniem, a następnie zatwierdź

8
00:00:20,050 --> 00:00:22,100
wejście, które użytkownik podaje nam.

9
00:00:22,100 --> 00:00:24,790
Gdy mamy pewność, że mamy
posiadają ważne dane wprowadzone przez użytkownika,

10
00:00:24,790 --> 00:00:28,230
jedziemy do obliczenia
równoważna ilość butelek wody

11
00:00:28,230 --> 00:00:30,770
aby użytkownik miał podczas
ich prysznic, a potem jesteśmy

12
00:00:30,770 --> 00:00:33,720
Powiesz im przez
drukując ten numer.

13
00:00:33,720 --> 00:00:37,230
>> Warto więc zająć nasz pierwszy
Zadanie, monitowania i walidacji

14
00:00:37,230 --> 00:00:38,550
wejście użytkownika.

15
00:00:38,550 --> 00:00:40,910
Do tego mamy napisane
Funkcja zadzwoniłeś

16
00:00:40,910 --> 00:00:43,950
get_int się w Bibliotece CS50.

17
00:00:43,950 --> 00:00:48,710
get_int zapewnia, że ​​dane wejściowe użytkownika
liczbą całkowitą, więc żadnych liczb dodatnich,

18
00:00:48,710 --> 00:00:51,700
Liczby ujemne, lub
wszystkie zera są akceptowane.

19
00:00:51,700 --> 00:00:55,900
Ale jeśli użytkownik wprowadza niczego innego,
więc dowolna kombinacja liter lub cyfr

20
00:00:55,900 --> 00:00:59,710
lub liczby dziesiętne, a następnie
użytkownik zostanie poproszony, aby ponowić próbę

21
00:00:59,710 --> 00:01:04,319
a funkcja nie zaakceptuje niczego
dopóki użytkownik nie daje im całkowitą.

22
00:01:04,319 --> 00:01:06,410
>> Więc jak używamy get_int?

23
00:01:06,410 --> 00:01:10,830
Jeśli otworzysz swoje miejsce pracy i
utwórz plik o nazwie integer.c niech

24
00:01:10,830 --> 00:01:12,110
wpisz następujące.

25
00:01:12,110 --> 00:01:14,760
Hashtag obejmują cs50.h.

26
00:01:14,760 --> 00:01:18,480
Jest to konieczne, ponieważ get_int
Jest to funkcja biblioteki CS50,

27
00:01:18,480 --> 00:01:21,890
więc musimy hashtag m.in.
jego oświadczenie w celu

28
00:01:21,890 --> 00:01:23,370
korzystanie z funkcji.

29
00:01:23,370 --> 00:01:26,570
A potem w moim głównym
funkcjonować Idę

30
00:01:26,570 --> 00:01:29,560
po prostu zadzwonić do get_int funkcyjny.

31
00:01:29,560 --> 00:01:31,750
>> Warto więc uruchomić to i zobaczyć, jak to działa.

32
00:01:31,750 --> 00:01:35,092
Ja już skompilowane, więc niech
po prostu iść do przodu i uruchomić ten program,

33
00:01:35,092 --> 00:01:36,480
./liczba całkowita.

34
00:01:36,480 --> 00:01:39,880
Tutaj mam szybka i
oto gdzie wejście I wartość.

35
00:01:39,880 --> 00:01:44,880
Say I umieścić w tylko niektóre liczby całkowitej,
50, excepts programu i kończy pracę

36
00:01:44,880 --> 00:01:45,960
i tyle.

37
00:01:45,960 --> 00:01:49,350
>> Ale powiedzieć, że go uruchomić ponownie i
I coś innego wejścia.

38
00:01:49,350 --> 00:01:51,350
Być może, hello world.

39
00:01:51,350 --> 00:01:55,660
To nie jest liczbą całkowitą, więc
Program poprosi mnie, aby ponowić próbę.

40
00:01:55,660 --> 00:01:59,160
Spróbujmy ponownie
Być może tym razem dziesiętną.

41
00:01:59,160 --> 00:02:03,450
0.5 znowu nie jest to liczba całkowita
program nie zaakceptuje go

42
00:02:03,450 --> 00:02:05,290
i będzie to powiedz mi, aby ponowić próbę.

43
00:02:05,290 --> 00:02:07,070
Więc dajmy mu kolejny numer.

44
00:02:07,070 --> 00:02:09,830
Program przyjmuje go,
zamykany, a skończymy.

45
00:02:09,830 --> 00:02:13,520
>> Więc teraz mamy funkcję
która pozwala nam i zapewnia

46
00:02:13,520 --> 00:02:16,790
które użytkownik wprowadza
całkowitą, ale jak możemy

47
00:02:16,790 --> 00:02:20,330
faktycznie śledzić
całkowita wprowadzane przez użytkownika?

48
00:02:20,330 --> 00:02:25,260
Cóż, zrobimy to sklep
ta wartość w zmiennej, powiedzmy n.

49
00:02:25,260 --> 00:02:30,580
Więc jeśli zadeklarować liczbę całkowitą n,
i ustawić tę wartość do get_int,

50
00:02:30,580 --> 00:02:34,700
to n będzie przechowywać cokolwiek
cenią użytkownikowi wprowadzonego.

51
00:02:34,700 --> 00:02:38,620
>> Dobrze, więc teraz mamy zapewnione, że
użytkownik dadzą nam całkowitą

52
00:02:38,620 --> 00:02:42,550
i wiemy, jak śledzić
liczby całkowitej, ale należy pamiętać,

53
00:02:42,550 --> 00:02:45,610
całkowitymi są zarówno pozytywne jak i negatywne.

54
00:02:45,610 --> 00:02:49,110
Więc to nie ma sensu
W związku z tym problemem

55
00:02:49,110 --> 00:02:53,570
że użytkownik bierze prysznic
powiedzmy negatywne 12 minut.

56
00:02:53,570 --> 00:02:59,310
Dlatego musimy się upewnić, że użytkownik
w rzeczywistości daje nam dodatnia.

57
00:02:59,310 --> 00:03:02,130
Teraz nie mamy tylko
jednofunkcyjny za to,

58
00:03:02,130 --> 00:03:04,620
więc będziemy mieć
stworzyć, że my sami.

59
00:03:04,620 --> 00:03:07,190
>> Dlatego chcemy, aby stale
poprosi użytkownika

60
00:03:07,190 --> 00:03:09,730
dopóki oni dają nam dodatnia.

61
00:03:09,730 --> 00:03:14,300
Jeśli robię coś ciągle następnie
to jest zbliżona do pętli, powtórzenia.

62
00:03:14,300 --> 00:03:19,130
Tak więc jednym z konstruktami, które wykorzystują
wc wdrożyć powtórzeń i pętle

63
00:03:19,130 --> 00:03:20,410
Jest to pętla while.

64
00:03:20,410 --> 00:03:23,020
Więc pętla while, jak
pokazano tutaj, będzie wykonywał

65
00:03:23,020 --> 00:03:27,030
co jest w korpusie pętlowe
Dopóki podanych analizuje schemat stan

66
00:03:27,030 --> 00:03:27,900
true.

67
00:03:27,900 --> 00:03:30,640
Jak tylko warunku
wartość false, a następnie

68
00:03:30,640 --> 00:03:34,830
program przejdzie do czegokolwiek
przychodzi po ciała pętli.

69
00:03:34,830 --> 00:03:39,400
>> Więc gdy pętle będą
być bardzo przydatny w CS50.

70
00:03:39,400 --> 00:03:42,590
Jednak w tym konkretnym
Sprawa, wiemy, że jesteśmy

71
00:03:42,590 --> 00:03:48,140
będzie monitować użytkownika co najmniej
tylko raz, a następnie w pętli, jeśli jest to konieczne.

72
00:03:48,140 --> 00:03:51,080
Tak oto dochodzimy do
Specjalna konstrukcja i to

73
00:03:51,080 --> 00:03:55,020
Bardzo podobny do chwili
Pętla nazywany pętli do-while.

74
00:03:55,020 --> 00:03:58,840
>> Więc pętli do-while wykonuje
ciało pętli przynajmniej raz

75
00:03:58,840 --> 00:04:01,750
a następnie sprawdza,
czy powinien on wykonać,

76
00:04:01,750 --> 00:04:05,310
w przeciwieństwie do pętli while
które będą sprawdzać stan

77
00:04:05,310 --> 00:04:07,200
a następnie wykonać ciało.

78
00:04:07,200 --> 00:04:11,880
Więc w pętli do-while, co może
zrobić to skłonić użytkownika do liczby całkowitej,

79
00:04:11,880 --> 00:04:14,450
a następnie sprawdzić, czy jest nieprawidłowy lub nie.

80
00:04:14,450 --> 00:04:18,130
Jeśli jest nieprawidłowy, wtedy będziemy
powtórzyć proces pytając użytkownika

81
00:04:18,130 --> 00:04:22,290
dać nam kolejną liczbę całkowitą, a następnie
jedynie wówczas, gdy całkowita jest ważna

82
00:04:22,290 --> 00:04:25,060
będziemy kontynuować
co przychodzi potem.

83
00:04:25,060 --> 00:04:28,030
>> Teraz można zauważyć, że
Oświadczenie o całkowitej n

84
00:04:28,030 --> 00:04:31,670
różni się nieco od tego, co
przedtem w poprzednim przykładzie

85
00:04:31,670 --> 00:04:33,640
a to ze względu na zakres.

86
00:04:33,640 --> 00:04:37,920
Gdybyśmy ogłosił całkowitą n wewnątrz
ciała pętli do-while,

87
00:04:37,920 --> 00:04:42,640
wtedy nie będzie w stanie uzyskać dostęp do
że wartość n poza tymi kręconymi

88
00:04:42,640 --> 00:04:45,050
szelki wskazujący ciała pętli.

89
00:04:45,050 --> 00:04:51,080
Ale w rzeczywistości chcą uzyskać dostęp do
Wartość n później w naszym programie.

90
00:04:51,080 --> 00:04:55,730
>> OK, więc teraz pomówmy o
co ten warunek powinien być.

91
00:04:55,730 --> 00:05:00,400
Chcemy tylko reprompt
użytkownik dopóki n jest nieprawidłowy.

92
00:05:00,400 --> 00:05:04,640
Więc myślę sobie, co za nieważne
Wartość całkowita będzie wyglądać

93
00:05:04,640 --> 00:05:08,060
a następnie utworzyć logiczną
Wyrażenie wyrazić to.

94
00:05:08,060 --> 00:05:13,070
>> Już prawie wykończone naszej podzadania
z monitowania i walidacji danych wprowadzanych przez użytkownika.

95
00:05:13,070 --> 00:05:16,010
Więc zróbmy to trochę
nieco bardziej przyjazny dla użytkownika

96
00:05:16,010 --> 00:05:18,390
i dają użytkownikowi trochę
Nieco więcej informacji

97
00:05:18,390 --> 00:05:20,510
z czym mamy co skłoniło ich do.

98
00:05:20,510 --> 00:05:24,500
Więc niech zapyta użytkownika, za
Spec, z minuty smyczkowych.

99
00:05:24,500 --> 00:05:28,935
Więc przy użyciu printf, aby
upewnić się, że to dokładnie takie same.

100
00:05:28,935 --> 00:05:30,230
>> W porządku.

101
00:05:30,230 --> 00:05:33,840
Więc teraz mamy ważny użytkownikowi
Wejście, dodatnia

102
00:05:33,840 --> 00:05:37,400
wart, ile minut
wydali pod prysznicem.

103
00:05:37,400 --> 00:05:41,300
Więc co dalej jest obliczenie
równoważna liczba butelek.

104
00:05:41,300 --> 00:05:45,250
Co zamierzamy zrobić tutaj może
być bardzo oczywiste dla Ciebie na początku,

105
00:05:45,250 --> 00:05:46,640
i to jest OK.

106
00:05:46,640 --> 00:05:49,320
To, co chcemy zrobić, to mamy
chce zacząć ćwiczyć

107
00:05:49,320 --> 00:05:53,810
pomysł wykrywania wzorców i
rozwijania formuły problemu.

108
00:05:53,810 --> 00:05:57,200
>> Więc powiedziano nam na spec
że jeden minut pod prysznicem

109
00:05:57,200 --> 00:05:59,960
odpowiada ok
12 butelek wody.

110
00:05:59,960 --> 00:06:03,020
Tak więc dwie minuty będzie
równoważne 24,

111
00:06:03,020 --> 00:06:05,850
i pięć minut będzie
jest równoważne 60.

112
00:06:05,850 --> 00:06:08,390
Więc teraz, jeśli myślisz
masz to, to niech

113
00:06:08,390 --> 00:06:10,390
sprawdzić, czy można wymyślić
o wzorze lub o wzorze

114
00:06:10,390 --> 00:06:14,990
wyrazić, jeśli mamy mówić, n
minut, ile butelek wody

115
00:06:14,990 --> 00:06:17,930
byłoby to wyrażone w N?

116
00:06:17,930 --> 00:06:20,680
>> Ponownie, chociaż
Może być proste na pierwszy,

117
00:06:20,680 --> 00:06:23,240
później, gdy mamy do
bardziej skomplikowane problemy

118
00:06:23,240 --> 00:06:26,360
będziemy chcieli dostać się do
praktyka identyfikacji

119
00:06:26,360 --> 00:06:30,120
wzory i formuły rozwijające
zrozumieć te rzeczy.

120
00:06:30,120 --> 00:06:33,450
>> W c masz dostęp do
standardowe operacje arytmetyczne,

121
00:06:33,450 --> 00:06:36,520
dodawanie, odejmowanie,
mnożenie i dzielenie.

122
00:06:36,520 --> 00:06:38,420
Więc zostawię go
Teraz, aby dowiedzieć się,

123
00:06:38,420 --> 00:06:41,300
Jak wyrazić
równoważna ilość butelek

124
00:06:41,300 --> 00:06:43,990
że użytkownik spożywane
podczas prysznica.

125
00:06:43,990 --> 00:06:45,700
>> Dobra, mamy już prawie gotowe.

126
00:06:45,700 --> 00:06:50,650
Mamy monit z pytaniem o ich wejściu,
mamy zapewnione, że to ważne wejście,

127
00:06:50,650 --> 00:06:53,330
a potem już zorientowali się, jak
obliczyć równoważną

128
00:06:53,330 --> 00:06:55,480
ilość butelek, które są spożywane.

129
00:06:55,480 --> 00:06:59,430
Więc ostatnią rzeczą do zrobienia jest wyjściem
równoważna ilość butelek

130
00:06:59,430 --> 00:07:02,410
i zachęci
im oszczędzać wodę.

131
00:07:02,410 --> 00:07:06,270
>> Wyprowadzanie wartość będzie
być oświadczenie printf.

132
00:07:06,270 --> 00:07:09,720
Gdybym chciał powiedzieć, że
trzy zwierzęta, na przykład,

133
00:07:09,720 --> 00:07:13,090
Mógłbym użyć instrukcji printf
który wygląda mniej więcej tak.

134
00:07:13,090 --> 00:07:15,880
Mam trzy zwierzęta, a nowy
Linia do ładnej formatowania.

135
00:07:15,880 --> 00:07:17,880
>> Teraz nie chcą
po prostu rzeczy trudne kodu.

136
00:07:17,880 --> 00:07:20,740
Wypowiedz numer mojego
zwierzaki zmienia się w czasie.

137
00:07:20,740 --> 00:07:25,080
Potem idę do wykorzystania
zastępcze w mojej instrukcji printf.

138
00:07:25,080 --> 00:07:27,350
Więc oto mój numer jest liczbą całkowitą.

139
00:07:27,350 --> 00:07:31,480
Więc mam zamiar zrobić zastępczy
dla liczb całkowitych przy użyciu% I.

140
00:07:31,480 --> 00:07:33,930
Zamierzam napisać ciąg,
a następnie po napisu

141
00:07:33,930 --> 00:07:38,000
Piszę przecinek a potem
zmienna, że ​​chcesz wydrukować.

142
00:07:38,000 --> 00:07:42,730
Tak, że wartość zostanie wydrukowany
zamiast tego zastępczego,% I.

143
00:07:42,730 --> 00:07:47,630
>> Można użyć zastępczych, jak
Cóż, dla pływaków z% f.

144
00:07:47,630 --> 00:07:50,420
Można też mieć wiele
zastępcze w ciągu.

145
00:07:50,420 --> 00:07:53,950
Na przykład, jeśli mam jakiś numer
psów i pewnej liczby kotów

146
00:07:53,950 --> 00:07:59,210
Włożyłem dwa zastępcze tutaj, a następnie
moje dwie zmienne w odpowiedniej kolejności.

147
00:07:59,210 --> 00:08:03,130
>> Więc teraz, że wiemy, jak wydrukować
wartości przechowywane w zmiennych,

148
00:08:03,130 --> 00:08:06,030
bardzo Ostatnią rzeczą do
zrobić, to zapewnić, że

149
00:08:06,030 --> 00:08:10,920
drukować wartość w dokładny format
wskazany w specyfikacji.

150
00:08:10,920 --> 00:08:14,990
Z tym, jakie skłoniły
użytkownika i zatwierdzone swój wkład.

151
00:08:14,990 --> 00:08:17,920
Mamy wówczas wyliczyć ekwiwalent
liczba butelek wody

152
00:08:17,920 --> 00:08:22,100
które zużywają się podczas prysznicem,
a my wyprowadzane tę wartość do nich.

153
00:08:22,100 --> 00:08:24,440
I tak, mamy wypełniony wodą.

154
00:08:24,440 --> 00:08:28,730
>> Nazywam się [? Zamila,?]
i jest CS50.

155
00:08:28,730 --> 00:08:29,909

