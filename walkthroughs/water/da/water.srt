1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,960
SPEAKER 1: Lad os tale om vand.

3
00:00:01,960 --> 00:00:07,280
I dette problem, beder vi brugeren til at fortælle
os, hvor længe i minuttet deres bruser var

4
00:00:07,280 --> 00:00:11,040
og så beregner vi den tilsvarende
antal flasker vand

5
00:00:11,040 --> 00:00:12,970
at deres bruser anvendes.

6
00:00:12,970 --> 00:00:16,379
>> Så hvad er vores to-do 's
til dette problem?

7
00:00:16,379 --> 00:00:20,050
Først vil vi ønsker
til omgående og derefter validere

8
00:00:20,050 --> 00:00:22,100
input, som brugeren giver os.

9
00:00:22,100 --> 00:00:24,790
Når vi sikre, at vi
har gyldig bruger input,

10
00:00:24,790 --> 00:00:28,230
vi kommer til at beregne
tilsvarende antal flasker vand

11
00:00:28,230 --> 00:00:30,770
at brugeren havde under
deres bruser, og så er vi

12
00:00:30,770 --> 00:00:33,720
vil fortælle dem ved
udprintning af dette nummer.

13
00:00:33,720 --> 00:00:37,230
>> Så lad os tage fat vores første
opgave, hvilket fik og validering

14
00:00:37,230 --> 00:00:38,550
brugerinput.

15
00:00:38,550 --> 00:00:40,910
Til dette har vi skrevet en
funktion for du kaldte

16
00:00:40,910 --> 00:00:43,950
get_int placeret i CS50 Library.

17
00:00:43,950 --> 00:00:48,710
get_int sikrer, at brugeren indgange
et helt tal, så eventuelle positive tal,

18
00:00:48,710 --> 00:00:51,700
negative tal, eller
nul accepteres.

19
00:00:51,700 --> 00:00:55,900
Men hvis brugeren indlæser noget andet,
så en kombination af bogstaver eller tal

20
00:00:55,900 --> 00:00:59,710
eller decimaltal, så
Brugeren bliver bedt om at prøve igen

21
00:00:59,710 --> 00:01:04,319
og funktionen vil ikke acceptere noget
indtil brugeren giver dem et heltal.

22
00:01:04,319 --> 00:01:06,410
>> Så hvordan bruger vi get_int?

23
00:01:06,410 --> 00:01:10,830
Hvis du åbner dit arbejdsområde og
oprette en fil med navnet integer.c lad os

24
00:01:10,830 --> 00:01:12,110
skrive følgende.

25
00:01:12,110 --> 00:01:14,760
Hashtag omfatter cs50.h.

26
00:01:14,760 --> 00:01:18,480
Dette er nødvendigt, fordi get_int
er en CS50 bibliotek funktion,

27
00:01:18,480 --> 00:01:21,890
så vi må hashtag indeholde
sin erklæring for

28
00:01:21,890 --> 00:01:23,370
at anvende funktionen.

29
00:01:23,370 --> 00:01:26,570
Og så i min vigtigste
fungere jeg bare

30
00:01:26,570 --> 00:01:29,560
til blot at kalde funktionen get_int.

31
00:01:29,560 --> 00:01:31,750
>> Så lad os køre dette og se, hvordan det fungerer.

32
00:01:31,750 --> 00:01:35,092
Jeg har allerede kompileret det, så lad os
bare gå videre og køre dette program,

33
00:01:35,092 --> 00:01:36,480
./integer.

34
00:01:36,480 --> 00:01:39,880
Her har jeg en hurtig og
her er, hvor jeg input værdien.

35
00:01:39,880 --> 00:01:44,880
Sig Jeg sætter i blot nogle heltal,
50, programmet excepts og kvit

36
00:01:44,880 --> 00:01:45,960
og det er det.

37
00:01:45,960 --> 00:01:49,350
>> Men siger jeg køre det igen og
Jeg input noget andet.

38
00:01:49,350 --> 00:01:51,350
Måske, hej verden.

39
00:01:51,350 --> 00:01:55,660
Det er ikke et heltal så
Programmet vil bede mig om at prøve igen.

40
00:01:55,660 --> 00:01:59,160
Lad os prøve igen med
måske en decimal denne gang.

41
00:01:59,160 --> 00:02:03,450
0,5, igen, ikke er et heltal, så
programmet vil ikke acceptere det

42
00:02:03,450 --> 00:02:05,290
og det vil fortælle mig at prøve igen.

43
00:02:05,290 --> 00:02:07,070
Så lad os give det et andet nummer.

44
00:02:07,070 --> 00:02:09,830
Programmet accepterer det,
afsluttes, og vi er færdige.

45
00:02:09,830 --> 00:02:13,520
>> Så nu har vi en funktion
der giver os og sikrer

46
00:02:13,520 --> 00:02:16,790
at brugeren indlæser en
heltal, men hvordan kan vi

47
00:02:16,790 --> 00:02:20,330
faktisk holde styr på
heltal indlæst af brugeren?

48
00:02:20,330 --> 00:02:25,260
Nå, alt vi vil gøre, er butik
denne værdi i en variabel, siger n.

49
00:02:25,260 --> 00:02:30,580
Så hvis jeg erklærer et heltal n,
og jeg indstille denne værdi til get_int,

50
00:02:30,580 --> 00:02:34,700
derefter n vil derefter gemme hvad
værdsætter brugeren indtastet.

51
00:02:34,700 --> 00:02:38,620
>> Okay, så nu har vi sikret, at
brugeren vil give os et heltal

52
00:02:38,620 --> 00:02:42,550
og vi ved, hvordan man holder styr
af heltal, men husk,

53
00:02:42,550 --> 00:02:45,610
heltal er både positive og negative.

54
00:02:45,610 --> 00:02:49,110
Så det giver ikke rigtig mening
i forbindelse med dette problem

55
00:02:49,110 --> 00:02:53,570
at brugeren tager et brusebad
af sige negative 12 minutter.

56
00:02:53,570 --> 00:02:59,310
Så vi skal sørge for, at brugeren
faktisk giver os et positivt heltal.

57
00:02:59,310 --> 00:03:02,130
Nu har vi ikke bare en
enkelt funktion for det,

58
00:03:02,130 --> 00:03:04,620
så vi bliver nødt til
at skabe den selv.

59
00:03:04,620 --> 00:03:07,190
>> Så vi ønsker til stadighed
bede brugeren

60
00:03:07,190 --> 00:03:09,730
indtil de giver os et positivt heltal.

61
00:03:09,730 --> 00:03:14,300
Hvis jeg laver noget hele tiden derefter
det er beslægtet med en løkke, en gentagelse.

62
00:03:14,300 --> 00:03:19,130
Så en af ​​de konstruktioner, som vi bruger
i c for at implementere gentagelser og sløjfer

63
00:03:19,130 --> 00:03:20,410
er et while-løkke.

64
00:03:20,410 --> 00:03:23,020
Så en while-løkke, som
vist her, vil udføre

65
00:03:23,020 --> 00:03:27,030
uanset er i selve sløjfen som
længe de givne tilstand evaluerer

66
00:03:27,030 --> 00:03:27,900
til sand.

67
00:03:27,900 --> 00:03:30,640
Så snart denne betingelse
evalueres til falsk, så

68
00:03:30,640 --> 00:03:34,830
programmet vil fortsætte til hvad
kommer efter kroppen af ​​løkken.

69
00:03:34,830 --> 00:03:39,400
>> Så mens løkker vil
være virkelig nyttige i CS50.

70
00:03:39,400 --> 00:03:42,590
Men i dette særlige
tilfælde ved vi, at vi er

71
00:03:42,590 --> 00:03:48,140
kommer til at bede brugeren mindst
gang og derefter kun løkke om nødvendigt.

72
00:03:48,140 --> 00:03:51,080
Så her kommer vi til en
særlige konstruktion, og det er

73
00:03:51,080 --> 00:03:55,020
meget lig den, mens
loop kaldes en gør-while-løkke.

74
00:03:55,020 --> 00:03:58,840
>> Så en gør-while-løkke eksekverer
organ af løkken mindst én gang

75
00:03:58,840 --> 00:04:01,750
og så er det kontrollerer,
om det skal udføre,

76
00:04:01,750 --> 00:04:05,310
i modsætning til en while-løkke,
som vil kontrollere tilstanden

77
00:04:05,310 --> 00:04:07,200
og derefter udføre kroppen.

78
00:04:07,200 --> 00:04:11,880
Så i en gør-while-løkke, hvad vi kunne
gøre, er at bede brugeren om et heltal,

79
00:04:11,880 --> 00:04:14,450
og derefter kontrollere, om det er ugyldige eller ikke.

80
00:04:14,450 --> 00:04:18,130
Hvis det er ugyldigt, så vil vi
gentage processen spørger brugeren

81
00:04:18,130 --> 00:04:22,290
at give os en anden heltal, og derefter
Kun når denne heltal er gyldig,

82
00:04:22,290 --> 00:04:25,060
Vi vil fortsætte med at
hvad der kommer bagefter.

83
00:04:25,060 --> 00:04:28,030
>> Nu skal du lægge mærke til, at den
erklæring af heltal n

84
00:04:28,030 --> 00:04:31,670
er lidt anderledes end det, vi
gjorde før i det foregående eksempel

85
00:04:31,670 --> 00:04:33,640
og dette er på grund af anvendelsesområdet.

86
00:04:33,640 --> 00:04:37,920
Hvis vi havde erklæret heltal n inde
af kroppen af ​​gør-while-løkke,

87
00:04:37,920 --> 00:04:42,640
så ville vi ikke kunne få adgang til
at værdien af ​​n ud over disse krøllede

88
00:04:42,640 --> 00:04:45,050
seler hvilket organ af løkken.

89
00:04:45,050 --> 00:04:51,080
Men vi faktisk ønsker at få adgang til
Værdien af ​​n senere i vores program.

90
00:04:51,080 --> 00:04:55,730
>> OK, så lad os nu snakke om
hvad denne betingelse skal være.

91
00:04:55,730 --> 00:05:00,400
Vi ønsker at kun reprompt den
bruger, så længe n er ugyldig.

92
00:05:00,400 --> 00:05:04,640
Så tænk på dig selv, hvad en ugyldig
heltalsværdi ville se ud

93
00:05:04,640 --> 00:05:08,060
og derefter oprette en boolesk
udtryk for at udtrykke det.

94
00:05:08,060 --> 00:05:13,070
>> Vi er næsten færdige med vores delopgave
af at spørge og validering brugerinput.

95
00:05:13,070 --> 00:05:16,010
Så lad os gøre det lidt
lidt mere brugervenlig

96
00:05:16,010 --> 00:05:18,390
og give brugeren en lille
lidt mere information

97
00:05:18,390 --> 00:05:20,510
af, hvad vi beder dem om.

98
00:05:20,510 --> 00:05:24,500
Så lad os bede brugeren, pr
spec, med snor minutter.

99
00:05:24,500 --> 00:05:28,935
Så ved hjælp af dine printf udsagn, gør
sikker på, at du matche dette nøjagtigt.

100
00:05:28,935 --> 00:05:30,230
>> Okay.

101
00:05:30,230 --> 00:05:33,840
Så nu har vi en gyldig bruger
input, et positivt heltal

102
00:05:33,840 --> 00:05:37,400
værdi for hvor mange minutter
de tilbragte i bruseren.

103
00:05:37,400 --> 00:05:41,300
Så hvad bliver det næste er at beregne
det tilsvarende antal flasker.

104
00:05:41,300 --> 00:05:45,250
Hvad vi vil gøre her kunne
være meget indlysende for dig i første omgang,

105
00:05:45,250 --> 00:05:46,640
og det er OK.

106
00:05:46,640 --> 00:05:49,320
Det, vi ønsker, er at vi
ønsker at begynde at øve

107
00:05:49,320 --> 00:05:53,810
tanken om at afsløre mønstre og
udvikle formler for problemet.

108
00:05:53,810 --> 00:05:57,200
>> Så vi får at vide pr spec
at et minut i brusebadet

109
00:05:57,200 --> 00:05:59,960
svarer til ca.
12 flasker vand.

110
00:05:59,960 --> 00:06:03,020
Så to minutter ville
svare til 24,

111
00:06:03,020 --> 00:06:05,850
og fem minutter ville
svare til 60.

112
00:06:05,850 --> 00:06:08,390
Så nu, hvis du tror
du har fået det, så lad os

113
00:06:08,390 --> 00:06:10,390
se om du kan komme op
med et mønster eller formel

114
00:06:10,390 --> 00:06:14,990
at udtrykke hvis vi har sige, n
minutter, hvor mange flasker vand

115
00:06:14,990 --> 00:06:17,930
ville det blive udtrykt i n?

116
00:06:17,930 --> 00:06:20,680
>> Igen, selv om dette
kan være simpelt i starten,

117
00:06:20,680 --> 00:06:23,240
senere, når vi kommer til
mere komplicerede problemer

118
00:06:23,240 --> 00:06:26,360
vi kommer til at ønsker at komme ind
praksis med at identificere

119
00:06:26,360 --> 00:06:30,120
mønstre og udvikle formler
at regne disse ting ud.

120
00:06:30,120 --> 00:06:33,450
>> I c har du adgang til
standard aritmetiske operationer,

121
00:06:33,450 --> 00:06:36,520
addition, subtraktion,
multiplikation og division.

122
00:06:36,520 --> 00:06:38,420
Så jeg vil overlade det til
du nu at finde ud af

123
00:06:38,420 --> 00:06:41,300
hvordan man kan udtrykke det
tilsvarende antal flasker

124
00:06:41,300 --> 00:06:43,990
at brugeren forbrugt
under deres bruser.

125
00:06:43,990 --> 00:06:45,700
>> Okay, vi er næsten færdig.

126
00:06:45,700 --> 00:06:50,650
Vi har bedt brugeren om deres input,
Vi har sikret, at det er gyldigt input,

127
00:06:50,650 --> 00:06:53,330
og så har vi regnet ud, hvordan
til beregning

128
00:06:53,330 --> 00:06:55,480
antal flasker, de forbruges.

129
00:06:55,480 --> 00:06:59,430
Så den sidste ting at gøre, er at output
det tilsvarende antal flasker

130
00:06:59,430 --> 00:07:02,410
og forhåbentlig tilskynde
dem at bevare noget vand.

131
00:07:02,410 --> 00:07:06,270
>> Udlæsning værdien vil
være en printf erklæring.

132
00:07:06,270 --> 00:07:09,720
Hvis jeg ønskede at fortælle dig, at jeg
har tre dyr, for eksempel,

133
00:07:09,720 --> 00:07:13,090
Jeg kan bruge en printf erklæring
der ser noget som dette.

134
00:07:13,090 --> 00:07:15,880
Jeg har tre kæledyr, og en ny
linje for nice formatering.

135
00:07:15,880 --> 00:07:17,880
>> Nu ønsker vi ikke at
simpelthen hårdt kode ting.

136
00:07:17,880 --> 00:07:20,740
Sig antallet af min
kæledyr ændrer sig over tid.

137
00:07:20,740 --> 00:07:25,080
Så jeg har tænkt mig at gøre brug af
pladsholdere i mit printf erklæring.

138
00:07:25,080 --> 00:07:27,350
Så her mit nummer er et heltal.

139
00:07:27,350 --> 00:07:31,480
Så jeg har tænkt mig at lave en pladsholder
for et helt tal under anvendelse% i.

140
00:07:31,480 --> 00:07:33,930
Jeg har tænkt mig at skrive strengen,
og derefter efter strengen

141
00:07:33,930 --> 00:07:38,000
Jeg skriver et komma og derefter
variabel, jeg ønsker at udskrive.

142
00:07:38,000 --> 00:07:42,730
Således at værdien vil blive udskrevet
i stedet for at pladsholder,% i.

143
00:07:42,730 --> 00:07:47,630
>> Du kan bruge pladsholdere, som
godt, for flydende materiel med en% f.

144
00:07:47,630 --> 00:07:50,420
Du kan også få flere
pladsholdere i en streng.

145
00:07:50,420 --> 00:07:53,950
For eksempel, hvis jeg har nogle tal
af hunde og nogle antal katte,

146
00:07:53,950 --> 00:07:59,210
Jeg sætter to pladsholdere her og derefter
mine to variabler i respektive rækkefølge.

147
00:07:59,210 --> 00:08:03,130
>> Så nu, at vi ved, hvordan du udskriver
værdierne lagret i variable,

148
00:08:03,130 --> 00:08:06,030
den allersidste ting at
gøre, er at sikre, at vi

149
00:08:06,030 --> 00:08:10,920
udskrive værdien i præcis format
angivet i specifikationen.

150
00:08:10,920 --> 00:08:14,990
Med det har vi fået
bruger og valideret deres input.

151
00:08:14,990 --> 00:08:17,920
Vi har derefter beregnet tilsvarende
antal flasker vand

152
00:08:17,920 --> 00:08:22,100
at de forbruger i løbet af deres bruser,
og vi har udlæses, at værdi for dem.

153
00:08:22,100 --> 00:08:24,440
Og så har vi afsluttet vand.

154
00:08:24,440 --> 00:08:28,730
>> Mit navn er [? Zamila,?]
og dette er CS50.

155
00:08:28,730 --> 00:08:29,909

