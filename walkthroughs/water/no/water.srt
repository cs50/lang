1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,960
SPEAKER 1: La oss snakke om vann.

3
00:00:01,960 --> 00:00:07,280
I denne oppgaven, ber vi brukeren om å fortelle
oss hvor lang tid i minutter deres dusj var

4
00:00:07,280 --> 00:00:11,040
og da vi beregne tilsvar
antall flasker med vann

5
00:00:11,040 --> 00:00:12,970
at deres dusj brukt.

6
00:00:12,970 --> 00:00:16,379
>> Så hva er våre to-do 's
for dette problemet?

7
00:00:16,379 --> 00:00:20,050
Først skal vi ha
til å spørre og deretter validere

8
00:00:20,050 --> 00:00:22,100
inngangs at brukeren gir oss.

9
00:00:22,100 --> 00:00:24,790
Når vi sikre at vi
ha gyldig brukerundersøkelser,

10
00:00:24,790 --> 00:00:28,230
vi kommer til å beregne
tilsvarende antall flasker med vann

11
00:00:28,230 --> 00:00:30,770
at brukeren hadde under
deres dusj, og da er vi

12
00:00:30,770 --> 00:00:33,720
kommer til å fortelle dem ved
skrive ut dette nummeret.

13
00:00:33,720 --> 00:00:37,230
>> Så la oss takle vår første
oppgave, spørre og validere

14
00:00:37,230 --> 00:00:38,550
brukerundersøkelser.

15
00:00:38,550 --> 00:00:40,910
For dette har vi skrevet en
funksjon for deg som heter

16
00:00:40,910 --> 00:00:43,950
get_int ligger i CS50 biblioteket.

17
00:00:43,950 --> 00:00:48,710
get_int sikrer at brukeren innganger
et heltall, slik at eventuelle positive tall,

18
00:00:48,710 --> 00:00:51,700
negative tall, eller
null er alle akseptert.

19
00:00:51,700 --> 00:00:55,900
Men hvis brukeren innganger noe annet,
så hvilken som helst kombinasjon av bokstaver eller tall

20
00:00:55,900 --> 00:00:59,710
eller desimaltall, så
Brukeren vil bli bedt om å prøve på nytt

21
00:00:59,710 --> 00:01:04,319
og funksjonen vil ikke akseptere noe
inntil brukeren gir dem et helt tall.

22
00:01:04,319 --> 00:01:06,410
>> Så hvordan skal vi bruke get_int?

23
00:01:06,410 --> 00:01:10,830
Hvis du åpner din arbeidsplass og
opprette en fil som heter integer.c la oss

24
00:01:10,830 --> 00:01:12,110
skriver du inn følgende.

25
00:01:12,110 --> 00:01:14,760
Hashtag inkluderer cs50.h.

26
00:01:14,760 --> 00:01:18,480
Dette er nødvendig fordi get_int
er en CS50 bibliotek funksjon,

27
00:01:18,480 --> 00:01:21,890
så vi må hashtag inkludere
sin erklæring for

28
00:01:21,890 --> 00:01:23,370
å bruke funksjonen.

29
00:01:23,370 --> 00:01:26,570
Og så i min viktigste
fungere Jeg skal bare

30
00:01:26,570 --> 00:01:29,560
å bare kalle funksjonen get_int.

31
00:01:29,560 --> 00:01:31,750
>> Så la oss kjøre dette og se hvordan det fungerer.

32
00:01:31,750 --> 00:01:35,092
Jeg har allerede utarbeidet den, så la oss
bare gå videre og kjøre dette programmet,

33
00:01:35,092 --> 00:01:36,480
./integer.

34
00:01:36,480 --> 00:01:39,880
Her har jeg en rask og
her er der jeg inn verdien.

35
00:01:39,880 --> 00:01:44,880
Si at jeg satt i bare noen heltall,
50, program unntar og avsluttes

36
00:01:44,880 --> 00:01:45,960
og det er det.

37
00:01:45,960 --> 00:01:49,350
>> Men sier jeg kjøre den på nytt, og
Jeg innspill noe annet.

38
00:01:49,350 --> 00:01:51,350
Kanskje, hallo verden.

39
00:01:51,350 --> 00:01:55,660
Det er ikke et heltall slik at
Programmet vil be meg om å prøve på nytt.

40
00:01:55,660 --> 00:01:59,160
La oss prøve på nytt med
kanskje en desimal denne gangen.

41
00:01:59,160 --> 00:02:03,450
0,5, igjen, ikke er et heltall, så
programmet vil ikke akseptere det

42
00:02:03,450 --> 00:02:05,290
og det vil fortelle meg å prøve på nytt.

43
00:02:05,290 --> 00:02:07,070
Så la oss gi den et annet nummer.

44
00:02:07,070 --> 00:02:09,830
Programmet godtar det,
avsluttes, og vi er ferdige.

45
00:02:09,830 --> 00:02:13,520
>> Så nå har vi en funksjon
som tillater oss og sikrer

46
00:02:13,520 --> 00:02:16,790
at brukeren innganger en
heltall, men hvordan kan vi

47
00:02:16,790 --> 00:02:20,330
faktisk holde styr på
heltall lagt inn av brukeren?

48
00:02:20,330 --> 00:02:25,260
Vel, alt vi vil gjøre butikken
denne verdien i en variabel, sier n.

49
00:02:25,260 --> 00:02:30,580
Så hvis jeg erklære et heltall n,
og jeg setter denne verdien til get_int,

50
00:02:30,580 --> 00:02:34,700
deretter n vil da lagre hva
verds brukeren lagt inn.

51
00:02:34,700 --> 00:02:38,620
>> Greit, så nå har vi sørget for at
brukeren vil gi oss et heltall

52
00:02:38,620 --> 00:02:42,550
og vi vet hvordan å holde styr
av heltall, men husk,

53
00:02:42,550 --> 00:02:45,610
heltallene er både positiv og negativ.

54
00:02:45,610 --> 00:02:49,110
Så det ikke virkelig fornuftig
i forbindelse med dette problem

55
00:02:49,110 --> 00:02:53,570
at brukeren tar en dusj
av si negative 12 minutter.

56
00:02:53,570 --> 00:02:59,310
Så vi må sørge for at brukeren
faktisk gir oss et positivt heltall.

57
00:02:59,310 --> 00:03:02,130
Nå har vi ikke bare har et
enkelt funksjon for det,

58
00:03:02,130 --> 00:03:04,620
så vi kommer til å ha
for å skape den selv.

59
00:03:04,620 --> 00:03:07,190
>> Så vi ønsker å stadig
be brukeren

60
00:03:07,190 --> 00:03:09,730
før de gir oss et positivt heltall.

61
00:03:09,730 --> 00:03:14,300
Hvis jeg gjør noe hele tiden da
som er beslektet med en sløyfe, en repetisjon.

62
00:03:14,300 --> 00:03:19,130
Så en av de konstruksjoner som vi bruker
ic å gjennomføre repetisjon og sløyfer

63
00:03:19,130 --> 00:03:20,410
er en stund loop.

64
00:03:20,410 --> 00:03:23,020
Så en stund loop, som
vist her, vil utføre

65
00:03:23,020 --> 00:03:27,030
det som er i legemet av løkken så
lenge den gitte tilstanden evaluerer

66
00:03:27,030 --> 00:03:27,900
til sann.

67
00:03:27,900 --> 00:03:30,640
Så snart den betingelse
behandles som usann, så

68
00:03:30,640 --> 00:03:34,830
programmet vil fortsette til det
følger etter hoveddelen av løkken.

69
00:03:34,830 --> 00:03:39,400
>> Så mens løkker skal
være veldig nyttig i CS50.

70
00:03:39,400 --> 00:03:42,590
Men i dette spesielle
tilfellet, vet vi at vi er

71
00:03:42,590 --> 00:03:48,140
kommer til å be brukeren minst
en gang og deretter bare løkke hvis det er nødvendig.

72
00:03:48,140 --> 00:03:51,080
Så her kommer vi til en
spesiell konstruksjon, og det er

73
00:03:51,080 --> 00:03:55,020
meget lik den mens
sløyfe kalles en do-while-loop.

74
00:03:55,020 --> 00:03:58,840
>> Så en do-while-loop utfører
legeme av sløyfen minst en gang

75
00:03:58,840 --> 00:04:01,750
og da er det sjekker for å se
om den skal utføre,

76
00:04:01,750 --> 00:04:05,310
i motsetning til en stund sløyfe,
som vil sjekke tilstanden

77
00:04:05,310 --> 00:04:07,200
og deretter kjøre kroppen.

78
00:04:07,200 --> 00:04:11,880
Så i en do-while-loop hva vi kan
gjøre er å be brukeren om et heltall,

79
00:04:11,880 --> 00:04:14,450
og deretter sjekke om det er ugyldig eller ikke.

80
00:04:14,450 --> 00:04:18,130
Hvis det er ugyldig, så vi vil
gjenta prosessen ber brukeren

81
00:04:18,130 --> 00:04:22,290
å gi oss et annet heltall, og deretter
bare når det heltall er gyldig,

82
00:04:22,290 --> 00:04:25,060
vi vil fortsette å
det som kommer etterpå.

83
00:04:25,060 --> 00:04:28,030
>> Nå vil du legge merke til at
erklæring om heltallet n

84
00:04:28,030 --> 00:04:31,670
er litt annerledes enn hva vi
gjorde før i forrige eksempel

85
00:04:31,670 --> 00:04:33,640
og dette er på grunn av omfang.

86
00:04:33,640 --> 00:04:37,920
Hvis vi hadde erklært heltallet n inne
av kroppen av do-while loop,

87
00:04:37,920 --> 00:04:42,640
da vi ikke ville være i stand til å få tilgang
at verdien av n utenfor de krøllete

88
00:04:42,640 --> 00:04:45,050
seler som angir hoveddelen av løkken.

89
00:04:45,050 --> 00:04:51,080
Men vi gjør faktisk ønsker å få tilgang til
verdien av n senere i vårt program.

90
00:04:51,080 --> 00:04:55,730
>> OK, så nå la oss snakke om
hva denne tilstanden skal være.

91
00:04:55,730 --> 00:05:00,400
Vi ønsker å bare reprompt den
brukeren så lenge n er ugyldig.

92
00:05:00,400 --> 00:05:04,640
Så tenk deg selv hva en ugyldig
heltallsverdi ville se ut

93
00:05:04,640 --> 00:05:08,060
og deretter opprette en boolsk
uttrykk for å uttrykke det.

94
00:05:08,060 --> 00:05:13,070
>> Vi er nesten ferdig med vår deloppgave
av å spørre og validere brukerundersøkelser.

95
00:05:13,070 --> 00:05:16,010
Så la oss gjøre dette litt
litt mer brukervennlig

96
00:05:16,010 --> 00:05:18,390
og gi brukeren en liten
litt mer informasjon

97
00:05:18,390 --> 00:05:20,510
av det vi ber dem om.

98
00:05:20,510 --> 00:05:24,500
Så la oss be brukeren, per
spec, med streng minutter.

99
00:05:24,500 --> 00:05:28,935
Så ved hjelp av printf uttalelser, foreta
sikker på at du matche dette nøyaktig.

100
00:05:28,935 --> 00:05:30,230
>> Greit.

101
00:05:30,230 --> 00:05:33,840
Så nå har vi et gyldig brukernavn
input, et positivt heltall

102
00:05:33,840 --> 00:05:37,400
verdi for hvor mange minutter
de tilbrakte i dusjen.

103
00:05:37,400 --> 00:05:41,300
Så hva blir det neste er å beregne
den tilsvarende antall flasker.

104
00:05:41,300 --> 00:05:45,250
Hva vi skal gjøre her kan
være veldig tydelig for deg i starten,

105
00:05:45,250 --> 00:05:46,640
og det er OK.

106
00:05:46,640 --> 00:05:49,320
Det vi ønsker å gjøre er vi
ønsker å begynne å trene

107
00:05:49,320 --> 00:05:53,810
ideen om å detektere mønstre og
utvikle formler for problemet.

108
00:05:53,810 --> 00:05:57,200
>> Så vi får beskjed per spec
at ett minutt i dusjen

109
00:05:57,200 --> 00:05:59,960
tilsvarer om
12 flasker med vann.

110
00:05:59,960 --> 00:06:03,020
Så da to minutter ville
være ekvivalent til 24,

111
00:06:03,020 --> 00:06:05,850
og fem minutter ville
tilsvare 60.

112
00:06:05,850 --> 00:06:08,390
Så nå hvis du tror
du har det, så la oss

113
00:06:08,390 --> 00:06:10,390
se om du kan komme opp
med et mønster eller formelen

114
00:06:10,390 --> 00:06:14,990
å uttrykke om vi har si, n
minutter, hvor mange flasker med vann

115
00:06:14,990 --> 00:06:17,930
ville det komme til uttrykk i form av n?

116
00:06:17,930 --> 00:06:20,680
>> Igjen, selv om denne
kan være enkelt i starten,

117
00:06:20,680 --> 00:06:23,240
senere når vi kommer til
mer kompliserte problemer

118
00:06:23,240 --> 00:06:26,360
vi kommer til å ønske å komme inn
praksisen med å identifisere

119
00:06:26,360 --> 00:06:30,120
mønstre og utviklings formler
å finne ut disse tingene.

120
00:06:30,120 --> 00:06:33,450
>> I c har du tilgang til
standard aritmetiske operasjoner,

121
00:06:33,450 --> 00:06:36,520
addisjon, subtraksjon,
multiplikasjon og divisjon.

122
00:06:36,520 --> 00:06:38,420
Så jeg skal la det til
du nå å finne ut

123
00:06:38,420 --> 00:06:41,300
hvordan å uttrykke
tilsvarende antall flasker

124
00:06:41,300 --> 00:06:43,990
at brukeren forbrukes
under dusjen.

125
00:06:43,990 --> 00:06:45,700
>> Greit, vi nesten ferdig.

126
00:06:45,700 --> 00:06:50,650
Vi har bedt om at brukeren for deres innspill,
Vi har sørget for at det er gyldig input,

127
00:06:50,650 --> 00:06:53,330
og da har vi funnet ut hvordan
å beregne den ekvivalente

128
00:06:53,330 --> 00:06:55,480
antall flasker som de forbrukes.

129
00:06:55,480 --> 00:06:59,430
Så den siste tingen å gjøre er å sende ut
den tilsvarende antall flasker

130
00:06:59,430 --> 00:07:02,410
og forhåpentligvis oppmuntre
dem for å spare noe vann.

131
00:07:02,410 --> 00:07:06,270
>> Mate ut verdien vil
være en printf uttalelse.

132
00:07:06,270 --> 00:07:09,720
Hvis jeg ønsket å fortelle deg at jeg
har tre dyr, for eksempel,

133
00:07:09,720 --> 00:07:13,090
Jeg kan bruke en printf uttalelse
som ser omtrent slik ut.

134
00:07:13,090 --> 00:07:15,880
Jeg har tre dyr, og en ny
linje for hyggelig formatering.

135
00:07:15,880 --> 00:07:17,880
>> Nå ønsker vi ikke å
bare vanskelig kode ting.

136
00:07:17,880 --> 00:07:20,740
Si antall min
kjæledyr endrer seg over tid.

137
00:07:20,740 --> 00:07:25,080
Så jeg kommer til å gjøre bruk av
plassholdere i min printf uttalelse.

138
00:07:25,080 --> 00:07:27,350
Så her nummeret mitt er et heltall.

139
00:07:27,350 --> 00:07:31,480
Så jeg kommer til å gjøre en plassholder
for et heltall bruker% i.

140
00:07:31,480 --> 00:07:33,930
Jeg kommer til å skrive strengen,
og deretter etter strengen

141
00:07:33,930 --> 00:07:38,000
Jeg skriver et komma og deretter
variabel som jeg ønsker å skrive ut.

142
00:07:38,000 --> 00:07:42,730
Slik at verdien vil bli skrevet ut
i stedet for at plassholder,% i.

143
00:07:42,730 --> 00:07:47,630
>> Du kan bruke plassholdere, som
vel, for flyter med en% f.

144
00:07:47,630 --> 00:07:50,420
Du kan også ha flere
plassholdere i en streng.

145
00:07:50,420 --> 00:07:53,950
For eksempel, hvis jeg har noen tall
av hunder og noen antall katter,

146
00:07:53,950 --> 00:07:59,210
Jeg satte to plassholdere her og deretter
mine to variabler i respektive rekkefølge.

147
00:07:59,210 --> 00:08:03,130
>> Så nå som vi vet hvordan du skriver ut
verdiene som er lagret i variabler,

148
00:08:03,130 --> 00:08:06,030
den aller siste tingen å
gjøre er å sikre at vi

149
00:08:06,030 --> 00:08:10,920
skrive ut verdien på den eksakte format
er angitt i beskrivelsen.

150
00:08:10,920 --> 00:08:14,990
Med det har vi bedt om
bruker og validert deres innspill.

151
00:08:14,990 --> 00:08:17,920
Vi har da beregnet tilsvar
antall flasker med vann

152
00:08:17,920 --> 00:08:22,100
at de bruker under dusj,
og vi har sendt ut som verdi for dem.

153
00:08:22,100 --> 00:08:24,440
Og så har vi fullført vann.

154
00:08:24,440 --> 00:08:28,730
>> Mitt navn er [? Zamila,?]
og dette er CS50.

155
00:08:28,730 --> 00:08:29,909

