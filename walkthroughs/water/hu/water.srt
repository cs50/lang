1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,960
SPEAKER 1: Beszéljünk a víz.

3
00:00:01,960 --> 00:00:07,280
Ebben a problémát, kérje meg a felhasználót, hogy elmondja
nekünk meddig percben a zuhany volt

4
00:00:07,280 --> 00:00:11,040
majd kiszámítjuk az egyenértékű
számú palack víz

5
00:00:11,040 --> 00:00:12,970
hogy a zuhany használni.

6
00:00:12,970 --> 00:00:16,379
>> Tehát mi a mi to-do
erre a problémára?

7
00:00:16,379 --> 00:00:20,050
Először megyünk akar
hogy jelezzen, majd érvényesítse

8
00:00:20,050 --> 00:00:22,100
A bemeneti, hogy a felhasználó megadja nekünk.

9
00:00:22,100 --> 00:00:24,790
Amint arról, hogy mi
érvényes felhasználói bemenet,

10
00:00:24,790 --> 00:00:28,230
megyünk kiszámításához
azonos számú palack víz

11
00:00:28,230 --> 00:00:30,770
hogy a felhasználónak kellett közben
a zuhany, és akkor nem vagyunk

12
00:00:30,770 --> 00:00:33,720
Elmondod nekik
kinyomtatásával ezt a számot.

13
00:00:33,720 --> 00:00:37,230
>> Tehát lássuk elleni első
feladat, kéri és érvényesítése

14
00:00:37,230 --> 00:00:38,550
a felhasználói beviteli.

15
00:00:38,550 --> 00:00:40,910
Erre írtunk egy
funkció hívott

16
00:00:40,910 --> 00:00:43,950
get_int található a CS50 Könyvtár.

17
00:00:43,950 --> 00:00:48,710
get_int biztosítja, hogy a felhasználó bemenetek
egy egész, tehát minden pozitív szám,

18
00:00:48,710 --> 00:00:51,700
negatív számok, vagy
nulla egyaránt elfogadhatók.

19
00:00:51,700 --> 00:00:55,900
De ha a felhasználó bemenetek mást,
így bármilyen kombinációja betűk és számok

20
00:00:55,900 --> 00:00:59,710
vagy egész szám, akkor a
felhasználói program kérni fogja újra

21
00:00:59,710 --> 00:01:04,319
és ez a funkció nem fogad el semmit
amíg a felhasználó ad nekik egy egész szám.

22
00:01:04,319 --> 00:01:06,410
>> Szóval hogyan használjuk get_int?

23
00:01:06,410 --> 00:01:10,830
Ha megnyitja a munkaterület és
hozz létre egy filet integer.c nézzük

24
00:01:10,830 --> 00:01:12,110
írja be a következő.

25
00:01:12,110 --> 00:01:14,760
Hashtag közé cs50.h.

26
00:01:14,760 --> 00:01:18,480
Ez azért szükséges, mert get_int
egy CS50 könyvtár funkciója,

27
00:01:18,480 --> 00:01:21,890
ezért kell tartalmaznia hashtag
nyilatkozatát annak érdekében,

28
00:01:21,890 --> 00:01:23,370
A funkció használatához.

29
00:01:23,370 --> 00:01:26,570
És akkor a fő
működni Csak megyek

30
00:01:26,570 --> 00:01:29,560
egyszerűen hívja a funkciót get_int.

31
00:01:29,560 --> 00:01:31,750
>> Tehát fussunk ez, és hogyan működik.

32
00:01:31,750 --> 00:01:35,092
Már össze is, úgyhogy
csak megy előre, és futtatni ezt a programot,

33
00:01:35,092 --> 00:01:36,480
./egész szám.

34
00:01:36,480 --> 00:01:39,880
Itt van egy gyors és
itt van, ahol én bemenet értéke.

35
00:01:39,880 --> 00:01:44,880
Mondjuk én hozott néhány egész,
50, a program kivételektől eltekintve és kilép

36
00:01:44,880 --> 00:01:45,960
és ennyi.

37
00:01:45,960 --> 00:01:49,350
>> De mondom, futtassa újra és
I bemenet valami mást.

38
00:01:49,350 --> 00:01:51,350
Talán, hello world.

39
00:01:51,350 --> 00:01:55,660
Ez nem egy egész, így a
program kérni, hogy újra.

40
00:01:55,660 --> 00:01:59,160
Próbáljuk meg újra
talán egy tizedes ebben az időben.

41
00:01:59,160 --> 00:02:03,450
0,5, megint, nem egész szám, így
A program nem fogja elfogadni

42
00:02:03,450 --> 00:02:05,290
és megmondja, hogy újra.

43
00:02:05,290 --> 00:02:07,070
Tehát lássuk, hogy ez egy másik számot.

44
00:02:07,070 --> 00:02:09,830
A program fogadja el,
kilép, és kész is vagyunk.

45
00:02:09,830 --> 00:02:13,520
>> Tehát most van egy funkció
amely lehetővé teszi számunkra, és biztosítja

46
00:02:13,520 --> 00:02:16,790
hogy a felhasználó által bevitt egy
egész, de hogyan

47
00:02:16,790 --> 00:02:20,330
ténylegesen nyomon követheti a
integer a felhasználó által bevitt?

48
00:02:20,330 --> 00:02:25,260
Nos, mi nem az üzlet
ezt az értéket a változó, mondjuk n.

49
00:02:25,260 --> 00:02:30,580
Tehát, ha kijelentem, n egész,
és én meg azt az értéket, get_int,

50
00:02:30,580 --> 00:02:34,700
akkor n majd tárolni bármilyen
értékelik a felhasználó megadva.

51
00:02:34,700 --> 00:02:38,620
>> Rendben, most már arról, hogy
a felhasználó ad nekünk egy egész

52
00:02:38,620 --> 00:02:42,550
és tudjuk, hogyan kell nyomon követni
Az egész, de ne felejtsük el,

53
00:02:42,550 --> 00:02:45,610
egészek mind pozitív, mind negatív.

54
00:02:45,610 --> 00:02:49,110
Tehát ez nem igazán van értelme
összefüggésben ezt a problémát

55
00:02:49,110 --> 00:02:53,570
hogy a felhasználó vesz egy zuhanyzó
mondjuk negatív 12 perc.

56
00:02:53,570 --> 00:02:59,310
Tehát meg kell győződnünk arról, hogy a felhasználó
valóban ad nekünk egy pozitív egész szám.

57
00:02:59,310 --> 00:03:02,130
Most nincs csak egy
egyfunkciós arra,

58
00:03:02,130 --> 00:03:04,620
így megyünk, hogy
létre, hogy a magunk.

59
00:03:04,620 --> 00:03:07,190
>> Ezért szeretnénk, hogy folyamatosan
figyelmezteti a felhasználót

60
00:03:07,190 --> 00:03:09,730
amíg adnak nekünk egy pozitív egész szám.

61
00:03:09,730 --> 00:03:14,300
Ha csinálok valamit folyamatosan, majd
ez hasonló egy hurok, egy ismétlés.

62
00:03:14,300 --> 00:03:19,130
Tehát az egyik konstrukciók, hogy használjuk
ac végrehajtására ismétlés és hurkok

63
00:03:19,130 --> 00:03:20,410
egy while ciklus.

64
00:03:20,410 --> 00:03:23,020
Tehát egy while ciklus, mint
itt látható, végrehajtja

65
00:03:23,020 --> 00:03:27,030
bármi is van a szervezetben a hurok
amíg az adott állapot értékeli

66
00:03:27,030 --> 00:03:27,900
az igaz.

67
00:03:27,900 --> 00:03:30,640
Amint ez a feltétel
értéke hamis, akkor

68
00:03:30,640 --> 00:03:34,830
A program folytatódik, hogy bármilyen
után jön a hurok teste.

69
00:03:34,830 --> 00:03:39,400
>> Tehát míg a hurkokat fognak
igazán hasznos CS50.

70
00:03:39,400 --> 00:03:42,590
De ebben a konkrét
esetben tudjuk, hogy mi vagyunk

71
00:03:42,590 --> 00:03:48,140
majd figyelmezteti a felhasználót, legalább
egyszer, és akkor is csak hurok, ha szükséges.

72
00:03:48,140 --> 00:03:51,080
Tehát itt jön a
speciális konstrukció, és ez az

73
00:03:51,080 --> 00:03:55,020
nagyon hasonló a miközben
hurok úgynevezett do-while ciklus.

74
00:03:55,020 --> 00:03:58,840
>> Tehát a do-while ciklus végrehajtja a
a hurok teste legalább egyszer

75
00:03:58,840 --> 00:04:01,750
majd ellenőrzi, hogy
hogy célszerű végrehajtani,

76
00:04:01,750 --> 00:04:05,310
szemben az egy darabig hurok,
amely ellenőrzi az állapotát

77
00:04:05,310 --> 00:04:07,200
majd végrehajtja a szervezetben.

78
00:04:07,200 --> 00:04:11,880
Tehát a do-while ciklus, amit talán
tennie, kéri a felhasználó egy egész,

79
00:04:11,880 --> 00:04:14,450
majd ellenőrizze, ha érvénytelen vagy nincs.

80
00:04:14,450 --> 00:04:18,130
Ha ez érvénytelen, aztán
ismételje meg a folyamatot kéri a felhasználót

81
00:04:18,130 --> 00:04:22,290
hogy nekünk egy egész, majd
Csak ha ez egész érvényes,

82
00:04:22,290 --> 00:04:25,060
mi továbbra is
bármilyen jön utána.

83
00:04:25,060 --> 00:04:28,030
>> Most akkor veszi észre, hogy a
nyilatkozat az egész n

84
00:04:28,030 --> 00:04:31,670
kissé más, mint amit
előtt tette az előző példában

85
00:04:31,670 --> 00:04:33,640
és ez azért van, mert a hatálya alá.

86
00:04:33,640 --> 00:04:37,920
Ha már bejelentett n egész szám belülről
A test a do-while ciklus,

87
00:04:37,920 --> 00:04:42,640
akkor nem lenne képes elérni
hogy n értékét azokon kívül göndör

88
00:04:42,640 --> 00:04:45,050
melles jelző hurok teste.

89
00:04:45,050 --> 00:04:51,080
De mi valójában akarja érni a
n értéke később a programban.

90
00:04:51,080 --> 00:04:55,730
>> OK, így most beszéljünk
mi ez a feltétel legyen.

91
00:04:55,730 --> 00:05:00,400
Azt akarjuk, hogy csak reprompt a
felhasználói amíg N érvénytelen.

92
00:05:00,400 --> 00:05:04,640
Tehát azt gondolja, amit egy érvénytelen
egész érték nézne

93
00:05:04,640 --> 00:05:08,060
majd hozzon létre egy logikai
kifejezése fejezni.

94
00:05:08,060 --> 00:05:13,070
>> Már majdnem kész a részfeladat
Célravezető és ellenőrzi a felhasználói input.

95
00:05:13,070 --> 00:05:16,010
Szóval, hogy ez egy kicsit
kicsit több felhasználóbarát

96
00:05:16,010 --> 00:05:18,390
és hogy a felhasználó egy kis
kicsit több információ

97
00:05:18,390 --> 00:05:20,510
Az, amit mi kéri őket.

98
00:05:20,510 --> 00:05:24,500
Tehát lássuk figyelmezteti a felhasználót, egy a
spec, a húr perc.

99
00:05:24,500 --> 00:05:28,935
Így használja a printf kimutatásaiban
arról, hogy megfelel ennek pontosan.

100
00:05:28,935 --> 00:05:30,230
>> Rendben.

101
00:05:30,230 --> 00:05:33,840
Tehát most van egy érvényes felhasználói
bemenet, egy pozitív egész szám

102
00:05:33,840 --> 00:05:37,400
érték hány percig
töltött a zuhany.

103
00:05:37,400 --> 00:05:41,300
Mi a következő kiszámolása
a megfelelő számú palackok.

104
00:05:41,300 --> 00:05:45,250
Mit fogunk csinálni itt talán
nagyon nyilvánvaló, hogy Ön az első,

105
00:05:45,250 --> 00:05:46,640
és ez rendben.

106
00:05:46,640 --> 00:05:49,320
Amit akarok, hogy mi
szeretné kezdeni a gyakorlást

107
00:05:49,320 --> 00:05:53,810
az elképzelést, felderítése minták és
fejlődő képletek a problémát.

108
00:05:53,810 --> 00:05:57,200
>> Tehát azt mondták per spec
ez az egy perc a zuhany

109
00:05:57,200 --> 00:05:59,960
egyenértékű körülbelül
12 palack vizet.

110
00:05:59,960 --> 00:06:03,020
Így aztán két percig tartanak
egyenértékű a 24,

111
00:06:03,020 --> 00:06:05,850
és öt percig tartanak
egyenértékű a 60.

112
00:06:05,850 --> 00:06:08,390
Tehát most, ha úgy gondolja,
már megvan, akkor menjünk

113
00:06:08,390 --> 00:06:10,390
hátha akkor jön ki
egy minta vagy formula

114
00:06:10,390 --> 00:06:14,990
kifejezni, ha már azt mondják, n
perc, hány üveg víz

115
00:06:14,990 --> 00:06:17,930
lenne, hogy lehet kifejezni n?

116
00:06:17,930 --> 00:06:20,680
>> Ismét, bár ez a
Lehet, hogy egyszerű, első,

117
00:06:20,680 --> 00:06:23,240
később, amikor eljutunk
bonyolultabb problémák

118
00:06:23,240 --> 00:06:26,360
megyünk szeretne bejutni
a gyakorlatban a azonosítására

119
00:06:26,360 --> 00:06:30,120
minták és a fejlődő képletek
kitalálni ezeket a dolgokat.

120
00:06:30,120 --> 00:06:33,450
>> Ezen c van hozzáférése
aritmetikai műveletek,

121
00:06:33,450 --> 00:06:36,520
összeadás, kivonás,
szorzás, osztás.

122
00:06:36,520 --> 00:06:38,420
Úgyhogy hagyjuk, hogy
Ön most kitalálni

123
00:06:38,420 --> 00:06:41,300
hogyan kell kifejezni az
megfelelő számú palackok

124
00:06:41,300 --> 00:06:43,990
hogy a felhasználói elfogyasztott
során zuhany.

125
00:06:43,990 --> 00:06:45,700
>> Rendben, már majdnem készen vagyunk.

126
00:06:45,700 --> 00:06:50,650
Már kéri a felhasználótól a bemenet,
már arról, hogy ez érvényes bemenet,

127
00:06:50,650 --> 00:06:53,330
és akkor kitaláltam, hogy hogyan
kiszámításához az egyenértékű

128
00:06:53,330 --> 00:06:55,480
palackok számát, hogy fogyasztott.

129
00:06:55,480 --> 00:06:59,430
Tehát az utolsó dolog, amit tehetünk, hogy kimenet
a megfelelő számú palackok

130
00:06:59,430 --> 00:07:02,410
és remélhetőleg ösztönözni
ezek megőrzésére egy kis vizet.

131
00:07:02,410 --> 00:07:06,270
>> Kibocsátja az érték
egy printf.

132
00:07:06,270 --> 00:07:09,720
Ha azt akartam mondani, hogy én
három háziállat, például,

133
00:07:09,720 --> 00:07:13,090
Lehet használni a printf
hogy így néz ki.

134
00:07:13,090 --> 00:07:15,880
Van három háziállat, és egy új
sor szép formázás.

135
00:07:15,880 --> 00:07:17,880
>> Most nem akar
egyszerűen nehéz kód dolgokat.

136
00:07:17,880 --> 00:07:20,740
Mondja ki a számot az én
háziállat változik az idő múlásával.

137
00:07:20,740 --> 00:07:25,080
Akkor fogok élni
helyőrzők én printf.

138
00:07:25,080 --> 00:07:27,350
Tehát itt az én szám egész.

139
00:07:27,350 --> 00:07:31,480
Így fogok tenni egy helykitöltő
egész számára a% i.

140
00:07:31,480 --> 00:07:33,930
Megyek, hogy írjon a húr,
majd miután a húr

141
00:07:33,930 --> 00:07:38,000
Írok egy vessző, majd a
változó, hogy szeretnék kinyomtatni.

142
00:07:38,000 --> 00:07:42,730
Tehát ez az érték kerül nyomtatásra
helyett, hogy helyőrzővel% i.

143
00:07:42,730 --> 00:07:47,630
>> Használhatja helyőrzők, mint
Nos, úszók a% f.

144
00:07:47,630 --> 00:07:50,420
Azt is, hogy több
helyőrzők a szövegben.

145
00:07:50,420 --> 00:07:53,950
Például, ha van néhány szám
A kutyák és néhány macskák száma,

146
00:07:53,950 --> 00:07:59,210
Tettem két helyőrzők ide, majd
én két változó megfelelő sorrendben.

147
00:07:59,210 --> 00:08:03,130
>> Most, hogy tudjuk, hogyan kell nyomtatni
A tárolt értékeket változó,

148
00:08:03,130 --> 00:08:06,030
Az utolsó dolog, hogy
tennie, hogy biztosítsa, hogy

149
00:08:06,030 --> 00:08:10,920
kiírja a pontos méret
feltüntetett.

150
00:08:10,920 --> 00:08:14,990
Azzal, hogy már kéri a
felhasználó és hitelesítették a bemenet.

151
00:08:14,990 --> 00:08:17,920
Már akkor számítani az egyenértékű
számú palack víz

152
00:08:17,920 --> 00:08:22,100
hogy az általuk fogyasztott során zuhanyzó,
és mi már outputted, amely érték a számukra.

153
00:08:22,100 --> 00:08:24,440
És így, hogy már elvégeztük a víz.

154
00:08:24,440 --> 00:08:28,730
>> A nevem [? Zamila,?]
és ez a CS50.

155
00:08:28,730 --> 00:08:29,909

