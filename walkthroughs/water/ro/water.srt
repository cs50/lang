1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,960
VORBITOR 1: Să vorbim despre apă.

3
00:00:01,960 --> 00:00:07,280
În această problemă, vom cere utilizatorului să spună
ne cât de mult timp în câteva minute de duș lor a fost

4
00:00:07,280 --> 00:00:11,040
și apoi vom calcula echivalentul
Numărul de sticle de apă

5
00:00:11,040 --> 00:00:12,970
dușul lor utilizate.

6
00:00:12,970 --> 00:00:16,379
>> Deci, ce sunt noastre de a-Do
pentru această problemă?

7
00:00:16,379 --> 00:00:20,050
În primul rând, vom dori
să solicite și apoi să validați

8
00:00:20,050 --> 00:00:22,100
de intrare pe care utilizatorul ne dă.

9
00:00:22,100 --> 00:00:24,790
Odată ce ne asigurăm că
au intrare de utilizator valid,

10
00:00:24,790 --> 00:00:28,230
vom merge pentru a calcula
număr echivalent de sticle de apă

11
00:00:28,230 --> 00:00:30,770
că utilizatorul a avut în timpul
duș lor, și apoi suntem

12
00:00:30,770 --> 00:00:33,720
O să le spun de
imprimarea acel număr.

13
00:00:33,720 --> 00:00:37,230
>> Așa că haideți să abordeze primul nostru
sarcină, fapt care ia determinat și validarea

14
00:00:37,230 --> 00:00:38,550
introduse de utilizator.

15
00:00:38,550 --> 00:00:40,910
Pentru aceasta ne-am scris o
Funcția pentru tine numit

16
00:00:40,910 --> 00:00:43,950
get_int situat în Biblioteca CS50.

17
00:00:43,950 --> 00:00:48,710
get_int asigură faptul că intrările de utilizator
un număr întreg, astfel încât orice numere pozitive,

18
00:00:48,710 --> 00:00:51,700
numere negative, sau
zero, toate sunt acceptate.

19
00:00:51,700 --> 00:00:55,900
Dar, în cazul în care utilizatorul introduce orice altceva,
astfel încât orice combinație de litere sau cifre

20
00:00:55,900 --> 00:00:59,710
sau numere zecimale, atunci
utilizator se va cere să încerce din nou

21
00:00:59,710 --> 00:01:04,319
iar funcția nu va accepta nimic
până când utilizatorul le dă un întreg.

22
00:01:04,319 --> 00:01:06,410
>> Deci, cum folosim get_int?

23
00:01:06,410 --> 00:01:10,830
Dacă deschideți spațiul de lucru și
a crea un fișier numit integer.c să

24
00:01:10,830 --> 00:01:12,110
tastați următoarele.

25
00:01:12,110 --> 00:01:14,760
Hashtag includ cs50.h.

26
00:01:14,760 --> 00:01:18,480
Acest lucru este necesar deoarece get_int
este o funcție de bibliotecă CS50,

27
00:01:18,480 --> 00:01:21,890
așa că trebuie să includă hashtagul
declarația în ordine

28
00:01:21,890 --> 00:01:23,370
pentru a utiliza funcția.

29
00:01:23,370 --> 00:01:26,570
Și apoi, în principal mea
funcționa Mă duc

30
00:01:26,570 --> 00:01:29,560
pentru a apela pur și simplu get_int funcția.

31
00:01:29,560 --> 00:01:31,750
>> Deci să fugim acest lucru și a vedea cum funcționează.

32
00:01:31,750 --> 00:01:35,092
Am compilat deja, așa că hai
doar du-te mai departe și a alerga acest program,

33
00:01:35,092 --> 00:01:36,480
./întreg.

34
00:01:36,480 --> 00:01:39,880
Aici am un prompt și
aici e în cazul în care valoarea de intrare am.

35
00:01:39,880 --> 00:01:44,880
Spun că am pus în doar câteva întreg,
50 de ani, excepts program și quit

36
00:01:44,880 --> 00:01:45,960
și cu asta.

37
00:01:45,960 --> 00:01:49,350
>> Dar, spun am alerga din nou și
Am introdus ceva.

38
00:01:49,350 --> 00:01:51,350
Poate că, Bună ziua lume.

39
00:01:51,350 --> 00:01:55,660
Asta nu este un număr întreg așa
Programul mă va cere să încerce din nou.

40
00:01:55,660 --> 00:01:59,160
Să încercăm din nou, cu
probabil, o zecimală de această dată.

41
00:01:59,160 --> 00:02:03,450
0.5, din nou, nu este un număr întreg, astfel
programul nu va accepta

42
00:02:03,450 --> 00:02:05,290
și să-mi spună să încerci din nou.

43
00:02:05,290 --> 00:02:07,070
Deci, să-i dăm un alt număr.

44
00:02:07,070 --> 00:02:09,830
Programul acceptă,
se închide, și am terminat.

45
00:02:09,830 --> 00:02:13,520
>> Deci, acum avem o funcție
care ne permite și asigură

46
00:02:13,520 --> 00:02:16,790
că utilizatorul introduce un
întreg, dar cum putem

47
00:02:16,790 --> 00:02:20,330
fapt păstrează o evidență a
număr întreg de către utilizator introdus?

48
00:02:20,330 --> 00:02:25,260
Ei bine, tot ce vom face este magazin
această valoare într-o variabilă, să zicem n.

49
00:02:25,260 --> 00:02:30,580
Așa că, dacă declar un număr întreg n,
și am stabilit că valoarea la get_int,

50
00:02:30,580 --> 00:02:34,700
atunci n va stoca atunci orice
valoarea utilizatorului introdus.

51
00:02:34,700 --> 00:02:38,620
>> Bine, așa că acum ne-am asigurat că
utilizatorul ne va da un număr întreg

52
00:02:38,620 --> 00:02:42,550
și știm cum să urmăriți
din întreg, dar amintiți-vă,

53
00:02:42,550 --> 00:02:45,610
întregi sunt atât pozitive, cât și negative.

54
00:02:45,610 --> 00:02:49,110
Așa că nu prea are sens
în contextul acestei probleme

55
00:02:49,110 --> 00:02:53,570
că utilizatorul ia un duș
a spune negativ de 12 minute.

56
00:02:53,570 --> 00:02:59,310
Deci, avem nevoie să ne asigurăm că utilizatorul
de fapt, ne dă un număr întreg pozitiv.

57
00:02:59,310 --> 00:03:02,130
Acum nu avem doar un
Funcția unică pentru că,

58
00:03:02,130 --> 00:03:04,620
așa că vom avea
pentru a crea noi înșine că.

59
00:03:04,620 --> 00:03:07,190
>> Așa că vrem să continuu
solicita utilizatorului

60
00:03:07,190 --> 00:03:09,730
până când ne dau un număr întreg pozitiv.

61
00:03:09,730 --> 00:03:14,300
În cazul în care fac ceva în mod continuu, atunci
care este înrudită cu o buclă, o repetiție.

62
00:03:14,300 --> 00:03:19,130
Deci, una dintre construcțiile pe care le folosim
în c pentru a pune în aplicare repetarea și bucle

63
00:03:19,130 --> 00:03:20,410
este o buclă în timp.

64
00:03:20,410 --> 00:03:23,020
Deci, o buclă în timp ce, după cum
prezentat aici, se va executa

65
00:03:23,020 --> 00:03:27,030
tot ceea ce este în corpul buclei ca
atâta timp cât dat condiție evaluează

66
00:03:27,030 --> 00:03:27,900
true.

67
00:03:27,900 --> 00:03:30,640
De îndată ce această condiție
evaluează la fals, atunci

68
00:03:30,640 --> 00:03:34,830
programul va proceda la orice
vine după ce corpul buclei.

69
00:03:34,830 --> 00:03:39,400
>> Așa că în timp ce buclele vor
să fie într-adevăr util în CS50.

70
00:03:39,400 --> 00:03:42,590
Dar, în această special
caz, știm că suntem

71
00:03:42,590 --> 00:03:48,140
va solicita utilizatorului cel puțin
o dată și apoi numai în buclă, dacă este necesar.

72
00:03:48,140 --> 00:03:51,080
Așa că aici am ajuns la o
construct special și asta

73
00:03:51,080 --> 00:03:55,020
foarte similar cu timp
buclă numită o buclă do-în timp ce.

74
00:03:55,020 --> 00:03:58,840
>> Deci, o bucla do-în timp ce execută
corpul buclei cel puțin o dată

75
00:03:58,840 --> 00:04:01,750
și apoi se verifică pentru a vedea
dacă ar trebui să execute,

76
00:04:01,750 --> 00:04:05,310
spre deosebire de o buclă în timp,
care va verifica starea

77
00:04:05,310 --> 00:04:07,200
și apoi executați din organism.

78
00:04:07,200 --> 00:04:11,880
Deci, într-o buclă în timp ce do-am putea
faceți este prompt utilizator pentru un număr întreg,

79
00:04:11,880 --> 00:04:14,450
și apoi verificați dacă este nevalid sau nu.

80
00:04:14,450 --> 00:04:18,130
Dacă este nevalid, atunci vom
repeta procesul cere utilizatorului

81
00:04:18,130 --> 00:04:22,290
pentru a ne da un alt număr întreg, și apoi
numai atunci când acest număr întreg este valabil,

82
00:04:22,290 --> 00:04:25,060
vom continua să
orice vine după aceea.

83
00:04:25,060 --> 00:04:28,030
>> Acum vei observați că
declararea n întreg

84
00:04:28,030 --> 00:04:31,670
este puțin diferită față de ceea ce noi
făcut înainte în exemplul anterior

85
00:04:31,670 --> 00:04:33,640
iar acest lucru este din cauza domeniului de aplicare.

86
00:04:33,640 --> 00:04:37,920
Dacă am fi declarat n interiorul întreg
a corpului buclei do-în timp ce,

87
00:04:37,920 --> 00:04:42,640
atunci nu s-ar putea accesa
că valoarea lui n afara celor creț

88
00:04:42,640 --> 00:04:45,050
bretele care indică corpul buclei.

89
00:04:45,050 --> 00:04:51,080
Dar noi, de fapt, vor să acceseze
Valoarea lui n mai târziu în programul nostru.

90
00:04:51,080 --> 00:04:55,730
>> OK, deci acum hai să vorbim despre
ceea ce ar trebui să fie această condiție.

91
00:04:55,730 --> 00:05:00,400
Dorim să reprompt numai
utilizator, atâta timp cât n este nevalid.

92
00:05:00,400 --> 00:05:04,640
Deci, gândiți-vă la ce invalid
valoare întreagă ar arata ca

93
00:05:04,640 --> 00:05:08,060
și apoi a crea un boolean
expresie pentru a exprima acest lucru.

94
00:05:08,060 --> 00:05:13,070
>> Aproape am terminat cu subactivitate nostru
de fapt care ia determinat și validarea introduse de utilizator.

95
00:05:13,070 --> 00:05:16,010
Așa că hai să facem acest lucru un pic
bit mai ușor de utilizat

96
00:05:16,010 --> 00:05:18,390
și să dea utilizatorului un pic
biți mai multe informații

97
00:05:18,390 --> 00:05:20,510
din ceea ce le-a determinat pentru ce.

98
00:05:20,510 --> 00:05:24,500
Așa că hai cere utilizatorului, conform
spec, cu minutele șir.

99
00:05:24,500 --> 00:05:28,935
Deci, folosind declarațiile dumneavoastră printf, face
sigur că acest lucru se potrivesc exact.

100
00:05:28,935 --> 00:05:30,230
>> In regula.

101
00:05:30,230 --> 00:05:33,840
Așa că acum avem un utilizator valid
de intrare, un număr întreg pozitiv

102
00:05:33,840 --> 00:05:37,400
valoare pentru cât de multe minute
au petrecut în duș.

103
00:05:37,400 --> 00:05:41,300
Ce urmează este de a calcula
numărul echivalent de sticle.

104
00:05:41,300 --> 00:05:45,250
Ceea ce vom face aici s-ar putea
să fie foarte evident pentru tine la început,

105
00:05:45,250 --> 00:05:46,640
și asta e în regulă.

106
00:05:46,640 --> 00:05:49,320
Ceea ce vrem să facem este noi
doresc să înceapă practicarea

107
00:05:49,320 --> 00:05:53,810
ideea de detectare a modelelor și
elaborarea de formule pentru problema.

108
00:05:53,810 --> 00:05:57,200
>> Așa că ne-a spus pe spec
că un minut la duș

109
00:05:57,200 --> 00:05:59,960
este echivalent cu aproximativ
12 sticle de apă.

110
00:05:59,960 --> 00:06:03,020
Așa că atunci două minute ar
să fie echivalentă cu 24,

111
00:06:03,020 --> 00:06:05,850
și cinci minute ar
să fie echivalentă cu 60.

112
00:06:05,850 --> 00:06:08,390
Deci, acum, dacă crezi
le-ați luat-o, atunci hai

113
00:06:08,390 --> 00:06:10,390
vezi dacă poți veni
cu un model sau formula

114
00:06:10,390 --> 00:06:14,990
să-și exprime dacă am spune, n
minute, cât de multe sticle de apă

115
00:06:14,990 --> 00:06:17,930
care va fi exprimată în termeni de n?

116
00:06:17,930 --> 00:06:20,680
>> Din nou, chiar dacă acest lucru
ar putea fi simplu la început,

117
00:06:20,680 --> 00:06:23,240
mai târziu, când vom ajunge la
probleme mai complicate

118
00:06:23,240 --> 00:06:26,360
vom dori să intre în
practica de identificare

119
00:06:26,360 --> 00:06:30,120
modele și formule de dezvoltare
pentru a descoperi aceste lucruri.

120
00:06:30,120 --> 00:06:33,450
>> În c aveți acces la
operații aritmetice standard,

121
00:06:33,450 --> 00:06:36,520
adunare, scădere,
înmulțirea și împărțirea.

122
00:06:36,520 --> 00:06:38,420
Așa că am să-l las
vă acum să dau seama

123
00:06:38,420 --> 00:06:41,300
cum să-și exprime
număr echivalent de sticle

124
00:06:41,300 --> 00:06:43,990
că utilizatorul consumat
în timpul lor de duș.

125
00:06:43,990 --> 00:06:45,700
>> Bine, suntem aproape gata.

126
00:06:45,700 --> 00:06:50,650
Ne-am determinat utilizatorul pentru introducerea lor,
ne-am asigurat că este o intrare validă,

127
00:06:50,650 --> 00:06:53,330
și apoi ne-am dat seama cum
pentru a calcula echivalentul

128
00:06:53,330 --> 00:06:55,480
numărul de sticle pe care au consumat.

129
00:06:55,480 --> 00:06:59,430
Așadar, ultimul lucru de făcut este să ieșire
numărul echivalent de sticle

130
00:06:59,430 --> 00:07:02,410
și, sperăm, să încurajeze
le pentru a economisi niște apă.

131
00:07:02,410 --> 00:07:06,270
>> Valoarea va scoate
să fie o declarație printf.

132
00:07:06,270 --> 00:07:09,720
Dacă aș fi vrut să-ți spun că am
au trei animale de companie sunt, de exemplu,

133
00:07:09,720 --> 00:07:13,090
S-ar putea folosi o declarație printf
care arată ceva de genul asta.

134
00:07:13,090 --> 00:07:15,880
Am trei animale de casă, și un nou
line pentru formatare frumos.

135
00:07:15,880 --> 00:07:17,880
>> Acum, noi nu vrem să
cod simplu, greu de lucruri.

136
00:07:17,880 --> 00:07:20,740
Spun numărul meu
animale de companie sunt se schimbă în timp.

137
00:07:20,740 --> 00:07:25,080
Apoi am de gând să facă uz de
Substituenți în declarația mea printf.

138
00:07:25,080 --> 00:07:27,350
Deci, aici numărul meu este un număr întreg.

139
00:07:27,350 --> 00:07:31,480
Așa că am de gând să fac un înlocuitor
pentru un număr întreg, utilizând% i.

140
00:07:31,480 --> 00:07:33,930
Am de gând să scrie șirul,
și apoi, după șirul

141
00:07:33,930 --> 00:07:38,000
Am scrie o virgulă și apoi
variabilă pe care vreau să le imprimați.

142
00:07:38,000 --> 00:07:42,730
Astfel ca valoarea va fi imprimată
în locul acelui substituent,% i.

143
00:07:42,730 --> 00:07:47,630
>> Aveți posibilitatea să utilizați Substituenți, ca
bine, pentru flotoarele cu un% f.

144
00:07:47,630 --> 00:07:50,420
Puteți avea, de asemenea, mai multe
Substituenți într-un șir de caractere.

145
00:07:50,420 --> 00:07:53,950
De exemplu, dacă am ceva număr
de câini și unele număr de pisici,

146
00:07:53,950 --> 00:07:59,210
Am pus două Substituenți aici și apoi
mele cele două variabile, în ordinea respectivă.

147
00:07:59,210 --> 00:08:03,130
>> Deci, acum că știm cum să imprimați
valorile stocate în variabile,

148
00:08:03,130 --> 00:08:06,030
ultimul lucru la
face este de a se asigura că

149
00:08:06,030 --> 00:08:10,920
imprima valoarea în formatul exact
indicate în caietul de sarcini.

150
00:08:10,920 --> 00:08:14,990
Cu aceasta, ne-am determinat
utilizator și validate de intrare a acestora.

151
00:08:14,990 --> 00:08:17,920
Apoi ne-am calculat echivalentul
Numărul de sticle de apă

152
00:08:17,920 --> 00:08:22,100
pe care le consuma in timpul lor de duș,
și ne-am acea valoare scoasă lor.

153
00:08:22,100 --> 00:08:24,440
Și așa, am terminat cu apă.

154
00:08:24,440 --> 00:08:28,730
>> Numele meu este [? Zamila,?]
iar acest lucru este CS50.

155
00:08:28,730 --> 00:08:29,909

