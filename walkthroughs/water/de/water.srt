1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,960
Sprecher 1: Lassen Sie uns über Wasser sprechen.

3
00:00:01,960 --> 00:00:07,280
In diesem Problem, bitten wir um den Benutzer zu sagen
uns, wie lange in Minuten ihre Dusche war

4
00:00:07,280 --> 00:00:11,040
und dann berechnen wir die äquivalente
Anzahl der Flaschen Wasser

5
00:00:11,040 --> 00:00:12,970
dass ihre Dusche verwendet.

6
00:00:12,970 --> 00:00:16,379
>> Also, was sind unsere To-Dos
für dieses Problem?

7
00:00:16,379 --> 00:00:20,050
Erstens, wir gehen zu wollen,
aufzufordern und dann zu validieren

8
00:00:20,050 --> 00:00:22,100
der Eingang, die der Benutzer uns gibt.

9
00:00:22,100 --> 00:00:24,790
Sobald wir sicherstellen, dass wir
gültige Benutzereingabe,

10
00:00:24,790 --> 00:00:28,230
wir werden die zur Berechnung
äquivalente Anzahl von Flaschen Wasser

11
00:00:28,230 --> 00:00:30,770
dass der Benutzer hatte während
ihre Dusche, und dann sind wir

12
00:00:30,770 --> 00:00:33,720
Gehen sie zu erzählen von
Drucken Sie diese Zahl aus.

13
00:00:33,720 --> 00:00:37,230
>> Also lassen Sie uns unser erstes angehen
Aufgabe, Führung und Validierung

14
00:00:37,230 --> 00:00:38,550
die Benutzereingabe.

15
00:00:38,550 --> 00:00:40,910
Dafür haben wir geschrieben ein
Funktion für Sie angerufen

16
00:00:40,910 --> 00:00:43,950
get_int in der CS50 Library.

17
00:00:43,950 --> 00:00:48,710
get_int stellt sicher, dass die Benutzereingaben
eine ganze Zahl, so dass jede positive Zahlen,

18
00:00:48,710 --> 00:00:51,700
negative Zahlen oder
Null werden alle angenommen.

19
00:00:51,700 --> 00:00:55,900
Aber wenn der Benutzer gibt etwas anderes,
so eine beliebige Kombination von Buchstaben oder Zahlen

20
00:00:55,900 --> 00:00:59,710
oder Dezimalzahlen, dann ist die
Benutzer werden aufgefordert, erneut zu versuchen

21
00:00:59,710 --> 00:01:04,319
und die Funktion wird nicht alles akzeptieren
bis der Benutzer gibt ihnen eine ganze Zahl ist.

22
00:01:04,319 --> 00:01:06,410
>> Wie können wir also get_int benutzen?

23
00:01:06,410 --> 00:01:10,830
Wenn Sie öffnen Sie Ihren Arbeitsplatz und
Erstellen Sie eine Datei namens integer.c lasst uns

24
00:01:10,830 --> 00:01:12,110
Geben Sie die folgende.

25
00:01:12,110 --> 00:01:14,760
Hashtag umfassen cs50.h.

26
00:01:14,760 --> 00:01:18,480
Dies ist notwendig, weil get_int
ist ein CS50-Library-Funktion,

27
00:01:18,480 --> 00:01:21,890
so müssen wir Hashtag umfassen
seine Erklärung, um

28
00:01:21,890 --> 00:01:23,370
die Funktion zu verwenden.

29
00:01:23,370 --> 00:01:26,570
Und dann in meinem Haupt
Funktion Ich bin gerade dabei

30
00:01:26,570 --> 00:01:29,560
einfach die Funktion get_int nennen.

31
00:01:29,560 --> 00:01:31,750
>> Also lassen Sie uns dies und sehen, wie es funktioniert.

32
00:01:31,750 --> 00:01:35,092
Ich habe es schon zusammengestellt, also lassen Sie uns
gehen Sie einfach weiter und dieses Programm ausführen,

33
00:01:35,092 --> 00:01:36,480
./ganze Zahl.

34
00:01:36,480 --> 00:01:39,880
Ich habe hier eine schnelle und
hier ist, wo ich den Wert eingeben.

35
00:01:39,880 --> 00:01:44,880
Sagen, dass ich in nur ein paar ganze Zahl ausgedrückt,
50, das Programm excepts und quitt

36
00:01:44,880 --> 00:01:45,960
und das ist das.

37
00:01:45,960 --> 00:01:49,350
>> Aber ich sage es noch einmal laufen und
I-Eingang etwas anderes.

38
00:01:49,350 --> 00:01:51,350
Vielleicht, hallo Welt.

39
00:01:51,350 --> 00:01:55,660
Das ist nicht eine ganze Zahl, so dass die
Programm wird mir prompt erneut zu versuchen.

40
00:01:55,660 --> 00:01:59,160
Lassen Sie uns versuchen Sie es erneut mit
vielleicht eine Dezimalzahl diesmal.

41
00:01:59,160 --> 00:02:03,450
0,5, wieder kein ganzzahliges so
das Programm wird es nicht akzeptieren

42
00:02:03,450 --> 00:02:05,290
und es wird mir sagen, erneut zu versuchen.

43
00:02:05,290 --> 00:02:07,070
Also lassen Sie uns es eine andere Nummer geben.

44
00:02:07,070 --> 00:02:09,830
Das Programm akzeptiert es,
beendet wird, und wir sind fertig.

45
00:02:09,830 --> 00:02:13,520
>> So, jetzt haben wir eine Funktion
die es uns erlaubt und sicher

46
00:02:13,520 --> 00:02:16,790
dass der Benutzer gibt eine
integer, aber wie können wir

47
00:02:16,790 --> 00:02:20,330
tatsächlich halten den Überblick über die
integer durch den Benutzer eingegeben?

48
00:02:20,330 --> 00:02:25,260
Nun, alles, was wir tun müssen, ist Speicher
dieser Wert in einer Variablen, sagen n.

49
00:02:25,260 --> 00:02:30,580
Also, wenn ich erklären eine ganze Zahl n,
und ich setzen Sie diesen Wert auf get_int,

50
00:02:30,580 --> 00:02:34,700
dann n speichert dann was auch immer
Wert auf den Benutzer eingegeben.

51
00:02:34,700 --> 00:02:38,620
>> In Ordnung, so jetzt haben wir dafür gesorgt, dass
der Benutzer wird uns eine ganze Zahl

52
00:02:38,620 --> 00:02:42,550
und wir wissen, wie den Überblick zu behalten
der ganze Zahl, aber denken Sie daran,

53
00:02:42,550 --> 00:02:45,610
ganze Zahlen sind sowohl positive als auch negative.

54
00:02:45,610 --> 00:02:49,110
So ist es nicht wirklich Sinn machen,
Im Rahmen dieses Problems

55
00:02:49,110 --> 00:02:53,570
dass der Benutzer nimmt eine Dusche
von Negatives sagen 12 Minuten.

56
00:02:53,570 --> 00:02:59,310
Deshalb müssen wir sicherstellen, dass der Benutzer
tatsächlich gibt uns eine positive ganze Zahl ist.

57
00:02:59,310 --> 00:03:02,130
Jetzt haben wir nicht nur ein
einzelne Funktion für das,

58
00:03:02,130 --> 00:03:04,620
so dass wir gehen zu müssen,
zu schaffen, die uns selbst.

59
00:03:04,620 --> 00:03:07,190
>> So wollen wir kontinuierlich an
fordert den Benutzer

60
00:03:07,190 --> 00:03:09,730
bis sie geben uns eine positive ganze Zahl ist.

61
00:03:09,730 --> 00:03:14,300
Wenn ich etwas zu tun, dann kontinuierlich
das ist vergleichbar mit einer Schleife, eine Wiederholung.

62
00:03:14,300 --> 00:03:19,130
Damit wird eines der Konstrukte, die wir verwenden
in c Wiederholung und Schleifen zu implementieren

63
00:03:19,130 --> 00:03:20,410
ist eine while-Schleife.

64
00:03:20,410 --> 00:03:23,020
So eine while-Schleife, wie
hier gezeigt, wird ausgeführt

65
00:03:23,020 --> 00:03:27,030
was auch immer in dem Körper der Schleife als
solange die vorgegebene Bedingung auswertet

66
00:03:27,030 --> 00:03:27,900
auf true.

67
00:03:27,900 --> 00:03:30,640
Sobald dieser Zustand
das Ergebnis falsch, dann

68
00:03:30,640 --> 00:03:34,830
das Programm wird fortgesetzt, was auch immer
kommt, nachdem der Körper der Schleife.

69
00:03:34,830 --> 00:03:39,400
>> Während also Schleifen gehen zu
sein wirklich nützlich in CS50.

70
00:03:39,400 --> 00:03:42,590
Aber in diesem besonderen
Fall wissen wir, dass wir

71
00:03:42,590 --> 00:03:48,140
geht der Benutzer zumindest aufzufordern
einmal und dann nur Schleife, falls erforderlich.

72
00:03:48,140 --> 00:03:51,080
Also hier kommen wir zu einem
spezielles Konstrukt und das ist

73
00:03:51,080 --> 00:03:55,020
sehr ähnlich dem, während
Schleife bezeichnet eine do-while-Schleife.

74
00:03:55,020 --> 00:03:58,840
>> So eine do-while-Schleife führt die
Körper der Schleife mindestens einmal

75
00:03:58,840 --> 00:04:01,750
und dann überprüft er,
ob es ausgeführt werden soll,

76
00:04:01,750 --> 00:04:05,310
wie zu einer while-Schleife entgegengesetzt,
so wird überprüft den Zustand

77
00:04:05,310 --> 00:04:07,200
und dann den Körper auszuführen.

78
00:04:07,200 --> 00:04:11,880
So in einem do-while-Schleife, was wir könnten
Sie ist es, die Benutzer für eine ganze Zahl aufgefordert,

79
00:04:11,880 --> 00:04:14,450
und dann prüfen, ob es ungültig ist oder nicht.

80
00:04:14,450 --> 00:04:18,130
Wenn es ungültig ist, dann werden wir
wiederholen Sie den Vorgang mit der Abfrage,

81
00:04:18,130 --> 00:04:22,290
geben uns eine weitere ganze Zahl, und dann
nur dann, wenn die ganze Zahl gültig ist,

82
00:04:22,290 --> 00:04:25,060
wir werden auch weiterhin
was kommt danach.

83
00:04:25,060 --> 00:04:28,030
>> Jetzt werden Sie feststellen, dass die
Erklärung der ganzen Zahl n

84
00:04:28,030 --> 00:04:31,670
leicht unterschiedlich ist zu dem, was wir
tat, bevor in dem vorherigen Beispiel

85
00:04:31,670 --> 00:04:33,640
und dies ist wegen des Umfangs.

86
00:04:33,640 --> 00:04:37,920
Wenn wir die ganze Zahl n innerhalb erklärt hatte
des Körpers des do-while-Schleife,

87
00:04:37,920 --> 00:04:42,640
dann würden wir nicht in der Lage sein, den Zugriff auf
dass Wert von n außerhalb dieser geschweiften

88
00:04:42,640 --> 00:04:45,050
Zahnspange den Körper der Schleife anzeigt.

89
00:04:45,050 --> 00:04:51,080
Aber wir in der Tat wollen die für den Zugriff auf
später von n in unserem Programm.

90
00:04:51,080 --> 00:04:55,730
>> OK, jetzt lassen Sie uns darüber reden,
was soll dieser Zustand sein.

91
00:04:55,730 --> 00:05:00,400
Wir wollen, dass die nur auf reprompt
Benutzer, solange n ungültig ist.

92
00:05:00,400 --> 00:05:04,640
Also denken Sie sich, was eine ungültige
Integer-Wert würde so aussehen

93
00:05:04,640 --> 00:05:08,060
und erstellen Sie dann einen Booleschen
Ausdruck zum Ausdruck bringen, dass.

94
00:05:08,060 --> 00:05:13,070
>> Wir sind fast mit unseren Unteraufgabe fertig
nachzufragen und die Validierung von Benutzereingaben.

95
00:05:13,070 --> 00:05:16,010
Also lassen Sie uns dies ein wenig zu machen
Bit benutzerfreundlicher

96
00:05:16,010 --> 00:05:18,390
und geben dem Anwender ein wenig
bisschen mehr Informationen

97
00:05:18,390 --> 00:05:20,510
von dem, was wir sie auffordern,.

98
00:05:20,510 --> 00:05:24,500
Also lassen Sie uns den Benutzer auffordern, pro die
spec, mit den String Minuten.

99
00:05:24,500 --> 00:05:28,935
So Ihre printf Aussagen verwenden, stellen
genau sicher, dass Sie dieses Spiel.

100
00:05:28,935 --> 00:05:30,230
>> Gut.

101
00:05:30,230 --> 00:05:33,840
So, jetzt haben wir einen gültigen Benutzer
Eingang, eine positive ganze Zahl

102
00:05:33,840 --> 00:05:37,400
Wert für wie viele Minuten
sie verbrachten in der Dusche.

103
00:05:37,400 --> 00:05:41,300
Also, was kommt als nächstes ist zu berechnen
die entsprechende Anzahl von Flaschen.

104
00:05:41,300 --> 00:05:45,250
Was werden wir hier zu tun könnte
sehr klar, man auf den ersten,

105
00:05:45,250 --> 00:05:46,640
und das ist in Ordnung.

106
00:05:46,640 --> 00:05:49,320
Was wir wollen, ist, dass wir
beginnen soll Üben

107
00:05:49,320 --> 00:05:53,810
Die Idee Muster zu erkennen und
Entwicklungs Formeln für das Problem.

108
00:05:53,810 --> 00:05:57,200
>> Wir sind also pro die Spezifikation gesagt
dass eine Minute lang in der Dusche

109
00:05:57,200 --> 00:05:59,960
entspricht etwa
12 Flaschen Wasser.

110
00:05:59,960 --> 00:06:03,020
So nun zwei Minuten würde
äquivalent zu 24,

111
00:06:03,020 --> 00:06:05,850
und fünf Minuten wäre
sein entspricht 60.

112
00:06:05,850 --> 00:06:08,390
So, jetzt, wenn Sie denken
Sie haben es, dann lass uns

113
00:06:08,390 --> 00:06:10,390
sehen, ob Sie kommen können
mit einem Muster oder Formel

114
00:06:10,390 --> 00:06:14,990
zum Ausdruck bringen, wenn wir sagen, n
Minuten, wie viele Flaschen Wasser

115
00:06:14,990 --> 00:06:17,930
würde, dass in Bezug auf n ausgedrückt werden?

116
00:06:17,930 --> 00:06:20,680
>> Wiederum, obwohl das
könnte zunächst einfach sein,

117
00:06:20,680 --> 00:06:23,240
später, als wir bekommen
komplizierter Probleme

118
00:06:23,240 --> 00:06:26,360
wir gehen in zu wollen, zu erhalten
die Praxis der Identifizierung

119
00:06:26,360 --> 00:06:30,120
Muster und Entwicklungs Formeln
diese Dinge herauszufinden.

120
00:06:30,120 --> 00:06:33,450
>> In c haben Sie Zugriff auf
Standard arithmetische Operationen,

121
00:06:33,450 --> 00:06:36,520
Addition, Subtraktion,
Multiplikation und Division.

122
00:06:36,520 --> 00:06:38,420
Also lasse ich werde es
Sie jetzt, um herauszufinden,

123
00:06:38,420 --> 00:06:41,300
wie zum Ausdruck bringen die
entsprechende Anzahl von Flaschen

124
00:06:41,300 --> 00:06:43,990
dass der Benutzer verbraucht
während der Dusche.

125
00:06:43,990 --> 00:06:45,700
>> In Ordnung, wir sind fast fertig.

126
00:06:45,700 --> 00:06:50,650
Wir haben die Benutzer für ihre Eingabe aufgefordert,
wir haben dafür gesorgt, dass es eine gültige Eingabe ist,

127
00:06:50,650 --> 00:06:53,330
und dann haben wir herausgefunden, wie man
zur Berechnung der äquivalenten

128
00:06:53,330 --> 00:06:55,480
Anzahl der Flaschen, die sie verbraucht wird.

129
00:06:55,480 --> 00:06:59,430
Also das letzte, was zu tun ist, um Ausgangs
die äquivalente Anzahl von Flaschen

130
00:06:59,430 --> 00:07:02,410
und hoffentlich ermutigen
sie etwas Wasser zu sparen.

131
00:07:02,410 --> 00:07:06,270
>> Ausgabe der Wert
sein eine printf-Anweisung.

132
00:07:06,270 --> 00:07:09,720
Wenn ich wollte Ihnen, dass ich zu sagen,
drei Tiere, zum Beispiel,

133
00:07:09,720 --> 00:07:13,090
Ich könnte eine printf-Anweisung
das sieht so etwas wie dieses.

134
00:07:13,090 --> 00:07:15,880
Ich habe drei Haustiere, und ein neues
Zeile für nette Formatierung.

135
00:07:15,880 --> 00:07:17,880
>> Nun wollen wir nicht zu
einfach schwer Code Dinge.

136
00:07:17,880 --> 00:07:20,740
Sagen die Zahl meiner
Haustiere ändert sich im Laufe der Zeit.

137
00:07:20,740 --> 00:07:25,080
Dann werde ich Gebrauch machen
Platzhalter in meiner printf-Anweisung.

138
00:07:25,080 --> 00:07:27,350
Also hier meine Nummer ist eine ganze Zahl.

139
00:07:27,350 --> 00:07:31,480
Also werde ich einen Platzhalter zu machen
für eine ganze Zahl mit% i.

140
00:07:31,480 --> 00:07:33,930
Ich werde die Zeichenfolge zu schreiben,
und dann, nach dem String

141
00:07:33,930 --> 00:07:38,000
Ich schreibe ein Komma und dann die
Variable, die ich drucken möchten.

142
00:07:38,000 --> 00:07:42,730
So wird dieser Wert gedruckt werden
anstelle dieser Platzhalter% i.

143
00:07:42,730 --> 00:07:47,630
>> Sie können Platzhalter verwenden, wie
gut, für Schwimmer mit einer% f.

144
00:07:47,630 --> 00:07:50,420
Sie können auch haben mehrere
Platzhalter in einer Zeichenkette.

145
00:07:50,420 --> 00:07:53,950
Zum Beispiel, wenn ich eine bestimmte Anzahl
von Hunden und eine Anzahl von Katzen,

146
00:07:53,950 --> 00:07:59,210
Ich habe zwei Platzhalter hier und dann
meine beiden Variablen in den entsprechenden Auftrag.

147
00:07:59,210 --> 00:08:03,130
>> Also jetzt, dass wir wissen, wie zu drucken
die in Variablen gespeicherten Werte,

148
00:08:03,130 --> 00:08:06,030
das letzte, was zu
tun, ist, dass wir sicherstellen,

149
00:08:06,030 --> 00:08:10,920
drucken Sie den Wert in das genaue Format
die in der Beschreibung angegeben.

150
00:08:10,920 --> 00:08:14,990
Damit haben wir aufgefordert, die
Benutzer und validiert ihre Eingabe.

151
00:08:14,990 --> 00:08:17,920
Wir haben dann das Äquivalent berechnet
Anzahl der Flaschen Wasser

152
00:08:17,920 --> 00:08:22,100
dass sie während ihrer Dusche verbrauchen,
und wir haben diesen Wert zu ihnen ausgegeben.

153
00:08:22,100 --> 00:08:24,440
Und so haben wir Wasser abgeschlossen.

154
00:08:24,440 --> 00:08:28,730
>> Ich heiße [? Zamila,?]
und dies ist CS50.

155
00:08:28,730 --> 00:08:29,909

