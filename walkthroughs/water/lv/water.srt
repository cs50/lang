1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,960
SPEAKER 1: Parunāsim par ūdeni.

3
00:00:01,960 --> 00:00:07,280
Ar šo problēmu, mēs lūdzam lietotājam pateikt
mums, cik ilgi minūtēs viņu zāle bija

4
00:00:07,280 --> 00:00:11,040
un tad mēs aprēķinām ekvivalents
skaits ūdens pudeles

5
00:00:11,040 --> 00:00:12,970
kas izmanto to duša.

6
00:00:12,970 --> 00:00:16,379
>> Tātad, kādi ir mūsu to-do s
par šo problēmu?

7
00:00:16,379 --> 00:00:20,050
Pirmkārt, mēs esam gatavojas vēlaties
lai ātri un pēc tam apstiprināt

8
00:00:20,050 --> 00:00:22,100
ievades ka lietotājs dod mums.

9
00:00:22,100 --> 00:00:24,790
Kad mēs nodrošinām, ka mēs
ir derīgs lietotāja ievadi,

10
00:00:24,790 --> 00:00:28,230
mēs ejam, lai aprēķinātu
līdzvērtīgs skaits ūdens pudeles

11
00:00:28,230 --> 00:00:30,770
ka lietotājs bija laikā
to duša, un tad mēs esam

12
00:00:30,770 --> 00:00:33,720
dodas, lai pastāstītu viņiem, ko
izdrukāšana šo numuru.

13
00:00:33,720 --> 00:00:37,230
>> Tātad, pieņemsim risināt mūsu pirmā
uzdevums, pamudinot un apstiprināšanu

14
00:00:37,230 --> 00:00:38,550
lietotāja ievadi.

15
00:00:38,550 --> 00:00:40,910
Par to mēs esam uzrakstījis
funkcija jūs sauc

16
00:00:40,910 --> 00:00:43,950
get_int atrodas CS50 bibliotēkā.

17
00:00:43,950 --> 00:00:48,710
get_int nodrošina, ka lietotājs ieejas
vesels skaitlis, tāpēc jebkurš pozitīviem skaitļiem,

18
00:00:48,710 --> 00:00:51,700
negatīvie skaitļi, vai
nulle visi pieņemti.

19
00:00:51,700 --> 00:00:55,900
Bet, ja lietotājs ievada kaut kas cits,
tāpēc jebkurš no burtiem vai cipariem kombinācija

20
00:00:55,900 --> 00:00:59,710
vai zīmēm aiz skaitļi, tad
lietotājam tiks piedāvāts vēlreiz

21
00:00:59,710 --> 00:01:04,319
un funkcija nepieņem neko
līdz lietotājs dod viņiem vesels skaitlis.

22
00:01:04,319 --> 00:01:06,410
>> Tātad, kā mēs izmantojam get_int?

23
00:01:06,410 --> 00:01:10,830
Ja jūs atvērt savu darba vietu un
izveidot failu ar nosaukumu integer.c pieņemsim

24
00:01:10,830 --> 00:01:12,110
ierakstiet sekojošo.

25
00:01:12,110 --> 00:01:14,760
Atsauce ietver cs50.h.

26
00:01:14,760 --> 00:01:18,480
Tas ir nepieciešams, jo get_int
ir CS50 bibliotēkas funkciju,

27
00:01:18,480 --> 00:01:21,890
tāpēc mums ir kā atsauci ietvert
tā deklarācija, lai

28
00:01:21,890 --> 00:01:23,370
lai izmantotu funkciju.

29
00:01:23,370 --> 00:01:26,570
Un tad mans galvenais
funkcionēt es esmu tikai gatavojas

30
00:01:26,570 --> 00:01:29,560
vienkārši zvanīt funkciju get_int.

31
00:01:29,560 --> 00:01:31,750
>> Tātad, pieņemsim palaist šo un redzēt, kā tā darbojas.

32
00:01:31,750 --> 00:01:35,092
Es jau esmu apkopojusi, tāpēc pieņemsim
vienkārši iet uz priekšu un palaist šo programmu,

33
00:01:35,092 --> 00:01:36,480
./vesels skaitlis.

34
00:01:36,480 --> 00:01:39,880
Te man ir tūlītēja un
lūk, kur es ievade vērtība.

35
00:01:39,880 --> 00:01:44,880
Teikt Man tikai daži skaitlim,
50, programma excepts un aizveras

36
00:01:44,880 --> 00:01:45,960
un tas, ka.

37
00:01:45,960 --> 00:01:49,350
>> Bet teikt, es palaist to atkal un
Es ievadi kaut kas cits.

38
00:01:49,350 --> 00:01:51,350
Iespējams, sveiki pasaule.

39
00:01:51,350 --> 00:01:55,660
Ka tas nav vesels skaitlis, tāpēc
programma liks man vēlreiz.

40
00:01:55,660 --> 00:01:59,160
Pamēģināsim vēlreiz ar
varbūt decimālais šoreiz.

41
00:01:59,160 --> 00:02:03,450
0.5, atkal, nav vesels skaitlis tik
programma nepieņem

42
00:02:03,450 --> 00:02:05,290
un tas būs man pateikt, lai mēģinātu vēlreiz.

43
00:02:05,290 --> 00:02:07,070
Tātad, pieņemsim arī tā citu numuru.

44
00:02:07,070 --> 00:02:09,830
Programmas pieņem to,
aizveras, un mēs esam darījuši.

45
00:02:09,830 --> 00:02:13,520
>> Tāpēc tagad mums ir funkcija
kas ļauj mums, un nodrošina

46
00:02:13,520 --> 00:02:16,790
ka lietotājs ievada
skaitlis, bet kā mēs varam

47
00:02:16,790 --> 00:02:20,330
faktiski sekot
skaitlis ievadīts lietotājs?

48
00:02:20,330 --> 00:02:25,260
Nu, viss, ko mēs darīsim, ir veikals
šī vērtība mainīgo, teiksim n.

49
00:02:25,260 --> 00:02:30,580
Tātad, ja es apliecinu vesels skaitlis N,
un es noteikti šo vērtību get_int,

50
00:02:30,580 --> 00:02:34,700
tad n tad uzglabāt neatkarīgi
vērtējam lietotāju ievietoto vārdu.

51
00:02:34,700 --> 00:02:38,620
>> Labi, tāpēc tagad mēs esam nodrošinājusi, ka
lietotājs dos mums vesels skaitlis

52
00:02:38,620 --> 00:02:42,550
un mēs zinām, kā izsekot
no skaitlim, bet atcerēties,

53
00:02:42,550 --> 00:02:45,610
veseli skaitļi ir gan pozitīvas, gan negatīvas.

54
00:02:45,610 --> 00:02:49,110
Tātad, tas nav īsti jēgas
saistībā ar šīs problēmas

55
00:02:49,110 --> 00:02:53,570
ka lietotājs veic dušā
no teikt negatīvas 12 minūtes.

56
00:02:53,570 --> 00:02:59,310
Tāpēc mums ir nepieciešams, lai pārliecinātos, ka lietotājs
faktiski dod mums pozitīvu skaitli.

57
00:02:59,310 --> 00:03:02,130
Tagad mums nav tikai
viena funkcija, kas,

58
00:03:02,130 --> 00:03:04,620
tāpēc mēs esam nāksies
lai radītu, ka mums pašiem.

59
00:03:04,620 --> 00:03:07,190
>> Tāpēc mēs vēlamies, lai nepārtraukti
nekavējoties lietotājam

60
00:03:07,190 --> 00:03:09,730
kamēr tie dod mums pozitīvu skaitli.

61
00:03:09,730 --> 00:03:14,300
Ja es esmu dara kaut ko nepārtraukti tad
kas ir līdzīgi cilpu, atkārtošanās.

62
00:03:14,300 --> 00:03:19,130
Tātad viens no konstrukcijas, ko mēs izmantojam
c īstenot atkārtošanos un cilpas

63
00:03:19,130 --> 00:03:20,410
ir kamēr cilpa.

64
00:03:20,410 --> 00:03:23,020
Tātad, kamēr cilpa, kā
Šeit redzams, veiks

65
00:03:23,020 --> 00:03:27,030
kāds ir organismā no cilpas, kā
kamēr dotajiem nosacījums novērtē

66
00:03:27,030 --> 00:03:27,900
patiess.

67
00:03:27,900 --> 00:03:30,640
Tiklīdz šis nosacījums
novērtē to nepatiesa, tad

68
00:03:30,640 --> 00:03:34,830
programma turpināsies, lai kāds
nāk pēc tam, kad no ķermeņa cilpas.

69
00:03:34,830 --> 00:03:39,400
>> Tāpēc, kamēr cilpas gatavojas
būt patiesi noderīga CS50.

70
00:03:39,400 --> 00:03:42,590
Bet šis konkrētais
lieta, mēs zinām, ka mēs esam

71
00:03:42,590 --> 00:03:48,140
gatavojas nekavējoties lietotājam vismaz
vienreiz un pēc tam tikai cilpa, ja nepieciešams.

72
00:03:48,140 --> 00:03:51,080
Tātad, šeit mēs nonākam pie
īpaša konstrukcija un tas ir

73
00:03:51,080 --> 00:03:55,020
ļoti līdzīgs, bet
cilpa sauc do-kamēr cilpa.

74
00:03:55,020 --> 00:03:58,840
>> So do-kamēr cilpa realizētu
ķermenis no cilpas vismaz vienreiz

75
00:03:58,840 --> 00:04:01,750
un tad tā pārbauda, ​​lai redzētu
vai tas būtu izpildīt,

76
00:04:01,750 --> 00:04:05,310
pretstatā kamēr cilpa,
kas būs pārbaudīt stāvokli

77
00:04:05,310 --> 00:04:07,200
un tad izpildīt ķermeni.

78
00:04:07,200 --> 00:04:11,880
Tātad ar do-kamēr cilpa, ko mēs varētu
darīt, ir nekavējoties lietotājam par skaitlim,

79
00:04:11,880 --> 00:04:14,450
un pēc tam pārbaudiet, vai tas ir nederīgs vai nav.

80
00:04:14,450 --> 00:04:18,130
Ja tas ir nederīgs, tad mēs
atkārtojiet procesu lūdzot lietotājam

81
00:04:18,130 --> 00:04:22,290
dot mums citu skaitli, un tad
tikai tad, kad tas skaitlis ir derīgs,

82
00:04:22,290 --> 00:04:25,060
mēs turpināsim
kāds nāk pēc tam.

83
00:04:25,060 --> 00:04:28,030
>> Tagad jūs pamanīsiet, ka
deklarācija skaitlim n

84
00:04:28,030 --> 00:04:31,670
ir nedaudz atšķirīgs, ko mēs
did pirms iepriekšējā piemērā

85
00:04:31,670 --> 00:04:33,640
un tas ir tāpēc, ka darbības jomas.

86
00:04:33,640 --> 00:04:37,920
Ja mēs būtu pasludināja skaitlim n iekšā
no ķermeņa do-kamēr cilpa,

87
00:04:37,920 --> 00:04:42,640
tad mēs nespētu piekļūt
ka vērtība n ārpus tiem cirtaini

88
00:04:42,640 --> 00:04:45,050
breketes norādot ķermeņa cilpas.

89
00:04:45,050 --> 00:04:51,080
Bet mēs patiesībā vēlas, lai piekļūtu
n vērtība vēlāk par mūsu programmu.

90
00:04:51,080 --> 00:04:55,730
>> Labi, tāpēc tagad parunāsim par
ko šis nosacījums būtu.

91
00:04:55,730 --> 00:05:00,400
Mēs vēlamies, lai tikai reprompt
lietotājs tik ilgi, kamēr n ir derīgs.

92
00:05:00,400 --> 00:05:04,640
Tāpēc domāju, ka, lai sev ko nederīgs
vesels vērtība būtu jāizskatās

93
00:05:04,640 --> 00:05:08,060
un pēc tam izveidot Būla
izteiksme izteikt to.

94
00:05:08,060 --> 00:05:13,070
>> Mēs gandrīz pabeigts ar mūsu apakšuzdevumu
no pamudinot un lietotāja ievadi apstiprināšanu.

95
00:05:13,070 --> 00:05:16,010
Tātad, pieņemsim padara šo maz
nedaudz vairāk lietotājam draudzīgu

96
00:05:16,010 --> 00:05:18,390
un sniedz lietotājam maz
Nedaudz vairāk informācijas

97
00:05:18,390 --> 00:05:20,510
par to, ko mēs esam pamudinot tos.

98
00:05:20,510 --> 00:05:24,500
Tātad, pieņemsim ātru lietotājam, vienu
spec, ar stīgu minūtes.

99
00:05:24,500 --> 00:05:28,935
Tātad, izmantojot savu printf paziņojumus, veikt
pārliecināts, ka jūs varat pielāgot to tieši.

100
00:05:28,935 --> 00:05:30,230
>> Viss kārtībā.

101
00:05:30,230 --> 00:05:33,840
Tāpēc tagad mums ir derīga lietotāju
ievade, pozitīvs skaitlis

102
00:05:33,840 --> 00:05:37,400
vērtība, cik minūtes
viņi pavadīja dušā.

103
00:05:37,400 --> 00:05:41,300
Tātad, kas ir blakus, ir aprēķināt
ekvivalents pudeļu skaitu.

104
00:05:41,300 --> 00:05:45,250
Ko mēs darīsim šeit varētu
būt ļoti skaidrs jums sākumā,

105
00:05:45,250 --> 00:05:46,640
un tas ir OK.

106
00:05:46,640 --> 00:05:49,320
Ko mēs vēlamies darīt, ir mums
vēlas sākt praktizēt

107
00:05:49,320 --> 00:05:53,810
ideja atklāt modeļus un
izstrādājot formulas problēmu.

108
00:05:53,810 --> 00:05:57,200
>> Tātad mēs teicis vienu spec
ka viena minūte dušā

109
00:05:57,200 --> 00:05:59,960
ir vienāda ar apmēram
12 pudeles ūdens.

110
00:05:59,960 --> 00:06:03,020
Tātad divas minūtes būtu
ir līdzvērtīga 24,

111
00:06:03,020 --> 00:06:05,850
un piecas minūtes būtu
ir līdzvērtīga 60.

112
00:06:05,850 --> 00:06:08,390
Tāpēc tagad, ja jūs domājat, ka
tev, tad pieņemsim

113
00:06:08,390 --> 00:06:10,390
redzēt, ja jūs varat nākt klajā
ar rakstu vai formula

114
00:06:10,390 --> 00:06:14,990
izteikt, ja mēs esam teikt, n
minūtes, cik daudz pudeles ūdens

115
00:06:14,990 --> 00:06:17,930
tas var būt izteikta ar n?

116
00:06:17,930 --> 00:06:20,680
>> Atkal, lai gan tas
varētu būt vienkāršs sākumā,

117
00:06:20,680 --> 00:06:23,240
vēlāk, kad mēs nokļūt
vairāk sarežģītas problēmas

118
00:06:23,240 --> 00:06:26,360
mēs spēsim vēlaties nokļūt
prakse identificēt

119
00:06:26,360 --> 00:06:30,120
modeļus un jaunattīstības formulas
izdomāt šīs lietas.

120
00:06:30,120 --> 00:06:33,450
>> C jums ir piekļuve
standarta aritmētiskās operācijas,

121
00:06:33,450 --> 00:06:36,520
saskaitīšanu, atņemšanu,
reizināšanu un dalīšanu.

122
00:06:36,520 --> 00:06:38,420
Tāpēc es ņemšu atstāt to
jūs tagad izdomāt

123
00:06:38,420 --> 00:06:41,300
kā izteikt
līdzvērtīgs skaits pudeļu

124
00:06:41,300 --> 00:06:43,990
ka lietotājs patērē
to dušu laikā.

125
00:06:43,990 --> 00:06:45,700
>> Labi, mēs esam gandrīz pabeigts.

126
00:06:45,700 --> 00:06:50,650
Mēs esam pamudināja lietotājam par viņu ieguldījumu,
mēs esam nodrošināja, ka tas ir derīgs ievade,

127
00:06:50,650 --> 00:06:53,330
un tad mēs esam izpētījuši, kā
lai aprēķinātu ekvivalentu

128
00:06:53,330 --> 00:06:55,480
pudeļu skaitu, ka viņi patērē.

129
00:06:55,480 --> 00:06:59,430
Tātad pēdējā lieta, kas jādara, ir izejas
ekvivalents pudeļu skaitu

130
00:06:59,430 --> 00:07:02,410
un cerams, rosinās
viņiem, lai saglabātu ūdeni.

131
00:07:02,410 --> 00:07:06,270
>> Outputting vērtību būs
būt printf paziņojums.

132
00:07:06,270 --> 00:07:09,720
Ja es gribēju pateikt, ka es
ir trīs mājdzīvnieki, piemēram,

133
00:07:09,720 --> 00:07:13,090
Es varētu izmantot printf paziņojumu
kas izskatās kaut kas līdzīgs šim.

134
00:07:13,090 --> 00:07:15,880
Man ir trīs mājdzīvnieki, un jauna
līnija jauku formatējumu.

135
00:07:15,880 --> 00:07:17,880
>> Tagad mēs negribam
vienkārši grūti kods lietas.

136
00:07:17,880 --> 00:07:20,740
Informējiet skaitu mana
pets laika gaitā mainās.

137
00:07:20,740 --> 00:07:25,080
Tad es esmu gatavojas izmantot
vietturi manā printf paziņojumu.

138
00:07:25,080 --> 00:07:27,350
Tātad šeit mans numurs ir vesels skaitlis.

139
00:07:27,350 --> 00:07:31,480
Tāpēc es esmu gatavojas veikt vietturi
par skaitlim, izmantojot% i.

140
00:07:31,480 --> 00:07:33,930
Es esmu gatavojas rakstīt virkni,
un tad pēc virknes

141
00:07:33,930 --> 00:07:38,000
Es rakstīt komatu un tad
mainīgais, ka es gribu, lai drukātu.

142
00:07:38,000 --> 00:07:42,730
Tā, ka vērtība tiks drukāts
vietā šajā viettura,% i.

143
00:07:42,730 --> 00:07:47,630
>> Jūs varat izmantot vietturus, kā
labi, uz pludiņiem ar% f.

144
00:07:47,630 --> 00:07:50,420
Jūs varat arī vairākas
vietturus ar virkni.

145
00:07:50,420 --> 00:07:53,950
Piemēram, ja man ir daži skaits
Suņu un daži kaķu skaitu,

146
00:07:53,950 --> 00:07:59,210
Man divas vietturus šeit un pēc tam
mani divi mainīgie attiecīgajā secībā.

147
00:07:59,210 --> 00:08:03,130
>> Tāpēc tagad, ka mēs zinām, kā drukāt
vērtības glabājas mainīgo,

148
00:08:03,130 --> 00:08:06,030
ļoti pēdējā lieta
darīt, ir nodrošināt, ka mēs

149
00:08:06,030 --> 00:08:10,920
izdrukāt vērtību precīzu formātā
norādīts specifikācijā.

150
00:08:10,920 --> 00:08:14,990
Ar to, ka mēs esam lika
lietotāju un apstiprinājis savu ieguldījumu.

151
00:08:14,990 --> 00:08:17,920
Tad mēs esam aprēķināts ekvivalentu
skaits ūdens pudeles

152
00:08:17,920 --> 00:08:22,100
ka tie patērē viņu dušu laikā,
un mēs esam izvadīt šo vērtību uz tiem.

153
00:08:22,100 --> 00:08:24,440
Un tā, mēs esam pabeiguši ūdeni.

154
00:08:24,440 --> 00:08:28,730
>> Mani sauc [? Zamila,?]
un tas ir CS50.

155
00:08:28,730 --> 00:08:29,909

