1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,960
ALTAVEU 1: Anem a parlar d'aigua.

3
00:00:01,960 --> 00:00:07,280
En aquest problema, es demanarà a l'usuari que digui
Ens quant de temps en minuts la dutxa era

4
00:00:07,280 --> 00:00:11,040
i després es calcula l'equivalent
nombre d'ampolles d'aigua

5
00:00:11,040 --> 00:00:12,970
que el seu dutxa utilitza.

6
00:00:12,970 --> 00:00:16,379
>> Quines són les nostres coses per fer
per a aquest problema?

7
00:00:16,379 --> 00:00:20,050
En primer lloc, anem a voler
per demanar i després validar

8
00:00:20,050 --> 00:00:22,100
l'entrada que l'usuari ens dóna.

9
00:00:22,100 --> 00:00:24,790
Una vegada que ens assegurem que ens
té entrada d'usuari vàlid,

10
00:00:24,790 --> 00:00:28,230
calcularem el
nombre equivalent d'ampolles d'aigua

11
00:00:28,230 --> 00:00:30,770
que l'usuari va tenir durant
la seva dutxa, i llavors estem

12
00:00:30,770 --> 00:00:33,720
dirà per
imprimir aquest nombre.

13
00:00:33,720 --> 00:00:37,230
>> Així que abordarem el nostre primer
tasca, el que va provocar i validar

14
00:00:37,230 --> 00:00:38,550
l'entrada de l'usuari.

15
00:00:38,550 --> 00:00:40,910
Per això hem escrit una
funció per a la qual va cridar

16
00:00:40,910 --> 00:00:43,950
get_int situat a la Biblioteca CS50.

17
00:00:43,950 --> 00:00:48,710
get_int assegura que les entrades de l'usuari
un enter, de manera que els números positius,

18
00:00:48,710 --> 00:00:51,700
els números negatius, o
S'accepten zero.

19
00:00:51,700 --> 00:00:55,900
No obstant això, si l'usuari introdueix qualsevol altra cosa,
pel que qualsevol combinació de lletres o números

20
00:00:55,900 --> 00:00:59,710
o nombres decimals, llavors el
usuari se li demanarà que torni a intentar

21
00:00:59,710 --> 00:01:04,319
i la funció no acceptarà res
fins que l'usuari els dóna un nombre enter.

22
00:01:04,319 --> 00:01:06,410
>> Llavors, com fem servir get_int?

23
00:01:06,410 --> 00:01:10,830
Si obre el seu espai de treball i
crear un arxiu anomenat integer.c anem

24
00:01:10,830 --> 00:01:12,110
escrigui el següent.

25
00:01:12,110 --> 00:01:14,760
Hashtag inclou cs50.h.

26
00:01:14,760 --> 00:01:18,480
Això és necessari perquè get_int
és una funció de biblioteca CS50,

27
00:01:18,480 --> 00:01:21,890
per la qual cosa hem d'incloure hashtag
la seva declaració per tal

28
00:01:21,890 --> 00:01:23,370
per utilitzar la funció.

29
00:01:23,370 --> 00:01:26,570
I després, en el meu principal
funciono només vaig

30
00:01:26,570 --> 00:01:29,560
simplement cridar a la funció get_int.

31
00:01:29,560 --> 00:01:31,750
>> Així que anem a executar això i veure com funciona.

32
00:01:31,750 --> 00:01:35,092
Ja he compilat, així que anem a
només seguir endavant i executar aquest programa,

33
00:01:35,092 --> 00:01:36,480
./enter.

34
00:01:36,480 --> 00:01:39,880
Aquí tinc una ràpida i
aquí és on l'entrada I el valor.

35
00:01:39,880 --> 00:01:44,880
Diguem que poso en tan sols algun sencer,
50, els s'exceptua del programa i es tanca

36
00:01:44,880 --> 00:01:45,960
i això és tot.

37
00:01:45,960 --> 00:01:49,350
>> Però dic el funciono de nou i
Jo d'entrada una mica més.

38
00:01:49,350 --> 00:01:51,350
Potser, hola món.

39
00:01:51,350 --> 00:01:55,660
Això no és un nombre enter de manera que la
programa em torni a intentar-.

40
00:01:55,660 --> 00:01:59,160
Anem a intentar-ho de nou amb
potser un decimal aquest moment.

41
00:01:59,160 --> 00:02:03,450
0,5, de nou, no un nombre enter pel
el programa no ho acceptarà

42
00:02:03,450 --> 00:02:05,290
i em diu que torni a intentar.

43
00:02:05,290 --> 00:02:07,070
Així que anem a donar-li un altre número.

44
00:02:07,070 --> 00:02:09,830
El programa accepta,
es tanca i ja hem acabat.

45
00:02:09,830 --> 00:02:13,520
>> Així que ara tenim una funció
que ens permet i garanteix

46
00:02:13,520 --> 00:02:16,790
que l'usuari introdueix una
sencer, però com podem

47
00:02:16,790 --> 00:02:20,330
de fet un seguiment de la
nombre enter introduïda per l'usuari?

48
00:02:20,330 --> 00:02:25,260
Bé, tot el que farem és botiga
aquest valor en una variable, diguem n.

49
00:02:25,260 --> 00:02:30,580
Així que si em declaro un enter n,
i em vaig posar aquest valor a get_int,

50
00:02:30,580 --> 00:02:34,700
llavors n després emmagatzemar el
valorar l'usuari introduït.

51
00:02:34,700 --> 00:02:38,620
>> Molt bé, així que ara ens hem assegurat que
l'usuari ens donarà un nombre enter

52
00:02:38,620 --> 00:02:42,550
i sabem com fer un seguiment
del nombre sencer, però recorda,

53
00:02:42,550 --> 00:02:45,610
són nombres enters positius i negatius.

54
00:02:45,610 --> 00:02:49,110
Pel que no té molt sentit
en el context d'aquest problema

55
00:02:49,110 --> 00:02:53,570
que l'usuari pren una dutxa
de, diguem, 12 minuts negatives.

56
00:02:53,570 --> 00:02:59,310
Pel que necessitem per assegurar-se que l'usuari
en realitat ens dóna un nombre enter positiu.

57
00:02:59,310 --> 00:03:02,130
Ara no tenim només una
funció única perquè,

58
00:03:02,130 --> 00:03:04,620
així que tindrem
per crear aquest nosaltres mateixos.

59
00:03:04,620 --> 00:03:07,190
>> Pel que volem contínuament
demanar a l'usuari

60
00:03:07,190 --> 00:03:09,730
fins que ens donin un nombre enter positiu.

61
00:03:09,730 --> 00:03:14,300
Si estic fent alguna cosa contínuament a continuació,
que és similar a un bucle, una repetició.

62
00:03:14,300 --> 00:03:19,130
Així que una de les construccions que fem servir
ac per posar en pràctica la repetició i bucles

63
00:03:19,130 --> 00:03:20,410
és un bucle while.

64
00:03:20,410 --> 00:03:23,020
Pel que un bucle while, com
es mostra aquí, s'executarà

65
00:03:23,020 --> 00:03:27,030
el que està en el cos del bucle com
sempre que la condició s'avalua donats

66
00:03:27,030 --> 00:03:27,900
true.

67
00:03:27,900 --> 00:03:30,640
Tan aviat com aquesta condició
avalua a false,

68
00:03:30,640 --> 00:03:34,830
el programa de procedir al
ve després que el cos del bucle.

69
00:03:34,830 --> 00:03:39,400
>> Així, mentre que els bucles es van a
ser realment útil en CS50.

70
00:03:39,400 --> 00:03:42,590
Però en aquest particular,
cas, sabem que estem

71
00:03:42,590 --> 00:03:48,140
va a demanar a l'usuari com a mínim
una vegada i només bucle si cal.

72
00:03:48,140 --> 00:03:51,080
Així que aquí arribem a una
construcció especial i això és

73
00:03:51,080 --> 00:03:55,020
molt similar al mentre
llaç diu un bucle do-while.

74
00:03:55,020 --> 00:03:58,840
>> Per tant un bucle do-while executa la
cos del bucle almenys un cop

75
00:03:58,840 --> 00:04:01,750
i després es comprova
si s'ha d'executar,

76
00:04:01,750 --> 00:04:05,310
a diferència d'un bucle while,
que comprovarà la condició

77
00:04:05,310 --> 00:04:07,200
i després executar el cos.

78
00:04:07,200 --> 00:04:11,880
Així que en un bucle do-while el que podríem
fer és demanar a l'usuari un nombre sencer,

79
00:04:11,880 --> 00:04:14,450
a continuació, comprovar si és vàlid o no.

80
00:04:14,450 --> 00:04:18,130
Si és vàlid, llavors anem a
repetir el procés preguntant a l'usuari

81
00:04:18,130 --> 00:04:22,290
per donar-nos un altre sencer, i després
només quan aquest sencer és vàlida,

82
00:04:22,290 --> 00:04:25,060
seguirem
el que ve després.

83
00:04:25,060 --> 00:04:28,030
>> Ara es donarà compte que la
declaració del nombre enter n

84
00:04:28,030 --> 00:04:31,670
és lleugerament diferent al que
ho va fer abans en l'exemple anterior

85
00:04:31,670 --> 00:04:33,640
i això és perquè d'abast.

86
00:04:33,640 --> 00:04:37,920
Si haguéssim declarat el sencer n a l'interior
del cos del bucle do-while,

87
00:04:37,920 --> 00:04:42,640
llavors no seria capaç d'accedir
que el valor de n fora dels arrissada

88
00:04:42,640 --> 00:04:45,050
tirants que indica el cos del bucle.

89
00:04:45,050 --> 00:04:51,080
Però nosaltres volem, de fet, per accedir a la
valor de n més endavant en el nostre programa.

90
00:04:51,080 --> 00:04:55,730
>> OK, així que ara anem a parlar de
el que aquesta condició ha de ser.

91
00:04:55,730 --> 00:05:00,400
Volem Nova sol·licitud només el
usuari, sempre i quan n no és vàlid.

92
00:05:00,400 --> 00:05:04,640
Així pensa a si mateix el que un invàlid
valor sencer es veuria

93
00:05:04,640 --> 00:05:08,060
i després crear un booleà
expressió per expressar això.

94
00:05:08,060 --> 00:05:13,070
>> Ja gairebé hem acabat amb la nostra subtasca
de preguntar i validar l'entrada de l'usuari.

95
00:05:13,070 --> 00:05:16,010
Així que anem a fer això una mica
mica més fàcil d'usar

96
00:05:16,010 --> 00:05:18,390
i donar a l'usuari una mica
mica més d'informació

97
00:05:18,390 --> 00:05:20,510
del que els estem sol·licitant-.

98
00:05:20,510 --> 00:05:24,500
Així que demanarem a l'usuari, per la
especificació, amb els minuts de cadena.

99
00:05:24,500 --> 00:05:28,935
Així, utilitzant els seus estats d'printf, fer
Assegureu-vos que coincideixi exactament això.

100
00:05:28,935 --> 00:05:30,230
>> Tot bé.

101
00:05:30,230 --> 00:05:33,840
Així que ara tenim un usuari vàlid
d'entrada, un nombre enter positiu

102
00:05:33,840 --> 00:05:37,400
valor pel nombre de minuts
que van passar a la dutxa.

103
00:05:37,400 --> 00:05:41,300
Llavors, què és el proper és calcular
el nombre equivalent d'ampolles.

104
00:05:41,300 --> 00:05:45,250
El que farem aquí podríem
ser molt obvi per a vostè al principi,

105
00:05:45,250 --> 00:05:46,640
i això està bé.

106
00:05:46,640 --> 00:05:49,320
El que volem fer és que
volen començar a practicar

107
00:05:49,320 --> 00:05:53,810
la idea de la detecció de patrons i
el desenvolupament de fórmules per al problema.

108
00:05:53,810 --> 00:05:57,200
>> Així se'ns diu per l'especificació
que en un minut a la dutxa

109
00:05:57,200 --> 00:05:59,960
és equivalent a al voltant de
12 ampolles d'aigua.

110
00:05:59,960 --> 00:06:03,020
De manera que ho faria dos minuts
equivalent a 24,

111
00:06:03,020 --> 00:06:05,850
i cinc minuts et
equivalent a 60.

112
00:06:05,850 --> 00:06:08,390
Així que ara si vostè pensa
vostè ho té, llavors anem a

113
00:06:08,390 --> 00:06:10,390
veure si es pot arribar
amb un patró o fórmula

114
00:06:10,390 --> 00:06:14,990
per expressar si hem dir, n
minuts, quantes ampolles d'aigua

115
00:06:14,990 --> 00:06:17,930
caldria ser expressada en termes de n?

116
00:06:17,930 --> 00:06:20,680
>> Un cop més, tot i que aquest
podria ser simple al principi,

117
00:06:20,680 --> 00:06:23,240
més endavant, quan s'arriba a
problemes més complicats

118
00:06:23,240 --> 00:06:26,360
anem a voler entrar en
la pràctica d'identificar

119
00:06:26,360 --> 00:06:30,120
patrons i les fórmules en desenvolupament
per entendre aquestes coses.

120
00:06:30,120 --> 00:06:33,450
>> Al c es té accés a
operacions aritmètiques estàndard,

121
00:06:33,450 --> 00:06:36,520
suma, resta,
multiplicació i divisió.

122
00:06:36,520 --> 00:06:38,420
Així que ho deixo a
ara a esbrinar

123
00:06:38,420 --> 00:06:41,300
la manera d'expressar la
nombre equivalent d'ampolles

124
00:06:41,300 --> 00:06:43,990
que l'usuari consumeix
durant la seva dutxa.

125
00:06:43,990 --> 00:06:45,700
>> Molt bé, estem gairebé fet.

126
00:06:45,700 --> 00:06:50,650
Hem demana a l'usuari per a la seva entrada,
ens hem assegurat que es tracta d'una entrada vàlida,

127
00:06:50,650 --> 00:06:53,330
i després hem descobert com
per calcular l'equivalent

128
00:06:53,330 --> 00:06:55,480
nombre d'ampolles que es consumeixen.

129
00:06:55,480 --> 00:06:59,430
Així que l'últim que cal fer és la sortida
el nombre equivalent d'ampolles

130
00:06:59,430 --> 00:07:02,410
i és d'esperar encoratjar
a conservar una mica d'aigua.

131
00:07:02,410 --> 00:07:06,270
>> La sortida serà el valor
ser una sentència printf.

132
00:07:06,270 --> 00:07:09,720
Si volia dir que em
tenir tres animals domèstics, per exemple,

133
00:07:09,720 --> 00:07:13,090
Jo podria utilitzar una instrucció printf
que es veu alguna cosa com això.

134
00:07:13,090 --> 00:07:15,880
Tinc tres animals domèstics, i un nou
línia per al format agradable.

135
00:07:15,880 --> 00:07:17,880
>> Ara no volem
coses simples de codi dur.

136
00:07:17,880 --> 00:07:20,740
Dir el nombre de la meva
mascotes canvia amb el temps.

137
00:07:20,740 --> 00:07:25,080
A continuació, vaig a fer ús de
marcadors de posició en la meva declaració printf.

138
00:07:25,080 --> 00:07:27,350
Així que aquí el meu número és un nombre sencer.

139
00:07:27,350 --> 00:07:31,480
Així que vaig a fer un marcador de posició
per a un sencer utilitzant% i.

140
00:07:31,480 --> 00:07:33,930
Vaig a escriure la cadena,
i després després de la cadena

141
00:07:33,930 --> 00:07:38,000
Escric una coma i després el
variable que vull imprimir.

142
00:07:38,000 --> 00:07:42,730
Així serà imprès aquest valor
en lloc d'aquest marcador de posició,% i.

143
00:07:42,730 --> 00:07:47,630
>> Podeu utilitzar marcadors de posició, com es
així, per als flotadors amb un% f.

144
00:07:47,630 --> 00:07:50,420
Vostè també pot tenir múltiples
marcadors de posició en una cadena.

145
00:07:50,420 --> 00:07:53,950
Per exemple, si tinc algun nombre
dels gossos i alguns nombre de gats,

146
00:07:53,950 --> 00:07:59,210
Poso dos marcadors de posició aquí i després
meus dos variables en ordre respectiu.

147
00:07:59,210 --> 00:08:03,130
>> Així que ara que sabem com imprimir
els valors emmagatzemats en les variables,

148
00:08:03,130 --> 00:08:06,030
l'última cosa que
fer és assegurar-se que ens

149
00:08:06,030 --> 00:08:10,920
imprimir el valor en el format exacte
s'indica en l'especificació.

150
00:08:10,920 --> 00:08:14,990
Amb això, hem impulsat la
usuari i es valida la seva entrada.

151
00:08:14,990 --> 00:08:17,920
a continuació, hem calculat l'equivalent
nombre d'ampolles d'aigua

152
00:08:17,920 --> 00:08:22,100
que consumeixen durant la seva dutxa,
i hem emet aquest valor per a ells.

153
00:08:22,100 --> 00:08:24,440
I així, hem completat l'aigua.

154
00:08:24,440 --> 00:08:28,730
>> El meu nom és [? Zamila ,?]
i això és CS50.

155
00:08:28,730 --> 00:08:29,909

