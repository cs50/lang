1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,960
SPEAKER 1: Spregovorimo o vodi.

3
00:00:01,960 --> 00:00:07,280
V ta problem, bomo od uporabnika zahteva, da povem
nas, kako dolgo v nekaj minutah je bil njihov tuš

4
00:00:07,280 --> 00:00:11,040
nato pa smo izračunali enakovredno
število steklenic vode

5
00:00:11,040 --> 00:00:12,970
ki se uporablja njihova tuš.

6
00:00:12,970 --> 00:00:16,379
>> Torej, kaj so naši do-do je
za ta problem?

7
00:00:16,379 --> 00:00:20,050
Najprej smo želeli
da zahteva in nato potrditi

8
00:00:20,050 --> 00:00:22,100
vhod, ki nas je uporabnik daje.

9
00:00:22,100 --> 00:00:24,790
Ko smo zagotovili, da bomo
ima veljaven vnos uporabnika,

10
00:00:24,790 --> 00:00:28,230
bomo za izračun
enakovredno število steklenic vode

11
00:00:28,230 --> 00:00:30,770
da ima uporabnik med
njihova tuš, nato pa smo

12
00:00:30,770 --> 00:00:33,720
dogaja, da jim povem, s
tiskanje to številko.

13
00:00:33,720 --> 00:00:37,230
>> Torej, kaj je, saj je naša prva
naloga, zaradi česar in potrjevanje

14
00:00:37,230 --> 00:00:38,550
uporabnik vhod.

15
00:00:38,550 --> 00:00:40,910
Za to smo napisali
Funkcija za vas imenuje

16
00:00:40,910 --> 00:00:43,950
get_int nahaja v CS50 knjižnici.

17
00:00:43,950 --> 00:00:48,710
get_int zagotavlja, da uporabnik vhodov
celo število, tako pozitivnimi številkami,

18
00:00:48,710 --> 00:00:51,700
negativne številke, ali
nič so vsi sprejeti.

19
00:00:51,700 --> 00:00:55,900
Ampak, če uporabnik vnese ničesar drugega,
zato bo vsaka kombinacija črk ali številk

20
00:00:55,900 --> 00:00:59,710
ali decimalno število, potem
Uporabnik bo zahteval, da poskusite znova

21
00:00:59,710 --> 00:01:04,319
in funkcije ne bodo sprejeli ničesar
dokler uporabnik jim daje celo število.

22
00:01:04,319 --> 00:01:06,410
>> Torej, kako bomo uporabili get_int?

23
00:01:06,410 --> 00:01:10,830
Če odprete svoj delovni prostor in
ustvariti datoteko z imenom integer.c dovolimo

24
00:01:10,830 --> 00:01:12,110
vnesite naslednje.

25
00:01:12,110 --> 00:01:14,760
Hashtag vključujejo cs50.h.

26
00:01:14,760 --> 00:01:18,480
To je potrebno zato, ker get_int
je funkcija CS50 knjižnica,

27
00:01:18,480 --> 00:01:21,890
zato moramo oznako teme vključiti
svojo izjavo, da

28
00:01:21,890 --> 00:01:23,370
Za uporabo funkcije.

29
00:01:23,370 --> 00:01:26,570
In potem v moji glavnega
deloval sem le, da bo

30
00:01:26,570 --> 00:01:29,560
preprosto pokličete funkcijo get_int.

31
00:01:29,560 --> 00:01:31,750
>> Torej, kaj je teči to in videli, kako deluje.

32
00:01:31,750 --> 00:01:35,092
Sem že pripravljeni, tako da je
samo pojdi naprej in zagon tega programa,

33
00:01:35,092 --> 00:01:36,480
./integer.

34
00:01:36,480 --> 00:01:39,880
Tukaj imam hitro in
tukaj, kjer sem vhodna vrednost.

35
00:01:39,880 --> 00:01:44,880
Da sem dal v samo nekaj celo,
50, program excepts in zapre

36
00:01:44,880 --> 00:01:45,960
in to je to.

37
00:01:45,960 --> 00:01:49,350
>> Ampak pravijo, enkrat sem ga vodijo in
Vnesel sem nekaj drugega.

38
00:01:49,350 --> 00:01:51,350
Morda, zdravo svet.

39
00:01:51,350 --> 00:01:55,660
To ni celo tako
Program me bo vprašal za ponovni poskus.

40
00:01:55,660 --> 00:01:59,160
Poskusimo znova z
morda decimalno tokrat.

41
00:01:59,160 --> 00:02:03,450
0,5, spet ne celo tako
program ne bo sprejeti

42
00:02:03,450 --> 00:02:05,290
in mi bo povedal, da poskusite znova.

43
00:02:05,290 --> 00:02:07,070
Torej, kaj je njeno drugo številko.

44
00:02:07,070 --> 00:02:09,830
Program sprejme,
zapre, in smo končali.

45
00:02:09,830 --> 00:02:13,520
>> Torej, zdaj imamo funkcijo
da nas in zagotavlja omogoča

46
00:02:13,520 --> 00:02:16,790
da uporabnik vložki
celo, ampak kako smo lahko

47
00:02:16,790 --> 00:02:20,330
dejansko slediti od
celo vnesene s strani uporabnika?

48
00:02:20,330 --> 00:02:25,260
No, vse bomo naredili, je trgovina
ta vrednost v spremenljivko, recimo n.

49
00:02:25,260 --> 00:02:30,580
Torej, če Izjavljam celo število n,
in sem nastaviti to vrednost na get_int,

50
00:02:30,580 --> 00:02:34,700
potem je n nato shranjuje karkoli
vrednost uporabnika vneseno.

51
00:02:34,700 --> 00:02:38,620
>> Dobro, zdaj smo zagotovili, da
uporabnik nam bo dala celo število

52
00:02:38,620 --> 00:02:42,550
in vemo, kako slediti
na celo število, vendar ne pozabite,

53
00:02:42,550 --> 00:02:45,610
cela števila so tako pozitivne kot negativne.

54
00:02:45,610 --> 00:02:49,110
Torej ne res ni smiselno
V okviru tega problema

55
00:02:49,110 --> 00:02:53,570
da uporabnik sprejme prho
od reči negativne 12 minut.

56
00:02:53,570 --> 00:02:59,310
Zato moramo zagotoviti, da uporabnik
pravzaprav nam daje pozitivno celo število.

57
00:02:59,310 --> 00:03:02,130
Zdaj nimamo le
eno funkcijo za to,

58
00:03:02,130 --> 00:03:04,620
tako da bomo imeli
za ustvarjanje, da sami.

59
00:03:04,620 --> 00:03:07,190
>> Zato želimo, da nenehno
poziv uporabniku

60
00:03:07,190 --> 00:03:09,730
dokler se nam pozitivno celo število.

61
00:03:09,730 --> 00:03:14,300
Če delam nekaj nenehno nato
to je podobno zanko, ponovitev.

62
00:03:14,300 --> 00:03:19,130
Tako eden izmed konstruktov, ki jih uporabljamo
vc za izvajanje ponovitev in zanke

63
00:03:19,130 --> 00:03:20,410
je medtem zanka.

64
00:03:20,410 --> 00:03:23,020
Torej, medtem ko je zanka, saj
prikazano tukaj, se izvrši

65
00:03:23,020 --> 00:03:27,030
kar je v telesu zanki
Dokler danih stanju ovrednoti

66
00:03:27,030 --> 00:03:27,900
na true.

67
00:03:27,900 --> 00:03:30,640
Takoj, ko ta pogoj
neresničen, potem

68
00:03:30,640 --> 00:03:34,830
Program se bo nadaljevala na kakršen koli
prihaja po telesu zanke.

69
00:03:34,830 --> 00:03:39,400
>> Torej, zanke, medtem ko se bodo
je zelo uporaben v CS50.

70
00:03:39,400 --> 00:03:42,590
Toda v tem zlasti
primer, vemo, da smo

71
00:03:42,590 --> 00:03:48,140
bo vsaj poziv uporabniku
enkrat, nato pa le zanka, če je potrebno.

72
00:03:48,140 --> 00:03:51,080
Torej, tukaj smo prišli k
Posebna konstrukt in da je

73
00:03:51,080 --> 00:03:55,020
Zelo podobna časa
zanka imenovano do-while zanko.

74
00:03:55,020 --> 00:03:58,840
>> Torej do-while zanko izpolnjuje tu
Telo zanke vsaj enkrat

75
00:03:58,840 --> 00:04:01,750
in potem preveri,
ali je treba izvesti,

76
00:04:01,750 --> 00:04:05,310
v nasprotju z while,
ki bo preveril stanje

77
00:04:05,310 --> 00:04:07,200
in nato izvedbo telo.

78
00:04:07,200 --> 00:04:11,880
Torej, v do-while, kar smo morda
storiti, je poziv uporabniku za celo število,

79
00:04:11,880 --> 00:04:14,450
in potem preveri, če je veljavna ali ne.

80
00:04:14,450 --> 00:04:18,130
Če je neveljavna, potem bomo
ponovite postopek uporanikove

81
00:04:18,130 --> 00:04:22,290
da nam še celo število, in nato
samo takrat, ko je to celo velja,

82
00:04:22,290 --> 00:04:25,060
bomo še naprej
kar pride kasneje.

83
00:04:25,060 --> 00:04:28,030
>> Zdaj boste opazili, da je
izjava celo število n

84
00:04:28,030 --> 00:04:31,670
je nekoliko drugačen, kar smo
si prej v prejšnjem primeru

85
00:04:31,670 --> 00:04:33,640
in to zato, ker obsega.

86
00:04:33,640 --> 00:04:37,920
Če smo imeli znotraj razglasili celo število n
telesa naredi medtem ko zanke,

87
00:04:37,920 --> 00:04:42,640
potem ne bi mogli dostopati
da vrednost n izven teh Curly

88
00:04:42,640 --> 00:04:45,050
naramnice z navedbo organa zanke.

89
00:04:45,050 --> 00:04:51,080
Ampak mi v resnici želijo dostop do
vrednost n kasneje v našem programu.

90
00:04:51,080 --> 00:04:55,730
>> OK, zdaj pa govorimo o
kaj naj bi ta pogoj.

91
00:04:55,730 --> 00:05:00,400
Želimo reprompt le
Uporabnik tako dolgo, kot je n neveljavna.

92
00:05:00,400 --> 00:05:04,640
Tako da mislim, da si kaj neveljavno
celo vrednost bi izgledal

93
00:05:04,640 --> 00:05:08,060
in nato ustvarite Boolean
izraz, izraziti, da je.

94
00:05:08,060 --> 00:05:13,070
>> Skoraj smo končali z našim Podopravilo
iz česar in potrjevanje uporabnik vložek.

95
00:05:13,070 --> 00:05:16,010
Torej, kaj je, da je to malo
malo bolj prijazen do uporabnika

96
00:05:16,010 --> 00:05:18,390
in daje uporabniku malo
bit več informacij

97
00:05:18,390 --> 00:05:20,510
tega, kar smo jih zaradi česar za.

98
00:05:20,510 --> 00:05:24,500
Torej, kaj je poziv uporabniku, na
spec, z nizom minut.

99
00:05:24,500 --> 00:05:28,935
Torej, z uporabo svoje printf izjave, da
prepričani, da se ujemajo prav to.

100
00:05:28,935 --> 00:05:30,230
>> V redu.

101
00:05:30,230 --> 00:05:33,840
Torej, zdaj imamo veljavno uporabnika
vhod, pozitivno celo

102
00:05:33,840 --> 00:05:37,400
Vrednost za koliko minut
so preživeli pod prho.

103
00:05:37,400 --> 00:05:41,300
Torej, kaj je zraven je za izračun
enakovredno število steklenic.

104
00:05:41,300 --> 00:05:45,250
Kaj se bomo na tem mestu lahko
je zelo očitno, da vas na prvi,

105
00:05:45,250 --> 00:05:46,640
in da je v redu.

106
00:05:46,640 --> 00:05:49,320
Kaj želimo narediti je, da smo
želim začeti vaditi

107
00:05:49,320 --> 00:05:53,810
Ideja za odkrivanje vzorcev in
razvoj formule za problem.

108
00:05:53,810 --> 00:05:57,200
>> Tako smo povedali na spec
da je ena minuta pod prho

109
00:05:57,200 --> 00:05:59,960
približno ustreza
12 steklenic vode.

110
00:05:59,960 --> 00:06:03,020
Torej dve minuti bi
enakovredna 24,

111
00:06:03,020 --> 00:06:05,850
in pet minut bi
enakovredna 60.

112
00:06:05,850 --> 00:06:08,390
Zdaj, če menite,
ste ga dobili, potem pa

113
00:06:08,390 --> 00:06:10,390
poglej, če lahko pride do
z vzorcem ali s formulo

114
00:06:10,390 --> 00:06:14,990
izraziti, če rečemo, n
minut, koliko steklenic vode

115
00:06:14,990 --> 00:06:17,930
bi, da se izrazi v n?

116
00:06:17,930 --> 00:06:20,680
>> Ponovno, čeprav to
je lahko preprosta na prvi,

117
00:06:20,680 --> 00:06:23,240
kasneje, ko smo prišli do
bolj zapletene težave

118
00:06:23,240 --> 00:06:26,360
bomo želeli priti v
Praksa ugotavljanja

119
00:06:26,360 --> 00:06:30,120
vzorci in razvoju formule
ugotoviti te stvari.

120
00:06:30,120 --> 00:06:33,450
>> V c imate dostop do
standardne aritmetične operacije,

121
00:06:33,450 --> 00:06:36,520
seštevanje, odštevanje,
množenje in deljenje.

122
00:06:36,520 --> 00:06:38,420
Torej bom pustimo, da
zdaj, da ugotovimo,

123
00:06:38,420 --> 00:06:41,300
kako se izražajo
enakovredno število steklenic

124
00:06:41,300 --> 00:06:43,990
da uporabnik porabljene
med prho.

125
00:06:43,990 --> 00:06:45,700
>> Vse je v redu, smo že skoraj pri koncu.

126
00:06:45,700 --> 00:06:50,650
Mi smo poziv uporabniku za njihov prispevek,
smo zagotovili, da je veljavna vhod,

127
00:06:50,650 --> 00:06:53,330
in potem smo ugotovili, kako
za izračun ekvivalenta

128
00:06:53,330 --> 00:06:55,480
število steklenic, ki jih zaužijejo.

129
00:06:55,480 --> 00:06:59,430
Torej, zadnja stvar je, da izhod
enakovredno število steklenic

130
00:06:59,430 --> 00:07:02,410
in upajmo, da spodbujajo
jim za ohranitev nekaj vode.

131
00:07:02,410 --> 00:07:06,270
>> Prikazovanje vrednosti bo
je izjava printf.

132
00:07:06,270 --> 00:07:09,720
Če bi želeli, da vam povem, da sem
imajo tri živali, na primer,

133
00:07:09,720 --> 00:07:13,090
Lahko bi uporabili izjavo printf
ki izgleda nekako takole.

134
00:07:13,090 --> 00:07:15,880
Imam tri hišne ljubljenčke, in novo
linija za lepo oblikovanje.

135
00:07:15,880 --> 00:07:17,880
>> Zdaj ne želimo, da
preprosto težko koda stvari.

136
00:07:17,880 --> 00:07:20,740
Povejte, da število mojih
živali spreminja skozi čas.

137
00:07:20,740 --> 00:07:25,080
Potem bom izkoristiti
ograd v moji printf izida.

138
00:07:25,080 --> 00:07:27,350
Torej, tukaj moja številka je celo število.

139
00:07:27,350 --> 00:07:31,480
Torej, jaz bom, da bo ogrado
za celo uporabo% i.

140
00:07:31,480 --> 00:07:33,930
Bom napisati niz,
in nato po nizu

141
00:07:33,930 --> 00:07:38,000
Pišem vejico in nato
spremenljivka, ki ga želim natisniti.

142
00:07:38,000 --> 00:07:42,730
Tako se bo ta vrednost tiskani
namesto te ograde,% i.

143
00:07:42,730 --> 00:07:47,630
>> Lahko uporabite ograde, kot
dobro, za boje z% f.

144
00:07:47,630 --> 00:07:50,420
Lahko tudi večkratni
ograd v nizu.

145
00:07:50,420 --> 00:07:53,950
Na primer, če imam številko
psov in nekaj več mačk,

146
00:07:53,950 --> 00:07:59,210
Sem dal dva ograde tukaj in nato
moji dve spremenljivki v posamezni vrstnem redu.

147
00:07:59,210 --> 00:08:03,130
>> Zdaj, ko vemo, kako tiskati
shranjene vrednosti spremenljivk,

148
00:08:03,130 --> 00:08:06,030
zelo zadnja stvar
storiti, je, da bomo

149
00:08:06,030 --> 00:08:10,920
tiskanje vrednost v natančno obliko
navedeno v specifikaciji.

150
00:08:10,920 --> 00:08:14,990
S tem smo spodbudili
Uporabnik in potrditi njihov prispevek.

151
00:08:14,990 --> 00:08:17,920
Smo nato izračuna protivrednost
število steklenic vode

152
00:08:17,920 --> 00:08:22,100
da porabijo med prho,
in smo na izhodu to vrednost do njih.

153
00:08:22,100 --> 00:08:24,440
In tako smo zaključili z vodo.

154
00:08:24,440 --> 00:08:28,730
>> Ime mi je [? Zamila,?]
in to je CS50.

155
00:08:28,730 --> 00:08:29,909

