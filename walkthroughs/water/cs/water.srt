1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,960
HLAS 1: Mluvme o vodě.

3
00:00:01,960 --> 00:00:07,280
V tomto problému, žádáme uživatele, aby sdělit
nám, jak dlouho v několika minutách jejich sprchy byly

4
00:00:07,280 --> 00:00:11,040
a pak počítáme ekvivalent
počet lahví vody

5
00:00:11,040 --> 00:00:12,970
že jejich sprcha použít.

6
00:00:12,970 --> 00:00:16,379
>> Takže jaké jsou naše na-do je
Pro tento problém?

7
00:00:16,379 --> 00:00:20,050
Za prvé, budeme chtít
výzvu a potvrďte

8
00:00:20,050 --> 00:00:22,100
vstup, který nám dává uživateli.

9
00:00:22,100 --> 00:00:24,790
Poté, co jsme zjistili, že jsme
mají platné vstup uživatele,

10
00:00:24,790 --> 00:00:28,230
jdeme pro výpočet
přepočtený počet lahví vody

11
00:00:28,230 --> 00:00:30,770
že uživatel měl v průběhu
Jejich sprcha, a pak jsme

12
00:00:30,770 --> 00:00:33,720
bude jim to podle
vytisknout toto číslo.

13
00:00:33,720 --> 00:00:37,230
>> Takže pojďme řešit naše první
úkol, pobízet a ověřování

14
00:00:37,230 --> 00:00:38,550
vstup uživatele.

15
00:00:38,550 --> 00:00:40,910
Za tímto účelem jsme napsala
Funkce pro vás zavolal

16
00:00:40,910 --> 00:00:43,950
get_int nachází v CS50 knihovny.

17
00:00:43,950 --> 00:00:48,710
get_int zajišťuje, že uživatel vstupy
celé číslo, takže jakékoliv kladných čísel

18
00:00:48,710 --> 00:00:51,700
záporná čísla, nebo
nula jsou přijímány.

19
00:00:51,700 --> 00:00:55,900
Ale v případě, že uživatel zadá něco jiného,
takže libovolná kombinace písmen nebo číslic

20
00:00:55,900 --> 00:00:59,710
nebo desetinná čísla, pak se
Uživatel bude vyzván, aby znovu

21
00:00:59,710 --> 00:01:04,319
a funkce nebude nic akceptovat
dokud jim uživatel dává celé číslo.

22
00:01:04,319 --> 00:01:06,410
>> Tak jak používáme get_int?

23
00:01:06,410 --> 00:01:10,830
Pokud otevřete svůj pracovní prostor a
vytvořit soubor s názvem integer.c pojďme

24
00:01:10,830 --> 00:01:12,110
zadejte následující.

25
00:01:12,110 --> 00:01:14,760
Hashtag patří cs50.h.

26
00:01:14,760 --> 00:01:18,480
To je nutné, protože get_int
je funkce cs50 knihovna,

27
00:01:18,480 --> 00:01:21,890
takže musíme hashtag zahrnovat
jeho prohlášení za účelem

28
00:01:21,890 --> 00:01:23,370
používat funkci.

29
00:01:23,370 --> 00:01:26,570
A pak v mém hlavním
fungovaly Právě jdu

30
00:01:26,570 --> 00:01:29,560
jednoduše volání funkce get_int.

31
00:01:29,560 --> 00:01:31,750
>> Takže pojďme běžet to a uvidíte, jak to funguje.

32
00:01:31,750 --> 00:01:35,092
Už jsem sestavil to, tak pojďme
prostě jít dopředu a spustit tento program,

33
00:01:35,092 --> 00:01:36,480
./celé číslo.

34
00:01:36,480 --> 00:01:39,880
Tady mám výzva a
Zde je místo, kde jsem vstupní hodnota.

35
00:01:39,880 --> 00:01:44,880
Řekněme, že jsem dal jen některé integer,
50, program excepts a ukončí

36
00:01:44,880 --> 00:01:45,960
a to je to.

37
00:01:45,960 --> 00:01:49,350
>> Ale říct, že jsem jej spustit znovu a
I vstup něco jiného.

38
00:01:49,350 --> 00:01:51,350
Možná, hello world.

39
00:01:51,350 --> 00:01:55,660
To není celé číslo, takže
Program mě vyzve k opakování.

40
00:01:55,660 --> 00:01:59,160
Zkusíme to znovu s
snad desítkové tentokrát.

41
00:01:59,160 --> 00:02:03,450
0,5, opět, není celé číslo, takže
program nebude přijímám ho

42
00:02:03,450 --> 00:02:05,290
a to mi řekne k opakování.

43
00:02:05,290 --> 00:02:07,070
Takže dejme tomu jiné číslo.

44
00:02:07,070 --> 00:02:09,830
Program akceptuje to,
ukončí, a my jsme udělali.

45
00:02:09,830 --> 00:02:13,520
>> Takže teď máme funkci
že nám umožňuje a zajišťuje

46
00:02:13,520 --> 00:02:16,790
že uživatel zadá
integer, ale jak můžeme

47
00:02:16,790 --> 00:02:20,330
ve skutečnosti sledovat z
celé číslo zadaných uživatelem?

48
00:02:20,330 --> 00:02:25,260
No, to vše budeme dělat, je obchod
tato hodnota v proměnné, řekněme n.

49
00:02:25,260 --> 00:02:30,580
Takže pokud Prohlašuji celé číslo n,
I a nastavit tuto hodnotu na get_int,

50
00:02:30,580 --> 00:02:34,700
pak n pak uložit cokoliv
cení uživatele přivedený.

51
00:02:34,700 --> 00:02:38,620
>> Dobře, takže teď máme zajištěno, že
Uživatel nám dá celé číslo

52
00:02:38,620 --> 00:02:42,550
a víme, jak sledovat
o celé číslo, ale pamatujte,

53
00:02:42,550 --> 00:02:45,610
čísla jsou jak pozitivní, tak negativní.

54
00:02:45,610 --> 00:02:49,110
Takže to není opravdu smysl
V souvislosti s tímto problémem

55
00:02:49,110 --> 00:02:53,570
že uživatel má sprchu
řekněme negativní 12 minut.

56
00:02:53,570 --> 00:02:59,310
Takže potřebujeme, aby se ujistil, že uživatel
ve skutečnosti nám dává kladné celé číslo.

57
00:02:59,310 --> 00:03:02,130
Teď nemáme jen
single funkce za to,

58
00:03:02,130 --> 00:03:04,620
takže budeme mít
k vytvoření že sami.

59
00:03:04,620 --> 00:03:07,190
>> Takže chceme neustále
vyzve uživatele

60
00:03:07,190 --> 00:03:09,730
dokud se nám kladné celé číslo.

61
00:03:09,730 --> 00:03:14,300
V případě, že dělám něco nepřetržitě poté
to je podobný smyčky, opakování.

62
00:03:14,300 --> 00:03:19,130
Takže jedním z konstruktů, které používáme
vc realizovat opakování a smyčky

63
00:03:19,130 --> 00:03:20,410
Je while.

64
00:03:20,410 --> 00:03:23,020
Takže while, as
Zde je ukázáno, vykoná

65
00:03:23,020 --> 00:03:27,030
co je v těle smyčky jako
Dokud daných podmínka vyhodnocena

66
00:03:27,030 --> 00:03:27,900
true.

67
00:03:27,900 --> 00:03:30,640
Jakmile je tato podmínka
vyhodnocuje jako nepravdivý, pak

68
00:03:30,640 --> 00:03:34,830
Program bude pokračovat na cokoliv
přichází po těla smyčky.

69
00:03:34,830 --> 00:03:39,400
>> Takže zatímco smyčky budou
bylo opravdu užitečné v CS50.

70
00:03:39,400 --> 00:03:42,590
Ale v tomto konkrétním
Případ, víme, že jsme

71
00:03:42,590 --> 00:03:48,140
chystá vyzvat uživatele přinejmenším
jednou a to pouze smyčky v případě potřeby.

72
00:03:48,140 --> 00:03:51,080
Tak tady se dostáváme k
Speciální konstrukce a to je

73
00:03:51,080 --> 00:03:55,020
velmi podobný chvíli
smyčka volal do-while smyčku.

74
00:03:55,020 --> 00:03:58,840
>> Takže do-while provádí
tělo smyčky alespoň jednou

75
00:03:58,840 --> 00:04:01,750
a pak zkontroluje
zda by měl vykonat,

76
00:04:01,750 --> 00:04:05,310
na rozdíl od while,
který bude kontrolovat stav

77
00:04:05,310 --> 00:04:07,200
a pak spustit tělo.

78
00:04:07,200 --> 00:04:11,880
Takže v do-while, co bychom mohli
udělat, je vyzve uživatele k celé číslo,

79
00:04:11,880 --> 00:04:14,450
a pak zkontrolovat, jestli je to neplatný nebo není.

80
00:04:14,450 --> 00:04:18,130
Pokud je to neplatné, pak budeme
opakujte postup s dotazem uživatele

81
00:04:18,130 --> 00:04:22,290
aby nám dal další číslo, a poté
pouze v případě, že číslo je platný,

82
00:04:22,290 --> 00:04:25,060
budeme i nadále
co nastane později.

83
00:04:25,060 --> 00:04:28,030
>> Nyní si všimněte si, že
Prohlášení o celé číslo n

84
00:04:28,030 --> 00:04:31,670
se mírně liší od toho, co jsme
předtím v předchozím příkladě

85
00:04:31,670 --> 00:04:33,640
a to proto, že rozsah.

86
00:04:33,640 --> 00:04:37,920
Kdybychom prohlášena Číslo n uvnitř
z těla do-while smyčky,

87
00:04:37,920 --> 00:04:42,640
pak bychom nebyli schopni získat přístup
že hodnota n mimo těch kadeřavých

88
00:04:42,640 --> 00:04:45,050
šle uvedením těla smyčky.

89
00:04:45,050 --> 00:04:51,080
Ale my ve skutečnosti chtějí přístup k
Hodnota n později v našem programu.

90
00:04:51,080 --> 00:04:55,730
>> OK, takže teď pojďme mluvit o
co tato podmínka měla být.

91
00:04:55,730 --> 00:05:00,400
Chceme reprompt jen
Uživatel tak dlouho, dokud n je neplatný.

92
00:05:00,400 --> 00:05:04,640
Takže myslíte, že na sebe, co je neplatný
celočíselná hodnota bude vypadat

93
00:05:04,640 --> 00:05:08,060
a pak vytvořit logickou
Výraz, který má vyjádřit, že.

94
00:05:08,060 --> 00:05:13,070
>> Jsme téměř u konce s naší podúkol
podněcovat a ověřování uživatelského vstupu.

95
00:05:13,070 --> 00:05:16,010
Takže pojďme udělat to trochu
trochu více uživatelsky přívětivé

96
00:05:16,010 --> 00:05:18,390
a dát uživateli trochu
bit více informací

97
00:05:18,390 --> 00:05:20,510
z toho, co jsme jim výzvy k.

98
00:05:20,510 --> 00:05:24,500
Takže pojďme vyzve uživatele, dle
spec, s řetězcem minut.

99
00:05:24,500 --> 00:05:28,935
Takže pomocí své printf prohlášení, aby
Ujistěte se, že zápas to přesně.

100
00:05:28,935 --> 00:05:30,230
>> Dobře.

101
00:05:30,230 --> 00:05:33,840
Takže teď máme platného uživatele
vstup, kladné celé číslo

102
00:05:33,840 --> 00:05:37,400
Hodnota za kolik minut
strávili ve sprše.

103
00:05:37,400 --> 00:05:41,300
Takže co dál je vypočítat
ekvivalentní počet lahví.

104
00:05:41,300 --> 00:05:45,250
Co budeme dělat tady mohl
bude pro vás zcela zřejmá na první pohled,

105
00:05:45,250 --> 00:05:46,640
a to je v pořádku.

106
00:05:46,640 --> 00:05:49,320
To, co chceme udělat, je, že jsme
chtějí začít cvičit

107
00:05:49,320 --> 00:05:53,810
Myšlenka odhalovat a
rozvíjení vzorce pro výpočet tohoto problému.

108
00:05:53,810 --> 00:05:57,200
>> Takže nám bylo řečeno na spec
že jedna minuta ve sprše

109
00:05:57,200 --> 00:05:59,960
odpovídá přibližně
12 lahví s vodou.

110
00:05:59,960 --> 00:06:03,020
Tak dvě minuty by
se rovná 24,

111
00:06:03,020 --> 00:06:05,850
a pět minut by
se rovná 60.

112
00:06:05,850 --> 00:06:08,390
Takže teď, pokud si myslíte,
máte to a pak Nechal

113
00:06:08,390 --> 00:06:10,390
uvidíme, jestli můžete přijít
se vzorem nebo obecného vzorce

114
00:06:10,390 --> 00:06:14,990
vyjádřit, zda jsme říci, n
minut, kolik láhve s vodou

115
00:06:14,990 --> 00:06:17,930
by to být vyjádřena z hlediska n?

116
00:06:17,930 --> 00:06:20,680
>> Opět platí, že i když tato
může být jednoduchý na první,

117
00:06:20,680 --> 00:06:23,240
později, když se dostaneme do
složitější problémy

118
00:06:23,240 --> 00:06:26,360
budeme chtít dostat do
praxe identifikace

119
00:06:26,360 --> 00:06:30,120
vzory a rozvojových formule
vyřešit tyto věci ven.

120
00:06:30,120 --> 00:06:33,450
>> Vc máte přístup k
standardní aritmetické operace,

121
00:06:33,450 --> 00:06:36,520
sčítání, odčítání,
násobení a dělení.

122
00:06:36,520 --> 00:06:38,420
Takže nechám to na
Nyní se přijít na to,

123
00:06:38,420 --> 00:06:41,300
jak vyjádřit
přepočtený počet lahví

124
00:06:41,300 --> 00:06:43,990
že uživatel spotřebuje
během jejich sprchou.

125
00:06:43,990 --> 00:06:45,700
>> Dobře, my jsme skoro hotovi.

126
00:06:45,700 --> 00:06:50,650
Máme výzva uživateli pro jejich vstup,
máme zajištěno, že je to platný vstup,

127
00:06:50,650 --> 00:06:53,330
a pak jsme zjistili, jak
pro výpočet ekvivalentu

128
00:06:53,330 --> 00:06:55,480
počet lahví, které konzumovaly.

129
00:06:55,480 --> 00:06:59,430
Takže poslední věc, kterou musíte udělat, je výstup
ekvivalentní počet naplněných lahví

130
00:06:59,430 --> 00:07:02,410
a snad podnítí
aby šetřit vodu.

131
00:07:02,410 --> 00:07:06,270
>> Výstup hodnoty budou
být prohlášení printf.

132
00:07:06,270 --> 00:07:09,720
Pokud bych vám chtěl říct, že jsem
tři zvířata, například,

133
00:07:09,720 --> 00:07:13,090
Mohl bych použít příkaz printf
která vypadá nějak takto.

134
00:07:13,090 --> 00:07:15,880
Mám tři zvířata, a nová
linka pro pěkné formátování.

135
00:07:15,880 --> 00:07:17,880
>> Teď nechceme, aby
jednoduše pevný kód věci.

136
00:07:17,880 --> 00:07:20,740
Řekněme, že počet my
domácí zvířata se mění v průběhu času.

137
00:07:20,740 --> 00:07:25,080
Pak budu využívat
zástupné symboly v mém prohlášení printf.

138
00:07:25,080 --> 00:07:27,350
Tak tady moje číslo je celé číslo.

139
00:07:27,350 --> 00:07:31,480
Takže jdu dělat zástupný symbol
představuje celé číslo s použitím% i.

140
00:07:31,480 --> 00:07:33,930
Jdu psát řetězec,
a pak po řetězec

141
00:07:33,930 --> 00:07:38,000
Píšu čárku a potom se
proměnná, která Chci vytisknout.

142
00:07:38,000 --> 00:07:42,730
Takže hodnota bude vytištěn
namísto toho zástupný,% i.

143
00:07:42,730 --> 00:07:47,630
>> Můžete použít zástupné symboly, as
No, plováky s% F.

144
00:07:47,630 --> 00:07:50,420
Můžete mít také vícenásobné
zástupné symboly v řetězci.

145
00:07:50,420 --> 00:07:53,950
Například, když mám určitý počet
psů a koček určitý počet,

146
00:07:53,950 --> 00:07:59,210
Dal jsem dva zástupné symboly sem a poté
moje dvě proměnné v daném pořadí.

147
00:07:59,210 --> 00:08:03,130
>> Takže teď, když víme, jak vytisknout
hodnoty uložené v proměnných,

148
00:08:03,130 --> 00:08:06,030
ta poslední věc,
udělat, je zajistit, abychom

149
00:08:06,030 --> 00:08:10,920
vytisknout hodnotu v přesném formátu
je uvedeno ve specifikaci.

150
00:08:10,920 --> 00:08:14,990
S tím jsme přiměly
Uživatel a ověřen jejich vstup.

151
00:08:14,990 --> 00:08:17,920
My jsme pak vypočítá ekvivalent
počet lahví vody

152
00:08:17,920 --> 00:08:22,100
že spotřebují během jejich společným sprchovým koutem,
a my jsme tuto hodnotu na výstupu k nim.

153
00:08:22,100 --> 00:08:24,440
A tak jsme dokončili vodu.

154
00:08:24,440 --> 00:08:28,730
>> Jmenuji se [? Zamila,?]
a to je CS50.

155
00:08:28,730 --> 00:08:29,909

