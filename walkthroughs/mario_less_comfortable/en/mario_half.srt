1
00:00:00,000 --> 00:00:17,059
>> [MUSIC PLAYING]

2
00:00:17,059 --> 00:00:21,170
>> This is CS50-- Harvard
University's introduction

3
00:00:21,170 --> 00:00:24,070
to the intellectual
enterprises of computer science

4
00:00:24,070 --> 00:00:25,800
and the art of programming.

5
00:00:25,800 --> 00:00:29,020
And my name is David Malan, and
I was just thinking this morning,

6
00:00:29,020 --> 00:00:35,120
it's been amazingly 20 years today
since I last sat where you guys do now.

7
00:00:35,120 --> 00:00:35,840
>> It was 1996.

8
00:00:35,840 --> 00:00:39,550
I was a sophomore, and I was taking
CS50 for the very first time.

9
00:00:39,550 --> 00:00:42,890
And I hadn't even gotten up the nerve
to take it myself freshman year,

10
00:00:42,890 --> 00:00:44,500
partly because of the time.

11
00:00:44,500 --> 00:00:46,782
Computer science to me
was kind of like, meh.

12
00:00:46,782 --> 00:00:48,990
I was a bit of a geek growing
up, but I didn't really

13
00:00:48,990 --> 00:00:51,180
have any intellectual
interest in what appeared

14
00:00:51,180 --> 00:00:53,920
to just be a whole bunch of
people programming all the time.

15
00:00:53,920 --> 00:00:55,904
>> And I was scared to be honest.

16
00:00:55,904 --> 00:00:58,820
The course and computer science more
generally had and to some extent,

17
00:00:58,820 --> 00:01:03,230
still has this reputation of a field to
beware, if only because so many of us

18
00:01:03,230 --> 00:01:06,410
are unfamiliar with it and unsure of it.

19
00:01:06,410 --> 00:01:10,480
And it really wasn't until I shopped
this class that sophomore fall--

20
00:01:10,480 --> 00:01:12,880
and even then, I only enrolled
because the professor--

21
00:01:12,880 --> 00:01:15,950
one of my first mentors, Brian
Kernighan now at Princeton--

22
00:01:15,950 --> 00:01:17,700
allowed me to take the class pass fail.

23
00:01:17,700 --> 00:01:20,020
And indeed, that's why
today we allow and encourage

24
00:01:20,020 --> 00:01:22,030
students to take this class sat/unsat.

25
00:01:22,030 --> 00:01:24,040
>> And only then, by the
end of the semester

26
00:01:24,040 --> 00:01:26,870
did I realize like, wow, this
wasn't such an unfamiliar field.

27
00:01:26,870 --> 00:01:28,850
Indeed, this was a
very empowering field,

28
00:01:28,850 --> 00:01:30,970
and more excitingly,
especially later on,

29
00:01:30,970 --> 00:01:34,809
as I took courses in
Dramatic Arts 101 and Latin A

30
00:01:34,809 --> 00:01:36,600
and then eventually
grad school archeology,

31
00:01:36,600 --> 00:01:39,860
did I really start to see the
intersections of this field, computer

32
00:01:39,860 --> 00:01:43,979
science, with the humanities,
natural sciences, the arts, medicine,

33
00:01:43,979 --> 00:01:44,520
and the like.

34
00:01:44,520 --> 00:01:46,420
And so that's what's just so
neat about computer science

35
00:01:46,420 --> 00:01:48,930
ultimately, as we hope you'll
see-- is its applicability

36
00:01:48,930 --> 00:01:52,280
to these other fields, and how you can
take some of today's and the semester's

37
00:01:52,280 --> 00:01:55,070
ideas and practical skills
back to your own domain,

38
00:01:55,070 --> 00:02:00,200
and actually explore this intersection
of the liberal arts and the sciences.

39
00:02:00,200 --> 00:02:04,690
>> So 73% of you, if last
year is any indication,

40
00:02:04,690 --> 00:02:06,390
have never taken a CS course before.

41
00:02:06,390 --> 00:02:08,389
So if, like me, you are
feeling a little bit

42
00:02:08,389 --> 00:02:11,190
scared, or frankly you're not
really sure why you're even here.

43
00:02:11,190 --> 00:02:13,510
Perhaps you just followed some
friends over to Sanders right now.

44
00:02:13,510 --> 00:02:14,490
That's totally fine.

45
00:02:14,490 --> 00:02:17,059
The goal here is to hook
you and to reassure you

46
00:02:17,059 --> 00:02:19,100
that if you do look to
the left and to the right,

47
00:02:19,100 --> 00:02:23,480
you're going to see classmates with
as little or as much experience

48
00:02:23,480 --> 00:02:24,890
that you yourself might have.

49
00:02:24,890 --> 00:02:27,280
And indeed, we'll share
some statistics later today

50
00:02:27,280 --> 00:02:30,120
as to what the demographics of
the class typically look like.

51
00:02:30,120 --> 00:02:33,440
>> And as added reassurance-- and this we
do mean since I took over the course

52
00:02:33,440 --> 00:02:35,252
some years ago-- in
the course's syllabus

53
00:02:35,252 --> 00:02:37,460
is this-- that what ultimately
matters in this course

54
00:02:37,460 --> 00:02:40,040
is not so much where you end
up relative to your classmates,

55
00:02:40,040 --> 00:02:45,110
but where you in week 11, the end of the
semester, end up relative to yourself

56
00:02:45,110 --> 00:02:48,280
in week 0, which is
where we are here today.

57
00:02:48,280 --> 00:02:50,704
And this is what I realized
all those years ago.

58
00:02:50,704 --> 00:02:52,620
And I know a lot of
classes say this, but it's

59
00:02:52,620 --> 00:02:54,450
especially true in computer science.

60
00:02:54,450 --> 00:02:57,320
At the end of the day, this field
is unfamiliar as it was to me

61
00:02:57,320 --> 00:03:00,590
and might be to you, is really
just about problem solving.

62
00:03:00,590 --> 00:03:03,324
And as such, it does have this
applicability to get other fields.

63
00:03:03,324 --> 00:03:05,490
And in fact, if we tried
to distill what this means,

64
00:03:05,490 --> 00:03:08,897
this is problem solving
in its essence, I daresay.

65
00:03:08,897 --> 00:03:11,480
There's input-- so whatever it
is that you're trying to solve.

66
00:03:11,480 --> 00:03:14,264
There's output, which is hopefully
the solution to that problem.

67
00:03:14,264 --> 00:03:16,180
And then, as we would
say in computer science,

68
00:03:16,180 --> 00:03:19,310
there's this black box in the
middle that you don't necessarily

69
00:03:19,310 --> 00:03:21,450
have to care about how it works.

70
00:03:21,450 --> 00:03:24,230
You yourself eventually might
implement what's inside that box.

71
00:03:24,230 --> 00:03:27,194
But for today's purposes and more
generally in life, all you care about

72
00:03:27,194 --> 00:03:28,610
is that these problems get solved.

73
00:03:28,610 --> 00:03:31,340
>> And what this course is
ultimately about is exploring

74
00:03:31,340 --> 00:03:33,700
the intersection of
these inputs and outputs,

75
00:03:33,700 --> 00:03:36,410
and these so-called
algorithms, as we'll soon see,

76
00:03:36,410 --> 00:03:39,450
that implement what is
underneath there, the hood.

77
00:03:39,450 --> 00:03:42,487
But these inputs and these outputs--
what does that actually mean?

78
00:03:42,487 --> 00:03:45,570
Well, at the end of the day, we need
some way of representing information.

79
00:03:45,570 --> 00:03:48,660
This is especially true in a computer,
which as fancy and complex as it

80
00:03:48,660 --> 00:03:50,160
might seem, is a pretty dumb device.

81
00:03:50,160 --> 00:03:54,240
It takes electricity-- whether from
a cable or a battery as input--

82
00:03:54,240 --> 00:03:57,820
and then it produces some
preprogramed responses on the screen.

83
00:03:57,820 --> 00:03:59,970
>> But how do we get from
start to finish there?

84
00:03:59,970 --> 00:04:01,470
Well, what's a problem to be solved?

85
00:04:01,470 --> 00:04:03,050
Well, maybe we might, at
the start of any semester,

86
00:04:03,050 --> 00:04:04,841
try to take attendance
in a room like this.

87
00:04:04,841 --> 00:04:06,750
So I might do like one, two, three.

88
00:04:06,750 --> 00:04:09,060
Or maybe, if I did it
to sort of keep track

89
00:04:09,060 --> 00:04:12,560
of myself-- to keep track of things--
I could quickly run out of fingers.

90
00:04:12,560 --> 00:04:16,650
So I might just make hash marks-- one
person, two, three, four, five, six,

91
00:04:16,650 --> 00:04:17,431
seven, eight.

92
00:04:17,431 --> 00:04:19,930
And all of us have probably
done this, whether on your hands

93
00:04:19,930 --> 00:04:21,680
or on a piece of paper.

94
00:04:21,680 --> 00:04:24,140
And this is actually just
something called unary notation--

95
00:04:24,140 --> 00:04:28,130
where if you only have one letter
in your alphabet, one or hash

96
00:04:28,130 --> 00:04:31,440
mark in this case, for every
input you want to count,

97
00:04:31,440 --> 00:04:34,330
you need to put down one of these
letters-- one of these marks.

98
00:04:34,330 --> 00:04:34,510
>> All right.

99
00:04:34,510 --> 00:04:36,790
That's all fine and good and
not all that complicated.

100
00:04:36,790 --> 00:04:39,800
But computers aren't all
that much more complicated.

101
00:04:39,800 --> 00:04:42,770
Indeed, most of you probably
know even if you've not really

102
00:04:42,770 --> 00:04:46,080
considered what this means, that
computers only understand zeros

103
00:04:46,080 --> 00:04:47,870
and ones-- the so-called binary system.

104
00:04:47,870 --> 00:04:51,390
We humans, by contrast, are so
much more sophisticated insofar

105
00:04:51,390 --> 00:04:53,770
as we understand zeros through nines.

106
00:04:53,770 --> 00:04:57,740
>> But even if binary is, at first
glance, not all that familiar,

107
00:04:57,740 --> 00:05:02,330
it turns out it's just like the systems
and the ideas that we already know.

108
00:05:02,330 --> 00:05:04,420
So for instance, consider this.

109
00:05:04,420 --> 00:05:05,896
This is just a sequence of symbols.

110
00:05:05,896 --> 00:05:07,770
And all of you, when
glancing at it, probably

111
00:05:07,770 --> 00:05:11,380
think 123-- nothing
really interesting there.

112
00:05:11,380 --> 00:05:13,940
But why is it this number, 123?

113
00:05:13,940 --> 00:05:16,440
These are just glyphs on
the screen-- just patterns

114
00:05:16,440 --> 00:05:18,387
that someone might have drawn or typed.

115
00:05:18,387 --> 00:05:20,970
But if you're like me, you
probably remember from grade school

116
00:05:20,970 --> 00:05:23,610
that there are sort of
columns or places here.

117
00:05:23,610 --> 00:05:27,340
There's the one's place and the
ten's place and the hundred's place.

118
00:05:27,340 --> 00:05:31,820
And the reason that this is 123 and
not just a pattern of three symbols

119
00:05:31,820 --> 00:05:35,090
is because, of course, if we
have a one in the hundreds place,

120
00:05:35,090 --> 00:05:38,610
you do the math of 100 times one,
and then two in the ten's place.

121
00:05:38,610 --> 00:05:43,390
So that's 10 times 2, and then three in
the one's place and that's 1 times 3.

122
00:05:43,390 --> 00:05:47,670
And when you add all of those up, of
course, you get 100 plus 20 plus 3.

123
00:05:47,670 --> 00:05:50,220
>> So we started with just a pattern
of symbols-- an alphabet--

124
00:05:50,220 --> 00:05:53,670
but then we mapped meaning onto
it by way of these columns.

125
00:05:53,670 --> 00:05:56,450
Well, it turns out that
computers are really not

126
00:05:56,450 --> 00:05:58,300
all that different from you and me.

127
00:05:58,300 --> 00:06:03,840
But instead of using powers of 10,
so to speak-- 1, 10, 100, 1,000,

128
00:06:03,840 --> 00:06:06,330
10,000 place and so
forth-- they actually

129
00:06:06,330 --> 00:06:10,930
just use powers of 2--
so one, 2, 4, and then

130
00:06:10,930 --> 00:06:14,810
if we put more digits, 8, 16,
32, 64, 128, and so forth.

131
00:06:14,810 --> 00:06:18,050
And so this is how a computer
would represent the number 0,

132
00:06:18,050 --> 00:06:19,300
just like we humans.

133
00:06:19,300 --> 00:06:23,660
>> 0, 0, 0-- and you can probably guess
what pattern of zeros and ones,

134
00:06:23,660 --> 00:06:26,610
if a computer can only
speak 0 or 1-- what

135
00:06:26,610 --> 00:06:31,110
pattern is going to represent
the number we humans know as 1?

136
00:06:31,110 --> 00:06:32,590
Yeah-- 0, 0, 1.

137
00:06:32,590 --> 00:06:33,090
All right.

138
00:06:33,090 --> 00:06:37,900
So 0, 0, 1 is how we represent
1, so you might be inclined then

139
00:06:37,900 --> 00:06:41,510
to represent the number 2, if you have
the four's place and the two's place

140
00:06:41,510 --> 00:06:50,290
as the one place, you might say, well,
if we had a 1 in the one's place,

141
00:06:50,290 --> 00:06:52,430
and now we want to
count up to 2, you might

142
00:06:52,430 --> 00:06:55,310
do this and leave this to be a zero.

143
00:06:55,310 --> 00:06:58,397
But of course this is not how
the decimal system works either.

144
00:06:58,397 --> 00:07:00,230
If you put a digit in
both of those columns,

145
00:07:00,230 --> 00:07:01,563
you've got to do the arithmetic.

146
00:07:01,563 --> 00:07:03,930
So what number did I
accidentally just represent?

147
00:07:03,930 --> 00:07:08,710
>> So it's 3, because 2 times 1 plus 1
times 1, of course, gives us three.

148
00:07:08,710 --> 00:07:10,340
So this would be two.

149
00:07:10,340 --> 00:07:14,730
The bit sort of flips, so to speak, as 0
becomes a one, much like a 9 roles over

150
00:07:14,730 --> 00:07:16,840
and becomes a 0 when you carry the 1.

151
00:07:16,840 --> 00:07:18,510
This then would be three of course.

152
00:07:18,510 --> 00:07:22,170
Four-- another interesting thing
happens, where the ones roll over

153
00:07:22,170 --> 00:07:23,750
and you carry the 1, so to speak.

154
00:07:23,750 --> 00:07:25,320
So this, of course, is 4.

155
00:07:25,320 --> 00:07:27,160
>> But if you fast forward now,
what's the biggest number going

156
00:07:27,160 --> 00:07:28,660
to be that a computer can represent?

157
00:07:28,660 --> 00:07:32,420

158
00:07:32,420 --> 00:07:34,380
So it's just seven in this case, right?

159
00:07:34,380 --> 00:07:37,570
Because you have a one in the four,
a one in the two, a one in the one.

160
00:07:37,570 --> 00:07:38,900
So that's 4 plus 2 plus 1.

161
00:07:38,900 --> 00:07:39,972
So that gives you seven.

162
00:07:39,972 --> 00:07:41,680
And indeed, it would
seem at first glance

163
00:07:41,680 --> 00:07:45,750
that computers can count
no higher than this.

164
00:07:45,750 --> 00:07:47,210
>> But this of course is not true.

165
00:07:47,210 --> 00:07:50,243
What do we humans do when we want
to count higher than like 999?

166
00:07:50,243 --> 00:07:53,000

167
00:07:53,000 --> 00:07:55,900
Just carry the one and just
add a fourth digit to the left.

168
00:07:55,900 --> 00:07:57,070
And so indeed we could.

169
00:07:57,070 --> 00:07:59,900
We could have an eight's
place and a 16th's place,

170
00:07:59,900 --> 00:08:04,000
and a 32's place, 64, 128-- and you
can just keep going on up to infinity.

171
00:08:04,000 --> 00:08:06,640
So these zeros and ones--
the so-called binary system--

172
00:08:06,640 --> 00:08:12,290
are what a computer scientist would
generally call a bit, or binary digit.

173
00:08:12,290 --> 00:08:15,590
>> But now, how do we get from the
concept or the graphics of these things

174
00:08:15,590 --> 00:08:16,620
to an actual computer?

175
00:08:16,620 --> 00:08:19,170
We seem to be skipping a step here.

176
00:08:19,170 --> 00:08:22,210
Well, the only input at the end
of the day, to my laptop here

177
00:08:22,210 --> 00:08:24,060
is this flow of electricity.

178
00:08:24,060 --> 00:08:26,560
Even if it's been a long
time since you thought about

179
00:08:26,560 --> 00:08:28,580
or never thought about
how electricity works,

180
00:08:28,580 --> 00:08:32,909
there's electrons flowing in or
out, and that's my kind of input.

181
00:08:32,909 --> 00:08:36,659
>> So if that's all that we're
getting as input here,

182
00:08:36,659 --> 00:08:38,830
what can we do with that information?

183
00:08:38,830 --> 00:08:42,040
Well, we might think of a zero as
just an absence of electricity.

184
00:08:42,040 --> 00:08:44,540
Nothing is flowinw, nothing is
moving, nothing is happening.

185
00:08:44,540 --> 00:08:46,690
That's just the default state-- zero.

186
00:08:46,690 --> 00:08:50,200
But if there is electricity flowing, why
don't we just arbitrarily, but globally

187
00:08:50,200 --> 00:08:52,250
consistently, call that a one.

188
00:08:52,250 --> 00:08:56,760
>> So simply by having no power,
we have a zero, yes power,

189
00:08:56,760 --> 00:08:59,520
we have a one-- no power, yes power.

190
00:08:59,520 --> 00:09:03,520
And in that way, using something
more physical or electronic

191
00:09:03,520 --> 00:09:07,340
we start to implement this notion of
something either being one or a zero.

192
00:09:07,340 --> 00:09:09,230
Indeed, we could just do it over here.

193
00:09:09,230 --> 00:09:12,590
So here, I have not three but
eight light bulbs, each of which

194
00:09:12,590 --> 00:09:13,810
has its own switch.

195
00:09:13,810 --> 00:09:17,760
>> And so if I wanted to represent
the number seven here,

196
00:09:17,760 --> 00:09:20,510
I might turn on these three light bulbs.

197
00:09:20,510 --> 00:09:23,470
And indeed, inside of
my computer is millions,

198
00:09:23,470 --> 00:09:27,650
billions of things that are just
smaller than that, called transistors,

199
00:09:27,650 --> 00:09:29,330
switches, that you just turn on and off.

200
00:09:29,330 --> 00:09:32,420
So these are big-- relatively
big-- switches inside my laptop--

201
00:09:32,420 --> 00:09:34,150
are many, many, many,
many more switches.

202
00:09:34,150 --> 00:09:37,160
But all they do is exactly that--
turn something on, turn something off.

203
00:09:37,160 --> 00:09:40,076
And as such, a computer can represent,
with those millions or billions

204
00:09:40,076 --> 00:09:42,480
of transistors, lots and
lots of zeros and ones.

205
00:09:42,480 --> 00:09:45,160
And there's other hardware still that
lets you store information long-term,

206
00:09:45,160 --> 00:09:47,243
so that when you pull the
plug, you don't lose it.

207
00:09:47,243 --> 00:09:48,900
But that's a story for another day.

208
00:09:48,900 --> 00:09:53,170
>> So what can we do with these bits?

209
00:09:53,170 --> 00:09:56,309
Might we just to take
the pressure off of me--

210
00:09:56,309 --> 00:09:58,600
might someone want to come
up here and offer up a demo?

211
00:09:58,600 --> 00:09:59,516
I saw this hand first.

212
00:09:59,516 --> 00:10:00,709
What's your name?

213
00:10:00,709 --> 00:10:01,250
MADAY: Maday.

214
00:10:01,250 --> 00:10:02,542
DAVID MALAN: Maday, come on up.

215
00:10:02,542 --> 00:10:03,250
Nice to meet you.

216
00:10:03,250 --> 00:10:04,390
MADAY: Nice to meet you.

217
00:10:04,390 --> 00:10:04,930
>> DAVID MALAN: Come this way.

218
00:10:04,930 --> 00:10:06,182
I won't have to lip you up.

219
00:10:06,182 --> 00:10:06,682
All right.

220
00:10:06,682 --> 00:10:13,090
So here, we have, notice-- one, two--
we'll edit that out-- one, two, four,

221
00:10:13,090 --> 00:10:15,350
eight, 16, 32, 64, 128.

222
00:10:15,350 --> 00:10:16,220
This is deliberate.

223
00:10:16,220 --> 00:10:19,370
There's eight bits here--
binary digits-- zeros and ones.

224
00:10:19,370 --> 00:10:23,460
And a bit is a useful unit of measure--
not as useful a unit of measure

225
00:10:23,460 --> 00:10:23,999
onto itself.

226
00:10:23,999 --> 00:10:26,290
Usually you want at least
eight of these things, a.k.a.

227
00:10:26,290 --> 00:10:26,790
a byte.

228
00:10:26,790 --> 00:10:28,230
So we have a byte of bits here.

229
00:10:28,230 --> 00:10:33,130
>> So if we wanted to challenge you with,
for instance, spelling out, in binary,

230
00:10:33,130 --> 00:10:35,230
this value here-- 42.

231
00:10:35,230 --> 00:10:37,140
Want to take a stab at that?

232
00:10:37,140 --> 00:10:38,034
>> MADAY: [INAUDIBLE].

233
00:10:38,034 --> 00:10:40,700
DAVID MALAN: Yeah, just push the
little white switches in front.

234
00:10:40,700 --> 00:10:43,290
And you want to spell
out 42, and up for grabs

235
00:10:43,290 --> 00:10:46,061
is this CS50 stress
ball if you get this.

236
00:10:46,061 --> 00:10:46,560
All right.

237
00:10:46,560 --> 00:10:48,420
So you have 32.

238
00:10:48,420 --> 00:10:50,430
We're going to need 42.

239
00:10:50,430 --> 00:10:53,410
So that's an eight, so that's 40.

240
00:10:53,410 --> 00:10:56,160
And excellent-- very nicely done.

241
00:10:56,160 --> 00:10:57,186
Thank you.

242
00:10:57,186 --> 00:11:00,790
>> [APPLAUSE]

243
00:11:00,790 --> 00:11:01,290
All right.

244
00:11:01,290 --> 00:11:02,623
So we have one more stress ball.

245
00:11:02,623 --> 00:11:05,595
Let's do this once more if we may.

246
00:11:05,595 --> 00:11:07,368
One other volunteer?

247
00:11:07,368 --> 00:11:09,970
Free stress ball, free stress ball.

248
00:11:09,970 --> 00:11:10,470
OK.

249
00:11:10,470 --> 00:11:13,640
Over here in the middle,
do you want to come down?

250
00:11:13,640 --> 00:11:16,100
All right.

251
00:11:16,100 --> 00:11:17,552
I know.

252
00:11:17,552 --> 00:11:18,360
There we go.

253
00:11:18,360 --> 00:11:22,818
>> So the numbers here-- come on down.

254
00:11:22,818 --> 00:11:23,567
What is your name?

255
00:11:23,567 --> 00:11:23,984
>> DAVEY: Davey.

256
00:11:23,984 --> 00:11:24,820
>> DAVID MALAN: Davey.

257
00:11:24,820 --> 00:11:25,320
OK.

258
00:11:25,320 --> 00:11:26,810
Come on up, Davey.

259
00:11:26,810 --> 00:11:27,890
Nice to meet you.

260
00:11:27,890 --> 00:11:30,639
And what we're going to have you
spell-- if you could linger there

261
00:11:30,639 --> 00:11:34,810
for just one moment-- is the number 50.

262
00:11:34,810 --> 00:11:38,293
But, but, but but, but, these are
grade school magnets for a reason.

263
00:11:38,293 --> 00:11:41,370

264
00:11:41,370 --> 00:11:45,327
Just got a little harder, all right?

265
00:11:45,327 --> 00:11:46,160
There's still eight.

266
00:11:46,160 --> 00:11:48,820

267
00:11:48,820 --> 00:11:49,320
All right.

268
00:11:49,320 --> 00:11:50,486
So what do we have on there?

269
00:11:50,486 --> 00:11:53,356
We have 32.

270
00:11:53,356 --> 00:11:56,344
Nice.

271
00:11:56,344 --> 00:12:00,610
32 plus 16 gives us 48-- so close.

272
00:12:00,610 --> 00:12:02,390
And wonderful.

273
00:12:02,390 --> 00:12:04,831
Congratulations to Davey as well.

274
00:12:04,831 --> 00:12:07,720
>> [APPLAUSE]

275
00:12:07,720 --> 00:12:08,516
>> All right.

276
00:12:08,516 --> 00:12:11,390
So we can do this all day long, and
it doesn't get all that much more

277
00:12:11,390 --> 00:12:12,800
interesting and more challenging.

278
00:12:12,800 --> 00:12:15,250
But that's really the point--
is how relatively simple

279
00:12:15,250 --> 00:12:18,930
it is, at the end of the day, what a
computer does to store information,

280
00:12:18,930 --> 00:12:23,740
to store inputs and ultimately
store or represent those outputs.

281
00:12:23,740 --> 00:12:25,750
But numbers alone aren't
all that interesting.

282
00:12:25,750 --> 00:12:28,069
>> So humans, some years ago,
decided, you know what?

283
00:12:28,069 --> 00:12:29,860
It would be nice if
computers were not just

284
00:12:29,860 --> 00:12:33,030
calculators for arithmetic
operations, but actually could

285
00:12:33,030 --> 00:12:37,209
do things like word processing, or
email, or more modern incarnations

286
00:12:37,209 --> 00:12:38,500
of these kinds of technologies.

287
00:12:38,500 --> 00:12:42,680
And so the world decided
arbitrarily, but universally,

288
00:12:42,680 --> 00:12:46,380
that if you want to store the capital
letter A in a computer, you know what?

289
00:12:46,380 --> 00:12:49,730
Let's just all agree to store
some pattern of zeros and ones--

290
00:12:49,730 --> 00:12:54,422
bits-- that ultimately
represents the decimal number 65.

291
00:12:54,422 --> 00:12:55,630
We'll just all agree on that.

292
00:12:55,630 --> 00:12:58,620
>> 66 would represent B,
67 would represent C,

293
00:12:58,620 --> 00:13:02,210
and there's bunches of other patterns of
zeros and ones, or underlying numbers,

294
00:13:02,210 --> 00:13:04,224
that would represent
other letters still.

295
00:13:04,224 --> 00:13:06,390
So if you kind of mentally
absorb this for a moment,

296
00:13:06,390 --> 00:13:12,900
I deliberately put up A through
I, where H a 72 and I is 73.

297
00:13:12,900 --> 00:13:17,830
If a computer then, in the context of
a word processing program or an e-mail,

298
00:13:17,830 --> 00:13:21,620
revealed underneath the hood to have
these patterns of bits-- pattern

299
00:13:21,620 --> 00:13:24,500
of bits representing
72, then 73, then 33--

300
00:13:24,500 --> 00:13:28,640
what might this spell in that program?

301
00:13:28,640 --> 00:13:30,150
>> So hi, and then something.

302
00:13:30,150 --> 00:13:33,460
We don't necessarily know, but indeed
33-- not on the chart earlier--

303
00:13:33,460 --> 00:13:35,170
was simply an exclamation point.

304
00:13:35,170 --> 00:13:40,870
So 72 was H, 73 is I, 33 happens
to be an exclamation point still.

305
00:13:40,870 --> 00:13:43,719
But that's all fine and good,
and in fact nowadays, rather than

306
00:13:43,719 --> 00:13:45,760
just use seven or eight
bits, thanks to something

307
00:13:45,760 --> 00:13:48,530
called Unicode as opposed
to Ascii back in the day,

308
00:13:48,530 --> 00:13:52,010
we actually can represent even more
interesting characters than just

309
00:13:52,010 --> 00:13:54,980
these original English biased letters.

310
00:13:54,980 --> 00:13:58,030
But we can also represent even
neater things like colors.

311
00:13:58,030 --> 00:14:01,750
>> If you've ever heard the acronym
RGB, red, green, blue, that

312
00:14:01,750 --> 00:14:05,510
just means that a computer
typically uses three sets of bits--

313
00:14:05,510 --> 00:14:08,760
some number of bits that represent
a number for how much red you want,

314
00:14:08,760 --> 00:14:10,940
another set of bits for
how much green you want,

315
00:14:10,940 --> 00:14:13,430
and another set number for
how much blue you want.

316
00:14:13,430 --> 00:14:16,457
So a big number means lots of
red, small number means no red.

317
00:14:16,457 --> 00:14:18,290
And so these are kind
of middle values here.

318
00:14:18,290 --> 00:14:22,180
>> So give me some red, give me some
green, and give me a little bit of blue.

319
00:14:22,180 --> 00:14:26,260
And if you mix those three shades
of color together, in this case,

320
00:14:26,260 --> 00:14:28,850
you get this murky shade
of yellow or brown.

321
00:14:28,850 --> 00:14:34,330
But that pattern of eight plus
eight plus eight-- so 24 bits--

322
00:14:34,330 --> 00:14:38,550
left to right, is how a computer
would represent that particular color.

323
00:14:38,550 --> 00:14:40,090
Now this is just a dot on a screen.

324
00:14:40,090 --> 00:14:44,230
If you look really close at your TV your
computer, you'll see dots or pixels.

325
00:14:44,230 --> 00:14:47,420
And if you have a whole grid of
pixels, horizontally and vertically,

326
00:14:47,420 --> 00:14:48,630
you have images.

327
00:14:48,630 --> 00:14:51,029
And then if you take
an image and then wash

328
00:14:51,029 --> 00:14:54,070
show yourself another image, another
image, another image, another image,

329
00:14:54,070 --> 00:14:56,760
really fast, you of course have movies.

330
00:14:56,760 --> 00:14:58,109
>> And so notice where we started.

331
00:14:58,109 --> 00:14:59,650
We started with these zeros and ones.

332
00:14:59,650 --> 00:15:02,570
We worked from there to decimal
numbers, how we represent them.

333
00:15:02,570 --> 00:15:04,070
Now we have letters of the alphabet.

334
00:15:04,070 --> 00:15:07,664
But in other contexts wait, we can use
a few more bits and represent colors.

335
00:15:07,664 --> 00:15:09,830
As soon as you have the
ability to represent colors,

336
00:15:09,830 --> 00:15:13,200
you have the ability to represent
photographs and animated gifs

337
00:15:13,200 --> 00:15:15,780
and other such characters on the screen.

338
00:15:15,780 --> 00:15:19,160
And when you have a whole bunch of
images flying by the human at once,

339
00:15:19,160 --> 00:15:23,480
it looks like motion pictures,
and so you get videos as well.

340
00:15:23,480 --> 00:15:25,460
>> So using these very
simple primitives do we

341
00:15:25,460 --> 00:15:30,070
have the way of representing
ultimately all of these forms of media.

342
00:15:30,070 --> 00:15:32,450
And we've abstracted again
and again and again, until we

343
00:15:32,450 --> 00:15:35,467
get from the lowest level
to this highest level.

344
00:15:35,467 --> 00:15:37,550
So that gives us this
general idea of abstraction.

345
00:15:37,550 --> 00:15:38,990
But we started here.

346
00:15:38,990 --> 00:15:40,790
>> Here now, we might
represent in a computer

347
00:15:40,790 --> 00:15:43,920
our inputs with zeros and ones,
our outputs in zeros and ones,

348
00:15:43,920 --> 00:15:45,640
but what goes inside the box?

349
00:15:45,640 --> 00:15:48,080
That's where computer
science gets interesting.

350
00:15:48,080 --> 00:15:51,770
That's where you actually bring your
own minds to bear to solve problems.

351
00:15:51,770 --> 00:15:54,590
We can now stipulate, for the
rest of the semester, yes.

352
00:15:54,590 --> 00:15:55,870
I know how binary works.

353
00:15:55,870 --> 00:15:59,942
I remember how Ascii or Unicode--
the mapping to letters-- works.

354
00:15:59,942 --> 00:16:01,650
And it certainly stands
to reason that we

355
00:16:01,650 --> 00:16:05,470
could represent red and green and
blue, and represent multimedia as well.

356
00:16:05,470 --> 00:16:07,390
But this is the interesting stuff.

357
00:16:07,390 --> 00:16:11,790
This is what makes someone
capable of solving problems.

358
00:16:11,790 --> 00:16:13,980
>> And one such problem
we like to do, indeed,

359
00:16:13,980 --> 00:16:17,345
is taking attendance, or
doing this algorithmically.

360
00:16:17,345 --> 00:16:18,470
And again, I might do this.

361
00:16:18,470 --> 00:16:21,580
I might do one, two, three, four
five, six, seven, eight nine.

362
00:16:21,580 --> 00:16:23,520
And I could write it
down to keep track of it.

363
00:16:23,520 --> 00:16:25,769
But that's just how I would
represent the information.

364
00:16:25,769 --> 00:16:29,550
Or I could do this faster-- two, four,
six, eight, ten, 12, 14, 16, 18, 20,

365
00:16:29,550 --> 00:16:32,380
22-- it feels like twice
as fast but it's still

366
00:16:32,380 --> 00:16:34,050
going to take a whole lot of time.

367
00:16:34,050 --> 00:16:37,990
>> But it turns out, if we leverage yet
another resource-- and indeed computers

368
00:16:37,990 --> 00:16:40,940
these days have multiple CPUs or brains.

369
00:16:40,940 --> 00:16:43,970
It turns out computers can
do lots of things at once,

370
00:16:43,970 --> 00:16:46,460
and indeed we, in this room,
might represent exactly this.

371
00:16:46,460 --> 00:16:49,130
>> So it's a little socially
awkward, but if you would humor me

372
00:16:49,130 --> 00:16:53,550
for just a three-step process, let
me ask everyone in place there just

373
00:16:53,550 --> 00:16:56,640
to stand up for a moment.

374
00:16:56,640 --> 00:16:59,380
Stand up.

375
00:16:59,380 --> 00:17:03,580
So think to yourself, number
one-- so everyone in this room,

376
00:17:03,580 --> 00:17:07,010
except the people who didn't
oblige, are thinking number one.

377
00:17:07,010 --> 00:17:08,510
So that is your number right now.

378
00:17:08,510 --> 00:17:11,399
That is the first step, or as a
computer scientist or a programmer

379
00:17:11,399 --> 00:17:13,827
would typically do, we're going
to start counting at zero.

380
00:17:13,827 --> 00:17:16,410
If the smallest number we can
represent with those light bulbs

381
00:17:16,410 --> 00:17:19,410
is zero, by just leaving them
all off, I might as well just

382
00:17:19,410 --> 00:17:21,271
start counting from
zero is instead of one.

383
00:17:21,271 --> 00:17:23,020
And so that's what
computer scientists do.

384
00:17:23,020 --> 00:17:25,750
So step zero, stand up and
think of the number one.

385
00:17:25,750 --> 00:17:28,339
The next step is this-- pair
off with someone standing

386
00:17:28,339 --> 00:17:29,660
and add your numbers together.

387
00:17:29,660 --> 00:17:32,660

388
00:17:32,660 --> 00:17:34,850
Wonderful.

389
00:17:34,850 --> 00:17:39,640
>> So at this moment in time,
literally everyone participating

390
00:17:39,640 --> 00:17:43,930
is thinking of the number 2, except
for one odd person if we have

391
00:17:43,930 --> 00:17:45,450
an odd number of people in the room.

392
00:17:45,450 --> 00:17:52,640
And now the third step here is going to
be this-- one of you should sit down.

393
00:17:52,640 --> 00:17:56,490
One of you should sit down,
and if you're still standing,

394
00:17:56,490 --> 00:17:58,590
go back to step one.

395
00:17:58,590 --> 00:18:46,799

396
00:18:46,799 --> 00:18:47,790
All right.

397
00:18:47,790 --> 00:19:02,760

398
00:19:02,760 --> 00:19:03,650
All right.

399
00:19:03,650 --> 00:19:05,880
So more and more people
should be sitting down.

400
00:19:05,880 --> 00:19:10,280
Notice that this has induced
a loop-- some kind of cycle.

401
00:19:10,280 --> 00:19:13,983
Some of you should be awkwardly stuck,
going back and forth between step one

402
00:19:13,983 --> 00:19:16,180
and two, one and two, one and two.

403
00:19:16,180 --> 00:19:23,190

404
00:19:23,190 --> 00:19:23,810
That's OK.

405
00:19:23,810 --> 00:19:24,630
Our first bug.

406
00:19:24,630 --> 00:19:26,740
We'll deal with that.

407
00:19:26,740 --> 00:19:27,320
All right.

408
00:19:27,320 --> 00:19:29,370
Let me try to spur things along.

409
00:19:29,370 --> 00:19:33,454
>> In theory, only one person is standing
as everyone continues to pair off.

410
00:19:33,454 --> 00:19:35,870
But let me speed things up
with the people still standing.

411
00:19:35,870 --> 00:19:37,480
What number are you thinking of?

412
00:19:37,480 --> 00:19:38,070
46.

413
00:19:38,070 --> 00:19:38,570
OK.

414
00:19:38,570 --> 00:19:39,820
Go ahead and sit down.

415
00:19:39,820 --> 00:19:41,190
You guys are still standing.

416
00:19:41,190 --> 00:19:44,130
Who's still standing?

417
00:19:44,130 --> 00:19:47,240
What number are you thinking of?

418
00:19:47,240 --> 00:19:48,160
OK.

419
00:19:48,160 --> 00:19:49,900
>> So we'll come back to you.

420
00:19:49,900 --> 00:19:51,630
In the back?

421
00:19:51,630 --> 00:19:52,790
What is that?

422
00:19:52,790 --> 00:19:55,100
22.

423
00:19:55,100 --> 00:19:58,540
OK someone else up top-- yeah?

424
00:19:58,540 --> 00:19:59,720
34.

425
00:19:59,720 --> 00:20:00,300
OK.

426
00:20:00,300 --> 00:20:04,780
Over here on my right-- up here?

427
00:20:04,780 --> 00:20:08,820
132, very nice.

428
00:20:08,820 --> 00:20:10,380
22?

429
00:20:10,380 --> 00:20:10,990
>> OK.

430
00:20:10,990 --> 00:20:12,031
And who's still standing?

431
00:20:12,031 --> 00:20:13,000
Over here?

432
00:20:13,000 --> 00:20:16,520
46, very nice.

433
00:20:16,520 --> 00:20:18,890
72.

434
00:20:18,890 --> 00:20:20,220
I can't stall much longer.

435
00:20:20,220 --> 00:20:22,520
Yeah?

436
00:20:22,520 --> 00:20:24,490
30, nice.

437
00:20:24,490 --> 00:20:26,120
Over here?

438
00:20:26,120 --> 00:20:28,200
23?

439
00:20:28,200 --> 00:20:29,270
23.

440
00:20:29,270 --> 00:20:32,920
>> And I think that's everyone
except you guys, no pressure.

441
00:20:32,920 --> 00:20:34,860
Oh, wait.

442
00:20:34,860 --> 00:20:35,360
28?

443
00:20:35,360 --> 00:20:39,500

444
00:20:39,500 --> 00:20:40,281
Just eight.

445
00:20:40,281 --> 00:20:40,780
OK.

446
00:20:40,780 --> 00:20:43,030
Just eight.

447
00:20:43,030 --> 00:20:44,580
Down here?

448
00:20:44,580 --> 00:20:46,570
30.

449
00:20:46,570 --> 00:20:49,344
23.

450
00:20:49,344 --> 00:20:49,843
24.

451
00:20:49,843 --> 00:20:52,810

452
00:20:52,810 --> 00:20:54,310
18.

453
00:20:54,310 --> 00:20:56,690
This is the worst implementation
of this algorithm ever.

454
00:20:56,690 --> 00:20:57,190
OK.

455
00:20:57,190 --> 00:21:01,760
So anyone else?

456
00:21:01,760 --> 00:21:02,421
Anyone else?

457
00:21:02,421 --> 00:21:02,920
OK.

458
00:21:02,920 --> 00:21:05,300
One more.

459
00:21:05,300 --> 00:21:06,400
16?

460
00:21:06,400 --> 00:21:06,900
OK.

461
00:21:06,900 --> 00:21:07,510
16.

462
00:21:07,510 --> 00:21:08,010
All right.

463
00:21:08,010 --> 00:21:11,070
So if I haven't missed anyone in
the glare here, when I hit Enter,

464
00:21:11,070 --> 00:21:15,091
we will see, algorithmically, the
total number of people in Sanders.

465
00:21:15,091 --> 00:21:18,340
Because again, it's as though everyone
as you sat down, passed your number off

466
00:21:18,340 --> 00:21:21,215
to someone else, to someone else,
to someone else, so that in theory,

467
00:21:21,215 --> 00:21:24,304
in the end, only one awkward
person should be left standing.

468
00:21:24,304 --> 00:21:24,970
But that's fine.

469
00:21:24,970 --> 00:21:26,290
We sped things up manually.

470
00:21:26,290 --> 00:21:29,590
It's especially hard to see
in this particular space.

471
00:21:29,590 --> 00:21:36,200
>> And the total number of people
we think there are here is 546.

472
00:21:36,200 --> 00:21:39,330
The total number I was handed
by the teaching fellows,

473
00:21:39,330 --> 00:21:42,660
who did it the old
school slow way, was 820.

474
00:21:42,660 --> 00:21:45,660
>> [LAUGHING]

475
00:21:45,660 --> 00:21:49,170
>> [APPLAUSE]

476
00:21:49,170 --> 00:21:50,670
>> That's OK.

477
00:21:50,670 --> 00:21:52,740
So surely then, there are these bugs.

478
00:21:52,740 --> 00:21:53,460
And that's fine.

479
00:21:53,460 --> 00:21:55,810
And so think back on this
the first time something

480
00:21:55,810 --> 00:21:57,420
you write doesn't necessarily work.

481
00:21:57,420 --> 00:21:59,620
This has happened to me here as well.

482
00:21:59,620 --> 00:22:02,844
But let's now consider how we might
apply this same idea to something

483
00:22:02,844 --> 00:22:05,760
you might have seen before, which
is this old school technology here--

484
00:22:05,760 --> 00:22:07,130
a really big phone book.

485
00:22:07,130 --> 00:22:11,380
And suppose that this phone book
has 1,000 pages and 1,000 names

486
00:22:11,380 --> 00:22:13,360
and numbers alphabetically inside of it.

487
00:22:13,360 --> 00:22:16,860
>> Well, we could kind of apply a similar
idea to this very physical problem,

488
00:22:16,860 --> 00:22:18,270
just using me.

489
00:22:18,270 --> 00:22:20,810
I just kind of cheated
by leveraging all of you

490
00:22:20,810 --> 00:22:25,240
with lots and lots of different CPUs
or brains executing some algorithm.

491
00:22:25,240 --> 00:22:27,440
But if it's just little
old me, I can still

492
00:22:27,440 --> 00:22:31,630
leverage that same essence of an idea
of dividing and conquering that problem

493
00:22:31,630 --> 00:22:34,970
again and again, whereby half of you,
half of you, half of you, half of you,

494
00:22:34,970 --> 00:22:37,830
theoretically kept sitting down,
until we were left, theoretically,

495
00:22:37,830 --> 00:22:38,990
with just one person.

496
00:22:38,990 --> 00:22:41,810
>> So in this old school
technology-- we don't

497
00:22:41,810 --> 00:22:45,030
need this map-- this
old school technology,

498
00:22:45,030 --> 00:22:49,300
we might start looking for someone
like Mike Smith, one page at a time.

499
00:22:49,300 --> 00:22:51,410
And I see that no, Mike is not here.

500
00:22:51,410 --> 00:22:53,110
I'm still in the A section.

501
00:22:53,110 --> 00:22:55,900
Eventually, I find
myself in the B section.

502
00:22:55,900 --> 00:22:58,910
And this is an algorithm--
step-by-step instruction.

503
00:22:58,910 --> 00:23:01,890
Start at the beginning and one page
at a time, look for Mike Smith.

504
00:23:01,890 --> 00:23:05,410
Is this correct-- this
algorithm or approach?

505
00:23:05,410 --> 00:23:06,550
>> Yeah, it's correct.

506
00:23:06,550 --> 00:23:08,840
If Mike's here, eventually
I'll get to him.

507
00:23:08,840 --> 00:23:10,139
But it's not efficient.

508
00:23:10,139 --> 00:23:11,180
It's obviously very slow.

509
00:23:11,180 --> 00:23:13,340
So I can leverage the
same twosies approach.

510
00:23:13,340 --> 00:23:17,350
I can do sort of two,
four, six, eight, 10, 12.

511
00:23:17,350 --> 00:23:18,330
It's twice as fast.

512
00:23:18,330 --> 00:23:20,290
I'm going to get to Mike
faster if he's there.

513
00:23:20,290 --> 00:23:22,770
Is it correct?

514
00:23:22,770 --> 00:23:24,320
Yes, but I heard a little-- no.

515
00:23:24,320 --> 00:23:26,200
Now I heard a no.

516
00:23:26,200 --> 00:23:26,700
Yeah.

517
00:23:26,700 --> 00:23:28,190
There's a bug potentially.

518
00:23:28,190 --> 00:23:31,374
Maybe Mike just accidentally gets
sandwiched between two pages,

519
00:23:31,374 --> 00:23:33,290
because I'm flying through
this two at a time.

520
00:23:33,290 --> 00:23:35,580
So at least we need some
kind of conditional fix.

521
00:23:35,580 --> 00:23:37,330
I need to say, hey,
if I hit someone whose

522
00:23:37,330 --> 00:23:41,190
name starts with a T instead of an S,
I better double back at least one page.

523
00:23:41,190 --> 00:23:42,767
So buggy at first, but fixable.

524
00:23:42,767 --> 00:23:45,850
But none of us are going to look for
Mike Smith through a 1,000 page phone

525
00:23:45,850 --> 00:23:47,290
book one page at a time.

526
00:23:47,290 --> 00:23:50,486
What's a normal person going to do?

527
00:23:50,486 --> 00:23:52,860
You're going to go to the S's,
if you knew where the S's.

528
00:23:52,860 --> 00:23:56,230
You might go roughly to the middle
or slightly skewed towards the end.

529
00:23:56,230 --> 00:23:58,850
And I look down here and
I'm in the M section.

530
00:23:58,850 --> 00:24:00,952
But what do you know
about this problem now,

531
00:24:00,952 --> 00:24:04,160
that we didn't necessarily know before
with all of us just counting ourselves

532
00:24:04,160 --> 00:24:05,030
equivalently?

533
00:24:05,030 --> 00:24:08,010
Well, Mike is clearly going
to be in this half of the book

534
00:24:08,010 --> 00:24:09,920
if he's here at all because it's sorted.

535
00:24:09,920 --> 00:24:12,160
>> And so you can very dramatically--

536
00:24:12,160 --> 00:24:13,250
>> [GASPING]

537
00:24:13,250 --> 00:24:14,300
>> I know.

538
00:24:14,300 --> 00:24:18,940
>> [APPLAUSE]

539
00:24:18,940 --> 00:24:21,450
>> It's actually really easy if
you do it down the spine there.

540
00:24:21,450 --> 00:24:24,070
But you can then throw
half of the problem away.

541
00:24:24,070 --> 00:24:27,950
Now, I'm left with the same problem--
find Mike Smith in a phone book--

542
00:24:27,950 --> 00:24:31,610
but now the phone book starts at M
and goes to Z, but it's half as big.

543
00:24:31,610 --> 00:24:32,890
>> But this is what's impressive.

544
00:24:32,890 --> 00:24:36,170
Just like in theory, you guys, when
you all sat down only half at a time,

545
00:24:36,170 --> 00:24:39,150
the problem got half as big,
half as big, again and again.

546
00:24:39,150 --> 00:24:42,260
So has this problem become the
same problem but half as big.

547
00:24:42,260 --> 00:24:44,670
Now it's a 250 page problem.

548
00:24:44,670 --> 00:24:47,340
As soon as I realize, oh, I'm
in the T section accidentally.

549
00:24:47,340 --> 00:24:48,590
I've gone too far.

550
00:24:48,590 --> 00:24:50,500
I can throw that half
of the phone book away.

551
00:24:50,500 --> 00:24:52,410
Now, I'm down to a
quarter of the problem.

552
00:24:52,410 --> 00:24:55,910
>> And you can repeat, repeat,
repeat until, in theory, you're

553
00:24:55,910 --> 00:24:57,460
left with just one page.

554
00:24:57,460 --> 00:25:01,010
And if Mike is on that page,
I can now solve this problem.

555
00:25:01,010 --> 00:25:02,810
But how quickly did I solve it?

556
00:25:02,810 --> 00:25:07,420
In the first case, it took me like
maybe 1,000 steps to find Mike Smith.

557
00:25:07,420 --> 00:25:11,260
It might have taken me--
I picked up the phone book

558
00:25:11,260 --> 00:25:13,440
and I started looking
one page at a time,

559
00:25:13,440 --> 00:25:15,480
and Mike might be 1,000 pages later.

560
00:25:15,480 --> 00:25:18,020
>> Second approach maybe
takes me 500 steps,

561
00:25:18,020 --> 00:25:19,960
because I'm flying
through two at a time.

562
00:25:19,960 --> 00:25:23,082
And the third approach though,
it's especially powerful.

563
00:25:23,082 --> 00:25:25,790
But let's consider what we actually
did with this third approach.

564
00:25:25,790 --> 00:25:29,590
I'll have what I'll call just these
statements here, one at a time.

565
00:25:29,590 --> 00:25:30,560
Pick up a phone book.

566
00:25:30,560 --> 00:25:32,130
Open to the middle of the phone book.

567
00:25:32,130 --> 00:25:33,419
Look at names.

568
00:25:33,419 --> 00:25:35,960
And then things get a little
more intellectually interesting,

569
00:25:35,960 --> 00:25:37,170
if still simple.

570
00:25:37,170 --> 00:25:40,350
If Smith is among the
names on that current page,

571
00:25:40,350 --> 00:25:42,170
then do something conditionally.

572
00:25:42,170 --> 00:25:43,840
It's like a fork in the road.

573
00:25:43,840 --> 00:25:44,660
Call Mike.

574
00:25:44,660 --> 00:25:46,930
If Mike is among the names
on that page, called Mike.

575
00:25:46,930 --> 00:25:51,720
But only do line four if line
tree, if you will, is true.

576
00:25:51,720 --> 00:25:53,590
The answer to that question is yes.

577
00:25:53,590 --> 00:25:57,520
>> Else if Smith is earlier in the book--
in other words, if I'm in the M section

578
00:25:57,520 --> 00:26:00,540
and I'm looking for someone to
the left, then what I should do

579
00:26:00,540 --> 00:26:02,300
is something very similar.

580
00:26:02,300 --> 00:26:05,440
Then I should open to the middle
of the left half of the book.

581
00:26:05,440 --> 00:26:09,930
So go left, and then
go back to step two.

582
00:26:09,930 --> 00:26:11,290
Look at the names there.

583
00:26:11,290 --> 00:26:14,779
>> So in other words, do the same thing,
but on a problem that's been halved.

584
00:26:14,779 --> 00:26:15,570
You know what else?

585
00:26:15,570 --> 00:26:18,470
If Smith is later in the book
based on the page I'm looking at,

586
00:26:18,470 --> 00:26:20,790
open to the middle of the
right half of the book

587
00:26:20,790 --> 00:26:24,050
and then go back again
to step two, else--

588
00:26:24,050 --> 00:26:26,000
there's a fourth possibility here.

589
00:26:26,000 --> 00:26:30,830
Mike's either here or to the left
or to the right or not there.

590
00:26:30,830 --> 00:26:32,570
And here we better consider this.

591
00:26:32,570 --> 00:26:35,360
And in fact, if you've ever had
your computer just crash on you,

592
00:26:35,360 --> 00:26:38,822
that is sometimes, but not always, the
result of just a human programmer not

593
00:26:38,822 --> 00:26:41,280
realizing, oh shoot, there's
actually this fourth scenario.

594
00:26:41,280 --> 00:26:43,650
And if you don't write code
to handle that scenario,

595
00:26:43,650 --> 00:26:45,220
sometimes you don't know
what the computer might do.

596
00:26:45,220 --> 00:26:46,770
And indeed a program might crash.

597
00:26:46,770 --> 00:26:49,550
>> But in this case, I thought
about it, and I said, else quit,

598
00:26:49,550 --> 00:26:51,850
because that's the fourth
logical possible scenario.

599
00:26:51,850 --> 00:26:53,950
Now, let's just add
some vocabulary so we

600
00:26:53,950 --> 00:26:57,320
can start to toss around terms that
are otherwise pretty intuitive.

601
00:26:57,320 --> 00:26:59,870
All of the things I've just
highlighted in yellow here,

602
00:26:59,870 --> 00:27:02,140
I'm just going to the
functions or procedures.

603
00:27:02,140 --> 00:27:03,590
They're just kind of actions.

604
00:27:03,590 --> 00:27:06,900
So pick up, open to, look
at, call, open, open,

605
00:27:06,900 --> 00:27:11,170
quit-- these are just actions, or we'll
call them more formally, functions.

606
00:27:11,170 --> 00:27:13,410
>> Meanwhile, now in yellow,
I've highlighted things

607
00:27:13,410 --> 00:27:16,084
that-- let's just start calling
them conditions or branches.

608
00:27:16,084 --> 00:27:18,750
These are decision points where
you might go this way, this way,

609
00:27:18,750 --> 00:27:20,100
or some other direction still.

610
00:27:20,100 --> 00:27:21,430
So those will be conditions.

611
00:27:21,430 --> 00:27:22,930
And now this one's a little fancier.

612
00:27:22,930 --> 00:27:26,600
Let's call these questions
Boolean expressions,

613
00:27:26,600 --> 00:27:28,530
after someone with a last name Bool.

614
00:27:28,530 --> 00:27:30,340
>> And a Boolean expression
is just something

615
00:27:30,340 --> 00:27:32,290
that's either true or false, yes or no.

616
00:27:32,290 --> 00:27:37,870
So it's the question whose answer you
care about, so as to in a condition

617
00:27:37,870 --> 00:27:41,210
make a decision-- get back an answer,
and then go left or right, or something

618
00:27:41,210 --> 00:27:42,450
else altogether.

619
00:27:42,450 --> 00:27:44,860
>> And then lastly, these
lines here-- go back

620
00:27:44,860 --> 00:27:46,737
to step two, go back
to step two-- we could

621
00:27:46,737 --> 00:27:48,320
implement this idea in different ways.

622
00:27:48,320 --> 00:27:51,028
And then those of you with
programming experience might have done

623
00:27:51,028 --> 00:27:52,670
or can imagine doing this differently.

624
00:27:52,670 --> 00:27:55,170
But for today's purposes, it's
just the idea that matters.

625
00:27:55,170 --> 00:27:57,400
This is inducing what
we'll generally call

626
00:27:57,400 --> 00:28:02,110
a loop-- some kind of cycle, because
it's making me do something again.

627
00:28:02,110 --> 00:28:05,340
>> So now, let's just consider
how good this algorithm is.

628
00:28:05,340 --> 00:28:05,899
It's correct.

629
00:28:05,899 --> 00:28:08,940
If Mike's in the book, it's one of
those four scenarios-- again and again

630
00:28:08,940 --> 00:28:10,023
and again, we'll find him.

631
00:28:10,023 --> 00:28:10,890
But how good is it?

632
00:28:10,890 --> 00:28:12,150
Well, we don't have
to be too formal here.

633
00:28:12,150 --> 00:28:14,066
But let's just plot
something, x and y, to get

634
00:28:14,066 --> 00:28:16,470
a sense of the shape of this problem.

635
00:28:16,470 --> 00:28:19,160
>> On the x-axis here is
the size of my problem.

636
00:28:19,160 --> 00:28:22,256
And they a y-axis here
will be the time to solve.

637
00:28:22,256 --> 00:28:23,630
So maybe this is number of pages.

638
00:28:23,630 --> 00:28:26,400
Maybe this is seconds or
page turns-- whatever.

639
00:28:26,400 --> 00:28:29,290
However you want to count is
what this picture will represent.

640
00:28:29,290 --> 00:28:32,630
And that first algorithm, I'm going
to describe as just a straight line.

641
00:28:32,630 --> 00:28:35,120
If there's n pages in
the phone book, then it

642
00:28:35,120 --> 00:28:38,010
might take me as many
as n steps to find Mike.

643
00:28:38,010 --> 00:28:40,930
If Verizon or the phone company
adds one more page next year,

644
00:28:40,930 --> 00:28:44,170
it might take me one more step--
one more unit of time to find Mike.

645
00:28:44,170 --> 00:28:46,230
So there's just this one to one ratio.

646
00:28:46,230 --> 00:28:47,970
It's a straight line slope.

647
00:28:47,970 --> 00:28:51,110
>> Meanwhile, that second
algorithm-- if I'm

648
00:28:51,110 --> 00:28:53,570
going two at a time-- two,
four, six, eight, or double--

649
00:28:53,570 --> 00:28:56,550
going through the pages twice
at a time, two at a time,

650
00:28:56,550 --> 00:28:57,710
it's still straight line.

651
00:28:57,710 --> 00:29:00,720
There's now a one to two
ratio, but just a little lower.

652
00:29:00,720 --> 00:29:04,240
So if there's this many pages
on the chart here in yellow,

653
00:29:04,240 --> 00:29:06,800
that might take me this
many steps or seconds,

654
00:29:06,800 --> 00:29:09,980
otherwise it's going to take me
twice as many on the red line.

655
00:29:09,980 --> 00:29:12,190
>> But the green line is the real takeaway.

656
00:29:12,190 --> 00:29:14,290
This is what we generally
call a logorithm-- log

657
00:29:14,290 --> 00:29:15,840
of n, where n is the number of pages.

658
00:29:15,840 --> 00:29:18,450
But it's the shape that matters
today, because we don't have

659
00:29:18,450 --> 00:29:19,950
to even think about plotting points.

660
00:29:19,950 --> 00:29:21,830
>> Think about an extreme scenario.

661
00:29:21,830 --> 00:29:25,070
Suppose Verizon tomorrow doubles the
number of pages in that phone book,

662
00:29:25,070 --> 00:29:26,900
from 1,000 to 2,000.

663
00:29:26,900 --> 00:29:30,440
In the first algorithm, I
might waste an extra 1,000

664
00:29:30,440 --> 00:29:34,080
steps looking for Mike, just because
Verizon doubled the size of the book.

665
00:29:34,080 --> 00:29:36,740
The second algorithm-- it might
take me an extra 500 steps.

666
00:29:36,740 --> 00:29:40,370
1,000 more pages, I go two at a
time-- 500 more steps to find Mike.

667
00:29:40,370 --> 00:29:43,020
>> But that third algorithm
is kind of magical.

668
00:29:43,020 --> 00:29:46,270
Verizon doubles the number
of pages from 1,000 to 2,000,

669
00:29:46,270 --> 00:29:49,730
but how many more steps does
it take me to look for Mike?

670
00:29:49,730 --> 00:29:53,220
It's just one, because I can just
tear the phone book one more time

671
00:29:53,220 --> 00:29:57,280
from a 2,000 page problem to a
1,000 page problem, and voila.

672
00:29:57,280 --> 00:29:59,030
I've taken a massive bite out of it.

673
00:29:59,030 --> 00:30:01,405
>> And if you go really extreme,
suppose that the phone book

674
00:30:01,405 --> 00:30:05,600
company had something crazy like
a 4 billion page phone book.

675
00:30:05,600 --> 00:30:09,020
Well how many steps might it take
to find Mike Smith in a 4 billion

676
00:30:09,020 --> 00:30:11,990
page phone book?

677
00:30:11,990 --> 00:30:18,450
It's a big number, but just 4 billion to
2 billion to 1 billion to 500 million,

678
00:30:18,450 --> 00:30:20,720
250 million-- still
sounds like big numbers,

679
00:30:20,720 --> 00:30:22,980
but I'm very quickly
getting to smaller values.

680
00:30:22,980 --> 00:30:26,790
>> And in fact, if I do the math
right, I can only divide 4 billion

681
00:30:26,790 --> 00:30:30,750
by roughly 32 times before
I get down to just one.

682
00:30:30,750 --> 00:30:33,640
So if that phone book were 4
billion pages long, no big deal.

683
00:30:33,640 --> 00:30:37,270
Within a few seconds, maybe 32
seconds, I could divide it in half

684
00:30:37,270 --> 00:30:41,560
and eventually find Mike or
conclude that he's not there.

685
00:30:41,560 --> 00:30:44,219
And that's the essence of an
algorithm-- a good algorithm.

686
00:30:44,219 --> 00:30:46,260
And that's one of the
goals of a class like this,

687
00:30:46,260 --> 00:30:49,350
is trying to figure out how do I
solve the problem not just correctly,

688
00:30:49,350 --> 00:30:54,360
like I always knew how to do it one
page at a time-- but correctly and well.

689
00:30:54,360 --> 00:30:57,034
How do I design good
solutions to problems?

690
00:30:57,034 --> 00:30:59,200
So let's take a moment here
and give you a sense now

691
00:30:59,200 --> 00:31:02,260
of CS50 the course itself-- introduce
a few course's staff members.

692
00:31:02,260 --> 00:31:04,010
Just before 2:00, we'll
take a short break

693
00:31:04,010 --> 00:31:05,520
so that those of you
who are shopping can

694
00:31:05,520 --> 00:31:07,130
duck out and take a
look at some other class

695
00:31:07,130 --> 00:31:08,580
and watch the rest of this online.

696
00:31:08,580 --> 00:31:11,250
But for now, let me introduce
CS50, the class itself,

697
00:31:11,250 --> 00:31:13,330
and particularly what is new.

698
00:31:13,330 --> 00:31:15,960
>> So the past spring, we
spent quite a bit of time--

699
00:31:15,960 --> 00:31:19,911
the course's staff and I-- thinking
about what it is we want CS50 to be,

700
00:31:19,911 --> 00:31:21,910
and going back to first
principles, so to speak,

701
00:31:21,910 --> 00:31:24,760
to consider what it is we want
this course to look like and be

702
00:31:24,760 --> 00:31:25,740
like for its students.

703
00:31:25,740 --> 00:31:28,480
And so you'll see in problem
set zero as well, an invitation

704
00:31:28,480 --> 00:31:30,780
to take a look at that
URL which summarizes

705
00:31:30,780 --> 00:31:35,270
some of the motivations behind the
following characteristics of fall 2016.

706
00:31:35,270 --> 00:31:37,570
>> So as you may have gleaned
from the TL:DR handout,

707
00:31:37,570 --> 00:31:41,060
the syllabus today as well as from
the course catalog, this year in CS50,

708
00:31:41,060 --> 00:31:44,540
you're only expected to attend
today-- so job well done--

709
00:31:44,540 --> 00:31:47,960
and the last lecture on November 21st.

710
00:31:47,960 --> 00:31:51,150
And you're welcome but not expected to
attend those lectures in the middle,

711
00:31:51,150 --> 00:31:53,180
because what we're doing
this year, is shooting

712
00:31:53,180 --> 00:31:54,661
in real-time the course's material.

713
00:31:54,661 --> 00:31:56,660
So everything will stay
current and incorporated

714
00:31:56,660 --> 00:31:59,410
as best we can-- current events
and conversations that folks might

715
00:31:59,410 --> 00:32:02,400
be having in industry in the
world, but making that material

716
00:32:02,400 --> 00:32:05,892
available, as a result, even earlier--
complete with full text transcripts

717
00:32:05,892 --> 00:32:07,850
and searchability and
links to other resources.

718
00:32:07,850 --> 00:32:09,930
>> And indeed, we've been
claiming for some time

719
00:32:09,930 --> 00:32:12,830
and we do now believe this,
that we can create, digitally,

720
00:32:12,830 --> 00:32:17,170
a more immersive, a more compelling
educational experience, as opposed

721
00:32:17,170 --> 00:32:21,110
to gathering here some 23 times
in person, hearing someone like me

722
00:32:21,110 --> 00:32:24,925
simply talk about computer science,
as opposed to engaging more actively.

723
00:32:24,925 --> 00:32:27,800
So you'll see in the course's syllabus
a sketch of the semester here,

724
00:32:27,800 --> 00:32:29,840
along with when lectures will
be filmed, to which you're

725
00:32:29,840 --> 00:32:31,710
welcome but not expected,
and when they will

726
00:32:31,710 --> 00:32:33,640
be released on the course's website.

727
00:32:33,640 --> 00:32:36,300
>> And what we'll do here on
Wednesdays starting next week,

728
00:32:36,300 --> 00:32:39,362
is a lot more intimately, with only
those folks who want to participate,

729
00:32:39,362 --> 00:32:41,820
is a so-called walk through,
where I and the course's heads

730
00:32:41,820 --> 00:32:43,730
will actually make things
a little more intimate

731
00:32:43,730 --> 00:32:46,313
down here in the orchestra
section, still have some technology

732
00:32:46,313 --> 00:32:48,365
and walk through the
current week's problem set,

733
00:32:48,365 --> 00:32:52,020
and offer you particularly-- if among
those less comfortable-- all the more

734
00:32:52,020 --> 00:32:54,790
guidance that you might want or
need for the week's challenge.

735
00:32:54,790 --> 00:32:57,820
And similarly, for those who can't
attend those in person, no big deal.

736
00:32:57,820 --> 00:33:00,486
There will be similarly led by
one of the course's senior staff,

737
00:33:00,486 --> 00:33:04,650
Zamalya, the same opportunity embedded
in the problem sets themselves.

738
00:33:04,650 --> 00:33:06,960
>> Problem sets this year
will be released on Fridays

739
00:33:06,960 --> 00:33:10,080
and no longer do seven days later,
but 10 days later-- deliberately

740
00:33:10,080 --> 00:33:12,910
overlapping with each problem
set, so as to better accommodate,

741
00:33:12,910 --> 00:33:15,050
we hope, ebb and flow
in student schedules,

742
00:33:15,050 --> 00:33:18,550
especially when midterms or athletics
or academics or extracurriculars

743
00:33:18,550 --> 00:33:20,465
tend to come and go
especially mid-semester.

744
00:33:20,465 --> 00:33:23,340
That should give you a little more
discretion as to whether you front

745
00:33:23,340 --> 00:33:27,690
load your week with CS50 or back load
it on the following weekend instead.

746
00:33:27,690 --> 00:33:30,817
So look to the course's syllabus
here for the schedule thereof.

747
00:33:30,817 --> 00:33:32,900
And you'll notice too among
the changes this year,

748
00:33:32,900 --> 00:33:36,082
for those more familiar with
programming in the past,

749
00:33:36,082 --> 00:33:38,290
we'll start the semester as
we will today in Scratch,

750
00:33:38,290 --> 00:33:41,730
focus especially on the language
called C, and then transition not

751
00:33:41,730 --> 00:33:45,430
to PHP, but to a language called
Python towards the end of the semester

752
00:33:45,430 --> 00:33:48,565
in the context of web programming,
along with SQL and JavaScript,

753
00:33:48,565 --> 00:33:50,930
HTML, CSS, and yet more.

754
00:33:50,930 --> 00:33:53,790
>> And in answer to an FAQ,
it's indeed the case

755
00:33:53,790 --> 00:33:57,520
that CS is not as scary as I once
thought it was, but it is as much work

756
00:33:57,520 --> 00:33:59,280
as I had heard it might be.

757
00:33:59,280 --> 00:34:05,210
But this is the say that here are some
statistics from fall 2015 student body,

758
00:34:05,210 --> 00:34:08,460
whereby the horizontal blue lines
represent the average number of hours

759
00:34:08,460 --> 00:34:08,960
reported.

760
00:34:08,960 --> 00:34:12,570
And you'll see an average of
six to 10 to 12-- maybe 16

761
00:34:12,570 --> 00:34:16,580
or so and so forth, but with
high variance to be clear.

762
00:34:16,580 --> 00:34:20,570
And so realize that there is not only
students more comfortable and less

763
00:34:20,570 --> 00:34:24,150
comfortable in the course,
but a corresponding support

764
00:34:24,150 --> 00:34:27,699
structure to get those students
through the semester successfully.

765
00:34:27,699 --> 00:34:31,409
>> Indeed, in answer to an FAQ, should
you take CS50 as a first year?

766
00:34:31,409 --> 00:34:32,139
Absolutely.

767
00:34:32,139 --> 00:34:34,690
And in fact, I do regret
not having found my way

768
00:34:34,690 --> 00:34:37,170
or found a new field
that first year as well.

769
00:34:37,170 --> 00:34:41,149
And should you take CS50 with
other courses, certainly as well--

770
00:34:41,149 --> 00:34:43,940
and the general advice we might
give students, that CS50's probably

771
00:34:43,940 --> 00:34:46,929
not the kind of class or intro class
that you should take with three

772
00:34:46,929 --> 00:34:49,199
other or four other p-set classes.

773
00:34:49,199 --> 00:34:52,583
But if you're taking two other p-set
classes, something else, and CS50,

774
00:34:52,583 --> 00:34:53,499
absolutely manageable.

775
00:34:53,499 --> 00:34:56,900
I've had many students in the
past done so quite successfully.

776
00:34:56,900 --> 00:34:59,490
>> And to get you toward that
finish line successfully,

777
00:34:59,490 --> 00:35:02,260
does the course have sections--
different tracks for students

778
00:35:02,260 --> 00:35:05,100
less comfortable, more comfortable,
and somewhere in between,

779
00:35:05,100 --> 00:35:06,850
whereby in the course's
first problem set,

780
00:35:06,850 --> 00:35:08,360
you'll be asked to describe yourself.

781
00:35:08,360 --> 00:35:11,151
And if you are among those less
comfortable, it's the kind of thing

782
00:35:11,151 --> 00:35:12,420
that you just rather know.

783
00:35:12,420 --> 00:35:15,010
And indeed, that's been the
growing demographic in CS50

784
00:35:15,010 --> 00:35:16,090
for quite a few years.

785
00:35:16,090 --> 00:35:19,680
>> As of last fall for
instance, 58% of the class

786
00:35:19,680 --> 00:35:22,560
described themselves as
among those less comfortable,

787
00:35:22,560 --> 00:35:25,210
with 9% among those more
comfortable, and then

788
00:35:25,210 --> 00:35:27,900
the other students there in
red describing themselves

789
00:35:27,900 --> 00:35:29,890
as somewhere in between.

790
00:35:29,890 --> 00:35:33,980
And you'll see here the topics overall
and schedule of sections, all of which

791
00:35:33,980 --> 00:35:36,820
are offered in person, in
real time, with the course's

792
00:35:36,820 --> 00:35:40,320
amazing staff of teaching fellows
and course assistants, some of whom

793
00:35:40,320 --> 00:35:41,660
you'll meet in just a moment.

794
00:35:41,660 --> 00:35:44,993
>> Sections themselves, as you'll see, will
be Mondays and Tuesdays and Wednesdays,

795
00:35:44,993 --> 00:35:47,910
so as to allow you to dive
in after engaging, if you so

796
00:35:47,910 --> 00:35:50,110
choose, in the course's
lecture earlier that week.

797
00:35:50,110 --> 00:35:53,420
And then office hours, which
certainly, with each passing year,

798
00:35:53,420 --> 00:35:56,110
have been no less of a
challenge for the course.

799
00:35:56,110 --> 00:35:59,040
And this year, we're planning not
only to hold office hours-- one

800
00:35:59,040 --> 00:36:02,300
on one opportunities for help for
students on Wednesdays Thursdays

801
00:36:02,300 --> 00:36:05,790
and Sundays, the last of those
being in the afternoon by design

802
00:36:05,790 --> 00:36:08,910
to reduce some of the stress that
invariably arises with late night

803
00:36:08,910 --> 00:36:12,180
p-settting with a deadline looming--
but office hours will also be offered

804
00:36:12,180 --> 00:36:16,920
on Mondays and Tuesdays and
Wednesdays, and Fridays and Saturdays,

805
00:36:16,920 --> 00:36:19,080
thanks to our friends at HSA.

806
00:36:19,080 --> 00:36:22,330
>> CS50 now has its own space
for students and CS50 staff,

807
00:36:22,330 --> 00:36:25,070
atop 67 Mount Auburn Street,
right there in Harvard Square.

808
00:36:25,070 --> 00:36:28,340
The vision for which is that CS50's
TFs and CAs throughout the week,

809
00:36:28,340 --> 00:36:31,052
pretty much throughout most
days, will be there for support.

810
00:36:31,052 --> 00:36:32,760
So if you've got some
question on a p-set

811
00:36:32,760 --> 00:36:35,093
or you're feeling a little
blocked or a little confused,

812
00:36:35,093 --> 00:36:37,640
and heck, you've got an hour or
half an hour between classes,

813
00:36:37,640 --> 00:36:40,920
especially in the square-- can you
pop in and have that question answered

814
00:36:40,920 --> 00:36:43,720
of have that confusion clarified--
very much in the spirit,

815
00:36:43,720 --> 00:36:47,490
you're familiar, of the math
department's own math questions center,

816
00:36:47,490 --> 00:36:51,300
but pretty much around the clock per
[? Gcal ?] that we will post online.

817
00:36:51,300 --> 00:36:54,400
>> Tutoring is also available for those
students, freely from the course's

818
00:36:54,400 --> 00:36:56,750
own staff if you would like
more intimate one on one,

819
00:36:56,750 --> 00:37:00,940
or two or three classmates only, working
with one of the course's staff members.

820
00:37:00,940 --> 00:37:04,320
And indeed, these here are just
some of the course's staff members,

821
00:37:04,320 --> 00:37:06,120
a few of whom you'll
meet in just a moment.

822
00:37:06,120 --> 00:37:09,440
In fact, CS50's own
head teaching fellow,

823
00:37:09,440 --> 00:37:11,790
and head course
assistant, and preceptor,

824
00:37:11,790 --> 00:37:14,998
could come on up, allow
them to say hello.

825
00:37:14,998 --> 00:37:24,498
>> [APPLAUSE]

826
00:37:24,498 --> 00:37:25,456
SPEAKER 1: [INAUDIBLE].

827
00:37:25,456 --> 00:37:53,842

828
00:37:53,842 --> 00:37:59,856
>> [APPLAUSE]

829
00:37:59,856 --> 00:38:00,814
SPEAKER 2: [INAUDIBLE].

830
00:38:00,814 --> 00:38:19,240

831
00:38:19,240 --> 00:38:29,238
>> [APPLAUSE]

832
00:38:29,238 --> 00:38:30,196
SPEAKER 3: [INAUDIBLE].

833
00:38:30,196 --> 00:39:00,951

834
00:39:00,951 --> 00:39:05,120
>> [APPLAUSE]

835
00:39:05,120 --> 00:39:08,740
>> DAVID MALAN: And allow us to
bring on board two of CS50's most

836
00:39:08,740 --> 00:39:11,730
senior staff, Rob and Zamayla as well.

837
00:39:11,730 --> 00:39:17,120
>> [APPLAUSE]

838
00:39:17,120 --> 00:39:19,226
>> Indeed, both Rob and
Zamayla have been with us

839
00:39:19,226 --> 00:39:21,940
for so long, that I was able
to go into CS50's archives

840
00:39:21,940 --> 00:39:24,470
and find this very SD
footage of them participating

841
00:39:24,470 --> 00:39:27,402
on stage themselves some years ago.

842
00:39:27,402 --> 00:39:28,110
ROB: [INAUDIBLE].

843
00:39:28,110 --> 00:39:55,660

844
00:39:55,660 --> 00:40:01,247
>> [APPLAUSE]

845
00:40:01,247 --> 00:40:02,080
ZAMAYLA: [INAUDIBLE]

846
00:40:02,080 --> 00:40:52,888

847
00:40:52,888 --> 00:40:54,467
>> [APPLAUSE]

848
00:40:54,467 --> 00:40:55,425
DAVID MALAN: Thank you.

849
00:40:55,425 --> 00:40:58,160

850
00:40:58,160 --> 00:41:00,030
So in addition to these
team members here,

851
00:41:00,030 --> 00:41:03,662
CS50 has a team of nearly 100
staff members, all of whom

852
00:41:03,662 --> 00:41:06,370
will be available for sections
and office hours and so much more.

853
00:41:06,370 --> 00:41:08,920
And as Rob says too, this is
the most significant overhaul

854
00:41:08,920 --> 00:41:11,534
of CS50 in the 10 years that
I've been in [INAUDIBLE].

855
00:41:11,534 --> 00:41:14,200
[INAUDIBLE] focused especially
in providing a support structure,

856
00:41:14,200 --> 00:41:16,050
trimming away a lot of
the bulk that's been

857
00:41:16,050 --> 00:41:18,870
accumulated in 10 years
of iterative developments

858
00:41:18,870 --> 00:41:20,120
on the course's problem sets.

859
00:41:20,120 --> 00:41:23,470
>> So this year, not only in class but
also in the form of the course's problem

860
00:41:23,470 --> 00:41:26,800
sets, should you find things to
be more streamlined, trimmer, much

861
00:41:26,800 --> 00:41:28,700
more manageable than
in years past, as we

862
00:41:28,700 --> 00:41:33,330
shed some of the baggage that's
developed by nature of evolving year

863
00:41:33,330 --> 00:41:34,970
after year and iterating.

864
00:41:34,970 --> 00:41:37,110
So the new and improved begins today.

865
00:41:37,110 --> 00:41:39,860
>> You'll meet some more of the
course's staff out in the [INAUDIBLE]

866
00:41:39,860 --> 00:41:42,186
at 2:30, where we serve,
as a tradition, cake.

867
00:41:42,186 --> 00:41:44,060
There's a bit more cake
than that, but you'll

868
00:41:44,060 --> 00:41:46,690
meet Erin and Tobias and others still.

869
00:41:46,690 --> 00:41:48,470
And let me give you
a tour before we hear

870
00:41:48,470 --> 00:41:51,600
from some of the other staff members
in the class, of what awaits as well.

871
00:41:51,600 --> 00:41:54,730
In fact, we always start CS50's
semester this coming Saturday,

872
00:41:54,730 --> 00:41:56,330
with what's called CS50 Puzzle Day.

873
00:41:56,330 --> 00:41:58,710
>> It has nothing to do with
computer science per se,

874
00:41:58,710 --> 00:42:00,669
but with about problem
solving more generally.

875
00:42:00,669 --> 00:42:03,210
And if you so choose to partake,
per some of the invitations,

876
00:42:03,210 --> 00:42:05,460
you might have seen door
dropped or on the stage here,

877
00:42:05,460 --> 00:42:07,830
it's an opportunity in teams
of two or three or four,

878
00:42:07,830 --> 00:42:12,680
to participate for puzzles and pizza
and prizes and more-- this Saturday,

879
00:42:12,680 --> 00:42:14,560
stay tuned for more.

880
00:42:14,560 --> 00:42:17,082
>> You'll find too that every
Friday, at Fire and Ice,

881
00:42:17,082 --> 00:42:18,790
does CS50 bring a
whole bunch of students

882
00:42:18,790 --> 00:42:21,100
to lunch, to make a large
class feel more intimate,

883
00:42:21,100 --> 00:42:23,820
and generally bring together
alumni and friends from industry

884
00:42:23,820 --> 00:42:26,710
to talk about what they've
been up to since graduating.

885
00:42:26,710 --> 00:42:29,820
Similarly, this year, will we
inaugurate the first ever CS50 50

886
00:42:29,820 --> 00:42:33,390
coding contest-- a mid-semester
opportunity to allow everyone

887
00:42:33,390 --> 00:42:37,430
on an opt in basis, to have a
challenge of wits against classmates,

888
00:42:37,430 --> 00:42:41,250
again in teams of two or three or
four, using only that programming

889
00:42:41,250 --> 00:42:43,920
savvy that you then have under
your belt after just six or seven

890
00:42:43,920 --> 00:42:46,710
weeks of the class, and participating
in this kind of competition

891
00:42:46,710 --> 00:42:52,261
online-- if you'd like to hone your own
skills all the more in that challenge.

892
00:42:52,261 --> 00:42:54,760
At the end of the semester is
the so-called CS50 Hackathon--

893
00:42:54,760 --> 00:42:58,970
an opportunity that begins at 7:00
PM ends at 7:00 AM, and along the way

894
00:42:58,970 --> 00:43:03,900
are 12 evening hours in which to dive
into the course's final project--

895
00:43:03,900 --> 00:43:06,820
an opportunity to design and
implement most anything of interest

896
00:43:06,820 --> 00:43:08,980
to you with your teaching
fellow's guidance.

897
00:43:08,980 --> 00:43:11,600
Around 9:00AM do we typically
serve pizza, 1:00 AM,

898
00:43:11,600 --> 00:43:15,210
Philippe's, and the few of us
who are still awake at 5:00 AM,

899
00:43:15,210 --> 00:43:18,310
are shuttle bussed down the
road to IHOP for breakfast.

900
00:43:18,310 --> 00:43:21,340
>> And then a few days later
is the so-called CS50 fare--

901
00:43:21,340 --> 00:43:25,450
an end of semester exhibition in
celebration of just how far so many

902
00:43:25,450 --> 00:43:30,200
of CS50 students have come from
week zero all the way to week ,

903
00:43:30,200 --> 00:43:34,610
and keeping in mind that 73% of those
classmates and yours this year have

904
00:43:34,610 --> 00:43:36,840
never taken a CS class before.

905
00:43:36,840 --> 00:43:41,226
In fact, to reemphasize as much, here
is a few more faces from CS50's staff.

906
00:43:41,226 --> 00:43:42,184
SPEAKER 4: [INAUDIBLE].

907
00:43:42,184 --> 00:43:47,909

908
00:43:47,909 --> 00:43:48,867
SPEAKER 5: [INAUDIBLE].

909
00:43:48,867 --> 00:43:53,332

910
00:43:53,332 --> 00:43:54,290
SPEAKER 6: [INAUDIBLE].

911
00:43:54,290 --> 00:43:57,276

912
00:43:57,276 --> 00:43:58,234
SPEAKER 7: [INAUDIBLE].

913
00:43:58,234 --> 00:44:03,727

914
00:44:03,727 --> 00:44:04,643
SPEAKER 8: [INAUDIBLE]

915
00:44:04,643 --> 00:44:12,066

916
00:44:12,066 --> 00:44:13,024
SPEAKER 9: [INAUDIBLE].

917
00:44:13,024 --> 00:44:16,475

918
00:44:16,475 --> 00:44:17,461
>> SPEAKER 4: [INAUDIBLE].

919
00:44:17,461 --> 00:44:18,461
>> SPEAKER 10: [INAUDIBLE].

920
00:44:18,461 --> 00:44:23,456

921
00:44:23,456 --> 00:44:25,438
SPEAKER 11: [INAUDIBLE].

922
00:44:25,438 --> 00:44:26,438
SPEAKER 12: [INAUDIBLE].

923
00:44:26,438 --> 00:44:32,438

924
00:44:32,438 --> 00:44:33,396
SPEAKER 13: [INAUDIBLE]

925
00:44:33,396 --> 00:44:39,360

926
00:44:39,360 --> 00:44:42,342
>> SPEAKER 14: [INAUDIBLE].

927
00:44:42,342 --> 00:44:44,863
>> SPEAKER 13: [INAUDIBLE].

928
00:44:44,863 --> 00:44:45,821
SPEAKER 15: [INAUDIBLE]

929
00:44:45,821 --> 00:44:50,785

930
00:44:50,785 --> 00:44:51,785
SPEAKER 16: [INAUDIBLE].

931
00:44:51,785 --> 00:44:55,761

932
00:44:55,761 --> 00:44:57,252
>> SPEAKER 11: [INAUDIBLE]

933
00:44:57,252 --> 00:44:59,773

934
00:44:59,773 --> 00:45:00,731
SPEAKER 5: [INAUDIBLE].

935
00:45:00,731 --> 00:45:13,250

936
00:45:13,250 --> 00:45:17,130
DAVID MALAN: Some of the team
are themselves shopping classes.

937
00:45:17,130 --> 00:45:19,760
But if those members
of CS50 staff are here,

938
00:45:19,760 --> 00:45:21,230
could come on up for just a moment.

939
00:45:21,230 --> 00:45:25,450
CS50's TFs and CAs and [? staff ?]
members here-- these are just a few

940
00:45:25,450 --> 00:45:30,880
of the faces-- one of whom you just
saw, and a few other-- and a few others

941
00:45:30,880 --> 00:45:32,020
still.

942
00:45:32,020 --> 00:45:35,242
Why don't we go ahead and allow
you guys a five minute break.

943
00:45:35,242 --> 00:45:37,450
If you need to duck out to
shop classes, that's fine.

944
00:45:37,450 --> 00:45:40,900
And in five minutes, we'll resume,
taking a look at Scratch-- the first

945
00:45:40,900 --> 00:45:44,420
of our programming language, meet
the course's staff here some more,

946
00:45:44,420 --> 00:45:47,020
and focus ultimately
on problem set zero.

947
00:45:47,020 --> 00:45:48,710
So we'll be back in five minutes.

948
00:45:48,710 --> 00:45:53,680
>> [APPLAUSE]

949
00:45:53,680 --> 00:49:33,064

950
00:49:33,064 --> 00:49:33,570
>> All right.

951
00:49:33,570 --> 00:49:34,790
So we are back.

952
00:49:34,790 --> 00:49:37,530
And in our remaining
time today, the goal

953
00:49:37,530 --> 00:49:40,520
is to level the playing field
in terms of some terminology,

954
00:49:40,520 --> 00:49:41,497
in terms of some ideas.

955
00:49:41,497 --> 00:49:43,580
Because indeed, as per
some of the charts earlier,

956
00:49:43,580 --> 00:49:46,330
there is going to be a range of
levels of experience in the class,

957
00:49:46,330 --> 00:49:49,410
some of whose students have
taken some programming before,

958
00:49:49,410 --> 00:49:50,400
some of whom haven't.

959
00:49:50,400 --> 00:49:53,630
And so with this first problem
set and with this first language

960
00:49:53,630 --> 00:49:57,030
do we have an opportunity to start
to take for granted after today

961
00:49:57,030 --> 00:49:59,160
some common vocabulary and idea.

962
00:49:59,160 --> 00:50:01,790
>> And we'll do this by way of
the course's first languages--

963
00:50:01,790 --> 00:50:07,270
in addition to C and Python and
JavaScript and SQL and HTML and CSS,

964
00:50:07,270 --> 00:50:10,650
we'll be focusing initially
and just for problem set zero

965
00:50:10,650 --> 00:50:14,360
on this graphical language, called
Scratch, developed by MIT'S Media Lab

966
00:50:14,360 --> 00:50:17,080
down the road, to help
students and kids especially

967
00:50:17,080 --> 00:50:21,270
express themselves algorithmically--
in a way more consistent with what

968
00:50:21,270 --> 00:50:23,500
we might call computational thinking.

969
00:50:23,500 --> 00:50:27,185
>> And it's a useful language because
very quickly next week in week one,

970
00:50:27,185 --> 00:50:30,560
do we transition to a more
traditional and arcane language called

971
00:50:30,560 --> 00:50:32,570
C, which is purely textual.

972
00:50:32,570 --> 00:50:35,130
You only use your keyboard in
order to write instructions

973
00:50:35,130 --> 00:50:36,430
like these on the screen.

974
00:50:36,430 --> 00:50:39,040
But even if you've never seen
a programming language before,

975
00:50:39,040 --> 00:50:41,370
in just glancing at
this, all be it cryptic,

976
00:50:41,370 --> 00:50:46,210
you can probably guess that
probably prints Hello World.

977
00:50:46,210 --> 00:50:48,250
But there's a lot of
syntactic overhead there.

978
00:50:48,250 --> 00:50:51,970
There is the weird hash
symbol or hash tag up top.

979
00:50:51,970 --> 00:50:55,100
There's the angle brackets, some
parentheses, curly braces, semi-colon--

980
00:50:55,100 --> 00:50:58,080
there's just so much visual
syntax that gets in the way.

981
00:50:58,080 --> 00:51:00,140
We start the course with
Scratch so as to get

982
00:51:00,140 --> 00:51:03,800
past all of those intellectually
uninteresting distractions,

983
00:51:03,800 --> 00:51:06,490
and focus instead on the ideas.

984
00:51:06,490 --> 00:51:08,740
>> In fact, this might be before.

985
00:51:08,740 --> 00:51:11,030
This, for this, week shall be after.

986
00:51:11,030 --> 00:51:12,960
This, in this graphical
language Scratch,

987
00:51:12,960 --> 00:51:16,070
is how you would implement that same
program-- a program that when run,

988
00:51:16,070 --> 00:51:17,540
simply says hello world.

989
00:51:17,540 --> 00:51:20,940
And what's nice about Scratch is
that it's this graphical programming

990
00:51:20,940 --> 00:51:24,980
environment that uses puzzle pieces or
blocks, that only interlock together

991
00:51:24,980 --> 00:51:26,640
if it makes logical sense to do so.

992
00:51:26,640 --> 00:51:30,010
And with Scratch can you develop
animations and interactive games

993
00:51:30,010 --> 00:51:33,470
and art, and any number of things that
you might imagine in your own mind,

994
00:51:33,470 --> 00:51:37,400
and implement them simply by
dragging and dropping puzzle pieces.

995
00:51:37,400 --> 00:51:40,465
>> And indeed, we'll have the ability
to express some of the same ideas

996
00:51:40,465 --> 00:51:43,090
that I just mentioned a moment
ago in the context of Mike Smith

997
00:51:43,090 --> 00:51:46,870
and searching a phone book-- things
like functions, just actions,

998
00:51:46,870 --> 00:51:49,270
things like loops that do
things again and again,

999
00:51:49,270 --> 00:51:51,370
variables, which is
something we'll introduce,

1000
00:51:51,370 --> 00:51:54,286
but it's familiar perhaps from
algebra-- just some kind of placeholder

1001
00:51:54,286 --> 00:51:57,040
to store some value you might
need later-- Boolean expressions,

1002
00:51:57,040 --> 00:51:59,920
where those yes no or true
false questions from before.

1003
00:51:59,920 --> 00:52:03,317
Conditions are those forks in the
road-- those branches so to speak.

1004
00:52:03,317 --> 00:52:05,900
And then there are some fancier
features we'll see even today,

1005
00:52:05,900 --> 00:52:09,050
called arrays and threads and
events, that we'll then revisit over

1006
00:52:09,050 --> 00:52:10,660
time in different languages.

1007
00:52:10,660 --> 00:52:12,990
But Scratch allows us
to explore all of these.

1008
00:52:12,990 --> 00:52:16,979
So here in Scratch, this purple
block is what a function is typically

1009
00:52:16,979 --> 00:52:17,770
going to look like.

1010
00:52:17,770 --> 00:52:21,820
This purple puzzle piece that has some
word like say, which is the action,

1011
00:52:21,820 --> 00:52:24,690
and then it might have an
argument or a parameter-- some way

1012
00:52:24,690 --> 00:52:27,340
of kind of customizing
what that block does

1013
00:52:27,340 --> 00:52:31,382
so that it's not pre-determined by
MIT what this purple block says.

1014
00:52:31,382 --> 00:52:33,590
In fact, you'll see in a
moment that I'm able to type

1015
00:52:33,590 --> 00:52:36,131
the words like hello world, or
hello David, or hello Zamayla,

1016
00:52:36,131 --> 00:52:39,950
or whatever I want, in the argument
to that puzzle piece-- the white box

1017
00:52:39,950 --> 00:52:40,451
there.

1018
00:52:40,451 --> 00:52:43,366
Meanwhile, if I want a loop, we'll
see that there's puzzle pieces that

1019
00:52:43,366 --> 00:52:44,840
look a little orange like this.

1020
00:52:44,840 --> 00:52:47,890
And their shape kind of suggests that
something happens again and again

1021
00:52:47,890 --> 00:52:48,880
in a cycle.

1022
00:52:48,880 --> 00:52:53,000
>> So if I wrap a say hello world block
with a forever block in Scratch,

1023
00:52:53,000 --> 00:52:56,507
it's just going to keep saying hello
world forever, quite literally.

1024
00:52:56,507 --> 00:52:58,590
Meanwhile, there's another
type of loop in Scratch

1025
00:52:58,590 --> 00:53:00,548
that we'll see-- a repeat
block-- where, if you

1026
00:53:00,548 --> 00:53:04,140
know in advance how many times
you want the loop to execute

1027
00:53:04,140 --> 00:53:08,050
a finite number of times in fact-- you
can specify that by typing in a number

1028
00:53:08,050 --> 00:53:11,580
or even plugging in a variable,
like x or y as we'll see.

1029
00:53:11,580 --> 00:53:13,890
>> In fact, variables like
i in this case, which

1030
00:53:13,890 --> 00:53:16,309
is a common name for an
integer variable that

1031
00:53:16,309 --> 00:53:18,100
just stores a number--
an integer might be,

1032
00:53:18,100 --> 00:53:21,670
to use this orange block here to
set a variable like i to zero.

1033
00:53:21,670 --> 00:53:25,100
Here's an example in green of a
Boolean expression in Scratch.

1034
00:53:25,100 --> 00:53:29,900
Even though this looks like a math
formula, math inequalities like this

1035
00:53:29,900 --> 00:53:31,520
really are Boolean expressions.

1036
00:53:31,520 --> 00:53:32,770
This is either true or false.

1037
00:53:32,770 --> 00:53:34,500
I is less than 50.

1038
00:53:34,500 --> 00:53:38,015
It's either a yes or no answer
or true or false answer.

1039
00:53:38,015 --> 00:53:40,140
And we'll generally call
those Boolean expressions.

1040
00:53:40,140 --> 00:53:41,348
And it doesn't have to be 50.

1041
00:53:41,348 --> 00:53:44,170
It can be x less than y,
greater than y, equal to y--

1042
00:53:44,170 --> 00:53:46,220
any number of other
questions might be asked.

1043
00:53:46,220 --> 00:53:49,450
>> Now, at first glance, this might look
suddenly quite bold here, and it is.

1044
00:53:49,450 --> 00:53:52,740
But concept wise, it's
pretty familiar from before.

1045
00:53:52,740 --> 00:53:55,570
If x is less than y, than say as much.

1046
00:53:55,570 --> 00:53:58,430
Else if x is greater
than y, then say as much.

1047
00:53:58,430 --> 00:54:00,460
Else say x is equal to y.

1048
00:54:00,460 --> 00:54:03,420
So we have an example
there of a third scenario--

1049
00:54:03,420 --> 00:54:06,800
the only third possibility-- x is either
greater than, less than, or equal to.

1050
00:54:06,800 --> 00:54:08,620
So we have a three way fork in the road.

1051
00:54:08,620 --> 00:54:12,490
>> And notice what's cool here-- Scratch,
it would seem, has just one puzzle

1052
00:54:12,490 --> 00:54:15,040
piece, in this case, in if else block.

1053
00:54:15,040 --> 00:54:18,290
And yet that would seem to imply you can
only have a two way fork in the road.

1054
00:54:18,290 --> 00:54:20,831
You can go left or right, but
what about that third scenario?

1055
00:54:20,831 --> 00:54:21,960
What if x equals y?

1056
00:54:21,960 --> 00:54:22,700
No big deal.

1057
00:54:22,700 --> 00:54:25,840
Take one puzzle piece, put
another one inside of it

1058
00:54:25,840 --> 00:54:31,959
to create the semantic equivalent
of if, else if, else-- and now you

1059
00:54:31,959 --> 00:54:33,500
have your three way fork in the road.

1060
00:54:33,500 --> 00:54:35,291
And as we'll see, the
Scratch puzzle pieces

1061
00:54:35,291 --> 00:54:38,020
can be stretched and grow, so
as to cram more stuff in them.

1062
00:54:38,020 --> 00:54:40,620
You don't have to fit
everything in its default size.

1063
00:54:40,620 --> 00:54:42,890
>> This is something we'll
soon see is called an array.

1064
00:54:42,890 --> 00:54:47,080
It's like a list-- some way of
storing multiple pieces of information

1065
00:54:47,080 --> 00:54:49,086
in a variable, not just a number.

1066
00:54:49,086 --> 00:54:51,960
These we'll see a representative of
something called multi-threading.

1067
00:54:51,960 --> 00:54:54,480
In fact, all of your
Macs and PCs these days

1068
00:54:54,480 --> 00:54:57,010
support multi-threading,
which means you can literally

1069
00:54:57,010 --> 00:54:58,590
do multiple things at a time.

1070
00:54:58,590 --> 00:55:01,590
You can have Microsoft Word up in the
foreground, working on some essay.

1071
00:55:01,590 --> 00:55:03,360
You might have a browser
in the background opening

1072
00:55:03,360 --> 00:55:04,920
G-mail or Facebook or the like.

1073
00:55:04,920 --> 00:55:08,930
Your computer can do multiple things
today because it is multi-threaded,

1074
00:55:08,930 --> 00:55:12,590
and programs they're in in
particular are also multi-threaded.

1075
00:55:12,590 --> 00:55:15,170
>> There's things called events as
well in the world of Scratch,

1076
00:55:15,170 --> 00:55:18,840
and then there's a way too, to make
our own custom puzzle pieces if things

1077
00:55:18,840 --> 00:55:21,010
don't actually exist in advance.

1078
00:55:21,010 --> 00:55:24,460
So let's motivate this as follows.

1079
00:55:24,460 --> 00:55:26,780
Some years ago, when I
first discovered Scratch,

1080
00:55:26,780 --> 00:55:29,730
when I was actually a
grad student at MIT, we

1081
00:55:29,730 --> 00:55:31,840
ourselves were tasked to make homework.

1082
00:55:31,840 --> 00:55:33,814
And I implemented--
which, in retrospect,

1083
00:55:33,814 --> 00:55:36,980
was a very poor decision because it's
the most infuriating song in the world

1084
00:55:36,980 --> 00:55:39,521
to listen to for eight hours
while working on your homework--

1085
00:55:39,521 --> 00:55:43,380
but something I had called Oscar Time,
which is perhaps a familiar song.

1086
00:55:43,380 --> 00:55:46,020
>> CS50s own Jordan Hayashi, one of
our more senior staff members,

1087
00:55:46,020 --> 00:55:50,120
has upgraded it for 2015 and
now 2016, since back in the day,

1088
00:55:50,120 --> 00:55:52,810
I had everything just going
into Oscar's trash can.

1089
00:55:52,810 --> 00:55:55,520
Now we support recycling and composting.

1090
00:55:55,520 --> 00:55:58,250
>> But to paint the picture
of what we can do here

1091
00:55:58,250 --> 00:56:00,330
and to motivate some of
the lower level examples,

1092
00:56:00,330 --> 00:56:02,600
could we get one other
volunteer to just come on up

1093
00:56:02,600 --> 00:56:04,531
and play my first
homework assignment ever?

1094
00:56:04,531 --> 00:56:05,030
Come on up.

1095
00:56:05,030 --> 00:56:05,450
What's your name?

1096
00:56:05,450 --> 00:56:06,230
>> HENRY: Henry.

1097
00:56:06,230 --> 00:56:08,860
>> DAVID MALAN: Henry, come on up.

1098
00:56:08,860 --> 00:56:10,390
Come on up.

1099
00:56:10,390 --> 00:56:13,270
Head either way, and
you'll see in a moment,

1100
00:56:13,270 --> 00:56:16,070
I'm going to go ahead and hit the
green flag in the top right hand

1101
00:56:16,070 --> 00:56:17,300
corner, which means go.

1102
00:56:17,300 --> 00:56:19,520
The little stop sign icon
is going to say stop,

1103
00:56:19,520 --> 00:56:21,690
and that's when you start
and stop the program.

1104
00:56:21,690 --> 00:56:22,650
Nice to meet you.

1105
00:56:22,650 --> 00:56:23,150
All right.

1106
00:56:23,150 --> 00:56:25,300
So we're going to see the instructions
on the screen in just a moment.

1107
00:56:25,300 --> 00:56:27,650
And just by playing this game
for a few seconds-- trust me,

1108
00:56:27,650 --> 00:56:29,870
we're not going to want to play
all the way to the end-- you will

1109
00:56:29,870 --> 00:56:31,670
get a sense of what the program does.

1110
00:56:31,670 --> 00:56:35,370
And more than just focus on Henry
being good or bad at this game, focus

1111
00:56:35,370 --> 00:56:38,800
and how was it implemented by me
originally and then by Jordan.

1112
00:56:38,800 --> 00:56:40,840
In other words, where are the variables?

1113
00:56:40,840 --> 00:56:41,720
Where are the loops?

1114
00:56:41,720 --> 00:56:42,720
Where are the functions?

1115
00:56:42,720 --> 00:56:46,900
And we'll see if we don't see
those underneath the hood.

1116
00:56:46,900 --> 00:56:49,860
>> Just click and drag trash
to the appropriate bin.

1117
00:56:49,860 --> 00:57:48,300
>> [MUSIC PLAYING]

1118
00:57:48,300 --> 00:57:48,800
All right.

1119
00:57:48,800 --> 00:57:49,360
That's very good.

1120
00:57:49,360 --> 00:57:50,486
Why don't we stop it there.

1121
00:57:50,486 --> 00:57:50,986
Thank you.

1122
00:57:50,986 --> 00:57:52,030
Congratulations to Henry.

1123
00:57:52,030 --> 00:57:53,202
Thank you.

1124
00:57:53,202 --> 00:57:56,890
>> [APPLAUSE]

1125
00:57:56,890 --> 00:57:58,650
>> Just imagine debugging that program.

1126
00:57:58,650 --> 00:58:02,080
If there's a problem two
minutes into the song-- but so

1127
00:58:02,080 --> 00:58:03,630
what's going on here really?

1128
00:58:03,630 --> 00:58:07,100
As complicated as it might
start to seem to get over time,

1129
00:58:07,100 --> 00:58:09,110
indeed more and more
stuff started falling,

1130
00:58:09,110 --> 00:58:11,570
what's interesting about
this kind of example--

1131
00:58:11,570 --> 00:58:13,470
and we'll see a few
others-- is that if you

1132
00:58:13,470 --> 00:58:16,616
look past the complexity or
the sophistication of the game,

1133
00:58:16,616 --> 00:58:19,240
there's a very simple building
blocks that play-- all of which,

1134
00:58:19,240 --> 00:58:22,040
if you distill them to those
building blocks, are very accessible

1135
00:58:22,040 --> 00:58:23,601
and implementable unto themselves.

1136
00:58:23,601 --> 00:58:25,350
For instance, it's
been some time, but I'm

1137
00:58:25,350 --> 00:58:29,100
pretty sure what I initially did when
making this game for the first time

1138
00:58:29,100 --> 00:58:30,987
was I completely like procrastinated.

1139
00:58:30,987 --> 00:58:33,320
I didn't focus at all on the
logic or the puzzle pieces,

1140
00:58:33,320 --> 00:58:37,010
I focused on the graphics and finding
the street post and the trash can

1141
00:58:37,010 --> 00:58:37,740
and all of that.

1142
00:58:37,740 --> 00:58:39,656
But those were requisite
ingredients at first.

1143
00:58:39,656 --> 00:58:43,420
And once I finished procrastinating and
laying out the overarching framework,

1144
00:58:43,420 --> 00:58:46,537
I decided, let me just make one
piece of trash fall from the sky.

1145
00:58:46,537 --> 00:58:48,370
And we'll see Scratch
supports things called

1146
00:58:48,370 --> 00:58:52,586
sprites-- characters that can
have different costumes on so they

1147
00:58:52,586 --> 00:58:53,210
look different.

1148
00:58:53,210 --> 00:58:55,860
>> And so I put a trash
costume on one such sprite.

1149
00:58:55,860 --> 00:58:58,207
And I just needed it
to fall from the sky.

1150
00:58:58,207 --> 00:59:00,790
And so it turns out, Scratch,
like most programming languages,

1151
00:59:00,790 --> 00:59:04,299
supports random numbers or
technically pseudocode random numbers,

1152
00:59:04,299 --> 00:59:06,590
so that by dragging and
dropping certain puzzle pieces,

1153
00:59:06,590 --> 00:59:09,090
I was able to have the trash
come from the left at first.

1154
00:59:09,090 --> 00:59:11,780
And then the next time it fell, from
the right and then from the middle.

1155
00:59:11,780 --> 00:59:14,260
And all the game did was just
have trash falling from the sky.

1156
00:59:14,260 --> 00:59:15,970
You couldn't point at it or click on it.

1157
00:59:15,970 --> 00:59:17,303
You couldn't open the trash can.

1158
00:59:17,303 --> 00:59:18,360
You couldn't do anything.

1159
00:59:18,360 --> 00:59:20,650
But it was a baby step
toward my ultimate vision.

1160
00:59:20,650 --> 00:59:22,920
>> And after that, I actually
implemented some kind

1161
00:59:22,920 --> 00:59:27,430
of sensing so that if you did click
and drag on the piece of trash

1162
00:59:27,430 --> 00:59:30,550
over the trash can, Oscar's
lid would open and close.

1163
00:59:30,550 --> 00:59:33,850
Nothing would happen to the trash, but
at least the lid would open and close.

1164
00:59:33,850 --> 00:59:35,842
So then check, step two of two.

1165
00:59:35,842 --> 00:59:38,300
And this is what's going to be
key in both problem set zero

1166
00:59:38,300 --> 00:59:42,170
and in programming more generally, is to
take these very deliberate baby steps.

1167
00:59:42,170 --> 00:59:45,590
Because not only does it allow you to
feel honestly accomplished much more

1168
00:59:45,590 --> 00:59:47,450
quickly-- it's the
worst thing in the world

1169
00:59:47,450 --> 00:59:52,349
to try to implement all of Oscar Time,
then hours later hit the green flag,

1170
00:59:52,349 --> 00:59:54,640
and nothing works as expected
because where do you even

1171
00:59:54,640 --> 00:59:57,350
begin to debug or to
troubleshoot that program?

1172
00:59:57,350 --> 00:59:58,670
It's just overwhelming.

1173
00:59:58,670 --> 01:00:02,992
>> And so truly embracing this idea
of taking steps-- baby steps again

1174
01:00:02,992 --> 01:00:05,200
and again-- building up
something that's, in the end,

1175
01:00:05,200 --> 01:00:09,872
really impressive and complex, but
at first, is not nearly as much so.

1176
01:00:09,872 --> 01:00:10,830
In fact, let's do this.

1177
01:00:10,830 --> 01:00:15,189
Let me go ahead and-- Scratch itself
exists on the web at Scratch.MIT.edu,

1178
01:00:15,189 --> 01:00:16,980
and you'll be told as
much again in problem

1179
01:00:16,980 --> 01:00:20,400
set zero, the specification for
which is already on CS50's website.

1180
01:00:20,400 --> 01:00:21,925
>> But this is what Scratch itself is.

1181
01:00:21,925 --> 01:00:24,410
And there's really just
three primary areas.

1182
01:00:24,410 --> 01:00:27,180
At the top left there
is the so-called stage.

1183
01:00:27,180 --> 01:00:28,010
This is Scratch.

1184
01:00:28,010 --> 01:00:29,910
The default costume is a cat.

1185
01:00:29,910 --> 01:00:33,150
And this is the rectangular world in
which you can move-- up, down, left,

1186
01:00:33,150 --> 01:00:34,330
right and some other stuff.

1187
01:00:34,330 --> 01:00:38,039
In the middle here are our categories
or our pallets of puzzle pieces,

1188
01:00:38,039 --> 01:00:39,830
and different colors
mean different things.

1189
01:00:39,830 --> 01:00:42,720
And if you poke around, you'll see
things like loops and conditions

1190
01:00:42,720 --> 01:00:44,360
and variables and other ingredients.

1191
01:00:44,360 --> 01:00:46,260
>> And then over here is the scripts area.

1192
01:00:46,260 --> 01:00:49,220
This is where I can drag and drop
those puzzle pieces to do things.

1193
01:00:49,220 --> 01:00:50,890
So let's do one such thing.

1194
01:00:50,890 --> 01:00:52,830
Let me go ahead and--
and I know where it is.

1195
01:00:52,830 --> 01:00:56,310
So I'm going to immediately click on
where I know things are ready to be,

1196
01:00:56,310 --> 01:00:59,340
but pointing and clicking and
poking around are inevitable.

1197
01:00:59,340 --> 01:01:01,520
So when green flag clicked,
what do I want to do?

1198
01:01:01,520 --> 01:01:03,300
I'm going to do this.

1199
01:01:03,300 --> 01:01:06,899
I'm going to drag this purple puzzle
piece, say hello for two seconds,

1200
01:01:06,899 --> 01:01:07,690
and let me zoom in.

1201
01:01:07,690 --> 01:01:10,065
>> And I'm going to change this
to be what I want it to be--

1202
01:01:10,065 --> 01:01:12,671
hello world for two seconds is fine.

1203
01:01:12,671 --> 01:01:15,170
Now, I'm going to click the
green flag, or if I really want,

1204
01:01:15,170 --> 01:01:18,020
I can full screen it and then come back.

1205
01:01:18,020 --> 01:01:20,260
It will just keep
everything in one window.

1206
01:01:20,260 --> 01:01:22,341
Green flag-- hello world.

1207
01:01:22,341 --> 01:01:22,840
All right.

1208
01:01:22,840 --> 01:01:24,989
Not all that interesting.

1209
01:01:24,989 --> 01:01:26,280
So let me go ahead and do this.

1210
01:01:26,280 --> 01:01:27,238
Let me try another one.

1211
01:01:27,238 --> 01:01:30,940
When green flag clicked-- let's
do something like a sound.

1212
01:01:30,940 --> 01:01:33,080
And notice that out of
the box for free you get

1213
01:01:33,080 --> 01:01:36,110
a cat sound, as is the default sprite.

1214
01:01:36,110 --> 01:01:38,580
So now let me go ahead and
hit the green flag now.

1215
01:01:38,580 --> 01:01:39,424
>> [MEOWING]

1216
01:01:39,424 --> 01:01:40,690
>> Aw.

1217
01:01:40,690 --> 01:01:41,570
That's adorable.

1218
01:01:41,570 --> 01:01:43,240
I'm programming.

1219
01:01:43,240 --> 01:01:44,750
So what have I done?

1220
01:01:44,750 --> 01:01:46,630
This is the equivalent of a program.

1221
01:01:46,630 --> 01:01:47,800
It's obviously super simple.

1222
01:01:47,800 --> 01:01:51,500
It didn't really take all that much
effort and MIT did most of the work,

1223
01:01:51,500 --> 01:01:54,090
but I have called a function.

1224
01:01:54,090 --> 01:01:55,140
I have used a function.

1225
01:01:55,140 --> 01:01:58,680
I've made some action, using just
that one purple puzzle piece.

1226
01:01:58,680 --> 01:02:02,160
>> Well, if I want to do
three meows in a row?

1227
01:02:02,160 --> 01:02:04,770
Let me go ahead and do two and three.

1228
01:02:04,770 --> 01:02:07,110
And notice that when you
hover nearby a puzzle piece,

1229
01:02:07,110 --> 01:02:09,170
a little white line appears
sort of magnetically,

1230
01:02:09,170 --> 01:02:11,390
and it will snap
together when you let go.

1231
01:02:11,390 --> 01:02:12,800
Let's see what happens here.

1232
01:02:12,800 --> 01:02:14,120
>> [MEOWING]

1233
01:02:14,120 --> 01:02:18,590

1234
01:02:18,590 --> 01:02:20,710
>> There's a bug.

1235
01:02:20,710 --> 01:02:21,850
I only hear one meow.

1236
01:02:21,850 --> 01:02:23,640
Why might that be?

1237
01:02:23,640 --> 01:02:25,201
Yeah?

1238
01:02:25,201 --> 01:02:25,700
Yeah.

1239
01:02:25,700 --> 01:02:27,850
We don't really hear it,
but that's good intuition.

1240
01:02:27,850 --> 01:02:29,600
They're all playing at the same time.

1241
01:02:29,600 --> 01:02:30,200
Why?

1242
01:02:30,200 --> 01:02:32,787
Well, the computer is just going
to do what you tell it to do.

1243
01:02:32,787 --> 01:02:34,870
So if you say, play sound,
play sound, play sound,

1244
01:02:34,870 --> 01:02:39,087
but you don't tell it to play until
you're done, play until you're done,

1245
01:02:39,087 --> 01:02:41,170
it's going to blow through
the program really fast

1246
01:02:41,170 --> 01:02:43,030
and do only what you tell it to do.

1247
01:02:43,030 --> 01:02:45,240
>> So I actually need to fix
this in a couple of ways.

1248
01:02:45,240 --> 01:02:46,823
I could just do this, get rid of this.

1249
01:02:46,823 --> 01:02:50,380
Let me try this other puzzle
piece-- play sound meow until done,

1250
01:02:50,380 --> 01:02:53,272
and then drag three of
these and click Play.

1251
01:02:53,272 --> 01:02:55,630
>> [MEOWING]

1252
01:02:55,630 --> 01:02:59,550
>> It's not really very--
thank you-- very natural.

1253
01:02:59,550 --> 01:03:02,790
So why don't I-- let
me go to control here.

1254
01:03:02,790 --> 01:03:03,290
Nice.

1255
01:03:03,290 --> 01:03:08,430
Wait one second, and now let me go back
to sounds, and play sound until done,

1256
01:03:08,430 --> 01:03:10,820
and then let me get wait one second.

1257
01:03:10,820 --> 01:03:14,892
And then let me go and get one
more sound, and here we go.

1258
01:03:14,892 --> 01:03:17,550
>> [MEOWING]

1259
01:03:17,550 --> 01:03:22,130
>> A little more natural, but
this is not very efficient.

1260
01:03:22,130 --> 01:03:26,030
Like I was getting bored, all be
it briefly, clicking back and forth

1261
01:03:26,030 --> 01:03:28,924
and really duplicating my work--
pretty much copying and pasting.

1262
01:03:28,924 --> 01:03:30,840
Indeed, if I Control
clicked or right clicked,

1263
01:03:30,840 --> 01:03:32,700
I could have just copied and pasted.

1264
01:03:32,700 --> 01:03:36,070
What would be a better construct to use?

1265
01:03:36,070 --> 01:03:37,290
What idea from before?

1266
01:03:37,290 --> 01:03:38,190
>> Yeah, so a loop.

1267
01:03:38,190 --> 01:03:40,780
And in fact, if we poked around,
we might find exactly that.

1268
01:03:40,780 --> 01:03:43,930
Let me go to Events or rather Control.

1269
01:03:43,930 --> 01:03:45,850
So repeat-- I don't
want it to be 10 times.

1270
01:03:45,850 --> 01:03:47,570
That's going to get annoying quickly.

1271
01:03:47,570 --> 01:03:49,580
But I will repeat three times.

1272
01:03:49,580 --> 01:03:52,555
Let me go back to sound and
play the sound until it's done.

1273
01:03:52,555 --> 01:03:54,680
Let me go back to Control
and just wait one second.

1274
01:03:54,680 --> 01:03:56,471
And notice, you might
think it doesn't fit,

1275
01:03:56,471 --> 01:03:59,720
but again if magnetically you let it
snap in place, it will grow to fill.

1276
01:03:59,720 --> 01:04:01,171
What's it play now?

1277
01:04:01,171 --> 01:04:04,700
>> [MEOWING]

1278
01:04:04,700 --> 01:04:05,200
OK.

1279
01:04:05,200 --> 01:04:05,860
Nice.

1280
01:04:05,860 --> 01:04:08,740
And this is what would be called
a program that's also correct.

1281
01:04:08,740 --> 01:04:13,790
It meowed three times fairly
naturally, but it's better designed.

1282
01:04:13,790 --> 01:04:15,780
I'm using less redundancy.

1283
01:04:15,780 --> 01:04:17,170
I didn't copy and paste anything.

1284
01:04:17,170 --> 01:04:18,670
I just used a better idea.

1285
01:04:18,670 --> 01:04:21,540
>> Now, this is still not all that
interesting with Scratch not doing

1286
01:04:21,540 --> 01:04:22,130
anything.

1287
01:04:22,130 --> 01:04:23,588
So let's do something else instead.

1288
01:04:23,588 --> 01:04:24,870
Let's do something forever.

1289
01:04:24,870 --> 01:04:25,620
And you know what?

1290
01:04:25,620 --> 01:04:26,670
Motion seems interesting.

1291
01:04:26,670 --> 01:04:31,960
Let's have him move 10
steps and hit play now.

1292
01:04:31,960 --> 01:04:32,770
>> OK.

1293
01:04:32,770 --> 01:04:35,500
Well we can kind of drag
him back, and he's still

1294
01:04:35,500 --> 01:04:37,450
running because he's doing this forever.

1295
01:04:37,450 --> 01:04:39,350
So the loop is doing
what it's saying to do,

1296
01:04:39,350 --> 01:04:40,850
but this isn't all that interesting.

1297
01:04:40,850 --> 01:04:41,510
Let's do this.

1298
01:04:41,510 --> 01:04:46,070
Let me add a control block, and use one
of those conditions for the first time.

1299
01:04:46,070 --> 01:04:49,319
>> So it's going to move 10 steps--
10 dots, 10 pixels on the screen--

1300
01:04:49,319 --> 01:04:50,860
then it's going to ask this question.

1301
01:04:50,860 --> 01:04:55,540
If something is true, then do
something inside this block.

1302
01:04:55,540 --> 01:04:59,260
So it turns out sensing has a whole
bunch of Boolean expressions--

1303
01:04:59,260 --> 01:05:02,780
questions of the yes no or true
false form-- let me do this.

1304
01:05:02,780 --> 01:05:05,460
>> If touching-- and then there's
this little drop down menu.

1305
01:05:05,460 --> 01:05:06,610
I can parameterize it.

1306
01:05:06,610 --> 01:05:09,210
If touching the edge-- let's
do something like that.

1307
01:05:09,210 --> 01:05:13,510
So if touching edge--
let me go back to motion.

1308
01:05:13,510 --> 01:05:18,481
And why don't we just
turn around 180 degrees?

1309
01:05:18,481 --> 01:05:18,980
All right.

1310
01:05:18,980 --> 01:05:21,270
So forever, move 10 steps.

1311
01:05:21,270 --> 01:05:23,870
If you're touching the
edge, turn 180 degrees.

1312
01:05:23,870 --> 01:05:25,920
And that's not the end of the program
because you're in a forever block,

1313
01:05:25,920 --> 01:05:28,253
so it's going to go again and
again and again and again.

1314
01:05:28,253 --> 01:05:30,180
So let's see what happens.

1315
01:05:30,180 --> 01:05:30,985
OK.

1316
01:05:30,985 --> 01:05:34,470
A little buggy, but kind of cool.

1317
01:05:34,470 --> 01:05:37,910
>> And we can add to this some silly things
that aren't all that intellectually

1318
01:05:37,910 --> 01:05:38,470
interesting.

1319
01:05:38,470 --> 01:05:43,410
But if we hit this little
microphone button-- ouch.

1320
01:05:43,410 --> 01:05:44,680
Let me clean this up.

1321
01:05:44,680 --> 01:05:47,740
Let me enhance this as
they would say on TV.

1322
01:05:47,740 --> 01:05:51,600
Clean that up, Save, and
now go up to scripts.

1323
01:05:51,600 --> 01:05:53,700
>> And now, let me go to sound.

1324
01:05:53,700 --> 01:05:55,202
Let me give it a name.

1325
01:05:55,202 --> 01:05:58,640
I'll call this ouch.

1326
01:05:58,640 --> 01:06:00,040
And now play sound ouch.

1327
01:06:00,040 --> 01:06:02,720
Notice it appears in the
little drop down menu.

1328
01:06:02,720 --> 01:06:03,812
Let's see.

1329
01:06:03,812 --> 01:06:06,644
>> [OUCH]

1330
01:06:06,644 --> 01:06:10,577
>> [LAUGHING]

1331
01:06:10,577 --> 01:06:12,035
But we can change t his on the fly.

1332
01:06:12,035 --> 01:06:14,306
We can be twice as annoying.

1333
01:06:14,306 --> 01:06:17,960
>> [OUCH]

1334
01:06:17,960 --> 01:06:21,532
>> Or if we make it like
1,000 steps at a time--

1335
01:06:21,532 --> 01:06:26,100

1336
01:06:26,100 --> 01:06:26,870
>> OK.

1337
01:06:26,870 --> 01:06:28,495
So we're going to leave that one alone.

1338
01:06:28,495 --> 01:06:31,490
So again, building blocks-- I
started with something super simple,

1339
01:06:31,490 --> 01:06:34,130
and then I added a feature,
added a feature, added a feature.

1340
01:06:34,130 --> 01:06:36,921
And I no longer need to worry about
how the first of those features

1341
01:06:36,921 --> 01:06:39,890
was implemented as I continue
to layer things on top.

1342
01:06:39,890 --> 01:06:41,630
So in fact, let me do one other here.

1343
01:06:41,630 --> 01:06:46,780
Let me go ahead and open a file that
I brought in advance, called Sheep.

1344
01:06:46,780 --> 01:06:50,170
>> So it has a slightly different
character that looks like this.

1345
01:06:50,170 --> 01:06:53,570
And let me see if I can't
do something using a counter

1346
01:06:53,570 --> 01:06:55,510
in this case-- a so-called variable.

1347
01:06:55,510 --> 01:07:01,740
I'm going to go ahead and under Events--
let me get a green flag clicked.

1348
01:07:01,740 --> 01:07:05,230
Then let me go to Data, which I know
from just playing around before,

1349
01:07:05,230 --> 01:07:06,414
is where variables are.

1350
01:07:06,414 --> 01:07:08,080
And I'm going to go ahead and drag this.

1351
01:07:08,080 --> 01:07:11,344
>> So a variable called counter, and
I'm going to initialize it to zero.

1352
01:07:11,344 --> 01:07:13,760
I can call it anything-- x or
y or z-- but in programming,

1353
01:07:13,760 --> 01:07:16,610
calling something in a semantically
useful way, like counter,

1354
01:07:16,610 --> 01:07:20,740
that describes what it is, it's a
lot easier to read your code later.

1355
01:07:20,740 --> 01:07:23,660
Let me go ahead and get
a forever block here.

1356
01:07:23,660 --> 01:07:27,489
And let me go to the looks
page and do a Say block.

1357
01:07:27,489 --> 01:07:30,530
But what's cool about variables is I
don't have to just type in something

1358
01:07:30,530 --> 01:07:34,050
like hello world, which we've already
done, I can instead go to Data

1359
01:07:34,050 --> 01:07:36,890
and drag my variable, and even
though the shape doesn't quite

1360
01:07:36,890 --> 01:07:39,200
look like it should fit,
it will grow to fill.

1361
01:07:39,200 --> 01:07:44,596
And I'll just say the counter for one
second-- spoiler-- he's going to count.

1362
01:07:44,596 --> 01:07:46,580
We'll say it for one second.

1363
01:07:46,580 --> 01:07:49,040
Then I'm going to go and
have him wait for one second,

1364
01:07:49,040 --> 01:07:50,850
so it doesn't count up too fast.

1365
01:07:50,850 --> 01:07:54,630
And then lastly, change counter
by one-- in other words,

1366
01:07:54,630 --> 01:07:59,720
increment the counter by one
additional value and do this forever.

1367
01:07:59,720 --> 01:08:02,329
>> So the sheep too, like a
programmer, counts from 0.

1368
01:08:02,329 --> 01:08:06,550

1369
01:08:06,550 --> 01:08:09,940
And if we wait long enough,
he will do this forever.

1370
01:08:09,940 --> 01:08:13,940
But that's not exactly true, because
in fact, as we'll discover in week one,

1371
01:08:13,940 --> 01:08:18,071
integers and computers more generally,
technically have only a finite-- well,

1372
01:08:18,071 --> 01:08:20,029
rather computers, when
they represent integers,

1373
01:08:20,029 --> 01:08:21,870
only have a finite number of bits.

1374
01:08:21,870 --> 01:08:24,060
Those light bulbs there
can only count so high

1375
01:08:24,060 --> 01:08:25,439
before you're out of light bulbs.

1376
01:08:25,439 --> 01:08:27,790
And a computer too,
only has so much memory,

1377
01:08:27,790 --> 01:08:30,840
only has so many transistors,
so it can only count so high.

1378
01:08:30,840 --> 01:08:33,609
>> So it turns out that the sheep,
I think, can count to 2 billion

1379
01:08:33,609 --> 01:08:34,609
or something pretty big.

1380
01:08:34,609 --> 01:08:36,525
So we're not going to
wait for this to happen.

1381
01:08:36,525 --> 01:08:41,050
But eventually some bug will happen
that can have some very real world

1382
01:08:41,050 --> 01:08:42,170
ramifications.

1383
01:08:42,170 --> 01:08:45,061
But beyond the sheep, that
just introduces a variable.

1384
01:08:45,061 --> 01:08:47,310
Let's go ahead and open up
something I made in advance

1385
01:08:47,310 --> 01:08:53,630
here called Pet the Cat--
Pet the Cat over here.

1386
01:08:53,630 --> 01:08:56,620
And notice here it's few
blocks, but when green flag

1387
01:08:56,620 --> 01:08:58,674
clicked, forever doing the following.

1388
01:08:58,674 --> 01:09:01,465
If you're touching the mouse
pointer-- so the cursor on the screen,

1389
01:09:01,465 --> 01:09:04,729
the arrow-- play sound meow
and then wait two seconds.

1390
01:09:04,729 --> 01:09:05,770
And just do this forever.

1391
01:09:05,770 --> 01:09:08,819
Just constantly wait
to see if the pointer--

1392
01:09:08,819 --> 01:09:10,910
if the cat is touching the pointer.

1393
01:09:10,910 --> 01:09:12,260
>> So I hit play.

1394
01:09:12,260 --> 01:09:13,120
Nothing's happening.

1395
01:09:13,120 --> 01:09:15,180
But as I move the cursor over the cat,

1396
01:09:15,180 --> 01:09:18,160
>> [MEOWING]

1397
01:09:18,160 --> 01:09:20,950
>> And if I move it away, not
petting the cat anymore.

1398
01:09:20,950 --> 01:09:24,290
So some conditional logic
nested inside of a loop.

1399
01:09:24,290 --> 01:09:29,270
How about this example, deliberately
called Don't Pet the Cat?

1400
01:09:29,270 --> 01:09:31,453
What's this going to do?

1401
01:09:31,453 --> 01:09:34,080
>> [MEOWING]

1402
01:09:34,080 --> 01:09:36,415
>> Why should you not pet the cat?

1403
01:09:36,415 --> 01:09:45,640
>> [MEOWING]

1404
01:09:45,640 --> 01:09:46,899
>> OK.

1405
01:09:46,899 --> 01:09:50,080
So this is an example of an if else.

1406
01:09:50,080 --> 01:09:52,682
It's a decision point and
because it's sitting in the loop,

1407
01:09:52,682 --> 01:09:53,890
they're both getting checked.

1408
01:09:53,890 --> 01:09:54,480
Is this true?

1409
01:09:54,480 --> 01:09:54,960
Is this true?

1410
01:09:54,960 --> 01:09:55,450
Is this true?

1411
01:09:55,450 --> 01:09:55,991
Is this true?

1412
01:09:55,991 --> 01:09:58,080
And eventually, one of
those is going to apply

1413
01:09:58,080 --> 01:10:02,680
and so you hear either the meow or
the roar of the lion in that case.

1414
01:10:02,680 --> 01:10:07,600
>> Well, let's do a slightly more fancy one
that I made in advance too-- threads.

1415
01:10:07,600 --> 01:10:11,410
So a thread is just one
thing that a computer can do.

1416
01:10:11,410 --> 01:10:15,549
So a multi-threaded program is a program
that can do multiple things at once.

1417
01:10:15,549 --> 01:10:17,340
And all of these examples
thus far have had

1418
01:10:17,340 --> 01:10:22,180
just one script, so to speak--
one program like this up here.

1419
01:10:22,180 --> 01:10:25,010
But notice this program has
two sprites, two characters.

1420
01:10:25,010 --> 01:10:26,220
One is a bird.

1421
01:10:26,220 --> 01:10:27,070
One is a cat.

1422
01:10:27,070 --> 01:10:31,280
>> And notice when I click on these down
left, they each have their own scripts

1423
01:10:31,280 --> 01:10:33,320
or programs associated with them.

1424
01:10:33,320 --> 01:10:35,620
And both of those
programs, notice, start

1425
01:10:35,620 --> 01:10:38,800
with when green flag clicked--
let's look at the cat--

1426
01:10:38,800 --> 01:10:40,230
when green flag clicked.

1427
01:10:40,230 --> 01:10:44,420
And so indeed, when I hit play now,
two things are going to happen at once.

1428
01:10:44,420 --> 01:10:47,950
The cat and the bird are both
going to operate simultaneously

1429
01:10:47,950 --> 01:10:50,015
to create this effect.

1430
01:10:50,015 --> 01:10:51,640
And you might imagine what's happening.

1431
01:10:51,640 --> 01:10:54,540
There's a loop and the bird
and the cat are in a loop.

1432
01:10:54,540 --> 01:10:57,470
The bird is just bouncing like
I was before when I said ouch.

1433
01:10:57,470 --> 01:10:59,240
But the cat clearly has an advantage.

1434
01:10:59,240 --> 01:11:02,240
There's another sensing block
that points the cat deliberately

1435
01:11:02,240 --> 01:11:06,036
to the bird in this case here.

1436
01:11:06,036 --> 01:11:09,160
So we could tease apart, by looking
through those blocks, what's happening.

1437
01:11:09,160 --> 01:11:11,660
But the key ingredient here is one.

1438
01:11:11,660 --> 01:11:14,720
The bird, so that this game isn't
completely boring-- or this animation--

1439
01:11:14,720 --> 01:11:16,260
starts at a random direction.

1440
01:11:16,260 --> 01:11:19,090
And the computer is picking
a number between 90 and 180

1441
01:11:19,090 --> 01:11:22,310
essentially, so that it's a slightly
different animation each time.

1442
01:11:22,310 --> 01:11:25,680
>> And then notice here, if the
cat is touching the bird, then

1443
01:11:25,680 --> 01:11:28,230
play the lion four sound-- the roar.

1444
01:11:28,230 --> 01:11:32,530
But meanwhile in the bird's
palette, we have this.

1445
01:11:32,530 --> 01:11:35,429
Forever, if not touching the cat,
just keep moving three steps.

1446
01:11:35,429 --> 01:11:36,970
And then here's another puzzle piece.

1447
01:11:36,970 --> 01:11:38,230
If you're on the edge, bounce.

1448
01:11:38,230 --> 01:11:41,040
So the bird is just kind of
minding its own business,

1449
01:11:41,040 --> 01:11:43,530
just flying around and
bouncing, and it's really

1450
01:11:43,530 --> 01:11:47,980
the cat that had the conditional logic
to determine if it had caught the bird.

1451
01:11:47,980 --> 01:11:48,480
All right.

1452
01:11:48,480 --> 01:11:55,000
So let's do one other here,
this one being called Hi Hi Hi.

1453
01:11:55,000 --> 01:12:01,300
And this one here just does
this in a forever loop.

1454
01:12:01,300 --> 01:12:05,125
But notice-- how do we stop
this very annoying program?

1455
01:12:05,125 --> 01:12:07,800

1456
01:12:07,800 --> 01:12:08,840
Hit the space bar.

1457
01:12:08,840 --> 01:12:14,190
Because if I do that,
the left hand program--

1458
01:12:14,190 --> 01:12:17,750
notice it's constantly listening--
is the key space press.

1459
01:12:17,750 --> 01:12:20,290
If the space bar pressed,
and if so, what does it do?

1460
01:12:20,290 --> 01:12:22,180
It does a very common technique.

1461
01:12:22,180 --> 01:12:24,790
It sets a variable equal to some value.

1462
01:12:24,790 --> 01:12:25,941
But it toggles that value.

1463
01:12:25,941 --> 01:12:27,690
[? So appearance ?]
based on the shape-- I

1464
01:12:27,690 --> 01:12:29,360
have a variable that I
wrote in advance called

1465
01:12:29,360 --> 01:12:30,970
Muted, which just says yes or no.

1466
01:12:30,970 --> 01:12:32,080
Is the sound muted or not?

1467
01:12:32,080 --> 01:12:33,190
True or false?

1468
01:12:33,190 --> 01:12:37,780
And notice, I'm saying this-- if
muted is zero, then change to one,

1469
01:12:37,780 --> 01:12:40,040
else set mute it to zero.

1470
01:12:40,040 --> 01:12:41,740
So just flip the value from zero to one.

1471
01:12:41,740 --> 01:12:44,520
I could have done-- change it
from two to three and three to two

1472
01:12:44,520 --> 01:12:46,362
or four to five or four to six.

1473
01:12:46,362 --> 01:12:48,070
But it doesn't matter
what numbers I use,

1474
01:12:48,070 --> 01:12:50,290
so long as I keep
changing it the opposite.

1475
01:12:50,290 --> 01:12:53,490
>> And most any programmer would just
choose zero and one-- false and true,

1476
01:12:53,490 --> 01:12:55,710
off and on-- to represent this.

1477
01:12:55,710 --> 01:12:57,130
And this is still running.

1478
01:12:57,130 --> 01:12:58,390
If I hit the space bar again

1479
01:12:58,390 --> 01:12:59,790
>> [SEAL SOUNDS]

1480
01:12:59,790 --> 01:13:01,640
>> The program is still running.

1481
01:13:01,640 --> 01:13:04,600
Because there's this other script
that says, forever do the following.

1482
01:13:04,600 --> 01:13:07,590

1483
01:13:07,590 --> 01:13:10,970
If the muted variable equals
zero-- so if you're not muted

1484
01:13:10,970 --> 01:13:15,809
is the logic-- if it's false
or no, then play the sound,

1485
01:13:15,809 --> 01:13:16,850
because you're not muted.

1486
01:13:16,850 --> 01:13:19,558
You should play the sound and then
think hi hi hi for two seconds

1487
01:13:19,558 --> 01:13:21,990
and then wait, and do it
again and again and again.

1488
01:13:21,990 --> 01:13:26,960
>> And so in this way do we have a way for
people to-- for programs to interact.

1489
01:13:26,960 --> 01:13:29,320
And they don't have to
be as dated as others.

1490
01:13:29,320 --> 01:13:32,480
In fact, poking around--
no pun intended--

1491
01:13:32,480 --> 01:13:35,450
someone spent a huge amount of
time on the internet implementing

1492
01:13:35,450 --> 01:13:37,780
PokemonGo in Scratch.

1493
01:13:37,780 --> 01:13:41,640
It even geolocates you in
Cambridge or Allston here.

1494
01:13:41,640 --> 01:13:49,320
So if you want to see too what people
can do is this-- very fancy menu.

1495
01:13:49,320 --> 01:13:50,980
Click on here.

1496
01:13:50,980 --> 01:13:53,630
>> This is me with my arrow keys now.

1497
01:13:53,630 --> 01:13:55,646
I'm going to go after this.

1498
01:13:55,646 --> 01:13:56,146
Click.

1499
01:13:56,146 --> 01:13:59,149

1500
01:13:59,149 --> 01:14:00,440
And now you click the PokeBall.

1501
01:14:00,440 --> 01:14:03,330

1502
01:14:03,330 --> 01:14:06,460
I mean, I think you're
supposed to click the PokeBall.

1503
01:14:06,460 --> 01:14:06,960
All right.

1504
01:14:06,960 --> 01:14:08,880
So I did that.

1505
01:14:08,880 --> 01:14:10,150
I can go over here.

1506
01:14:10,150 --> 01:14:13,990
And this person implemented some more
PokeBalls over here-- three PokeBalls.

1507
01:14:13,990 --> 01:14:16,150
>> We'll post a link to this
online so you can play.

1508
01:14:16,150 --> 01:14:18,564
But notice there's just
some basic building blocks.

1509
01:14:18,564 --> 01:14:19,980
It looks a lot fancier, and it is.

1510
01:14:19,980 --> 01:14:22,105
This is impressive and more
than we would typically

1511
01:14:22,105 --> 01:14:23,940
expect, certainly for problem set zero.

1512
01:14:23,940 --> 01:14:27,009
I have no idea how long
this person spent online.

1513
01:14:27,009 --> 01:14:28,050
But it's all just a loop.

1514
01:14:28,050 --> 01:14:29,380
There's a sound playing.

1515
01:14:29,380 --> 01:14:31,050
There's some kind of loop
listening for whether I'm

1516
01:14:31,050 --> 01:14:33,758
hitting the up arrow or the down
arrow or the left and the right,

1517
01:14:33,758 --> 01:14:36,034
and then if so, it's moving
it some number of pixels.

1518
01:14:36,034 --> 01:14:37,950
And then if I click on
another sprite, there's

1519
01:14:37,950 --> 01:14:39,590
some kind of if condition there.

1520
01:14:39,590 --> 01:14:41,006
Yeah, this is getting too intense.

1521
01:14:41,006 --> 01:14:42,300
We're going to stop.

1522
01:14:42,300 --> 01:14:43,950
It's all those basic building blocks.

1523
01:14:43,950 --> 01:14:47,730
There are no other ingredients other
than the ones we've looked at already.

1524
01:14:47,730 --> 01:14:50,870
>> And yet here, let me do
one final set of examples

1525
01:14:50,870 --> 01:14:53,160
that paints a picture too
of what you can do here.

1526
01:14:53,160 --> 01:14:56,681
Here's a very simple program that
just does this-- cough, cough, cough.

1527
01:14:56,681 --> 01:14:58,680
And based only on what
we've looked at thus far,

1528
01:14:58,680 --> 01:15:00,770
where is the obvious
opportunity for improvement.

1529
01:15:00,770 --> 01:15:01,770
This program is correct.

1530
01:15:01,770 --> 01:15:04,180
It coughs three times,
which is what I intended.

1531
01:15:04,180 --> 01:15:05,850
But it's poorly implemented.

1532
01:15:05,850 --> 01:15:06,800
It's badly designed.

1533
01:15:06,800 --> 01:15:08,200
Why?

1534
01:15:08,200 --> 01:15:08,700
Yeah.

1535
01:15:08,700 --> 01:15:09,430
It's not a loop.

1536
01:15:09,430 --> 01:15:10,810
And it's not so much
that it's not a loop,

1537
01:15:10,810 --> 01:15:12,600
it's that there's a lot of redundancy.

1538
01:15:12,600 --> 01:15:15,030
There is copied and
pasted code, so to speak.

1539
01:15:15,030 --> 01:15:18,030
And the solution probably
is indeed a loop.

1540
01:15:18,030 --> 01:15:20,550
So let me go ahead
and improve upon that.

1541
01:15:20,550 --> 01:15:22,450
And I'm going to drag these over here.

1542
01:15:22,450 --> 01:15:26,186
Let me go ahead and get a repeat
block, change this to three.

1543
01:15:26,186 --> 01:15:28,060
I'm going to throw away
some of those blocks.

1544
01:15:28,060 --> 01:15:29,350
>> And you'll notice it's pretty intuitive.

1545
01:15:29,350 --> 01:15:31,891
You drag and drop and things
appear and disappear eventually.

1546
01:15:31,891 --> 01:15:35,370
And I can just drag this in here, and
now I have a cleaner version still.

1547
01:15:35,370 --> 01:15:36,930
But you know what?

1548
01:15:36,930 --> 01:15:39,140
There's this opportunity
now for abstraction--

1549
01:15:39,140 --> 01:15:42,550
to start to define new vocabulary
that MIT didn't anticipate.

1550
01:15:42,550 --> 01:15:45,310
There's wait and repeat
and forever and if,

1551
01:15:45,310 --> 01:15:48,790
but what if I want to introduce
the word cough as a block?

1552
01:15:48,790 --> 01:15:52,430
What if I want a puzzle piece
whose purpose in life is to cough?

1553
01:15:52,430 --> 01:15:56,920
>> Well, let's look at this version
here, which I made as follows.

1554
01:15:56,920 --> 01:15:59,779
Magically, I have created
this puzzle piece here,

1555
01:15:59,779 --> 01:16:01,070
which Scratch allows you to do.

1556
01:16:01,070 --> 01:16:02,987
And indeed C and Python
and JavaScript are

1557
01:16:02,987 --> 01:16:04,570
going to allow you to do this as well.

1558
01:16:04,570 --> 01:16:08,030
You can create your own custom
pieces that you call what you want.

1559
01:16:08,030 --> 01:16:11,090
In this case, cough feels
like a reasonable definition.

1560
01:16:11,090 --> 01:16:14,080
And then with these pieces down
here can you define what it means.

1561
01:16:14,080 --> 01:16:16,490
>> I dragged and dropped from
this palette here-- more

1562
01:16:16,490 --> 01:16:19,700
blocks-- this big purple
block, where I typed in cough

1563
01:16:19,700 --> 01:16:21,490
as the name of my new puzzle piece.

1564
01:16:21,490 --> 01:16:26,120
And then I'm saying any time a user
calls this new cough puzzle piece,

1565
01:16:26,120 --> 01:16:27,970
do a say and a wait.

1566
01:16:27,970 --> 01:16:32,360
And so up here in my repeat block,
I can just cough three times.

1567
01:16:32,360 --> 01:16:36,172
>> And I would argue, especially
if now you hide this detail.

1568
01:16:36,172 --> 01:16:37,630
Who cares how cough is implemented?

1569
01:16:37,630 --> 01:16:40,590
All I care about as a
programmer that I can cough.

1570
01:16:40,590 --> 01:16:42,480
I don't care how say is implemented.

1571
01:16:42,480 --> 01:16:44,820
I just care that the
cat can say something.

1572
01:16:44,820 --> 01:16:48,920
I can abstract away that detail and
only focus on what's on the screen here.

1573
01:16:48,920 --> 01:16:50,600
But I can take this one step further.

1574
01:16:50,600 --> 01:16:54,270
>> Notice that here, I have
implemented the loop three times.

1575
01:16:54,270 --> 01:16:57,760
But what if instead I grab this version?

1576
01:16:57,760 --> 01:17:00,840
And what if instead
in this version here,

1577
01:17:00,840 --> 01:17:04,930
I just change my puzzle piece to take
an argument and input unto itself?

1578
01:17:04,930 --> 01:17:07,300
And that input can be
a number like three.

1579
01:17:07,300 --> 01:17:10,780
So now, if I am writing a program
and I want the cat to cough,

1580
01:17:10,780 --> 01:17:14,470
I can actually tell the puzzle
piece how many times to cough,

1581
01:17:14,470 --> 01:17:18,190
because at the bottom here, a fancier
version of these custom puzzle pieces

1582
01:17:18,190 --> 01:17:20,700
lets me specify that
cough actually takes

1583
01:17:20,700 --> 01:17:23,151
an input-- takes an argument like this.

1584
01:17:23,151 --> 01:17:23,900
And you know what?

1585
01:17:23,900 --> 01:17:25,090
Maybe I realize, wait a minute.

1586
01:17:25,090 --> 01:17:26,880
Coughing is the same--
it's fundamentally

1587
01:17:26,880 --> 01:17:28,320
the same idea as sneezing.

1588
01:17:28,320 --> 01:17:30,240
It's just a different
word on the screen.

1589
01:17:30,240 --> 01:17:32,750
I can abstract away
further and implement

1590
01:17:32,750 --> 01:17:34,950
this final version of a
cough, which at first glance

1591
01:17:34,950 --> 01:17:36,860
is way more complex looking.

1592
01:17:36,860 --> 01:17:38,340
But notice what I've done.

1593
01:17:38,340 --> 01:17:42,130
I have now generalized-- genericized
really-- this puzzle piece

1594
01:17:42,130 --> 01:17:46,100
to be called say word n times.

1595
01:17:46,100 --> 01:17:50,610
>> And now I have two new puzzle pieces
down here define cough n times.

1596
01:17:50,610 --> 01:17:52,990
And what does the cough function do?

1597
01:17:52,990 --> 01:17:54,620
What does my custom puzzle piece do?

1598
01:17:54,620 --> 01:17:58,196
It just calls the say block,
passing in the word I want to say,

1599
01:17:58,196 --> 01:18:00,070
passing in the number
of times I want to say.

1600
01:18:00,070 --> 01:18:04,410
Because now I can implement
sneeze by simply saying achoo,

1601
01:18:04,410 --> 01:18:06,520
in this case, some number of times.

1602
01:18:06,520 --> 01:18:08,560
>> And so I'm layering and layering.

1603
01:18:08,560 --> 01:18:11,890
And again, the key here is not
how I implemented it, but the fact

1604
01:18:11,890 --> 01:18:14,270
that if I just literally
move these off the screen,

1605
01:18:14,270 --> 01:18:17,480
look how simple if not
pretty my program now looks.

1606
01:18:17,480 --> 01:18:20,130
Because it does what it
says, I've abstracted

1607
01:18:20,130 --> 01:18:23,840
away what is inside that black box.
it happens to be a purple box here,

1608
01:18:23,840 --> 01:18:27,630
but I've obstructed away what's inside
because I don't care how it works.

1609
01:18:27,630 --> 01:18:29,850
I just care now that it works.

1610
01:18:29,850 --> 01:18:32,575
>> And indeed, in problem
set zero, this is exactly

1611
01:18:32,575 --> 01:18:35,450
the kind of layering of ideas you'll
have the opportunity to explore.

1612
01:18:35,450 --> 01:18:39,710
It's exactly the opportunity to
apply problem solving techniques,

1613
01:18:39,710 --> 01:18:41,750
to what's probably an
unfamiliar environment.

1614
01:18:41,750 --> 01:18:44,090
And whether you've not programmed
before or programmed before,

1615
01:18:44,090 --> 01:18:45,700
you'll find that there's
a little something

1616
01:18:45,700 --> 01:18:47,074
in this environment for everyone.

1617
01:18:47,074 --> 01:18:48,970
And with problem set
one in a week's time,

1618
01:18:48,970 --> 01:18:52,830
we'll be transitioned to focusing
on a higher level language called

1619
01:18:52,830 --> 01:18:55,490
C-- or rather a lower
level language called

1620
01:18:55,490 --> 01:18:57,547
C-- that's even more
powerful, even though it's

1621
01:18:57,547 --> 01:18:59,130
a little more cryptic at first glance.

1622
01:18:59,130 --> 01:19:02,940
>> And you'll realize per today's TL:DR,
that this problem set has a shorter

1623
01:19:02,940 --> 01:19:06,080
window of time than future ones, simply
because you should find it fairly

1624
01:19:06,080 --> 01:19:06,620
accessible.

1625
01:19:06,620 --> 01:19:08,411
And not to worry if
you add the class late.

1626
01:19:08,411 --> 01:19:10,120
We'll address that before long.

1627
01:19:10,120 --> 01:19:14,680
And before we adjourn for cake, let's
finish with just a two-minute look

1628
01:19:14,680 --> 01:19:16,700
at what awaits you here in CS50.

1629
01:19:16,700 --> 01:19:27,150

1630
01:19:27,150 --> 01:21:07,003
[MUSIC PLAYING]

1631
01:21:07,003 --> 01:21:07,502
All right.

1632
01:21:07,502 --> 01:21:08,890
That's it for CS50.

1633
01:21:08,890 --> 01:21:09,850
We will see you soon.

1634
01:21:09,850 --> 01:21:11,726
Cake is now served.

1635
01:21:11,726 --> 01:21:15,198

1636
01:21:15,198 --> 01:22:00,467
[MUSIC PLAYING]

1637
01:22:00,467 --> 01:22:02,550
SPEAKER 17: Have you heard
of a sabbatical, Chief?

1638
01:22:02,550 --> 01:22:15,690

1639
01:22:15,690 --> 01:22:18,120
SPEAKER 18: Perhaps there's
more under the hood.

1640
01:22:18,120 --> 01:22:24,479

