1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:02,500
ZAMYLA CHAN: E 'un me, Zamyla.

3
00:00:02,500 --> 00:00:06,910
Oggi in Mario, stiamo andando a essere
disegnare la metà della piramide per Mario

4
00:00:06,910 --> 00:00:08,290
a salire.

5
00:00:08,290 --> 00:00:11,570
>> Quindi cerchiamo di parlare della nostra
to-do di per questo problema.

6
00:00:11,570 --> 00:00:13,610
Stiamo andando a voler
per richiedere e convalidare

7
00:00:13,610 --> 00:00:18,290
l'utente con un ingresso valido di come
alta vogliono piramide di Mario di essere.

8
00:00:18,290 --> 00:00:20,090
E poi, stiamo andando a disegnare.

9
00:00:20,090 --> 00:00:24,870
Quindi cerchiamo di iniziare con la richiesta e
convalidare l'utente per il loro contributo.

10
00:00:24,870 --> 00:00:27,640
>> Siamo in grado di fare uso del
Funzione CS50 Biblioteca

11
00:00:27,640 --> 00:00:31,160
ottenere int che farà in modo che
l'utente immette un numero intero.

12
00:00:31,160 --> 00:00:35,730
Eventuali numeri interi positivi, negativi
interi, il numero 0 sono tutti gioco equo.

13
00:00:35,730 --> 00:00:41,670
In caso contrario, l'utente verrà chiesto di
riprovare fino a quando non immettere un numero intero valido.

14
00:00:41,670 --> 00:00:44,210
Ora, anche se get int fa
un sacco di lavoro per noi

15
00:00:44,210 --> 00:00:46,730
nel garantire che il
utente ci dà un numero intero,

16
00:00:46,730 --> 00:00:50,760
abbiamo ancora bisogno di applicare un po '
vincoli aggiuntivi sulla.

17
00:00:50,760 --> 00:00:56,420
Dopo tutto, non possiamo avere Mario arrampicata
una mezza piramide di altezza negativo 12.

18
00:00:56,420 --> 00:00:59,040
>> In aggiunta a ciò, la
specificazione problema

19
00:00:59,040 --> 00:01:02,490
dice che solo noi possiamo
permette a Mario di salire

20
00:01:02,490 --> 00:01:06,940
una piramide di altezze tra 0 e 23.

21
00:01:06,940 --> 00:01:11,120
OK, in modo che significa che dobbiamo
per richiedere continuamente l'utente

22
00:01:11,120 --> 00:01:14,320
a darci una valida
il numero e continuare solo

23
00:01:14,320 --> 00:01:17,120
una volta ci hanno dato una altezza valida.

24
00:01:17,120 --> 00:01:18,720
Come lo facciamo?

25
00:01:18,720 --> 00:01:23,760
>> Ebbene, processi continui ci danno
l'idea di fare qualcosa loops--

26
00:01:23,760 --> 00:01:24,720
ripetitivo.

27
00:01:24,720 --> 00:01:28,220
Un ciclo in C come mentre
ciclo che continua volontà

28
00:01:28,220 --> 00:01:33,480
eseguire il corpo del ciclo finché
la condizione data restituisce true.

29
00:01:33,480 --> 00:01:36,200
Non appena tale condizione
FALSE,

30
00:01:36,200 --> 00:01:39,770
il programma procederà fino
ciò che viene dopo.

31
00:01:39,770 --> 00:01:43,180
Così, mentre i cicli sono un modo di
garantendo che continuamente

32
00:01:43,180 --> 00:01:45,320
richiedere all'utente per un ingresso valido.

33
00:01:45,320 --> 00:01:50,070
E una volta che ci danno un input valido,
si procederà a tutto ciò che viene dopo.

34
00:01:50,070 --> 00:01:54,380
Sappiamo che stiamo andando a chiedere
all'utente ingresso almeno una volta.

35
00:01:54,380 --> 00:01:59,200
Così ora veniamo a una sorella della
mentre ciclo, che è il do while.

36
00:01:59,200 --> 00:02:02,650
>> Fare while eseguirà il
corpo del ciclo almeno una volta.

37
00:02:02,650 --> 00:02:06,150
Così senza controllare la condizione,
si eseguirà il corpo del ciclo.

38
00:02:06,150 --> 00:02:09,750
E poi verificare le condizioni per vedere
se deve ripetersi.

39
00:02:09,750 --> 00:02:13,080
Questo è utile quando
stiamo convalidando l'input dell'utente.

40
00:02:13,080 --> 00:02:15,830
Sappiamo che stiamo andando
chiedere loro almeno una volta.

41
00:02:15,830 --> 00:02:18,780
Quindi un ciclo Do While potrebbe
simile a questo.

42
00:02:18,780 --> 00:02:20,090
Abbiamo un intero n.

43
00:02:20,090 --> 00:02:22,760
E all'interno della do
mentre ciclo, abbiamo immediatamente

44
00:02:22,760 --> 00:02:24,750
richiedere all'utente un numero intero.

45
00:02:24,750 --> 00:02:29,740
Se n è valido, allora noi li Prompt
ancora e ancora e ancora fino a che

46
00:02:29,740 --> 00:02:31,820
darci quel intero valido.

47
00:02:31,820 --> 00:02:37,440
Infine, una volta che n è un input valido, ci
procedere al resto del nostro programma.

48
00:02:37,440 --> 00:02:41,830
>> Così torniamo alle specifiche e controllo
quali sono le condizioni per un ingresso valido

49
00:02:41,830 --> 00:02:43,670
sarà.

50
00:02:43,670 --> 00:02:48,090
Le altezze validi stanno per
essere compreso tra 0 e 23, inclusi.

51
00:02:48,090 --> 00:02:53,350
Così altezze non validi stanno per
essere inferiore a 0 o superiore a 23.

52
00:02:53,350 --> 00:02:56,420
Quindi ricordatevi di progettare
la sua condizione con attenzione,

53
00:02:56,420 --> 00:02:58,660
sapendo che la condizione
per il fai ciclo while

54
00:02:58,660 --> 00:03:01,470
dovrebbe essere mentre n non è valido.

55
00:03:01,470 --> 00:03:05,080
Ora, questo non sta per essere una
semplice espressione booleana singolo.

56
00:03:05,080 --> 00:03:07,630
Stiamo andando ad avere per combinare
due espressioni diverse

57
00:03:07,630 --> 00:03:09,900
per rendere tutta la nostra condizione.

58
00:03:09,900 --> 00:03:13,290
>> Così facciamo solo un'occhiata ad una tabella di verità ho
già dato il suggerimento che siamo

59
00:03:13,290 --> 00:03:15,200
andando a che fare con due booleani.

60
00:03:15,200 --> 00:03:19,620
Quindi, ecco una tabella di verità in cui ho
hanno due Booleans-- booleano 1 e 2.

61
00:03:19,620 --> 00:03:27,050
Così abbiamo la possibilità di valutare
Bool1 e Bool2 o Bool1 o Bool2.

62
00:03:27,050 --> 00:03:31,980
E sarà vero solo se entrambi
Booleani restituiscono true, mentre tutti

63
00:03:31,980 --> 00:03:37,280
o sarà vero finché uno dei
i due booleani restituisce true.

64
00:03:37,280 --> 00:03:41,450
OK, in modo da prendere un attimo, mettere in pausa questa
video e digerire questa tabella di verità.

65
00:03:41,450 --> 00:03:42,930
Sarò proprio qui in attesa.

66
00:03:42,930 --> 00:03:45,760
Quando torni, vedi
se si può mettere insieme

67
00:03:45,760 --> 00:03:51,910
una espressione booleana per il vostro
condizioni di n essere un input non valido.

68
00:03:51,910 --> 00:03:54,420
>> Quindi, ora che abbiamo
ingresso utente valido, andiamo

69
00:03:54,420 --> 00:03:58,710
andare avanti e parlare di come noi
potrebbe disegnare la metà piramide.

70
00:03:58,710 --> 00:04:03,410
Qui, in questo semplice editor di testo,
Ho disegnato una piramide allineato a sinistra.

71
00:04:03,410 --> 00:04:07,050
Ma sappiamo che abbiamo bisogno del nostro
piramide per essere allineato a destra.

72
00:04:07,050 --> 00:04:08,650
Quindi, come potrei fare questo?

73
00:04:08,650 --> 00:04:11,440
Beh, potrei provare a spingere
tutto al lato

74
00:04:11,440 --> 00:04:14,880
da solo mettendo un po '
carattere in mezzo.

75
00:04:14,880 --> 00:04:16,779
E poi, per il prossimo
la linea, ho intenzione di mettere

76
00:04:16,779 --> 00:04:20,970
alcuni più caratteri a spingere lungo,
e così via e così further-- forth--

77
00:04:20,970 --> 00:04:23,360
fino a quando ho il diritto allineato piramide.

78
00:04:23,360 --> 00:04:27,780
Quindi noi abbiamo il diritto di piramide align, ma
non sembra così grande con i puntini.

79
00:04:27,780 --> 00:04:30,680
Ma abbiamo ancora voglia di
mantenere quella bella distanza.

80
00:04:30,680 --> 00:04:35,260
Quindi ho intenzione di letteralmente
inserire alcuni spazi.

81
00:04:35,260 --> 00:04:39,420
>> Invece di tre punti, io
mettere uno, due, tre spazi.

82
00:04:39,420 --> 00:04:40,370
Sulla seconda riga.

83
00:04:40,370 --> 00:04:42,640
Metterò uno, due spazi.

84
00:04:42,640 --> 00:04:45,370
E sulla penultima
la linea, solo uno spazio.

85
00:04:45,370 --> 00:04:48,290
E qui ho il diritto allineato piramide.

86
00:04:48,290 --> 00:04:52,170
Dal fare l'esempio nel testo
Editor, abbiamo un'idea per il modello

87
00:04:52,170 --> 00:04:54,590
che useremo per disegnare la metà piramide.

88
00:04:54,590 --> 00:04:58,080
Per ogni riga, quello che abbiamo fatto
è digitiamo alcuni spazi,

89
00:04:58,080 --> 00:05:00,170
e poi digitato alcuni
hash, e poi digitato

90
00:05:00,170 --> 00:05:03,020
il tasto Invio, che
è la creazione di una nuova linea.

91
00:05:03,020 --> 00:05:07,770
Quindi, ora che abbiamo che, andiamo
un passo avanti e trovare un modello.

92
00:05:07,770 --> 00:05:10,170
>> Quindi ho intenzione di dire, per la
interesse di questo esempio,

93
00:05:10,170 --> 00:05:12,480
abbiamo a che fare con una altezza di 8.

94
00:05:12,480 --> 00:05:17,100
La prima riga sta per avere due
hash che segue sette spazi.

95
00:05:17,100 --> 00:05:20,020
I tre secondo-- hash, sei spazi.

96
00:05:20,020 --> 00:05:24,260
Terzo row-- quattro hash, cinque
spaces-- così via e così via

97
00:05:24,260 --> 00:05:26,350
fino ad arrivare alla riga all'ennesima potenza.

98
00:05:26,350 --> 00:05:31,540
Allora, vi chiedo per l'ennesima riga,
quanti hash stiamo andando ad avere

99
00:05:31,540 --> 00:05:33,120
e quanti spazi?

100
00:05:33,120 --> 00:05:37,000
Quindi è a voi per capire un
formula per rappresentare il numero di hash

101
00:05:37,000 --> 00:05:42,020
e quanti spazi sono necessari per
l'ennesima riga quando si dispone di una certa altezza.

102
00:05:42,020 --> 00:05:46,060
>> Ora, quando si sta per capire questo fuori,
fare attenzione a come si sta indicizzazione.

103
00:05:46,060 --> 00:05:49,170
Quello che voglio dire con questo è che
nella vita quotidiana tutti noi

104
00:05:49,170 --> 00:05:51,540
iniziare a contare, di solito da 1.

105
00:05:51,540 --> 00:05:55,950
Ma in CS50 e in informatica
in generale, siamo 0 indicizzato.

106
00:05:55,950 --> 00:06:00,620
Quindi la prima fila sarebbe
n da 0 a differenza 1.

107
00:06:00,620 --> 00:06:04,550
Fate attenzione di questo quando sei
cercando di capire il vostro modello.

108
00:06:04,550 --> 00:06:07,570
Così ora torniamo a come
stiamo andando a disegnare il nostro piramide.

109
00:06:07,570 --> 00:06:12,300
Per ogni riga, stiamo andando a voler
stampare gli spazi, la stampa gli hash,

110
00:06:12,300 --> 00:06:14,050
e quindi stampare una nuova linea.

111
00:06:14,050 --> 00:06:19,160
Il suggerimento qui è la
parola "per" ogni riga.

112
00:06:19,160 --> 00:06:21,470
In C, abbiamo un costrutto
chiamato un ciclo for,

113
00:06:21,470 --> 00:06:25,250
che è composto di un
inizializzazione, una condizione, un aggiornamento,

114
00:06:25,250 --> 00:06:26,790
e il corpo del ciclo.

115
00:06:26,790 --> 00:06:31,360
>> Dire che volevo dire, ciao
mondo, 50 volte, i miei per ciclo

116
00:06:31,360 --> 00:06:32,880
sarebbe simile a questo.

117
00:06:32,880 --> 00:06:35,480
Ho inizializzo il mio intero a 0.

118
00:06:35,480 --> 00:06:38,230
La condizione è che è inferiore a 50.

119
00:06:38,230 --> 00:06:42,350
E poi il mio aggiornamento è solo
incrementando Io di uno ogni volta.

120
00:06:42,350 --> 00:06:45,140
Possiamo anche usare i cicli for
per scorrere le cose.

121
00:06:45,140 --> 00:06:47,820
Si noti qui come non abbiamo
difficile codificato un numero,

122
00:06:47,820 --> 00:06:51,820
ma piuttosto collocato la variabile
altezza invece nella condizione.

123
00:06:51,820 --> 00:06:56,420
Quindi quello che sto facendo qui è che io sono l'iterazione
su ogni riga della piramide.

124
00:06:56,420 --> 00:07:00,160
Posso fare qualcosa per ogni
fila all'interno del corpo del mio ciclo.

125
00:07:00,160 --> 00:07:02,350
>> Cosa stiamo facendo dentro
il corpo del ciclo?

126
00:07:02,350 --> 00:07:07,120
Beh, come abbiamo già detto, stiamo stampando
spazi e stiamo stampando hash

127
00:07:07,120 --> 00:07:09,480
e stiamo stampa di una nuova linea.

128
00:07:09,480 --> 00:07:11,950
Quindi il mio esterno per il ciclo
sarà simile a questa.

129
00:07:11,950 --> 00:07:15,070
I iterare su ogni riga
della piramide, usando,

130
00:07:15,070 --> 00:07:18,890
in questo caso, altezza variabile
che memorizza l'altezza della piramide.

131
00:07:18,890 --> 00:07:22,870
All'interno del corpo di tale ciclo, sono
andare in stampa ripetutamente spazi, stampa

132
00:07:22,870 --> 00:07:26,730
gli hash ripetutamente,
e quindi stampare una nuova linea.

133
00:07:26,730 --> 00:07:31,010
>> Così ora, utilizzando tutti i concetti che
Ho parlato in questa passeggiata-through,

134
00:07:31,010 --> 00:07:35,210
si dovrebbe essere in grado di richiedere
utente per l'input, convalidare tale ingresso,

135
00:07:35,210 --> 00:07:37,370
e quindi disegnare la metà piramide.

136
00:07:37,370 --> 00:07:41,510
>> Il mio nome è Zamyla, e questo è CS50.

137
00:07:41,510 --> 00:07:43,167

