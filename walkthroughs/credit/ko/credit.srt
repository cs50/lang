1
00:00:00,000 --> 00:00:00,820

2
00:00:00,820 --> 00:00:02,560
>> Zamyla 찬 :의 신용을 확인하자.

3
00:00:02,560 --> 00:00:06,360
이 문제에서 우리는 사용자에게 메시지를 표시합니다
신용 카드 번호의 입력.

4
00:00:06,360 --> 00:00:10,090
그런 다음 우리는 신용 카드를 실행합니다
이 유효 인 경우 번호를 확인합니다.

5
00:00:10,090 --> 00:00:13,430
그렇다면, 우리는 회사를 인쇄 할 수 있습니다
것을 그 신용 카드에 속한다.

6
00:00:13,430 --> 00:00:17,520
그렇지 않으면, 우리는 사용자 말해주지
것을 그 카드가 유효하지 않습니다.

7
00:00:17,520 --> 00:00:20,210
>> 그럼으로 바로 점프하자
사용자 입력에 대한 프롬프트.

8
00:00:20,210 --> 00:00:23,080
신용 카드 번호는
데이터 유형 long_long의

9
00:00:23,080 --> 00:00:27,190
그래서 CS50 라이브러리 함수
get_long_long은 매우 유용 할 것이다.

10
00:00:27,190 --> 00:00:30,690
그러나이 기능 보장
사용자는 임의의 정수를 입력한다.

11
00:00:30,690 --> 00:00:34,730
그래서 어떤 양의 정수, 음의
정수, 또는 0 모든 괜찮습니다.

12
00:00:34,730 --> 00:00:37,560
최대 당신에게 그래서 더
여부 확인

13
00:00:37,560 --> 00:00:41,770
사용자는 우리에게 유효한 주신
신용 카드 타입 번호.

14
00:00:41,770 --> 00:00:44,560
>> 우리는 신용 카드가 지금
다음, 사용자로부터 숫자

15
00:00:44,560 --> 00:00:46,580
우리는 체크섬을 계산해야합니다.

16
00:00:46,580 --> 00:00:49,780
그래서 신용 카드 체크
다음과 같이 계산된다.

17
00:00:49,780 --> 00:00:54,370
마지막 숫자 두 번째에서 시작,
우리는 2로 다른 모든 숫자를 곱합니다.

18
00:00:54,370 --> 00:00:57,060
그 다음 우리는 그 추가
함께 제품의 숫자.

19
00:00:57,060 --> 00:01:00,140
우리가를 추가에서
숫자의 합이

20
00:01:00,140 --> 00:01:03,780
그 2를 곱한되지 않았다
우리가 계산 이전의 합계입니다.

21
00:01:03,780 --> 00:01:08,480
마지막으로, 그 숫자는 끝나는 경우
0, 다음 수는 유효합니다.

22
00:01:08,480 --> 00:01:11,760
>> 예제를 통해 가자
단계로이 단계를 수행.

23
00:01:11,760 --> 00:01:14,930
그래서 우리의 첫 번째 단계는 시작하는 것입니다
마지막 숫자 두 번째에서

24
00:01:14,930 --> 00:01:18,080
두에 의해 다른 모든 숫자를 곱합니다.

25
00:01:18,080 --> 00:01:22,240
지금, 나는 신용 카드를 저장하는 경우
변수라는 CC 번호 번호,

26
00:01:22,240 --> 00:01:26,060
다음 (10)에 의해 그 모딩 것
나에게 매우 마지막 자리를 제공합니다.

27
00:01:26,060 --> 00:01:28,910
그래서 당신은 어떻게 액세스 할 수 있습니다
마지막 숫자 두 번째?

28
00:01:28,910 --> 00:01:32,030
>> 좋아, 그럼 한 번 우리는 액세스 한
마지막 숫자에 두 번째,

29
00:01:32,030 --> 00:01:35,790
우리는을 통해 반복합니다
(2)에 의해 다른 모든 숫자를 곱하여.

30
00:01:35,790 --> 00:01:38,620
우리는 그 다음 것을 일단
우리는 이러한 제품 할게요

31
00:01:38,620 --> 00:01:41,350
함께 그 제품의 숫자를 추가합니다.

32
00:01:41,350 --> 00:01:43,830
그래서 여기 내가 하나가
자리는, 그래서 괜찮아요.

33
00:01:43,830 --> 00:01:47,480
그러나 나는 나의 마지막에 도착하면
number-- 7 2--를 곱한

34
00:01:47,480 --> 00:01:52,080
나는 하나 추가하고 4는 나에게 27을주고.

35
00:01:52,080 --> 00:01:55,980
거기에서, 우리는 product-- 것을 추가
27-- 숫자의 합에 해당

36
00:01:55,980 --> 00:01:57,790
이 승산되지 않았다.

37
00:01:57,790 --> 00:02:01,070
>> 그래서 여기에 나는 모든 강조했습니다
오렌지 그 숫자의.

38
00:02:01,070 --> 00:02:04,900
우리가 그 숫자를 추가하면, 다음
우리는 우리의 최종 검사 번호를.

39
00:02:04,900 --> 00:02:09,120
그래서 우리가 만들어 그것을 확인
확실히 마지막 숫자는 0이다.

40
00:02:09,120 --> 00:02:12,635
체크섬에 종료되지 않는 경우
0 후, 신용 카드 번호

41
00:02:12,635 --> 00:02:14,400
확실히 잘못되었습니다.

42
00:02:14,400 --> 00:02:17,840
그렇지 않으면,의가에 가자
회사 ID를 확인

43
00:02:17,840 --> 00:02:19,870
및 신용 카드 번호 길이.

44
00:02:19,870 --> 00:02:21,830
>> 우리는 목록을 제공 한
세 회사의,

45
00:02:21,830 --> 00:02:25,940
그와 함께, 정수의 수
신용 카드 번호를 가지고있다.

46
00:02:25,940 --> 00:02:29,630
그리고 처음 두 자릿수 그
그 카드로 시작 수 있습니다.

47
00:02:29,630 --> 00:02:34,070
당신까지 추적 할 수 있도록
신용 카드의 처음 두 자릿수

48
00:02:34,070 --> 00:02:37,620
그 카드 정수의 수입니다.

49
00:02:37,620 --> 00:02:40,110
그리고, 당신은했습니다
문제를 마쳤다.

50
00:02:40,110 --> 00:02:44,210
내 이름은 Zamyla이며,이 신용이었다.

51
00:02:44,210 --> 00:02:45,859

