1
00:00:00,000 --> 00:00:00,820

2
00:00:00,820 --> 00:00:02,560
>> Zamylaチャンは：それでは、あなたの信用を確認してみましょう。

3
00:00:02,560 --> 00:00:06,360
この問題では、ユーザを促します
クレジットカード番号の入力のために。

4
00:00:06,360 --> 00:00:10,090
その後、我々は、そのクレジットカードを実行します
それが有効だかどうかを確認するために数。

5
00:00:10,090 --> 00:00:13,430
もしそうなら、私たちは会社を印刷します
そのクレジットカードが属しています。

6
00:00:13,430 --> 00:00:17,520
そうでなければ、我々はユーザーに教えてあげましょう
そのカードが無効であること。

7
00:00:17,520 --> 00:00:20,210
>> と右にジャンプしてみましょう
ユーザーに入力を求めるプロンプトが表示。

8
00:00:20,210 --> 00:00:23,080
クレジットカード番号であります
データ型long_longの、

9
00:00:23,080 --> 00:00:27,190
そうCS50ライブラリ関数
get_long_longは非常に有用であろう。

10
00:00:27,190 --> 00:00:30,690
しかし、この機能はことを保証します
ユーザは、任意の整数を入力します。

11
00:00:30,690 --> 00:00:34,730
だから、任意の正の整数、負
整数、またはゼロは、すべての罰金です。

12
00:00:34,730 --> 00:00:37,560
まであなたのため、さらなる
か否かを検証します

13
00:00:37,560 --> 00:00:41,770
ユーザーは、私たちに有効を与えています
クレジットカードの種類の数。

14
00:00:41,770 --> 00:00:44,560
>> 今、私たちはクレジットカードを持っていること
その後、ユーザからの数、

15
00:00:44,560 --> 00:00:46,580
私たちは、チェックサムを計算する必要があります。

16
00:00:46,580 --> 00:00:49,780
だから、クレジットカードのチェックサム
次のように計算されます。

17
00:00:49,780 --> 00:00:54,370
最後の数字に2番目から出発し、
我々は2によって他のすべての数字を掛けます。

18
00:00:54,370 --> 00:00:57,060
その後、我々はそれらを追加します。
一緒に製品の桁。

19
00:00:57,060 --> 00:01:00,140
それから、我々は追加します
その数字の和

20
00:01:00,140 --> 00:01:03,780
それに2を乗じていませんでした
我々は計算された前の合計。

21
00:01:03,780 --> 00:01:08,480
最後に、その数は終了した場合
0で、数値は有効です。

22
00:01:08,480 --> 00:01:11,760
>> それでは、例を挙げて行きましょう
ステップによって、この一歩を踏み出します。

23
00:01:11,760 --> 00:01:14,930
だから、私たちの最初のステップは、起動することです
最後の数字に2番目から

24
00:01:14,930 --> 00:01:18,080
そして2によって他のすべての数字を掛けます。

25
00:01:18,080 --> 00:01:22,240
今、私はクレジットカードを保存した場合
CC番号と呼ばれる変数の数値、

26
00:01:22,240 --> 00:01:26,060
その後、10であることをだろう改造
私は非常に最後の桁を与えます。

27
00:01:26,060 --> 00:01:28,910
だから、どのようにアクセスする可能性があります
最後の数字に2番目の？

28
00:01:28,910 --> 00:01:32,030
>> [OK]を、ので、一度私たちは、アクセスしました
最後の数字に2番目、

29
00:01:32,030 --> 00:01:35,790
その後、我々は反復処理します
2によって他のすべての数字を掛けます。

30
00:01:35,790 --> 00:01:38,620
我々はその後、ということをしたら
私たちは、それらの製品を取りますよ

31
00:01:38,620 --> 00:01:41,350
そして、一緒に、これらの製品の数字を追加します。

32
00:01:41,350 --> 00:01:43,830
だからここに私は、単一の持っています
数字は、そのためには大丈夫です。

33
00:01:43,830 --> 00:01:47,480
しかし、私は私の最後に到達したら
2--を乗じnumber-- 7

34
00:01:47,480 --> 00:01:52,080
私は私に27を与えるために1と4を追加します。

35
00:01:52,080 --> 00:01:55,980
そこから、私たちはそのproduct--を追加します
その数字の和に27--

36
00:01:55,980 --> 00:01:57,790
2を乗じていませんでした。

37
00:01:57,790 --> 00:02:01,070
>> だからここに私はすべての強調表示されました
オレンジ色でこれらの数字の。

38
00:02:01,070 --> 00:02:04,900
我々は、これらの数字を追加すると、その後、
私たちは、最終的なチェックサム番号を取得します。

39
00:02:04,900 --> 00:02:09,120
だから我々は作ることによってそれを検証します
最後の桁が0であることを確認してください。

40
00:02:09,120 --> 00:02:12,635
チェックサムはで終了しない場合
0の場合、クレジットカード番号

41
00:02:12,635 --> 00:02:14,400
間違いなく無効です。

42
00:02:14,400 --> 00:02:17,840
そうでなければ、のにに行こう
会社識別子をチェック

43
00:02:17,840 --> 00:02:19,870
そして、クレジットカード番号の長さ。

44
00:02:19,870 --> 00:02:21,830
>> 私たちは、リストを提供してきました
3社の、

45
00:02:21,830 --> 00:02:25,940
それとともに、整数の個数
自分のクレジットカード番号を持っています。

46
00:02:25,940 --> 00:02:29,630
そして、最初の2桁という
それらのカードはで始まる可能性があります。

47
00:02:29,630 --> 00:02:34,070
ですからまでを追跡するために
クレジットカードの最初の2桁

48
00:02:34,070 --> 00:02:37,620
そしてそのカードの整数の数。

49
00:02:37,620 --> 00:02:40,110
ことで、あなたはしました
問題を終えました。

50
00:02:40,110 --> 00:02:44,210
私の名前はZamylaであり、これはクレジットでした。

51
00:02:44,210 --> 00:02:45,859

