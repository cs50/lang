DAVID J. Malan: Tātad mēs esam atpakaļ. Tik augsta līmeņa temats brīdī tagad ir tehnoloģija skursteņi, kas nav īpaši tehnisks termins, tas ir vairāk VISAPTVEROŠĀS jebkuram skaits tehnoloģiju apvienojumus ka jūs varētu izmantot, lai risinātu problēmas. Un, iespējams, visvairāk montāžas veids, kā sākt būtu aplūkot valodās kopš Es turpinu grabošs off visu ķekars un lielākā daļa visi telpā ir dzirdējuši par vismaz vienu. 

Un tad kāpēc nav mēs cenšamies atšķirt what-- atšķirt šos valodas un īsi runāt par to, kad jūs būtu izvēlēties vienu pār otru, kā viņi veida fundamentāli atšķirīgs, un it īpaši, kad jūs čatā ar inženieriem, vai mēģināt izlemt, pie kā nolīgt, vai ko īstenošana Priekšlikums GreenLight, kā jūs varētu faktiski veikt šie lēmumi veidus. 

Tātad pieņemsim tikai grabēt dažas lietas off. No valodām, cilvēki ir dzirdējuši par, to, kas nāk prātā? C. OK. OK, C ++. Kas tas ir? 

Mērķauditorija: Python. 

DAVID J. Malan: Python. Excellent. Kas vēl? Visual Basic. Es dzirdēju Java. Visual Basic-- pazīstams arī kā VB. Java. NET, kas ir vairāk par nozvejas visiem par to, kas parasti ir C # kā valoda jautājumā. Un ļaujiet man pieminēt, ka. Tātad mēs būsim atpakaļ uz to. Man žēl? Žēl? 

Mērķauditorija: SQL. DAVID J. Malan: Scratch? Mērķauditorija: SQL. DAVID J. Malan: Ak, SQL. LABI. SQL. Tātad mēs būsim atpakaļ uz that-- faktiski, tas good-- pēc pārtraukuma, kā arī. Kas vēl? 

Mērķauditorija: Oracle. 

DAVID J. Malan: Tātad Oracle, nav valodu. Patiesībā viņi varētu izmantot SQL, kā arī. Tātad, pieņemsim nodot, ka pēc tam, kad pārtraukums, kā arī. Un piedodiet, kaut kas vairāk nekā šeit? Mērķauditorija: Mathematica. DAVID J. Malan: Mathematica? OK, protams. Un MATLAB ir sava veida tur reizēm. 

Mērķauditorija: R. 

DAVID J. Malan: R. Iesim nekā šeit. Fortran. Protams. Vecāki skola. Fortran. COBOL. Es mētāt BASIC. PAMATA. Any-- 

Mērķauditorija: MATLAB? DAVID J. Malan: MATLAB. Ak, jūs apsteidzis. Kaut ko? Es domāju, ka pāris citiem. Es domāju, ka daži citi. Un kāda bija pēdējā? 

Mērķauditorija: ASP. 

DAVID J. Malan: ASP? Jā. Active Server lapas. Tas parasti attiektos citas valodas, reizēm C #, Liksim ka off. Bet mēs atgriezties ka par sistēmām un tādas. Jebkas cits? PHP ir populāra. Ruby ir cits. JavaScript, nedrīkst jaukt ar Java, ir cits. Tas ir sava veida daudz. 

Līdz ar to var būt noteikti milzīgs, kā tad, ja saraksts nav jau, vienkārši sākt zināt, kur jūs sākat. Un tā par laimi, pieņemsim pieeja šo no dažiem leņķiem. Pirmkārt, pieņemsim mēģināt kategorizēt vismaz daži no šiem valodas divās plašās spaiņi, kas atgādina saruna mums bija pirms pārtraukuma, kur mēs runājām par apkopojot, un pirmkodu, un mašīnu kodu, jo tas nav kā visas valodas strādā. Tātad mēs izraut dažus piemērus of-- vai counter-examples-- šajā modelī. 

Un tad, kāpēc ne mēs runāt par pieteikumu ka šajās valodās parasti izmanto. Un godīgi sakot, pat ja tas ir diezgan garš saraksts, tas ir tikai apakškopa šajā sarakstā jūs parasti izdarīt no šīm dienām risināt problēmas. Dažas valodas ir jaunāks nekā citi. Dažas valodas ir vairāk populārs nekā citi. Tātad, tas nav kā jums ir tādas milzīgs uzdevums pirms jums lemjot vidū šīs dažādās valodās. 

Tātad, pieņemsim darīt. Mums bija agrāk, pirmkodu, un tad mums bija mašīnu kodu. Ak vai. Rakstīšana nepareizu vārdu. Mašīnu kodu. Un mums bija dažas process middle called-- yeah, kompilatoru. Tātad kompilatoru. 

Un kāda mašīna kods faktiski darbojas beigās būs jūsu faktisko CPU. Citiem vārdiem sakot, ar mašīnu kodu, es ir zemākā līmeņa norādījumus ka CPU patiešām saprot. Saskaitīšanu, atņemšanu, pārvietot, glābt, un darbības, piemēram, ka. Un tā tas ir modelis, kas ir parasti sauc par apkopoti valodās. Varbūt nav pārsteidzoši. 

Tātad šis ir modelis par apkopoti valodās. Bet izrādās, tur ir cita klase valodu sauc interpretēts languages-- interpretēts languages-- kas ir nedaudz atšķirīgs. Jūs rakstīt pirmkodu, palaist tos, izmantojot tulka, un ka tulks ko iet uz CPU. Citiem vārdiem sakot, to, ko jums nav EMIT ir kas, acīmredzot? Mašīnu kodu. Nullēm un tiem, kas CPU pati galu galā saprot. 

Tātad šajā pirmo versiju un valodas, piemēram, C, kā mēs redzējām, jūs rakstīt pirmkodu tas ir mazliet arcane, bet vismaz tas ir sava veida angļu līdzīgu un tas ir vismaz lasāma kad jūs nolietot uz to. Jūs palaist to caur kompilatoru un ārā jums, galu galā nullēm un uzņēmumiem. 

Ka pārmērīga. Ir daži citi soļi tur. Patiesībā, ja jūs esat kādreiz dzirdējuši termins "montāžas valoda," tas ir viens solis pirms nullēm un tiem. Ka nedaudz vairāk lasāms, bet joprojām ir diezgan arcane. Un tā tur ir starpposma pasākumi kas ir, faktiski, notiek šeit. Bet izejas, galu galā, Tieši šīs nullēm un uzņēmumiem. 

Bet interpretēts pasaulē, kur jums ir valodas, kas ir interpretējami valodas, jūs faktiski izlaist šo soli. Citiem vārdiem sakot, ja jūs rakstīt programma, jūs vienkārši uzreiz palaist to. Jums nav apkopo to un tad palaist to, kā es darīju agrāk. Jūs vienkārši rakstīt to un palaist to. Un, ja jūs vēlaties, lai ātri izmaiņas, jums veikt ātru izmaiņas un atkārto to. Tāpēc nav vidū solis šeit. 

Tagad, par programmu es rakstīju iepriekš, kas bija šī programma "Hello World", jūs varētu pamatoti wonder-- vai varētu pamatoti state-- ka nebija, ka laiks patērē sastādīt savu programmu. Tas, šķiet, ir darījuši tieši tāpat. Un tur ir grafiskā versijas kompilatoru. Es esmu, izmantojot ļoti mistiskā versiju, bet jūs varētu hit atskaņošanas pogas un kas faktiski darīt apkopošana par jums. Esmu apkopojusi programmu un pēc tam atkal, lai palaistu to, es vienkārši izdarīt. Un tas izejas pie kreisās tur, "Hello!" Tas nešķiet viss, kas apgrūtinošs. Bet, ja jūsu programmas vairāk nekā tikai viens, divi, trīs, četras, piecas līnijas ilgi, tas var veikt daudz vairāk sekundes, lai apkopotu. Dažreiz pat minūtes vai diezgan daudz laika, lai apkopotu. Galu galā, daži no pasaules lielākie produkti Ir lietas, piemēram, operētājsistēmas, Microsoft Word, Microsoft Excel, kas varētu būt simtiem tūkstošu vai pat miljoniem koda rindiņas garš, un tie ne tikai nekavējoties izpildīt. 

Turklāt, tīmeklī, tas ir kļuvis moderni izmantot vienkārši interpretē valodas, daļēji tāpēc, ka jums var veikt izmaiņas, jo attīstītājs un tad tikai uzreiz pārlādēt pārlūka lapu un uzreiz redzēt rezultātu. Un tā HTML, bet ne programmēšanas valoda, ir valoda, kas ir interpretēts. Un mēs redzējām, ka tādu pašu efektu vakar. Jūs vienkārši pārlādēt lapu pēc tam, kad izmaiņas Cloud9 and-- voila-- jūs redzat jaunu rezultātu. 

Tātad, kāda ir atšķirība šeit? HTML, atgādināt, mums bija atvērts HTML, atvērtas virsas, open nosaukums, netālu nosaukums, tuvu galva, vaļējā virsbūve, un tā tālāk. Mums bija visus šos tagus, ka mēs diezgan daudz teica, pateikt pārlūku, ko darīt. Hei pārlūku, šeit nāk HTML lapu. Hei pārlūku, šeit nāk titulu. Hei pārlūku, šeit nāk daži teksts, kas būtu treknrakstā. Un tad jūs pateikt pretējo. Hey pārlūku, tas arī viss par treknrakstā tekstu. Hey pārlūku, tas arī viss, lai organismā. Un tā tālāk. 

Un tā, kādi ir pārlūkprogramma? Pārlūks ir tikai tulks. Tā ir programma, ka kāds, piemēram, Microsoft vai Google ir rakstījis, kuru mērķis dzīvē ir lasīt valodu, kas pazīstama kā HTML, un interpretēt. Augšas uz leju, no kreisās uz labo. Un jebkurā laikā pārlūkprogramma redz atvērts kronšteins, nosaukums, tuvu bracket, vajadzētu interpretēt, ka tādējādi, ak, ka nozīmē man vajadzētu likt šos vārdus veids šeit augšpusē pārlūku. 

Tātad tas vienkārši dara to, ko HTML kods saka. Bet tur nav nullēm un uzņēmumiem. Nav apkopojums. Jums nav darīt to. Pārlūks to nedarīja. Tas vienkārši nav iesaistīti. 

Tik garā tie turpinās tēmas, šodien un vakar, kas, šķiet, ir brīnišķīga īpašība. Jūs ietaupāt savu kodu, un pēc tam vienkārši palaist to vai interpretēt. Nav starpposma pasākumus. Protams tur ir izmaksas? Nevar visi būt upsides. Tātad, ko varētu šīs izmaksas būtu? 

Mērķauditorija: Space. 

DAVID J. Malan: Space. Tātad, protams. Jo apkopota pasaulē, jums ir ne tikai sākotnējo pirmkodu, Jums ir arī radīt un tad, iespējams ietaupīt mašīna code-- nulles un ones-- un tas ir nokļuvis aizņem zināmu daudzumu telpā. Absolūti. Tātad tas maksā jums vairāk vietas. Yeah? 

Mērķauditorija: Pārlūkprogrammas varētu interpretē atšķirīgi. 

DAVID J. Malan: Pārlūkprogrammas varētu interpretē atšķirīgi. Tā ir taisnība. Bet es neesmu pārliecināts, ka es esmu ērts apgalvojot tas ir tāpēc, ka tas ir interpretēts. Tas ir vairāk tikai tāpēc, ka tas ir īstenošanas no valodas kas pats par sevi ir neskaidrības. Tātad pieņemsim nav gluži apstiprināt ka viens, bet labs nojauta. Ko vēl varētu tikt samaksāta cena? Andrew? 

Mērķauditorija: Jūs esat apvienojot divi soļi, lai jūs tāpēc ir arvien sarežģītākas, kā arī. 

DAVID J. Malan: The complex-- pieaugums sarežģītības kur? Priekš kura? 

Mērķauditorija: Tātad, tulks solis, jūs apvienojot tulks un kompilators tikai noved kuri paredzēti, 

DAVID J. Malan: Ah, OK. Ironiski, ka tas ir iespējams, ir nedaudz vienkāršāk īstenot tulks, kaut arī tas būtu, šķiet, ražas upsides Šīs ērtības. Tātad, iespējams, taisnība. Bet tā veida atkarīgs, es teiktu, par valodu un par to, kā viņi devās par to īstenošanu. Tur var būt daudz vairāk sarežģītība, patiesībā, jo kompilators, tikai tāpēc, ka jums ir iet no kaut kas tik augsta līmeņa, lai kaut ko tik zema līmeņa. Bet labs doma. 

Tātad citiem vārdiem sakot, apkopota programma, kad pārvērtās šīm nullēm un uzņēmumiem, nonāk valodā ka CPU runā, tā kā šajā pusē loga pasaule, programma jūs esat rakstiski, kods jūs esat rakstiski, nekad faktiski izpaužas pārvērš faktisko valodā dators runā. Par nullēm un uzņēmumiem. Tas paliek sākotnējā, vairāk cilvēku draudzīgs, vieglāk lasāmu valoda. Tātad, kādi varētu būt saistība tur, ja jums nav faktiski apnikt pārveidojot savu programma ļoti valodā ka pamatā dators runā? 

Mērķauditorija: iespējams, nav izprast kaut ko? 

DAVID J. Malan: Might nesaprot kaut ko. Un kas var claim-- ja tā nesapratu kaut, tas ir bug vai trūkums no iezīme tulka. Tā, ka būtu vairāk kļūda nekā izmaksas. 

Mērķauditorija: Jums ir piekļuve pirmkodu? DAVID J. Malan: Tur ir labs. Tātad negatīvie šeit ir jums šķiet, ir pieeja. Tu, gala lietotājs, iespējams, šķiet, ir piekļuve avota kodu. Un tas ne vienmēr ir taisnība. Bet tā ir taisnība, jo gadījums JavaScript, ko mēs apskatīt pēc pārtraukums šodien, kas ir interpretējams programmēšanas valoda ka jums rakstīt pirmkodu. 

Bet tas pirmkods izpaužas nodota no servera uz pārlūku un darbojas cilvēka pārlūkprogrammā. Tātad, šeit viņa varēja tikai atvērt logu, piemēram, es esmu dara Chrome, un apskatīt to, kā mēs paši paskatījās vakar ar Google. Tas varētu izskatīties nedaudz nesaprotami, bet tas ir tur. Tātad tas ir absolūti viens samaksātā cena. Mērķauditorija: Performance hit? DAVID J. Malan: Jā. Un tas ir otrs Biggie. Tur ir sniegumu hit. Tāpēc, ka jums ir šī vidū cilvēks, kas pats par sevi ir programma, starp jums un CPU, nevis lai tikai barošanas šiem izejvielas nullēm un uzņēmumiem uz CPU, tur ir izpildījums hit, ka jums veikt ar interpretēts valodu. Tāds, ka patvaļīgi, programma kas varētu veikt vienu sekundi lai darbotos ar datoru, vai vienu minūte palaist datorā šeit, var veikt 10 sekundes vai 10 minūtes, lai palaistu datorā šeit. Tas parasti nav būs, ka daudz difference-- koeficientu 10-- jo tur ir optimizācija jūs varat darīt. Bet tas ir gandrīz vienmēr lēnāk. Tagad, otra puse, kas attiecas ir tas, ka, labi datori, katrs 12 18 months-- atbilstoši Mūra likums, tā speak-- ir tikai iegūt ātrāk un ātrāk. Man ir vairāk un vairāk vietas diskā. Man ir vairāk un vairāk RAM. Kas tiešām rūpējas? 

Un tas ir sava veida saprātīgs arguments. Patiesi, viens no iemesliem, kāpēc mēs varam paciest lēnāk interpretē valodas ir tāpēc, ka mēs cilvēkiem nav īsti paziņojums. Datori ir gotten tikai tik darn ātri. Tā atpakaļ dienā, it īpaši, kad aparatūra bija daudz vairāk ierobežota, jums bija mazāk par visu, tas bija daudz dārgāk tāpēc viss maksā vairāk, arī tad jūs tiešām gribēja izspiest tik daudz darbību, kā jūs varētu. Bet tas nepieciešams rakstiski zemāka līmeņa, ja jūs, ar apkopota valodu. 

Tātad jūs šo sniegumu hit. Bet parasti, tad upsides šķiet, ir vērts šajās dienās. Nu, izņemot intelektuālā īpašuma jautājums. Ka veida lasāmību no koda, mēs nāk atpakaļ, kad mēs skatāmies JavaScript. 

Tātad pamēģināsim kategorizēt vismaz daži no tiem. Tātad starp apkopota valodās, mēs būtu C, C ++, kinda, sorta, Java, Lai gan tas ir mazliet izņēmums, jo iemesli, es jums parādīs tikai brīdi. C # būtu šajā sarakstā. Mēs apskatīt vairāk tikko vairāk mūsdienu valodām. Viss kārtībā. Un tas šķiet daudz tur. Tā šaipus žoga, mēs varētu būt JavaScript, un Python, un PHP, un Ruby. Un vai tas ir pietiekami, lai jo vairāk jauniem darbiem? Ka jūtas kā lielu tagad. LABI. Un tad dot dot dot, jo saraksts ir bezgalīgs. 

Un patiesībā, ja mēs gribam, lai tikai iegūt sajūtu this-- Wikipedia, Apkopotie valodas. Es esmu guessing, mēs varam iegūt daudz izsmeļošs. Tātad, šeit mēs ejam. Tātad, šeit ir daudz izsmeļošs saraksts. Un es biju cerot, kāds varētu uzminēt D kā valoda, jo tas pārāk pastāv, bet viņi apstājās pie D šķiet. Lai gan patiesībā varētu būt E. 

Ak, patiesībā, tas ir būt sarakstā šajās dienās. Swift ir faktiski valoda, kas Apple izgudrots kas tagad izmanto arvien jā, iPhone attīstībā. Bet mēs atgriezties ka ar mūsu diskusiju par mobilo tikai mazliet, kā arī. Tik ātri, kā labi. 

Un tad, ja mēs ejam uz interpretēts language-- interpretēts language-- tad šeit ir vēl ilgāk sarakstu, kā arī. Tātad, ja jūs tikai google un meklēt Wikipedia par šiem, Jūs redzēsiet visu veidu valodās. Bet mērķis ir, šodien tiešām, tikai vārīties uz leju, varbūt tas jautājums par intelektuālā īpašuma un lasāmību līdz gala lietotājam un sniegumu, ir vēl viens Biggie, kā arī. 

Tātad starp šīm valodām, ļaujiet man redzēt, ja mēs varam sniegt jums tikai daži paraugu valodu. Mēs negribam iet cauri visas valodas bezgalīgi. Vai jums kādreiz prātoju, ko pārliecināts valoda izskatās? Mums bija redzēt pirms brīža. Kāpēc mēs pāris no iezīme pieprasījumus. Kurš gribētu redzēt, ko citu valodu izskatās? Jā. 

Mērķauditorija: Java. 

DAVID J. Malan: Java. Viss kārtībā. So iesim uz Java. Un tikai, lai dotu jums sample-- mēs varētu uzrakstīt visus šos ārā, bet tas būtu ātrāk tikai apskatīt kāds cits parauga kodu. Viss kārtībā. Tātad tas ir labs piemērs? Ak vai. LABI. Tātad, šeit ir Java versija Programma es uzrakstīju iepriekš, "Hello World". 

Tātad Java, jūs bieži skatiet atslēgvārdu "klasē." Tad jūs redzēsiet kādu vārdu pēc tā. Jūs redzēsiet cirtaini bikšturi tāpat kā mēs redzējām iepriekš, un reizēm viņi iet uz pati līnija, dažkārt citas līnijas, tas ir sava veida personiskā lēmumu. Jūs redzēsiet atslēgvārdus, piemēram, "Valsts", "statisks", "nav spēkā." Bet mēs redzēt "galvenais." "Galvenais" parasti nosaukums noklusējuma funkcijas vai noklusējuma rieciens kodu, kas izpaužas palaist programmu. 

"String." Ko mēs saprotam ar stīgu agrāk? Es to veida pagadās. Virkne ir kas? Vārds. Tas ir tāpat kā secību rakstzīmes. Atsevišķas rakstzīmes, Atpakaļ uz atpakaļ atpakaļ, parasti masīva, jo mēs esam apspriests. Un patiesībā, skatiet šo sintaksi šeit, divi kvadrātiekavas? Tas nozīmē, hey dators, šeit nāk masīvs stīgas. Laukums kronšteins notācija ir parasti izmanto, lai norādītu, ka. Un tad jūs varat droši ņemt guess-- ko tas uzsvērts rieciens kodu iespējams darīt? 

Mērķauditorija: Izejas? 

DAVID J. Malan: Jā. Tas drukā kaut ko uz ekrāna. Tātad "sistēma" ir sava veida Atsauce uz jūsu datora. "Out" nozīmē, ka jūsu dators ir produkciju vai ekrāna. Tātad "system.out.print ln" droši vien nozīmē? "Ln". Print līniju, kas programmētājiem patīk lai acīmredzot izskaidrot dažus vārdus out to kopumā un veikt īsceļus ar citiem vārdiem. Bet "ln" ir līnija, tāpēc drukas līnija. Tātad, tas izdrukā "Hello World! ", Kam seko jaunu līniju. 

Tāpēc, ka tas arī viss. Bet Java ir tas, ko tie būs aicinājums objektorientētā. Un tiešām, tikai, lai dotu pāris citu definīciju tur, ka jūs varētu redzēt, vispār, tur Ir daudz dažādu veidu valodas, bet visbiežāk ir procesuāli vai nenovēršamu valodās. Ir funkcionāls valodas, kas nav nozīmē, ka citi ir nedarbojas. Un tad tur ir objektorientētā valodas. Un tas, iespējams, ir labākais kategorijās lielākajā daļā valodu ka jūs varētu kādreiz izvēlaties veida Tipiska komerciālu projektu. 

Tas būtu pārāk daudz, Es domāju, kādas žurkas caurums iet uz leju, lai mēģinātu izskaidrot dažādas atšķirības. Bet valodas mēs esam redzējuši līdz far-- C ir procesuāls vai obligāti valoda. Pavisam nesen izgudrots valodas mēdz būt, piedodiet, objektu orientētas, kas nozīmē, tās ir citas funkcijas, lai tiem. Vai es varu paskaidrot, ka šādā veidā? Pieņemsim nav pat iet tur lejā. 

Objektorientētā līdzekļi Jūs varat implement-- Jūs varat modelēt reālo pasauli efektīvāk maz. Cilvēce, laika gaitā, ir izpētījuši,, wow, tas būtu jauki, ja manā valodā bija šo funkciju vai šo funkciju. Un tas ir iemesls, kāpēc mums ir tik daudzas valodas pasaulē. Saprātīgi cilvēki, smart cilvēki, piekrist vai nepiekrist un vienmēr veida sanākt kopā attīstot jaunas valodas visi kopā. 

Sakāms. Apple izgudrots Swift in cerības, iespējams pazemināt bārs uz iPhone attīstību, jo iepriekšējā language-- sauc Mērķis-C, kas varētu arī mūsu sarakstā here-- bija daudz mistiskā un daudz grūtāk wrap savu prātu apkārt. Un kā programmēšanas kļūst apstrīdami pieejamāku un plašāk cilvēki pat pieņēmusi mazāk tehnisks, tad goal-- tas ir ļoti drosmīgs mērķis, lai mēģinātu nolaidiet barjeru iekļūšanai, padarot paši valodas vieglāk, lai sāktu ar, bet ne mazāk jaudīgu obligāti. 

Un viena cita valoda. Kāpēc mēs to apskatīt pie kaut kā Python, kas ir ļoti modē šajās dienās. Python. Programmas paraugā. Paskatīsimies. "Sveiki World" valodas. Izdarīsim to. "Sveika Pasaule." Let 's redzēt, ja tas dod mums jauks piemērs. LABI. Tātad tas ir faktiski veida fun. Tātad, ja jūs kādreiz google "Hello World", kas notiek, ir viens no pirmajiem programmas jebkad uzrakstīts mūsdienīgā valodā, tāpat kā koncepcijas, jūs varat redzēt visādas implementācijas to. 

Dažas no šīm valodām Man nav pat dzirdējis. Bet jūs varat see-- iesim Basic, viens es uzzināju gadus atpakaļ, daļēji. Tas bija jautri valoda, jo jums bija, kā programmētājs, skaitu visiem jūsu līniju. Nevis pretēji tas, ko es biju dara, kad es rakstīju pseudocode uz dzeltenā dokumentā agrāk bināro meklēšanu, meklēšanai tālruņa grāmatu. 

Un tā, ja vēlaties doties uz citu līniju, Jūs burtiski rakstīt, iet uz 10, vai doties uz 20. Un, ja jūs esat rakstiski līnijas, konvencija bija to darīt, tas ir līnija 10, tas ir līnija 20, tas ir līnija 30, 40, ar neko starp, tādējādi dodot sev dažas vietas Ja jūs nolemjat, pagaidiet minūti, Es būtu pievienojis dažas vairāk kods kaut kur. Jūs vēl bija kādas deviņiem izredzēm izspiest ka starp jūsu programmā Pirms jums bija manuāli pārnumurē visu. 

Tātad tas ir sava veida, ko es domāju kad es saku pasaule ir jānāk klajā ar jaunām funkcijām. Kaut kur pa ceļam kāds saprata, zēns tas ir stulbi. Tas ir tikai radot strādāt programmētājs. Lai viņš vai viņa tikko veida būvēts jaunu slāni virsū, ka tā, ka jums nav jāuztraucas par to, ko line numurus jūsu kodu ir faktiski par. 

Tātad, kad varētu jūs izvēlaties viena valoda vai otru? Nu, kas no šiem valodas tu mēdz dzirdēt par visvairāk savu pasaules šajās dienās? Pieņemsim nolaižamā Mērķis-C too. 

Mērķauditorija: C #. DAVID J. Malan: C #. Tāpēc ļaujiet man krāsu. Vai mums ir citu krāsu kaut kur? Tātad C #. Un ko jūs zināt par C #? Jebkas pavasaris prātā? 

Mērķauditorija: Tas ir programmēšanas valoda. DAVID J. Malan: Tas ir programmēšanas valoda. LABI. Tā ir taisnība. Tātad mēs runājam par C #. C # ir tendence tikt izmantoti Windows vidē, Tātad, ja jūs esat rakstiski Microsoft programmatūru Windows, C # ir ļoti bieži izmanto, vai tas ir darbvirsmas programmatūru, vai pat tālruņa programmatūru uz Windows telefoni, Ja esat bijusi tiem, vai tīmeklī, pat pārāk. Un patiesībā, varbūt Kareem iepriekš minētajā ASP agrāk? Tātad tur ir arī tie lietas sauc sistēmas, ko mēs varam iepazīstināt ar pagarinājumu. Sistēmai, piemēram, ASP. Stendi Active Server lapas. Un tas ir kods un veids, programmēšanas kas parasti ir vieglāk rakstīt tīmekļa lietojumprogrammas. Citiem vārdiem sakot, tas būtu super, super kaitinošas uzrakstīt mājas lapā ka valodas C, kas mēs esam redzējuši iepriekš, jo jums būtu izmantot drukāt + F, Jums būtu izmantot šo atslēgvārdu "Galvenais" un cirtaini bikšturi. Daudz mistiskā sintakse un pieeja, lai īstenotu kaut kas ir diezgan sarežģīti. Mājas lapā. 

Un tā citas valodas ir attīstījušās veikt šāda veida lieta vieglāk. Un, savukārt, cilvēki nāk uz augšu ar rāmi, veida instrumentus ka jūs varat izmantot, kas padara to pat vieglāk rakstīt interneta lapas. Tā, piemēram, lai padarītu Tas daudz betona, ļaujiet man atvērt tikai teksta failu uz brīdi. 

Un jūs varētu atgādināt vakar ka mēs kaut ko teica piemēram, tas ir mājas lapa. HTML. Aizvērt HTML. Ļaujiet man izlaist galvu un vienkārši darīt ķermeni šeit. Pieņemsim, ka es gribēju rakstīt nevis "Hello World" bet "Hello David", kur Dāvids ir nosaukums pašlaik pieteicies lietotājam. Kāds kaut ko līdzīgu ASP darīs, vai JSP-- kas ir Java servera pages-- vai jebkurš vairākas citas sistēmas ir viņi nav valodas, per se. Viņi tāpat kā papildu programmatūra, kas jums būtu instalēt savā vidē ka tikai vieglāk programmēt. 

Tā, piemēram, nevis jādara kaut kas līdzīgs "Sveiki, printf (" Dāvids ")" vai kaut kas ir veida sadarbības mingling-- Koda veida mēs esam redzējuši before-- jūs varētu darīt kaut ko daudz vienkāršāku, piemēram, "name%." Un tā šīs sistēmas, piemēram ASP-- un I neatceros, ja es saņemu sintakse tikai tiesības ASP. JSP ir little-- tas ir labi? 

Tātad ar ASP, tas ir veida īpašu sintaksi ka daži izstrādātāji ir nolēmuši tas varētu palīdzēt cilvēkiem out. Un es varu izteikt kodolīgāk vietturi, piemēram. Tāpat nodot vērtību šeit, kur šī vērtība vārds ir ne N-A-M-E, tas ir sava vērtība glabājas tur. Tātad "nosaukums," šajā kontekstā, mēs saucam mainīgo. Algebra ir mainīgie piemēram, X, un Y un Z. Programmētāji izmantot mainīgos, kas ir vairāk aprakstošs nekā X, Y un Z, parasti. Tātad "name" burtiski būt sava veida atmiņas konteinerā kaut ko līdzīgu D-A-V-I-D, mana vārda, vai kādam citam cits ir pieteicies mājas lapā. 

Un tā tas ir sava veida ērtības jums ar dažiem vidē. Tātad C #, un kaut kas līdzīgs ASP būtu ļoti parasti tiek izmantota Windows pasaulē, vai tās darbvirsmas programmatūru vai tīmekļa servera, it īpaši, ja jūsu serveris ir savukārt darbojas Microsoft Windows un Microsoft IIS-- vai interneta informācijas Server, ja man akronīms right-- kas ir Microsoft tīmekļa serveri. 

Tātad, ko citās valodās ir ļaudis pazīstami ar, vai esat dzirdējuši par biežāk nekā nav? 

Mērķauditorija: Es zinu, ka Python s veida populārs [nedzirdama]. DAVID J. Malan: Ļoti populāri. Tātad Python šeit tiek izmantots ļoti bieži zinātniskajās pieteikumiem vai datu zinātne, kur jums ir daudz Datu, ka jūs vēlaties, lai analizētu un jūs vēlaties izmantot programmēšanas valoda tā. R var parasti izmantot ka kā arī, kādā statistikas kontekstā. Bet Python ir tik daudz iezīmes uzcelta. Tik daudz papildu bibliotēkas, kā cilvēki saka. 

Bibliotēkas ir tikai kolekcijas koda, ka citi cilvēki rakstīja, ka jūs varat izmantot, lai jums nav no jauna šos riteņus. Un tā Python ir ļoti bieži izmanto datu zinātņu programmas. Bet tas ir arī ļoti bieži izmanto tīmekļa lietojumprogrammas. Jūs varat īstenot dinamisku mājas lapā, izmantojot Python. 

Un ar dinamisku mājas lapā, es nozīmē ne tikai statisku saturu tāpat mēs izveidojām vakar, pēc tikai grūti kodēšanas latīņu tekstā un citas tādas lietas, bet gan spēju lai pieteiktos, iespēja iegādāties kaut kas, spēja izbraukšana ar savu iepirkšanās ratiņi, vai tamlīdzīgi. Visi, kas prasa dinamismu un jums vajag kādu valodu, piemēram, viena no tām. 

Mērķauditorija: Tātad tas Python ir savs paplašināšana, līdzīgi kā, piemēram, [nedzirdama] DAVID J. Malan: Tas. Tātad pasaulē Python, Django ir ļoti populāra sistēma Python. WSGI ir cits mehānisms, kas ir veida atšķiras no šī bet līdzīgi garā. Tas ir add-on, kas ļauj palaist Python kodu uz servera. Tur ir other-- yeah. Tātad šie mēs saucam sistēmas. Un tas ir mazliet par ļaunprātīgas rīcības. Tas ir vairāk par web servera tehnoloģiju. Bet mēs glabā to vienkārši un nodot tas šajā ailē tomēr. 

LABI. WSGI. WSGI. Vēl thing-- un faktiski, ļaujiet man virzīties ka uz savu kolonnā, jo es varētu kliegt uz sevi par ievietojot tos vienā un tajā pašā spainī. Palūkosimies uz to vērā serveri funkcijas, teiksim. Tas nav tehnisks termins. 

Tāpēc šeit mēs varētu būt WSGI. Tur ir CGI, kas ir vecāks tehnika kalpo up valodas piemēram, Perl vai PHP, vai daži citi. Atkal, es esmu minēts šos terminus ne tik daudz, lai veida iesakņojies tos, bet, tā ka, ja jūs redzat viņiem tas ir kaut kas jūs vienkārši google, lai uzzinātu vairāk. Nav īsta sula lai dažas no šīm lietām. 

Bet iesim atpakaļ uz valodām. Mēs runājām par C #, Python. Ko vēl varētu jūs izmantojat web programmēšana šajās dienās? Pieņemsim koncentrēties uz to joprojām. 

Mērķauditorija: PHP. DAVID J. Malan: PHP. Un pieņemsim nāk atpakaļ uz šo vienu. Tātad PHP ir ļoti bieži izmanto. PHP ir tendence iegūt sliktu rap. Tā sākās pie kā īstenots valoda ļaudīm, kas varbūt nebija obligāti labākais valodas dizaineri. Un tā jūs varat izlasīt visu veidu Raksti Online par to, cik slikti PHP ir. Un diemžēl, tas ir izpausme, daļēji no tikai reliģiskās debates ka izlauzties starp programmētājiem. Un tas ir kaut kas vērts paturēt prātā, No biznesa viedokļa, ka tas ir ļoti viegli, lai tehniskos darbiniekus iegūt visu strādāja līdz ar to atzinumi par dažām lietām. Un tas nebūt nenozīmē, ka viens kliedza visskaļāk vai ar spēcīgāko, angriest viedoklis ir taisnība. Daudz reižu, tas tiešām vienkārši nav nozīmes. 

Un tā cilvēki vienkārši apgalvojot, neatkarīgi viņu pašu aizspriedumi vai komforta zonas ir. Un tāpēc jums vajadzētu paturēt kas prātā, veicot lēmums, ka tikai tāpēc, ka kāds saka šī ir īstā valoda darbs, kas varētu būt taisnība, bet tas arī tikai varētu būt tas ir tiesības valoda viņu pašu prasmes iestatīt vai komforta zona. Kas nav slikti, bet jums vajadzētu saprast ka tur varētu būt daži konteksts tur. Ir daži objektīvi nepareizi apgalvojumi, tāpat C ir nepareiza valoda izmantot šajās dienās īstenošanas mājaslapas gandrīz vienmēr. Bet tas nav nepamatoti teikt, ka kāds no šiem ir nepareizi, ka mēs esam riņķoja līdz šim. 

PHP ir gājusi cauri daudzām versijām. Tātad valodas mēdz būt versija numuri, kas saistītas ar tiem. PHP ir līdz, es domāju, versija 7 tagad, tā tas ir bijis aptuveni par diezgan kādu laiku. Un kā valodas iegūtu jaunāku, viņi bieži saņemt jaunas funkcijas. Bet jums ir jābūt uzmanīgiem, tas jo, ja jūsu mājas lapā ir īstenoti PHP 7 versiju, bet jūs mēģināt palaist jūsu mājas lapā, vai varbūt jūs esat ārpakalpojumu attīstība savu kodu lai kāds cits, un tie pastu to jums vai nosūtīt to jums un viņi saka, šeit, ielieciet šo uz jūsu tīmekļa servera, Ja jūsu tīmekļa serveris ir maz gadiem outdated-- vai tas ir savu serveri vai web host-- tas varētu faktiski nav palaist. Tātad tie ir veidi lietas, ka kāds jābūt uzmanīgiem kad pārkārtošanās vietni vai tā īstenošanai pirmo reizi. 

Es dzirdēju JavaScript agrāk. Tātad JavaScript ir interesants viens ar to, ka tas ir parasti klienta pusē, jo mēs redzēsim pēc pārtraukuma, kas nozīmē, ka tā darbojas lietotāja pārlūkprogrammā. Bet jūs varat arī palaist JavaScript šajās dienās izmantojot kaut ko sauc Node.js, kur Node.js ir mehānisms darbojas JavaScript kods servera pusē, nevis izmantojot Python, vai PHP, vai citas šādas valodas. 

JavaScript ir īpaši labi piemērota par tērzēšanas pieteikumu un reālā laikā pieteikumi, bet PHP nav liels valoda, lai īstenotu kaut ko līdzīgs tērzēšanas serveri, kur lietotāji palikt savienotas ar to pastāvīgi. PHP ir vairāk vizītes mani vienu reizi, saņemt atpakaļ rezultātu, un pēc tam uz citu saiti daži sekundes vai minūtes no tagad. Tā Node.js un JavaScript var būt izmanto vairāk par noturīgiem savienojumiem. Citas valodas, ka jums ir aizdomas, parasti izmanto tīmekļa sīkumi? 

Mērķauditorija: Vai jQuery būt pamats? 

DAVID J. Malan: Labs jautājums. Ne. Es to sauktu jQuery bibliotēka, kurā atkal bibliotēka ir tikai ķekars kodu ka kāds cits ir rakstīts, ka parasti atrisina dažas problēmas, kas padara to, cerams, vieglāk lai jūs varētu darīt savu darbu. Un ļaujiet man darīt vienu piemēru tas kontekstā internetā. 

Saistībā ar tīmeklī tur šī valoda, JavaScript, ka mēs redzēsim vēlāk, saskaņā ar kuru jums varētu teikt kaut ko līdzīgu this-- "Document.getElementById." Un ko es aicinu to vakar? Pirmkārt, es domāju, bija unikāls ID I deva uz elementu, kas izskatījās kā šis. "P id =" pirmais ">", un tad mums bija piemēram, "Lorem Ipsum," un tā tālāk. Tātad, ja man bija rakstot programmu JavaScript lai kaut kā manipulēt, mainītu Web lapas, kas mēs spēlējās ar vakar, Es gribētu izmantot šo iezīmēto līniju koda lai iegūtu šo konkrēto fragmentu HTML no manas lapas, kas īpaši mezglā, kā mēs to saucam. 

Tomēr, jQuery, nevis rakstiski tas, kas ir izejvielas JavaScript code-- tikko no kastes, tas ir, kā jūs rakstīt it-- jūs varētu nevis tikai pateikt, "#first." Tas ir ekvivalents. Un tā balstās tikai uz šo ļoti arcane piemērs, ko iespējams ir arguments, izmantojot jQuery? Kāpēc būtu attīstītājs izmantot bibliotēku, piemēram, jQuery, pamatojoties uz šo izolētu piemēram, varbūt? 

Mērķauditorija: Mazāk kods. 

DAVID J. Malan: Jā. Tas ir mazāk kods. Tas ir tikai ātrāk rakstīt. Kontrapunkts ir ka tas izskatās scarier. Jūs nevarat īsti lasīt kreisās puses uz labo. Patiesībā, jo tas ir pārsvarā pieturzīmes tagad, nevis faktiskie vārdi, Es varu veida secināt, ka "Document.getElementById" izpaužas elements no dokumenta, ko tās ID. Es tiešām var izmantot nav tādas mnemoniska šī lieta šeit. 

Tātad, tas ir tirdzniecības off. Tur ir izsmalcinātība, kas nāk bieži ar izmantojot bibliotēkas, īpaši piemēram, jQuery. Bet realitāte ir jQuery ir laipns no kļūt par de facto standartu, tā ka gandrīz ikviens šīs dienas, kas raksta JavaScript kodu izmanto jQuery vai kaut ko patīk, un vairs raksta Šāds runīgs izpausmes kā tas, ka atkal, cilvēce ir iemācījušies, wow, tas bija sava veida zaudēta iespēja lai padarītu mūsu dzīvi vieglāku. Tātad cilvēkiem padarīt viņu dzīvi vieglāku. Labs jautājums. 

Citas valodas izskatīt. Es teiktu, ka starp šo saraksts Ruby ir diezgan populārs. Un tā pasaulē Ruby, tur ir sistēma sauc Rails, kas ir ļoti populārs. Tātad Ruby on Rails ir parasti izmanto izteiksmi. Arī šajā pasaulē, ļaujiet man aplis Java tīmekļa sīkumi, kur pasaulē Java Jums varētu būt JSP, vai Java Servlets, kas ir kopīga tehnoloģija. Un tas ir tikai atkal izmantošanas veidi ka valoda servera vidē. 

Tātad, ko tas nozīmē? Ja tev fiziska serveri, jūs burtiski lejupielādēt tīmekļa servera programmatūru un instalēt to tādā veidā, ka jums ir atbalsts par vienu no šīs sistēmas, ar kuru jūs varētu, savukārt, izmanto vienu vai vairākas no šīm valodām. Un patiesībā, ja jūs pierakstīties piemēram, interneta uzņēmējas vai dažu mākonis pakalpojumi mēs runājām par vakar, bieži sīkumi tikai nāk ar mašīnas konfigurācija jums. Jums nav nepieciešams noteikt šo augšu manuāli. Bet, ja jūs, tas ir, ja uzdevums Sistēmas administrators, tā sakot, sāk spēlēt. Viņš vai viņa tiešām darīt šāda veida stuff, lai jūs, vai tā sauktā webmaster bieži varētu izdarīt jūsu vietā. Viss kārtībā. Visus jautājumus par dažiem no tiem šeit? Vai jebkuras iespējas at visu jautāt par valodām? Sistēmai? Tad ļaujiet man iepazīstināt tikai viena cita bibliotēka tas ir arī ļoti bieži šajās dienās. Šo sarakstu varētu turpināt bezgalīgi. 

Un šī bibliotēka ir sava veida sāk izkrist no labā. Tas ir aptuveni. Tā tika popularizēts ar Twitter kādu laiku. Un tagad daudz tīmekļa vietnes, daudz izstrādātājiem izmantot. Bet jaunas lietas nāk ārā un nāk līdzi. Bet ļaujiet man tikai dod jums sajūtu par to, ko tas nozīmē, lai izmantotu bibliotēka. Tātad vēlreiz, JavaScript ir ļoti populārs valoda. CSS, vai Cascading Style Sheets, mēs runājām par vakar. Tas arī ir visuresošs. Neviens padara mājas lapu šodien neizmantojot HTML un CSS minimāli. Bet tas ne vienmēr ir viegli darīt dažas lietas. 

Un tāpēc ļaujiet man iet uz getbootstrap.com. Ak vai. Tas nav kā mēs izskaidrot. Getbootstrap.com, kas gatavojas vadīt mani uz galveno lapu šīs bibliotēkas. Tāpēc viņi dāsni zvanīt paši ietvars, kas ir sava veida veida godīgi, bet es tomēr to sauktu vairāk bibliotēkā nekā ietvaros. Bet tie ir tikai strīdēties semantika. Ļaujiet man iet uz savu cilni CSS un ļaujiet man iet uz kaut kas līdzīgs šim. 

Tātad, atcerēties to, ko mūsu formas izskatījās tāpat kā vakar Cloud9? Tas bija diezgan neglīts. Vecās skolas pogas. Es domāju, ka poga bija pelēks ar noklusējuma. Un viss bija tiešām formatēti diezgan messily. Tātad, ja jūs vēlaties, lai jūsu web formas meklēt mazliet nicer-- ļaujiet man tuvinātu šeit. 

Un jaukāk es tiešām tikko nozīmēt ļoti nitpicky estētiku. Tātad paziņojums, kā e-pasta kastē tur ir noapaļotu taisnstūra stūri uz to. Tātad, tas ir nedaudz tīrāks tur. Ievērojiet, ka vārds e-pasts ir tur, kamēr es sāku rakstīt un tad iet prom. Tātad tas ir jauki maz funkciju. Ievērojiet, kā lieta ir sava veida kvēlojošs labi, ko dažas no šī jums saņemt bez maksas no jūsu pārlūkprogrammā, bet daži no tā ir arī bibliotēkas, kods, ka citi cilvēki ir rakstīts, ka dod jums šo. 

Kaut kas tamlīdzīgs dod man manu paroli. Šī poga ir nedaudz sexier nekā noklusējuma. Ļoti modē tagad. Kopš iOS 7, vai arī tā, tad pasaule ir gotten ļoti dzīvoklis, tā kā pasaulē, pirms bija daudz ēnas, daudz no pārdomām par ikonām. Daudz, piemēram, apģērbu pasaulē, tur ir modes tendences, kas nāk un iet. Tagad viss ir dzīvoklis tālrunī. 

Patiesībā, pogas uz jūsu iPhone tagad ir tikai zilas saites. Tur nav bieži pat apļveida pogas. Tātad tie ir tikai lietas kas iet iekšā un ārā no modē, un tā tas ir, kā jūs varētu padarīt modernāku meklē tīmekļa veidlapu. Pogas. Tātad Bootstrap ir daudz diezgan pogām. Tātad, ja jūs vēlaties, zilas pogas, zaļās pogas, zils, oranžs, sarkans. Bootstrap padara vieglāku darīt šīs lietas. Šie ir veida lietas ka jūs varētu absolūti ir darījuši vakar ar CSS un HTML, bet tas ir tikai sāpes kaklā. Un tā vietā, ko Bootstrap būtu ir jums ir kaut kas līdzīgs šim. 

Ja jūs vēlaties button-- izrādās šis ir HTML tagu mēs neizmantoja yesterday-- un jūs vēlaties to apskatīt piemēram, šo zaļo pogu, Jūs burtiski Dāvini klasi, ko mēs runājam par vakar, no "BTN btn-panākumus." 

Kāpēc šie vārdi? Twitter, autori sāknēšanas, nāca klajā ar šiem vārdiem. Tie varētu būt saukta viņiem kaut ko viņi vēlas. Bet ko jūs saņemat tagad kāds cits pie čivināt, šajā gadījumā, ir izpētījuši, kā jūs padarīt poga izskatās jauki un tīra un zaļa. Tās iepakotas up šo funkcionalitāti in CSS klases, ko sauc par "btn" un "btn-veiksme," tā, ka jebkurš no mums var tagad to izmantot pat domāt par tā. Tāpēc viņi ir paņemts prom jēdziens zaļās pogas tāpēc mums nav jārūpējas par tā sevi īstenošanā. Mēs tiešām varam koncentrēties uz īstenošanas lietas, kas interesē mūs. 

Ja mēs ritiniet uz leju šeit. Kļūdu ziņojumi uz ekrāna. Dažreiz jūs vēlaties mazliet ziņu parādīties uz augšu pārlūku. Jebkurš no mums varētu darīt ar dažiem pūles, pēc vakardienas nodarbība, bet kāpēc jūs uztraukties? Tas ir tik neinteresanti estētisko detaļa. Pieņemsim stāvēt uz pleciem sāknēšanas un ļaut viņiem dod mums lietas, kā šis, kur mēs burtiski, lai iegūtu sarkanu lodziņu, vienkārši ir jādara rindkopu tag ar klasi of-- sorry. "Bg-briesmas" dotu mums šis sarkanīgi box vietā. Tagad iesim uz vairāk interesantas lietas. Ja es dodos atpakaļ uz augšu šo lapu un iet uz komponentes, Tagad pasaule kļūst daudz interesantāks. Piemēram, ļoti bieži ir nolaižamās izvēlnes, kā šis. Tas būtu absolūti sāpes īstenot. Un tas nebija tik ilgi atpakaļ, ka mēs programmētāji būtu jāīsteno šie veidu izvēlnēm no nulles. 

Bet tas ir tik izplatīta paradigma ka bibliotēkas kā sāknēšanas tikai dod jums spēja veikt nolaižamā izvēlne daudz, daudz vieglāk. Nav viens veids, kā to darīt, bet, ja es izlasīju dokumentāciju Es redzu, ka, OK, man vajadzētu izmantot šo HTML, ja es gribu nolaižamo izvēlni kas uzvedas tāpat. 

Tāpat, iesim uz pogas nolaižamajā. Tātad tas ir pat mīļotājs. Ja es vēlos, lai tas izskatās pogu bet ka maz trīsstūris nozīmē Man vajadzētu noklikšķiniet uz tā un saņemt šo izvēlni, šis ir, izmantojot valodu sauc JavaScript. Un mēs visi varētu īstenot Tas JavaScript. Bet atkal, tas ir ritenis Jūs nevēlaties, lai no jauna. Jūs vienkārši vēlaties ņemt to off plauktu bibliotēka šo. 

Iesim uz kaut ko tāpat progress bars. Tātad kaut kas līdzīgs šim ir veida atdzist. Ja esat kādreiz redzējuši progress bārs pārvietojas pa ekrānu, īstenošanā, kas bieži ir tikai vērpšanai ikona. Faktiski, tāpat kā malā, ļaujiet man iet uz Ajax-- kas tas ir? Ajax info? Ak vai. Ajaxinfo. Ļaujiet man atcerēties adresi. Tur mēs ejam. 

Tātad, ja jūs esat kādreiz redzējuši kādu animācijas kamēr lapa ir iekraušanas, vai domā, vai saglabājot vai radot kaut ko, jums varētu redzēt tādas animācijas kā šie. Tātad aplūkosim kaut ko piemēram, šo vienu šeit, un pieņemsim izvēlēties priekšplāna krāsu zaļa, kas jūtas veida draudzīgi. Vai es noklikšķiniet šo? Nāc viens. LABI. Mēs vienkārši iet ar sarkanu, jo ka tas, ko mēs esam nonākuši. Tātad šeit mums ir tā. 

Tātad, ja jūs esat kādreiz redzējuši šo uz ekrāna, kuru pēkšņi izrādās, un tad pēkšņi pazūd, kas ir tas, kas ir īstenošanas ka? Nu, tas ir tikai GIF. G-I-F. Un tas ir animācijas fails, kas tikai nozīmē tas ir tāpat kā vecās skolas komiksu grāmatu. Tur ir tikai ķekars atšķirīgs rāmji, kas gatavojas [stostīšanās] un tikai atkārtojot. Un tas radot ilūzija kustības. 

Tātad, tiklīdz lapa tiek darīts iekraušanas vai darot kaut ko, Kāda programmētājs darīt? Nu, viņš vai viņa vienkārši slēpj šo attēlu. Tātad viss ir progress bar ir ir labs no patīk filmu jūs skatoties. Jūs esat veida aizmirsusi faktu ka tas nav reāli darīt kaut ko, tas ir tikai pārvietojas. 

Un tad, kad tas ir izdarīts progresē, viņi vienkārši paslēpt to vai izslēgt. Un tas viss ir maģija kas notiek tur. Bootstrap dod jums kaut nedaudz mīļotājs, kurā jūs faktiski var redzēt procentuālo kā tas notiek, bet tas arī ir tikai sava vienkāršu animāciju. 

Apskatīsim dažus final sarežģītākas piemērus šeit. Kaut kas līdzīgs paveidus. Vai kāds zina, ko modāls ir? Modālo logs parasti viens, kas ir paredzēts veikt kontroli pār priekšplānā un novērst jūs no darot kaut ko citu. Tā veida liek lietotājam s uzmanību uz ekrāna vidū, locking tos, parasti, viss pārējais. 

Tātad, ja es palaistu šo demonstrāciju, ka ekrāns parasti kļūst pelēks. Nu, kā mēs to pelēks? Nu, mēs, iespējams, vienkārši mainīja fona krāsu tāpat mēs darījām vakar vai kaut kas tāds. Varbūt tas ir pārklājums kas daļēji caurspīdīgs. Un tagad paziņojums jūs varat darīt fancy lietas, piemēram, šis. Tātad, ja jūs kādreiz noklikšķiniet uz pogas un vēlaties mazliet pop out parādīties, jūs varat darīt. Un tā, kas rūpējas par all-- yeah? 

Mērķauditorija: Tātad ar sāknēšanas, lai saņemtu to iekļaut, tas ir tik vienkārši, kā, piemēram, vakar mēs CSS stilu lapu? DAVID J. Malan: Tiešām. Tiešām labs jautājums. Ļaujiet man iet uz Darba sākšana. Un jā. Viss, kas Jums jādara, lai izmantošana Bootstrap būtībā kopēt un ielīmēt šos trīs garas rindas kods uz augšu savā mājas page-- vadītājs jūsu page-- un jūs izveidota un darbojas. Un tur ir dažādi veidi, kā darīt tas, bet tas būtu visvienkāršākais. 

Tātad, kas ir noderīgi, par visu šo? Nu, ja jūs neesat tik daudz īstenotājs mājas lapā bet jūs mēģināt veidot to, vai jūs vēlaties, lai sniegtu kādu ar stiepļu rāmja diagrammas, tā sakot, Vai tikai mākslinieka pārsūtīšana no tā, ko jūs vēlaties darīt, es, uz šo diena, bieži iet uz vietas piemēram sāknēšanas, kur, ja I vēlamies īstenot something-- piemēram, nesen par universitātes pilsētiņā mēs vēlējāmies, lai īstenotu tīmekļa rīks navigāciju Hārvardas s kursu katalogs, atvieglojot studentiem pārlūkot kursiem un pievienot kursus iepirkumu sarakstu, tā sakot, līdz veida izlemt, ko viņi gribēja veikt. 

Es centos iedomāties sevi, kādas sastāvdaļas būtu mēs vēlamies izmantot, lai izveidotu šo? Kāda būtu lietotāja interfeiss būt, piemēram? Un tikai skatoties caur vietā, piemēram, šo vai citas šādas bibliotēkas vietnes, Jūs varat gūt iedvesmu, jo wow, Es varu izmantot šo widget, un šo widget, un šī widget. Un tad patiešām to, ko programmētājs sāk darīt, jo šajās dienās šis vairāk mūsdienu pasaule web programmēšana, ir programmēšana ir arvien par vadu lietas kopā. Kārtot ņemot to pie plaukta, tas pie plaukta, tas pie plaukta, un tu to smart viens savienot visus šos punktus, bet galu galā veidot kaut ko no jauna stāv uz pleciem citiem, tā, ka jums nav tērēt mēnesī Īstenojot stulbu nolaižamo izvēlni, kas faktiski ir grūti izdarīt, ja vēlaties to strādāt Chrome, un IE, un Firefox, un jebkurš skaits citās pārlūkprogrammās. Tas ir iemesls, kāpēc tas ir bagāts komerciālu un atvērtā koda programmatūru rūpniecībā, kā arī. 

Mērķauditorija: Tātad tas Bootstrap iegūt atjauninātu un jums ir, lai pēc tam atjaunināt savas saites? 

DAVID J. Malan: Tas. Nu, jā, tā dara. Bootstrap pašlaik ir versija 3.3.6. Un vispār, ko jūs varētu do-- tas ir tiešām vērts pieminēt. Tur ir tas, ko ir vispār pazīstams kā semantisko versiju izveide sistēma pasaulē. Ne visi to dara. 

Bet, ja jūs esat redzējuši versiju numuri kas ir šādā formā x.y.z-- tā, lai, piemēram, pirmo versiju programmas varētu būt 1.0.0. Vai arī, ja tas ir ļoti, ļoti beta, vai pat alfa statuss, kas nozīmē, izmantošana uz savu risku, tas nav tiešām gatavs prime laikā, Jūs pat varētu sākt 0.0.1 vai kādu šāds apzīmējums. Bet, ja programmatūra sākas versiju 1.0 vai līdzvērtīgi 1.0.0, parasti, kas ir kopīgs šiem days-- gan ne omnipresent-- ir ja uzņēmums vai individuālie programmētājs labojumi daži bug kādu gabals programmatūra, kas patiešām bija bug, kura korekcija nedrīkst ietekme jums all-- tas nemaina ka programmas uzvedību, tas tikai nosaka kaut ko kas nebija darba properly-- jūs parasti atjaunināt z vērtību tur. Kas nozīmē, kāds, piemēram, Kareem varētu vienkārši iedziļināties savā mājas lapā, akli mainīt versijas numuru no 1.0.0 līdz 1.0.1, saglabājiet to, kuģis to, un teorētiski nav jāuztraucas, ka viņš vienkārši sadalīti viņa mājas lapā, jo daži trūkums funkcionalitāti, tāpēc, ka kaut kas cits izputējis. 

Tikmēr, ja I programmētājs vai kāda kompānija bija veikt dažas nozīmīgas pārmaiņas, kas papildina funkcionalitāti, Es varētu atjaunināt mums 1.1.0 jo es esmu patiešām mainot uzvedību bibliotēkā. Es esmu sniedzot jums varbūt lielāku funkcionalitāti. Visbeidzot, ja man bija tiešām fundamentāli mainīt programmatūru, lai daudz, ka tas būs pārtraukums daudz lietotāju mājas lapas vai programmas, tad es esmu pateicīgs, šajā modelī, lai uzlabot lielāko versijas numuru pārāk, kas ir sadalīšana pārmaiņas. Citiem vārdiem sakot, es varētu būt pārtraukta atbalsts tiem piliens leju izvēlnē. Tātad, ja jūs paaugstināt līdz 2,0, pusi Jūsu mājas lapā var pārtraukt darboties. Un tas ir sava veida signālu sabiedrībai par to, kas ir iesaistīts jauninājums. Laba iespēja paaugstināt. Citi jautājumi? Viss kārtībā. Nu pieņemsim to apskatīt vienā finālā temats šajā segmentā programmu tehnoloģiju skursteņi, proti, kas saistīti ar mobilo. 

Tātad pasaulē mobilo tālruņu šodien Jūs have-- un iPad, un virsmas, un visi šie veidi no devices-- esat daudz izvēles, kad runa ir par īstenošanas pieteikumu vai mājas lapā sava klienta mobilās ierīces. Tik vienkārši norādīt acīmredzamas, varbūt šajās dienās, kādi ir platformām, attīstīties mobilo telpā? Ko ierīces varētu vēlaties atbalstīt ar savu lietotni vai mājas lapā? 

Mērķauditorija: Apple. DAVID J. Malan: OK. Tātad Apple ierīcēm. Tātad tas nozīmē, iPhone, un ka nozīmē, iPad, un varbūt pat iPod. Kas vēl? Olivier? 

Mērķauditorija: Android. 

DAVID J. Malan: Android. LABI. Tātad Android telefoniem, Android tabletes, Android Market ir pat Messier because-- un pat Apple kļūst netīrs. Tā reiz iPhone bija noteiktu lielumu, un iPad bija noteiktu lielumu, un iPod bija noteiktu lielumu, tagad mums ir iPad Minis, un to, ka plānā tiem, un iPhone 6 Plus un 6. Tas kļūst haoss. Tas kļūst par Android pasaulē. 

Un es to saku ar veida velmēšanas manas acis, jo no izstrādātāja perspektīva, tas ir sāpes kaklā, kad jums nav Steve Jobs " vīzija absolūtā kontroli pa visu no šīs specifikācijas. Apple joprojām nav, jo viņi tie ēka aparatūru. Bet tā ir jauka lieta, ja Es esmu programmatūras izstrādātājs, lai tikai zinu, ka mans iPhone vienmēr notiek būt šo lielo, jo tas nozīmē, ka es vienmēr zinu cik daudz ekrāna nekustamo īpašumu man ir. Tātad, ja es gribu, lai ikonu augšējā kreisajā stūrī, tas būs ar tieši tādu pašu laist katru klienta ierīci. 

Bet pasaulē iPhone 6s un iPhone 6 Plusi un pasaulē Android telefoni, tas ir visas kartes. Un tā tas padara to grūtāk programmai lietas, īpaši lietotāja saskarnes, jo tagad jums ir jāsāk organizēt Jūsu lietotāja saskarnes salīdzinoši, ne absolūti. Un tas pats ir taisnība par pārlūkprogrammām, un galddatoriem, klēpjdatoriem un gadiem jo jūs, protams, ir dažādas ekrāna izmēriem. 

Kas vēl? Jums varētu būt virsmas, kā no Microsoft. Jūs varētu have-- Mērķauditorija: Windows tālruni. DAVID J. Malan: Kas tas ir? Mērķauditorija: Windows tālruni. DAVID J. Malan: Jā. Tāpēc Windows telefoni tomēr var atrast. Veida veida BlackBerrys, bet tie jāmēģina. Un tad ķekarus citām ierīcēm. Tātad lielākā daļa, pieņemsim saka tie ir tie, rūpēties par brīdī. Protams, Apple stuff, protams Android sīkumi, un starp Windows, piemēram, virsmas tabletes šķiet, iepatikusies diezgan labi. 

Un tā starp šīm ierīcēm, ja jūs vēlaties, lai roll out, teiksim, mobilo klātbūtni jūsu Uzņēmums, kāda veida dizains lēmumus jums ir, lai? Nu, mēs jau teica Apple pasaulē, tur ir vismaz divas valodas ka parasti izmanto. Vienu sauca ko? 

Mērķauditorija: Mērķis-C. 

DAVID J. Malan: Jā. Tātad, Objective-C, kas ir vecāks par vienu. Tas ir arī valoda, kas daudziem Mac pieteikumi tiek joprojām rakstīts. Tad otra jaunāka viens bija? Mērķauditorija: Swift. DAVID J. Malan: Swift. Un tie ir sava veida divi zināt ieskaidrot ļaudīm. Tad Android pasaulē, Kādā valodā tas Android lietošanā? 

Mērķauditorija: C #? 

Mērķauditorija: Java. 

DAVID J. Malan: Java ir valoda "du jour." Windows pasaulē, protams, mēs sakām C # šajā lietā. Tāpēc jau tas ir sava veida kaitinošas, jo tas, ko ir takeaway par biznesu īpašnieks vai kāds, kurš tikko vēlas izskrējienu mobilo klātbūtni? Tāpat, sasodīts? Tāpat kā, ja es gribu, lai atbalstītu diezgan plašs lietotāju bāzi, Man ir rakstīt, šķiet, trīs atsevišķas programmas. Viena no šīm valodām, viens Java, viens C #. Un pat tad, ja es gribu funkcionalitāti būt identisks, tas nav svarīgi. Man joprojām ir nepieciešams izmantot dažādus valodas, jo Apple un Microsoft, un Google visi atbalsts dažādās vidēs. Un tas ir bijis izaicinājums gadus. Atpakaļ dienā, kad cilvēki izmanto, lai iegādātos programmatūru pie datora veikalā sarukt ietin kastes, jums vai nu ir, lai aizsniegt Mac plaukta, vai for-- varbūt šo ļoti maza Mac shelf-- vai lielāks Windows plaukts un nopirkt kādu programmatūru. Un ļoti bieži, tur nebija pat kaut kas jums uz Mac plaukta. Kāpēc? Nu, uzņēmumi nolēma ja 90% pasaulē, 95% no pasaules ir datori, kāpēc apnikt pat īsteno lietas, par Mac OS? 

Kā aside-- kopā digression-- kāpēc ir tā, ka Mac šķiet tik necaurlaidīgu vīrusiem, un tārpi, un drošības draudiem? Vai Apple labāk šo? Labāk noturēt datori droša? 

Mērķauditorija: Mazākas auditorija? 

DAVID J. Malan: Tas ir iespējams lielāks mazliet uz to. Tātad daudzi lietotāji Mac ir sen apgalvoja, ak, izmantojiet Mac, Jums būs imūna pret vīrusiem, un tārpi, un visas šīs lietas kas jau sen cieš datoriem. Tas varētu būt tāpēc, ka Apple ir labāk programmētāji un viņi raksta labāku programmatūru, vai operētājsistēma labāk izstrādāta. Varbūt, bet, iespējams, ne. 

Tas ir iespējams, ka tad, kad jūs esat 12 gadus vecs, vai 30 kaut kas veida sēžot mājās rakstiski ļaunprātīgu programmatūru pārņemt pasaule, jūs gatavojas doties pēc tik ļoti lielāks mērķauditorija. 95% no pasaules, kas varētu operētājsistēmai Windows vai kādu varianti to. Tātad tur ir mazliet no abām pusēm. Bet, lai to kredītiestādēm, Apple, cik man zināms, nav īsti touted sevi kā drošāku, jo jūs vienkārši aicinot drāma ja jūs veicat šo apgalvojumu, es domāju. 

Viss kārtībā. Bez kļūst pārāk tālu uz leju kas, kā mēs atrisināt šo? Vai jums ir nopirkt vai jums ir atlīdzina trīs dažādi cilvēki, lai attīstītu Jūsu lietotnes? Vai jūs izvēlaties vienu pār otru? Kas būtu virzīt savu domāšana šeit jūs domājat? Kareem? Nē. Kāds cits. 

Mērķauditorija: Just nāk ar aparatūru. DAVID J. Malan: Nāciet ar aparatūru? Ko tu ar to domā? 

Mērķauditorija: Par vide. [Dzirdams] DAVID J. Malan: Tātad tas ir taisnība. Bet jūsu klienti, tikmēr varētu būt iPhones, tie varētu būt Android tālruņus, tie varētu būt tablešu, ko Microsoft. Tātad, kā jūs ir mobilais stratēģija par visas šīs dažādās lietotāju? Šķiet, ka, ja tas maksā, teiksim $ 1000, lai padarītu iPhone pieteikumu, tas notiek izmaksas jums $ 2000, lai padarītu iPhone pieteikumu un Android pieteikumu, vai 3000 $ lai arī atbalsta Windows ierīces, kā arī. Tas ir iespējams, diezgan nepietiekams, un tas varētu pat nav lineāra sakarība, piemēram, ka. 

Mērķauditorija: Ja vēlaties, lai app vai ne, jūs varat būt atsaucīgi mājas lapā. DAVID J. Malan: Labi. Mērķauditorija: Vai jūs varat būt dzimtā app. DAVID J. Malan: Jā. Tātad visās šajā kontekstā šeit, mēs esam runājuši par to, kas cilvēku varētu likt native programmas. Tas ir programmas, kas tiek rakstīti dzimtajā valodā šīs ierīces. Tā dzimtā Mērķis-C vai Swift kods, vai Java, vai C #. Kas nozīmē, kad jūs lejupielādēt, pieņemsim teikt Snapchat, tautas pieteikumu, vai tad, kad jūs lejupielādēt Facebook uz tālruni, Jums ir lejupielādēt nu versija rakstīts par jūsu iPhone, vai rakstīts jūsu Android tālruni, vai rakstīts jūsu virsmas. 

Bet tur ir alternatīva. Kā Olivier bija atsaucoties uz, jūs faktiski var izmantot HTML 5 vietā, izmantojot to, ko sauc par web pieteikums, kurā jūs vienkārši īstenot savu mobilo klātbūtni un jebkuru funkcionalitāti. Ko es domāju ar mobilo klātbūtne? Piemēram, jūsu mājas lapā, kas ir jūsu kontaktinformācija, saraksts ar visiem jūsu produktiem, varbūt tas ir iepirkšanās grozs, varbūt jūs pārdot lietas caur to. Neatkarīgi no jūsu pieteikums ir, jūs īstenot, nevis mērķa-C, vai Swift, vai Java vai C #, bet HTML 5, kas bija valoda mēs izskatījās at vakar, ar JavaScript un CSS. 

Un, kas ir jauka par tiem, trīs ir tas, ka, lai palaistu tos, Jums ir nepieciešams tikai to, ko gabals programmatūru? Mērķauditorija: Web pārlūks. DAVID J. Malan: interneta pārlūku. Un labākais es zinu, visi šie ierīces nāk ar interneta pārlūkiem, tāpēc lietotājs nav instalēt kaut ko īpašu. Tātad, jūs varat vienkārši pateikt savu auditorija, jūsu klienti, iet uz acme.com in jūsu pārlūku un jūs vienkārši ir tīmekļa pieredzi kas joprojām aizpilda ekrānu, bet jums nav jāuztraucas par visiem šīs izmaksas un visu šo sarežģītību. Bet, protams, tur notiek būt nozvejas šeit, vai ne? It īpaši, ja es norādīt ka pirms pāris gadiem, Pati pirmā versija Facebook mobilo pieteikumu bija galvenokārt HTML 5 pieteikumu. Un tie ir, vairāk nesen, reimplemented to savos citām lietojumprogrammām. 

Tātad, kāpēc jūs ne uzreiz gribu teikt, Nu, protams, mēs esam gatavojas darīt? Ko slēptās izmaksas varētu būt? 

Mērķauditorija: Performance. DAVID J. Malan: Performance? Kā tu to domā? 

Mērķauditorija: Dzimtā app ir vairāk sniegumu. 

DAVID J. Malan: Tātad, kas ir taisnība, uz pāris iemeslu dēļ. Mēs varam oversimplify atbildi. Un atceros mūsu diskusiju interpretēts pret apkopoti valodās. Tas ir HTML 5 un līdz ar to, tikai, lai būtu skaidrs, JavaScript-- parasti rakstīts JS-- un CSS visi interpretē valodas, pat ja tikai JavaScript ir programmēšanas valoda. 

Un tā pret tiem, ko daži no šiem tiek apkopoti, vismaz tie three-- Mērķis-C, Java un C # - tie, teorētiski, vajadzētu tikai ātrāk. Bet tur ir cita realitāte for-- 

Mērķauditorija: Funkcijas? 

DAVID J. Malan: Kas tas ir? 

Mērķauditorija: funkcijas. 

DAVID J. Malan: funkcionalitāte? Kā tā? Mērķauditorija: Izmantojiet kameru off tālruni vai kaut ko. Jūs varat izmantot tos, ar pārlūku. DAVID J. Malan: Tieši tā. Viņi sec-- Mērķauditorija: [dzirdams] DAVID J. Malan: Tas ir vēl viens labs. Ir pazīmes, kas nāk ar mobilajiem telefoniem šodien ka nav, dizains, drošības iemesli, pieejamas tīmekļa pārlūkprogrammu. Jo tas būtu sava veida rāpojošs lieta, ja tikai tad, kad jūs apmeklēt google.com, vai cnn.com, vai website.com, ka mājas lapā ir tiesības vērsties kameru, lai fotografētu no jums, un tad to izmantot. Bet jūs negribētu izlases mājas lapā ka jūs apmeklējat par ļoti pirmo reizi ir, ka spēju. 

Un tā, ko tālrunis ražotāji parasti do ir viņi vienkārši liegt piekļuvi uz šāda veida informācijas uz pārlūku, kas nozīmē, ka jūs nevar īstenot kameru. Jūs nevarat īstenot push paziņojumus, pīkstieni, ka jums uz ekrāna ar īsziņām. Un patiesībā, pat GPS ir tikai veids no veida pieejams tīmekļa pārlūkiem. Ja esat kādreiz, par klēpjdators vai uz mobilo ierīci, velk uz augšu kaut ko līdzīgu, varbūt CNN.com, bet arī vietējo ziņu stacijas mēdz to darīt, tiek prasīts bieži ar message-- foxnews.com vēlas zināt savu atrašanās vietu. Apstiprināt vai noliegt. 

Nu, pārlūkā mēģina piekļūt Jūsu GPS informāciju no sava tālruņa. Bet par laimi Microsoft, un Apple un Google ir nolēmusi, ka jūtas kā tas ir noderīgi situācijā, mēs gribam Google Maps un citi instrumenti, lai strādātu, bet mēs negribam rāpot cilvēkus , tikai ļaujot jebkuru mājas lapu, lai to izdarītu. Tātad, pieņemsim veida tiekas pusceļā un ātru lietotājam. Bet tas ne vienmēr tā ir ar visu aparatūru, piemēram, kameru un ar push paziņojumi un tamlīdzīgi, lai jūs varētu būt upurēt dažas iezīmes. Bet darbības too. Tas kļūst mazāk manāms mūsdienās, varbūt kā LTE nozveja uz un ātrāk interneta ātrums uz tālruņiem, bet jūs varat veida sajust atšķirību. Tāpat kā tīmekļa pieteikumu vienkārši jūtas lēnāk, parasti, nekā native pieteikumu, daļēji jo tīmekļa pieteikumu pēc definīcijas ir internetā. Tas runā ar serveriem tīmeklī. Un, ja jūsu tīkla savienojums ir lēni, pat ritinot varētu būt lēna. 

Bet dzimtā pieteikumu, jums ir jau iepriekš downloaded-- iespējams kad jums bija mājās no App Store, vai jūs vismaz iepriekš lejupielādēts tā kopumā agrāk, neatkarīgi no jūsu savienojums speed-- un tāpēc tagad jums ir visas šīs biti, kas jums vispār ir nepieciešams. Izņemot varbūt daži dati kas nāk no servera. 

Tātad šie ir kompromisi šeit. Tur ir sava veida vidū kompromiss, patiesībā. Un es domāju, you-- 

Mērķauditorija: Izmantojiet datu bezsaistē. Jo dzimtā progr, jūs varat [nedzirdama] DAVID J. Malan: Protams. Tātad tur ir bezsaistē jautājums, kas ir tiešām kaitinošas Ja jūs nevarat spēlēt kādu spēli vai izmantošanu daži programmatūras tikai tāpēc, ka tu esi pagrabā kaut kur vai lifts. Dzimtā pieteikums ir elastīgs ar lielāku varbūtību pret ka, pieņemot, ka jums ir visas dati jums ir nepieciešams uz vietas. 

Tātad ir trešais variants šeit. Un pieņemsim izdarīt spektru kā dzimtā app šeit un web app šeit. Un, kas ir pa vidu ir kaut called-- un es domāju, ka jums varētu būt lieto vārdu pirms, varbūt? Hybrid pieteikumu. Un, tā kā vārds nozīmē, tas ir kaut kas pa vidu. Tas ir sava veida tīmekļa lietojumprogrammu un tas ir sava veida native pieteikumu. 

Un ko tas nozīmē? Izrādās, ka ir frameworks-- izmantot terminu no earlier-- programmatūru ka citi cilvēki ir uzrakstījuši par katru no šīm platformām. Šīs un vēl citas ierīces. Patiesībā, ļaujiet man iet uz PhoneGap, kas ir viens no šādiem sistēma, kas es tic Adobe pieder tagad. Ļaujiet man iet uz Darba sākšana. Paskatīsimies. Redzēt, ja es redzu sarakstu instrumentus. Aparatūras. Darba sākšana. PhoneGap aparatūru. 

Paskatīsimies. PhoneGap aparatūras pieslēgums. Ļaujiet man redzēt, ja mēs varam atrast mazliet diagramma, ka viņi izmanto, lai būtu. Tas ir citā vietā. Tas ir noderīgs? Nē. Tas ir gonna tērēt savu laiku tur. PhoneGap aparatūru. Ierīces. Device API. Nē, viņi pārcēlās to. 

PhoneGap. Iesim vienu pēdējo apskatīt šo un redzēt, ja es varu parādīt jums. Darba sākšana. Instalējiet PhoneGap. Instalējiet mobilo lietotni. Aiziet. Tie esam reorganizēta visu. Viss kārtībā. Ak, labi. Nu, šeit mēs iet. Tas nav viss, kas informēts, bet Tas ir tas, ko es biju veida meklē. 

Tātad PhoneGap ir pamats, kas jums var lejupielādēt bez maksas, kas dod jums daži starteris kods, būtībā. Tāpēc daži kodu, kas viņi ir uzrakstījuši tas nav jādara daudz neko. Bet ko tas dod jums būtībā ir ekvivalents Pieteikuma ka tikai liek liels taisnstūris uz lietotāja ekrāna. Tas nav likts URL bārs, piemēram, pārlūku, nav izvirzīti adresi. Tas tikai liek lielu taisnstūri. Un jūs konfigurēt šo lielo taisnstūris, zem motora pārsega, faktiski iet uz acme.com, vai varbūt m.acme.com, par mobile.acme.com, bet lietotājs nezina viņi šajā adresē. Visi viņi redz ir saturs mājas lapā. 

Bet kas ir jauka par šo būtni hibrīds app ir tas, kas PhoneGap un citi uzņēmumi dodam jums ir viņi dod jums mazliet koda Objective-C vai Swift, vai mazliet koda Java, vai mazliet koda C #, un būtībā, viss, kas jums ir, lai nodrošinātu, ir minimāli adresi jūsu tīmekļa pieteikumu. Un tad jūs saišķis šis visi kopā un jūs ir vai nu piekļūt jūsu vietā, izmantojot internetu, vai jūs pat cache vietējā kopēt iekšpusē pieteikumu, un tad jūs saglabāt savu pieteikumu iPhone formātā, Android tālrunis formāts, virsma formātā, vai jebkurš skaits citām ierīcēm. 

Jūs augšupielādēt katru no šīm versijām Google Play Store App Store, ar Windows Store, un tā tālāk. Un tagad, jūs varat būt visas jūsu auditorijas lejupielādēt patiesi native app, lai gan lielākā daļa kodu bija raksta kāds cits, bet saturs šīs dzimtās lietotnes visu nāk no, parasti, jūsu pašu mājas lapā. Tātad jūs turpināt rakstīt jūsu mājas lapā HTML, JavaScript un CSS. 

Tātad, kāpēc noslēptu šīs rindas? Kāpēc ir hibrīds pieteikumu tas ir sava veida dzimtā, bet arī veida web balstīta? Kas ir viss punkts Pievienojot šo sarežģītību? Es domāju, pat vēl, tikko no glancing caur šo lapu, darba sākšanas rokasgrāmatu jūtas kā tas ir got visai daudz soļu mani darīt pirms es can-- Mērķauditorija: otrreizēja izmantošana? DAVID J. Malan: otrreizēja izmantošana? Ko tu ar to domā? 

Mērķauditorija: No avota kodu. Tātad tas pats kods varētu palaist visi dažādām platformām. DAVID J. Malan: Jā. Mērķauditorija: [dzirdams] DAVID J. Malan: Perfect. Ja laiks ir ierobežots, un, ja jums nav, ka daudzi developers-- varbūt jums ir viena izstrādātājs un viņš, protams, nezina visi šie environments-- protams, nav labi, un, protams, nevar programma visās trīs vienlaicīgi un kuģis trīs produkti atvēlētais laiks par vienu, jums var būt viņam vai viņai būvēt visu HTML un JavaScript un CSS, un pēc tam mācīties tiny maz mazliet par dzimtā progr, tieši tik daudz, lai lejupielādētu regulējums kā šis, lai pēc tam augšupielādēt savu produktu visi no dažādiem app veikali tā, ka jums tagad ir dzimtā pieteikumu. 

Tā, ka, šķiet, piemēram, win-win, bet atkal, lai būtu skaidrs, kādi ir potenciāls izmaksas vai gotchas? 

Mērķauditorija: Performance? DAVID J. Malan: Jā. Performance. Ir grūti aprakstīt mutiski. Tātad, ja jūs vienkārši uzņemties ticība mobilo pieteikumu, tīmekļa pieteikumu parasti veic lēnāk. Tas, iespējams, nav izskatās diezgan labi, jo iPhone un Android telefoniem, un Windows ierīces, tur ir vienmēr sava veida noklusējuma izskatu un justies visi pogas un izvēlnes. 

Un uzņēmumi internetā, var mēģināt tuvināt šos estētiku ar bibliotēkām, piemēram, sāknēšanas, bet user-- vērīgs user-- gatavojas zināt, ka kaut kas nav gluži taisnība šeit. Un tas ir labi, varbūt tas nav liels darījumu. Bet sniegums jautājums absolūti ir liels darījumu. Native programmas būs tendence tikai būt daudz atsaucīgi un tāpēc labāk. Un tā, kas tad varētu būt labāko no abām pasaulēm? Ja jūs esat īpaši mazs sabiedrība vai neliela grupa, jums nav resursu izstrādāt lietotnes paralēli uz visiem trim platformām, un godīgi sakot, jūtas kā tas ir slikta ideja vienalga jo, ja jūs roll to ārā, un uz visi trīs vienlaicīgi realizēt, mums būtu pievienotas dažas iezīmes vai izdarīt kaut ko savādāk, tagad Jums ir noteikt to trīs vietas, nevis vienu. Kas varbūt optimālais stratēģija šeit kopumā, ja resursi un laiks ir ierobežots? 

Mērķauditorija: Just do it iOS. 

DAVID J. Malan: Tas nav nepamatota. iPhones, Vismaz ASV, ir super populāra. Android joprojām, šķiet, ir dominējošā tirgus daļa, pasaulē kopumā. Tātad jūs neesat vienmēr pārstāvis no kopumā zemeslodes šī nedēļas. Bet tas ir absolūti viens lēmums. Es domāju, universitātes pilsētiņā šeit es domāju, ka daži zvērīgās skaits vai procentuālā daļa, bakalaura ir iPhone un nav Android telefoniem. Bet ārzemēs, tas ir sava veida pretējo. Tātad jums izlemt, balstoties uz jūsu auditoriju. Kā jūs zināt, ko jūsu auditorija ir? 

Nu, mēs vakar uzzināju triks. Jūs varētu uzdot viņiem. Ja jums ir nebrīvē auditoriju jūs varat sūtīt tos aptaujas veidlapu. Vai jūs varētu vienkārši darīt to, ko? 

Mērķauditorija: Google Analytics? 

DAVID J. Malan: Kas tas ir? 

Mērķauditorija: Google Analytics. DAVID J. Malan: Google Analytics. Jā. Vai pat vairāk veida tehniski, tikai apskatīt savu tīmekļa serveri žurnālos. Jo tas, kas notiek katru reizi pārlūkprogramma, vai klēpjdatoru, darbvirsmas vai tālrunis apmeklētu jūsu mājas lapā? Tās nosūta šo HTTP galvenes, kas parāda tu ko pārlūku un OS viņi izmanto. Tātad jūs varat secināt, ar lielu varbūtību, ko jūsu demogrāfisko izmanto šādā veidā un pēc tam pielāgot. 

Tātad pieņemsim, ka ir nepieņemami. Tas ir sava veida slikts bizness, ja Android lietotāji nevar iegādāties mūsu preces. 

Mērķauditorija: Vai jūs esat gonna maksas vai ne? DAVID J. Malan: Vai jūs gatavojas iekasēt? Tātad OK, jums, ko jūs maksājat. 

Mērķauditorija: Vai jūsu app ir gonna brīvi vai arī tas ir gonna-- 

DAVID J. Malan: OK. Tātad, varbūt jūs varētu atgūt izmaksas, ka veids, or--? 

Mērķauditorija: Es izlasīju pētījumu reiz to teica vairāk Apple lietotāji maksā par lietotnēm versus-- DAVID J. Malan: Tas ir taisnība jo viņi jau maksāt vairāk par to ierīcēm. Tātad nav nepamatoti pieņēmums. 

Mērķauditorija: [dzirdams] DAVID J. Malan: OK. Tātad, ja viņi vairāk gatavi maksāt, tad uz elli ar Android lietotājiem. Viņi nav gatavojas maksāt mums neko anyway. Mēs varētu arī koncentrēt mūsu prioritātes, vismaz pirmajos mēnešos vai gadu, uz iOS. Pilnīgi pamatoti. Kas ir vairāk ietverošs stratēģija nekā? Maybe-- kas ir kas? 

Mērķauditorija: [dzirdams] 

DAVID J. Malan: Vairāk expensive-- tāpēc varbūt ieguldīt vairāk in-- iet uz priekšu. Mērķauditorija: Jā. Tikai mobilais mājas lapā. 

DAVID J. Malan: Tātad do mobilās mājas lapā un nav pat jāuztraucas par šo sarežģītību. Vai varbūt saprātīga stratēģija, kas pat Facebook paņēma, ir sākt ar hibrīda pieteikums, jo tas nav ka daudz grūtāk izdarīt nekā šis. Jums tikai lasīt dažus dokumentācija un izdomāt, kā augšupielādēt lietas App Store. Tātad, varbūt jūs sākat ar šis, tā, ka uz vienu dienu, Jūs varat atbalstīt visiem jūsu lietotājiem. Un tad, tāpat kā Facebook un citi uzņēmumi ir izdarīts, ja jums ir resursi, jums ir cilvēki, kāpēc nav jūs atkārtoti ieviest tikai iOS pieteikumu. Jums vēl ir kaut ko ikvienam, pat ja tas ir sliktāks pieredze iespējams, ar hibrīda pieteikumu. Bet jūs varat pakāpeniski roll out un aizstās jūsu īstermiņa pasākumi hibrīdu progr ar Jūsu vairāk native programmas. 

Mērķauditorija: Bet ar hibrīda app jums būs pieejami mobilo iezīmes? 

DAVID J. Malan: Ne vienmēr. Tāpēc varbūt jūs veicat apzinās lēmumu agri, jūs varat tikai augšupielādēt fotogrāfijas uz native iPhone pieteikumu Facebook, bet ne uz Android pieteikumu, sākotnēji, piemēram. Un tas ir mazliet balta meli tāpēc, tīmekļa lietojumprogrammas ir vairāk ierobežojumu nekā hibrīda pieteikumi izrādās ārā, un, ja mēs lasām dokumentāciju par PhoneGap un lietām, piemēram, to, cilvēki ir jānāk klajā ar veidiem dot tīmekļa lietojumprogrammas piekļuve kamerai, tik ilgi, kamēr jūs izmantojat hibrīds pieteikumu. 

Kā tas darbojas? Jo hibrīdu pieteikums, pēc definīcijas, ir mazliet kodu mērķa-C, un Swift, un Java vai C #, tas var piekļūt aparatūru. Ne vienmēr viss, bet tas varētu ļoti labi būt lietas, kas jums ir pietiekami piekļuve iegūt kameru, pat Android platformām, lai piemēram, ar to, ka contrived piemērā. 

Jebkuri citi jautājumi? Viss kārtībā. Kāpēc mēs mūsu 15 minūšu pārtraukumu šeit. Mēs atsākt trīs ar galīgo apskatīt web programmēšana, datu bāzes, un Javascript. 