DAVID Malan: Bone, bonvenigas reen. Antaŭ ni plonĝi en cloud computing, Mi pensis ke mi paŭzi momente se estas iu elstara demandoj aŭ temoj kiuj eliris dum lunĉo Kiu povus nun esti de intereso. Spektantaro: [inaudible] 

DAVID Malan: Bone. Ho, bone. Spektantaro: [inaudible] 

DAVID Malan: Ne, kompreneble. OK, bone espereble ĉiuj viaj problemoj ŝprucas en la venontaj kelkaj horoj kaj morgaŭ speciale. Sed ni rigardu do, al kie la lasta diskuto pri starigado retejo kondukas, pli ĝenerale kiam temas cloud computing, starigado servilan arkitekturon, la specoj de decidoj ke inĝenieroj kaj programistoj kaj perantoj bezonas fari kiam temas por fari pli ol nur subskribanta supre por $ 10 por monato ttt gastiganto kiam vi vere volas konstrui ekstere via propra infrastrukturo. Kaj ni provos ligi ĉi dorso, ekz al Dropbox kaj aliaj kiel ili. 

Do ni komencu konsideri kio problemoj ekesti kiel negoco ricevas bonan kaj bonan problemoj ekesti. Tiel en la tre plej simpla kazo de devi iu kompanio kiu havas retservilo, vi povus havi, ni diru, servilo kiu ni simple desegni kiu similas ĉi. Kaj tiuj tagoj, plej servers-- kaj ni efektive metis bildon al tiu nur tiel ke ĝi estas iom malpli nebula. 

Tiel Dell rako server-- reen en la tago, estis mainframe komputiloj kiuj jxetis tutaj ĉambroj. Tiuj tagoj, se vi estus akiri servilo, povus aspekti iom io tiamaniere. Serviloj estas mezuritaj en kio nomas rako unuoj, aŭ Rus. Kaj unu RU estas 1.5 colojn, kiu estas industrio normo. Do ĉi aspektas kiel du RU servilo. Do ĝi estas 3 colojn altaj. Kaj ili estas ĝenerale 19 colojn larĝa, kio signifas ĉio ĉi tian materialon estas normaligita. 

Do se vi rigardas en datumoj center-- ne nur en unu servilo, sed ni rigardu Google datumoj centro kaj vidi se ni vidi belan bildon en Google Images. Tio estas multe pli bone lumigis ol vi estus tipe trovi, kaj multe sexier rigardas kiel rezulto. sed tiu estas kio ŝajnas paro cent serviloj ĉiuj pri tiu sama grandeco, fakte, en rako post rako post rako post rako en datumoj centro. 

Io kiel this-- tiu povas bone esti Google, ĉar mi googled Google. Sed povus esti reprezentanto de pli ĝenerale datumoj centro en kiu multaj kompanioj estas tipe ko-lokalizitaj. Kaj ko-lokalizitaj ĝenerale signifas ke vi iras al loko kiel Equinix aŭ aliaj vendistoj kiuj havas grandajn magazenoj kiuj havas multan povon, multa malvarmigo, espereble multa sekureco, kaj individuaj kaĝoj enmetanta kulisoj de serviloj, kaj vi aŭ lui la kulisoj aŭ vi alportos la kulisoj en. 

Kaj individuaj firmaoj, noventreprenoj speciale, havos ian biometriko enir ilia kaĝo, aŭ ŝlosila, aŭ ŝlosila karto. Vi malfermas la pordon. Kaj ene de oni nur kvadrata bildoj piedsigno ke vi pagas por, ene de kiun vi povas meti ajn vi volas. 

Kaj vi tipe pagi la povo. Kaj vi pagos por la piedsignojn. Kaj tiam vi pagos mem por la serviloj ke vi venigis sur tiun spacon. Kaj kion vi tiam havos la eblo fari estas pagi iun por via interreta servo conectividad. Vi povas pagi ajnan nombron de vendistoj, kiuj ĉiuj tipe venas en tiun datumon centro. 

Sed la vera interesa demando estas, kio reale iras en tiuj kulisoj? Ili povus tre bone aspekti kion ni ĵus vidis. Sed ili plenumas malsamajn funkciojn kaj eble bezonas fari malsamajn aferojn. Kaj ni vere motivi ĉi diskuto kun la demando de kio problemo komencas ŝpruci se vi estas sukcesa? 

Tiel vi hvas retejo ke vi konstruis. Kaj eble vendas fenestraĵoj aŭ ion tian. Kaj vi estis farante tre bone kun vendoj de widgets rete. Kaj vi komencas sperti iuj simptomoj, retpagxon. Kio povus esti kelkaj la teknika simptomoj ke uzantoj raportas kiel negoco kreskas kaj apogeo kaj via retpaĝaro estas profitigante de tio? 

Spektantaro: [inaudible] 

DAVID Malan: Jes, ĝuste. Tial vi havu malrapidiĝo de via retejo. Kaj kial povus okazi? Nu, se ni supozas, por pro diskuto nun, ke vi estas sur unu de tiuj komercaj gastigantoj ke ni parolis pri antaux tagmanĝo ke vi pagas iun numeron de dolaroj al monate, kaj vi jam pagis por la jara kosto de via domajno nomi, ke ttt gastiganto verŝajne overselling liaj rimedoj iagrade. Tial vi havu salutnomo kaj pasvorton sur ilia servilo. Sed tiel eble pluraj aliaj, aŭ pluraj dekduo aliaj, aŭ eble kelkaj cent aliaj, uzantoj. 

Kaj retejoj vivi korpe sur la sama servilo. Kial ĉi tiu ebla? Bone tiujn tagojn, serviloj tiel tipe havas multoblajn malmolajn diskojn, eble nekredeblaj ses aŭ pli malmolaj diskoj, ĉiu de kiuj povus esti tiel kiel 4 terabajtoj tiujn tagojn. Tial vi havu 24 terabajtoj de spaco en nur unu malgranda servilo tiel. 

Kaj eĉ se vi ŝteli iom de tiu spaco por redundo, por sekurkopioj celoj, ĝi estas ankoraŭ sufiĉe multe da spaco. Kaj certe, tipa retejo ne bezonas tiom da spaco. Nur registri uzantoj kaj stokante ŝtipoj de ordoj ne prenu ĉion, kion da spaco. Do vi povas dispartigi ĝin sufiĉe iom kaj doni ĉiun uzanton nur iom tranĉaĵo de tiu. 

Dume, komputilo kiel ĉi tiuj tagoj tipe havas multoblajn CPUs-- ne nur unu, eble du, eble kvar, eble 16, aŭ eĉ pli. Kaj ĉiu el tiuj CPUs havas ion nomatan kerno, kiu estas speco de kiel cerbon ene de cerbo. Do fakte plej ĉiuj tie kun modernaj tekkomputiloj havas probable duobla kerno aŭ quad kerna CPU-- kaj probable nur CPU ene de tekkomputilo tiujn tagojn. Sed labortablo komputiloj kaj rako komputiloj kiel tiu havu sufiĉe da pli CPUs, kaj siavice kernoj. 

Kaj sincere, eĉ en niaj Macs kaj PCs de hodiaŭ, vi ne vere bezonas duala kernoj aŭ quad kernoj kontroli vian retpoŝton. Se estas neniu botelkolo kiam temas uzante komputilon, vi la homan estas probable la malrapida afero pri tiu komputilo. Kaj vi ne tuj povos kontrolu vian retpoŝton pli rapide se vi havas kvar fojojn kiel multaj CPUs aŭ kernoj. 

Sed la sama estas speco de vera de servanto. Unu sola retejo ne fariĝu nepre bezonas pli ol unu CPU aŭ kerno, unu malgranda cerbo ene fari ĉiuj pensado kaj la prilaborado. Tiel fabrikantoj havas simile komencis tranĉi tiujn rimedojn tiel ke eble via retejo ricevas unu kerno, retpagxon ricevas unu kerno, aŭ eble ni dividante unu tia kerno. Ni ankaŭ dividante diskspaco. Kaj ni ankaŭ dividante RAM, aŭ Hazarda Aliro Memoro de antaŭe, de kiuj ekzistas ankaŭ finia kvanto. 

Kaj tio estas la ŝlosilo. Negrave kiom altekosta la komputilo estis, ekzistas ankoraŭ finiaj kvanton de resursoj en ĝi. Kaj tial la pli kaj pli vi provi konsumi tiujn rimedojn, la malrapida aferojn farigxu. Sed kial? Kial aferoj malrapidigi kiel simptomo de servanto esti superŝarĝita? Kio okazas? 

Spektantaro: [inaudible] DAVID Malan: Jes, ĝuste. Mi proponis frue tiun RAM estas tipo de memoro. Ĝi estas fluktuema, per tio kie apps kaj datumoj stokitaj kiam ili estas estanta uzita. Kaj tiel do ekzistas nur finia nombro de aferoj vi povas ŝajne faru senprokraste. Kaj ĝi estas ankaŭ pli rapida, kio estas bona afero. Sed estas ankaŭ pli multekostaj, kio estas malbona afero. Kaj ĝi estas ankaŭ tial nuntempe en malalta kvantojn da diskospaco, malmola disko spaco, kiu inklinas esti pli malkara. 

Alivorte, vi havu 4 terabajtoj diskospaca en via komputilo. Sed vi povus havi 4 gigabajtoj aŭ 64 gigabajtoj, en ordo de grando, faktoro de 1.000 malpli, RAM en via komputilo. Do kion komputilo faras? Nu, supozu ke vi ja havas 64 gigabajtoj RAM en servilo kiel tiu, kiun estus sufiĉe komuna, se ne malaltaj ĉi tiuj tagoj. Sed supozas ke vi havas tiom da uzantoj fari tiom da aferoj ke vi ia speco de bezonas 65 gigabajtoj de memoro manipuli ĉiujn ke samtempa uzado? 

Nu, vi povus simple diri, bedaŭras, iuj numeron de uzantoj nur ne povas aliri la retejon. Kaj kiu estas la mezuro de lasta rimedo, certe. Aŭ vi, kiel la mastruma sistemo, kiel la Windows aŭ Mac VIN aŭ Linukso aŭ Solaris aŭ ajna numeron de aliaj mastrumaj sistemoj en tiu servilo, povis nur decidi, vi scias kion? Mi nur havas 64 gigabajtoj de RAM. Mi ia bezonas 65. Do vi scias kion? Mi tuj prenos 1 gigabajto valoro de la datumoj en RAM kiu la malplej lastatempe Montrita kaj simple movi ĝin al disko temporalmente, laŭvorte kopii ĝin el la rapidaj memoro al la malrapida memoro por ke mi povas tiam manipuli ke 65th gigabajto neceso memoro, fari iun komputadon sur ĝi. Kiam mi la afero fari tion, Mi nur proponas ke al disko, movi ke aliaj RAM Mi provizore metis surdiske reen en la reala aparataro tial mi estas speco de multitarea. 

Do mi ia metanta aferojn provizore en ĉi malrapida spaco do mi kreos la iluzion pritrakti ĉiuj. Sed estas malrapidiĝo. Kial? Nu, ene de ĉi tiuj malmolaj diskoj tiuj tagoj estas kio? Prefere, kio faras malfacila veturi malsama RAM kiel bona vi scias nun? 

Spektantaro: [inaudible] 

DAVID Malan: Bone, vera. Spektantaro: [inaudible] 

DAVID Malan: Do tre vera. Kaj kiu estas flanka efiko aŭ karakterizaĵo de la fakto ke RAM estas ja pli rapide. Kaj do vi volas uzi ĝin por kuranta uzo. Kaj disko estas pli malrapida. Sed estas permanenta, aŭ ne volátil. Do vi uzas ĝin por longtempe stokado. Sed laŭ efektivigo, se mi rigardas supren kio nomiĝas DIMM, Dual Inline Memory Modulon, tiu estas kion peco de memoro RAM povus tipe aspekti. 

Do ene de nia Mac-- tio estas cimo. Ene de niaj Macs kaj PC, nia labortablo komputiloj havus bastonoj de memoro, kiel vi nomus ilin, aŭ DIMMs aŭ Simms reen en la tago, de memoro kiuj aspektas kiel ĉi tio. Niaj tekkomputiloj probable havas aferojn Estas tria la grandeco aŭ duono de la grandeco. Ili estas iom malpli granda, sed la sama idea-- iom pecoj de verda silicon flanon aŭ plasto kiu havas malgrandan nigran blatoj ilin kun multaj de dratoj interkonektante ĉiu. Vi eble havas tutan faskon da tiuj ene de via komputilo. Sed la takeaway tie estas ĝi estas tute elektronika. Ekzistas nur elektronojn fluas sur tiu aparato. Kontraŭe, se ni rigardas interne de malmola disko kaj tiri supren bildon tie, vi farus anstataŭ vidi ion kiel tiu, kiu faras havi elektron irante tra ĝi finfine. Sed kio ankaŭ elsaltas ĉe vi pri tiu afero? Spektantaro: [inaudible] DAVID Malan: Jes, ekzistas ŝajne movanta partoj. Estas ia kiel malnova rekordo ludanto aŭ fonografo ludanto. Kaj gxi preskaux estas. Ĝi estas iom amatoro ol that-- dum fonografo ludanto uzita fendo en la disko, ĉi reale uzas eta magneta eroj ke ni ne tute povas vidi. Sed se iom magnetaj eroj aspektas kiel tiu, ĝi estas konsiderata 1. Kaj se ĝi aspektas kiel tiu, nord-suden anstataŭ suda-norda, ĝi povus esti 0. Kaj ni vidos morgaŭ kiom ni povas konstrui el kiuj pli interesaj aferoj. 

Sed io tio akiris fizike movas estas certe iranta iri pli malrapida ol la lumrapideco, kiu en teorio estas kion elektrono povus fluas ĉe: kvankam realisme ne tute. Tiel mekanika devices-- multe pli malrapida. Sed ili estas pli malmultekostaj. Kaj vi povas havi tiom da pli datumoj ene de ili. Do la fakto ke ekzistas en la mondo io nomita virtuala memoro, uzante malmola disko kiel ĉi kvazaŭ estis RAM travidebla por la uzanto, simple movante datumoj de RAM por la malmola disko, tiam movante ĝin reen kiam vi bezonas ĝi denove kreas la malrapidiĝo. Ĉar vi laŭvorte devas kopii ĝin de unu loko al alia. Kaj kion vi kopiante ĝin kaj de estas reale pli malrapida ol la RAM kie vi volas ke ĝi estu. 

La alternativa solvo here-- Se vi ne ŝatas ke malrapidigi, kaj via virtuala memoro ia estanta overtaxed, kio estas alia solvo al tiu problemo? 

Spektantaro: [inaudible] DAVID Malan: Bone, pliigante la virtuala memoro estus ni faru tion en ankoraŭ pli granda skalo. Ni povus pritrakti 66 gigabajtoj valoras de memoro bezonoj, aŭ 67 gigabajtoj. Sed supozas ke mi ne ŝatas tiu malrapida malsupren, fakte Mi volas elŝalti virtuala memoro se tio eĉ eblas, kion alian povus mi ĵeti tiu problemo por solvi ĝin, kie mi volas pritrakti pli uzantoj kaj pli memoro postuloj ol mi fizike havas nuntempe? 

Spektantaro: [inaudible] 

DAVID Malan: Bedaŭrinde ne. Tiel la CPU kaj la kernoj ili estas en estas finia rimedo. Kaj ekzistas neniu analoga en tiu kunteksto. Bona demando, tamen. Tiel nur por esti klara, ankaŭ, se ene de tiu komputilo estas, diru, bastono de RAM kiu aspektas kiel this-- do ni nomas tiun RAM. Kaj super tie estas la malmola disko. Kaj mi nur tiri tiun bilde kiel iom cirklo. Estas 0-aj kaj 1-oj en ambaŭ these-- datumoj, ni ĝeneraligi ĝin. 

Kaj esence, se uzanto estas kuranta apliko kiel, diru, retejo kiu postulas ĉi multa RAM por uzanto, kion mi proponas, tra tion nomita virtuala memoro, estas nur provizore moviĝi ke super tie ke mi povas movi aliulaj memoro postuloj tien. Kaj tiam kiam tio estas farita, Mi povas kopii ĉi reen super kaj tio iras ĉi tie, tiel movas kion mi volis tie aliloken entute. 

Do ekzistas nur multajn switcheroo, estas la takeaway tie. Do se vi ne ŝatas tion, kaj vi ne volas meti ion sur la malmola disko, kio estas speco de la evidentan negoco persono solvo al la problemo, aŭ la inĝeniero solvo, tiurilate ankaŭ? 

Spektantaro: [inaudible] 

DAVID Malan: Jes, mi volas diri laŭvorte ĵeti monon en la problemo. Kaj fakte, ĉi tiu estas la perfekta segue al iuj de la pli alta nivelo diskutoj de nubo komputado. Ĉar multe de ĝi estas motivita per financaj decidoj, eĉ nepre teknologia. Se 64 koncertoj de RAM estas tro malgranda, nu, kial ne akiri 128 gigabajtoj de RAM? Kial ne akiri 256 gigabajtoj de RAM? Nu, kial ne? 

Spektantaro: [inaudible] DAVID Malan: Bone, ĝi kostas pli mono, certe. Kaj se vi jam havas neutiligatan malmola disko spaco, efike, aŭ ekvivalente, malmola disko spaco estas tiel multe pli malkare vi povus tiel uzi ĝin. Do denove, ne estas tio komerco ekstere ke ni vidis eĉ pli frue en ĉi tiu mateno, kie vere ne nepre respondas gxustajn, ekzistas nur bona aŭ malbona respondo bazita sur kio vi vere zorgas pri. 

Do ekzistas ankaŭ teknologia realaĵoj. Mi ne povas aĉeti komputilon, al mia scio, kun biliono gigabajtoj RAM nun. Ĝi nur fizike ne ekzistas. Do estas iu supera baro. Sed se vi iam eĉ shopped por konsumanto Mac aŭ PC, Ankaŭ ĝenerale ekzistas tiu kurbo de karakterizaĵoj kie povus esti bona, pli bona kaj pli bona komputilo. 

Kaj la marĝena revenoj sur via dolaro aĉetado la bona komputilo kontre la bona komputilo eble ne preskaŭ tiel alta kiel elspezi iom pli da mono kaj akiranta la pli bona komputilo super la bonan komputilon. Alivorte, vi pagas premio por atingi la supron de la linio. 

Kaj kion ni vidos en la diskuto de nubo komputado estas ke kio estas tre komuna tiuj tagoj, kaj kio firmaoj kiel Google frue popularigis, ne pagas por kaj konstruaĵo vere eleganta, multekostaj souped supren komputiloj kun multoj kaj multa ĉio, sed prefere aĉeti aŭ konstrui belan modestaj komputiloj sed multaj el ili, kaj uzante iu kiu estas ĝenerale nomita horizontala skalo anstataŭe de vertikala skalo. 

Do vertikala grimpita signifus atingi pli RAM, pli disko, pli de ĉiu, kaj ia investi vertikale en via aparataro tial vi nur nun la bona de la plej bona de la plej bona, sed vi pagas por ĝi. Horizontala skalo estas speco de akiri la fundo tavolo aferoj, la bona modelo, aŭ eĉ la malbona modelo, sed akiri multan ilin. Sed tuj kiam vi ricevas multan them-- ekzemple, en tiu kazo, retserviloj, se ĉi tiu servilo aŭ ttt gastiganto estas nesufiĉa, tiam nur intuicie, la solvo al tiu problemo de ŝarĝo aŭ superŝarĝas en via serviloj estas aŭ akiri pli grandan servilon aŭ, kion mi proponas ĉi tie anstataŭe de krustanta vertikale tiel diri, estus, vi scias kion? Simple akiri duan el tiuj. Aŭ eble eĉ atingi trionon. Sed nun ni kreis inĝenierio problemo nature tiu afero aŭ financan decidon. Kio estas la inĝenierio problemo nun? 

Spektantaro: [inaudible] 

DAVID Malan: Jes, kiel do vi konektas ilin kaj- bedaŭras? 

Spektantaro: [inaudible] DAVID Malan: Ĝuste, ĉar mi ankoraŭ have-- se mi reenkonduki min al ĉi tiu bildo: se tiu estas mia tekkomputilo ie en la interreto, kiu estas nun inter Mi kaj la kompanio ni parolas, nun mi devas diveni, por kiu servilo mi sendas ĉi aparta uzanto? Kaj se estas aliaj uzantoj, kiel tiu, kaj tiam ĉi tiu tie, kaj eble tiu estas uzanto A, tiu estas uzanto B, tiu estas uzanto C, kaj tiu estas servilo 1, 2, kaj 3-- nun intuicia respondo tie justa, ni sendos uzanto A al 1 kaj B 2 kaj C 3. Kaj ni povas manipuli 3 fojoj kiel multaj uzantoj. 

Sed tio estas simplificación. Kiel vi decidos kiu sendi kie? Do ni provu rezoni tra ĉi. Do supozu ke komputiloj A, B, kaj C estas klientoj, kaj serviloj 1, 2, kaj 3 estas horizontale grimpis serviloj. Do ili estas ia identaj. Ili ĉiuj kuris la saman programaron. Kaj ili povas ĉiuj fari la samon. Sed la kialo ni havas tri el ili estas tiel ke ni povu manipuli tri fojojn pli multaj homoj samtempe. 

Tial ni scias el niaj diskuton antaŭ lunĉo ke estas aparataro intere la tekkomputiloj kaj la serviloj. Sed ni nur ia ĝeneraligi ke nun la interreto aŭ la nubo. Sed ni scias, ke en mia hejmo, Tie estas probable hejmo enkursigilo. Proksime de la serviloj, ekzistas verŝajne router, DNS-servilo, DHCP. Tie povas esti io ni volas en tiu rakonto. 

Nu do kiel ni komenci decidi, Kiam uzanto A iras al something.com, kiu servilo itinero al la uzanto? Kiel povus ni komencas rakontistoj? Spektantaro: Laŭdu balancadon? DAVID Malan: Laŭdu balancadon. Kion vi volas diri per tio? 

Spektantaro: Revenante kie la plimulto uzado estas kaj kiu havas la plej supra rimedoj. DAVID Malan: Bone, do mi enkonduki novan tipon de aparataro ke ni ankoraŭ ne diskutis, kiu Estas ĝuste tio, ŝarĝon balancer. Tiu tro povus simple esti servilo. Ĝi povis rigardi ĝuste kiel la ni vidis antaŭ momento. A ŝarĝo balancer vere estas nur peco de programaro ke vi kuras sur peco de aparataro. 

Aŭ vi povas pagi vendiston, kiel Citrix aŭ aliaj, Cisco aŭ aliaj. Vi povas pagi por ilia propra aparataro, kiu estas aparataro ŝarĝo balancer. Sed tio nur signifas ke preinstalado la ŝarĝo balancadon softvaro sur ilia aparataro kaj vendis ĝin al vi ĉiuj kune. Do ni simple desegni ĝin kiel rektangulo por niaj celoj. 

Kiel nun mi efektivigu ŝarĝo balancer? Alivorte, kiam uzanto A volas viziti mian retejon, ilia peto iel aŭ alia, verŝajne pere de tiuj routers parolis pri pli frua, tuj eventuale atingi tiun ŝarĝon balancer, kiu tiam bezonas fari enrutamiento-simila decido. Sed ĝi estas encaminamiento por ia de pli alta celo nun. Ĝi estas ne nur pri akiri de punkto A al punkto B. Ĝi estas ĉirkaŭ decidi kio punkto B estas la plej bona inter them-- 1, 2, aŭ 3 en ĉi tiu kazo. 

Do kiel mi decidi ĉu iri al 1, al 2, al 3? Kio povus tiu nigra skatolo, tiel parolu, faru interne? Ĉi tiu estas ankaŭ alia ekzemplo en komputiko de abstracción. Mi laŭvorte tirita ŝarĝon balancer kiel nigra skatolo en nigra inko, ene el kiuj estas iuj interesaj logiko, aŭ magio eĉ, el kiuj devas veni oni decision-- 1, 2, aŭ 3. Kaj la enigo estas nur A. 

Spektantaro: [inaudible] DAVID Malan: Mi bedaŭras? Spektantaro: [inaudible] DAVID Malan: Bone, kiom eble ni categorizar la tipoj de transakcioj tie? 

Spektantaro: Montrante retpaĝo kontre informpeti datumbazo. DAVID Malan: Bone, tio estas bona. Do eble tiu uzanto A volas vidi retpaĝon. Kaj eble estas eĉ statika enhavo, iu kiu ŝanĝas malofte, se iam. Kaj tio ŝajnas kiel sufiĉe simpla operacio. Do eble ni simple arbitre, sed prudente, diris, servilo 1, lia celo en la vivo estas nur servi supren statika enhavo, dosierojn kiuj rare, se iam, ŝanĝi. Eble estas la bildoj sur la paĝo. Eble estas la teksto sur la paĝo aŭ alia tia ia neinteresa aferojn, nenio transaccional, nenio dinamika. 

Kontraŭe, se uzanto A estas kontrolanta el lia aŭ ŝia Aĉetkorbo ke postulas datumbazo, someplace enteni kaj memoru ke transakcio, bone eble peto iru al servilo 2. Do tio estas bona. Do ni povas ŝarĝi ekvilibron bazitan sur la tipo de petoj. Kiel alie povus ni faru tion? Kio alia lando 

Spektantaro: Bazita sur la servilo utiligo kaj kapablo. DAVID Malan: Bone, okej. Do vi menciis ke antaŭe, Kareem. Do kio se ni havigos iuj enigo sur [inaudible] inter serviloj 1, 2, kaj 3 al tiu ŝarĝo balancer por ke ili estas nur konstante informi la ŝarĝo balancer kio ilia statuso estas? Kiel, hej, ŝarĝo balancer, Mi estas ĉe 50% utiligo. Alivorte, mi havas duone tiom da uzantoj kiel mi povas reale manipuli ĝuste nun. Hej, ŝarĝo balancer, mi estas ĉe 100% utiligo. Hej, ŝarĝo balancer, 0% utiligo. La ŝarĝo balancer, se ĝi estas desegnita en maniero kiu povas preni en tiuj komentoj kiel enigo, ĝi povas tiam decidi, ooh, numero 2 estas je 100%. Lasu Min, Mi ne estonteco petoj al li aliaj ol la uzantoj jam konektita. Tiu ulo estas je 0%. Ni sendas multajn trafiko al li. Tiu ulo diris ke li estas ĉe 50%. Ni sendu iun trafikon al li. 

Tiel ke estus ingredienco, ke ni povis porti ŝarĝon en rakontas. Kaj ĝi tuj ŝanĝi super tempo. Do la decidoj ŝanĝos. Do tio estas vere bona tekniko, kiu estas komune uzita. Kion alian ni povus fari? Kaj ni vere nur resumi tie. Do la decidoj tie povus esti de tipo de trafiko, mi nomas ĝin. Ĝi povas esti bazita sur ŝarĝo. Ni vidu se ni ne povas elpensi kelkajn aliajn. 

Spektantaro: [inaudible] DAVID Malan: Situo. Do tio estas bona unu. Tiel location-- kiel eblas vin utiligi tiun informon? 

Spektantaro: [inaudible] 

DAVID Malan: Ho, tio estas bona. Kaj pri kiom da milisekundoj ĉu malpliigi per bazita sur kion ni vidis Matene vi diros? 

Spektantaro: [inaudible] 

DAVID Malan: Bone, bazita sur la spuro itineroj ni vidis antaŭe, kiu estas nur malglata mezuro de io, almenaŭ kiom longe ĝi prenas por datumoj akiri de A al B sentas ion lokaj estis, kio, kiel 74 milisegundos, donu aŭ preni? Kaj tiam io 100 Plus, 200 pli estis verŝajne eksterlande. Kaj do surbaze de tiu sola, similas racie supozi ke por uzanto en Usono aliri eŭropa servilo povus preni dufoje aŭ trifoje tiel longe, eĉ en milisekundoj, ol ĝi povus preni se tiu servilo situis tie geografie, aŭ inverse. Do kiam mi proponis frue tiun speciale kiam vi transiros, ke 200 milisegundo sojlo, donu aŭ preni, homoj ja ekrimarkos. Kaj la spuro itinero estas nur supozante kruda, neinteresa datumoj. Kiam vi havas retejon, vi devas akiri la uzanto elŝuti bildoj aŭ filmo dosierojn, multan tekston, posta petoj. Ni vidis, kiam ni vizitis, kio estis ĝi, Facebook aŭ Amazon antaŭe, ekzistas tuta amaso de aferoj kiu devas esti elŝutita. Tiel ke tuj sumigas. Tiel mult sekundoj eble ne senkaŭza. Tiel bona, geografio estas unu ingredienco. Do fakte kompanioj kiel Akamai, se vi aŭdis pri ili, aŭ aliaj longaj prenita geografio konsideri. Kaj ĝi rezultas ke nature de IP, mia tekkomputilo IP adreso, vi povas konkludi, kun iom da probableco, kie vi estas en la mondo. Kaj fakte ekzistas tria servoj vi povas pagi kiuj subteni datumbazoj de IP-adresoj kaj geografioj ke kun alta fido estos vera kiam demandis, kie en la mondo estas tiu IP-adreso? 

Kaj tial fakte kio aliaj firmaoj utiligas ĉi? Se vi havas Hulu aŭ Netflix, se vi iam estis veturanta eksterlande, kaj vi provas rigardi ion sur Hulu, kaj vi ne estas en Usono, vi eble vidos mesaĝon dirante: Ne en Usono. Pardonu, vi ne povas vidi ĉi enhavo. 

Spektantaro: [inaudible] 

DAVID Malan: Ho, vere? Sed jes, do vere tio perfekta apliko io tre teknika al fakta problemo. Se vi estus al VPN de Eŭropo aŭ Azio aŭ ie en la mondo por via kompania sidejo en Nov-Jorko aŭ kie ajn vi estas, vi estas tuj kreos la apero al ekster retejoj kiuj vi fakte en Nov-Jorko, kvankam vi estas fizike tre malproksime. 

Nun la uzanto tuj scias ke vi evidente for. Sed vi ankaŭ tuj sentas ĝin ĉar de tiuj aldonaj milisekundoj. Ke aldona distanco kaj la ĉifrado ke okazas en la VPN tuj malrapidigi aferojn malsupren. Do ĝi povas aŭ eble ne esti granda sperto. Sed Hulu kaj Netflix tuj vidos vin sidi ie en Nov-Jorko, kiel vi klare kolektis. Kio perfekta solvo por tio. 

Bone, do geografio estas unu decido. Kion alian povus ni uzos por decidi kiel al vojo trafiko de A, B, kaj C al 1, 2, kaj 3, denove, metinte la inĝenierio ĉapelon? Ĉi ĉiuj sonas tre komplika. Uh, mi eĉ ne scias kie komenci efektiviganta tiuj. Donu al mi ion jen simpla. Kio estas la plej simpla maniero fari tiun decidon? 

Spektantaro: Ĉu la servilo havebla? 

DAVID Malan: Ĉu la servilo havebla? Do ne malbona. Tio estas bona. Tio estas speco de nuancing de ŝarĝo. Do ni gardi en la ŝarĝo kategorio. Se vi estas havebla, mi estas nur tuj sendos la datumojn tie. Sed kiu povus miskarburi rapide. Ĉar se mi uzas tiun logikon, kaj se mi Ĉiam demandi 1, vi estas sur, vi plu, vi plu, se la respondo estas ĉiam jes, Mi tuj sendas 100% de la trafiko al li: 0% por ĉiuj aliaj. Kaj en iu punkto, ni tuj frapis ke malrapidiĝo aŭ retejon maldisponebla. Do kio estas iomete pli bonaj ol ke sed ankoraŭ bela simpla kaj ne preskaŭ tiel lerta kiel prenante ĉiuj tiuj pliaj datumoj konsideri? 

Spektantaro: Kosto po servilo. DAVID Malan: Kosto po servilo. Bone, do lasu min ĵeti ke en la ŝarĝo kategorio, tro. Ĉar kion vi trovos en kompanio, ankaŭ kontraŭ ke se vi altgradigi vian serviloj super tempo aŭ aĉeti pli, vi eble ne povos preni akurate la samaj versioj de aparataro. Ĉar ĝi falas ekstere de dato. Vi ne povas aĉeti ĝin anymore. Prezoj ŝanĝos. 

Tial vi havu pafas serviloj en via areto, por tiel diri. Tio tute bone. Sed venontjara aparataro povus esti duoble rapida, duoble kapabla kiel la ĉijara. Do ni povas ĵeti ke en la ŝarĝo kategorio. Ĉi sugestoj buklo inter 1, 2 kaj 3 en la ŝarĝo balancer povus certe diri ĝin, hej, mi estas ĉe 50% kapacito. Sed la vojo, Mi ankaŭ havas duoble tiom da kernoj. Uzas tiun informon. Eĉ simpler-- kaj tiu tuj esti temo en komputiko. Kiam en dubo, aŭ kiam vi volas simplan solvo kiu ĝenerale laboras bone tempo, ne elektas la saman servilo tutan tempon, sed choose-- 

Spektantaro: Hazarda unu? DAVID Malan: --a hazarda servilo. Yeah, elektu unu aŭ la alia. Do hazardo estas vere tio tre potenca ingredienco en komputiko, kaj en inĝenierio pli Ĝenerale, precipe kiam oni volas fari simplan decidon rapide sen kompliki ĝin ĉiu de tiuj tre lerta, sed ankaŭ tre saĝa, solvoj kiuj postulas des pli inĝenierio, ĉiuj la pli penson, kiam vere, kial ne mi nur speco de flip monero, aŭ tri helpis monero en tiu kazo, kaj decidi ĉu por iri 1, 2, 3? 

Kiuj povus miskarburi _probabilistically_, sed tre kiel la malakordo de klakanta kapon plu kaj denove kaj denove kaj denove kaj denove kaj denove estas eblaj en reality-- ekstra, ekstra neverŝajna. Tiel tempo, prognozoj estas nur sendanta uzantoj hazarde al 1, 2, kaj 3 iras al ellabori perfekte bone. Kaj tio estas tekniko ĝenerale konata kiel cirkla subskribolisto. 

Aŭ fakte, tio ne cirkla subskribolisto. Tiu estus la hazarda alproksimiĝo. Kaj se vi volas esti eĉ iom pli simpla ol tio, cirkla subskribolisto estus, unua persono iras al 1, dua persono al 2, tria persono al 3, kvara persono por 1. Kaj tie radikas la ronda rubekolo. Vi nur ia ĉirkaŭiri en ciklo. 

Nun, vi devas esti inteligenta pri ĝi. Vi devus ne blinde sendi la uzanton servilo numero unu se kio estas la kazo? Se ĝi estas ĉe maks kapablon, aŭ ĝi estas nur ne plu reagas. Do ideale volas iun ia sugestoj buklo. Alie, vi simple sendu ĉiuj de viaj uzantoj sakstrato. Sed kiu povas esti konsiderata ankaŭ. 

Do ne sub estimi la valoron de nur hazardo, kiu estas tre ofte solvon por tiuj specoj de problemoj. Kaj ni noti ronda rubekolo. Do kiel iuj kompanioj apliki cirkla subskribolisto aŭ hazardo aŭ iu el tiuj decidoj? Nu bedaŭrinde, ili fari aĵojn kiel ĉi. Lasu min eltiri supren alian rapidan ekranfoton. 

Fakte, ni faru du. Mi ne scias kial ni estas atingi ĉiujn tiujn pladojn. Tio estas tre stranga. Bone, kion mi vere volas estas ekrankopio. Ke estas stranga. Bone, do mi povas parodio ĉi. Mi ne scias kiom multe pli Mi deziras teni movo. 

Tiel tre ofte, vi trovos vin mem je adreson kiel www.2.acme.com, eble www.3 aŭ 4 aŭ 5. Kaj atentu pri tio. Vi ne vidas, ke ofte. Sed kiam vi faras, ĝi ia inklinas esti pli grandaj, pli malnovaj, stodgier kompanioj ke teknologie ne vere ŝajnas scii kion ili faras. Kaj vi vidos tion en tech kompanioj kelkfoje, la pli aĝaj. 

Do kion ili faras? Kiel ili efektivigado ŝarĝo balancadon, ĉu ŝajnas? Se vi trovas vin mem kiel la uzanto tajpadon www.something.com, kaj subite vi estas en www.2.something.com, kio havas sian ŝarĝon balancer probable faris? Spektantaro: [inaudible] 

DAVID Malan: Jes, do la ŝarĝo balancer estas supozeble preni decidon bazita sur unu el tiuj decidado processes-- ne vere gravas kiu. Sed multe kiel mi desegnis la nombroj sur la tabulo tie, la serviloj ne nur nomata 1, 2, kaj 3. Ili verŝajne nomita www1, www2, www3. Kaj ĝi rezultas ke ene de HTTP peto estas ĉi trajto. Kaj mi tuj simuli tion kiel sekvas. 

Mi tuj malfermu tiun saman desarrollador reto langeto kiel antaŭe nur tial ni povas vidi kio okazas sur sub la kapuĉo. Mi tuj liberigi la ekrano. Kaj mi tuj iros al, ni diru, http://harvard.edu. Nun por kiaj negoco kialoj, Harvard decidis, kiel multaj, multaj aliaj retejoj, normigi lia afiŝinto sur www.harvard.edu por kaj teknika kaj marketing kialoj. Ĝi estas nur speco de en uzateco havi la www. 

Tiel la servilo ĉe Harvard havas iel ridirektanta la uzanto, kiel mi parolas tiele el unu URL al alia. Kiel tio funkcias? Nu, lasu min antaŭeniri kaj batis Eniru. Kaj rimarki la URL ja rapide ŝanĝis al www.harvard.edu. Lasu min rulumi reen en tiun historio kaj alklaku ĉi debug diagnozaj informoj, se vi volas. Lasu min rigardi mian peton. 

Do jen la peto mi faris. Kaj rimarki ĝi estas konsekvenca kun la speco de peti mi faris de Facebook antaŭe. Sed rimarki la respondon. Kio estas malsama en la respondo cxi tiun tempon? 

Spektantaro: [inaudible] 

DAVID Malan: Jes, do ĝi ne estas 200 OK. Ĝi ne estas 404 Not Found. Estas 301 Moved Konstante, kiu estas speco de stranga maniero diri: Harvard estis upped kaj moviĝis aliloke por www.harvard.edu. La 301 signifas ke tio estas alidirektilo. Kaj al kie devus la uzanton ŝajne nomumata? Ekzistas plia sojfabo informo ene ol koverton. Kaj ĉiu el tiuj linioj volas nun komenci nomante HTTP header. Kaplinio estas nur ŝlosila valoro pair-- ion dupunkto ion. Ĝi estas peco de informo. Kie devus la nova loko ŝajne esti? Rimarki la lasta linio inter ĉiuj tiuj titolaj. 

Spektantaro: [inaudible] 

DAVID Malan: Jes, do ekzistas Kromaj Informoj. La unua linio kiu mi reliefigis Diras 301 Moved Konstante. Nu, kie estas lin proponita? La lasta line-- kaj ili ne esti en tiu ordo. Ĝi povas esti hazarda. Situo dupunkto signifas, hej retumilo, iru al tiu URL anstataŭe. 

Do foliumiloj kompreni HTTP alidirektilojn. Kaj tio estas tre, tre komuna maniero de resaltiganta la uzanto de unu loko al alia. Ekzemple, se vi iam provis viziti retejon kiu vi ne ensalutinta en, Vi povus subite trovi mem ĉe nova URL entute esti instigis por ensaluti. 

Kiel tio funkcias? La servilo estas probable sendante 301. Ekzistas ankaŭ aliaj nombroj, kiel 302, iom malsama en senco, ke sendas vin al alia URL. Kaj tiam la servilo, iam vi ensalutis, resendos vin al kie vi fakte intencis. 

Do kio do estas nebone realigita retejoj faras? Kiam vi vizitos www.acme.com kaj ili simple hazarde nomis iliajn servilojn www1, www2, www3, ks, Ili estas tre simply-- kio estas bela, sed tre ia foolishly-- redireccionando vin al ĝi fakte malsame nomita servilo. Kaj ĝi funkcias perfekte bone. Ĝi estas bela kaj facila. 

Ni vidis kiel estus farita sub la kapuĉo en la virtuala koverton. Sed kial estas tiu argumenteble a malbona inĝenieristiko decido? Kaj kial mi ian kompateme kun tiu aparta inĝenierio alproksimigi? Argumenti kial tio estas malbona. Ben? Spektantaro: [inaudible] DAVID Malan: Ĉiu servilo devus havas duplikatajn kopion de la retejo. Mi bone kun tio. Kaj fakte, tio estas kion mi supozante por tiu tuta rakonto, ĉar se ni wanted-- bone fakte, krom Dan antaŭaj sugesto, kie se vi havas malsamajn serviloj faras malsamajn aferojn, do eble ili povus vere esti funkcie faras malsamajn aferojn. 

Sed eĉ tiam, je iu punkto, via datumbazo tuj akiri superŝarĝita. Via statika aktivoj servilo tuj akiri superŝarĝita. Do je iu punkto, ni estas reen ĉe tiu rakonto, kie ni bezonas plurajn kopiojn de la sama afero. Do mi estas OK kun tio. Spektantaro: [inaudible] 

DAVID Malan: Bone, do kelkaj paĝoj povus esti misproporcie populara. Kaj tiel fiksi sur unu adresaton ne nepre la plej bona afero. [Inaudible]? 

Spektantaro: [inaudible] 

DAVID Malan: Kion vi aludas per tio? Spektantaro: [inaudible] 

DAVID Malan: Jes, ĝuste. Tial vi ne volas nepre have-- vi certe ne volas havi viajn uzantojn permane tajpi en www1 aŭ www2. El Finomanta perspektivo, ĝi nur aspektas iom ridinda. Se vi volas nur speco de pura, eleganta sperto, havi tiujn speco de hazardo numeritaj URLoj vere malbona. Ĉar tiam la uzantoj estas certe tuj kopii kaj almeti ilin en retpoŝtoj aŭ momenteto mesaĝojn. 

Nun ili estas disvastiganta. Nun vi ia konfuzante via malpli teknika spektantaro, kiu pensas Via retadreso estas www2.something.com. Ekzistas neniu deviganta semantiko al tio. Ĝi nur okazas esti subkuŝanta teknika detalo kiu vi havas numeritaj vian serviloj tiamaniere. 

Kaj pli malbona ankoraŭ, kio se, ekzemple, eble ĉirkaŭ Kristnasko kiam negoco estas vere apogeo, vi havas www1 tra www99, sed en januaro kaj februaro kaj pluen, vi malŝalti duono de tiuj tial vi nur devas www1 tra www50? Kio estas la implikaĵon nun por ke tre racia komerca decido? Spektantaro: [inaudible] DAVID Malan: Vi devas administri ĉiujn tiujn ankoraŭ. Spektantaro: [inaudible] DAVID Malan: Ĝuste. Tio estas speco de la kaptaĵo tie. Se via klientoj estas en la kutimon de bookmarking aferoj, retpoŝtiganta ilin, ŝparante la URL ie, aŭ se ĝi estas nur en sia auto kompletigi en sia retumilo tiel ili estas Ne vere intence tajpas ĝin, ĝi estas ĵus okazas, oni povus, dum 11 monatoj de la jaro efektive, atingi sakstrato. Kaj nur la plej ruzaj de uzantoj tuj realigos, Eble mi devus permane forigi tiun numeron. Mi volas diri, ĝi estas simple ne tuj okazos kun multaj uzantoj, tiel malbona por komerco, malbona efektivigo inĝenierio saĝa. 

Do dankeme, ne eĉ necesa. Ĝi rezultas ke kio ŝarĝo balancers povas fari Estas anstataŭ diri, kiam A faras request-- hej A, iras al 1. Alivorte, anstataŭ de sendado ke alidirektilo tia ke paŝo en tiu procezo estas la iri tie, Li tiam sciigis iri aliloke. Kaj tiel paŝi tri estas, li iras aliloke. 

Vi povas anstataŭe daŭre itinero, al plu uzi tiun terminon, ĉiuj -a datumoj tra la ŝarĝo balancer por ke li Neniam kontaktoj 1, 2, aŭ 3 rekte. Ĉiuj de la trafiko ne get "deturnita" per la ŝarĝo balancer mem. Kaj do nun ni estas speco de intence neklara la linioj inter tiuj diversaj aparatoj. A ŝarĝo balancer povas itinero datumoj. Estas nur funkcio kiu havas. 

Tiel ŝarĝon balancer Ankaŭ ĝi estas peco de programaro, vere. Kaj router estas peco de programaro. Kaj vi povas absolute du pecoj de programaro interne de fizika komputilo tiel ŝarĝon balancer povas fari tiujn multoblajn aferojn. 

Do ekzistas unu alia maniero fari tion, kio reale superas al ia komencaj elementoj de DNS, kiu parolis pri antaŭ paŭzo. DNS estis Domain Name System. Memoru ke vi povas petu DNS servilon, kio estas la IP-adreso de google.com, facebook.com? 

Kaj ni povas efektive fari ĉi. Ilo ni ne uzis pli frue estas kiu estas egale alirebla, nomita nslookup, por nomo servilo lookup. Kaj mi simple tuj tajpi facebook.com. Kaj mi vidas ke Facebook IP Adreso ŝajne ĉi. Lasu min antaŭeniri kaj kopio ke iri al retumilo, kaj iru al http: // kaj tiu IP kaj batis Eniru. Kaj, efektive, ŝajnas funkcii. 

Nun laboranta malantaŭen, kio estis ene de la virtuala koverto ke Facebook respondis kun kiam Mi vizitis tiun IP-adreso rekte? Ĉar avizo, kie mi estas nun? Kie mi nun, la adreso? 

Spektantaro: [inaudible] 

DAVID Malan: Je la sekura versio, kaj ĉe la www.facebook.com. Do ĝi ne estas eĉ nur la sekura IP. Facebook prenis sur sin diri, tiu estas ridinda. Ni ne tuj tenos vin je tiu malbela rigardante URL jen nombra. Ni tuj sendos vin HTTP redirect tra tiu sama kaplinio ke ni vidis before-- loko dupunkto ion. 

Kaj tiel ĉi simple signifas ke sub la kapuĉo estas ankoraŭ ĉi IP adreso. Ĉiu komputilo en la Interreto havas IP, ĝi similus. Sed vi ne nepre havas elmontri ke al la uzanto. Kaj multo kiel reen en la tago, Estis 1-800-kolekti, 1-800-C-ho-L-L-E-C-T, en Usono, estis maniero de fari kolekti nomas per tre facile memorinda telefono nombro, aŭ 1-800-matraco aĉeti liton, kaj similaj mnemonikoj ke vi eĉ vidi telefone ia speco de ankoraŭ, ke literoj mapi al nombroj. 

Nun, kial do? Nu, estas multe pli facile enmemorigi 1-800-matraco aŭ 1-800-COLLECT anstataŭe de 1-800 ion ion ion ion ion ion ion, kie ĉiu de tiuj estas cifero. Simile, la mondo lernis rapide, ke ni ne havi homojn enmemorigi IP adresoj. Tio estus stulta. Ni tuj uzi nomojn anstataŭe. Kaj tial DNS naskiĝis. 

Bone, do kun tiu diris, en terminoj de ŝarĝo balancadon, ni provu yahoo.com. Nu, tio estas interesa. Yahoo ŝajnas esti revenanta tri IPs. Do konkludi el tio, Se vi povus, kio estas alia vojo ke ni povus apliki tiu nocio de ŝarĝo balancadon eble eĉ sen uzi fizika aparato, tiu nova fizika aparato? 

Alivorte, mi povas forpreni la financado vi havas pro la ŝarĝo balancer kaj diri vin uzi iun ekzistantan peco de aparataro implementar tiu nocio de ŝarĝo balancadon? Kaj ruiniganto estas, jes, sed kion, aŭ kiel? Kio estas Yahoo! eble faras ĉi tie? Kareem? OK, Chris? Spektantaro: [inaudible] DAVID Malan: Jes, ĉiuj tri el tiuj verkoj. Do hazardo, cirkla subskribolisto, location-- vi povas simple utiligi ekzistantan pecon de la puzlo ke ni parolis pri pli frua de la DNS sistemo kaj simple diri, kiam la unuaj uzanto de la tago petas yahoo.com, doni al ili la unua IP, kiel la finanta en 45 supre. Kaj la proksima fojo uzanto petojn la IP-adreso de yahoo.com ie en la mondo, doni al ili la duan IP, tiam la tria IP, tiam la unua IP, tiam la dua. Aŭ esti inteligenta pri ĝi kaj fari gxin grafike. Aŭ ĉu ĝi hazarde kaj ne nur fari ĝi ronda rubekolo tiamaniere. 

Kaj en tiu kazo, tiam ni eĉ ne bezonas enkonduki tiun nigran skatolo en nia bildo. Ni ne bezonas novan aparaton. Ni simple dirante komputiloj iri al la serviloj rekte, efektive, sed ne tra ilia nomo. Ili neniam bezonas scii la nomon. Ili estas nur esti rakontita ke yahoo.com mapoj por iu el tiuj IP-adresoj. 

Tial ĝi sendas la ĝustan saman peton. Sed ekster la koverton, ĝi simple metas la IP kiu estis informita de. Kaj tiamaniere ankaŭ povis Ni ŝarĝi ekvilibrigi la petoj per simple sendanta la koverton al malsamaj unu de Yahoo mem serviloj? 

Kaj se ni plenumas fosado, ni vidos probable aliaj firmaoj kun pli. CNN du publike elmontrita. Kvankam fakte se ni faros ĉi denove kaj again-- cnn.com-- vi povas vidi ili estas ŝanĝanta ordo, fakte. Do kio mekanismo estas CNNa uzante, ŝajne? 

Spektantaro: Random. DAVID Malan: Bone, ĝi povus esti hazardo, kvankam ĝi Ŝajnas esti bicikla reen. Do ĝi estas probable ronda rubekolo kie ili estas nur ŝanĝante la ordon tiel ke mi supozeble prenas la unua. Mia komputilo prenos la unuaj ĉiufoje. Do jen ŝarĝo balancadon. Kaj kiu nin permesas, fine, mapi datumojn, aŭ mapo petoj, trans multoblaj serviloj. Do kio tipoj de problemoj nun ankoraŭ ekzistas? Sentas nin nur vere solvita bona problemo. Ni alvenis uzantoj malsamaj serviloj. Sed- ho, kaj Chris, faris vi havas demandon antaŭe? 

Spektantaro: [inaudible] 

DAVID Malan: Tute dependas. Do kio okazas ĉi tie? Kaj oni povas fakte vidi tion. Do ni provu Yahoo. Fakte, ni iru al Facebook. Ĉar ni scias ke ĝi laboras. Do mi tuj kopii ke IP denove. Mi tuj fermos ĉiuj tiuj langetoj. Mi tuj iros malfermita ke speciala reto langeto tie. Kaj mi tuj vizitos nur http: //. Kaj nun mi tuj batis Enter. Kaj ni vidu kio okazis. 

Se mi rigardas ke peto, avizo ke my-- Facebook estas malbona ekzemplo. Ĉar ili havas súper eleganta tekniko kiu kaŝas tiun detalon de ni. Lasu min uzi Yahoo instead-- http: // ke IP. Ni malfermu niajn reto klapeto, konservi ŝtipo. Kaj tie ni iras, Enter. Tio estas amuza. Bone, do jen la fama 404 mesaĝo. Kio amuzas tie estas ke verŝajne neniam revenos. Ĉar ne estas verŝajne Ne io malĝusta en si mem. Ili havas nur intence decidis ne apogi la nombra formo de ilia adreso. 

Do kion ni vere vidas en la Reto langeto, se mi tiri ĉi tie, estas, kiel mi diras, la fama 404, kie se mi rigardas la respondo titolaj, jen kion mi ricevis here-- 404 Not Found. Do ni provu unu alia. Ni vidu se CNN kunlaboras kun ni. Mi ekpreni unu el CNN IP adresoj, malbari tion, http, Dah, Dah, Dah, Dah. Do responde al Chris demando, ke oni laboris. 

Kaj ni iru al respondo titolaj. Fakte ne, bone, mi luktanta trovi funkciantan ekzemplo. Do CNN decidis, ni simple forlasi vin ĉe kio ajn adreson vi efektive vizitas, Finomanta temoj flanken. Sed kio ne estus okazanta se ni povis vidi ŝin en Facebook kazo, Estas ni akirus kun 301 Moved Konstante, plej verŝajne, ene de kiu estas loko: https: //www.facebook.com. Kaj prognozoj estas www.facebook.com estas alias por la ĝusta sama servilo ni ĵus iris al. 

Do ĝi estas iom kontraŭproduktivaj. Ni laŭvorte vizitante la servilo. La servilo tiam diranta nin, foriru. Iru al tiu alia adreso. Sed nur tiel hazarde estas revenanta al tiu sama servilo. Sed supozeble ni nun resti sur tiu servilo sen ĉi tien kaj reen. Ĉar nun ni uzas la nomon versio de la paĝaro, ne la nombra. Bona demando. 

OK, do se ni nun assume-- ni solvis ŝarĝo balancadon. Ni nun havas mekanismon, ĉu ĝi estas tra DNS, ĉu ĝi estas tra ĉi nigra skatolo, ĉu ĝi uzas iun el tiuj teknikoj. Ni povas preni uzanto peto en kaj diveni al kio servilo, 1, 2, aŭ 3, sendi lin aŭ ŝin. 

Kio startas rompi pri nia retejo? Alivorte, ni havas konstruita negoco kiu estis antaŭe sur unu sola servilo. Nun ke negoco kuras trans multoblaj serviloj. Specojn de antaŭsupozoj, specojn de dezajno decidoj, povus nun esti rompanta? 

Tio estas malpli evidenta. Sed ni vidu se ni ne povas meti nian Fingro sur iuj de la problemo ni havas kreita por ni mem. Denove, ĝi estas speco de kiel tenanta malsupren la liko en la hoso. Nun iuj novaj temo kiu pusxis supren super tie. 

Spektantaro: [inaudible] DAVID Malan: Bone, do ni devas teni kreskanta nia malmola disko spaco. Mi bone kun tiu nun. Ĉar mi kredas ke mi povas horizontale skalo. Kiel se mi kurante malalta, mi nur ricevas kvara servilo, eble kvina servilo, kaj tiam pliigas nian kapablon per alia 30% aŭ 50% aŭ whatnot. Do mi estas OK kun tiu, almenaŭ nuntempe. Spektantaro: [inaudible] DAVID Malan: Bone, do tio estas bona punkto. Do supozu la serviloj ne estas identaj. Kaj klienta servo aŭ la retpoŝta ekvivalento estas akiranta iun mesaĝon de uzanto dirante: ĉi ne funkcias ĝuste. Ĝi estas tre ebla, kelkfoje, ke eble unu aŭ pli serviloj agas iom ekster ordo, sed ne la aliaj, kiuj povas certe fari ĝin pli malfacila por postkuri malsupren la temo. Vi eble devas rigardi multoblaj lokoj. 

Ke estas demonstracio de alispeca besteto, kio estas ke vi probable devus desegnis viajn infrastrukturon tiel ke ĉio estas vere identaj. Sed ĝi malkaŝas novan problemon ke ni ne havis antaŭe. Kion alian? Spektantaro: [inaudible] 

DAVID Malan: Jes, ekzistas pli komplekseco. Ekzistas fizike pli dratoj. Ekzistas alia aparato. Fakte, mi enkondukis fundamentan koncepto kaj fundamenta problemo ĉi tie konata kiel ununura punkto de malsukceso, kiu, eĉ se vi neniam aŭdis la frazo, vi povas verŝajne nun labori malantaŭen kaj scii ĝin. Kio signifas ke mi havas solan punkto de fiasko en mia arkitekturo? Kaj de arkitekturo, mi ĵus signifi la topologio de ĝi. 

Spektantaro: [inaudible] 

DAVID Malan: Jes, kio se la ŝarĝo balancer iras malsupren? Mi insertita ĉi meza viro kies celo en la vivo estas por solvi problemon. Sed mi enkondukis novan problemon. Nova liko devenis en la hoso. Ĉar nun se la ŝarĝo balancer mortas aŭ paŭzoj aŭ misfunctions, nun mi perdos aliron al ĉiuj tri el miaj serviloj. Kaj antaŭe, mi ne havas tiun intermediario. Kaj tiel tiu estas nova problemo, eble. Ni revenos al kiel ni povus ripari tion. 

Spektantaro: [inaudible] DAVID Malan: Tio estus unu alproksimiĝo. Yeah, kaj tial ĉi tiu tuj estos tute la rato la truo ni komencas iri malsupren. Sed ni revenu al ke en nur momento. Kion aliaj problemoj ni kreis? 

Tiel Dan menciita datumbazo antaŭe. Kaj eĉ se vi ne estas tro familiara teknike, datumbazo estas nur servilo kie ŝanĝi datumoj estas tipe stokitaj, eble ordon iu metis, via profilo de uzanto, via nomo, vian retadreson, aĵoj kiuj eble esti inputted aŭ ŝanĝis super tempo. 

Antaŭe, mia datumbazo estis la sama servilo kiel mia retservilo. Ĉar mi nur havis unu ttt retprovizanton konton. Ĉio estis ĉio en la sama loko. Kie mi metis mian datumbazo nun, sur servilo 1, 2, aŭ 3? 

Spektantaro: 4. 

DAVID Malan: 4, OK, ĉiuj Bone, do ni iros tien. Do mi tuj metis miajn database-- kaj ni komenci etiquetado tiuj www, www, www. Kaj mi tuj diros, tio estas numero kvar. Kaj mi diros db por datumbazo. Okej, mi ŝatas tion. Kion linio do mi supozeble esti desegnante tie? 

Spektantaro: [inaudible] 

DAVID Malan: Jes, do la kodon, kiel ni diskutos morgaŭ, supozeble estas la samaj sur ĉiuj tri serviloj. Sed nun bezonas konekti ne al datumbazo kurante loke sed aliloke. Kaj tio estas bone. Ni povas simple doni la datumbazo de nomi, kiel ni, aŭ nombro. Kaj ke ĉiuj funkcias bone. Kion ni faris? Ni horizontale grimpis havante tri serviloj anstataŭ unu, kiu estas bona. Ĉar nun ni povas manipuli trioble da ŝarĝo. 

Kaj pli bona ankoraŭ, se unu aŭ du el tiuj serviloj iras malsupren, mia negoco povas daŭrigi funkcii. Ĉar mi ankoraŭ havas unu, eĉ se mi ia lamis kune agado-saĝa. Sed jen nova problemo mi enkondukita per movado de la datumbazo al tiu aparta servilo anstataŭ la 1, 2 kaj 3? 

Spektantaro: [inaudible] DAVID Malan: Jes, do nun mi havas alia ununura punkto de fiasko. Se mia datumbazo mortas, aŭ bezonu esti altgradigita, aŭ kio ajn, nun certa, mia retejo estas ensalutintaj. Kaj mi povas servi statika, senŝanĝa enhavo. Sed mi ne povas lasi uzantoj ensaluti aŭ ŝanĝo ion aŭ por io pli malbona ankoraŭ. Ĉar se 4 estas offline, tiam 1, 2, kaj 3 vere ne povas paroli al ĝi laŭ difino. 

OK tiel yeah, kaj tiel tio estas kial Mi hezitis tiri tiun. Do ni revenu al tio. Mi ne intencas teni puŝas vin. Sed la bildo estas tre rapide iranta akiri turmenta. Ĉar vi devas komenci havante du de ĉiu. Fakte, se vi iam vidis la filmo Kontakto kelkaj jaroj kun Jodie Foster-- ne? 

Bone, do por ambaŭ ni kiuj vidis Kontakto, ekzistas rilato tie kie esence aĉetis du el io anstataŭ unu, Albeit ĉe dufoje la prezo. Tiel okazis ia ludema komenti en la filmo. Ĝi estas ia rilata al tiu. Ni povus absolute fari tion. Kaj vi havas nur kosto ni duoble da mono. Sed ni revenos al tio. 

Do ni solvis tiun. Do vi scias kion? Jen kiel glitiga deklivo. Mi ne volas trakti kun havanta havi duplikatajn datumbazo. Estas tro multe da mono. Vi scias kion? Mi volas havi miajn datumbazo ĝuste kiel en versio unu kie ĉiu servilo havas lia propra loka datumbazo. Do mi simple tuj desegni db sur ĉiu de ĉi tiuj. 

Do nun ĉiu retservilo estas identa tiom kiel ĝi havas la saman kodon, la sama statika aktivoj, samaj bildoj kaj teksto kaj tiel plu. Kaj ĉiu havas sian propran datumaron. Mi riparis la sola punkto de malsukceso problemo. Nun mi havas datumbazon. Negrave kiu du aŭ unu el tiuj aferojn morti, ĉiam unu maldekstre. Sed jen nova problemo mi kreis ke Donas solvo evitis? 

Spektantaro: [inaudible] 

DAVID Malan: Yeah, Mi devi sinkronigi ilin, ĉu ne? Ĉar ĉu mi devas sinkronigi kiu okazas where-- alivorte, se Alice vizitas mian ejo, Kaj okazis akiri hazarde aŭ rondaj robined aŭ kion ajn, por servilo numero unu, poste mi devas ĉiam sendu ŝin al servilo 1. Kial? Ĉar se mi forsendos sian al servilo 2, ĝi tuj simili ne ekzistas tie. 

Mi ne havos sian ordon historio. Mi ne tuj havos lian profilon tie. Kaj ke nur sentas ĝi invitas problemojn. Kaj kiam Bob vizitas, mi devas sendi lin ĉiam al la sama servilo, 2, aŭ whichever unu, kaj Charlie al tria, kaj konsekvence. Tio ne senkaŭza, tamen. Tio nomiĝas dispartiganta via datumbazo. Kaj fakte tio estis kio Facebook faris frue. 

Se vi sekvis la historion de Facebook, ĝi komencis tie ĉe kampuso kiel www.thefacebook.com. Tiam evoluis iam Mark komenciĝis disvastigado en aliaj kampusoj esti harvard.thefacebook.com kaj mit.thefacebook.com kaj probable bu.thefacebook.com, kaj similaj. Kaj tio estis ĉar frue, mi ne kredas Vi povus havi amikojn trans kampusoj. Sed tio estas bone. Ĉar ĉiu de Harvard got sendis al tiu servilo. Iu el BU got sendis al tiu servilo. Iu el MIT got sendis al ĉi server-- teorie. Mi ne tute scias ĉiuj subesta efektivigo detaloj. Sed supozeble dispartigita popolo ilia kampuso, kie ilia reto estis. 

Do tio estas bona ĝis la punkto kie vi bezonas du serviloj por Harvard, aŭ tri servilojn por Harvard. Kaj do simpleco ia rompiĝas. Sed tio estas racia alproksimiĝo. Ni ĉiam sendas Alico al la sama loko, Ĉiam sendu Bob al la sama loko. Sed kio okazas se Alicio servilo iras elRetan? Bob kaj Charlie daŭre povas aĉeti aferoj kaj ensaluti en la retejo. Sed Alico ne povas. Do vi perdis trionon de via uzanto bazo. Eble pli ol 100%? Sed eble ĝi estus bela se ni povus ankoraŭ apogas 100% de niaj uzantoj eĉ kiam triono de nia serviloj iras elRetan. 

Do ni povus sinkronigi kio? Ne la uzantoj, per, sed la datumbazo tra ĉiuj tiuj serviloj. Do nun ni ia bezonas speco de interconexión tie por ke la serviloj mem povas sync-- ne senkaŭza. Kaj fakte, ĉi tiu teknologio ekzistas. En la mondo de datumbazoj, ekzistas la nocio de majstro-sklavo datumbazoj, aŭ primaraj-malĉefa, kie inter la karakterizaĵoj ne nur por stoki datumojn kaj respondi kun datumoj, sed ankaŭ nur konstante sinkronigi kun unu la alian. Do iam vi skribas aŭ savi ion por tiu datenbazo, ĝi tuj iĝas "reproduktita" al la aliaj datumbazoj tiel. 

Kaj ajna tempo vi legis el gxi, ne gravas kie vi estas. Ĉar se en teorio ili jam ĉiuj synced, vi estas ricevos la saman vidon de la datumoj. Do ĉi sonas perfekta. Tie estas alvenis al esti catch. Kio povus la kaptaĵo estas? 

Spektantaro: [inaudible] 

DAVID Malan: Jes, do trioble tiel aĵoj povus iri malĝuste. Tio estas realaĵo. Ĝi povus tute samaj en spirito. Sed iu bezonas agordi tiujn. Ekzistas pli alta probablo ke io tuj iri malbone. Nur combinatorially vi havas pli aĵoj inklina al eraroj. Kio alia estas malbona potenciale? Spektantaro: [inaudible] 

DAVID Malan: Jes, do syncing povas esti malbona. Kiel vi povus scii de sekurkopioj kaj tia, se vi nur estas blinde farante kopioj, se io faras erari ĉe unu datumbazon? Vi forigas ion vi devus. Vi tuj multoblighas ke problemo ĉie alie. Tiel Viktorio estis talking-- sekurkopioj estus bona afero ĉi tie. Kaj do ni reiros al tiu. Kaj esti klara, ni parolas Ne pri kopioj tie por se. Ni parolas pri veraj replicación aŭ sincronización tra serviloj. Ili ĉiuj vivas. Ili ne intencis uzita por sekurkopioj. 

Spektantaro: [inaudible] DAVID Malan: Kio estas tio? Spektantaro: Higher-- DAVID Malan: Higher kosto. Ni triobligis la koston por certa, kvankam almenaŭ en terminoj de la aparataro. Ĉar datumbazo estas nur peco de programaro. Kaj servanto retejo estas peco de programaro. Ĝi estas probable libera se ni uzas ajna nombro de malferma fonto aferoj. Sed se ni uzas io kiel Oracle, ni pagas Orakolo pli mono po licencoj, aŭ Microsoft por aliro. Tie estas alvenis al esti iuj aliaj catch tie. Ĝi ne povas esti tiu simpla. 

Tial al via punkto, mi kredas ke estis Kareem, por geografio earlier-- aŭ ne, Romano, estis, por geography-- supozu ke ni estas inteligentaj pri tio, kaj ni metante unu el niaj serviloj, kaj en turnas niaj datumbazoj, en Usono, kaj alia en Eŭropo, alia en Sudameriko, alia en Afriko, alia en Azio, ie ni eble volas ĉirkaŭ la mondo. Ni jam scias el nia spuro itineroj kiuj punkto A kaj punkto B, se ili estas tiom apartaj, tuj prenos pli tempo. 

Kaj se iu el vi uzis iloj, kiel Facebook aŭ Twitter aŭ iu el tiuj lokoj tiujn tempojn konstante ŝanĝanta pro uzanto kreitaj datumoj, kelkfoje se vi batis Reŝarĝi aŭ malfermi la sama paĝo en alia retumilo, vi vidos malsamaj versioj, preskaŭ. Vi eble vidos ies statuson ĝisdatigi tie sed ne ĉi tie, kaj tiam vi povos reŝargi, kaj tiam aperas, kaj vi freŝigi denove, kaj ĝi malaperas. Alivorte, teni okulon ekstere por tiu, almenaŭ se vi uzas sociajn interkonektanta speciale. 

Denove, nur ĉar la datumoj ŝanĝas tiel rapide, kelkfoje serviloj akiri el sync. Kaj eble estas super malgranda fenestro. Sed 200 milisegundos, eble eĉ pli ol that-- estas tuj prenos iu ne-nula kvanto de tempo por tiuj datumbazoj por sinkronigi. Kaj ni ne nur parolante pri unu peton. Se entrepreno havas milojn da uzantoj uzante gxin samtempe, ili povus buffer. Alivorte, ekzistas eble esti vosto aŭ atendo linio antaŭ ĉiuj tiuj datumbazoj mendoj povas akiri sinkronigita. Do eble ĝi estas fakte kelkajn sekundojn. 

Kaj ĝuste ĉi tiu estas vera mi pensas eĉ al tiu tago kun Facebook, en kiu kiam sinkronigi de Orienta Marbordo de Okcidenta Marbordo, ĝi havas ne-bagatela propagado prokrasto, por tiel diri, ke vi nur speco de devi toleri. Kaj tiel ĝi estas ne tiom cimon kiel estas realaĵo ke viaj uzantoj povu vidi la ĝusta datumo por almenaŭ kelkaj sekundoj. 

Mi vidas tion en Twitter multe reale kie mi instruos vin tweet en unu fenestro, malfermas alian al tiam vidu konfirmi ke ĝi ja iris kaj ĝi ne ekzistas ankoraŭ. Kaj mi devas ia reŝarĝi, reŝarĝi, reload-- ho, tie ĝi estas. Kaj tio ne ĉar ĝi ne savis. Simple ne propagis al aliaj serviloj. 

Do ĉi komerco-off, ankaŭ kontraŭ vi vere volas elmeti vin al la risko ke se la uzanto iras al sia regularo historio, ne reale ekzistas ankoraux? Mi vidas tion en certaj bankoj. Ĝi ĉiam ĝenas min kiam, nu, por unu, vi povas nur iri kiel ses monatoj malantaŭen en via banko deklaroj en iuj bankoj, kvankam teorie ili devus povi havi ĉiu linio. Ili nur preni aĵojn offline foje. Kelkfoje, ankaŭ kontraŭ kion retejo estas? Ekzistas one-- ho, estas GoDaddy, mi pensas. GoDaddy, kiam vi kontrolu aĉeti domajna nomo aŭ io, ili devos ofte al vi ligilo al via kvitanco. Kaj se vi klakas ligantaj dekstra for, ĝi ofte ne funkcias. Ĝi nur diras, sen eliro, nenio tie. 

Kaj tio estas tro pro tiuj disvastigo prokrastoj. Ĉar por iu kialo, ili prenas iom de tempo reale generi tion. Do tiu estas speco de kiel vi volas tiri vian hararon eksteren ĉe iu punkto. Ĉar ĉiuj vi provas fari estas solvi simplan problemon. Kaj ni plenumas krei novajn problemojn por ni. Do ni vidu se ni povas ia malfari tion. 

Ĝi rezultas ke kombinante datumbazoj sur ĉiuj viaj retserviloj ne vere bona praktiko. Ĝenerale, kion inĝeniero farus, aŭ sistemoj arkitekto, estus havi malsamajn ŝtupoj de serviloj. Kaj ĝuste por spaco, kalkaj, mi instruos vin desegni ilian datumbazon tien. 

Ni havu datumbazo kaj servilo numeron kvar tien kiu faras havi rilatojn al ĉiu el tiuj serviloj tie. Do tio ĉi povus esti nia front fini parto, kiel homoj dirus. Kaj tio estus nia dorso fino parto. Kaj tio nur signifas ke tiuj alfronti la uzanto. Kaj la datumbazoj ne alfrontas la uzanton. Neniu uzanto povas rekte aliri la datumbazon. 

Do ni nun eble ne subiru la vojo Viktorio proponita. Tio estas ununura punkto de fiasko. Kiu faras min malkomforta. Do kio estas eble la plej evidenta solvo? Spektantaro: [inaudible] DAVID Malan: Pardonu, diru tion denove. Spektantaro: [inaudible] DAVID Malan: Ne-produktado servilo. Kion vi celas? 

Spektantaro: [inaudible] 

DAVID Malan: Ha, bone, do kopioj. Bone, do ni povus fari tion, certe. Kaj fakte ĉi tiu estas tre komune farita. Tio povas esti datumbazo numero kvin. Sed tio estas nur konektitaj numero kvar. Kaj vi eble nomu lin varma libera. Tiuj du datumbazoj povus esti agordita nur konstante sinkronigi unu la alian. Kaj do se tiu maŝino mortas, cxar ajn stulta reason-- la malmola disko mortas, iu stumblas la ŝnureto, iu programaro estas misa kaj la maŝino pendas aŭ crashes-- Vi povus havi homan laŭvorte malŝalti tiun unu el la muro kaj anstataŭe plug ĉi tiu en. Kaj tiam ene, ni diru, pli kelkaj minutoj, eble duonhoro, vi estas reen enreta. 

Ĝi estas ne granda, sed ĝi estas ankaŭ ne terure. Kaj vi ne devas maltrankviligi pri ajna sincronización temoj. Ĉar ĉio estas jam tie. Ĉar vi havis perfektan rezerva preta iri. 

Vi povus esti iom amatoro pri tio, kiel kelkaj personoj ofte faras, kie vi havu datumbazo numeron kvar tien, datumbazo numeron kvin tie, ke parolas unu al la alia. Sed vi ankaŭ havas tiun ia arrangement-- kaj intence aspektas senorda, ĉar is-- kie ĉiuj antaŭa fino serviloj povas paroli al ĉiuj el la malantauxo serviloj. Kaj do se tiu datumbazo ne respondi, tiuj interfacon serviloj havas havi programado kodo en ili kiu diras, se vi ne ricevas ligo al tiu datenbazo, la primara tuj startas parolante al la malĉefaj. 

Sed tiu nun pelas la kompleksecon al la kodo. Kaj nun viaj programistoj, via programaro programistoj, devas scii pri tio. Kaj vi ia ligante la kodo kiu vi skribas al via reala malantauxo efektivigo detaloj, Kiu faras ĝin pli malfacila, Precipe en pli granda kompanio aŭ pli granda retejo, kie vi ne nepre volas la programadores havas scii la datumbazo inĝenieroj faras iliajn laborpostenojn. Vi eble volas konservi tiujn rolojn ia funkcie malsama tiel ke ekzistas tiu tavolo de abstraktado inter la du. 

Do kiel eble ni ripari tion? Nu, ni ia solvita tiu problemo iam antaŭe. Kial ni ne metu unu el tion tie kie ĝi parolas laŭvice al numero kvar kaj kvin, ĉiuj la antaŭa fino retserviloj paroli al tiu intermediario, kaj la intermediario laŭvice itineroj iliajn datumojn? Fakte, kio povus esti bona nomo por tiu afero? 

Spektantaro: [inaudible] DAVID Malan: Bone, peranto de datumbazoj. Sed kio povus termino esti ke ni povus reuzi por tiu aparato? Ni balanci. Jes, do vere, mi Ne esti justa tie. Tiel ŝarĝon balancer implicus ke ni Inversigante reen tie, kiu bezonas ne vere esti la kazo. Do ekzistas kelkaj manieroj ni povus fari tion. 

Se tiu estas fakte ŝarĝo balancer, la rakonto estas ekzakte la sama kiel antaŭe. Iuj de la petoj iri al 4. Iuj el ili iras al 5. Kaj tio estas bona. Ĉar nun ni povas manipuli duoble traigivo. Sed tiurilate tie estas super grava. Ili devas resti konstante sinkronigita kaj espereble ne geografie tro dise por ke la sincronización estas esence instantánea. Alie ni havas problemon. 

Do tio ne estas malbona. Sed denove, ni havas enkondukis novan problemon. Kio problemo mi simple amuzis? Ununura punkto de fiasko. Do kio estas la solvo por tio? Tiel kiel Venko fond elspezi monon, Ni povas preni tiun ulon eliri kaj fari tion. Kaj mi simple tuj movi tien sufiĉan spacon. Kaj ĝi tuj estos iom senorda. Mi tuj teni desegnante linioj. Supozu ke ĉiuj tiuj linioj iras en ambaŭ? 

Tre ofta tekniko tie estus uzi teknikon nomita korbato per kiu ĉiu de ĉi tiuj aparatoj, maldekstra kaj dekstra ŝarĝo balancers, aŭ kion ajn ni volas nomi ilin, konstante dirante: Mi vivas, Mi vivas, Mi vivas, Mi vivas. Unu el ili defaŭlte agas kiel la primara. Do ĉiuj trafiko estas frapitaj per la unu maldekstre, ekzemple, defaŭlte, arbitre. 

Sed tuj kiam la ulo dekstre ne aŭdas de la maldekstra ulo anymore, la unu dekstre estas planita aŭtomate, ekz transpreni la IP de la unu maldekstre, kaj tial iĝis la primara kaj eble sendu retmesaĝon aŭ teksta mesaĝo al la homoj por diri, hej, maldekstre primaraj estas offline. Mi fariĝis ĉefa por nun. Tiel vicprezidanto iĝas prezidanto, por tiel diri. Kaj iu devas iri savi la prezidanto, se vi volas. Ĉar nun ni havas portempan ununura punkto de fiasko. 

Tiel kiel komplika aŭ streson kiel tio povus ŝajni komenci esti, jen kiel vi solvas ĉi tiujn problemojn. Vi faras ĵeti monon ĉe ĝi. Vi ĵetas aparataro ĝin. Sed bedaŭrinde vi aldoni komplekseco por ĝi. Sed la rezulto, finfine, estas ke Vi havas multe pli, en teorio, fortika arkitekturo. Ĝi estas ankoraŭ ne perfektaj. Ĉar eĉ kiam ni have-- ni eble ne havi solan punkton de fiasko. Ni nun havas duobla punktoj de fiasko. Sed se du aĵoj iras malbone, kiu absolute povis, ni ankoraŭ iranta esti offline. 

Kaj tiel tre komuna en la industrio estas priskribi vian perditan tempon laŭ nines. Kaj varo de la celo aspiri estas 99,999% de la momento de via retejo estas ensalutintaj. Aŭ eĉ pli bone, aldoni kelkaj pli nines al tio. Bedaŭrinde, tiuj nines estas tre multekostaj. Kaj ni vere faru tion ekstere. Do se mi malfermas mia granda kalkulilo denove, 365 tagoj en jaro, 24 horojn tage, 60 minutoj en horo, kaj 60 sekundoj en minuto, jen kiom da sekundoj ekzistas en jaro se mi faris tion korekte. Do se ni fojojn tiu de .99999, jen kiom da tempo ni volas aspiri. Do tio signifas ke ni devus esti supren tiu da sekundoj dum la jaro. Do se mi nun subtrahas la originala valoro, aŭ prefere tiu nova valoro de la first-- 316 sekundoj, kiu kompreneble estas kvin minutoj. 

Do se via retejo aŭ via kompanio estas asertante "kvin nines," per kiu vi estas supren 99.99% de la tempo, ke signifas vin bone estis sufiĉe lertaj kaj rapidaj sufiĉa kaj flush sufiĉas rimedoj ke viaj serviloj estas nur offline kvin minutoj el la jaro. Ĝi estas multekosta kaj malfacilan aferon aspiri. 

Do ĝi estas komerco for, tro. 99,999% de la tempo estas bela Darn malfacile kaj altekosta. Kvin minutes-- vi apenaŭ povas akiri al la servilo por fizike anstataŭi iu kiu iris malbone. Kaj tial ni komencu cableado aferojn kune pli komplikitaj apriori por ke la komputiloj povas ia direktiĝi. Yeah. 

Spektantaro: [inaudible] DAVID Malan: La problemo povis esti en ajna nombro de lokoj. Kaj en fact-- 

Spektantaro: [inaudible] DAVID Malan: Absolute, absolute. Kaj kiel la pentraĵo estas fariĝas pli komplika, ĝi povus esti la retserviloj. Ĝi povus esti la potencon al la konstruaĵo. Ĝi povus esti io fizika, kiel la kabloj got ŭfrangiĝata aŭ forpelitaj. Ĝi povus esti la datumbaza ne respondas. Ĝi povus esti ili ĝisdatigis lian mastruman sistemo kaj io pendas. Do estas multaj aliaj partoj móviles. Kaj tiel multe de la inĝenierio kiu devas iri malantaŭ tiu Estas vere nur komerci offs, kiel kiom da tempo, kiom da mono estas vere valoras, kaj kiuj estas la minacoj vi estas vere maltrankviligita? Ekzemple, en la kursoj mi instruas en Harvard, ni uzas multajn nubo komputado, kiu ni komencos prenante rigardu nun, fakte, kie ni uzas Amazon Retejo Services. Nur ĉar tio estas la unu ni komencis kun. Sed estas ĉiam pli tiujn tagojn de Google kaj Microsoft kaj aliaj. Kaj ni konscie elekti meti ĉiuj de niaj kursoj 'virtualaj maŝinoj, kiel ili estas nomitaj, en la mi pensas ĝi estas Okcidenta Virginio datumoj centro. Plejparto de niaj studentoj hazarde estas el Usono, kvankam estas certe iuj internacie. 

Sed la realaĵo estas kiu estas ĝuste simpla kaj ĝi estas pli malmultekosta por ni meti ĉiujn niajn ovojn en la Virginia korbo, kvankam mi scias se io fuŝiĝas en Virginio, kiel ĝi foje happened-- kiel se estas uragano aŭ iuj vetero okazaĵo tiel, se estas iu potenco krado temo aŭ la like-- ĉiuj de niaj kursoj 'datumoj venu offline por iu nombro de minutoj aŭ horoj aŭ eĉ pli longe. 

Sed la kvanto de komplekseco kiu estus bezonata, kaj la kvanto de mono kiu estus necesas, por funkciigi ĉiun paralele en Eŭropo aŭ en Kalifornio nur ne faras tiel senton. Do ĝi estas racia komerco ekstere, sed dolora Kiam vi estas vere havanta tiun malfunkcio. 

Nu, ni transiro nun al kelkaj el la nubo-bazitaj solvoj al iuj de ĉi tiuj problemoj. Ĉio ni estis diskutanta ĝis nun estas speco de problemoj kiuj havas estis kun ni dum iom da tempo, ĉu vi havas vian propran serviloj en via entrepreno, ĉu vi iros al co-location meti kiel datumoj centro kaj dividi spaco kun iu alia, aŭ nuntempe en la nubo. 

Kaj kio estas agrable pri nubo estas ke ĉiuj pri tiaj aferoj mi estas desegnante kiel fizikaj objektoj povas nun esti konsiderata speco de virtualaj objektoj en la nubo kiu estas simulita per programaro. Alivorte, la komputiloj hodiaŭ, serviloj hodiaŭ, kiel la Dell bildo Mi montris antaŭe, estas tiel rapida, havas tiel RAM, tiel CPU, tiel disko spaco, ke homoj skribis programaro por virtuale subdisko unu servilo sur la iluzio de ĝi esti du serviloj, aŭ 200 serviloj, do ke ĉiu el ni klientoj havas la iluzion de havado Ne nur konton en iu retejo gastiganto, sed nia propra maŝino kiu ni estas renting de iu alia. 

Sed estas virtuala maŝino en kiom sur unu Dell servilo, ĝi denove povas esti dispartigita en unu du aŭ 200 aŭ pli virtualajn maŝinojn, ĉiuj el kiuj donas iu administra aliro, sed en maniero kie neniu el ni scias aŭ povas aliri aliajn virtuala maŝinoj sur sama aparataro. Tiel pentri bildon en hodiaŭa diapozitivoj, Mi ĉi pafis ĉi tien el retejo nomita Docker. 

Do tiu estas iom pli detale ol ni vere bezonas. Sed se ci vidas tion kiel via infrastructure-- tiel nur la aparataro vian propran, via serviloj, la kulisoj, la datumoj centro, kaj ĉiuj that-- vi farus tipe kuras gastiganto mastruma sistemo. Do ion kiel tio povus esti Vindozo. Ne estus Mac VIN. Ĉar tio ne vere entreprena tiujn tagojn. Do estus Linukso aŭ Solaris aŭ Unikso aŭ BSD aŭ FreeBSD aŭ ajnan numeron de aliaj mastrumaj sistemoj ke estas aŭ libera aŭ komerca. 

Kaj tiam vi kuri programo, speciala programo, nomita hypervisor, aŭ virtuala maŝino monitoro, VMM. Kaj tiuj estas produktoj, se vi estas familiara, kiel VMware aŭ VirtualBox aŭ Virtuala PC aŭ aliaj. Kaj kion tiuj programoj fari estas ĝuste ke trajto mi priskribis antaŭe. Ĝi kreas la iluzion ke fizika maŝino povas esti multoblaj virtualaj maŝinoj. 

Kaj tial tiuj coloridos skatoloj supren supro estas pentri bildon de la sekva. Ĉi hypervisor, tiu peco de programaro, nomas ĝin VMware, Kuranta sur iuj aliaj mastruma sistemo, nomas ĝin Linukso, kreas la iluzion ke ĉi fizika komputilo estas fakte unu, du, tri virtualajn komputilojn. Do mi nun aĉetis, kiel la posedanto de tiu aparataro, fizika komputilo. Kaj nun mi renting al tri klientoj. 

Kaj tiuj tri klientoj ĉiuj opinias ili havas dediĉitan virtuala maŝino. Kaj ĝin ne logaĵo kaj ŝaltilo. Estas pli malkaŝo ke vi uzas virtuala maŝino. Sed teknologie, ni ĉiuj havas plenan kontrolon administrativo super ĉiu el tiuj gasto operaciumoj, kiuj povus esti ajna nombro de operaciumoj. 

Mi povas instali ion mi volas. Mi povas ĝisdatigi ĝin kiel mi volas. Kaj mi eĉ ne devas scii aŭ zorgi pri la aliaj mastrumaj sistemoj en tiu komputilo, la aliaj virtualaj maŝinoj, se la posedanto de ĉiuj ĉi griza aĵoj estas estante iom avara kaj estas overselling siajn rimedojn. 

Sekve se vi prenas unu fizika maŝino kaj vendi ĝin por ne 200 sed 400 klientoj, en iu punkto ni tuj stumbli en tiujn sama agado temoj kiel antaŭe. Ĉar vi nur havas finia kvanto de disko kaj memoro RAM kaj tiel antaŭen. Kaj virtuala maŝino estas simple programo kiu estas ŝajnigante esti plena disvolviĝinta komputilo. Do vi akiras kion vi pagas por tie. 

Do vi trovos rete vi povus pagi bonfama entrepreno eble $ 100 monate por via propra virtuala maŝino, aŭ via propra virtuala privata servilo, kio estas alia termino por tio. Aŭ vi povus trovi kelkajn muŝo per nokte kie vi pagas $ 5,99 monate por via propra virtuala maŝino. Sed probablecoj estas vi ne havas preskaŭ tiel agado disponebla al vi, ĉar ili is overselling ĝi tiel, ke vi farus kun la alta parto de servo aŭ la bona vendisto. 

Do kion signifas ĉi reale signifas por ni? Do lasu min iri al tiu. Mi tuj iros al aws.amazon.com. Nur ĉar ili havas belan menuo de ebloj. Sed tiuj samaj lecionoj apliki al tuta aro da aliaj nubo vendistoj. Bedaŭrinde, ĝi estas ofte pli marketing paroli ol nenio. Kaj tiu tenas ŝanĝanta. Do vi iras al retejo kiel ĉi. Kaj tio vere ne diras multon. 

Kaj eĉ mi, kiel mi rigardas tiun, do ne vere scias, kion iu ajn el tiuj aferoj nepre fari ĝis mi plonĝi en. Sed ni komencu maldekstre Compute. Kaj mi tuj klaku ĉi. Kaj nun Amazono havas sincere al superforta nombro de servoj ĉi tiuj tagoj. Sed Amazon EC2 estas eble la plej simpla. 

Amazono EC2 kreos por ni ekzakte la bildo ni vidis antaŭ momento. Ĝi estas kiel ili faras multajn ilian monon en la nubo. Ŝajne Netflix kaj aliaj estas en la nubo kun ili. Jen ĉiuj tipe lanugaj merkatiko ekparolos. Do kion mi volas fari estas iri al Pricing-- aŭ prefere ni iru al Petskriboj unua nur por pentri bildon de tiu. 

Do tiu estos varii de vendisto. Kaj ni ne devas tro profunde en Junko tie de kiel ĉi ĉiuj verkoj. Sed la vojo Amazon, ekzemple, luas vi virtualan maŝinon aŭ servilo en la nubo oni devas tiuj ia amuza nomoj, kiel t2.nano, kiu signifas malgranda, aŭ t2.large, kiu signifas granda. Ĉiu el ili donas vin ĉu unu aŭ du virtuala CPUs. 

Kial virtualan CPU? Nu, la fizika maŝino povus havas 64 aŭ pli efektiva CPUs. Sed denove, tra programaro, Ili kreas la iluzion ke tiu maŝino povas esti divvied ĝis multoblaj uzantoj. Tial ni povas pensi pri tio kiel havanta unu Intel CPU aŭ du. CPU kreditoj po hour-- mi volus devas legi la fajna print kiel al kion tiu vere signifas. Signifas kiom de la maŝino vi povas uzi por horo vis-a-vis aliaj klientoj sur tiu aparataro. 

Jen kiom RAM aŭ memoro vin get-- ĉu duona gigabajto, aŭ 500 megabajtoj, aŭ 1 gigabajto aŭ 2. Kaj tiam la stokado nur rilatas al kia diskoj ili donas vin. Ekzistas malsamaj stokado teknologioj kiujn ili oferlevas. Sed pli interesa ol tiu tiam povus esti la prezoj. 

Sekve se vi estas la CTO aŭ inĝeniero kiu ne volas kuri servilo en via oficejo, ial ajn, Kaj ĝi estas maniero tro komplika aŭ multekosta aĉeti serviloj kaj ko-lokalizi ilin kaj pagi renton en iuj fizikaj kaĝo spaco somewhere-- vi nur volas sidi en via tekkomputilo malfrunokte, entajpi viajn kreditkartajn detalojn, dissxiritajn serviloj en cloud-- bone, Ni povas fari ĝin tie. Mi tuj iros malsupren to-- Linukso Estas populara mastruma sistemo. Kaj ni simple akiri senton de tio. Whoops-- tro granda. 

Do ni rigardu iliajn plej eta virtuala maŝino, kiu ŝajnas havi, por niaj celoj, CPU kaj 500 megabajtoj de RAM. Tio estas sufiĉe malgranda. Sed sincere, retserviloj ne devas fari ĉion, kion multe. Vi havas bona specs en via tekkomputilo. Sed vi ne bezonas tiujn specs tiuj tagoj por aĵoj. Vi tuj pagos $ 0,0065 por horo. 

Do ni vidu. Se estas 24 horojn tage, kaj ni pagas tiom por horo, ĝi kostos vin $ 0.15 lui ke aparta servilo en la nubo. Kaj tio estas nur por unu tago. Se ni faros ĉi 365-- $ 57 al lui tiu aparta servilo. Tiel sonas super malmultekosta. 

Jen ankaŭ super malalta efikeco. Do ni, por kursoj mi instruas tie, emas uzi mi pensas t2.smalls aŭ t2.mediums. Kaj ni havu kelkcent uzantoj, kelkaj mil uzantoj, entute. Estas bela modesta. Do ni vidu kion tiu kostus. Do se mi tion kosto fojojn 24 horoj tempoj 365, ĉi onia $ 225. Kaj por la kursoj Mi instruos al ni ĝenerale kuri du de ĉiu, por redundo kaj ankaŭ por ludado. Do ni povus elspezi do $ 500 por la serviloj ke ni bezonas por jaro. 

Nun, se vi bezonas pli performance-- ni rigardu memoro. Ni jam parolis pri memoro tre iom. Kaj se vi bezonas pli memory-- kaj 64 gigabajtoj estas la nombro mi konservis mentioning-- tio estas preskaŭ $ 1 por horo. Kaj vi povas sufiĉe rapide trovi kie ĉi goes-- do 24 horoj fojojn 365. Do nun estas $ 8.000 por jaro por sufiĉe deca servilo. 

Do je iu punkto, estas ĉi fleksia punkto kie nun ni povus elspezi $ 6.000 verŝajne kaj aĉeti maŝinon tiel kaj amortizi lian koston super eble du, tri jaroj, la vivo de la maŝino. Sed kio povus puŝi vin favoro aŭ malfavoron de arrendamiento maŝino en la nubo tiel? Denove, tio estas komparebla, probable, al unu el tiuj Dell serviloj ni vidis bildigita iom antaŭe. 

Spektantaro: [inaudible] 

DAVID Malan: Jes, tio estas grandega inversita. Ĉar ni ne aĉetas la maŝino, ni ne devas unbox ĝin. Ni ne devas levi ĝin. Ni ne devas ŝtopi ĝin en nia rako. Ni ne devas ŝtopi ĝin en. Ni ne devas pagi la elektra beko. 

Ni ne devas turni la klimatizilo plu. Kiam malmola disko mortas, ni ne havas veturi en la mezo de la nokto ripari ĝin. Ni ne devas starigi monitorado. Ni ne havas to-- la listo daŭriĝas kaj sur la tuta de la fizikaj aferoj vi ne bezonas fari pro "la nubo". 

Kaj esti klara, nubo komputado Estas ĉi tre trouzas termino. Ĝi vere nur signifas pagi iun alie kuri serviloj por vi, aŭ luanta spacon sur aliulaj serviloj. Tial la termino "nubo komputado" estas nova. La ideo estas jardekojn malnova. Do jen bela konvinka. 

Kaj kion pli vi akiras? Nu, vi ankaŭ ricevas la kapablon fari ĉion sur tekkomputilo hejme. Alivorte, ĉiu el la fotojn mi ĵus drawing-- kaj ĝi ne estis ke antaŭ longe, ke eĉ Mi rampadis ĉirkaŭ en servanto planko ŝtopanta la kabloj en por ĉiu el la linioj kiujn vi vidas, kaj ĝisdatigi la mastruman sistemoj, kaj ŝanĝante diskoj ĉirkaŭ. Ekzistas multe de fisiceco al ĉiuj de tiu. 

Sed kio estas bela pri virtuala maŝinoj, kiel la nomo ia sugestas, nun estas ttt-bazita interfacoj per se vi volas ke la ekvivalento de linio de ĉi servilo al alia, nur tajpu, tipo, speco, klaku kaj treni, klaku Submetu kaj voilà, vi havas ĝin telegramis ĝis virtuale. Ĉar ĝi estas ĉiuj farita en softvaro. Kaj la kialo ĝi estas farita en programaro estas denove ĉar ni havas tiom da RAM kaj tiel multe CPU disponebla al ni tiujn tagojn, kvankam ĉiuj Okaze prenas tempon, ĝi estas malrapida kuri aferoj en softvaro ol aparataro, tiel ĝi estas pli malrapida uzi mekanikan aparato kiel malmola disko ol RAM, io pure elektronikajn. Ni havas tiom da rimedoj disponebla por ni. Ni homoj estas ia invariantly malrapida. Kaj do nun la maŝinoj povas fari des pli por unueco de tempo. Ni havas tiujn kapablojn fari aferojn virtuale. 

Kaj mi diros al kursoj Mi instruos al, ekzemple, ĉi tie, Ni havas proksimume eble dekduo aŭ tiel tuta de virtualaj maŝinoj tiel kuranta ĉe ajna donita tempo faranta interfacon aferojn, faras malantauxo aĵoj. Ni havas ĉiujn niajn stokado. Tiel ajna filmetoj, inkluzive aferojn tiel ke ni pafi, Ni finos metante en la nubon. Amazono havas servoj nomita Amazon S3, ilia simpla stokado servo, kiun Estas ĝuste kiel diskspaco en la nubo. Ili havas ion nomita CloudFront, kiu Estas CDN servon, Enhavo Transdono Reto servo, kiun signifas ili prenu ĉiujn viajn dosierojn kaj cxar vi auxtomate repliki ĝin ĉirkaŭ la mondo. 

Do ili ne faras preventa. Sed la unua tempo iu en Barato petas vian dosieron, ili devos eble kaŝas ĝin loke. Unuafoje en Ĉinio, la unuafoje en Brazilo kiu okazas, ili komencos caching ĝi loke. Kaj vi ne devas fari iu el tio. Kaj tial estas tiom nekredeble deviganta tiujn tagojn movi aferoj en la nubon. Ĉar vi havas tiun kapablon laŭlitere por ne havi homoj faras preskaŭ tiel laboro. Kaj vi laŭlitere ne bezonas tiom da homoj faras tiujn laborojn anymore-- "Ops" aŭ operacional roloj, anymore. Vi vere nur bezonas programistoj kaj malpli inĝenieroj kiu povas nur fari tion virtuale. Fakte, nur por doni vi senton de tio, mi iros al prezoj por unu alia produkto tie. Vidu io kiel CDN S3. Do tiu estas esence virtuala malmola disko en la nubo. Kaj se ni rulumu malsupren al pricing-- Do ĝi estas $ 0,007 por gigabajto. Kaj that's-- kiel ni faru tion? Mi pensas ke estas monate. 

Do se tio estas po month-- aŭ tage? Dan estas ĉi tage? Tio estas monate, OK. Do se tiu estas po month-- bedaŭras, estas la $ 0.03 por monato. Ekzistas 12 monatoj el la jaro. Tiom kiom datumo povus vi stoki en la nubo? Al gigabajto ne grandega, sed mi ne scias, kiel 1 terabajto, tiel kiel 1.000 de tiuj. Tio ne estas ĉiu, kiu multe. Ĝi estas $ 368 por stoki terabajto de datumoj en Amazon nubo. Do kio estas kelkaj el la komerco offs, tiam? Ĝi ne povas ĉiuj esti bona. Nenion ni jam parolis pri hodiaŭ ia sen akirado aŭ kosto. Do kio estas malbona pri movanta ĉion en la nubo? Spektantaro: Sekureco. DAVID Malan: Bone, kion vi volas diri? Spektantaro: [inaudible] DAVID Malan: Jes, ĝuste. Kaj ĉu vi vere volas iu hazarda inĝenieroj ĉe Amazon ke vi neniam renkontos havanta fizika aliro al tiuj komputiloj, kaj se ili vere volis, virtuala aliro? Kaj kvankam en teorio software-- bone, ĉifrado povas absolute protekti vin kontraŭ tiu. Do se kion vi stokante sur via serviloj Estas encrypted-- malpli de konzerno. 

Sed tuj kiam la homo havas fizikan aliro al maŝino, ĉifrado flanken, ĉiuj vetas estas ia for. Vi eble scias de la pasintaj tempoj ke PC speciale, eĉ se vi havus tion nomita "BIOS pasvortoj," estis kiam via labortablo booted supren, oni kredus esti instigita per pasvorton kiu havas nenion komunan kun Fenestroj, vi povas tipe nur malfermi la chasis de la maŝino, trovi eta najloj kaj uzi ion nomita jumper kaj simple konekti tiuj du dratoj por proksimume sekundo, tiel kompletigante cirkviton. Kaj tio forigus la pasvorton. 

Do kiam vi havas fizikan aliron al aparato, Vi povas fari aferojn kiel tio. Vi povas forigi la malmola disko. Vi povas akiri aliron al ĝi ke vojo. Kaj tiel tio estas kial, la kazo de Dropbox, ekzemple, ĝi estas iom preocupante kiu ne nur agas havas la datumoj, kvankam ĝi estas ĉifrita, ili ankaŭ havas la ŝlosilon. Aliaj ĉagrenoj? 

Spektantaro: [inaudible] DAVID Malan: Jes, ĝi estas tre true-- la Googles, la pomoj, la Microsofts de la mondo. Kaj fakte, kiom longe havas Vi havis vian iPhone por? Yeah, donu aŭ preni. Spektantaro: [inaudible] DAVID Malan: Mi bedaŭras? Vi estas inter tiuj kiuj havas iPhone, dekstra? Spektantaro: Jes. DAVID Malan: Kiel longe Vi havis vian iPhone? Spektantaro: [inaudible] DAVID Malan: Bone, do Pomo laŭvorte scias kie vi estis ĉiuhore de la tago por la lastaj kvin jaroj. 

Spektantaro: [inaudible] DAVID Malan: Kio estas mirinda trajto. Spektantaro: [inaudible] DAVID Malan: Jes, sed komerci ekstere por certa. Spektantaro: [inaudible] 

DAVID Malan: Jes, ĝi estas tre facile. Spektantaro: [inaudible] DAVID Malan: Aliaj downsides? Spektantaro: [inaudible] DAVID Malan: Absolutely-- teknologie, ekonomie, estas sufiĉe konvinka por ia gajni tiujn ekonomiojn de skalo kaj kopii ĉion en la tn nubo. Sed vi verŝajne volas iri kun iuj de la plej grandaj fiŝoj, la Amazonoj, la Googles, la Microsofts-- Rackspace estas bela big-- kaj kelkaj aliaj, kaj ne nepre flugi en nokto ulojn por kiuj ĝi estas tre facile fari tiu speco de tekniko nuntempe. Kaj tio estas kiu vi povas pagi $ 5.99 por monato al. Sed vi certe akiras kion vi pagas por. 

Kiam vi diras [inaudible], tio estas, kiam aĵoj kiel tiuj kvin nines supreniru per kiu eĉ se teknologie ni ne povas vere garantii 99.999, ni simple konstrui en ia de puno por la kontrakto tiel ke se tio okazus, almenaŭ ekzistas iu kosto al ni, la vendisto. Kaj tion vi volus tipe esti akiranta ilin konsentas. 

Spektantaro: [inaudible] 

DAVID Malan: Kaj la unu speco de beno estas ke eĉ kiam ni iros, cxar Ekzemple, eĉ iuj kompanioj, la realaĵo estas Amazon, ekzemple, havas tiom da Darn klientoj, konataj klientoj, operaciis el certaj datumaj centroj ke kiam io vere fuŝiĝas, kiel agoj de Dio kaj vetero kaj tiel, se estas ia arĝenta tegaĵo, ĝi estas ke vi estas en tre bona kompanio. Retpagxon povus esti offline. Sed tiel estas kiel la duono de la populara interreto. Kaj tiel ĝi estas defendeble iom pli apetecible por via klientoj se ĝi estas pli de interreta afero ol acme.com afero. Sed tio estas iom de trompanton. 

Do en terminoj de aliaj aferoj rigardi, nur por ke ni ne forĵetas aliajn, se vi iras al Microsoft Azure, ili havi ambaŭ Linukso kaj Vindozo aĵoj tio komparebla al Amazon. Se vi iras al Google Compute Engine, Ili havas ion similan ankaŭ. Kaj ĝuste por rondigi ekster tiuj nubo oferojn Mi gloras unu alia afero. Tio estas populara retejo jen reprezentanto de klaso de teknologioj. La ones ni ĵus parolis pri, Amazon, estus IaaS, Infrastrukturo kiel Servo, kie vi ia fizika aparataro kiel servo. Ekzistas Saas. Fakte, lasu min jot tiujn malsupren. 

IAAS-- Infrastrukturo KIEL Servo, Saas, kaj la lando, kiu estas rimarkinde konfuza akronimoj kiuj priskribi tri malsamaj tipoj de aĵoj. Kaj akronimoj sin ne vere gravas. Tio estas ĉiuj la nubo aĵoj Ni ĵus parolis pri, la pli malalta nivelo stuff, la virtualización de aparataro kaj stokado en la tn nubo, ĉu ĝi estas Amazono, Microsoft, Google, aŭ alia. 

Programaro kiel service-- ni ĉiuj speco de uzi ĉi. Se vi uzas Google Apps Gmail aŭ calendaring, iu el tiuj ttt-bazita aplikaĵoj kiuj 10 jaroj ni havus duobla klakis piktogramoj sur nia labortablo, programaro kiel servo Nun vere apliko retejo. Kaj platformo kiel servo Ĉio dependas. 

Kaj unu ekzemplo mi donos al vi tie en la kunteksto de nubo computing-- ekzistas unu firmao kiu estas tute populara tiuj tagoj, Heroku. Kaj ili estas servo, platformon, se vi volas, kiu kuras sur supro de Amazon infrastrukturo. Kaj ili nur faros ĝin eĉ pli facile por programistoj kaj inĝenieroj akiri ttt-bazita aplikoj rete. 

Estas domaĝo, komence, por uzi Amazon Retejo Services kaj aliaj aferoj. Ĉar vi efektive havas scii kaj kompreni pri datumbazoj kaj retserviloj kaj ŝarĝo balancers kaj ĉiuj aĵoj Mi ĵus parolis pri. Ĉar ĉiuj Amazono faris ne kaŝita tiuj dezajno defioj. Ili ĵus virtualizados ilin kaj movi ilin en retumilo, en programaro anstataŭ aparataro. 

Sed kompanioj kiel Heroku kaj aliaj Lando provizantoj, Platformo kiel Servo, Ili uzas tiujn barebone fundamentojn ke ni ĵus parolis, kaj ili konstruis pli facile uzi programaron sur ĝi tial se vi volas akiri ttt-bazita apliko rete tiujn tagojn, vi certe devas scipovas plani. Vi bezonas scii Java aŭ Python aŭ PHP aŭ Ruby aŭ aron da aliaj lingvoj. 

Sed vi ankaŭ bezonos lokon por meti ĝin. Kaj parolis pli frue pri prenanta ttt retprovizanton kompanio. Tio estas speco de similaj mez-2000-aj jaroj alproksimiĝo al akiranta ion rete. Nuntempe vi eble anstataŭ pagi iun kiel Heroku kelkajn dolarojn monate. Kaj esence, Unufoje vi havas faris iun komencan agordon, ĝisdatigi via retejo, vi nur tajpi komandon en fenestro. Kaj kion ajn kodon vi skribis tie sur via tekkomputilo tuj akiras distribuita al ajna nombro de serviloj en la nubo. 

Kaj Heroku prizorgas ĉiuj komplekseco. Ili kalkuli ĉiujn datumbazo aĵoj, ĉiuj ŝarĝo balancadon, ĉiuj kapdoloroj ke ni havas nur skribita sur la tabulo, kaj kaŝi ĉiujn ke por vi. Kaj al ŝanĝo, vi nur pagi ilin iom pli. Do vi havas tiujn infrastrukturojn kiel servo, platformoj kiel servo, kaj tiam programaro kiel servo. Ĝi estas, denove, ĉi abstraktaĵo aŭ layering. 

Demandojn sur la nubo aŭ konstruado onies propra infrastrukturo? Bone, ke estis multe. Kial ni ne iru antaŭen kaj preni nian 15 minuta paŭzo tie. Ni revenos kun kelkaj novaj konceptoj kaj iom de manoj-sur ŝanco antaŭ la vespero finiĝis. 