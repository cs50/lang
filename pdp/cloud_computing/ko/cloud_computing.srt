1
00:00:00,000 --> 00:00:00,629

2
00:00:00,629 --> 00:00:02,170
DAVID 마란 : 좋아, 다시 환영합니다.

3
00:00:02,170 --> 00:00:06,520
우리는 클라우드 컴퓨팅에 뛰어 전에,
나는 잠시 동안 일시 정지 줄 알았는데

4
00:00:06,520 --> 00:00:11,740
미결제 질문이있는 경우
점심 시간 와서 또는 주제

5
00:00:11,740 --> 00:00:13,834
즉, 지금 관심이있을 수 있습니다.

6
00:00:13,834 --> 00:00:18,470

7
00:00:18,470 --> 00:00:21,410
>> 청중 : [들리지]

8
00:00:21,410 --> 00:00:22,090
>> DAVID 마란 : OK.

9
00:00:22,090 --> 00:00:23,555
오 그래.

10
00:00:23,555 --> 00:00:24,430
청중 : [들리지]

11
00:00:24,430 --> 00:00:29,880

12
00:00:29,880 --> 00:00:31,420
>> DAVID 마란 : 아니, 물론.

13
00:00:31,420 --> 00:00:35,180
의 OK, 잘 만하면 모든
문제는 몇 시간에서 발생

14
00:00:35,180 --> 00:00:36,410
내일 특히.

15
00:00:36,410 --> 00:00:42,700
그러나의 어디에서, 다음을 살펴 보자
설정에 대한 마지막 토론

16
00:00:42,700 --> 00:00:45,730
웹 사이트는보다 일반적으로, 리드
이 클라우드 컴퓨팅에 관해서,

17
00:00:45,730 --> 00:00:48,210
서버 아키텍처를 설정
의사 결정의 종류

18
00:00:48,210 --> 00:00:50,800
그 엔지니어와
개발자와 관리자

19
00:00:50,800 --> 00:00:53,210
이 때 확인해야
단지보다 더 많은 일을하는

20
00:00:53,210 --> 00:00:56,550
달 웹 호스트 당 $ 10에 가입
당신은 실제로 구축하고자 할 때

21
00:00:56,550 --> 00:00:57,550
자신의 인프라를 제공합니다.

22
00:00:57,550 --> 00:01:00,400
그리고 우리는이 다시 넥타이하려고합니다,
예를 들어, 보관 및 다른 사람에

23
00:01:00,400 --> 00:01:01,350
그들처럼.

24
00:01:01,350 --> 00:01:06,250
>> 그래서 고려하기 시작하자
어떤 문제 사업으로 발생

25
00:01:06,250 --> 00:01:09,390
좋은 얻고 좋은 문제가 발생한다.

26
00:01:09,390 --> 00:01:14,720
데의 매우 간단한 경우에 따라서
웹 서버가 어떤 회사

27
00:01:14,720 --> 00:01:21,470
당신은의 말을하자, 서버가있을 수 있습니다 그
우리는 단지 그 다음과 같습니다 그릴 수 있습니다.

28
00:01:21,470 --> 00:01:25,620
그리고 요즘 대부분의 servers-- 및하자
실제로 그냥 여기에 사진을 넣어

29
00:01:25,620 --> 00:01:27,680
조금 덜 성운의 그.

30
00:01:27,680 --> 00:01:31,510
>> 그래서 델 랙 server--
다시 하루에,이

31
00:01:31,510 --> 00:01:33,730
메인 프레임 컴퓨터이었다
즉, 전체 객실을했다.

32
00:01:33,730 --> 00:01:35,710
요즘, 당신이라면
서버를 얻기 위해, 그것을

33
00:01:35,710 --> 00:01:38,520
이 같은 작은 선물을 보일 수 있습니다.

34
00:01:38,520 --> 00:01:41,760
서버는 무엇으로 측정
랙 장치, 또는 RU에 불린다.

35
00:01:41,760 --> 00:01:45,280
그리고 하나의 RU는 1.5 인치,
이는 업계 표준입니다.

36
00:01:45,280 --> 00:01:49,300
그래서이 두 개의 RU 서버처럼 보인다.

37
00:01:49,300 --> 00:01:51,240
그래서 3 인치 높이입니다.

38
00:01:51,240 --> 00:01:54,430
그리고 그들은 일반적으로 십구인치 넓은 것
이런 종류의 물건을 모두 의미

39
00:01:54,430 --> 00:01:55,160
표준화된다.

40
00:01:55,160 --> 00:01:59,420
>> 당신은 데이터 center--에 보면 그래서
단지 하나의 서버에서,하지만하자

41
00:01:59,420 --> 00:02:02,110
구글의 좀 봐
데이터 센터 및 볼 경우 우리

42
00:02:02,110 --> 00:02:04,280
Google 이미지에 좋은 그림을 참조하십시오.

43
00:02:04,280 --> 00:02:09,090
이것은 훨씬 더 당신보다 불
일반적으로 찾아 많은 것

44
00:02:09,090 --> 00:02:14,900
섹시 결과를 찾고 있습니다. 그러나
이 부부의 모습입니다

45
00:02:14,900 --> 00:02:17,380
백 서버의 모든
같은 크기에 대한,

46
00:02:17,380 --> 00:02:21,450
실제로, 랙 랙 후 후
데이터 센터의 랙 후 랙.

47
00:02:21,450 --> 00:02:26,150
>> 이 항아리 같은 것을이 아니라 할 수있다
내가 구글을 봤 때문에, 구글의 수.

48
00:02:26,150 --> 00:02:28,330
하지만 대표가 될 수
더 일반적으로

49
00:02:28,330 --> 00:02:31,480
데이터 센터 많은에
회사는 일반적으로 공동 있습니다.

50
00:02:31,480 --> 00:02:34,940
공동 위치는 일반적 의미
당신은 Equinix 같은 장소로 이동하는 것이

51
00:02:34,940 --> 00:02:40,280
또는 다른 공급 업체가 큰이
전력을 많이 가지고 창고,

52
00:02:40,280 --> 00:02:42,950
희망 냉각 많은,
보안 많은,

53
00:02:42,950 --> 00:02:47,910
개별 케이지의 랙을 둘러싸
서버는, 당신은 랙 임대 중

54
00:02:47,910 --> 00:02:49,150
또는 당신의 랙을 가지고.

55
00:02:49,150 --> 00:02:51,420
>> 그리고 개별 기업,
신생 특히,

56
00:02:51,420 --> 00:02:54,820
생체 인식의 어떤 것
자신의 케이지, 또는 키에 도착,

57
00:02:54,820 --> 00:02:55,640
또는 카드 키.

58
00:02:55,640 --> 00:02:56,990
당신은 문을 엽니 다.

59
00:02:56,990 --> 00:03:00,354
그리고 내부에 단지가
평방 피트의 공간

60
00:03:00,354 --> 00:03:03,270
당신의 내부에, 지불하고 있는지
어느 당신은 당신이 원하는 무엇이든 넣을 수 있습니다.

61
00:03:03,270 --> 00:03:04,770
>> 그리고 당신은 일반적으로 전력 비용을 지불합니다.

62
00:03:04,770 --> 00:03:06,920
그리고 당신은 발자국 비용을 지불합니다.

63
00:03:06,920 --> 00:03:08,770
그리고 당신은 지불
서버에 대한 직접

64
00:03:08,770 --> 00:03:10,560
당신은 그 공간으로 데려하고있다.

65
00:03:10,560 --> 00:03:12,850
그리고 당신은 다음을 가지고있는
할 수있는 옵션은 사람을 지불입니다

66
00:03:12,850 --> 00:03:15,120
인터넷 서비스 연결을위한.

67
00:03:15,120 --> 00:03:17,240
당신은 어떤 수를 지불 할 수
공급 업체의 모든 누구의

68
00:03:17,240 --> 00:03:19,210
일반적으로 데이터 센터에 와서.

69
00:03:19,210 --> 00:03:22,740
>> 하지만 진짜 재미있는 질문은,
무슨 일이 실제로 그 랙에 간다?

70
00:03:22,740 --> 00:03:25,020
잘 그들은 수있는 모든
우리가 본 것을처럼 보인다.

71
00:03:25,020 --> 00:03:27,870
그러나 그들은 서로 다른 기능을 수행
다른 일을해야 할 수도 있습니다.

72
00:03:27,870 --> 00:03:29,661
실제로하자
이 토론 동기를 부여

73
00:03:29,661 --> 00:03:35,370
의 문제, 어떤 문제와
당신이 성공적이라면 시작이 발생 하는가?

74
00:03:35,370 --> 00:03:37,900
>> 그래서 당신은 웹 사이트를 가지고
당신은 구축 한 것이다.

75
00:03:37,900 --> 00:03:40,450
그리고 어쩌면 위젯을 판매
또는 그런 일.

76
00:03:40,450 --> 00:03:43,620
그리고 당신은 매우 잘 해왔습니다
온라인 위젯의 매출.

77
00:03:43,620 --> 00:03:48,490
그리고 당신은 경험하기 시작
일부 증상, 귀하의 웹 사이트.

78
00:03:48,490 --> 00:03:51,070
일부있을 수 있습니다 무엇
기술 증상

79
00:03:51,070 --> 00:03:54,040
사용자는 사업으로보고 있음
성장과 호황을 누리고있다

80
00:03:54,040 --> 00:03:59,482
귀하의 웹 사이트입니다
그 혜택?

81
00:03:59,482 --> 00:04:02,690
>> 청중 : [들리지]

82
00:04:02,690 --> 00:04:05,910

83
00:04:05,910 --> 00:04:07,050
>> DAVID 마란 : 네, 정확히.

84
00:04:07,050 --> 00:04:10,040
그래서 당신은있을 수 있습니다
당신의 웹 사이트의 둔화.

85
00:04:10,040 --> 00:04:11,240
왜 그런 일이 있는가?

86
00:04:11,240 --> 00:04:12,660
글쎄, 우리를 위해, 가정하면
토론을 위해

87
00:04:12,660 --> 00:04:15,160
지금 당신이 일에있어, 것을
이러한 상용 웹 호스트

88
00:04:15,160 --> 00:04:17,860
우리가 점심 전에 대한 이야기​​를하는 것이,
당신은 달러의 어떤 수를 지불

89
00:04:17,860 --> 00:04:20,859
당 월에, 당신은 이미 지불했습니다
도메인의 연간 비용

90
00:04:20,859 --> 00:04:25,300
웹 호스트는 아마 있는지, 이름
자원을 지나치게

91
00:04:25,300 --> 00:04:26,050
어느 정도.

92
00:04:26,050 --> 00:04:29,000
그래서 당신은 사용자 이름이있을 수 있습니다
자신의 서버에 암호를 입력합니다.

93
00:04:29,000 --> 00:04:32,410
그러나 그렇게 수있는 몇 가지 다른, 또는 여러
심지어 몇 아마 다스 다른, 또는

94
00:04:32,410 --> 00:04:33,980
백 다른 사용자.

95
00:04:33,980 --> 00:04:37,190
>> 그리고 웹 사이트는 물리적으로 살
동일한 서버에.

96
00:04:37,190 --> 00:04:38,340
왜 이런 일이 가능할까요?

97
00:04:38,340 --> 00:04:40,680
그런데 요즘, 서버
이 같은 일반적으로

98
00:04:40,680 --> 00:04:44,610
어쩌면, 여러 개의 하드 드라이브가
많은 6 개의 이상의 하드 드라이브,

99
00:04:44,610 --> 00:04:47,665
이들 각각은 많이있을
4 테라 바이트 요즘있다.

100
00:04:47,665 --> 00:04:52,140
그래서 당신은 공간의 24 테라 바이트가있을 수 있습니다
이 같은 하나의 작은 서버입니다.

101
00:04:52,140 --> 00:04:55,710
>> 그리고 당신은 그 공간의 일부를 도용하는 경우에도
이중화, 백업 목적으로,

102
00:04:55,710 --> 00:04:57,110
그것은 여전히​​ 공간이 꽤 많이 있습니다.

103
00:04:57,110 --> 00:05:00,070
확실히, 전형적인 웹 사이트
그 많은 공간을 필요로하지 않는다.

104
00:05:00,070 --> 00:05:03,100
그냥 사용자를 등록
그리고 주문의 로그를 저장

105
00:05:03,100 --> 00:05:04,640
모든 그렇게 많은 공간을 차지하지 않습니다.

106
00:05:04,640 --> 00:05:07,550
그래서 당신은 확실히 그것을 분할 할 수
조금 모든 사용자에게 제공

107
00:05:07,550 --> 00:05:08,980
그 단지 작은 조각.

108
00:05:08,980 --> 00:05:11,310
>> 한편, 컴퓨터
요즘 같은

109
00:05:11,310 --> 00:05:16,370
일반적으로 그냥 여러 CPUs--을하지 않았습니다
하나, 어쩌면 둘, 아마 네, 아마 16,

110
00:05:16,370 --> 00:05:17,149
또는 더.

111
00:05:17,149 --> 00:05:18,940
그리고 그 CPU를 각각
라는 뭔가가

112
00:05:18,940 --> 00:05:22,230
가지처럼 코어,
뇌의 내부 뇌.

113
00:05:22,230 --> 00:05:26,800
그래서 여기에 사실 대부분의 사람들에
현대 노트북은 아마 듀얼 코어가

114
00:05:26,800 --> 00:05:32,030
또는 쿼드 코어 CPU-- 아마 만
요즘 노트북의 내부에 하나의 CPU.

115
00:05:32,030 --> 00:05:35,030
하지만 데스크톱 컴퓨터
같은 랙 컴퓨터

116
00:05:35,030 --> 00:05:39,000
이 꽤 몇 가지가있을 수 있습니다
이상의 CPU, 차례로 코어입니다.

117
00:05:39,000 --> 00:05:44,180
>> 그리고 솔직히, 심지어 우리의 맥과의 PC를의
오늘, 당신은 정말 듀얼 코어가 필요하지 않습니다

118
00:05:44,180 --> 00:05:46,550
또는 쿼드 코어는 이메일을 확인합니다.

119
00:05:46,550 --> 00:05:49,090
어떤 병목 때이 있다면
그 컴퓨터를 사용하여 온다

120
00:05:49,090 --> 00:05:51,925
당신은 인간의 아마 있습니다
해당 컴퓨터에 대한 느린 것.

121
00:05:51,925 --> 00:05:54,800
그리고 당신은 할 수있을 않을거야
빨리 당신이 경우 이메일을 확인

122
00:05:54,800 --> 00:05:57,170
여러 개의 CPU 또는 코어 4 배를 가지고있다.

123
00:05:57,170 --> 00:05:59,700
>> 그러나 같은 종류
서버의 진실.

124
00:05:59,700 --> 00:06:02,970
하나의 단일 웹 사이트는 그렇지 않을 수 있습니다
반드시 하나 이상의 필요

125
00:06:02,970 --> 00:06:05,756
CPU 또는 하나의 코어 하나
일 안에 작은 뇌

126
00:06:05,756 --> 00:06:07,380
사고 및 모든 처리.

127
00:06:07,380 --> 00:06:10,561
따라서 제조업체들은 유사하게이
그 자원을 슬라이스 시작

128
00:06:10,561 --> 00:06:13,435
그래서 어쩌면 당신의 웹 사이트 하나를 가져옵니다
핵심, 당신의 웹 사이트가 하나의 코어를 가져옵니다,

129
00:06:13,435 --> 00:06:15,290
아니면 우리는 하나의 코어를 공유하고 있습니다.

130
00:06:15,290 --> 00:06:16,820
우리는 또한 디스크 공간을 공유하고 있습니다.

131
00:06:16,820 --> 00:06:20,000
그리고 우리는 또한, RAM을 공유하고
또는 랜​​덤 액세스 메모리

132
00:06:20,000 --> 00:06:22,520
전에에서, 어떤의
유한 금액도있다.

133
00:06:22,520 --> 00:06:23,420
>> 그리고 그 핵심입니다.

134
00:06:23,420 --> 00:06:25,960
아무리 비싼
컴퓨터가 있었다

135
00:06:25,960 --> 00:06:28,440
여전히 유한있다
거기에 자원의 양.

136
00:06:28,440 --> 00:06:31,360
그리고 더 많은 당신을
그 자원을 소비하려고,

137
00:06:31,360 --> 00:06:32,850
느린 일이 될 수 있습니다.

138
00:06:32,850 --> 00:06:34,646
그런데 왜?

139
00:06:34,646 --> 00:06:39,352
왜 물건은으로 천천히 것
서버의 증상은 오버로드?

140
00:06:39,352 --> 00:06:40,060
무슨 일이야?

141
00:06:40,060 --> 00:06:42,895

142
00:06:42,895 --> 00:06:46,388
>> 청중 : [들리지]

143
00:06:46,388 --> 00:06:54,036

144
00:06:54,036 --> 00:06:55,160
DAVID 마란 : 네, 정확히.

145
00:06:55,160 --> 00:06:57,730
나는 이전에 그 제안
RAM 메모리의 일종입니다.

146
00:06:57,730 --> 00:07:00,290
그건 이에는 휘발성이다
여기서 응용 프로그램 및 데이터는

147
00:07:00,290 --> 00:07:01,890
그들이 사용하는 때 저장됩니다.

148
00:07:01,890 --> 00:07:03,990
그리고 그러므로 거기
단지 한정된 수

149
00:07:03,990 --> 00:07:05,790
일의 당신은 분명히 한 번에 할 수 있습니다.

150
00:07:05,790 --> 00:07:07,740
그리고 그것은 또한 빠르다
이는 좋은 일이다.

151
00:07:07,740 --> 00:07:09,990
그러나, 또한 더 비싸다
어떤 나쁜 일이다.

152
00:07:09,990 --> 00:07:15,376
그리고 그것은 또한 낮은에 따라서 현재의
디스크 공간 량보다 하드 디스크

153
00:07:15,376 --> 00:07:16,750
경향이 공간은 저렴합니다.

154
00:07:16,750 --> 00:07:18,830
>> 즉,
4 테라 바이트가있을 수 있습니다

155
00:07:18,830 --> 00:07:20,440
컴퓨터의 디스크 공간.

156
00:07:20,440 --> 00:07:24,300
하지만 4가있을 수 있습니다
기가 바이트, 64 기가 바이트,

157
00:07:24,300 --> 00:07:29,180
크기, 배의 순서로
컴퓨터의 RAM 1,000 이하.

158
00:07:29,180 --> 00:07:30,320
그래서 컴퓨터는 무엇을합니까?

159
00:07:30,320 --> 00:07:32,236
글쎄, 당신 있다고 가정
64기가바이트을해야합니까

160
00:07:32,236 --> 00:07:35,110
이 같은 서버에 RAM의 어떤
아주 일반적인, 그렇지 않으면 낮은 것

161
00:07:35,110 --> 00:07:36,140
요즈음.

162
00:07:36,140 --> 00:07:39,220
하지만 당신은 너무 많은이 있다고 가정
너무 많은 일을하는 사용자

163
00:07:39,220 --> 00:07:42,480
당신이 가지 종류의
메모리 65 기가 바이트 필요

164
00:07:42,480 --> 00:07:44,960
그 모두를 처리 할
동시 사용?

165
00:07:44,960 --> 00:07:47,580
>> 글쎄, 당신은 말할 수 있습니다,
죄송합니다, 일부 사용자 수

166
00:07:47,580 --> 00:07:48,840
다만 사이트에 액세스 할 수 없다.

167
00:07:48,840 --> 00:07:51,410
그리고 그것은 측정
확실히 최후의 수단,의.

168
00:07:51,410 --> 00:07:55,570
운영 같이, 또는
윈도우 나 Mac과 같은 시스템,

169
00:07:55,570 --> 00:07:59,480
OS 또는 Linux 또는 Solaris 또는
해당 서버에 다른 운영체제의 수,

170
00:07:59,480 --> 00:08:01,280
다만 결정할 수, 그거 알아?

171
00:08:01,280 --> 00:08:03,780
난 단지 RAM 64 기가 바이트있다.

172
00:08:03,780 --> 00:08:05,440
나는 가지 (65)가 필요합니다.

173
00:08:05,440 --> 00:08:06,210
그래서 당신은 무엇인지?

174
00:08:06,210 --> 00:08:10,030
나는 1 기가 바이트 걸릴거야
RAM의 데이터의 가치

175
00:08:10,030 --> 00:08:15,240
그는 가장 최근에 액세스 한
다만, 일시적으로 디스크로 이동

176
00:08:15,240 --> 00:08:19,050
말 그대로 빠른에서 복사
느린 메모리로 메모리

177
00:08:19,050 --> 00:08:24,000
그때 나는 것을 처리 할 수​​ 있도록
메모리 65 기가 바이트 필요,

178
00:08:24,000 --> 00:08:25,650
거기에 몇 가지 계산을한다.

179
00:08:25,650 --> 00:08:28,580
그럼 내가 그 일을 끝났어요 때,
난 그냥 디스크에 그 이동합니다

180
00:08:28,580 --> 00:08:35,030
나는 일시적으로 넣어 다른 RAM 이동
디스크 다시 실제 하드웨어에

181
00:08:35,030 --> 00:08:37,280
그래서 나는 멀티 태스킹의 종류입니다.

182
00:08:37,280 --> 00:08:41,190
>> 그래서 나는 종류의 일을두고있어
일시적으로이 느린 공간

183
00:08:41,190 --> 00:08:44,159
그래서 나는 환상을 만들
의 모두를 취급.

184
00:08:44,159 --> 00:08:45,290
하지만 경기 침체가있다.

185
00:08:45,290 --> 00:08:45,790
왜?

186
00:08:45,790 --> 00:08:49,380
음,이 하드의 내부
디스크 요즘은 무엇입니까?

187
00:08:49,380 --> 00:08:52,030
오히려, 어떤 하드를 만든다
RAM에서 다른 드라이브

188
00:08:52,030 --> 00:08:53,495
최선을 이제 알아?

189
00:08:53,495 --> 00:08:56,750
>> 청중 : [들리지]

190
00:08:56,750 --> 00:08:59,540

191
00:08:59,540 --> 00:09:01,445
>> DAVID 마란 : OK, 사​​실.

192
00:09:01,445 --> 00:09:02,320
청중 : [들리지]

193
00:09:02,320 --> 00:09:05,440

194
00:09:05,440 --> 00:09:06,750
>> DAVID 마란 : 그래서 매우 사실.

195
00:09:06,750 --> 00:09:13,709
그리고 그 부작용 또는 기능입니다
사실 그 RAM은 참 빠르다.

196
00:09:13,709 --> 00:09:15,750
그러므로 당신이 원하는
현재 사용을 위해 사용합니다.

197
00:09:15,750 --> 00:09:17,290
그리고 디스크가 느립니다.

198
00:09:17,290 --> 00:09:19,630
그러나 영구 또는 비 휘발성이다.

199
00:09:19,630 --> 00:09:21,480
그래서 당신은 장기 저장을 위해 사용합니다.

200
00:09:21,480 --> 00:09:25,160
그러나 측면에서
구현, 나는 위로를 보면

201
00:09:25,160 --> 00:09:29,297
무엇 DIMM을라고, 듀얼 인라인 메모리
모듈이는 RAM의 어떤 조각입니다

202
00:09:29,297 --> 00:09:30,380
일반적으로 다음과 같을 수 있습니다.

203
00:09:30,380 --> 00:09:35,050
>> 그래서 버그 우리의 Mac--의 내부.

204
00:09:35,050 --> 00:09:41,080
우리의 Mac과 PC, 우리의 바탕 화면의 내부
컴퓨터의 메모리 스틱을 가질 것이다

205
00:09:41,080 --> 00:09:43,220
당신이 그들에게 전화하는 것처럼,
또는 DIMM을, 또는 SIMM을 다시

206
00:09:43,220 --> 00:09:44,970
하루에, 메모리
그는 다음과 같습니다.

207
00:09:44,970 --> 00:09:47,900
우리의 노트북은 아마 일이 그
크기 나 절반 크기 세 번째입니다.

208
00:09:47,900 --> 00:09:50,066
그들은 조금 작은 것,
하지만 같은 아무것도 모르겠어 작은

209
00:09:50,066 --> 00:09:52,110
녹색 실리콘 조각
웨이퍼 또는 플라스틱이

210
00:09:52,110 --> 00:09:56,237
많은 그들에 작은 검은 칩이
전선의 모든 상호 연결.

211
00:09:56,237 --> 00:09:58,820
당신의 전체 무리가있을 수 있습니다
컴퓨터의 이러한 내부.

212
00:09:58,820 --> 00:10:00,903
그러나 테이크 아웃은 여기
그것은 완전히 전자입니다.

213
00:10:00,903 --> 00:10:03,130
다만 전자들있다
이 장치에 흐르는입니다.

214
00:10:03,130 --> 00:10:08,170
대조적으로, 우리가 보면
하드 드라이브의 내부

215
00:10:08,170 --> 00:10:10,760
그리고 사진을 올려
여기에 대신 것

216
00:10:10,760 --> 00:10:16,600
이 같은 것을 볼 수
이는 전력을 가지고

217
00:10:16,600 --> 00:10:17,950
궁극적으로 통과하는.

218
00:10:17,950 --> 00:10:20,265
그러나 또한 밖으로 점프
이 일에 대해 당신에?

219
00:10:20,265 --> 00:10:21,140
청중 : [들리지]

220
00:10:21,140 --> 00:10:22,710
DAVID 마란 : 네, 거기에
분명히 움직이는 부품.

221
00:10:22,710 --> 00:10:25,210
그것은 오래 된 기록과 같은 종류의
플레이어 또는 축음기 플레이어.

222
00:10:25,210 --> 00:10:26,200
그리고 그것은 꽤 많이 있습니다.

223
00:10:26,200 --> 00:10:28,950
그것은 that--보다 조금 애호가의
사용하는 축음기 플레이어 반면,

224
00:10:28,950 --> 00:10:33,150
이 사실은, 레코드에 홈
작은 작은 자성 입자를 사용

225
00:10:33,150 --> 00:10:34,550
우리가 확실히 볼 수 있습니다.

226
00:10:34,550 --> 00:10:38,520
그러나 약간의 자성 입자의 경우
이처럼 보이는, 그것은 1 간주됩니다.

227
00:10:38,520 --> 00:10:41,230
그리고이 보이는 경우,
대신 남북의 남북,

228
00:10:41,230 --> 00:10:42,252
그것은 0이 될 수 있습니다.

229
00:10:42,252 --> 00:10:45,460
우리가 만들 수있는 방법을 우리는 내일을 볼 수 있습니다
그에서 더 흥미로운 것들.

230
00:10:45,460 --> 00:10:47,590
>> 그러나 아무것도이다 그
물리적으로 이동할 수있어

231
00:10:47,590 --> 00:10:51,010
확실히 느리게 갈 것입니다
빛의 속도보다

232
00:10:51,010 --> 00:10:53,250
이론에있는 무슨이다
전자가 흐를 수 있습니다

233
00:10:53,250 --> 00:10:54,620
현실적으로 상당히하지만.

234
00:10:54,620 --> 00:10:56,900
그래서 기계 devices-- 훨씬 느리다.

235
00:10:56,900 --> 00:10:58,320
그러나 그들은 저렴입니다.

236
00:10:58,320 --> 00:11:00,944
그리고 당신은 너무 많이 들어갈 수
그 내부에 더 많은 데이터.

237
00:11:00,944 --> 00:11:03,110
그래서 사실이
세계 어떤 존재

238
00:11:03,110 --> 00:11:06,840
가상 메모리라고,
이 같은 하드 디스크를 사용

239
00:11:06,840 --> 00:11:10,160
그것은 RAM을 것처럼
사용자에게 투명한

240
00:11:10,160 --> 00:11:15,320
간단하게 데이터를 이동하여
RAM에서 하드 디스크,

241
00:11:15,320 --> 00:11:18,714
당신이 필요로 할 때 다음 다시 이동
그것은 다시 둔화를 만듭니다.

242
00:11:18,714 --> 00:11:21,380
당신은 말 그대로을 가지고 있기 때문에
한 장소에서 다른 장소로 복사합니다.

243
00:11:21,380 --> 00:11:25,100
그리고 그 일이 당신에 복사하고 있고
에서는 RAM보다 실제로 느립니다

244
00:11:25,100 --> 00:11:26,150
당신이 원하는 곳이 될 수 있습니다.

245
00:11:26,150 --> 00:11:29,030
>> 대체 솔루션 here--
당신이 천천히 마음에 들지 않는 경우,

246
00:11:29,030 --> 00:11:32,014
당신의 가상 메모리입니다
과로되는 종류,

247
00:11:32,014 --> 00:11:33,680
이 문제에 대한 또 다른 해결책은 무엇인가?

248
00:11:33,680 --> 00:11:35,260
>> 청중 : [들리지]

249
00:11:35,260 --> 00:11:37,260
DAVID 마란 : 음,
가상 메모리를 증가

250
00:11:37,260 --> 00:11:39,135
우리는이에하자 것
더 큰 규모.

251
00:11:39,135 --> 00:11:43,540
우리는 가치 66기가바이트를 처리 할 수
메모리 요구 사항, 또는 67기가바이트의.

252
00:11:43,540 --> 00:11:45,830
하지만 내가 싫어하는 가정
사실이 천천히 아래로,

253
00:11:45,830 --> 00:11:49,380
나는 가상 해제 할
메모리 즉도 가능하다면,

254
00:11:49,380 --> 00:11:52,350
또 내가 무엇을 던질 수
이 문제를 해결하기 위해,

255
00:11:52,350 --> 00:11:56,900
나는 더 많은 사용자를 처리 할 위치
더 많은 메모리 요구 사항

256
00:11:56,900 --> 00:11:59,100
나는 물리적 순간에있는 것보다?

257
00:11:59,100 --> 00:12:02,600
>> 청중 : [들리지]

258
00:12:02,600 --> 00:12:04,800

259
00:12:04,800 --> 00:12:06,140
>> DAVID 마란 : 불행하게도 없습니다.

260
00:12:06,140 --> 00:12:09,850
CPU와 그들이있어 코어 그래서
으로는 유한 한 자원이다.

261
00:12:09,850 --> 00:12:13,280
그리고 그 상황에서 아무 아날로그가 없습니다.

262
00:12:13,280 --> 00:12:14,990
하지만 좋은 질문입니다.

263
00:12:14,990 --> 00:12:19,270
그래서 너무, 경우, 명확하게하기
이 컴퓨터는 내부,

264
00:12:19,270 --> 00:12:24,510
RAM의 스틱 모양으로,의 말을하자
이 항아리 같은 그래서 우리는이 RAM 전화 할게.

265
00:12:24,510 --> 00:12:27,070
이상 여기서 하드 디스크 드라이브이다.

266
00:12:27,070 --> 00:12:30,130
그리고 난 그냥이를 그릴 수 있습니다
그림으로 작은 원으로.

267
00:12:30,130 --> 00:12:33,740
0과 1은 모두에있다
these-- 데이터, 우리는 그것을 일반화 수 있습니다.

268
00:12:33,740 --> 00:12:38,030
>> 본질적으로 사용자가이면
같은 응용 프로그램을 실행,

269
00:12:38,030 --> 00:12:46,070
,의 말이 필요합니다 웹 사이트를하자
사용자 당 많은 RAM, 내가 무엇을 제안하고있어,

270
00:12:46,070 --> 00:12:48,380
이 일의 방법으로
가상 메모리라고,

271
00:12:48,380 --> 00:12:53,990
단지 일시적으로 이동하는 것입니다
그 여기 그래서 지금 내가

272
00:12:53,990 --> 00:12:57,810
누군가 다른 사람의 메모리를 이동할 수 있습니다
저기 요구 사항.

273
00:12:57,810 --> 00:13:00,420
그리고 그이 끝나면
나는 이상이 다시 복사 할 수 있습니다

274
00:13:00,420 --> 00:13:04,550
그리고 이것에 의해, 이동 간다
제가 다른 곳에서이 원

275
00:13:04,550 --> 00:13:05,050
전부.

276
00:13:05,050 --> 00:13:07,820
>> 그래서 그냥 많이있다
switcheroo, 여기에 테이크 아웃입니다.

277
00:13:07,820 --> 00:13:12,380
그래서 만약 당신이 좋아하지 않아, 당신은하지 않습니다
하드 드라이브에 아무것도 넣어 원하는,

278
00:13:12,380 --> 00:13:16,440
명백한의 종류 무엇
비즈니스 사람의 솔루션

279
00:13:16,440 --> 00:13:19,684
문제 또는 엔지니어에
솔루션, 그 문제에 관해서는, 너무?

280
00:13:19,684 --> 00:13:21,950
>> 청중 : [들리지]

281
00:13:21,950 --> 00:13:24,750
>> 데이비드 마란 : 그래, 말 그대로 의미
이 문제에 돈을 던져.

282
00:13:24,750 --> 00:13:27,541
그리고 실제로, 이것은 완벽
상위 레벨의 일부 SEGUE

283
00:13:27,541 --> 00:13:28,870
클라우드 컴퓨팅의 토론.

284
00:13:28,870 --> 00:13:31,390
이는 많은 동기가되어 있으므로
재정적 인 결정에 의해,

285
00:13:31,390 --> 00:13:33,040
도 반드시 기술되지 않습니다.

286
00:13:33,040 --> 00:13:37,830
RAM의 64 기가가 아니라, 너무 작은 경우,
왜 RAM 128 기가 바이트하지?

287
00:13:37,830 --> 00:13:40,440
왜 RAM 256 기가 바이트하지?

288
00:13:40,440 --> 00:13:41,732
글쎄, 왜?

289
00:13:41,732 --> 00:13:42,608
>> 청중 : [들리지]

290
00:13:42,608 --> 00:13:44,482
DAVID 마란 : 음,
물론, 더 많은 돈을 비용.

291
00:13:44,482 --> 00:13:46,970
그리고 당신은 이미 예비가있는 경우
하드 디스크의 공간을 효과적으로

292
00:13:46,970 --> 00:13:51,407
또는 동등, 하드 디스크 공간이 너무입니다
당신은뿐만 아니라 그것을 사용할 수 있습니다 훨씬 저렴합니다.

293
00:13:51,407 --> 00:13:54,490
그래서 다시,이 거래는 떨어져있다
우리는 오늘 아침에 그 이전 보았다

294
00:13:54,490 --> 00:13:56,656
여기서 정말이 아니다
반드시 정답,

295
00:13:56,656 --> 00:14:01,360
그냥 좋든 나쁘 든 답이있다
당신이 실제로 관심 내용에 따라.

296
00:14:01,360 --> 00:14:04,500
>> 그래서 또한 기술 현실이있다.

297
00:14:04,500 --> 00:14:06,870
나는 컴퓨터를 살 수 없다,
내 지식,

298
00:14:06,870 --> 00:14:09,490
조 기가 바이트
지금의 RAM.

299
00:14:09,490 --> 00:14:11,540
그것은 단지 물리적으로 존재하지 않습니다.

300
00:14:11,540 --> 00:14:13,240
그래서 일부 상한이있다.

301
00:14:13,240 --> 00:14:15,990
그러나 혹시라도 쇼핑을 한 경우
소비자 Mac 또는 PC 용,

302
00:14:15,990 --> 00:14:20,180
또한, 일반적으로있다
기능이 곡선

303
00:14:20,180 --> 00:14:23,410
좋은있을 수 있습니다 경우,
더 나은, 그리고 최고의 컴퓨터.

304
00:14:23,410 --> 00:14:25,730
>> 그리고 한계를 반환
당신의 달러 매수에

305
00:14:25,730 --> 00:14:30,227
최고의 컴퓨터 대
더 나은 컴퓨터

306
00:14:30,227 --> 00:14:32,560
거의 고하지 않을 수 있습니다
조금 더 많은 돈을 지출로

307
00:14:32,560 --> 00:14:35,599
그리고 더 나은 컴퓨터를 점점
좋은 컴퓨터를.

308
00:14:35,599 --> 00:14:38,390
즉, 당신이 지불하고
프리미엄 라인의 상단을 얻을 수 있습니다.

309
00:14:38,390 --> 00:14:40,790
>> 그리고 우리는에서 확인할 수 있습니다 무엇을
클라우드 컴퓨팅의 토론

310
00:14:40,790 --> 00:14:44,940
무슨 일이 매우 흔한 일이다
구글과 같은 일, 어떤 회사

311
00:14:44,940 --> 00:14:50,560
초기 대중화에, 지불되지 않았다
및 비용, 정말 멋진 건물

312
00:14:50,560 --> 00:14:53,540
최대 재미있게 컴퓨터
많은 모든 것이 많은,

313
00:14:53,540 --> 00:15:00,140
오히려 구입하거나 예쁜 건물
겸손 컴퓨터하지만 그들 중 많은,

314
00:15:00,140 --> 00:15:03,280
일반적으로 뭔가를 사용하여
라는 수평 확장 대신

315
00:15:03,280 --> 00:15:04,320
수직 스케일링.

316
00:15:04,320 --> 00:15:08,115
>> 그래서 수직 스케일링은 얻을 의미보다
RAM, 더 많은 디스크, 모든 것을 더,

317
00:15:08,115 --> 00:15:10,187
그리고 일종의 투자
수직으로 하드웨어에

318
00:15:10,187 --> 00:15:12,520
그래서 당신은 단지를 받고있어
최고 중의 최고 중 최고,

319
00:15:12,520 --> 00:15:13,650
하지만 당신은 그것을 위해 지불하고 있습니다.

320
00:15:13,650 --> 00:15:17,580
수평 스케일링 종류의를 얻을 수있다
아래 계층 것들, 좋은 모델,

321
00:15:17,580 --> 00:15:19,922
심지어 더 모델
하지만 그들 중 많은 얻는다.

322
00:15:19,922 --> 00:15:22,630
그러나 바로는 많이 먹을수록
이 경우, 예를 들면 them--,

323
00:15:22,630 --> 00:15:27,330
웹 서버,이 경우 서버
또는 하나의 웹 호스트는 불충분

324
00:15:27,330 --> 00:15:32,310
그럼 그냥 직관적으로는
부하의이 문제에 대한 해결책

325
00:15:32,310 --> 00:15:36,460
서버 또는 과부하
어느 것은 더 큰 서버를 얻을

326
00:15:36,460 --> 00:15:40,770
또는, 내가 대신 여기에 무엇을 제안하고있어
의 말하자면 수직 스케일링,

327
00:15:40,770 --> 00:15:41,920
것, 그거 알아?

328
00:15:41,920 --> 00:15:43,580
다만 이들의 두 번째를 얻을.

329
00:15:43,580 --> 00:15:46,560
아니면 심지어 세 번째를 얻을.

330
00:15:46,560 --> 00:15:48,900
하지만 지금 우리가 만든
공학 문제

331
00:15:48,900 --> 00:15:51,920
이 사업의 본래
나 금융 의사 결정.

332
00:15:51,920 --> 00:15:54,312
엔지니어링 문제는 지금 무엇입니까?

333
00:15:54,312 --> 00:15:56,040
>> 청중 : [들리지]

334
00:15:56,040 --> 00:15:59,740
>> DAVID 마란 : 그래, 어떻게 할
당신은 그들에게 그리고 - 미안 연결?

335
00:15:59,740 --> 00:16:00,651
>> 청중 : [들리지]

336
00:16:00,651 --> 00:16:02,400
DAVID 마란 : 오른쪽,
난 아직도 잔 마셔요 때문에

337
00:16:02,400 --> 00:16:07,280
나는이 그림에 저를 재 도입하는 경우,
이 내 노트북​​ 어딘가에 경우

338
00:16:07,280 --> 00:16:12,400
사이에 지금 인터넷에
저와 우리가 이야기하고있는 회사,

339
00:16:12,400 --> 00:16:17,960
지금은되는, 파악해야
서버는 나는이 특정 사용자를 보낼 수 있습니까?

340
00:16:17,960 --> 00:16:25,090
그리고 다른 사용자가 같은이 있다면
이 다음 여기이 하나,

341
00:16:25,090 --> 00:16:28,850
아마도 이것은 유저 (A)이있다
사용자 B는, 이것은 사용자 C 인

342
00:16:28,850 --> 00:16:34,720
이것은 이제 서버 1, 2, 3--이고
직관적 인 대답은 여기에, 단지 수 있습니다

343
00:16:34,720 --> 00:16:37,460
우리는 1에 사용자 A를 보내드립니다
및 B 2, C 3에.

344
00:16:37,460 --> 00:16:39,900
그리고 우리는 많은 사용자로 3 회를 처리 할 수​​ 있습니다.

345
00:16:39,900 --> 00:16:41,360
>> 하지만 그건 지나친 단순화이다.

346
00:16:41,360 --> 00:16:44,480
어떻게 어디에서 보내 누구로 결정?

347
00:16:44,480 --> 00:16:46,400
그래서이를 통해 추론 해보자.

348
00:16:46,400 --> 00:16:50,110
그래서 컴퓨터한다고 가정
A, B, C 및 고객이다

349
00:16:50,110 --> 00:16:53,972
및 서버 1, 2, 3은
가로로 서버를 확장.

350
00:16:53,972 --> 00:16:55,180
그래서 그들은 종류의 동일입니다.

351
00:16:55,180 --> 00:16:57,200
그들은 모두 같은 소프트웨어를 실행하고 있습니다.

352
00:16:57,200 --> 00:16:59,770
그리고 그들은 모두 같은 일을 할 수 있습니다.

353
00:16:59,770 --> 00:17:01,520
그러나 이유 우리는이
그 중 세 개는 너무하다

354
00:17:01,520 --> 00:17:04,710
우리는 세 가지를 처리​​ 할 수​​있는
한 번에 많은 사람들이 같은 시간.

355
00:17:04,710 --> 00:17:07,960
>> 그래서 우리는 알고 우리의
점심 전에 토론

356
00:17:07,960 --> 00:17:11,460
하드웨어는 사이가 있음
이 노트북 및 서버.

357
00:17:11,460 --> 00:17:14,920
그러나 우리는 그저 일반화합니다
이제 인터넷이나 클라우드있다.

358
00:17:14,920 --> 00:17:18,707
그러나 우리는 내 집에 알고,
홈 라우터는 아마이있다.

359
00:17:18,707 --> 00:17:21,290
서버 근처, 거기에 아마
라우터, DNS 서버, DHCP.

360
00:17:21,290 --> 00:17:24,780
아무것도있을 수 있습니다
우리는이 이야기합니다.

361
00:17:24,780 --> 00:17:33,360
>> 어떻게 우리가 결정하는 시작 수행
사용자 A가 something.com로 진행하면

362
00:17:33,360 --> 00:17:36,630
에 대한 사용자 경로에있는 서버?

363
00:17:36,630 --> 00:17:39,409
우리는 어떻게이 이야기를 시작할 수 있습니까?

364
00:17:39,409 --> 00:17:40,450
청중 :로드 밸런싱?

365
00:17:40,450 --> 00:17:41,120
DAVID 마란 :로드 밸런싱.

366
00:17:41,120 --> 00:17:42,502
그게 무슨 뜻 이니?

367
00:17:42,502 --> 00:17:44,660
>> 청중 : 반환
여기서 가장 사용이

368
00:17:44,660 --> 00:17:47,472
그리고 하나가되는
대부분의 사용 가능한 리소스.

369
00:17:47,472 --> 00:17:49,930
DAVID 마란 : OK, 그래서 저를 보자
하드웨어의 새로운 타입을 소개

370
00:17:49,930 --> 00:17:53,627
우리는 아직 논의하지 않은 것으로, 어떤
정확히,로드 밸런서이다.

371
00:17:53,627 --> 00:17:54,960
이 역시 단지 서버가 될 수 있습니다.

372
00:17:54,960 --> 00:17:58,130
그것은 정확히처럼 보일 수 있습니다
하나는 우리가 잠시 전에 보았다.

373
00:17:58,130 --> 00:18:01,000
로드 밸런서는 정말
소프트웨어의 단지 조각

374
00:18:01,000 --> 00:18:02,660
당신은 하드웨어의 조각에 실행하는 것이.

375
00:18:02,660 --> 00:18:07,310
>> 아니면 같은 공급 업체를 지불 할 수
시트릭스 또는 다른 사람, 시스코 또는 다른 사람.

376
00:18:07,310 --> 00:18:10,465
당신은 자신의 하드웨어에 대한 지불 할 수 있습니다
이는 하드웨어 부하 분산 장치입니다.

377
00:18:10,465 --> 00:18:12,840
그러나 그것은 단지 그들이 의미
로드 균형 조정을 미리 설치

378
00:18:12,840 --> 00:18:15,580
하드웨어에 소프트웨어 및
함께 모두에 판매했다.

379
00:18:15,580 --> 00:18:18,670
그래서 우리는 단지로 그릴 수 있습니다
우리의 목적을 위해 직사각형.

380
00:18:18,670 --> 00:18:22,040
>> 어떻게 지금은 부하 분산을 구현합니까?

381
00:18:22,040 --> 00:18:28,150
즉, 사용자 A가하고자 할 때
어떻게 든 내 사이트, 그들의 요청을 방문

382
00:18:28,150 --> 00:18:31,070
또는 다른, 아마도 이들의 방법으로
우리가 이전에 대해 이야기 라우터,

383
00:18:31,070 --> 00:18:33,750
결국 도달하는 것입니다
이 부하 분산, 다음

384
00:18:33,750 --> 00:18:36,210
라우팅과 같은 결정을 내릴 필요가있다.

385
00:18:36,210 --> 00:18:38,320
그러나 종류에 대한 라우팅 있어요
더 높은 목적의 지금.

386
00:18:38,320 --> 00:18:40,361
그것은 것에 대해 단지 아니에요
점 A에서 점에

387
00:18:40,361 --> 00:18:44,730
B.이 결정에 관하여 어떤
점 B는 them-- 중 최고입니다

388
00:18:44,730 --> 00:18:46,660
1, 2 또는 3이 경우.

389
00:18:46,660 --> 00:18:51,000
>> 그래서 여부를 결정 어떻게
3, 2, 1로 이동?

390
00:18:51,000 --> 00:18:55,180
어떤 힘이 블랙 박스, 너무
말, 내부에 일을 할 수?

391
00:18:55,180 --> 00:18:57,880
이것도 또 다른 예입니다
추상화의 컴퓨터 과학.

392
00:18:57,880 --> 00:19:02,410
말 그대로로드 밸런서를 그린
검정 잉크의 블랙 박스로, 내부

393
00:19:02,410 --> 00:19:05,300
그 중 몇 가지 흥미로운입니다
논리, 또는 마법도,

394
00:19:05,300 --> 00:19:07,840
그 중 가야합니다
decision-- 1, 2 또는 3.

395
00:19:07,840 --> 00:19:12,220
상기 입력은 A.이고

396
00:19:12,220 --> 00:19:13,442
>> 청중 : [들리지]

397
00:19:13,442 --> 00:19:14,400
DAVID 마란 : 미안 해요?

398
00:19:14,400 --> 00:19:14,770
청중 : [들리지]

399
00:19:14,770 --> 00:19:18,310
DAVID 마란 : 좋아, 어떻게 우리가 수도
거래의 유형을 분류

400
00:19:18,310 --> 00:19:19,095
이리?

401
00:19:19,095 --> 00:19:23,772
>> 청중 : 웹 페이지를보기
데이터베이스 쿼리 대.

402
00:19:23,772 --> 00:19:24,980
DAVID 마란 : OK, 그건 좋다.

403
00:19:24,980 --> 00:19:29,210
그래서 어쩌면이 사용자 A
웹 페이지를 표시하려고합니다.

404
00:19:29,210 --> 00:19:32,954
그리고 어쩌면, 심지어 정적 콘텐츠입니다
어느 경우 거의 변경되지 않는 뭔가.

405
00:19:32,954 --> 00:19:34,870
그리고는 것 같아
아주 간단한 조작.

406
00:19:34,870 --> 00:19:38,260
그래서 어쩌면 우리가 임의로거야,
하지만 합리적으로, 말

407
00:19:38,260 --> 00:19:42,750
서버 (1)는, 인생에서 자신의 목적이다
정적 인 컨텐츠를 제공하기 위해,

408
00:19:42,750 --> 00:19:45,150
파일이 드물게 경우 적 변화.

409
00:19:45,150 --> 00:19:46,870
아마 페이지의 이미지이다.

410
00:19:46,870 --> 00:19:50,180
어쩌면 그것은 페이지의 텍스트 나
재미 물건 등의 종류,

411
00:19:50,180 --> 00:19:52,460
트랜잭션 아무것도, 동적 아무것도.

412
00:19:52,460 --> 00:19:57,000
>> 반대로, 검사 사용자 A이면
자신의 쇼핑 카트의 밖으로 그

413
00:19:57,000 --> 00:20:00,972
데이터베이스를 필요로 곳은 저장하기
잘, 그 거래를 기억

414
00:20:00,972 --> 00:20:02,680
어쩌면 요청
서버 2로 이동합니다.

415
00:20:02,680 --> 00:20:03,610
그래서 좋다.

416
00:20:03,610 --> 00:20:07,010
그래서 우리는 균형을 기반으로로드 할 수 있습니다
요청의 유형에 대한.

417
00:20:07,010 --> 00:20:08,278
우리는 이것을 어떻게 다른 할 수 있는가?

418
00:20:08,278 --> 00:20:13,690

419
00:20:13,690 --> 00:20:14,686
다른 것이라면 무엇

420
00:20:14,686 --> 00:20:17,382
>> 대상 : 서버의 바탕으로
활용 및 용량.

421
00:20:17,382 --> 00:20:18,340
DAVID 마란 : 오른쪽, OK.

422
00:20:18,340 --> 00:20:19,950
그래서 당신은, 카림을 그 앞에서 언급.

423
00:20:19,950 --> 00:20:26,850
그래서 우리는 몇 가지 입력을 무엇을 제공하는 경우
서버 1, 2 중 [들리지]에,

424
00:20:26,850 --> 00:20:32,070
3 그래서이 부하 분산에
그들은 단지 지속적으로 알리는 것

425
00:20:32,070 --> 00:20:36,420
자신의 상태가 무엇인지 부하 분산?

426
00:20:36,420 --> 00:20:39,842
이봐, 마찬가지로, 부하 분산,
나는 50 %의 사용률입니다.

427
00:20:39,842 --> 00:20:41,550
즉, 내가 가진
절반 많은 사용자

428
00:20:41,550 --> 00:20:43,520
사실 지금 ​​처리 할 수​​있다.

429
00:20:43,520 --> 00:20:45,480
이봐, 부하 분산, 난
100 % 활용에서.

430
00:20:45,480 --> 00:20:47,929
이봐, 부하 분산, 0 % 활용.

431
00:20:47,929 --> 00:20:49,970
로드 밸런서, 그것의 경우
방법으로 설계된 것을

432
00:20:49,970 --> 00:20:53,990
그 의견에 걸릴 수있다
입력으로서, 그 다음 수

433
00:20:53,990 --> 00:20:57,420
결정, 우, 숫자 2는 100 %입니다.

434
00:20:57,420 --> 00:21:01,440
내가 그에게 미래의 요청을 보내 보자
사용자가 아닌 이미 연결되어 있습니다.

435
00:21:01,440 --> 00:21:02,360
이 사람은 0 %에 있어요.

436
00:21:02,360 --> 00:21:03,940
의 그에게 많은 트래픽을 보낼 수 있습니다.

437
00:21:03,940 --> 00:21:05,480
이 사람은 그가 50 % 말했습니다.

438
00:21:05,480 --> 00:21:08,080
의 그에게 약간의 트래픽을 보낼 수 있습니다.

439
00:21:08,080 --> 00:21:12,012
>> 그래서, 성분이 될 그 것
우리는 계정에 부하가 걸릴 수 있습니다.

440
00:21:12,012 --> 00:21:13,470
그리고 시간이 지남에 따라 변경하는 것입니다.

441
00:21:13,470 --> 00:21:14,678
그래서 결정이 변경됩니다.

442
00:21:14,678 --> 00:21:17,350
그래서 정말 좋은 기술이다,
일반적으로 사용되는 하나.

443
00:21:17,350 --> 00:21:18,410
우리는 다른 무엇을 할 수 있습니까?

444
00:21:18,410 --> 00:21:20,380
그리고 이제 실제로 그냥 여기 요약 할 수 있습니다.

445
00:21:20,380 --> 00:21:29,510
그래서 결정은 여기에있을 수
트래픽의 유형으로, 내가 전화 할게.

446
00:21:29,510 --> 00:21:32,220
이는 부하에 기초 할 수있다.

447
00:21:32,220 --> 00:21:34,692
어디 보자 경우 우리는 할 수 없습니다
몇 가지 다른 마련.

448
00:21:34,692 --> 00:21:35,934
>> 청중 : [들리지]

449
00:21:35,934 --> 00:21:36,850
DAVID 마란 : 위치.

450
00:21:36,850 --> 00:21:37,724
그래서 좋은 하나입니다.

451
00:21:37,724 --> 00:21:40,880
그래서 당신은 어떻게 할 수 location--
그 정보를 활용?

452
00:21:40,880 --> 00:21:44,317
>> 청중 : [들리지]

453
00:21:44,317 --> 00:21:54,140

454
00:21:54,140 --> 00:21:57,040
>> DAVID 마란 : 아, 좋다.

455
00:21:57,040 --> 00:21:59,450
약 몇 밀리 초
그것은으로 감소 것

456
00:21:59,450 --> 00:22:02,466
우리가 이것을보고 내용을 기반으로
아침, 당신은 말할 것?

457
00:22:02,466 --> 00:22:04,330
>> 청중 : [들리지]

458
00:22:04,330 --> 00:22:06,550
>> DAVID 마란 : 음, 기반
추적 노선

459
00:22:06,550 --> 00:22:09,070
우리는 단지, 이는 이전에보고
무언가의 거친 측정,

460
00:22:09,070 --> 00:22:11,800
적어도 얼마나 오래 걸리는
데이터가 A에서 B로 취득하는

461
00:22:11,800 --> 00:22:16,140
,이었다 지역 아무것도처럼 무엇을 느낀다
74 밀리 초와 같은 줄 또는 걸릴?

462
00:22:16,140 --> 00:22:19,200
그리고 아무것도 100 플러스,
200 플러스는 해외 아마이었다.

463
00:22:19,200 --> 00:22:22,110
그리고 그 형에 기초
가정하는 것이 합리적 보인다

464
00:22:22,110 --> 00:22:25,310
그 미국에있는 사용자에 대한
유럽​​ 서버에 액세스하기

465
00:22:25,310 --> 00:22:28,900
두 번 또는 세 번 걸릴 수 있습니다
한, 심지어 밀리 초,

466
00:22:28,900 --> 00:22:31,280
그것은 그 경우 수행하는 것보다
서버가 여기에 있었다

467
00:22:31,280 --> 00:22:33,370
지리적으로, 또는 그 반대의 경우도 마찬가지.

468
00:22:33,370 --> 00:22:35,120
그래서 내가 제안하는 경우
일찍 특히

469
00:22:35,120 --> 00:22:37,880
당신이 한 번이 200 밀리 초를 건너
임계 값을 제공하거나 가지고,

470
00:22:37,880 --> 00:22:39,210
인간은 주목하기 시작 않습니다.

471
00:22:39,210 --> 00:22:42,960
그리고 추적 경로는 그냥
원시, 재미 데이터를 가정.

472
00:22:42,960 --> 00:22:46,570
당신은 웹 사이트가있는 경우에이
이미지 나 동영상을 다운로드하는 사용자를 얻을 수

473
00:22:46,570 --> 00:22:49,150
파일, 텍스트의 제비,
후속 요청.

474
00:22:49,150 --> 00:22:53,116
우리가 방문했을 때 우리가보고, 무엇을했다
그것은, 페이스 북 또는 이전 아마존,

475
00:22:53,116 --> 00:22:55,490
물건의 전체 많아요
즉, 다운로드 할 필요가있다.

476
00:22:55,490 --> 00:22:56,573
그래서 추가 할거야.

477
00:22:56,573 --> 00:23:00,259
그래서 다중 초 수도
무리하지.

478
00:23:00,259 --> 00:23:01,800
그래서 좋은, 지리 한 성분이다.

479
00:23:01,800 --> 00:23:05,920
같은 사실을 회사에 따라서
아카 마이, 당신이 그들을 들어 본 적이 있다면,

480
00:23:05,920 --> 00:23:10,000
또는 다른 사람은 긴 촬영 한
계정에 지리.

481
00:23:10,000 --> 00:23:14,170
그리고 그것은 밝혀 있다는 자연으로
IP 주소, 랩탑의 IP 주소,

482
00:23:14,170 --> 00:23:18,277
당신은 약간의 확률로, 추론 할 수있다
당신은 세계 어디에.

483
00:23:18,277 --> 00:23:20,110
그리고 사실에있다
타사 서비스 당신에게

484
00:23:20,110 --> 00:23:24,480
데이터베이스를 유지 누가 지불 할 수 있습니다
IP 주소와 지역의

485
00:23:24,480 --> 00:23:28,660
높은 신뢰성이 될 것와 그
사실 어디 세계에서 물었을 때

486
00:23:28,660 --> 00:23:30,090
이 IP 주소는?

487
00:23:30,090 --> 00:23:32,130
>> 그리고 사실 어떤
다른 기업이 사용합니까?

488
00:23:32,130 --> 00:23:35,900
당신은 훌루 또는 넷플릭스, 만약이있는 경우
혹시, 해외 여행을했습니다

489
00:23:35,900 --> 00:23:38,640
당신은 뭔가를보고 시도
훌루, 당신은 미국에서하지 않은,

490
00:23:38,640 --> 00:23:41,280
당신은 메시지가 표시 될 수 있습니다
하지 미국에서 말.

491
00:23:41,280 --> 00:23:43,208
죄송합니다, 당신은이 콘텐츠를 볼 수 없습니다.

492
00:23:43,208 --> 00:23:44,420
>> 청중 : [들리지]

493
00:23:44,420 --> 00:23:46,020
>> DAVID 마란 : 오, 정말?

494
00:23:46,020 --> 00:23:48,480
그러나 네, 그래서 실제로입니다
완벽한 응용 프로그램

495
00:23:48,480 --> 00:23:51,060
매우 기술적 인 뭔가
실제 문제.

496
00:23:51,060 --> 00:23:55,100
당신은 VPN에 있다면
유럽​​이나 아시아 또는 어디서나

497
00:23:55,100 --> 00:23:57,950
기업의 세계
뉴욕에 본사를

498
00:23:57,950 --> 00:24:00,670
당신이 어디에 있든 또는, 당신은있어
모양을 만들 것

499
00:24:00,670 --> 00:24:03,580
외부 웹 사이트에 그
당신은 뉴욕에서 실제로있어

500
00:24:03,580 --> 00:24:05,660
심지어 당신이있어 비록
물리적으로 아주 멀리.

501
00:24:05,660 --> 00:24:08,057
>> 이제 사용자는 가고있다
당신이 떨어져 분명히 거 알아.

502
00:24:08,057 --> 00:24:11,140
하지만 당신도 있기 때문에 그것을 느낄거야
이러한 추가 시간 (밀리 초).

503
00:24:11,140 --> 00:24:14,510
추가적인 거리 및
VPN을에서 일어나고있는 암호화

504
00:24:14,510 --> 00:24:15,760
일을 천천히 것입니다.

505
00:24:15,760 --> 00:24:17,680
그래서 수도 있고하지 않을 수
좋은 경험이 될.

506
00:24:17,680 --> 00:24:21,050
그러나 훌루와 넷플릭스 볼거야
당신은, 뉴욕에서 어딘가에 앉아

507
00:24:21,050 --> 00:24:23,817
당신은 명확하게 수집 한있다.

508
00:24:23,817 --> 00:24:25,150
그에게 완벽한 무엇 솔루션입니다.

509
00:24:25,150 --> 00:24:28,490
>> 좋아, 그래서 지리학 한 결정이다.

510
00:24:28,490 --> 00:24:32,290
또 우리는 방법을 결정하는 데 사용할 수 있습니다
A, B, 그리고 C에서 트래픽을 라우팅

511
00:24:32,290 --> 00:24:37,040
1, 2 및 3에 다시 넣어
에 엔지니어링 모자?

512
00:24:37,040 --> 00:24:38,850
이것은 모든 매우 복잡 소리.

513
00:24:38,850 --> 00:24:41,490
어, 난 어디 모르겠어요
그 구현을 시작합니다.

514
00:24:41,490 --> 00:24:44,450
나에게 간단 뭔가를 제공합니다.

515
00:24:44,450 --> 00:24:48,160
무엇 간단한 방법
이 결정을 만드는 방법?

516
00:24:48,160 --> 00:24:49,840
>> 대상 : 서버가 사용할 수 있습니까?

517
00:24:49,840 --> 00:24:51,650
>> DAVID 마란 : 서버가 사용할 수 있습니까?

518
00:24:51,650 --> 00:24:53,970
그래서 나쁘지 않다.

519
00:24:53,970 --> 00:24:54,470
그게 좋다.

520
00:24:54,470 --> 00:24:56,260
즉, 부하의 nuancing의 일종입니다.

521
00:24:56,260 --> 00:24:58,070
그럼 부하 범주에 해당을 유지 할 수 있습니다.

522
00:24:58,070 --> 00:25:00,010
사용 가능한 경우, 그냥 해요
이 데이터를 전송하는 것.

523
00:25:00,010 --> 00:25:01,343
하지만 신속하게 역화 할 수있다.

524
00:25:01,343 --> 00:25:05,720
내가 그 논리를 사용하는 경우 때문에, 나는 경우
항상 일이 당신이있는 질문에 당신이 있습니다,

525
00:25:05,720 --> 00:25:08,970
대답은 '예 항상 경우에 있으며,
나는 트래픽의 100 %를 보낼거야

526
00:25:08,970 --> 00:25:11,060
다른 사람에 그에게, 0 %.

527
00:25:11,060 --> 00:25:14,430
그리고 어떤 점에서, 우리는 칠거야
이 둔화 또는 사이트를 사용할 수 없습니다.

528
00:25:14,430 --> 00:25:17,630
그렇다면보다 약간 낫다
그 그러나 아주 간단 여전히

529
00:25:17,630 --> 00:25:22,412
모든 촬영만큼 영리하지
계정에 이러한 추가 데이터?

530
00:25:22,412 --> 00:25:23,992
>> 대상 : 서버 당 비용.

531
00:25:23,992 --> 00:25:25,200
DAVID 마란 : 서버 당 비용.

532
00:25:25,200 --> 00:25:28,010
좋아, 그럼 내가 있음을 던져 보자
너무 부하 범주입니다.

533
00:25:28,010 --> 00:25:30,790
당신이 확인할 수있는 것들 때문에
회사는 너무 ... 당신의 경우

534
00:25:30,790 --> 00:25:32,790
서버를 업그레이드
시간이 지남에 이상을 구입,

535
00:25:32,790 --> 00:25:36,242
정확히 얻을 수 없을 수도 있습니다
동일한 하드웨어 버전.

536
00:25:36,242 --> 00:25:37,450
이 최신이 떨어지는 때문입니다.

537
00:25:37,450 --> 00:25:38,491
당신은 더 이상 살 수 없다.

538
00:25:38,491 --> 00:25:39,360
가격이 변경됩니다.

539
00:25:39,360 --> 00:25:42,500
>> 그래서 당신은 서로 다른 서버가있을 수 있습니다
클러스터에서, 말하자면.

540
00:25:42,500 --> 00:25:43,890
즉, 완전히 괜찮아요.

541
00:25:43,890 --> 00:25:47,100
그러나 내년의 하드웨어
두 배 빠른 수 있습니다,

542
00:25:47,100 --> 00:25:49,390
올해의 두 배 수.

543
00:25:49,390 --> 00:25:51,500
그래서 우리는 그것을 던져 수 있습니다
부하 범주에.

544
00:25:51,500 --> 00:25:54,260
1 사이의 피드백 루프,
로드 밸런서에서 2, 3

545
00:25:54,260 --> 00:25:57,650
확실히 말할 수있는,
이봐, 나는 50 %의 용량입니다.

546
00:25:57,650 --> 00:26:00,100
하지만 방법에 의해, 또한 I
두 배 많은 코어를 가지고있다.

547
00:26:00,100 --> 00:26:02,319
이 정보를 사용합니다.

548
00:26:02,319 --> 00:26:05,110
심지어 simpler--이는 것입니다
컴퓨터 과학의 테마가 될 수 있습니다.

549
00:26:05,110 --> 00:26:08,990
의심하거나 간단한을 할 때 때
일반적으로 잘 작동 솔루션

550
00:26:08,990 --> 00:26:12,730
시간이 지남에 따라, 같은를 선택하지 마십시오
서버의 모든 시간,하지만 choose--

551
00:26:12,730 --> 00:26:14,039
>> 청중 : 임의의 하나?

552
00:26:14,039 --> 00:26:15,330
DAVID 마란 : --a 임의의 서버입니다.

553
00:26:15,330 --> 00:26:16,780
네, 둘 중 하나를 선택합니다.

554
00:26:16,780 --> 00:26:21,160
그래서 랜덤은 실제로
이 매우 강력한 성분

555
00:26:21,160 --> 00:26:23,170
컴퓨터 과학,
및 엔지니어링에 더 많은

556
00:26:23,170 --> 00:26:27,160
일반적으로, 특히 당신이 원하는 경우
빠르고 간단한 결정을 내릴

557
00:26:27,160 --> 00:26:30,480
모든으로 복잡하지
이러한 매우 영리하지만,의

558
00:26:30,480 --> 00:26:34,330
필요로 매우 영리 솔루션
더욱 공학, 모든

559
00:26:34,330 --> 00:26:36,220
더 많은 생각, 때
정말, 내가 왜하지

560
00:26:36,220 --> 00:26:39,200
단지 종류의 동전을 플립, 또는
셋이 경우 동전 양면

561
00:26:39,200 --> 00:26:41,690
1, 2, 3으로 이동할지 결정?

562
00:26:41,690 --> 00:26:45,610
>> 즉, 확률 역화 수 있습니다
하지만 가능성 등 많은

563
00:26:45,610 --> 00:26:48,860
다시 머리를 내리고 및
다시 또 다시

564
00:26:48,860 --> 00:26:53,870
다시 다시 가능하다
reality-- 슈퍼, 슈퍼 가능성.

565
00:26:53,870 --> 00:26:58,170
그래서 시간이 지남에, 확률은
그냥 무작위로 사용자에게 전송

566
00:26:58,170 --> 00:27:00,660
1, 2, 3에가는
완벽하게 잘 해결.

567
00:27:00,660 --> 00:27:03,380
그리고 이것이 기술이다
일반적으로 라운드 로빈으로 알려져 있습니다.

568
00:27:03,380 --> 00:27:05,160
>> 아니면 실제로 그 라운드 로빈 아니다.

569
00:27:05,160 --> 00:27:06,980
이는 임의의 방법이 될 것이다.

570
00:27:06,980 --> 00:27:09,250
그리고 당신은 심지어 수 있도록하려면
보다 약간 단순

571
00:27:09,250 --> 00:27:12,820
라운드 로빈은 첫 번째 사람이가는 일 것이다
1, 두 번째 사람 2, 세 번째 사람

572
00:27:12,820 --> 00:27:16,056
3, 4 번째 1.

573
00:27:16,056 --> 00:27:17,430
그리고 거기에 라운드 로빈있다.

574
00:27:17,430 --> 00:27:19,580
당신은 종류의 사이클에서 주변에 이동합니다.

575
00:27:19,580 --> 00:27:21,300
>> 지금, 당신은 그것에 대해 스마트해야합니다.

576
00:27:21,300 --> 00:27:26,490
당신은 맹목적에 사용자를 보내지한다
서버 수의 경우 어떤 경우 하나?

577
00:27:26,490 --> 00:27:30,060

578
00:27:30,060 --> 00:27:32,870
그것은 최대 용량의 경우, 또는
더 이상 그냥 반응 없습니다.

579
00:27:32,870 --> 00:27:35,270
그래서 이상적으로 당신은 몇 가지를 원한다
피드백 루프의 종류.

580
00:27:35,270 --> 00:27:38,040
그렇지 않으면, 당신은 모든 전송
막 다른 골목에 사용자의.

581
00:27:38,040 --> 00:27:40,790
그러나 역시 고려 될 수있다.

582
00:27:40,790 --> 00:27:46,520
>> 그래서 아래의 가치를 인정하지 않아
단지 자주 인, 임의성

583
00:27:46,520 --> 00:27:48,970
이러한 종류의 문제에 대한 해결책.

584
00:27:48,970 --> 00:27:51,580
그리고 우리는 라운드 로빈을 쓸 것이다.

585
00:27:51,580 --> 00:27:55,090
그래서 일부 기업 구현 어떻게
라운드 로빈 또는 임의성

586
00:27:55,090 --> 00:27:56,840
또는 이러한 결정의?

587
00:27:56,840 --> 00:28:01,840
그런데 불행하게도, 그들은
이 같은 일을.

588
00:28:01,840 --> 00:28:03,660
내가 다른 빠른 스크린 샷을 올려 보자.

589
00:28:03,660 --> 00:28:13,052

590
00:28:13,052 --> 00:28:14,470
>> 사실,의​​ 두 가지 작업을 수행 할 수 있습니다.

591
00:28:14,470 --> 00:28:17,420

592
00:28:17,420 --> 00:28:21,370
나는 우리가 왜 왔는지 모른다
이 요리를 모두 받고.

593
00:28:21,370 --> 00:28:22,280
그것은 매우 이상하다.

594
00:28:22,280 --> 00:28:31,714

595
00:28:31,714 --> 00:28:33,630
좋아, 내가 정말
원하는는 스크린 샷입니다.

596
00:28:33,630 --> 00:28:36,990

597
00:28:36,990 --> 00:28:40,100
그 이상이다.

598
00:28:40,100 --> 00:28:42,930
좋아, 그래서 나는이를 스푸핑 할 수 있습니다.

599
00:28:42,930 --> 00:28:46,080
나는 얼마나 멀리 모르겠어요
나는 스크롤을 유지하려는.

600
00:28:46,080 --> 00:28:53,220
>> 그래서 매우 일반적으로, 당신은 자신을 찾을 수 있습니다
www.2.acme.com 같은 주소,

601
00:28:53,220 --> 00:28:56,030
아마 www.3 또는 4-5.

602
00:28:56,030 --> 00:28:57,424
그리고 이것에 대한 눈을 유지.

603
00:28:57,424 --> 00:28:58,590
당신은 자주 볼 수 없습니다.

604
00:28:58,590 --> 00:29:02,621
당신이 할 때, 그것의 종류에 경향
더 큰, 나이, stodgier 회사 수

605
00:29:02,621 --> 00:29:05,370
기술적으로 정말 그렇지 않은
그들이 무슨 일을하는지 아는 것 같다.

606
00:29:05,370 --> 00:29:08,150
그리고 당신은 기술 회사에서이 참조
때때로, 오래된 것.

607
00:29:08,150 --> 00:29:09,270
>> 그래서 그들은거야?

608
00:29:09,270 --> 00:29:11,890
그들은 어떻게 구현하는
로드 밸런싱, 그것은 것 같다?

609
00:29:11,890 --> 00:29:15,986
당신은 자신을 찾을 경우
사용자 입력 www.something.com,

610
00:29:15,986 --> 00:29:19,760
갑자기 당신에있어
www.2.something.com,

611
00:29:19,760 --> 00:29:21,866
어떻게 자신의 부하가
균형은 아마 다?

612
00:29:21,866 --> 00:29:22,741
청중 : [들리지]

613
00:29:22,741 --> 00:29:28,210

614
00:29:28,210 --> 00:29:31,079
>> DAVID 마란 : 네, 그래서
로드 밸런서는 아마도입니다

615
00:29:31,079 --> 00:29:33,870
중 하나에 기초하여 결정을 내리기
processes-- 제작이 결정

616
00:29:33,870 --> 00:29:35,210
정말 어떤 문제가되지 않습니다.

617
00:29:35,210 --> 00:29:38,650
하지만 같은 많은 그려진 한
여기 보드 번호,

618
00:29:38,650 --> 00:29:40,650
서버는 없습니다
1, 2, 3을했다.

619
00:29:40,650 --> 00:29:43,870
그들은 아마도라는거야
www1, 웹 사이트는 LaCie의 공식 웹 사이트, www3.

620
00:29:43,870 --> 00:29:47,200
그리고 그 내부를 밝혀
HTTP 요청이 특징이다.

621
00:29:47,200 --> 00:29:48,950
그리고 난 갈거야
다음과 같이이 문제를 시뮬레이션 할 수 있습니다.

622
00:29:48,950 --> 00:29:53,230
>> 나는 그 같은을 열거야
다만 이전과 개발자 네트워크 탭

623
00:29:53,230 --> 00:29:55,560
그래서 우리는 무슨 일이 일어나고 있는지 볼 수 있습니다
후드 아래에.

624
00:29:55,560 --> 00:29:57,130
나는 화면을 취소하겠습니다.

625
00:29:57,130 --> 00:30:03,420
그리고,하자 갈거야
, http://harvard.edu을 말한다.

626
00:30:03,420 --> 00:30:06,560
지금 무엇을위한
사업상의 이유로, 하버드

627
00:30:06,560 --> 00:30:08,930
많은 같이 결정했다,
많은 다른 웹 사이트,

628
00:30:08,930 --> 00:30:12,712
표준화하기 위해
www.harvard.edu에 웹 사이트

629
00:30:12,712 --> 00:30:14,420
두 기술에 대한
마케팅 이유.

630
00:30:14,420 --> 00:30:16,326
이 글은 종류의 단지
유행은 www가있을 수 있습니다.

631
00:30:16,326 --> 00:30:20,500
>> 그래서 하버드 서버가있다
어떻게 든 사용자를 리디렉션합니다,

632
00:30:20,500 --> 00:30:23,830
나는에서 자꾸으로
다른 하나의 URL.

633
00:30:23,830 --> 00:30:24,670
그것은 어떻게 작동합니까?

634
00:30:24,670 --> 00:30:26,740
글쎄, 내가 가서 Enter 키를 누르십시오 수 있습니다.

635
00:30:26,740 --> 00:30:30,830
그리고 실제로 빠르게 URL을 통지
www.harvard.edu로 변경되었습니다.

636
00:30:30,830 --> 00:30:35,560
이 다시 스크롤 나를 보자
역사와이 디버그를 클릭

637
00:30:35,560 --> 00:30:37,650
진단 정보, 당신이됩니다.

638
00:30:37,650 --> 00:30:39,170
내 요청 살펴 보자.

639
00:30:39,170 --> 00:30:41,020
>> 그래서 여기에 내가 만든 요청입니다.

640
00:30:41,020 --> 00:30:44,870
그리고 그것은 종류와 일치의 발견
의 내가 전에 페이스 북 만든 요청합니다.

641
00:30:44,870 --> 00:30:48,010
그러나, 응답을 통지.

642
00:30:48,010 --> 00:30:50,430
무엇에 달라
응답이 시간?

643
00:30:50,430 --> 00:30:51,890
>> 청중 : [들리지]

644
00:30:51,890 --> 00:30:54,290
>> 데이비드 마란 : 네, 그래서는 200 OK 아니다.

645
00:30:54,290 --> 00:30:56,130
그것은 아니에요 찾을 수 없음 404.

646
00:30:56,130 --> 00:31:00,150
그것은 영구 이동 301의 어떤
말의 재미 방법의 종류,

647
00:31:00,150 --> 00:31:05,270
하버드 올렸 및 이동
다른 곳에서 www.harvard.edu합니다.

648
00:31:05,270 --> 00:31:08,220
301을 의미하는
이 리디렉션입니다.

649
00:31:08,220 --> 00:31:12,812
어디해야 사용자에게
분명히 리디렉션?

650
00:31:12,812 --> 00:31:15,520
의 추가 재미있는 이야기가있다
그 봉투 안에 정보를 제공합니다.

651
00:31:15,520 --> 00:31:19,650
그리고이 라인의 각 지금 것
HTTP 헤더를 호출 시작합니다.

652
00:31:19,650 --> 00:31:23,620
헤더는 키 값입니다
뭔가 대장 뭔가를 pair--.

653
00:31:23,620 --> 00:31:24,850
그것은 정보의 조각입니다.

654
00:31:24,850 --> 00:31:27,131
어디 새를해야
위치는 분명히있을?

655
00:31:27,131 --> 00:31:31,120

656
00:31:31,120 --> 00:31:33,692
마지막 줄을 주목하라
모든 헤더 중.

657
00:31:33,692 --> 00:31:34,940
>> 청중 : [들리지]

658
00:31:34,940 --> 00:31:37,148
>> DAVID 마란 : 네, 그래서 거기에
추가 정보.

659
00:31:37,148 --> 00:31:40,120
내가 강조했던 첫 번째 줄
301 영구적으로 이동했다.

660
00:31:40,120 --> 00:31:42,820
음, 어디는 이동?

661
00:31:42,820 --> 00:31:45,340
마지막 line-- 그들은하지 않습니다
이 순서로 갖는다.

662
00:31:45,340 --> 00:31:47,020
그것은 임의의 수 있습니다.

663
00:31:47,020 --> 00:31:52,120
위치 콜론 이봐, 의미
브라우저는, 대신에이 URL로 이동합니다.

664
00:31:52,120 --> 00:31:55,180
>> 그래서 브라우저는 HTTP 리디렉션 이해합니다.

665
00:31:55,180 --> 00:31:57,540
그리고 이것은 매우, 매우이다
수신 거부의 일반적인 방법

666
00:31:57,540 --> 00:31:59,680
다른 한 곳에서 사용자.

667
00:31:59,680 --> 00:32:02,660
예를 들어, 당신은 이제까지 시도했다 경우
당신이하지 않은 웹 사이트를 방문

668
00:32:02,660 --> 00:32:06,360
에 로그인, 당신은 갑자기 찾을 수 있습니다
새로운 URL에 자신을 완전히 되

669
00:32:06,360 --> 00:32:07,530
로그인하라는 메시지가 나타납니다.

670
00:32:07,530 --> 00:32:08,400
>> 그것은 어떻게 작동합니까?

671
00:32:08,400 --> 00:32:10,920
서버는 아마 (301)를 전송한다.

672
00:32:10,920 --> 00:32:14,510
다른 숫자처럼,도있다
의미에서 다소 차이가 302,

673
00:32:14,510 --> 00:32:16,490
그것은 또 다른 URL에 당신을 보낼 수 있습니다.

674
00:32:16,490 --> 00:32:18,770
그리고 서버,
당신이 로그인 한 후,

675
00:32:18,770 --> 00:32:22,000
위치로 다시 보내드립니다
당신은 실제로 의도.

676
00:32:22,000 --> 00:32:27,700
>> 그래서, 다음, 가난 무엇인가
조작 된 웹 사이트는거야?

677
00:32:27,700 --> 00:32:31,340
때 당신이 방문
www.acme.com하고, 단지 그들이

678
00:32:31,340 --> 00:32:35,490
자신의 서버 이름 한 일이
www1, 웹 사이트는 LaCie의 공식 웹 사이트, www3, 등,

679
00:32:35,490 --> 00:32:39,100
그들은 매우 simply-- 있습니다
이는 공정이지만, 매우

680
00:32:39,100 --> 00:32:46,080
종류의 당신을 리디렉션 foolishly--
실제로 다른 이름 서버.

681
00:32:46,080 --> 00:32:48,650
그리고 그것은 완벽하게 잘 작동합니다.

682
00:32:48,650 --> 00:32:49,930
그것은 좋은 쉽다.

683
00:32:49,930 --> 00:32:52,200
>> 우리는 그것이 될 방법을 살펴 보았다
후드 아래에 수행

684
00:32:52,200 --> 00:32:53,490
가상 봉투입니다.

685
00:32:53,490 --> 00:32:56,450
그러나 왜이 틀림없이
나쁜 엔지니어링 결정?

686
00:32:56,450 --> 00:33:00,345
그리고 왜 내가 일종의 생색입니다
이 특정 기술을 향해

687
00:33:00,345 --> 00:33:00,845
접근?

688
00:33:00,845 --> 00:33:06,420

689
00:33:06,420 --> 00:33:07,850
이 나쁜 이유를 주장한다.

690
00:33:07,850 --> 00:33:09,375
벤?

691
00:33:09,375 --> 00:33:10,250
청중 : [들리지]

692
00:33:10,250 --> 00:33:12,864

693
00:33:12,864 --> 00:33:16,030
DAVID 마란 : 각 서버에해야
웹 사이트의 중복 사본을 가지고있다.

694
00:33:16,030 --> 00:33:16,738
나는 그와 함께 OK입니다.

695
00:33:16,738 --> 00:33:19,490
그리고 사실, 그 난 무엇을
이 모든 이야기에 대한 가정하면,

696
00:33:19,490 --> 00:33:22,104
우리가 잘 wanted-- 경우 이후
실제로, 댄의 이전을 제외하고

697
00:33:22,104 --> 00:33:25,270
제안, 당신이 다른 경우
서버는 다른 일을

698
00:33:25,270 --> 00:33:27,740
어쩌면 그들은 실제로 수
기능적으로 다른 일을.

699
00:33:27,740 --> 00:33:30,698
>> 하지만 그렇다하더라도, 어떤 점에서, 당신의
데이터베이스는 오버로드받을 것입니다.

700
00:33:30,698 --> 00:33:33,030
정적 자산 서버
오버로드받을 것입니다.

701
00:33:33,030 --> 00:33:34,850
어떤 점에서 그래서, 우리는있어
다시이 이야기에서 우리가 어디

702
00:33:34,850 --> 00:33:36,475
같은 일의 여러 사본이 필요합니다.

703
00:33:36,475 --> 00:33:37,395
그래서 나는 그와 OK입니다.

704
00:33:37,395 --> 00:33:38,270
청중 : [들리지]

705
00:33:38,270 --> 00:33:42,340

706
00:33:42,340 --> 00:33:45,350
>> DAVID 마란 : OK, 그래서 일부 페이지
불균형 인기가있을 수 있습니다.

707
00:33:45,350 --> 00:33:50,460
그래서 하나의 주소에 집착
반드시 가장 좋은 것은 아니다.

708
00:33:50,460 --> 00:33:51,110
[알아들을 수 없는]?

709
00:33:51,110 --> 00:33:51,985
>> 청중 : [들리지]

710
00:33:51,985 --> 00:33:54,770

711
00:33:54,770 --> 00:33:57,623
>> DAVID 마란 : 당신이 무엇을 의미합니까?

712
00:33:57,623 --> 00:33:58,498
청중 : [들리지]

713
00:33:58,498 --> 00:34:03,820

714
00:34:03,820 --> 00:34:05,072
>> DAVID 마란 : 네, 정확히.

715
00:34:05,072 --> 00:34:07,280
그래서 당신은하고 싶지 않아
반드시 확실히 당신을 잔 마셔요

716
00:34:07,280 --> 00:34:11,370
사용자가 싶지 않아
수동으로 www1 또는 웹 사이트는 LaCie의 공식 웹 사이트에 입력.

717
00:34:11,370 --> 00:34:14,550
브랜딩 관점에서, 그것을
조금 우스운 보인다.

718
00:34:14,550 --> 00:34:17,340
당신은 단지의 종류를 원하는 경우
깨끗하고 우아한 경험,

719
00:34:17,340 --> 00:34:20,364
무작위의 이러한 종류를 갖는
번호 URL은 정말 좋지 않다.

720
00:34:20,364 --> 00:34:22,780
다음 사용자가 확실하기 때문에
복사 및 붙여 넣을 것

721
00:34:22,780 --> 00:34:24,449
이메일이나 인스턴트 메시지로.

722
00:34:24,449 --> 00:34:25,659
>> 이제 그들은 전파하고 있습니다.

723
00:34:25,659 --> 00:34:28,600
지금 당신은 종류의 당신을 혼동하고
적은 기술 관객들은 누가 생각

724
00:34:28,600 --> 00:34:32,239
웹 주소는 www2.something.com입니다.

725
00:34:32,239 --> 00:34:35,434
그에게 더 강력한 의미가 없습니다.

726
00:34:35,434 --> 00:34:38,100
단지 기본을 될 일이
당신이했습니다 것을 기술적 세부 사항

727
00:34:38,100 --> 00:34:40,190
이 방법으로 서버를 번호.

728
00:34:40,190 --> 00:34:45,760
>> 그리고 더 나쁜 아직, 만약에, 예를 들어,
아마 크리스마스 시간 때 주위에

729
00:34:45,760 --> 00:34:50,090
사업은 정말 호황을 누리고있다,
당신은 www99을 통해 www1있어

730
00:34:50,090 --> 00:34:53,530
하지만 1 월과 2 월과
이후, 당신은 그 절반을 해제

731
00:34:53,530 --> 00:34:56,440
그래서 당신은 www50을 통해 www1가?

732
00:34:56,440 --> 00:35:01,963
암시는 지금 무엇입니까
매우 합리적인 비즈니스 의사 결정?

733
00:35:01,963 --> 00:35:02,838
청중 : [들리지]

734
00:35:02,838 --> 00:35:05,628

735
00:35:05,628 --> 00:35:07,752
DAVID 마란 : 당신은 필요
아직도 그 모두를 관리 할 수​​ 있습니다.

736
00:35:07,752 --> 00:35:10,515
청중 : [들리지]

737
00:35:10,515 --> 00:35:11,390
DAVID 마란 : 맞아요.

738
00:35:11,390 --> 00:35:12,681
즉,이 캐치의 종류입니다.

739
00:35:12,681 --> 00:35:16,800
당신의 고객의 습관에있는 경우
북마크 것들, 그냥 그들에게 이메일을 보내

740
00:35:16,800 --> 00:35:19,351
어딘가에 URL을 저장하거나
그것은 그들의 자동차에 그냥 경우

741
00:35:19,351 --> 00:35:22,350
그들이있어, 그래서 자신의 브라우저에서 완료
정말 의도적으로 입력하지,

742
00:35:22,350 --> 00:35:25,560
단지, 그들은 수도, 무슨 일이 일어나고
올해 중 11개월에 대한

743
00:35:25,560 --> 00:35:27,190
효과적으로 막 다른 골목에 도달한다.

744
00:35:27,190 --> 00:35:30,100
그리고 단지 가장 예리한
사용자는 실현 것입니다

745
00:35:30,100 --> 00:35:32,040
어쩌면 내가 수동으로해야
이 번호를 제거합니다.

746
00:35:32,040 --> 00:35:35,610
나는 그냥 일어나지 않을거야, 의미
비즈니스를위한 그렇게 나쁘지 많은 사용자와,

747
00:35:35,610 --> 00:35:37,750
현명한 나쁜 구현 기술.

748
00:35:37,750 --> 00:35:40,230
>> 그래서 다행히도, 그것도 필요는 없습니다.

749
00:35:40,230 --> 00:35:43,120
그것은 무엇을 밝혀
부하 분산을 수행 할 수 있습니다

750
00:35:43,120 --> 00:35:48,130
대신 때, 말을하다
request--가 헤이, 1로 이동합니다.

751
00:35:48,130 --> 00:35:50,280
즉, 대신에
그 리디렉션을 전송

752
00:35:50,280 --> 00:35:53,540
등이이 단계 하나
과정은 여기에 이​​동입니다

753
00:35:53,540 --> 00:35:55,280
그는 다음 다른 곳으로 이동하라고한다.

754
00:35:55,280 --> 00:35:57,530
그래서 그는 다른 곳에서 진행, 세 가지가 단계.

755
00:35:57,530 --> 00:36:04,600
>> 대신에, 경로에 계속
그 용어를 사용하여 A의 모든 데이터를 유지

756
00:36:04,600 --> 00:36:10,590
로드 밸런서를 통해 그 그래서 그는
결코 접촉 한 직접 2 또는 3.

757
00:36:10,590 --> 00:36:15,150
모든 트래픽을 얻을 않는다 "전달"
로드 밸런서에 의해 자체.

758
00:36:15,150 --> 00:36:17,524
그래서 지금 우리는 일종의있어
의도적으로 라인을 흐리게

759
00:36:17,524 --> 00:36:18,690
이러한 다양한 장치들 사이.

760
00:36:18,690 --> 00:36:20,930
로드 밸런서는 경로 데이터를 할 수 있습니다.

761
00:36:20,930 --> 00:36:22,435
그것은 가지고 단지 함수이다.

762
00:36:22,435 --> 00:36:25,420
>> 그래서 부하 분산도, 그건
실제로 소프​​트웨어 조각.

763
00:36:25,420 --> 00:36:27,130
그리고 라우터 소프트웨어의 일부이다.

764
00:36:27,130 --> 00:36:29,660
그리고 당신은 절대적으로 할 수 있습니다
소프트웨어의 두 가지 내부

765
00:36:29,660 --> 00:36:34,000
하나의 물리적 컴퓨터 때문에 부하의
밸런서는 이러한 여러 작업을 수행 할 수 있습니다.

766
00:36:34,000 --> 00:36:36,130
>> 그래서 하나의 다른 방법이
이는 실제로,이 작업을 수행하는

767
00:36:36,130 --> 00:36:39,670
첫 번째 원칙의 종류로 돌아갑니다
우리가 이야기 DNS의

768
00:36:39,670 --> 00:36:40,230
휴식 시간 전에.

769
00:36:40,230 --> 00:36:41,634
DNS는 도메인 이름 시스템이었다.

770
00:36:41,634 --> 00:36:43,550
당신이 할 수있는 것을 기억
어떤이의 DNS 서버를 물어

771
00:36:43,550 --> 00:36:46,460
의 IP 어드레스
google.com, facebook.com을?

772
00:36:46,460 --> 00:36:48,250
>> 그리고 우리는 실제로이 작업을 수행 할 수 있습니다.

773
00:36:48,250 --> 00:36:51,940
우리가 이전에 사용하지 않은 도구입니다
다만 접근로의 하나,

774
00:36:51,940 --> 00:36:55,510
이름 서버 조회에, nslookup을했다.

775
00:36:55,510 --> 00:36:57,410
그리고 난 그냥 facebook.com을 입력하겠습니다.

776
00:36:57,410 --> 00:37:02,500
그리고 볼이 페이스 북의 IP
주소는 분명히있다.

777
00:37:02,500 --> 00:37:05,520
내가 가서 복사하자
즉, 브라우저로 이동

778
00:37:05,520 --> 00:37:11,690
하고 http 이동 : // 그
및 IP 주소를 입력했다.

779
00:37:11,690 --> 00:37:14,140
그리고 과연, 그것을 작동하는 것 같다.

780
00:37:14,140 --> 00:37:18,610
>> 이제 거꾸로 작업 것이었다
가상 봉투의 내부

781
00:37:18,610 --> 00:37:25,454
페이스 북은 때와 반응하는 것이
나는 IP를 직접 해결 방문한?

782
00:37:25,454 --> 00:37:26,745
통지 있기 때문에, 어디 지금은 무엇입니까?

783
00:37:26,745 --> 00:37:29,250

784
00:37:29,250 --> 00:37:32,484
어디에서, 지금 주소는 무엇입니까?

785
00:37:32,484 --> 00:37:33,450
>> 청중 : [들리지]

786
00:37:33,450 --> 00:37:36,116
>> DAVID 마란 : 보안 버전에서,
그리고 www.facebook.com에서.

787
00:37:36,116 --> 00:37:38,520
그래서 다만 아니다
보안 IP 주소를 입력합니다.

788
00:37:38,520 --> 00:37:42,650
페이스 북은 자체적으로 그것을 촬영하고있다
이 말도 말할 수 있습니다.

789
00:37:42,650 --> 00:37:45,710
우리는 당신을 유지하지 않을거야
숫자의 추한 찾고 URL.

790
00:37:45,710 --> 00:37:50,120
우리는 당신에게 HTTP를 보낼거야
동일한 헤더로서 리디렉션

791
00:37:50,120 --> 00:37:53,010
우리는 before-- 보았다
위치 결장 뭔가.

792
00:37:53,010 --> 00:37:56,340
>> 그리고 이것은 단순히 아래 의미
후드는 여전히 IP 주소입니다.

793
00:37:56,340 --> 00:37:59,010
인터넷에있는 모든 컴퓨터
IP 주소를 가지고, 그것은 보인다.

794
00:37:59,010 --> 00:38:01,480
하지만 당신은 필요가 없습니다
사용자에게 그 노출합니다.

795
00:38:01,480 --> 00:38:07,190
그리고 많은 일 다시 같은 존재
1-800-COLLECT, 1-800-C-O-L-L-E-C-T이었다

796
00:38:07,190 --> 00:38:11,700
미국에서, 수집 만드는 방법이었다
아주 쉽게 기억에 남는 전화를 통해 호출

797
00:38:11,700 --> 00:38:17,140
번호 또는 1-800-매트리스, 침대를 구입
유사한 니모닉은 당신도 볼이

798
00:38:17,140 --> 00:38:20,460
전화에 가지 종류의
여전히 문자는 숫자에 매핑있다.

799
00:38:20,460 --> 00:38:21,470
>> 이제, 그 이유는 무엇입니까?

800
00:38:21,470 --> 00:38:26,080
음, 기억하기 훨씬 쉽다
1-800-매트리스 또는 대신 1-800-COLLECT

801
00:38:26,080 --> 00:38:29,100
1-800 뭔가 뭔가 뭔가
뭔가 뭔가 뭔가

802
00:38:29,100 --> 00:38:31,030
뭔가 여기서 각
이들의 숫자입니다.

803
00:38:31,030 --> 00:38:34,390
마찬가지로, 세상은 배운
신속하게 우리가하지 말아야

804
00:38:34,390 --> 00:38:35,940
사람들이 IP 주소를 기억해야합니다.

805
00:38:35,940 --> 00:38:36,826
즉, 어리석은 것입니다.

806
00:38:36,826 --> 00:38:38,200
우리는 대신 이름을 사용하는 것입니다.

807
00:38:38,200 --> 00:38:40,420
DNS가 태어난 이유입니다.

808
00:38:40,420 --> 00:38:45,510
>> 좋아, 그와 그래서는 점에서 말했다
로드 밸런싱의,의는 yahoo.com을 시도 할 수 있습니다.

809
00:38:45,510 --> 00:38:47,030
글쎄, 그건 재미있다.

810
00:38:47,030 --> 00:38:51,464
야후는 세 개의 IP를 반환 할 것으로 보인다.

811
00:38:51,464 --> 00:38:53,940
그래서에서 추론,
당신이 할 수 있다면, 무엇이다

812
00:38:53,940 --> 00:38:58,600
우리가 구현할 수있는 또 다른 방법
로드 밸런싱의이 개념

813
00:38:58,600 --> 00:39:04,310
어쩌면 물리적를 사용하지 않고
장치, 새로운 물리적 장치?

814
00:39:04,310 --> 00:39:08,070
>> 즉, 나는 멀리 걸릴 수 있습니다
당신은 부하 분산을 위해이 자금

815
00:39:08,070 --> 00:39:10,990
일부 기존를 사용하는 당신에게
하드웨어의 조각 구현

816
00:39:10,990 --> 00:39:12,680
로드 밸런싱의이 개념?

817
00:39:12,680 --> 00:39:18,870

818
00:39:18,870 --> 00:39:22,510
그리고 스포일러이며,
네,하지만 무엇을, 또는 어떻게?

819
00:39:22,510 --> 00:39:27,605
야후는 아마 여기에 무엇을하고 있나요?

820
00:39:27,605 --> 00:39:29,200
카림?

821
00:39:29,200 --> 00:39:30,635
OK, 크리스?

822
00:39:30,635 --> 00:39:31,510
청중 : [들리지]

823
00:39:31,510 --> 00:39:35,119

824
00:39:35,119 --> 00:39:36,910
DAVID 마란 : 그래,
그 작업의 세 가지.

825
00:39:36,910 --> 00:39:39,890
랜덤 그래서, 라운드 로빈,
location-- 당신은 할 수 있습니다

826
00:39:39,890 --> 00:39:44,160
퍼즐의 기존 작품을 활용
우리는 DNS의 이전에 대해 얘기하는 것이

827
00:39:44,160 --> 00:39:49,580
시스템 단순히 때 처음 말
오늘의 사용자는 yahoo.com 요청,

828
00:39:49,580 --> 00:39:52,970
그들에게 첫 번째 IP 주소를 제공,
가 최대 45로 끝나는 것과 같은.

829
00:39:52,970 --> 00:39:55,762
그리고 다음에, 사용자 요청
yahoo.com의 IP 어드레스

830
00:39:55,762 --> 00:39:57,970
어딘가에 세계에서,
그들에게 두 번째 IP를 제공,

831
00:39:57,970 --> 00:39:59,920
다음, 세 번째 IP 후
제 IP 후 초.

832
00:39:59,920 --> 00:40:01,850
아니면 그것에 대해 현명하게
그래픽으로 그것을 할.

833
00:40:01,850 --> 00:40:05,200
아니면 무작위뿐 아니라합니까
이 방식은 라운드 로빈.

834
00:40:05,200 --> 00:40:07,580
>> 이 경우, 다음
우리는 심지어 필요가 없습니다

835
00:40:07,580 --> 00:40:10,190
이 블랙을 소개합니다
우리의 그림으로 상자.

836
00:40:10,190 --> 00:40:11,690
우리는 새로운 장치가 필요하지 않습니다.

837
00:40:11,690 --> 00:40:16,930
우리는 단순히 컴퓨터를 말하는 거
직접 서버로 이동합니다,

838
00:40:16,930 --> 00:40:18,680
효과적으로 아니지만
이름의 방법으로.

839
00:40:18,680 --> 00:40:20,054
그들은 이름을 알아야 할 필요가 없습니다.

840
00:40:20,054 --> 00:40:25,690
그들은 단지 yahoo.com 있다고 말했다되고있어
이 IP 주소 중 하나에 매핑.

841
00:40:25,690 --> 00:40:28,180
>> 그래서 똑같은 요청을 보냅니다.

842
00:40:28,180 --> 00:40:30,100
그러나 외부에
봉투, 그것을 단순히

843
00:40:30,100 --> 00:40:32,740
이 통보 된 IP를 넣습니다.

844
00:40:32,740 --> 00:40:35,590
이런 방법도있을
우리는 요청의 부하를 분산

845
00:40:35,590 --> 00:40:39,330
단지에 봉투를 보내
야후의 자신의 서버 중 하나는 다른?

846
00:40:39,330 --> 00:40:42,390
>> 우리가 파고를 유지한다면, 우리는 볼 수 있습니다
더와 아마 다른 회사.

847
00:40:42,390 --> 00:40:44,380
CNN은이 공개적으로 노출하고있다.

848
00:40:44,380 --> 00:40:49,610
우리는 다시 이렇게 실제로 경우 비록
및 again-- cnn.com-- 당신은 볼 수 있습니다

849
00:40:49,610 --> 00:40:51,730
그들은 실제로, 순서를 변경하고 있습니다.

850
00:40:51,730 --> 00:40:56,680
그래서 메커니즘입니다
CNN 사용, 분명히?

851
00:40:56,680 --> 00:40:57,440
>> 청중 : 랜덤.

852
00:40:57,440 --> 00:40:59,440
DAVID 마란 : 음,
그것은 비록 임의의 수

853
00:40:59,440 --> 00:41:01,110
앞뒤로 순환 것으로 보인다.

854
00:41:01,110 --> 00:41:04,380
그래서 라운드 로빈 곳 아마
그들은 단지 순서 때문에 전환하고

855
00:41:04,380 --> 00:41:05,880
나는 아마도 첫 번째 걸릴거야.

856
00:41:05,880 --> 00:41:08,860
내 컴퓨터가 소요됩니다
마다 제.

857
00:41:08,860 --> 00:41:10,490
그래서 부하 분산입니다.

858
00:41:10,490 --> 00:41:18,450
그리고 그것은 궁극적으로 우리를 수
데이터 또는지도 요청을 매핑,

859
00:41:18,450 --> 00:41:21,240
여러 서버에.

860
00:41:21,240 --> 00:41:24,226
의 그래서 어떤 종류의
문제는 지금 여전히 존재?

861
00:41:24,226 --> 00:41:26,350
그것은 정말 우리 같은 느낌
좋은 문제를 해결했다.

862
00:41:26,350 --> 00:41:28,740
우리는 서로 다른 서버로 사용자를 얻었다.

863
00:41:28,740 --> 00:41:31,420
오하지만 ..., 크리스,했다
당신은 전에 질문이?

864
00:41:31,420 --> 00:41:34,378
>> 청중 : [들리지]

865
00:41:34,378 --> 00:41:43,670

866
00:41:43,670 --> 00:41:45,120
>> 데이비드 마란은 : 모두 따라 달라집니다.

867
00:41:45,120 --> 00:41:47,042
그래서 여기에 무슨 일이 일어나고 있는지?

868
00:41:47,042 --> 00:41:48,250
그리고 우리는 실제로 볼 수 있습니다.

869
00:41:48,250 --> 00:41:51,649
그럼 야후의 시도 할 수 있습니다.

870
00:41:51,649 --> 00:41:52,940
사실,의​​ 페이스 북에 가자.

871
00:41:52,940 --> 00:41:54,520
우리는 하나가 작동하는지 알고 있기 때문에.

872
00:41:54,520 --> 00:41:56,545
그래서 복사거야
해당 IP 주소를 다시.

873
00:41:56,545 --> 00:41:58,820
나는이 모든 탭을 닫으려고하고있다.

874
00:41:58,820 --> 00:42:03,800
나는 열려 갈거야
여기 아래 특별 네트워크 탭을 선택합니다.

875
00:42:03,800 --> 00:42:07,800
// : 그리고는 HTTP를 방문거야.

876
00:42:07,800 --> 00:42:10,694
그리고 지금은 Enter 키를 누르거야.

877
00:42:10,694 --> 00:42:11,860
그리고 이제 무슨 일이 있었는지 보자.

878
00:42:11,860 --> 00:42:20,662
>> 나는 그 요청 통지를 보면
그 거니 페이스 북은 나쁜 예입니다.

879
00:42:20,662 --> 00:42:22,370
그들이 가지고 있기 때문에
슈퍼 멋진 기술

880
00:42:22,370 --> 00:42:25,960
그것은 우리에게 그 내용을 숨 깁니다.

881
00:42:25,960 --> 00:42:30,690
나 야후를 사용하자
instead-- HTTP : 그 IP //.

882
00:42:30,690 --> 00:42:36,030
의 우리의 네트워크를 열어 보자
탭, 로그를 유지합니다.

883
00:42:36,030 --> 00:42:37,945
그리고 여기에 우리가 간다, 입력합니다.

884
00:42:37,945 --> 00:42:40,669

885
00:42:40,669 --> 00:42:41,210
그거 웃기 네요.

886
00:42:41,210 --> 00:42:44,480
OK, 그래서 여기에 유명한 404 메시지입니다.

887
00:42:44,480 --> 00:42:48,500
여기에서 재미 것은 그들이
아마 다시 없을 것이다 않습니다.

888
00:42:48,500 --> 00:42:51,430
아마 거기 때문에
그 자체로 잘못하지 뭔가.

889
00:42:51,430 --> 00:42:54,050
그들은 단지 신중해야
지원하지 않기로 결정

890
00:42:54,050 --> 00:42:56,250
자신의 주소의 숫자 형식.

891
00:42:56,250 --> 00:43:00,270
>> 그래서 우리가 실제로에서보고있는
네트워크 탭, 내가 여기를 당겨 경우,

892
00:43:00,270 --> 00:43:06,140
내가 말하는대로, 유명한 404입니다
나는 응답 헤더를 보면,

893
00:43:06,140 --> 00:43:09,070
이것은 내가 here-- 404 찾을 수 없음 얻었다 것입니다.

894
00:43:09,070 --> 00:43:11,360
그럼 다른 하나를 시도 할 수 있습니다.

895
00:43:11,360 --> 00:43:13,180
CNN이 우리와 함께 협력하는 경우 보자.

896
00:43:13,180 --> 00:43:19,440
나는 CNN의 IP 주소 중 하나를 잡아합니다
이, HTTP, DAH, DAH, DAH, DAH을 취소합니다.

897
00:43:19,440 --> 00:43:21,620
그래서 크리스의에 대답
질문 하나 일했다.

898
00:43:21,620 --> 00:43:24,140

899
00:43:24,140 --> 00:43:26,255
>> 그리고의 응답 헤더에 가자.

900
00:43:26,255 --> 00:43:30,810

901
00:43:30,810 --> 00:43:33,640
사실 아니, 모든 권리, 나는
작업 예를 찾기 위해 고군분투.

902
00:43:33,640 --> 00:43:38,270
CNN이 결정했다 그래서, 우리는 당신을 떠날거야
어떤 주소에 실제로 방문

903
00:43:38,270 --> 00:43:40,359
옆으로 브랜딩 문제.

904
00:43:40,359 --> 00:43:43,275
그러나이 경우, 일이되지 않을 것이다
우리는 페이스 북의 경우에서 볼 수

905
00:43:43,275 --> 00:43:46,700
우리는 (301)는 이동 얻을 것입니다
영구적으로, 대부분,

906
00:43:46,700 --> 00:43:54,420
인 내부
위치 :은 https : //www.facebook.com.

907
00:43:54,420 --> 00:44:01,210
그리고 확률은 www.facebook.com가입니다입니다
동일한 서버 우리 단지에 대한 별칭

908
00:44:01,210 --> 00:44:01,710
에 갔다.

909
00:44:01,710 --> 00:44:03,500
>> 그래서 조금 역효과입니다.

910
00:44:03,500 --> 00:44:05,170
우리는 문자 그대로 서버를 방문하고 있습니다.

911
00:44:05,170 --> 00:44:07,040
서버가 다음 우리를 말하고, 멀리 이동합니다.

912
00:44:07,040 --> 00:44:08,320
이 다른 주소로 이동합니다.

913
00:44:08,320 --> 00:44:10,870
그러나 우리는 너무 될 일이
다시 같은 서버에 대한 것.

914
00:44:10,870 --> 00:44:14,550
그러나 아마도 우리는 지금에 남아
이 앞뒤로없이 서버.

915
00:44:14,550 --> 00:44:18,600
지금 때문에 우리는 이름을 사용하는
사이트가 아닌 숫자의 버전.

916
00:44:18,600 --> 00:44:20,060
좋은 질문.

917
00:44:20,060 --> 00:44:23,690
>> OK, 그래서 만약 우리가 지금 우리를 assume--
로드 밸런싱을 해결했다.

918
00:44:23,690 --> 00:44:25,894
우리는 지금 메커니즘을 가지고,
이 DNS를 통해 여부,

919
00:44:25,894 --> 00:44:29,060
여부가 있는지,이 블랙 박스를 통해입니다
이들 기술 중 하나를 사용하고.

920
00:44:29,060 --> 00:44:33,810
우리가 사용자의 요청을 수
이는 서버 1, 2 또는 3으로 알아낼

921
00:44:33,810 --> 00:44:35,420
그 또는 그녀를 보낼 수 있습니다.

922
00:44:35,420 --> 00:44:39,180
>> 무엇이 우리의 웹 사이트에 대한 침입하기 시작?

923
00:44:39,180 --> 00:44:41,160
즉, 우리가 가진
사업을 구축하는

924
00:44:41,160 --> 00:44:43,480
하나의 서버에 이전했다.

925
00:44:43,480 --> 00:44:46,870
이제 사업 실행
여러 서버에.

926
00:44:46,870 --> 00:44:51,770
가정의 어떤 종류의,
어떤 디자인 결정의 종류,

927
00:44:51,770 --> 00:44:54,870
지금 파괴 할 수 있는가?

928
00:44:54,870 --> 00:44:55,745
>> 이것은 덜 명백하다.

929
00:44:55,745 --> 00:44:58,620
그러나 우리는 넣을 수없는 경우 보자 우리
우리가했습니다 문제의 일부에 손가락

930
00:44:58,620 --> 00:44:59,780
자신을 위해 만들었습니다.

931
00:44:59,780 --> 00:45:02,750
다시 말하지만, 그것은 들고 같은 종류의
호스에서 누수 아래로.

932
00:45:02,750 --> 00:45:05,094
그리고 지금 새로운 문제
여기에 팝업있다.

933
00:45:05,094 --> 00:45:07,880

934
00:45:07,880 --> 00:45:11,380
>> 청중 : [들리지]

935
00:45:11,380 --> 00:45:16,574

936
00:45:16,574 --> 00:45:19,240
DAVID 마란 : OK, 그래서 우리는해야
우리의 하드 디스크 공간을 성장 유지.

937
00:45:19,240 --> 00:45:20,450
나는 지금 그와 OK입니다.

938
00:45:20,450 --> 00:45:23,212
내가 생각하기 때문에 내가 할 수있는
수평 규모.

939
00:45:23,212 --> 00:45:26,420
내가 부족 해요 경우처럼, 난 그냥거야
네 번째 서버, 아마 다섯 번째 서버,

940
00:45:26,420 --> 00:45:30,820
다음 우리의 능력을 증대
30 % 또는 50 % 이것 저것 다른 의해.

941
00:45:30,820 --> 00:45:32,759
그래서 적어도 지금은, 그와 OK입니다.

942
00:45:32,759 --> 00:45:33,634
청중 : [들리지]

943
00:45:33,634 --> 00:45:37,314

944
00:45:37,314 --> 00:45:38,980
데이비드 마란은 : OK, 그래서 좋은 지적입니다.

945
00:45:38,980 --> 00:45:42,340
그래서 서버를 가정
동일하지 않다.

946
00:45:42,340 --> 00:45:45,260
그리고 고객 서비스
또는 이메일 동등한

947
00:45:45,260 --> 00:45:48,690
사용자로부터 어떤 메시지를 받고있다
말씀이 바로 작동하지 않습니다.

948
00:45:48,690 --> 00:45:52,070
그것은 때로는 매우 가능
어쩌면 하나 이상의 서버

949
00:45:52,070 --> 00:45:55,000
조금 틀려서 작용하는 것이 아니라,
다른 확실히 할 수

950
00:45:55,000 --> 00:45:57,096
어렵게 문제를 추격 할 수 있습니다.

951
00:45:57,096 --> 00:45:58,720
여러 장소를 볼 수도 있습니다.

952
00:45:58,720 --> 00:46:00,960
>> 즉 표현이다
버그의 또 다른 종류의,

953
00:46:00,960 --> 00:46:03,950
이는 당신이 아마해야입니다
귀하의 인프라를 설계했다

954
00:46:03,950 --> 00:46:06,200
모든 것이 진정으로 동일하다.

955
00:46:06,200 --> 00:46:10,390
그러나 새로운 문제를 공개하지
우리는 전에하지 않았다.

956
00:46:10,390 --> 00:46:11,715
그 밖의 무엇?

957
00:46:11,715 --> 00:46:12,590
청중 : [들리지]

958
00:46:12,590 --> 00:46:16,390

959
00:46:16,390 --> 00:46:19,500
>> DAVID 마란 : 네,
더 복잡성이있다.

960
00:46:19,500 --> 00:46:20,792
물리적으로 더 선이있다.

961
00:46:20,792 --> 00:46:21,750
다른 장치가있다.

962
00:46:21,750 --> 00:46:26,310
사실, 근본적인를 도입했습니다
개념 및 여기에 근본적인 문제

963
00:46:26,310 --> 00:46:28,300
단일 지점으로 알려진
실패의, 어떤,

964
00:46:28,300 --> 00:46:30,110
심지어 당신이 들어 본 적이없는 경우
문구, 당신은 아마 수

965
00:46:30,110 --> 00:46:31,780
지금은 거꾸로 일을하고 그것을 알아낼.

966
00:46:31,780 --> 00:46:35,560
그것은 내가 하나를 가지고 무엇을 의미 하는가
내 건축의 실패의 포인트?

967
00:46:35,560 --> 00:46:39,694
그리고 아키텍처로, 나는 단지
그것의 위상을 의미한다.

968
00:46:39,694 --> 00:46:40,610
>> 청중 : [들리지]

969
00:46:40,610 --> 00:46:42,901
>> DAVID 마란 : 그래, 만약에
로드 밸런서 내려갑니다?

970
00:46:42,901 --> 00:46:46,290
나는 그의이 중간 남자를 삽입 한
삶의 목적은이 문제를 해결하는 것이다.

971
00:46:46,290 --> 00:46:47,740
하지만 새로운 문제를 도입했습니다.

972
00:46:47,740 --> 00:46:49,350
새로운 누수가 호스에 나타 났있다.

973
00:46:49,350 --> 00:46:53,500
때문에 지금의 경우로드 밸런서
, 휴식 또는 misfunctions 또는 사망

974
00:46:53,500 --> 00:46:56,350
지금은에 액세스 할 수 없게
내 서버의 세 가지.

975
00:46:56,350 --> 00:46:58,880
그리고 전에, 나는하지 않았다
이 중개인이 있습니다.

976
00:46:58,880 --> 00:47:03,020
그리고 이것은 틀림없이, 새로운 문제입니다.

977
00:47:03,020 --> 00:47:05,245
우리는 다시 올 것이다
우리는 그 문제를 해결하는 방법.

978
00:47:05,245 --> 00:47:06,734
>> 청중 : [들리지]

979
00:47:06,734 --> 00:47:08,400
데이비드 마란 : 그건 하나의 방법이 될 것입니다.

980
00:47:08,400 --> 00:47:13,926
네, 그래서이 꽤 될 것입니다
쥐의 구멍은 우리가 내려 가서 시작합니다.

981
00:47:13,926 --> 00:47:15,800
그러나 이제 다시 오게
그냥 순간에 그.

982
00:47:15,800 --> 00:47:17,299
다른 어떤 문제 우리가 만든?

983
00:47:17,299 --> 00:47:25,540

984
00:47:25,540 --> 00:47:27,470
>> 그래서 댄 전에 데이터베이스를 언급했다.

985
00:47:27,470 --> 00:47:29,500
그리고 당신이하지 않은 경우에도
너무 익숙한 기술적으로,

986
00:47:29,500 --> 00:47:33,220
데이터베이스는 서버 곳이다
데이터를 변경하는 것은 일반적으로 저장되고

987
00:47:33,220 --> 00:47:36,430
아마 주문 누군가는 배치했다,
사용자 프로필, 이름,

988
00:47:36,430 --> 00:47:40,810
당신의 이메일 주소 일 수도
입력 또는 시간이 지남에 따라 변경 될 수있다.

989
00:47:40,810 --> 00:47:44,599
>> 이전에는 내 데이터베이스에 있었다
내 웹 서버와 같은 서버.

990
00:47:44,599 --> 00:47:46,390
난 그냥 하나를 가지고 있기 때문에
웹 호스팅 계정.

991
00:47:46,390 --> 00:47:48,480
모든 것은 모두 같은 장소에 있었다.

992
00:47:48,480 --> 00:47:54,200
어디서 데이터베이스를 넣어야한다
이제, 서버 1, 2 또는 3?

993
00:47:54,200 --> 00:47:55,100
>> 청중 : 네.

994
00:47:55,100 --> 00:47:58,070
>> DAVID 마란 : 4, OK, 모든
바로, 그래서 거기에 갈 수 있습니다.

995
00:47:58,070 --> 00:48:01,650
그래서 넣어 갈거야 내
database-- 및하자

996
00:48:01,650 --> 00:48:06,520
이 www를, www가, www가 레이블을 시작합니다.

997
00:48:06,520 --> 00:48:08,780
그리고 나는 말할거야
이 네 번째입니다.

998
00:48:08,780 --> 00:48:11,270
그리고 데이터베이스에 대한 DB를 말할 것이다.

999
00:48:11,270 --> 00:48:12,870
OK, 나는 이것을 좋아한다.

1000
00:48:12,870 --> 00:48:17,021
어떤 라인 내가해야
아마도 여기에 그리기 수?

1001
00:48:17,021 --> 00:48:18,850
>> 청중 : [들리지]

1002
00:48:18,850 --> 00:48:22,740
>> DAVID 마란 : 네, 코드가 너무
우리는 내일 논의 되겠지만,

1003
00:48:22,740 --> 00:48:24,900
아마도 동일
세 개의 서버.

1004
00:48:24,900 --> 00:48:28,374
하지만 지금에하지 연결해야
데이터베이스는 로컬하지만 다른 곳에서 실행.

1005
00:48:28,374 --> 00:48:29,040
그리고 괜찮아요.

1006
00:48:29,040 --> 00:48:31,623
우리는 데이터베이스 a를 제공 할 수 있습니다
우리가 가지고있는, 이름 또는 번호.

1007
00:48:31,623 --> 00:48:33,930
그리고 모두가 잘 작동하는지.

1008
00:48:33,930 --> 00:48:35,820
그러나 우리는 무슨 짓을?

1009
00:48:35,820 --> 00:48:40,640
우리는 수평함으로써 확장 한
세 개의 서버가 아닌 한, 어떤

1010
00:48:40,640 --> 00:48:41,140
좋은 것입니다.

1011
00:48:41,140 --> 00:48:44,240
지금 우리가 처리 할 수​​ 있기 때문에
많은 부하 3 배.

1012
00:48:44,240 --> 00:48:47,710
>> 그리고 더 나은 아직, 하나 또는 두 개의 경우
그 서버로는 내려갑니다

1013
00:48:47,710 --> 00:48:49,350
내 사업은 계속 작동 할 수 있습니다.

1014
00:48:49,350 --> 00:48:53,960
난 아직도 난 경우에도, 하나를 가지고 있기 때문에
가지 성능 현명한 따라 파행.

1015
00:48:53,960 --> 00:49:01,020
그러나 어떤 새로운 문제 I가
데이터베이스를 이동시킴으로써 도입

1016
00:49:01,020 --> 00:49:04,350
이 별도의 서버에
대신에 1, 2, 3에서의?

1017
00:49:04,350 --> 00:49:05,412
>> 청중 : [들리지]

1018
00:49:05,412 --> 00:49:08,120
DAVID 마란 : 그래, 그래서 지금 내가 가진
실패의 또 다른 하나의 포인트.

1019
00:49:08,120 --> 00:49:12,330
내 데이터베이스가 사망하거나 할 필요가있는 경우
업그레이드 또는 확인 지금 무엇 이건, 수,

1020
00:49:12,330 --> 00:49:13,610
내 웹 사이트가 온라인 상태입니다.

1021
00:49:13,610 --> 00:49:16,270
그리고, 정적 역할을 할 수
변하지 않는 콘텐츠입니다.

1022
00:49:16,270 --> 00:49:21,210
하지만 사용자가 변경 또는 로그인 할 수 없습니다
더 나쁜 아직 아무것도 또는 주문 아무것도.

1023
00:49:21,210 --> 00:49:24,120
(4)가 오프라인 인 경우 때문에,
다음 1, 2, 3

1024
00:49:24,120 --> 00:49:27,710
정말 정의하여 이야기 할 수 없습니다.

1025
00:49:27,710 --> 00:49:31,560
>> OK 그래서 그래, 그래서 이것은 왜
나는이를 그릴 주저하고있다.

1026
00:49:31,560 --> 00:49:32,690
그래서 다시 그에게 올 수 있습니다.

1027
00:49:32,690 --> 00:49:33,700
나는 당신을 밀어 유지하는 것을 의미하지 않습니다.

1028
00:49:33,700 --> 00:49:36,030
하지만 그림은 매우입니다
빨리 스트레스를받을 것.

1029
00:49:36,030 --> 00:49:38,620
당신은 시작해야하기 때문에
모든 것을이 데.

1030
00:49:38,620 --> 00:49:41,850
사실, 당신이 이제까지 본 적이있는 경우
영화 연락 몇 년 전

1031
00:49:41,850 --> 00:49:45,310
조디 Foster-- 아니?

1032
00:49:45,310 --> 00:49:47,410
>> OK, 그래서 두에 대한
연락을 보았다 우리,

1033
00:49:47,410 --> 00:49:50,800
관계가 어디있어 그들이
기본적으로 어떤 두 구입

1034
00:49:50,800 --> 00:49:53,250
오히려보다,이기는하지만
두 번 가격.

1035
00:49:53,250 --> 00:49:55,922
그래서 일종의 장난이었다
영화에서 언급.

1036
00:49:55,922 --> 00:49:57,130
그것은 종류의이 관련이 있어요.

1037
00:49:57,130 --> 00:49:58,290
우리는 절대적으로 그렇게 할 수 있습니다.

1038
00:49:58,290 --> 00:50:00,123
그리고 당신은 비용을했습니다
우리 두 배나 많은 돈.

1039
00:50:00,123 --> 00:50:01,300
그러나 우리는 다시 그에게 올 것이다.

1040
00:50:01,300 --> 00:50:02,400
>> 그래서 우리는이 문제를 해결했습니다.

1041
00:50:02,400 --> 00:50:03,108
그래서 당신은 무엇인지?

1042
00:50:03,108 --> 00:50:04,450
이 미끄러운 경사 같다.

1043
00:50:04,450 --> 00:50:07,033
나는 갖는 대처하지 않으
중복 데이터베이스가 있습니다.

1044
00:50:07,033 --> 00:50:08,037
그것은 너무 많은 돈이다.

1045
00:50:08,037 --> 00:50:08,620
당신 그거 알아?

1046
00:50:08,620 --> 00:50:12,880
내 데이터베이스를 갖고 싶어
단지 버전 일처럼

1047
00:50:12,880 --> 00:50:17,450
여기서 각 서버가
자신의 로컬 데이터베이스.

1048
00:50:17,450 --> 00:50:19,480
그래서 난 그냥 갈거야
이들 각각에 DB를 그립니다.

1049
00:50:19,480 --> 00:50:22,240
>> 그래서 지금 각 웹 서버
지금까지 동일하다

1050
00:50:22,240 --> 00:50:25,650
은 동일한 코드를 갖는 한 동일
고정 자산, 같은 그림과 텍스트

1051
00:50:25,650 --> 00:50:26,720
기타 등등.

1052
00:50:26,720 --> 00:50:29,580
그리고 각각의 자체 데이터베이스를 보유하고 있습니다.

1053
00:50:29,580 --> 00:50:31,450
나는 하나의 지점을 고정
고장 문제.

1054
00:50:31,450 --> 00:50:32,570
지금은 데이터베이스가 있습니다.

1055
00:50:32,570 --> 00:50:36,210
아무리되는 이들의 2 종 한
일이 하나 왼쪽은 항상 거기에, 죽는다.

1056
00:50:36,210 --> 00:50:41,156
그러나 어떤 새로운 문제를 내가 만든이
댄의 솔루션은 피할 수 있다고?

1057
00:50:41,156 --> 00:50:42,470
>> 청중 : [들리지]

1058
00:50:42,470 --> 00:50:44,386
>> DAVID 마란 : 네,
오른쪽을 동기화 할 수 있나요?

1059
00:50:44,386 --> 00:50:47,860
하나 나는 동기화해야하기 때문에
누가, 즉 where--거야

1060
00:50:47,860 --> 00:50:50,570
앨리스 내를 방문하는 경우
사이트, 그녀와 무슨 일이 있었

1061
00:50:50,570 --> 00:50:55,070
무작위 또는 라운드 로빈에 도착
또는 서버 번호 하나에 무엇이든,

1062
00:50:55,070 --> 00:50:58,770
그 후 나는 항상에있다
서버 하나에 그녀를 보낼 수 있습니다.

1063
00:50:58,770 --> 00:50:59,420
왜?

1064
00:50:59,420 --> 00:51:01,540
내가 그녀를 보내는 경우 때문에
서버 (2), 그것은거야

1065
00:51:01,540 --> 00:51:03,140
그녀가 존재하지 않는 모양입니다.

1066
00:51:03,140 --> 00:51:04,450
>> 나는 그녀의 주문 내역을해야 할 것 아니에요.

1067
00:51:04,450 --> 00:51:06,300
내가 거기에 자신의 프로필을해야 할 것 아니에요.

1068
00:51:06,300 --> 00:51:09,360
그리고 그것은 단지 같은 느낌
그 문제를 초대있다.

1069
00:51:09,360 --> 00:51:11,400
그리고 밥은 내가 방문 할 때
항상 그를 보낼 수있다

1070
00:51:11,400 --> 00:51:14,800
동일한 서버, 2, 중에
하나, 세번째와 찰리,

1071
00:51:14,800 --> 00:51:15,797
일관.

1072
00:51:15,797 --> 00:51:17,130
하지만 이것은 부당하지 않습니다.

1073
00:51:17,130 --> 00:51:19,270
이 호출된다
데이터베이스를 분할.

1074
00:51:19,270 --> 00:51:21,270
그리고 사실이 무엇인지
페이스 북은 초기에했다.

1075
00:51:21,270 --> 00:51:24,020
>> 당신의 역사를 따라하는 경우
페이스 북, 그것은 캠퍼스에서 여기 시작

1076
00:51:24,020 --> 00:51:25,770
www.thefacebook.com있다.

1077
00:51:25,770 --> 00:51:29,260
그런 다음 한 번 진화 마크 시작
다른 캠퍼스로 확산

1078
00:51:29,260 --> 00:51:34,450
할 수 harvard.thefacebook.com 및
mit.thefacebook.com, 아마

1079
00:51:34,450 --> 00:51:37,027
bu.thefacebook.com 등.

1080
00:51:37,027 --> 00:51:38,860
그리고 그 때문이었다
초기에, 나는 생각하지 않는다

1081
00:51:38,860 --> 00:51:40,484
당신은 캠퍼스에서 친구를 가질 수있다.

1082
00:51:40,484 --> 00:51:41,410
하지만 괜찮아요.

1083
00:51:41,410 --> 00:51:43,930
하버드에서 누구 때문에
이 서버로 전송 받았습니다.

1084
00:51:43,930 --> 00:51:45,744
BU에서 사람이 서버로 전송 받았습니다.

1085
00:51:45,744 --> 00:51:47,910
MIT에서 누구나 전송있어
이론이 server--합니다.

1086
00:51:47,910 --> 00:51:50,540
나는 확실히 모든 몰라
기본이되는 구현 세부 사항.

1087
00:51:50,540 --> 00:51:55,610
그러나 그는 아마도에 의해 사람을 분할
네트워크이었다 자신의 캠퍼스.

1088
00:51:55,610 --> 00:51:58,772
>> 그래서이 시점까지 좋은
당신은 하버드 두 개의 서버를 필요로하는 곳에

1089
00:51:58,772 --> 00:51:59,980
또는 하버드를위한 세 개의 서버.

1090
00:51:59,980 --> 00:52:01,800
그리고 그 단순함
종류의 고장.

1091
00:52:01,800 --> 00:52:03,174
그러나 그것은 합리적인 접근 방식이다.

1092
00:52:03,174 --> 00:52:04,950
의 항상 앨리스를 보내 보자
같은 장소에,

1093
00:52:04,950 --> 00:52:06,366
항상 같은 장소에 밥을 보냅니다.

1094
00:52:06,366 --> 00:52:09,680
하지만 앨리스의 경우 발생
서버가 오프라인 상태가?

1095
00:52:09,680 --> 00:52:12,300
밥과 찰리는 여전히 살 수있다
사물과는 사이트에 로그인합니다.

1096
00:52:12,300 --> 00:52:13,462
그러나 앨리스는 할 수 없습니다.

1097
00:52:13,462 --> 00:52:15,170
그래서 당신은 세 번째를 잃었습니다
사용자 기반의.

1098
00:52:15,170 --> 00:52:16,980
어쩌면 100 %보다 낫다?

1099
00:52:16,980 --> 00:52:20,580
우리가 할 수 있다면하지만 어쩌면 그것은 좋은 것
여전히 우리의 사용자의 100 %를 지원

1100
00:52:20,580 --> 00:52:23,470
때에도의 제 우리
서버가 오프라인 상태가됩니다.

1101
00:52:23,470 --> 00:52:24,760
>> 그래서 우리는 무엇을 동기화 할 수 있을까?

1102
00:52:24,760 --> 00:52:29,250
아니 사용자, 그 자체지만,
모든 서버에서 데이터베이스.

1103
00:52:29,250 --> 00:52:33,350
그래서 지금 우리는 종류의 어떤 필요
상호 연결의 종류

1104
00:52:33,350 --> 00:52:37,880
여기에 있기 때문에 서버 자체
무리하지 sync-- 수 있습니다.

1105
00:52:37,880 --> 00:52:40,090
사실,이 기술은 존재한다.

1106
00:52:40,090 --> 00:52:45,550
데이터베이스의 세계에서, 거기에
마스터 - 슬레이브 데이터베이스의 개념,

1107
00:52:45,550 --> 00:52:48,240
또는 차 보조,
여기서 기능 중

1108
00:52:48,240 --> 00:52:51,050
데이터를 저장하는 데뿐만 아니라
데이터로 응답,

1109
00:52:51,050 --> 00:52:53,375
뿐만 아니라 단지 지속적으로
서로 동기화 할 수 있습니다.

1110
00:52:53,375 --> 00:52:56,480
그래서 언제든지 당신이 작성하거나 저장
이 데이터베이스에 뭔가,

1111
00:52:56,480 --> 00:53:00,040
즉시 "복제"도착
뿐만 아니라 다른 데이터베이스에.

1112
00:53:00,040 --> 00:53:02,870
>> 그리고 당신이 그것을 읽을 언제든지,
당신이 어디에 그것은 중요하지 않습니다.

1113
00:53:02,870 --> 00:53:05,170
때문에 이론의 경우
그들은 모두 당신이있어, 동기화 한

1114
00:53:05,170 --> 00:53:07,710
데이터의 동일한보기를 얻을 것.

1115
00:53:07,710 --> 00:53:10,800
그래서이 완벽 소리.

1116
00:53:10,800 --> 00:53:11,883
캐치있을거야.

1117
00:53:11,883 --> 00:53:15,200

1118
00:53:15,200 --> 00:53:18,990
캐치는 무엇을 할 수 있는가?

1119
00:53:18,990 --> 00:53:21,790
>> 청중 : [들리지]

1120
00:53:21,790 --> 00:53:25,830
>> DAVID 마란 : 네, 그렇게 세 번
많은 물건이 잘못 될 수 있습니다.

1121
00:53:25,830 --> 00:53:26,930
그게 현실이다.

1122
00:53:26,930 --> 00:53:28,480
그것은 모든 정신에 따라 변경 될 수 있습니다.

1123
00:53:28,480 --> 00:53:30,404
하지만 누군가가이를 구성 할 필요가있다.

1124
00:53:30,404 --> 00:53:33,070
더 높은 가능성이있다 그
뭔가 잘못 갈 것입니다.

1125
00:53:33,070 --> 00:53:38,130
그냥 당신이 된 조합
오류가하는 경향이 더 많은 물건.

1126
00:53:38,130 --> 00:53:40,505
또 어떤 잠재적으로 나쁜?

1127
00:53:40,505 --> 00:53:41,380
청중 : [들리지]

1128
00:53:41,380 --> 00:53:44,100

1129
00:53:44,100 --> 00:53:46,180
>> DAVID 마란 : 네, 그래서
동기화는 나쁜 될 수 있습니다.

1130
00:53:46,180 --> 00:53:48,110
비록 당신이 알고있을로
백업에서와 같은

1131
00:53:48,110 --> 00:53:50,520
그냥 맹목적으로하고 있습니다 경우
뭔가가 무엇을하면 백업,

1132
00:53:50,520 --> 00:53:51,560
하나의 데이터베이스에 잘못?

1133
00:53:51,560 --> 00:53:53,018
당신은 당신이 안 뭔가를 삭제합니다.

1134
00:53:53,018 --> 00:53:56,299
즉시 복제했습니다
다른 곳에 그 문제.

1135
00:53:56,299 --> 00:53:58,840
그래서 빅토리아 talking-- 백업했다
여기에 좋은 일이 될 것입니다.

1136
00:53:58,840 --> 00:54:00,549
그래서 우리는 다시 그에게 얻을 수 있습니다.

1137
00:54:00,549 --> 00:54:03,090
그리고 분명히, 우리는 얘기
하지 여기에 백업에 대한 자체.

1138
00:54:03,090 --> 00:54:08,240
우리는 진정한 복제에 대해 얘기하고
또는 서버에서 동기화.

1139
00:54:08,240 --> 00:54:09,110
그들은 모두 라이브입니다.

1140
00:54:09,110 --> 00:54:12,074
그들은을 의미하지 않는
백업에 사용 될 수있다.

1141
00:54:12,074 --> 00:54:13,294
>> 청중 : [들리지]

1142
00:54:13,294 --> 00:54:14,335
DAVID 마란 : 무엇입니까?

1143
00:54:14,335 --> 00:54:14,710
청중 : Higher--

1144
00:54:14,710 --> 00:54:15,751
DAVID 마란 : 높은 비용.

1145
00:54:15,751 --> 00:54:20,180
우리는 비용을 세 겹으로 한
물론,하지만 적어도 측면에서

1146
00:54:20,180 --> 00:54:21,100
하드웨어.

1147
00:54:21,100 --> 00:54:23,200
데이터베이스이기 때문에
소프트웨어의 단지 조각.

1148
00:54:23,200 --> 00:54:25,189
그리고 웹 서버는 소프트웨어의 일부이다.

1149
00:54:25,189 --> 00:54:27,980
우리가 사용하는 경우 그것은 아마 무료
오픈 소스 것들의 수.

1150
00:54:27,980 --> 00:54:30,480
하지만 우리가 사용하는 경우
오라클과 같은,

1151
00:54:30,480 --> 00:54:36,574
우리는 당 오라클 더 많은 돈을 지불하고
액세스 라이센스 또는 Microsoft.

1152
00:54:36,574 --> 00:54:38,240
여기에 몇 가지 다른 잡을 수있을거야.

1153
00:54:38,240 --> 00:54:39,240
그것은이 간단 할 수 없습니다.

1154
00:54:39,240 --> 00:54:42,990

1155
00:54:42,990 --> 00:54:47,300
>> 당신의 지점 그래서, 나는 생각
카림, 아니 지리 earlier-- 나에 대한,

1156
00:54:47,300 --> 00:54:50,870
가정 geography--에 대한 로마, 그것을했다
우리는 이것에 대해 스마트되고 있다는 것을,

1157
00:54:50,870 --> 00:54:54,080
우리는, 우리의 서버 중 하나를 가하고있어
미국에있는 우리의 데이터베이스를 설정에서,

1158
00:54:54,080 --> 00:54:56,910
유럽​​에있는 다른, 또 다른
남미, 아프리카의 또 다른,

1159
00:54:56,910 --> 00:55:00,290
아시아의 다른 어디서나 우리
전세계 할 수 있습니다.

1160
00:55:00,290 --> 00:55:04,220
우리는 이미 우리의 추적 알고
노선이 점 A와 점

1161
00:55:04,220 --> 00:55:06,910
B, 그들은 더 멀리 떨어져 있다면,
시간이 더 걸릴 것입니다.

1162
00:55:06,910 --> 00:55:10,312
>> 그리고 일부 사용한 경우
페이스 북이나 트위터 같은 도구,

1163
00:55:10,312 --> 00:55:13,520
또는이 사이트의 요즘 그
끊임없이 때문에 사용자의 변화

1164
00:55:13,520 --> 00:55:16,880
생성 된 데이터, 때로는 경우
새로 고침을 치거나 같은 페이지를 엽니 다

1165
00:55:16,880 --> 00:55:20,270
다른 브라우저에서, 당신은 볼
다른 버전, 거의.

1166
00:55:20,270 --> 00:55:22,875
당신은 다른 사람의 상태를 볼 수 있습니다
여기에 여기에 있지만 업데이트

1167
00:55:22,875 --> 00:55:25,500
다음은 다시로드하고,
나타납니다, 당신은 다시 다시로드

1168
00:55:25,500 --> 00:55:26,640
그것은 사라집니다.

1169
00:55:26,640 --> 00:55:29,076
환언에서, 유지
이것에 대한 눈을 밖으로, 적어도

1170
00:55:29,076 --> 00:55:30,950
소셜 사용하는 경우
특히 네트워킹.

1171
00:55:30,950 --> 00:55:33,320
>> 다시 말하지만, 그냥 때문에
데이터가 너무 빨리 변화

1172
00:55:33,320 --> 00:55:35,710
때로는 서버는 동기화받을 수 있나요.

1173
00:55:35,710 --> 00:55:37,230
그리고 어쩌면 슈퍼 작은 창입니다.

1174
00:55:37,230 --> 00:55:39,970
아마 그러나 200 밀리 초,
그것의 that--보다 더

1175
00:55:39,970 --> 00:55:43,415
일부 비 제로 시간이 걸릴 것
이러한 데이터베이스가 동기화 할 시간.

1176
00:55:43,415 --> 00:55:45,290
그리고 우리는 아니에요
하나의 요청에 대해 얘기.

1177
00:55:45,290 --> 00:55:48,540
회사는 수천이있는 경우
사용자는 동시에 그것을 사용

1178
00:55:48,540 --> 00:55:49,460
그들은 버퍼 수 있습니다.

1179
00:55:49,460 --> 00:55:52,240
즉,이 힘은
큐 또는 대기 줄 수

1180
00:55:52,240 --> 00:55:54,950
그 데이터베이스의 모든 이전
쿼리는 동기화 얻을 수 있습니다.

1181
00:55:54,950 --> 00:55:56,610
그래서 아마 실제로는 몇 초입니다.

1182
00:55:56,610 --> 00:55:59,820
>> 그리고 실제로 이것이 사실 난 생각
페이스 북, 이에이 일에

1183
00:55:59,820 --> 00:56:02,010
그들은에서 동기화 할 때
웨스트 코스트 이스트 코스트,

1184
00:56:02,010 --> 00:56:06,026
그것은 비 단순있다
전파 지연, 말하자면

1185
00:56:06,026 --> 00:56:07,650
당신은 단지 종류의 용납 할 필요가있다.

1186
00:56:07,650 --> 00:56:11,210
그리고 그것은 너무 많은 아니에요
그와 같은 버그는 현실이다

1187
00:56:11,210 --> 00:56:14,230
사용자가 볼 수 있음
적어도에 대한 올바른 데이터

1188
00:56:14,230 --> 00:56:14,970
몇 초.

1189
00:56:14,970 --> 00:56:17,410
>> 나는 많은 트위터에이 참조
실제로 어디 때때로 나는거야

1190
00:56:17,410 --> 00:56:21,227
하나의 창에서 트윗에 다른 열
다음 실제로 그것을 확인하는 볼

1191
00:56:21,227 --> 00:56:22,560
올라 갔다, 그리고 아직 없습니다.

1192
00:56:22,560 --> 00:56:25,340
그리고 난 종류의 다시로드해야합니다,
오 reload--, 거기가, 다시로드합니다.

1193
00:56:25,340 --> 00:56:27,150
이 저장되지 않았기 때문에 그게 아니다.

1194
00:56:27,150 --> 00:56:29,850
그것은 단지 전파되지 않았습니다
다른 서버에.

1195
00:56:29,850 --> 00:56:33,120
>> 그래서 트레이드 오프, 너무 ... 정말 당신을
위험에 자신을 노출 할

1196
00:56:33,120 --> 00:56:37,254
사용자가 자신의 순서로 진행하는
역사, 아직 사실이 아니다?

1197
00:56:37,254 --> 00:56:38,420
나는 특정 은행이를 참조하십시오.

1198
00:56:38,420 --> 00:56:42,100
때 항상, 하나, 잘, 날 귀찮게
당신은 다시 육개월 같이 갈 수있다

1199
00:56:42,100 --> 00:56:45,160
일부 은행에서 은행 문에서,
심지어 이론적으로 그들이해야하지만

1200
00:56:45,160 --> 00:56:46,576
온라인으로 모든 것을 가질 수.

1201
00:56:46,576 --> 00:56:48,630
그들은 단지 가끔 물건을 오프라인으로.

1202
00:56:48,630 --> 00:56:51,430
때때로, 그것은 어떤 웹 사이트입니다 너무 ...?

1203
00:56:51,430 --> 00:56:53,570
그것에서 GoDaddy의, 오 one--있다, 나는 생각한다.

1204
00:56:53,570 --> 00:56:56,620
에서 GoDaddy는 때 체크 아웃
도메인 이름 또는 뭔가를 구입,

1205
00:56:56,620 --> 00:56:58,630
그들은 종종 당신에게 줄 것이다
영수증에 대한 링크.

1206
00:56:58,630 --> 00:57:01,470
그리고 당신은 그 링크를 오른쪽 클릭하면
멀리, 종종 작동하지 않습니다.

1207
00:57:01,470 --> 00:57:03,290
그냥 막, 여기에 아무것도 말했다.

1208
00:57:03,290 --> 00:57:05,450
>> 그리고 너무의의 때문에
이러한 전달 지연.

1209
00:57:05,450 --> 00:57:08,290
때문에 어떤 이유로, 그들은
약간의 시간을 복용

1210
00:57:08,290 --> 00:57:09,670
실제로을 생성합니다.

1211
00:57:09,670 --> 00:57:12,070
그래서 이것은 당신이 원하는의 같은 종류입니다
어떤 시점에서 당신의 머리를 잡아 당깁니다.

1212
00:57:12,070 --> 00:57:14,486
모든 때문에 당신은에 노력하고
이렇게 간단한 문제를 해결하는 것이다.

1213
00:57:14,486 --> 00:57:16,590
그리고 우리는 새로운 만들고 유지
자신에 대한 문제.

1214
00:57:16,590 --> 00:57:18,770
그래서이 있는지 확인하자 우리
종류의이 취소 할 수 있습니다.

1215
00:57:18,770 --> 00:57:22,730
>> 그것은 결합 밝혀
웹 서버의 모든 데이터베이스에

1216
00:57:22,730 --> 00:57:25,090
정말 가장 좋은 방법입니다.

1217
00:57:25,090 --> 00:57:27,950
일반적으로, 어떤 엔지니어
수행하거나 시스템 설계자 것,

1218
00:57:27,950 --> 00:57:30,340
다른이하는 것
서버의 계층.

1219
00:57:30,340 --> 00:57:33,160
그리고 단지 공간을 위하여, 나는거야
여기에 자신의 데이터베이스를 그립니다.

1220
00:57:33,160 --> 00:57:38,060
>> 우리는 데이터베이스가있을 수 있습니다 및
서버 네 번째 여기

1221
00:57:38,060 --> 00:57:42,430
그 연결을 가지고있다
여기에 이​​러한 서버의 각.

1222
00:57:42,430 --> 00:57:45,400
그래서 이것은 우리 앞에 수 있습니다
사람들이 말하는 것처럼, 계층을 종료.

1223
00:57:45,400 --> 00:57:47,770
그리고 이것은 우리의 백엔드 계층이 될 것이다.

1224
00:57:47,770 --> 00:57:50,580
그리고는 것을 의미한다
이것들은 사용자에 직면한다.

1225
00:57:50,580 --> 00:57:53,010
그리고 데이터베이스는 사용자에 직면하지 않습니다.

1226
00:57:53,010 --> 00:57:55,480
없음 사용자가 직접 할 수
데이터베이스에 액세스 할 수 있습니다.

1227
00:57:55,480 --> 00:57:59,280
>> 그래서 지금은 아마 아래로 가자
경로 빅토리아 제안했다.

1228
00:57:59,280 --> 00:58:00,940
이것은 단일 장애 지점이다.

1229
00:58:00,940 --> 00:58:02,290
그 날이 불편합니다.

1230
00:58:02,290 --> 00:58:05,790
그래서 아마도입니다
가장 확실한 해결책?

1231
00:58:05,790 --> 00:58:06,665
청중 : [들리지]

1232
00:58:06,665 --> 00:58:09,979

1233
00:58:09,979 --> 00:58:11,437
데이비드 마란은 : 죄송합니다, 다시 말한다.

1234
00:58:11,437 --> 00:58:12,352
청중 : [들리지]

1235
00:58:12,352 --> 00:58:13,810
DAVID 마란 : 비 프로덕션 서버.

1236
00:58:13,810 --> 00:58:15,364
당신은 무엇을 의미합니까?

1237
00:58:15,364 --> 00:58:17,120
>> 청중 : [들리지]

1238
00:58:17,120 --> 00:58:19,120
>> DAVID 마란 : 아, OK, 백업 그래서.

1239
00:58:19,120 --> 00:58:21,110
OK, 그래서 우리는 확실히 그렇게 할 수 있습니다.

1240
00:58:21,110 --> 00:58:23,790
그리고 실제로는 매우 일반적으로 수행됩니다.

1241
00:58:23,790 --> 00:58:26,470
이 데이터베이스 번호 오 수 있습니다.

1242
00:58:26,470 --> 00:58:28,510
그러나 단지이다
네 번째로 연결되어 있습니다.

1243
00:58:28,510 --> 00:58:31,110
그리고 당신은 핫 스페어를 호출 할 수 있습니다.

1244
00:58:31,110 --> 00:58:35,080
이러한 두 개의 데이터베이스가 구성 될 수있다
다만 지속적으로 동기화

1245
00:58:35,080 --> 00:58:35,850
서로.

1246
00:58:35,850 --> 00:58:39,010
그리고이 기계에 대해, 죽으면
하드 드라이브 reason-- 바보 어떤

1247
00:58:39,010 --> 00:58:42,100
사람이 걸려 넘어, 사망
코드는 일부 소프트웨어는 결함이

1248
00:58:42,100 --> 00:58:46,560
및 시스템 중단 또는 crashes--
당신은 문자 그대로 인간을 가질 수

1249
00:58:46,560 --> 00:58:51,090
벽에서이 일을 뽑습니다
대신이 하나를 연결합니다.

1250
00:58:51,090 --> 00:58:56,340
그리고 이내의가하는 말을하자
몇 분, 아마 반 시간,

1251
00:58:56,340 --> 00:58:57,210
당신은 다시 온라인 상태입니다.

1252
00:58:57,210 --> 00:58:59,259
>> 그것은 위대한 아니지만
또한 끔찍한 아니다.

1253
00:58:59,259 --> 00:59:01,800
그리고 당신은 걱정할 필요가 없습니다
어떤 동기화 문제에 대한.

1254
00:59:01,800 --> 00:59:03,080
모든 이미 있기 때문에.

1255
00:59:03,080 --> 00:59:05,000
당신은 완벽했기 때문에
갈 준비 백업.

1256
00:59:05,000 --> 00:59:07,100
>> 당신은 조금 될 수 있습니다
이 약 애호가,

1257
00:59:07,100 --> 00:59:12,990
어떤 사람들은 종종처럼, 어디를
여기에 데이터베이스 네 번째가있을 수 있습니다,

1258
00:59:12,990 --> 00:59:17,480
데이터베이스 번호 오 여기,
즉, 서로 말하고있다.

1259
00:59:17,480 --> 00:59:24,120
그러나 당신이이
가지 arrangement--

1260
00:59:24,120 --> 00:59:27,440
그리고 의도적으로
, 지저분 해 보이는 그것 때문에

1261
00:59:27,440 --> 00:59:30,220
is-- 곳의 모든
프런트 엔드 서버 수

1262
00:59:30,220 --> 00:59:32,870
백 엔드 서버의 모든 이야기.

1263
00:59:32,870 --> 00:59:38,130
이 데이터베이스는하지 않도록 경우
이 프런트 엔드 서버가 있고, 응답

1264
00:59:38,130 --> 00:59:40,212
프로그래밍을 가지고
말한다 그들의 코드,

1265
00:59:40,212 --> 00:59:42,170
당신은을하지 않는 경우
이 데이터베이스에 연결,

1266
00:59:42,170 --> 00:59:45,830
기본이 즉시 시작
보조 얘기.

1267
00:59:45,830 --> 00:59:48,310
>> 하지만 지금 밀어
코드에 복잡성.

1268
00:59:48,310 --> 00:59:52,070
이제 개발자, 소프트웨어
개발자들은 이것에 대해 알아야합니다.

1269
00:59:52,070 --> 00:59:56,454
그리고 당신은 종류의 코드를 묶는하고 그
당신은 당신의 실제 백 엔드에 작성하는

1270
00:59:56,454 --> 00:59:58,370
구현 세부 사항
이는 어렵게 만든다,

1271
00:59:58,370 --> 01:00:00,670
특히 더 큰를의
회사 또는 큰 웹 사이트,

1272
01:00:00,670 --> 01:00:05,020
여기서 당신이 필요하지 않습니다
프로그래머가 갖고 싶어

1273
01:00:05,020 --> 01:00:10,890
방법 데이터베이스를 알고
엔지니어들은 작업을하고있다.

1274
01:00:10,890 --> 01:00:13,810
당신은 그 역할을 계속 할 수 있습니다
일종의 기능적으로 구별 그래서

1275
01:00:13,810 --> 01:00:16,810
이 레이어가 있음
둘 사이의 추상화입니다.

1276
01:00:16,810 --> 01:00:17,940
>> 그래서 우리는 어떻게이 문제를 해결할 수 있는가?

1277
01:00:17,940 --> 01:00:20,290
음, 우리는 가지 해결
한 번 전에이 문제를 해결합니다.

1278
01:00:20,290 --> 01:00:25,680
왜 우리는의를 넣지 마십시오
여기에 이​​런 일

1279
01:00:25,680 --> 01:00:30,947
이 네 번째에 다시 이야기하고
다섯 프론트 엔드 웹 서버의 모든

1280
01:00:30,947 --> 01:00:33,780
이 중개인에게 이야기하고,
턴 경로 데이터에서 중개인?

1281
01:00:33,780 --> 01:00:38,494
사실, 무엇을 할 수있는
이 일을 위해 좋은 이름은?

1282
01:00:38,494 --> 01:00:39,704
>> 청중 : [들리지]

1283
01:00:39,704 --> 01:00:41,120
DAVID 마란 : OK, 데이터베이스 관리.

1284
01:00:41,120 --> 01:00:48,030
그러나이 용어는 그가 무엇인지
우리는이 장치에 대해 다시 사용할 수 있을까?

1285
01:00:48,030 --> 01:00:49,760
우리는 균형을하고 있습니다.

1286
01:00:49,760 --> 01:00:52,480
그래, 그래서 사실, 난
여기 공평하지.

1287
01:00:52,480 --> 01:00:56,760
그래서로드 밸런서는 것을 의미 것
우리는 앞뒤로 여기 전환하고

1288
01:00:56,760 --> 01:00:58,836
이는 실제로 경우 일 필요는 없다.

1289
01:00:58,836 --> 01:01:00,460
그래서 우리는이 작업을 수행 할 수있는 몇 가지 방법이있다.

1290
01:01:00,460 --> 01:01:03,920
>> 이러한로드 밸런서 사실이면
이야기는 정확히 이전과 동일합니다.

1291
01:01:03,920 --> 01:01:05,230
요청 중 일부는 4로 이동합니다.

1292
01:01:05,230 --> 01:01:06,150
그들 중 일부는 5로 이동합니다.

1293
01:01:06,150 --> 01:01:06,710
그리고 그것은 좋다.

1294
01:01:06,710 --> 01:01:08,835
지금 우리가 처리 할 수​​ 있기 때문에
두 배의 처리량.

1295
01:01:08,835 --> 01:01:11,120
그러나이 연결
여기에 슈퍼 중요하다.

1296
01:01:11,120 --> 01:01:14,050
그들은 지속적으로 유지해야
동기화 희망

1297
01:01:14,050 --> 01:01:17,670
있다 없다 지리적으로 너무 멀리 떨어져 있으므로
동기화는 본질적으로 그

1298
01:01:17,670 --> 01:01:18,520
동시에 일어나는.

1299
01:01:18,520 --> 01:01:20,410
그렇지 않으면 우리는 문제가있을 수 있습니다.

1300
01:01:20,410 --> 01:01:21,330
>> 그래서 나쁜입니다.

1301
01:01:21,330 --> 01:01:25,132
그러나 다시, 우리는했습니다
새로운 문제를 소개했다.

1302
01:01:25,132 --> 01:01:26,590
어떤 문제 난 그냥 다시 한?

1303
01:01:26,590 --> 01:01:30,000

1304
01:01:30,000 --> 01:01:31,020
단일 장애 지점.

1305
01:01:31,020 --> 01:01:32,390
그래서에 대한 해결책은 무엇인가?

1306
01:01:32,390 --> 01:01:39,270
빅토리아의 돈을 지출하기를 좋아 있도록
우리는이 사람을 가지고이 작업을 수행 할 수 있습니다.

1307
01:01:39,270 --> 01:01:41,731
그리고 난 그냥 갈거야
여기에 충분한 공간을 이동합니다.

1308
01:01:41,731 --> 01:01:43,230
그리고 좀 지저분 할 것입니다.

1309
01:01:43,230 --> 01:01:44,563
나는 그리기 선을 유지하겠습니다.

1310
01:01:44,563 --> 01:01:47,080
모든한다고 가정
그 라인 모두에 가서?

1311
01:01:47,080 --> 01:01:52,670
>> 매우 일반적인 기술은 여기에있을 것입니다
하트 비트라는 기술을 사용

1312
01:01:52,670 --> 01:01:57,390
이에 의해 각 장치,
왼쪽과 오른쪽 부하 분산,

1313
01:01:57,390 --> 01:02:00,740
또는 우리가 전화를 원하는,
끊임없이 말하고, 나는, 살아있어

1314
01:02:00,740 --> 01:02:03,220
난 살아있어, 난 살아있어, 살아있어.

1315
01:02:03,220 --> 01:02:05,910
그 중 하나 기본적으로
기본 역할을합니다.

1316
01:02:05,910 --> 01:02:09,620
그래서 모든 트래픽을 라우팅되고
왼쪽에있는 하나의 예를 들면,

1317
01:02:09,620 --> 01:02:11,260
기본적으로, 임의로.

1318
01:02:11,260 --> 01:02:16,890
>> 그러나 곧 오른쪽에있는 사람으로
더 이상 왼쪽 사람의 의견을하지 않습니다,

1319
01:02:16,890 --> 01:02:20,440
오른쪽에 하나는 프로그래밍
자동으로, 예를 들면,

1320
01:02:20,440 --> 01:02:24,110
IP 주소를 인계
왼쪽에 하나,

1321
01:02:24,110 --> 01:02:28,240
따라서 일차되고,
아마도 이메일 또는 문자 메시지를 보내

1322
01:02:28,240 --> 01:02:31,570
인간에, 헤이, 대답
왼쪽 기본은 오프라인 상태입니다.

1323
01:02:31,570 --> 01:02:33,310
나는 지금은 기본이 될 것입니다.

1324
01:02:33,310 --> 01:02:35,760
그래서 부사장된다
대통령은, 말하자면.

1325
01:02:35,760 --> 01:02:38,180
그리고 누군가가 저장 가고있다
대통령, 당신이 원하는 경우.

1326
01:02:38,180 --> 01:02:41,090
지금 우리는 임시을 가지고 있기 때문에
단일 장애 지점.

1327
01:02:41,090 --> 01:02:45,020
>> 그래서 복잡하거나 스트레스
이 것을 시작 보일 수 있습니다,

1328
01:02:45,020 --> 01:02:46,990
이것은 당신이 이러한 문제를 해결하는 방법입니다.

1329
01:02:46,990 --> 01:02:48,190
당신은 돈을 던져 않습니다.

1330
01:02:48,190 --> 01:02:49,370
당신은 그것을 하드웨어를 던져.

1331
01:02:49,370 --> 01:02:52,170
하지만 불행하게도에게
그것을 위해 복잡성을 추가합니다.

1332
01:02:52,170 --> 01:02:56,450
그러나 그 결과는 궁극적 있다는
는 이론적으로 훨씬 더 가지고

1333
01:02:56,450 --> 01:02:57,670
강력한 아키텍처.

1334
01:02:57,670 --> 01:02:58,850
아직 완벽하지 않습니다.

1335
01:02:58,850 --> 01:03:02,470
우리가 잔 마셔요 경우에도 우리가 수 있기 때문에
단일 장애 지점이 없습니다.

1336
01:03:02,470 --> 01:03:05,240
우리는 지금 실패의 듀얼 포인트가 있습니다.

1337
01:03:05,240 --> 01:03:07,630
그러나 두 가지 문제점이 있으면,
이는 절대적으로 수,

1338
01:03:07,630 --> 01:03:09,030
우리는 여전히 오프라인 것입니다.

1339
01:03:09,030 --> 01:03:11,660
>> 그리고에서 매우 매우 일반적인
업계는 설명하는 것입니다

1340
01:03:11,660 --> 01:03:14,000
화려 측면에서 최대 시간입니다.

1341
01:03:14,000 --> 01:03:18,610
그리고 목표의 종류
99.999 %를 열망하는

1342
01:03:18,610 --> 01:03:21,580
시간의 사이트가 온라인 상태입니다.

1343
01:03:21,580 --> 01:03:24,170
또는 더 나은하는 추가
그에게 몇 가지 더 화려하게.

1344
01:03:24,170 --> 01:03:28,159
불행하게도,이
화려은 매우 비싸다.

1345
01:03:28,159 --> 01:03:29,450
그리고 이제 실제로을 할 수 있습니다.

1346
01:03:29,450 --> 01:03:35,510
그래서 나는 다시 내 큰 계산기를 열 경우,
1 년 365 일 하루 24 시간,

1347
01:03:35,510 --> 01:03:44,780
한 시간 60 분,
분 60 초

1348
01:03:44,780 --> 01:03:48,690
그 얼마나 많은 초입니다
1 년 나는 제대로 이런 짓을합니다.

1349
01:03:48,690 --> 01:03:55,740
우리는 시간이 0.99999로한다면, 그건
얼마나 많은 시간을 우리는에 갈망하고 싶다.

1350
01:03:55,740 --> 01:04:00,600
그 의미 그래서 우리는 당신이 최대해야한다
년 동안이 초.

1351
01:04:00,600 --> 01:04:03,920
내가 지금 빼기한다면
원래 값, 또는 오히려

1352
01:04:03,920 --> 01:04:07,480
로부터이 새로운 값
316초을 first--,

1353
01:04:07,480 --> 01:04:09,640
물론 이는 5 분입니다.

1354
01:04:09,640 --> 01:04:13,770
>> 귀하의 웹 사이트 그렇다면하거나 회사입니다
당신이있어 이에 "오 화려을"주장

1355
01:04:13,770 --> 01:04:17,050
시간의 99.99 %까지,
즉, 더 나은 서비스를 의미합니다

1356
01:04:17,050 --> 01:04:23,470
똑똑하고 신속하게되었습니다
충분한 자원 충분히 세척

1357
01:04:23,470 --> 01:04:27,890
서버는 오프라인 있음
올해의 5 분 동안.

1358
01:04:27,890 --> 01:04:29,980
그것은 비싼이고
어려운 일이에 갈망합니다.

1359
01:04:29,980 --> 01:04:31,430
>> 그래서, 너무 무역 오프입니다.

1360
01:04:31,430 --> 01:04:35,866
시간의 99.999 %가 예쁜
이놈의 하드 비싼.

1361
01:04:35,866 --> 01:04:38,740
다섯이 거의 얻을 수 minutes--
서버에 물리적으로 교체

1362
01:04:38,740 --> 01:04:40,040
잘못된 사라 졌어요 뭔가.

1363
01:04:40,040 --> 01:04:42,810
우리가 배선을 시작하는 이유입니다
더 복잡 함께 일

1364
01:04:42,810 --> 01:04:48,240
선험적되도록 컴퓨터
일종의 자신을 해결할 수 있습니다.

1365
01:04:48,240 --> 01:04:49,446
네.

1366
01:04:49,446 --> 01:04:52,344
>> 청중 : [들리지]

1367
01:04:52,344 --> 01:05:02,014

1368
01:05:02,014 --> 01:05:04,430
DAVID 마란 : 문제는 수
장소의 수에.

1369
01:05:04,430 --> 01:05:05,090
그리고 fact--에서

1370
01:05:05,090 --> 01:05:07,101
>> 청중 : [들리지]

1371
01:05:07,101 --> 01:05:08,600
DAVID 마란 : 물론, 절대적으로.

1372
01:05:08,600 --> 01:05:10,720
그리고 그림은 그대로
더 복잡해지고

1373
01:05:10,720 --> 01:05:12,110
그것은 웹 서버 수 있습니다.

1374
01:05:12,110 --> 01:05:14,690
이 건물의 전원을 수 있습니다.

1375
01:05:14,690 --> 01:05:17,900
이 같은 물리적 뭔가 될 수 있습니다
케이블이 마모 또는 추방를 받았습니다.

1376
01:05:17,900 --> 01:05:19,879
이 데이터베이스 수
응답하지 않습니다.

1377
01:05:19,879 --> 01:05:22,920
그것은 그들의 운영을 업데이트 할 수
시스템에 뭔가가 걸려있다.

1378
01:05:22,920 --> 01:05:24,634
그래서 다른 많은 움직이는 부분이 있습니다.

1379
01:05:24,634 --> 01:05:27,050
그리고 공학의 많은
즉,이 뒤에 가야

1380
01:05:27,050 --> 01:05:30,431
정말 얼마나처럼 오프를 거래한다
많은 시간, 실제로 얼마나 많은 돈이다

1381
01:05:30,431 --> 01:05:32,930
가치와 위협은 무엇인가
당신은 정말 걱정?

1382
01:05:32,930 --> 01:05:35,471
예를 들어,의
내가 하버드에서 가르치는 과정,

1383
01:05:35,471 --> 01:05:38,470
우리는 클라우드 컴퓨팅을 많이 사용하는
우리는 지금에 모습을 복용 시작합니다

1384
01:05:38,470 --> 01:05:41,107
사실, 우리는 어디에 사용
아마존 웹 서비스.

1385
01:05:41,107 --> 01:05:42,940
그냥 그게 왜냐하면
하나는 우리가 시작되었다.

1386
01:05:42,940 --> 01:05:45,856
그러나 더욱 요즘있다
구글과 마이크로 소프트와 다른 사람.

1387
01:05:45,856 --> 01:05:50,030
그리고 우리는 의식적으로 모든 넣어 선택
우리의 과정 '가상 머신,

1388
01:05:50,030 --> 01:05:55,400
그들이라는 것 같이, 내가 생각
그것은 서양 버지니아 데이터 센터입니다.

1389
01:05:55,400 --> 01:05:57,560
학생들의 대부분
미국에서 될 일이,

1390
01:05:57,560 --> 01:05:59,820
확실히 있기는하지만
일부 국제적으로.

1391
01:05:59,820 --> 01:06:02,630
>> 그러나 현실은 그냥이다
간단하고 그것은 우리를 위해 저렴

1392
01:06:02,630 --> 01:06:05,540
우리의 계란을 모두 넣어
버지니아 바구니,

1393
01:06:05,540 --> 01:06:08,050
심지어 내가 뭔가 알고 있지만
버지니아 잘못,

1394
01:06:08,050 --> 01:06:12,760
이 같은 가끔 같은 happened--
허리케인 또는 일부 날씨가 있다면

1395
01:06:12,760 --> 01:06:15,890
그런 이벤트가 있다면 어떤
전력 계통 문제 나 모든 이렇게 ...

1396
01:06:15,890 --> 01:06:20,240
우리의 과정의 데이터는 오프라인 있습니다
몇 분 또는 몇 시간의 일부 번호

1397
01:06:20,240 --> 01:06:21,600
또는 이상.

1398
01:06:21,600 --> 01:06:24,020
>> 그러나 복잡도의 양
그이 요구된다,

1399
01:06:24,020 --> 01:06:26,895
돈의 양 및 그 것
모든 것을 작동, 필요

1400
01:06:26,895 --> 01:06:31,420
유럽​​이나 캘리포니아에서 병렬
너무 많은 이해가되지 않습니다.

1401
01:06:31,420 --> 01:06:35,080
그래서 합리적인 무역의
하지만 고통스러운 일 해제

1402
01:06:35,080 --> 01:06:37,740
당신은 실제로있을 때
그 중단 시간을 갖는.

1403
01:06:37,740 --> 01:06:41,830
>> 음, 지금까지의에게 전환하자
클라우드 기반 솔루션의 일부

1404
01:06:41,830 --> 01:06:43,320
이러한 문제의 일부이다.

1405
01:06:43,320 --> 01:06:45,040
다 우리가 봤는데
지금까지 논의

1406
01:06:45,040 --> 01:06:47,527
이 문제의 종류이다
몇 시간 동안 우리와 함께,

1407
01:06:47,527 --> 01:06:49,610
당신은 자신이 있는지 여부
회사의 서버,

1408
01:06:49,610 --> 01:06:52,740
당신은 공동 위치로 이동 여부
데이터 센터 및 공유와 같은 배치

1409
01:06:52,740 --> 01:06:55,110
다른 사람과 공간,
또는 현재 클라우드한다.

1410
01:06:55,110 --> 01:06:57,040
>> 그리고에 대한 좋은거야
구름이 모든 것입니다

1411
01:06:57,040 --> 01:06:59,540
난 이런 것들을
물리적 객체로 그리기

1412
01:06:59,540 --> 01:07:02,400
이제 고려 될 수있다
가상 객체의 종류

1413
01:07:02,400 --> 01:07:04,659
있는 구름에
소프트웨어 시뮬레이션.

1414
01:07:04,659 --> 01:07:07,700
즉, 컴퓨터 오늘날
서버 오늘은 Dell의 그림처럼

1415
01:07:07,700 --> 01:07:11,720
나는, 그래서 빠르다 이전했다
너무 많은 RAM, 너무 많은 CPU, 너무 많은 디스크

1416
01:07:11,720 --> 01:07:16,140
사람들이 쓴 것을 공간,
가상 파티션 소프트웨어

1417
01:07:16,140 --> 01:07:21,130
그것의 환상에 하나의 서버까지
그래서, 두 개의 서버, 200 서버 인

1418
01:07:21,130 --> 01:07:24,150
고객이 우리 각자가
데의 환상을 가지고

1419
01:07:24,150 --> 01:07:29,110
일부 웹뿐만 아니라 계정
호스트, 그러나 우리는 우리 자신의 기계를하고 있는지

1420
01:07:29,110 --> 01:07:30,490
다른 사람에서 임대.

1421
01:07:30,490 --> 01:07:34,140
>> 하지만 가상 머신에서의
지금까지 한 델 서버로,

1422
01:07:34,140 --> 01:07:39,160
그것은 다시들로 분할 될 수 있습니다
두 개 또는 200 개 이상의 가상 머신,

1423
01:07:39,160 --> 01:07:43,770
이는 모든 행정 누군가를 제공
액세스,하지만 방법으로 어디에 우리의 없음

1424
01:07:43,770 --> 01:07:48,040
알고 또는 가상 다른 액세스 할 수 있습니다
동일한 하드웨어 시스템.

1425
01:07:48,040 --> 01:07:53,430
그래서 오늘의 슬라이드에 그림을 그릴 수 있습니다,
나는이 웹 사이트에서 여기에 촬영 한

1426
01:07:53,430 --> 01:07:54,160
도커했다.

1427
01:07:54,160 --> 01:07:56,970
>> 그래서이 조금 더
세부 사항 우리가 실제로 필요한 것보다.

1428
01:07:56,970 --> 01:07:59,830
그러나 당신은이를 볼 경우
당신의 infrastructure--

1429
01:07:59,830 --> 01:08:02,910
그래서 그냥 하드웨어 자신,
서버, 랙, 데이터

1430
01:08:02,910 --> 01:08:06,480
센터 및 모든 that--의 당신은 것
일반적으로, 호스트 운영 체제를 실행.

1431
01:08:06,480 --> 01:08:08,275
그래서 뭔가는 윈도우 될 수있다 이렇게 ....

1432
01:08:08,275 --> 01:08:09,430
그것은 맥 OS하지 않을 것입니다.

1433
01:08:09,430 --> 01:08:11,430
그건 정말 아니니까
기업 요즘.

1434
01:08:11,430 --> 01:08:15,670
그래서 리눅스 또는 Solaris 것
유닉스 나 BSD 또는 FreeBSD의 또는

1435
01:08:15,670 --> 01:08:19,779
다른 운영 체제의 수 또는
무료 또는 상업적 중 하나입니다 그.

1436
01:08:19,779 --> 01:08:22,120
>> 그리고 당신은 실행
프로그램, 특별 프로그램,

1437
01:08:22,120 --> 01:08:26,479
하이퍼 바이저라고, 또는
가상 머신 모니터, VMM.

1438
01:08:26,479 --> 01:08:31,649
당신이 있다면 그리고이 제품은 있습니다
VM웨어 나 버추얼 같은 친숙한

1439
01:08:31,649 --> 01:08:34,080
가상 PC 등을 사용하거나.

1440
01:08:34,080 --> 01:08:38,430
그리고 어떻게 그 프로그램이하는 일은 정확히
이 기능은 내가 이전에 설명했다.

1441
01:08:38,430 --> 01:08:41,779
그것은 환상을 만듭니다
하나의 물리적 시스템이

1442
01:08:41,779 --> 01:08:44,550
여러 가상 시스템이 될 수 있습니다.

1443
01:08:44,550 --> 01:08:48,260
>> 그리고 상단까지 이러한 다채로운 상자입니다
다음의 그림을 그림.

1444
01:08:48,260 --> 01:08:50,260
이 하이퍼 바이저이
소프트웨어의 조각, 호출

1445
01:08:50,260 --> 01:08:54,090
VM웨어는, 다른 실행
운영 체제는, 리눅스 호출

1446
01:08:54,090 --> 01:08:56,910
환상을 만드는 그
이 물리적 컴퓨터는 실제로

1447
01:08:56,910 --> 01:09:00,149
하나, 둘, 세 개의 가상 컴퓨터.

1448
01:09:00,149 --> 01:09:04,270
그래서 나는 지금의 소유자로, 구입했습니다
이 하드웨어, 하나의 물리적 컴퓨터.

1449
01:09:04,270 --> 01:09:06,200
그리고 지금은 임대 해요
그것은 세 고객.

1450
01:09:06,200 --> 01:09:09,731
>> 그리고 그 세 고객은 모든 생각
그들은 전용 가상 머신을 가지고있다.

1451
01:09:09,731 --> 01:09:10,939
그리고 그것은 미끼 및 스위치 아니에요.

1452
01:09:10,939 --> 01:09:13,750
그것은 더 공개의 그
당신은 가상 머신을 사용하고 있습니다.

1453
01:09:13,750 --> 01:09:17,589
그러나 기술적으로, 우리 모두
전체 관리 제어 할 수 있습니다

1454
01:09:17,589 --> 01:09:19,880
그 손님의 각 이상
, 시스템을 한 수 운영

1455
01:09:19,880 --> 01:09:21,370
운영 체제의 숫자.

1456
01:09:21,370 --> 01:09:23,029
>> 내가 원하는 무엇이든 설치할 수 있습니다.

1457
01:09:23,029 --> 01:09:24,640
내가 원하는 나는 그것을 업그레이드 할 수 있습니다.

1458
01:09:24,640 --> 01:09:27,470
내가 알지도 필요가 없습니다 또는
다른 운영에 관심

1459
01:09:27,470 --> 01:09:29,678
해당 컴퓨터 시스템,
다른 가상 머신,

1460
01:09:29,678 --> 01:09:35,290
이 모든 회색의 소유자 않는
물건은 조금 욕심이되고 있습니다

1461
01:09:35,290 --> 01:09:37,540
그리고 자신의 자원을 지나치게된다.

1462
01:09:37,540 --> 01:09:40,800
>> 당신이 하나를 복용하는 경우 그래서
물리적 시스템과 판매

1463
01:09:40,800 --> 01:09:44,399
하지 200 만 400
어떤 점에서 고객,

1464
01:09:44,399 --> 01:09:47,270
우리는 사람들로 여행거야
이전과 같은 성능 문제.

1465
01:09:47,270 --> 01:09:50,460
당신은 단지 유한이 있기 때문에
등 디스크 및 RAM과 양.

1466
01:09:50,460 --> 01:09:53,450
그리고 가상 머신
의 프로그램은 그냥

1467
01:09:53,450 --> 01:09:56,140
을 척
전체 본격적인 컴퓨터.

1468
01:09:56,140 --> 01:09:58,040
그래서 당신은 당신이 지불하는 무슨을 얻는다.

1469
01:09:58,040 --> 01:10:02,150
>> 당신이 온라인으로 찾을 수 있도록 당신은 지불 할 수
믿을만한 회사 어쩌면 $ 100 달

1470
01:10:02,150 --> 01:10:05,660
자신의 가상 머신, 또는
자신의 가상 사설 서버,

1471
01:10:05,660 --> 01:10:07,090
어떤 이는 또 다른 용어입니다.

1472
01:10:07,090 --> 01:10:10,400
아니면 의해 약간의 비행을 찾을 수 있습니다
밤 당신은 $ 5.99 한 달에 지불하는 경우

1473
01:10:10,400 --> 01:10:12,080
자신의 가상 머신.

1474
01:10:12,080 --> 01:10:15,614
그러나 확률은 거의하지 않아도됩니다
사용 가능한만큼 성능,

1475
01:10:15,614 --> 01:10:18,530
그들은 그것을 지나치게했습니다 때문에
그래서보다 당신이 더 높은 때와

1476
01:10:18,530 --> 01:10:22,340
서비스 계층 또는 더 나은 공급 업체.

1477
01:10:22,340 --> 01:10:24,590
>> 그래서이 사실은 우리에게 무엇을 의미 하는가?

1478
01:10:24,590 --> 01:10:26,110
그래서 날이 가자.

1479
01:10:26,110 --> 01:10:29,580
나는 aws.amazon.com에 갈거야.

1480
01:10:29,580 --> 01:10:31,590
그냥 그들이 가지고 있기 때문에
옵션의 좋은 메뉴.

1481
01:10:31,590 --> 01:10:34,700
그러나이 같은 교훈은 적용
다른 클라우드 공급 업체의 전체 무리입니다.

1482
01:10:34,700 --> 01:10:38,201
불행하게도, 그것은 종종 더
마케팅은 무엇보다 말한다.

1483
01:10:38,201 --> 01:10:39,200
그리고이 변화 유지합니다.

1484
01:10:39,200 --> 01:10:41,820
그래서 당신은이 같은 웹 사이트로 이동합니다.

1485
01:10:41,820 --> 01:10:44,560
그리고 이것은 정말하지 않습니다
아무것도 당신이 훨씬 말한다.

1486
01:10:44,560 --> 01:10:47,780
>> 나는이에서 보면 그리고 심지어는하지 않습니다
정말 이런 일 어떤 하나를 알고

1487
01:10:47,780 --> 01:10:49,334
나는 다이빙 할 때까지 반드시 않습니다.

1488
01:10:49,334 --> 01:10:50,875
그러나의 왼쪽, 계산에 시작하자.

1489
01:10:50,875 --> 01:10:52,980
그리고 나는 이것을 클릭거야.

1490
01:10:52,980 --> 01:10:56,960
이제 아마존은 솔직히있다
서비스의 압도적 인 수

1491
01:10:56,960 --> 01:10:57,960
요즈음.

1492
01:10:57,960 --> 01:11:01,040
그러나 아마존 EC2는 아마도 간단합니다.

1493
01:11:01,040 --> 01:11:05,840
>> 아마존 EC2는 정확히 우리를 위해 만들어집니다
사진은 우리가 잠시 전에 보았다.

1494
01:11:05,840 --> 01:11:10,240
그것은 그들이 많이 만드는 방법
클라우드에서 자신의 돈.

1495
01:11:10,240 --> 01:11:12,910
분명히 넷플릭스 등
그들과 함께 구름에 있습니다.

1496
01:11:12,910 --> 01:11:16,260
이것은 모든 전형적
무성 마케팅 말한다.

1497
01:11:16,260 --> 01:11:19,720
그래서 내가하고 싶은 것은 Pricing--로 이동하다
또는 오히려의이 인스턴스에 가자

1498
01:11:19,720 --> 01:11:23,790
첫번째 그냥이의 그림을 그릴 수 있습니다.

1499
01:11:23,790 --> 01:11:25,800
>> 그래서 이것은 공급 업체가 다를 수 있습니다.

1500
01:11:25,800 --> 01:11:29,590
그리고 우리는 너무 깊이 들어갈 필요가 없습니다
여기에 방법이 모든 작품의 잡초.

1501
01:11:29,590 --> 01:11:34,720
그러나이 방법은 아마존, 예를 들면,
당신에게 가상 컴퓨터 또는 서버를 임대

1502
01:11:34,720 --> 01:11:37,200
클라우드에 그들이 가지고있다
재미있는 이름의이 종류,

1503
01:11:37,200 --> 01:11:41,000
작은 의미 t2.nano 등
큰 의미 또는 t2.large.

1504
01:11:41,000 --> 01:11:43,970
그들 각각은 하나를 제공합니다
하나 또는 두 개의 가상 CPU.

1505
01:11:43,970 --> 01:11:45,470
>> 왜 가상 CPU입니까?

1506
01:11:45,470 --> 01:11:49,440
음, 물리적 시스템은 수도
64 개 이상의 실제 CPU를 가지고있다.

1507
01:11:49,440 --> 01:11:52,125
그러나 다시, 소프트웨어를 통해,
그들은 환상을 만들

1508
01:11:52,125 --> 01:11:55,410
그 하나의 시스템이 될 수 있음
여러 명의 사용자를 divvied.

1509
01:11:55,410 --> 01:11:58,765
그래서 우리는 다음과 같이 생각할 수 있습니다
하나의 인텔 CPU 또는 두 개의 데.

1510
01:11:58,765 --> 01:12:01,290
hour-- 나는 것 당 CPU 크레딧
작은 글씨를 읽을 필요

1511
01:12:01,290 --> 01:12:02,581
이 실제로 무엇을 의미하는지에있다.

1512
01:12:02,581 --> 01:12:05,850
그것은 기계의 정도를 의미한다
당신이 마주 시간당 사용할 수 있습니다

1513
01:12:05,850 --> 01:12:07,730
하드웨어에 다른 고객.

1514
01:12:07,730 --> 01:12:11,560
>> 여기에 얼마나 많은 RAM 또는 메모리 당신입니다
이거나 먹어 중 절반 기가 바이트, 또는 (500)

1515
01:12:11,560 --> 01:12:14,120
메가 바이트 또는 1 기가 바이트 2.

1516
01:12:14,120 --> 01:12:17,390
그리고 저장 단지를 말한다
디스크의 종류 그들은 당신을 제공합니다.

1517
01:12:17,390 --> 01:12:19,950
다른 스토리지가있다
그들이 제공하는 기술.

1518
01:12:19,950 --> 01:12:22,870
그러나 이것보다 더 흥미로운
다음 가격 일 수 있습니다.

1519
01:12:22,870 --> 01:12:25,860
>> 당신이 CTO 또는 경우에 따라서
하지 않는 엔지니어

1520
01:12:25,860 --> 01:12:28,420
에 서버를 실행하려는
사무실, 어떤 이유,

1521
01:12:28,420 --> 01:12:30,230
그리고 그것은 너무 방법
복잡하거나 비싼

1522
01:12:30,230 --> 01:12:33,930
서버를 구입하고이를 공동-찾을 수 및
일부 물리적 케이지 공간에 임대료를 지불

1523
01:12:33,930 --> 01:12:36,670
somewhere-- 그냥 앉아서 할
노트북에서 늦은 밤,

1524
01:12:36,670 --> 01:12:40,480
신용 카드 정보를 입력
및 cloud-- 아니라 임대 서버,

1525
01:12:40,480 --> 01:12:41,920
우리는 여기에서 그것을 할 수 있습니다.

1526
01:12:41,920 --> 01:12:45,769
리눅스 이러시면 내려 갈거야
대중적인 운영 시스템이다.

1527
01:12:45,769 --> 01:12:47,310
그리고 그냥 물건의 감각을 얻을 수 있습니다.

1528
01:12:47,310 --> 01:12:48,990
너무 큰 Whoops--.

1529
01:12:48,990 --> 01:12:53,670
>> 그래서 자신의 가장 작은 살펴 보자
갖고있는 것 같아요 가상 머신,

1530
01:12:53,670 --> 01:12:57,440
우리의 목적을 위해, 하나의 CPU
와 RAM의 500메가바이트.

1531
01:12:57,440 --> 01:12:58,440
즉, 아주 작은입니다.

1532
01:12:58,440 --> 01:13:00,820
하지만 솔직히, 웹 서버는하지 않습니다
모든 많이 할 필요가있다.

1533
01:13:00,820 --> 01:13:02,630
당신은 당신의 노트북에 더 좋은 사양을 가지고있다.

1534
01:13:02,630 --> 01:13:04,990
하지만 당신은 그 필요하지 않습니다
사양 것들에 대한 요즘.

1535
01:13:04,990 --> 01:13:11,490
당신은 시간당 $ 0.0065을 지불 할 것입니다.

1536
01:13:11,490 --> 01:13:12,080
>> 그래서 보자.

1537
01:13:12,080 --> 01:13:15,970
이 경우 하루에 24 시간, 그리고
우리는 시간 당이 정도를 지불하고

1538
01:13:15,970 --> 01:13:20,680
것을 임대 당신에게 $ 0.15 비용을 부담해야
클라우드에서 특정 서버.

1539
01:13:20,680 --> 01:13:22,210
그리고는 하루입니다.

1540
01:13:22,210 --> 01:13:27,050
우리는이 365-- $ 57를 할 경우
특정 서버를 임대.

1541
01:13:27,050 --> 01:13:28,420
그래서 슈퍼 싼 소리가 난다.

1542
01:13:28,420 --> 01:13:31,100
>> 그것은 또한 매우 낮은 성능입니다.

1543
01:13:31,100 --> 01:13:37,169
그래서 우리는 과정에 대해 나는 경향이 있고, 여기에 가르쳐
내가 t2.smalls 또는 t2.mediums 생각 사​​용할 수 있습니다.

1544
01:13:37,169 --> 01:13:39,960
그리고 우리는 수백이있을 수 있습니다
사용자, 몇 천 사용자, 총.

1545
01:13:39,960 --> 01:13:40,900
그것은 꽤 겸손입니다.

1546
01:13:40,900 --> 01:13:42,360
그럼이 비용이 무엇인지 살펴 보자.

1547
01:13:42,360 --> 01:13:49,260
그래서 나는이 비용 시간을 할 경우 (24)
시간 시간 365이 하나의 $ (225).

1548
01:13:49,260 --> 01:13:51,160
그리고 코스
나는 우리가 일반적으로 가르쳐

1549
01:13:51,160 --> 01:13:54,970
에 대한 모든 것을 두 가지를 실행
중복도 성능.

1550
01:13:54,970 --> 01:13:59,230
그래서 우리는 따라서 지출 있습니다,
서버에 대한 $ (500)

1551
01:13:59,230 --> 01:14:00,860
것을 우리는 매년해야 할 수도 있습니다.

1552
01:14:00,860 --> 01:14:05,210
>> 지금, 당신이 더 필요한 경우 performance--
의 메모리를 살펴 보자.

1553
01:14:05,210 --> 01:14:06,810
우리는 메모리에 대해 꽤 얘기했습니다.

1554
01:14:06,810 --> 01:14:09,330
그리고 당신은 더 필요 않은 경우
memory-- 및 64기가바이트

1555
01:14:09,330 --> 01:14:12,310
내가 mentioning-- 유지 수입니다
이 시간 당 약 $ 1입니다.

1556
01:14:12,310 --> 01:14:16,180
그리고 당신은 매우 신속하게 위치를 볼 수 있습니다
이 때문에 24시간 시간 365 goes--.

1557
01:14:16,180 --> 01:14:20,580
그래서 지금은 연간 $ 8​​,000입니다
꽤 괜찮은 서버.

1558
01:14:20,580 --> 01:14:23,010
>> 어떤 점에서 그래서, 거기에
이 변곡점

1559
01:14:23,010 --> 01:14:29,510
우리는 $ 6,000 보낼 수있는 곳 해주기
아마 그 같은 기계를 구입

1560
01:14:29,510 --> 01:14:33,800
그리고, 아마 둘 이상 비용을 상환
3 년 기계의 수명.

1561
01:14:33,800 --> 01:14:38,880
하지만 당신을 무엇을 밀어 수 있습니다
선호 또는 임대의 눈 밖에 남

1562
01:14:38,880 --> 01:14:41,230
이 같은 클라우드 기계?

1563
01:14:41,230 --> 01:14:44,110
다시 말하지만, 이것은 아마 비슷
이러한 델의 서버 중 하나에

1564
01:14:44,110 --> 01:14:47,208
우리는 조금 전에 사진 보았다.

1565
01:14:47,208 --> 01:14:51,016
>> 청중 : [들리지]

1566
01:14:51,016 --> 01:14:54,350

1567
01:14:54,350 --> 01:14:56,190
>> 데이비드 마란 : 네, 그 엄청난 상승이다.

1568
01:14:56,190 --> 01:14:58,640
우리가 구입하지 않는 때문에
기계, 우리는 그것을 언 박싱 할 필요가 없습니다.

1569
01:14:58,640 --> 01:14:59,600
우리는 그것을 들어 올릴 필요가 없습니다.

1570
01:14:59,600 --> 01:15:01,110
우리는 우리의 랙에 연결 할 필요가 없습니다.

1571
01:15:01,110 --> 01:15:02,080
우리는 그것을 연결 할 필요가 없습니다.

1572
01:15:02,080 --> 01:15:03,140
우리는 지불 할 필요가 없습니다
전기 요금.

1573
01:15:03,140 --> 01:15:05,120
>> 우리는 설정하지 않아도
에 에어컨.

1574
01:15:05,120 --> 01:15:07,620
하드 드라이브가 죽었을 때, 우리는이 없습니다
한밤중에에서 구동하기

1575
01:15:07,620 --> 01:15:08,172
문제를 해결할 수 있습니다.

1576
01:15:08,172 --> 01:15:09,630
우리는 모니터링을 설정할 필요가 없습니다.

1577
01:15:09,630 --> 01:15:13,750
목록은 계속 이러시면 우리는이 없습니다
과의 물리적 사물의 모든

1578
01:15:13,750 --> 01:15:15,810
당신이 할 필요가 없습니다
의 때문에 "구름."

1579
01:15:15,810 --> 01:15:18,620
>> 그리고 명확하게하기 위해, 클라우드 컴퓨팅
바로이 남용되는 용어이다.

1580
01:15:18,620 --> 01:15:22,790
그것은 정말 사람을 지불 수단
당신을 위해 서버를 실행하는 다른,

1581
01:15:22,790 --> 01:15:25,300
또는 공간을 임대
누군가 다른 사람의 서버.

1582
01:15:25,300 --> 01:15:27,110
그래서 용어는 "클라우드 컴퓨팅"의 새로운 기능입니다.

1583
01:15:27,110 --> 01:15:30,260
아이디어는 수십 년 오래되었습니다.

1584
01:15:30,260 --> 01:15:32,070
그래서 꽤 설득력있다.

1585
01:15:32,070 --> 01:15:33,960
>> 그리고 당신은 더 무엇을 얻을 수 있습니까?

1586
01:15:33,960 --> 01:15:38,287
글쎄, 당신은 또한 능력을 얻을
집에서 노트북에 최선을 다할.

1587
01:15:38,287 --> 01:15:40,620
즉,의 모두
난 그냥 drawing-- 된 사진

1588
01:15:40,620 --> 01:15:44,010
그리고 그 오래 전 그조차하지 않았다
나는 서버 바닥에 주위에 크롤링 된

1589
01:15:44,010 --> 01:15:46,680
용의 케이블을 연결
당신이 볼 수있는 라인의 각,

1590
01:15:46,680 --> 01:15:49,590
운영을 업그레이드
주변 시스템 및 변경 드라이브.

1591
01:15:49,590 --> 01:15:51,610
많은의가있다
그 모든 물성.

1592
01:15:51,610 --> 01:15:55,300
>> 그러나 가상에 대한 아름다운거야
기계, 이름이 가지에서 알 수 있듯이,

1593
01:15:55,300 --> 01:15:57,600
이제 웹 기반 있습니다
인터페이스된다

1594
01:15:57,600 --> 01:15:59,900
당신은 동등한를 원하는 경우
이 서버에서 라인의

1595
01:15:59,900 --> 01:16:03,959
다른 단지 입력, 유형, 유형,
클릭 및 드래그, 제출을 클릭하고, 짜잔,

1596
01:16:03,959 --> 01:16:05,250
당신은 사실상 최대 유선 있습니다.

1597
01:16:05,250 --> 01:16:07,235
이 모든 소프트웨어에서 수행 있기 때문에.

1598
01:16:07,235 --> 01:16:09,110
그리고 그 이유는 그것이 이루어집니다
소프트웨어가 다시 인에

1599
01:16:09,110 --> 01:16:12,650
우리는 너무 너무 많은 RAM 등을 가지고 있기 때문에
요즘 우리에게 가능한 많은 CPU,

1600
01:16:12,650 --> 01:16:14,880
심지어 모든하지만
그 물건은 시간이 걸립니다

1601
01:16:14,880 --> 01:16:18,450
이 일을 실행하는 속도가 느린입니다
하드웨어보다 소프트웨어,

1602
01:16:18,450 --> 01:16:23,710
이 기계를 사용하는 느린 그냥 같이
RAM 이상 하드 드라이브와 같은 장치,

1603
01:16:23,710 --> 01:16:25,190
순수하게 전자 뭔가.

1604
01:16:25,190 --> 01:16:27,490
우리는 너무 많은 자원이
우리에게 사용할 수 있습니다.

1605
01:16:27,490 --> 01:16:29,920
우리 인간은 일종의 가변되지 느리다.

1606
01:16:29,920 --> 01:16:33,840
그래서 지금은 기계가 할 수있는
단위 시간당 훨씬 더.

1607
01:16:33,840 --> 01:16:36,640
우리는이 능력을 가지고
실질적으로 일을 할 수 있습니다.

1608
01:16:36,640 --> 01:16:39,120
>> 그리고 난 코스 말할 것이다
나는 여기에, 예를 들어, 가르쳐

1609
01:16:39,120 --> 01:16:43,464
우리가 약 아마 다스
가상 머신 그래서 총

1610
01:16:43,464 --> 01:16:45,880
그 특정 실행 등
시간 프런트 엔드 물건을,

1611
01:16:45,880 --> 01:16:47,620
최종 물건을 다시하고.

1612
01:16:47,620 --> 01:16:50,237
우리는 우리의 기억을 모두 가지고있다.

1613
01:16:50,237 --> 01:16:52,820
그래서 어떤 동영상을 포함하여 일
이런 식으로 우리가 촬영하는 것을,

1614
01:16:52,820 --> 01:16:54,330
우리는 클라우드에 넣고 끝.

1615
01:16:54,330 --> 01:16:58,710
아마존은 아마존 S3라는 서비스를 제공하고 있습니다
그들의 간단한 스토리지 서비스, 어떤

1616
01:16:58,710 --> 01:17:00,397
바로 클라우드에서 디스크 공간 같다.

1617
01:17:00,397 --> 01:17:02,230
그들은 뭔가를
라는 CloudFront를, 어떤

1618
01:17:02,230 --> 01:17:06,040
는 CDN 서비스, 컨텐츠입니다
배달 네트워크 서비스하는

1619
01:17:06,040 --> 01:17:10,190
그들이 가지고 의미 모든 파일 및
당신은 자동적으로 그것을 복제에 대한

1620
01:17:10,190 --> 01:17:11,290
세계 각국.

1621
01:17:11,290 --> 01:17:12,780
>> 그래서 그들은 선제을하지 않습니다.

1622
01:17:12,780 --> 01:17:15,159
그러나 처음 사람
인도 파일을 요청에,

1623
01:17:15,159 --> 01:17:16,700
그들은 잠재적으로 로컬로 캐시됩니다.

1624
01:17:16,700 --> 01:17:19,325
중국의 첫 번째 시간은
일 브라질에서 처음으로,

1625
01:17:19,325 --> 01:17:20,880
그들은 로컬 캐싱을 시작합니다.

1626
01:17:20,880 --> 01:17:22,730
그리고 당신은 그 중 하나를 수행 할 필요가 없습니다.

1627
01:17:22,730 --> 01:17:26,710
그리고 그렇게 믿을 수 없을만큼이다
물건을 이동 요즘 경쟁력

1628
01:17:26,710 --> 01:17:27,890
클라우드로.

1629
01:17:27,890 --> 01:17:31,890
당신은 말 그대로이 능력을 가지고 있기 때문에
인간만큼 거의 일을하지합니다

1630
01:17:31,890 --> 01:17:32,390
작업.

1631
01:17:32,390 --> 01:17:35,930
그리고 당신은 말 그대로 많은 필요하지 않습니다
인간이 이러한 작업을 수행 anymore--

1632
01:17:35,930 --> 01:17:38,450
더 이상 "작전"또는 운영 역할.

1633
01:17:38,450 --> 01:17:43,150
당신은 정말 필요
개발자와 적은 수의 엔지니어

1634
01:17:43,150 --> 01:17:44,840
사람은 실제로 일을 할 수 있습니다.

1635
01:17:44,840 --> 01:17:46,590
사실, 그냥주는
당신이 감각,

1636
01:17:46,590 --> 01:17:51,800
나를 위해 가격에 가자
여기에 다른 제품.

1637
01:17:51,800 --> 01:17:58,170
이제 CDN S3 같은 것을 볼 수 있습니다.

1638
01:17:58,170 --> 01:18:01,140
그래서 이것은 본질적이고
클라우드에서 가상 하드 드라이브.

1639
01:18:01,140 --> 01:18:14,360
우리가 아래로 스크롤 경우 pricing--하기
그래서 기가 바이트 당 $ 0.007이다.

1640
01:18:14,360 --> 01:18:16,300
어떻게 that's-- 우리는이 작업을 수행합니까?

1641
01:18:16,300 --> 01:18:17,410
그게 한달 생각합니다.

1642
01:18:17,410 --> 01:18:21,530
>> 그래서 month-- 당 또는 하루에 있다면?

1643
01:18:21,530 --> 01:18:23,200
단,이 하루인가?

1644
01:18:23,200 --> 01:18:24,700
이것은 OK, 한달이다.

1645
01:18:24,700 --> 01:18:28,280
그래서이 month-- 당 경우
죄송합니다, 그것은 달 당 $ 0.03입니다.

1646
01:18:28,280 --> 01:18:29,820
올해 중 12개월이있다.

1647
01:18:29,820 --> 01:18:32,250
그래서 얼마나 많은 데이터가 수도
당신은 클라우드에 저장?

1648
01:18:32,250 --> 01:18:37,410
기가 바이트는 거대한 아니지만,
1 테라 바이트처럼, 모르는,

1649
01:18:37,410 --> 01:18:38,460
그래서 그 중 1,000 등을들 수있다.

1650
01:18:38,460 --> 01:18:39,501
즉, 모든 훨씬 아니다.

1651
01:18:39,501 --> 01:18:44,382
이 테라 바이트를 저장하는 $ (368)의
아마존의 클라우드 데이터의.

1652
01:18:44,382 --> 01:18:46,090
그래서 일부 무엇인가
무역 오프, 다음?

1653
01:18:46,090 --> 01:18:47,970
그것은 모든 좋은 수 없습니다.

1654
01:18:47,970 --> 01:18:52,260
오늘 우리가 이야기 한 아무것도 없다
종류의 캐치 또는 비용없이.

1655
01:18:52,260 --> 01:18:55,269
그래서 이동에 대한 나쁜거야
클라우드에 모든 것을?

1656
01:18:55,269 --> 01:18:56,060
청중 : 보안.

1657
01:18:56,060 --> 01:18:57,721
DAVID 마란 : OK, 당신은 무엇을 의미합니까?

1658
01:18:57,721 --> 01:18:58,596
청중 : [들리지]

1659
01:18:58,596 --> 01:19:01,589

1660
01:19:01,589 --> 01:19:02,630
DAVID 마란 : 그래, 맞아.

1661
01:19:02,630 --> 01:19:05,130
그리고 당신이 정말로 원하는 수행
어떤 임의의 엔지니어

1662
01:19:05,130 --> 01:19:08,750
아마존에서 만약 당신이 가진 충족하지 않을거야
해당 컴퓨터에 물리적으로 액세스,

1663
01:19:08,750 --> 01:19:11,010
그들이 만약 정말로
가상 액세스를 원?

1664
01:19:11,010 --> 01:19:15,070
심지어에서 비록
이론은 잘 software--

1665
01:19:15,070 --> 01:19:17,442
암호화는 절대적으로 수
이로부터 사용자를 보호합니다.

1666
01:19:17,442 --> 01:19:19,150
그래서 당신이있어 어떤 경우
서버에 저장

1667
01:19:19,150 --> 01:19:21,470
우려의 적은 encrypted--된다.

1668
01:19:21,470 --> 01:19:25,010
>> 그러나 곧 인간의 신체가로
컴퓨터에 대한 액세스, 옆으로 암호화,

1669
01:19:25,010 --> 01:19:26,100
모든 베팅은 일종의 꺼져 있습니다.

1670
01:19:26,100 --> 01:19:28,240
당신은 작년 알고 있습니다
PC에 그 특히,

1671
01:19:28,240 --> 01:19:30,360
당신은 그 일을했다하더라도
소위 "BIOS 암호"

1672
01:19:30,360 --> 01:19:33,360
바탕 화면이 부팅 할 때였다
당신은 암호를 입력하라는 메시지가 줄 그

1673
01:19:33,360 --> 01:19:35,980
함께 할 수 없다
윈도우, 일반적으로 수

1674
01:19:35,980 --> 01:19:39,750
단지의 섀시를 엽니 다
기계는 작은 작은 핀을 발견,

1675
01:19:39,750 --> 01:19:42,240
와라는 것을 사용
점퍼 바로 연결

1676
01:19:42,240 --> 01:19:45,690
대한 초 두 전선,
하여 회로를 완료한다.

1677
01:19:45,690 --> 01:19:47,360
그리고 그 암호를 제거하는 것입니다.

1678
01:19:47,360 --> 01:19:49,800
>> 그래서 당신은에 물리적으로 액세스 할 때
장치, 당신은 그런 일을 할 수 있습니다.

1679
01:19:49,800 --> 01:19:51,110
당신은 하드 드라이브를 제거 할 수 있습니다.

1680
01:19:51,110 --> 01:19:53,060
당신은 그런 식으로 액세스 할 수 있습니다.

1681
01:19:53,060 --> 01:19:55,442
그리고이에, 왜
드롭 박스의 경우,

1682
01:19:55,442 --> 01:19:57,900
예를 들어, 약간의
우려뿐만 아니라 그들이 할 것을

1683
01:19:57,900 --> 01:20:02,860
는, 비록 데이터가
암호화, 또한 키가있다.

1684
01:20:02,860 --> 01:20:04,993
다른 걱정?

1685
01:20:04,993 --> 01:20:08,430
>> 청중 : [들리지]

1686
01:20:08,430 --> 01:20:27,740

1687
01:20:27,740 --> 01:20:30,240
데이비드 마란 : 네, 아주이다
구글을 true--, 사과,

1688
01:20:30,240 --> 01:20:31,406
세계의 마이크로 소프트.

1689
01:20:31,406 --> 01:20:34,400
그리고 사실, 시간이
당신을 위해 당신의 아이폰을했다?

1690
01:20:34,400 --> 01:20:35,885
그래, 제공 또는 걸릴.

1691
01:20:35,885 --> 01:20:36,760
청중 : [들리지]

1692
01:20:36,760 --> 01:20:37,780
DAVID 마란 : 미안 해요?

1693
01:20:37,780 --> 01:20:39,667
당신은 그 사이에있어 사람
아이폰, 오른쪽이?

1694
01:20:39,667 --> 01:20:40,250
청중 : 네.

1695
01:20:40,250 --> 01:20:42,208
DAVID 마란 : 얼마나 오래
당신은 당신의 아이폰이 있었다?

1696
01:20:42,208 --> 01:20:43,372
청중 : [들리지]

1697
01:20:43,372 --> 01:20:45,080
DAVID 마란 : OK, 그래서
애플은 문자 그대로 알고

1698
01:20:45,080 --> 01:20:49,030
당신의 모든 시간에 어디 있었는지
지난 5 년의 일.

1699
01:20:49,030 --> 01:20:51,112
>> 청중 : [들리지]

1700
01:20:51,112 --> 01:20:54,626

1701
01:20:54,626 --> 01:20:56,375
DAVID 마란 :입니다
멋진 기능입니다.

1702
01:20:56,375 --> 01:20:57,860
청중 : [들리지]

1703
01:20:57,860 --> 01:21:00,875
DAVID 마란 : 그래,하지만
확실히 트레이드 오프 (trade off).

1704
01:21:00,875 --> 01:21:01,750
청중 : [들리지]

1705
01:21:01,750 --> 01:21:04,720

1706
01:21:04,720 --> 01:21:07,813
>> 데이비드 마란 : 네, 그것은 매우 간단합니다.

1707
01:21:07,813 --> 01:21:08,688
청중 : [들리지]

1708
01:21:08,688 --> 01:21:12,040

1709
01:21:12,040 --> 01:21:13,248
DAVID 마란 : 다른 단점?

1710
01:21:13,248 --> 01:21:16,995
청중 : [들리지]

1711
01:21:16,995 --> 01:21:26,151

1712
01:21:26,151 --> 01:21:27,900
DAVID 마란 : Absolutely--
기술적으로,

1713
01:21:27,900 --> 01:21:31,550
경제적으로, 그것은 꽤 설득력있어
일종의 규모의이 경제를 얻을

1714
01:21:31,550 --> 01:21:33,579
과에 모든 것을 이동
소위 구름.

1715
01:21:33,579 --> 01:21:35,870
하지만 당신은 아마 하시겠습니까
가장 큰 일부 이동

1716
01:21:35,870 --> 01:21:39,380
물고기, 아마존은 구글의
Microsofts-- 랙 스페이스는 꽤 big--입니다

1717
01:21:39,380 --> 01:21:42,200
그리고 몇 가지 다른, 그리고
반드시 밤 사람들에 의해 비행

1718
01:21:42,200 --> 01:21:45,640
누구를 위해 그것은 할 매우 쉽게
요즘 기술의이 종류.

1719
01:21:45,640 --> 01:21:49,140
그리고 그 누구 당신이 할 수 있어요
에 달 당 $ 5.99을 지불해야합니다.

1720
01:21:49,140 --> 01:21:50,890
하지만 당신은 확실히거야
당신이 돈을받을.

1721
01:21:50,890 --> 01:21:54,014
>> 당신이 [들리지] 말할 때, 그 때의
이 다섯 화려 같은 일들이 올

1722
01:21:54,014 --> 01:21:58,017
이에도 기술적 경우
우리가 정말, 99.999을 보장 할 수 없습니다

1723
01:21:58,017 --> 01:22:00,350
우리는 단지 어떤 종류의 구축합니다
계약에 대한 처벌

1724
01:22:00,350 --> 01:22:03,910
그래서 그 적어도, 일이없는 경우
우리에게 어떤 비용, 공급 업체가있다.

1725
01:22:03,910 --> 01:22:07,950
그리고 그것은 당신이 일반적으로 것입니다
그들을 점점에 동의한다.

1726
01:22:07,950 --> 01:22:09,590
>> 청중 : [들리지]

1727
01:22:09,590 --> 01:22:12,290
>> DAVID 마란 : 그리고
축복의 한 종류

1728
01:22:12,290 --> 01:22:15,630
우리는 들어 있음을 내려 갈 경우에도
예, 또는 특정 회사,

1729
01:22:15,630 --> 01:22:17,800
현실은, 아마존입니다
예를 들어, 많은이

1730
01:22:17,800 --> 01:22:21,780
이놈 고객, 잘 알려진 고객,
특정 데이터 센터에서 운영

1731
01:22:21,780 --> 01:22:26,224
뭔가 정말 잘못 때,
하나님과 날씨 등의 행위처럼,

1732
01:22:26,224 --> 01:22:29,390
실버 라이닝의 어떤 종류가 있는지,
그것은 당신이 아주 좋은 회사에 걸입니다.

1733
01:22:29,390 --> 01:22:30,680
당신의 웹 사이트는 오프라인 상태 일 수 있습니다.

1734
01:22:30,680 --> 01:22:32,750
그러나 정도의 같은 반이다
인기있는 인터넷.

1735
01:22:32,750 --> 01:22:36,230
그리고 그것은 틀림없이 조금의
고객에게 더 맛

1736
01:22:36,230 --> 01:22:38,780
그것은 인터넷의 더 있다면
acme.com 것보다 일.

1737
01:22:38,780 --> 01:22:41,780
하지만 그 속임수의 비트입니다.

1738
01:22:41,780 --> 01:22:46,740
>> , 보는 다른 것들의 관점에서 그래서
단지, 우리가 다른 사람을 배제하지 않도록

1739
01:22:46,740 --> 01:22:51,210
당신은 마이크로 소프트 애저로 이동하는 경우, 그들은
리눅스와 윈도우의 물건을 모두 가지고

1740
01:22:51,210 --> 01:22:53,190
그 아마존의 비교입니다.

1741
01:22:53,190 --> 01:22:57,540
당신이 구글 컴퓨 트 엔진으로 이동하는 경우,
그들은 비슷한뿐만 아니라 있습니다.

1742
01:22:57,540 --> 01:23:00,500
그리고 단지 완성하기
이러한 클라우드 제공,

1743
01:23:00,500 --> 01:23:02,762
나는 한 가지 언급을 할 수 있습니다.

1744
01:23:02,762 --> 01:23:04,720
이 인기있는 웹 사이트입니다
그 대표이다

1745
01:23:04,720 --> 01:23:08,590
기술의 클래스.

1746
01:23:08,590 --> 01:23:12,350
우리가 이야기하는 사람
약, 아마존, IaaS의 것,

1747
01:23:12,350 --> 01:23:17,150
서비스,​​ 당신으로 인프라
서비스로 물리적 하드웨어의 종류.

1748
01:23:17,150 --> 01:23:18,757
SAAS이있다.

1749
01:23:18,757 --> 01:23:20,090
사실, 내가 이것들을 적어 보자.

1750
01:23:20,090 --> 01:23:23,290

1751
01:23:23,290 --> 01:23:28,190
>> IAAS-- 인프라
서비스로, SaaS는,

1752
01:23:28,190 --> 01:23:31,870
그리고 PAAS,
매우 혼란 약어

1753
01:23:31,870 --> 01:23:34,400
세 가지를 설명 않는다
물건의 종류.

1754
01:23:34,400 --> 01:23:36,400
그리고 글자 자체
정말 문제가되지 않습니다.

1755
01:23:36,400 --> 01:23:38,360
이는 클라우드 물건을 모두이다
우리는 그냥 얘기를했습니다

1756
01:23:38,360 --> 01:23:41,570
낮은 수준의 물건은
하드웨어 및 스토리지 가상화

1757
01:23:41,570 --> 01:23:44,890
소위 구름, 그것은 여부
아마존, 마이크로 소프트, 구글, 또는 다른.

1758
01:23:44,890 --> 01:23:47,270
>> service--로 소프트웨어
우리 모두는 종류의이을 사용합니다.

1759
01:23:47,270 --> 01:23:49,810
당신은 Google Apps를 사용하는 경우
Gmail 또는 캘린더를 들어,

1760
01:23:49,810 --> 01:23:52,530
이러한 웹 기반의
응용 프로그램이 십년 전에 우리

1761
01:23:52,530 --> 01:23:55,560
두 번 클릭 아이콘이 것
우리의 바탕 화면, 서비스로서의 소프트웨어

1762
01:23:55,560 --> 01:23:57,400
이제 정말 웹 응용 프로그램입니다.

1763
01:23:57,400 --> 01:24:00,110
그리고 플랫폼으로
서비스의 종류의 따라 달라집니다.

1764
01:24:00,110 --> 01:24:03,140
>> 그리고 하나의 예 나는 당신을 줄 것이다
클라우드 computing--의 맥락에서

1765
01:24:03,140 --> 01:24:06,250
아주의 한 회사가있다
인기있는 요즘, Heroku를.

1766
01:24:06,250 --> 01:24:08,940
그리고 그들은 서비스입니다,
플랫폼, 만약에 당신,

1767
01:24:08,940 --> 01:24:11,730
그 위에서 실행
아마존의 인프라를 제공합니다.

1768
01:24:11,730 --> 01:24:15,800
그리고 그들은 단지 그것을 더 쉽게 만들
개발자 및 엔지니어

1769
01:24:15,800 --> 01:24:18,330
온라인 웹 기반 응용 프로그램을 얻을 수 있습니다.

1770
01:24:18,330 --> 01:24:22,170
>> 이것은 통증, 초기에 사용하는
아마존 웹 서비스와 다른 것.

1771
01:24:22,170 --> 01:24:24,170
실제로이 때문에
알고 이해

1772
01:24:24,170 --> 01:24:27,617
데이터베이스 및 웹 서버와 약
로드 밸런서 모든 물건

1773
01:24:27,617 --> 01:24:28,450
난 그냥 이야기.

1774
01:24:28,450 --> 01:24:32,780
아마존이 수행 한 모든 아니기 때문에
이러한 설계 과제를 숨겨.

1775
01:24:32,780 --> 01:24:35,790
그들은 단지를 가상화 한
그리고, 브라우저로 이동

1776
01:24:35,790 --> 01:24:37,770
대신 하드웨어의 소프트웨어에.

1777
01:24:37,770 --> 01:24:43,020
>> 그러나 Heroku를 다른 같은 회사
PAAS 제공자, 서비스로서의 플랫폼,

1778
01:24:43,020 --> 01:24:46,900
그들은 그 베어 기초를 사용
우리가 이야기하는 것이,

1779
01:24:46,900 --> 01:24:50,340
그들은보다 쉽게​​ 구축
그 위에 소프트웨어를 사용하여

1780
01:24:50,340 --> 01:24:54,241
당신이 얻을하려는 경우 웹 기반 있도록
응용 프로그램 온라인 요즘,

1781
01:24:54,241 --> 01:24:55,990
당신은 확실히에있다
프로그램하는 방법을 알고있다.

1782
01:24:55,990 --> 01:25:00,280
당신은 자바 나 파이썬이나 PHP를 알아야합니다
루비 또는 다른 언어의 무리 나.

1783
01:25:00,280 --> 01:25:02,180
>> 하지만 당신은 또한 그것을 놓을 곳이 필요합니다.

1784
01:25:02,180 --> 01:25:04,790
그리고 우리는에 대해 이전 이야기
웹 호스팅 회사를 받고.

1785
01:25:04,790 --> 01:25:08,630
즉, 같은 2000 년대 중반의 일종
온라인 무언가를 얻기에 접근.

1786
01:25:08,630 --> 01:25:12,140
요즘 대신 사람을 지불 할 수
Heroku를 같은 몇 달러 한 달.

1787
01:25:12,140 --> 01:25:15,370
그리고 본질적으로, 한 번 당신은했습니다
일부 초기 구성을 완료,

1788
01:25:15,370 --> 01:25:18,704
귀하의 웹 사이트를 업데이트하려면
그냥 창에 명령을 입력합니다.

1789
01:25:18,704 --> 01:25:21,370
그리고 어떤 코드가 작성했습니다
여기에 노트북에 즉시

1790
01:25:21,370 --> 01:25:24,350
숫자에 배포됩니다
클라우드 서버.

1791
01:25:24,350 --> 01:25:26,440
>> 그리고 Heroku를가 처리한다
복잡성의 모든.

1792
01:25:26,440 --> 01:25:28,930
그들은 모든 데이터베이스를 파악
물건, 모든로드 밸런싱,

1793
01:25:28,930 --> 01:25:31,480
우리가했습니다 두통의 모든
그냥 보드에 작성,

1794
01:25:31,480 --> 01:25:33,320
당신을 위해 그 모두를 숨 깁니다.

1795
01:25:33,320 --> 01:25:36,170
그리고 답례로, 당신 단지
조금 더를 지불합니다.

1796
01:25:36,170 --> 01:25:39,810
그래서 당신은 이러한 인프라 등이
서비스,​​ 서비스로 플랫폼,

1797
01:25:39,810 --> 01:25:41,400
다음 서비스로 소프트웨어.

1798
01:25:41,400 --> 01:25:45,390
그것은이 다시이야
추상화 또는 레이어.

1799
01:25:45,390 --> 01:25:51,187
>> 클라우드에 대한 질문이나
자신의 인프라를 구축?

1800
01:25:51,187 --> 01:25:52,270
좋아, 그 많은이었다.

1801
01:25:52,270 --> 01:25:54,200
왜 우리가 가서하지 않습니다
여기에 우리로 15 분 휴식을 취할.

1802
01:25:54,200 --> 01:25:57,241
우리는 몇 가지 새로운 개념 돌아올거야
그리고 약간의 실습 기회

1803
01:25:57,241 --> 01:25:59,110
전에 저녁 끝났습니다.

1804
01:25:59,110 --> 01:26:00,332

