1
00:00:00,000 --> 00:00:00,060


2
00:00:00,060 --> 00:00:01,560
DAVID MALAN: All right, we are back.

3
00:00:01,560 --> 00:00:03,830
So for the exciting
conclusion, our last section

4
00:00:03,830 --> 00:00:06,900
on web programming, which I
thought we'd use as a general term

5
00:00:06,900 --> 00:00:08,440
to capture a few remaining topics.

6
00:00:08,440 --> 00:00:10,390
So at the end of the
day, we'll actually do

7
00:00:10,390 --> 00:00:14,830
a little bit of hands-on web programming
with a language called JavaScript.

8
00:00:14,830 --> 00:00:17,510
And I think we'll take a look
at something related to images

9
00:00:17,510 --> 00:00:20,040
and discovering something
secretly hidden in an image,

10
00:00:20,040 --> 00:00:23,230
and also take a look at the Google
Maps API, application programming

11
00:00:23,230 --> 00:00:26,040
interface, as something
representative of the type of software

12
00:00:26,040 --> 00:00:28,800
that's increasingly and
freely available today.

13
00:00:28,800 --> 00:00:32,029
But why don't we take a look
at an ingredient to this world

14
00:00:32,029 --> 00:00:34,070
that we've kind of been
taking for granted exists

15
00:00:34,070 --> 00:00:36,720
for some time, a database.

16
00:00:36,720 --> 00:00:39,150
For the past day and
a half we've assumed

17
00:00:39,150 --> 00:00:42,910
that we have access to a database, but
what problem does a database solve?

18
00:00:42,910 --> 00:00:45,540
What does it do for us?

19
00:00:45,540 --> 00:00:47,030
What is it?

20
00:00:47,030 --> 00:00:48,679
AUDIENCE: [INAUDIBLE]

21
00:00:48,679 --> 00:00:51,720
DAVID MALAN: Holds all the information,
OK, and what kinds of information

22
00:00:51,720 --> 00:00:53,186
might you put in it?

23
00:00:53,186 --> 00:00:54,590
AUDIENCE: [INAUDIBLE]

24
00:00:54,590 --> 00:00:56,450
DAVID MALAN: Any information
you put in it, you'll get back.

25
00:00:56,450 --> 00:00:57,070
That is true.

26
00:00:57,070 --> 00:01:01,900
And on a typical web-based site or web
application, what kinds of information,

27
00:01:01,900 --> 00:01:03,385
specifically, might you put in?

28
00:01:03,385 --> 00:01:04,260
AUDIENCE: [INAUDIBLE]

29
00:01:04,260 --> 00:01:05,051
DAVID MALAN: Users.

30
00:01:05,051 --> 00:01:07,000
So what's a user?

31
00:01:07,000 --> 00:01:09,765
AUDIENCE: [INAUDIBLE]

32
00:01:09,765 --> 00:01:11,640
DAVID MALAN: OK, registered
user of the site.

33
00:01:11,640 --> 00:01:15,100
And what does it mean to
store users' information?

34
00:01:15,100 --> 00:01:17,260
What composes a user?

35
00:01:17,260 --> 00:01:18,331
A user has what?

36
00:01:18,331 --> 00:01:19,206
AUDIENCE: [INAUDIBLE]

37
00:01:19,206 --> 00:01:21,040
DAVID MALAN: Yeah, personal
data, and I like that.

38
00:01:21,040 --> 00:01:21,970
Let's be more precise.

39
00:01:21,970 --> 00:01:25,275
So a user typically has a name,
what else might a user have?

40
00:01:25,275 --> 00:01:26,150
AUDIENCE: [INAUDIBLE]

41
00:01:26,150 --> 00:01:29,130
DAVID MALAN: An addr-- OK,
so first name, last name.

42
00:01:29,130 --> 00:01:29,630
That's good.

43
00:01:29,630 --> 00:01:31,463
Actually, let's fix
that, because it's going

44
00:01:31,463 --> 00:01:35,010
to open up an opportunity for
discussion, still, further.

45
00:01:35,010 --> 00:01:39,090
First name, last name, gender.

46
00:01:39,090 --> 00:01:41,820


47
00:01:41,820 --> 00:01:43,481
An ID of some sort.

48
00:01:43,481 --> 00:01:43,980
What else?

49
00:01:43,980 --> 00:01:45,438
I heard something else before, too.

50
00:01:45,438 --> 00:01:51,600
An email, postal address.

51
00:01:51,600 --> 00:01:58,170
So let's pause there and now consider
not what we're storing in the database,

52
00:01:58,170 --> 00:02:01,980
but-- and not why, since it's perhaps
obvious that once you register a user,

53
00:02:01,980 --> 00:02:03,730
you want to remember them for some time.

54
00:02:03,730 --> 00:02:05,480
You don't want it to
just be stored in RAM

55
00:02:05,480 --> 00:02:08,690
and be forgotten-- so
let's focus on the how.

56
00:02:08,690 --> 00:02:11,700
It turns out that in
the world of databases,

57
00:02:11,700 --> 00:02:14,410
there's at least two types these days.

58
00:02:14,410 --> 00:02:20,010
Something called a SQL database,
Structured Query Language,

59
00:02:20,010 --> 00:02:24,770
or, cutely named,
noSQL, which is not SQL.

60
00:02:24,770 --> 00:02:26,980
And the latter is an
example of what might

61
00:02:26,980 --> 00:02:30,660
be called an object-oriented,
or an object store, a database

62
00:02:30,660 --> 00:02:36,010
that stores objects, and not, excuse
me, as we will soon see, rows.

63
00:02:36,010 --> 00:02:41,800
So we'll focus for just a moment on
the first of these, namely, a SQL

64
00:02:41,800 --> 00:02:46,850
database, if only because it's
so familiar already, to anyone

65
00:02:46,850 --> 00:02:51,070
who has used Excel or
Google Sheets or Apple

66
00:02:51,070 --> 00:02:53,740
Numbers or any standard
spreadsheet program,

67
00:02:53,740 --> 00:02:56,040
or, equivalently, or
more sophisticatedly,

68
00:02:56,040 --> 00:02:58,610
something like Microsoft
Access or Oracle

69
00:02:58,610 --> 00:03:03,890
or MySQL or PostgreSQL, all of which
are product names for implementations

70
00:03:03,890 --> 00:03:04,865
of the following idea.

71
00:03:04,865 --> 00:03:10,350
A relational database is simply
something that has rows and columns.

72
00:03:10,350 --> 00:03:12,850
And by rows and columns,
I literally mean something

73
00:03:12,850 --> 00:03:21,860
like this, so where we might have the
name of a field and its type over here.

74
00:03:21,860 --> 00:03:25,800
And actually, let me
now start to map these.

75
00:03:25,800 --> 00:03:29,420
So actually, I don't know
why I drew a separate chart.

76
00:03:29,420 --> 00:03:30,780
Let's keep this simple.

77
00:03:30,780 --> 00:03:34,830
We have right here the
beginnings of our table, where

78
00:03:34,830 --> 00:03:40,150
this is the name of the field
and this is the data type,

79
00:03:40,150 --> 00:03:41,660
and by type I mean the following.

80
00:03:41,660 --> 00:03:45,510
Is it a number, is it a string,
a short string like a word,

81
00:03:45,510 --> 00:03:49,340
is it a paragraph, is it
binary data, like an image?

82
00:03:49,340 --> 00:03:51,980
And let's just tease this
apart for just a moment.

83
00:03:51,980 --> 00:03:57,575
So first name, number,
string, large chunk of text--

84
00:03:57,575 --> 00:03:58,450
AUDIENCE: [INAUDIBLE]

85
00:03:58,450 --> 00:03:59,616
DAVID MALAN: Yes, so string.

86
00:03:59,616 --> 00:04:04,744
And in a database context, we'll
typically call this char field.

87
00:04:04,744 --> 00:04:07,660
I'll just say char for now but we're
going to refine this in a moment.

88
00:04:07,660 --> 00:04:09,180
Character field.

89
00:04:09,180 --> 00:04:11,365
Last name's probably the same.

90
00:04:11,365 --> 00:04:11,865
Gender?

91
00:04:11,865 --> 00:04:16,230


92
00:04:16,230 --> 00:04:18,310
Male or female, so it
could be a char field.

93
00:04:18,310 --> 00:04:21,380
It could be either quote, unquote
"male" or quote, unquote "female"

94
00:04:21,380 --> 00:04:23,650
or it could be m or f.

95
00:04:23,650 --> 00:04:26,540
If you want to be more inclusive,
you might need a third value

96
00:04:26,540 --> 00:04:28,640
or some kind of other field altogether.

97
00:04:28,640 --> 00:04:31,350
And so you could use true false.

98
00:04:31,350 --> 00:04:35,036
The field could be called male, and
then you could say true or false.

99
00:04:35,036 --> 00:04:38,160
But that doesn't necessarily capture
all of the information you might want.

100
00:04:38,160 --> 00:04:41,118
So it turns out there's another type
of field that might be useful here

101
00:04:41,118 --> 00:04:46,040
in a typical database, called an
enum, where it is a character field,

102
00:04:46,040 --> 00:04:50,480
but you, the designer, get to
enumerate the possible values,

103
00:04:50,480 --> 00:04:54,630
like quote, unquote "male", quote,
unquote "female" and so forth.

104
00:04:54,630 --> 00:04:57,620
So that whatever value
is in your database,

105
00:04:57,620 --> 00:05:00,670
is indeed character-based, but
it has to be one of those values.

106
00:05:00,670 --> 00:05:03,520
We probably wouldn't want an
enum for first name or last name.

107
00:05:03,520 --> 00:05:05,630
Otherwise we would have
to enumerate, as the name

108
00:05:05,630 --> 00:05:09,570
derives from, literally every
possible first name and last name.

109
00:05:09,570 --> 00:05:13,960
OK, so ID what should an ID be?

110
00:05:13,960 --> 00:05:15,200
Yes, so maybe a number.

111
00:05:15,200 --> 00:05:17,870
So let's stick with
that for now, number.

112
00:05:17,870 --> 00:05:22,010
And by number, number's
a little too broad now.

113
00:05:22,010 --> 00:05:23,900
For the end of the second
day, I feel like we

114
00:05:23,900 --> 00:05:25,280
should be a little more precise.

115
00:05:25,280 --> 00:05:29,280
Number could mean like, it
could be something like 1.236.

116
00:05:29,280 --> 00:05:31,500
And that's probably not
what we mean by an ID.

117
00:05:31,500 --> 00:05:34,635
What do we probably mean by an ID?

118
00:05:34,635 --> 00:05:36,382
AUDIENCE: [INAUDIBLE]

119
00:05:36,382 --> 00:05:38,590
DAVID MALAN: Oh, OK, so
maybe it's not even a number.

120
00:05:38,590 --> 00:05:42,840
Maybe it's actually a unique identifier
that's a string, like a user name.

121
00:05:42,840 --> 00:05:44,580
So absolutely, could be.

122
00:05:44,580 --> 00:05:46,730
I think someone probably
meant numeric, though.

123
00:05:46,730 --> 00:05:48,460
So let's stay with that.

124
00:05:48,460 --> 00:05:49,320
What kind of number?

125
00:05:49,320 --> 00:05:51,960
What's a more precise-- an integer.

126
00:05:51,960 --> 00:05:56,710
So a number like 0, 1, 2, 3,
so we'll call this an integer.

127
00:05:56,710 --> 00:05:58,909
And even then, I could
be nitpicking, it's

128
00:05:58,909 --> 00:06:00,700
not really just a
general integer you want.

129
00:06:00,700 --> 00:06:04,340
You probably don't want negative values,
just because, it just feels weird.

130
00:06:04,340 --> 00:06:06,070
You probably want positive integers.

131
00:06:06,070 --> 00:06:07,920
So you can also express
that in a database,

132
00:06:07,920 --> 00:06:09,450
but for now, we'll say integer.

133
00:06:09,450 --> 00:06:10,650
Email?

134
00:06:10,650 --> 00:06:13,550
This is probably just-- a what?

135
00:06:13,550 --> 00:06:14,460
AUDIENCE: [INAUDIBLE]

136
00:06:14,460 --> 00:06:16,980
DAVID MALAN: It's an email,
but that's characters, right?

137
00:06:16,980 --> 00:06:19,813
It just has a funky character like
an "at" symbol or something else,

138
00:06:19,813 --> 00:06:21,580
but it's still a character field.

139
00:06:21,580 --> 00:06:23,900
And postal address?

140
00:06:23,900 --> 00:06:25,360
Character field.

141
00:06:25,360 --> 00:06:31,400
So that's a nice beginning, but
let's be a little more precise now.

142
00:06:31,400 --> 00:06:34,540
So it turns out that in
a database, you often

143
00:06:34,540 --> 00:06:39,120
have a choice over more refined
versions of these things.

144
00:06:39,120 --> 00:06:44,330
In fact, in a typical SQL database, SQL,
or more generally, relational database,

145
00:06:44,330 --> 00:06:46,680
databases with rows
and columns, you often

146
00:06:46,680 --> 00:06:53,610
get to specify not only the type of the
field-- let me make some room here--

147
00:06:53,610 --> 00:06:56,600
but also the length.

148
00:06:56,600 --> 00:06:59,900
So how long is a first name?

149
00:06:59,900 --> 00:07:07,060
I think, D-A-V-I-D. OK, got it I
probably just offended like half

150
00:07:07,060 --> 00:07:11,260
of the people in the room, right,
since your names are longer than five

151
00:07:11,260 --> 00:07:16,608
letters, so five seems a little selfish
and naive, so what's a better value?

152
00:07:16,608 --> 00:07:19,320


153
00:07:19,320 --> 00:07:24,330
10, all right, and I think
we're OK in the room.

154
00:07:24,330 --> 00:07:26,254
13?

155
00:07:26,254 --> 00:07:27,541
30?

156
00:07:27,541 --> 00:07:29,540
Why don't I take the
approach of earlier when we

157
00:07:29,540 --> 00:07:31,081
were talking about arrays and memory?

158
00:07:31,081 --> 00:07:32,450
Why don't I just say like 1,000?

159
00:07:32,450 --> 00:07:35,260
No one's name is going
to be longer than 1,000.

160
00:07:35,260 --> 00:07:36,706
Push back.

161
00:07:36,706 --> 00:07:38,005
AUDIENCE: [INAUDIBLE]

162
00:07:38,005 --> 00:07:40,130
DAVID MALAN: Yeah, it's
wasteful, right, especially

163
00:07:40,130 --> 00:07:44,630
if most names are only five or 10 or
15 characters, that's very wasteful.

164
00:07:44,630 --> 00:07:45,810
So you know what?

165
00:07:45,810 --> 00:07:48,020
This is kind of a hard question.

166
00:07:48,020 --> 00:07:51,721
Now, we can certainly analyze English
and any other language's names

167
00:07:51,721 --> 00:07:54,470
and figure out, well, what is the
average-- average doesn't really

168
00:07:54,470 --> 00:07:57,150
help us-- what's the max is
probably what we really want.

169
00:07:57,150 --> 00:07:59,920
But it turns out we even have
some choice over the type here.

170
00:07:59,920 --> 00:08:03,400
In a typical SQL database, you
have something called a char field

171
00:08:03,400 --> 00:08:07,505
and also a varchar, V-A-R,
for variable char field.

172
00:08:07,505 --> 00:08:08,630
And the difference is this.

173
00:08:08,630 --> 00:08:12,400
A char field, you the designer,
have to specify in advance

174
00:08:12,400 --> 00:08:14,900
the exact length of the field.

175
00:08:14,900 --> 00:08:20,530
So maybe the first name
like 20 feels kind of safe.

176
00:08:20,530 --> 00:08:23,950
Might have to do some googling to
see if that's actually safe enough.

177
00:08:23,950 --> 00:08:26,910
There's probably a name with 21
characters, but for now, suppose 20

178
00:08:26,910 --> 00:08:27,620
is safe.

179
00:08:27,620 --> 00:08:30,070
A char field would imply
in a database that you

180
00:08:30,070 --> 00:08:33,289
are using 20 and always 20 characters.

181
00:08:33,289 --> 00:08:37,419
Now if it's just D-A-V-I-D, 15 of those
are just going to be blank characters,

182
00:08:37,419 --> 00:08:40,450
but you're still using all 20 bytes.

183
00:08:40,450 --> 00:08:46,302
A varchar field, by contrast, means the
string should be up to 20 characters

184
00:08:46,302 --> 00:08:48,260
but if it's only five,
you're only going to use

185
00:08:48,260 --> 00:08:51,270
five, or maybe six for a
special value at the end,

186
00:08:51,270 --> 00:08:54,980
like that 0 we discussed that
signifies the end of a character

187
00:08:54,980 --> 00:08:56,790
sequence in memory.

188
00:08:56,790 --> 00:08:59,950
So when do you think
you might choose char

189
00:08:59,950 --> 00:09:05,240
versus varchar, given that trade-off?

190
00:09:05,240 --> 00:09:09,321
Char uses that many characters, varchar
uses no more than that many characters.

191
00:09:09,321 --> 00:09:10,196
AUDIENCE: [INAUDIBLE]

192
00:09:10,196 --> 00:09:13,859


193
00:09:13,859 --> 00:09:16,900
DAVID MALAN: OK, when you know the
length of the string pretty compelling

194
00:09:16,900 --> 00:09:19,316
to just use char, 'cause if
you know it, just put it down.

195
00:09:19,316 --> 00:09:23,390
And maybe that's true for a zip
code, in the US, at least, 02138,

196
00:09:23,390 --> 00:09:26,660
it's always going to be five
characters until you add the dash four.

197
00:09:26,660 --> 00:09:29,750
But you might have some values for
which you always know the length.

198
00:09:29,750 --> 00:09:32,310
Or maybe state symbols,
like NY for New York,

199
00:09:32,310 --> 00:09:33,811
and MA for Massachusetts in the US.

200
00:09:33,811 --> 00:09:36,560
Maybe you do have some situations
where that's totally reasonable,

201
00:09:36,560 --> 00:09:39,520
but by that logic, why are
we even overthinking this?

202
00:09:39,520 --> 00:09:41,800
Why don't we just use
varchar and then we'll just

203
00:09:41,800 --> 00:09:46,730
always use two characters anyway, or
always use five characters anyway?

204
00:09:46,730 --> 00:09:50,300
Why not just save varchar for
everything, by that logic?

205
00:09:50,300 --> 00:09:51,677
There must be a catch.

206
00:09:51,677 --> 00:09:52,552
AUDIENCE: [INAUDIBLE]

207
00:09:52,552 --> 00:09:54,952


208
00:09:54,952 --> 00:09:56,660
DAVID MALAN: Could
write something wrong.

209
00:09:56,660 --> 00:09:58,090
So that is true.

210
00:09:58,090 --> 00:10:01,030
But even then, they can't use
more memory than I allocate.

211
00:10:01,030 --> 00:10:03,340
I still have the final
say over the length,

212
00:10:03,340 --> 00:10:06,780
so they can't accidentally make
that mistake, but a good thought.

213
00:10:06,780 --> 00:10:10,510
It's more subtle, but it's very related
to our discussion, actually, of arrays

214
00:10:10,510 --> 00:10:12,390
and linked lists earlier.

215
00:10:12,390 --> 00:10:16,290
It turns out that a database, if
it knows that all of the values are

216
00:10:16,290 --> 00:10:19,250
of a fixed length, even if
some of those values are blank,

217
00:10:19,250 --> 00:10:22,484
sort of aesthetically blank,
D-A-V-I-D and then 15 blanks,

218
00:10:22,484 --> 00:10:24,650
it turns out that if every
field is the same length,

219
00:10:24,650 --> 00:10:28,670
much like an array had all of its stuff
back to back to back to back so that

220
00:10:28,670 --> 00:10:33,480
you could just plus 1 to get to the next
value, same idea in a database table.

221
00:10:33,480 --> 00:10:37,550
If all of your character
strings are the same length,

222
00:10:37,550 --> 00:10:39,390
you have what's called random access.

223
00:10:39,390 --> 00:10:41,850
If all the strings are of
length 20, you don't just

224
00:10:41,850 --> 00:10:45,230
do plus 1 you just do plus
20, plus 20, plus 20, plus 20,

225
00:10:45,230 --> 00:10:48,775
and you can very rapidly scroll through
or search through all of your data.

226
00:10:48,775 --> 00:10:54,420
A variable char field, by contrast,
doesn't always have 20 characters.

227
00:10:54,420 --> 00:10:58,000
It might have 20 and then
15 and then 19 and then 10,

228
00:10:58,000 --> 00:11:00,720
and so if you want to search
through it, you can't just blindly

229
00:11:00,720 --> 00:11:03,050
add 20 bytes to get to the next one.

230
00:11:03,050 --> 00:11:07,280
You literally have to search through
because the edge of the data structure,

231
00:11:07,280 --> 00:11:08,340
if you will, is ragged.

232
00:11:08,340 --> 00:11:11,480
It kind of goes in and out based
on the actual length of the string.

233
00:11:11,480 --> 00:11:14,460
So when you know the length, as
Kareem says, use a char field,

234
00:11:14,460 --> 00:11:16,460
because you gain that
efficiency of being

235
00:11:16,460 --> 00:11:19,170
able to search through it faster
when you're looking for data,

236
00:11:19,170 --> 00:11:20,550
otherwise use a variable.

237
00:11:20,550 --> 00:11:24,450
Unfortunately, I have no good answer
to how long the name should be,

238
00:11:24,450 --> 00:11:26,360
but for something like
a name, I would say

239
00:11:26,360 --> 00:11:28,470
a varchar is common
because it's not going

240
00:11:28,470 --> 00:11:30,430
to be a fixed length for everyone.

241
00:11:30,430 --> 00:11:33,650
20, I don't know, 20
feels a little tight.

242
00:11:33,650 --> 00:11:36,460
Let's just say 50, 50.

243
00:11:36,460 --> 00:11:39,210
It doesn't really cost you that
much more to say 50 instead of 40,

244
00:11:39,210 --> 00:11:41,260
but at some point, you need
to make a judgment call.

245
00:11:41,260 --> 00:11:43,090
Very common, frankly,
for [? historical ?]

246
00:11:43,090 --> 00:11:47,670
reasons, even though it's excessive,
is to say 255, because some time ago,

247
00:11:47,670 --> 00:11:51,440
in popular database systems, like
MySQL, a free open source tool

248
00:11:51,440 --> 00:11:53,790
that a lot of companies
like even Facebook used,

249
00:11:53,790 --> 00:11:56,654
this was the maximum default
so people just went with it.

250
00:11:56,654 --> 00:11:59,070
So not unreasonable, but we'll
use a little more intuition

251
00:11:59,070 --> 00:12:02,970
and say, sure 50, that's
probably a little excessive.

252
00:12:02,970 --> 00:12:05,720
Gender, I do like enum,
and so we can therefore

253
00:12:05,720 --> 00:12:08,760
enumerate male or female,
or maybe more efficiently,

254
00:12:08,760 --> 00:12:13,420
m or f or some other symbology, but
enum feels like a good choice there.

255
00:12:13,420 --> 00:12:16,740
To be clear, gender
could just be a varchar,

256
00:12:16,740 --> 00:12:19,090
and we could just all
agree as nice people,

257
00:12:19,090 --> 00:12:21,010
to always put the same values there.

258
00:12:21,010 --> 00:12:22,720
Male or female or whatnot.

259
00:12:22,720 --> 00:12:27,800
But the problem then, is that we could
make a mistake, as [INAUDIBLE] proposed

260
00:12:27,800 --> 00:12:29,140
earlier in a different context.

261
00:12:29,140 --> 00:12:32,780
If we make a mistake, we could get
incorrect values in our database.

262
00:12:32,780 --> 00:12:36,320
So what's nice about databases
like Oracle and MySQL and others,

263
00:12:36,320 --> 00:12:39,280
is that you have this last
layer of defense where

264
00:12:39,280 --> 00:12:43,010
your DBA, database administrator,
whoever is designing this table like we

265
00:12:43,010 --> 00:12:46,440
are verbally, could put
into place an enum that

266
00:12:46,440 --> 00:12:51,250
protects against that by specifying
male, female, and so no one

267
00:12:51,250 --> 00:12:54,230
else no programmer can accidentally
insert any other value.

268
00:12:54,230 --> 00:12:55,480
So this would be a good thing.

269
00:12:55,480 --> 00:12:56,660
This is a feature.

270
00:12:56,660 --> 00:13:00,760
So an ID, assuming a numeric ID, it
probably should be a positive integer.

271
00:13:00,760 --> 00:13:04,380
And we sometimes do have
opportunity to discuss length.

272
00:13:04,380 --> 00:13:06,830
You wouldn't typically
specify a number here,

273
00:13:06,830 --> 00:13:11,310
you would instead specify
this is a int, or a big int,

274
00:13:11,310 --> 00:13:12,980
as they're typically called.

275
00:13:12,980 --> 00:13:18,840
But typically, an integer
would be, let's say, 4 bytes.

276
00:13:18,840 --> 00:13:23,694
And if it's 4 bytes,
that's how many bits?

277
00:13:23,694 --> 00:13:24,630
AUDIENCE: [INAUDIBLE]

278
00:13:24,630 --> 00:13:26,610
DAVID MALAN: 32 bits.

279
00:13:26,610 --> 00:13:30,270
So how many users can we have in
our database if they all have an ID

280
00:13:30,270 --> 00:13:33,320
and this ID has to be unique?

281
00:13:33,320 --> 00:13:36,780
32 bits means we have patterns
of one, two, three, four, five--

282
00:13:36,780 --> 00:13:41,000
so how many different patterns of zeros
and ones can you have if there are 32?

283
00:13:41,000 --> 00:13:43,235
That's the same thing as
asking what's two to the 32?

284
00:13:43,235 --> 00:13:46,472


285
00:13:46,472 --> 00:13:48,430
It's a big number that
I can't quite get right,

286
00:13:48,430 --> 00:13:50,270
but I know it's roughly 4 billion.

287
00:13:50,270 --> 00:13:53,970
So this means your database table can
have four billion users and that's it.

288
00:13:53,970 --> 00:13:56,410
So this is an interesting
design implication.

289
00:13:56,410 --> 00:14:00,840
A decent number of companies
have decided, maybe not so much

290
00:14:00,840 --> 00:14:04,860
for their users table, because having
4 billion users is a rare problem.

291
00:14:04,860 --> 00:14:08,410
This is sort of a Facebook-style
problem, not a typical company problem.

292
00:14:08,410 --> 00:14:12,670
But maybe if you have transaction logs
or some kind of data that constantly

293
00:14:12,670 --> 00:14:15,610
gets written into your database
that absolutely could have billions

294
00:14:15,610 --> 00:14:18,900
and billions of rows, and
you use an integer for it,

295
00:14:18,900 --> 00:14:22,750
what's going to happen as soon as
you get to row number 4 billion

296
00:14:22,750 --> 00:14:26,210
and then you try to insert the
4 billionth and 1, so to speak?

297
00:14:26,210 --> 00:14:29,610
I'm simplifying the numbers a bit.

298
00:14:29,610 --> 00:14:33,740
You can cut back, I mean you
have to handle it somehow.

299
00:14:33,740 --> 00:14:37,910
And what a computer would typically do,
think about it even from this morning,

300
00:14:37,910 --> 00:14:42,430
if you have a 4-bit value
like 1, 1, 1, 1, which,

301
00:14:42,430 --> 00:14:44,920
just to tie the morning
together to the afternoon, what

302
00:14:44,920 --> 00:14:48,369
does this number represent in binary?

303
00:14:48,369 --> 00:14:49,410
OK, we'll make it easier.

304
00:14:49,410 --> 00:14:53,310
What does this number
represent in binary?

305
00:14:53,310 --> 00:14:56,794
OK, we'll make it easier, what
does this represent in binary?

306
00:14:56,794 --> 00:14:57,460
AUDIENCE: Three.

307
00:14:57,460 --> 00:14:59,670
DAVID MALAN: Three, because
we have the ones column--

308
00:14:59,670 --> 00:15:00,450
[LAUGHTER]

309
00:15:00,450 --> 00:15:01,350
Whew!

310
00:15:01,350 --> 00:15:03,980
We had the ones column
and the twos column.

311
00:15:03,980 --> 00:15:07,250
So suppose that, indeed, our
[? infield ?] weren't 32 bits,

312
00:15:07,250 --> 00:15:13,440
but it were two bits, we can
count from user number 0, 1, 2, 3,

313
00:15:13,440 --> 00:15:18,040
and then we're kind of
back to user 00 again.

314
00:15:18,040 --> 00:15:19,739
So this is what typically happens.

315
00:15:19,739 --> 00:15:22,780
If you've ever heard the expression--
probably haven't, but if you have--

316
00:15:22,780 --> 00:15:26,500
integer overflow, where you
keep flipping all of your bits

317
00:15:26,500 --> 00:15:29,640
to be the biggest possible values,
and then you're out of bits,

318
00:15:29,640 --> 00:15:30,850
what would typically happen?

319
00:15:30,850 --> 00:15:32,280
Why do I say 00?

320
00:15:32,280 --> 00:15:33,220
Well, this is three.

321
00:15:33,220 --> 00:15:34,230
How do I represent 4?

322
00:15:34,230 --> 00:15:36,890


323
00:15:36,890 --> 00:15:38,915
How do I represent the
for number 4 in binary?

324
00:15:38,915 --> 00:15:39,790
AUDIENCE: [INAUDIBLE]

325
00:15:39,790 --> 00:15:41,780
DAVID MALAN: One-- yeah,
don't say 100 per se,

326
00:15:41,780 --> 00:15:44,190
because it has the wrong
connotation, but 1-0-0.

327
00:15:44,190 --> 00:15:48,920
So that number 1-0-0 is indeed
correct, but if you only have two bits,

328
00:15:48,920 --> 00:15:50,820
what have you really done?

329
00:15:50,820 --> 00:15:53,219
You've rolled over to 00.

330
00:15:53,219 --> 00:15:54,760
And indeed, that's what would happen.

331
00:15:54,760 --> 00:15:56,884
Actually, you can think
about this more familiarly.

332
00:15:56,884 --> 00:15:59,350
If you recall, what,
16 years ago, the world

333
00:15:59,350 --> 00:16:03,380
was supposed to end when
the Y2K problem happened.

334
00:16:03,380 --> 00:16:04,330
Why was that?

335
00:16:04,330 --> 00:16:08,170
Well most computers, for
reasonable decisions,

336
00:16:08,170 --> 00:16:15,320
were storing numbers like the
year 1975 or the year 1999

337
00:16:15,320 --> 00:16:19,010
by just using two digits
in the computer's memory.

338
00:16:19,010 --> 00:16:21,950
So of course, what happens
when you get to the year 2000,

339
00:16:21,950 --> 00:16:25,790
you go to this, or rather, yeah.

340
00:16:25,790 --> 00:16:30,120
So you go to the year 2000, but if
you're only using two digits it looks

341
00:16:30,120 --> 00:16:32,660
like the year 00 and
so you've rolled over.

342
00:16:32,660 --> 00:16:36,820
And this is why a lot of systems
needed to be updated at the time.

343
00:16:36,820 --> 00:16:42,500
So with that said, companies like
Facebook run up against this.

344
00:16:42,500 --> 00:16:46,147
So the only way to handle the
situation, frankly, is to anticipate it.

345
00:16:46,147 --> 00:16:47,980
Or the cleanest way to
handle this situation

346
00:16:47,980 --> 00:16:50,330
is to anticipate it so you don't
have to make changes later.

347
00:16:50,330 --> 00:16:51,970
So instead of 8 bytes, you know what?

348
00:16:51,970 --> 00:16:54,261
I'm going to be forward-thinking
here, even though it's

349
00:16:54,261 --> 00:16:56,760
a little optimistic that
we're going to have 4 billion

350
00:16:56,760 --> 00:16:58,850
and 1 users on our website.

351
00:16:58,850 --> 00:17:01,790
But let's just use 8 bytes, or
64 bits, which would generally be

352
00:17:01,790 --> 00:17:05,640
called a big integer, very technical.

353
00:17:05,640 --> 00:17:10,280
And that just means you can have
even more digits in your number.

354
00:17:10,280 --> 00:17:12,599
But this is an important
design decision,

355
00:17:12,599 --> 00:17:16,400
because if you choose a number that
has too few bits of expressiveness

356
00:17:16,400 --> 00:17:19,089
you could actually create
a bug in your software.

357
00:17:19,089 --> 00:17:21,750
All right, so let's wrap up
with email and postal address.

358
00:17:21,750 --> 00:17:26,369
So email, how long should
an email address be?

359
00:17:26,369 --> 00:17:26,869
50.

360
00:17:26,869 --> 00:17:29,220
I really have no idea, but it's
probably something like that,

361
00:17:29,220 --> 00:17:32,261
because otherwise no one's going to
write you if it gets too long, so 50,

362
00:17:32,261 --> 00:17:33,360
let's go with it for now.

363
00:17:33,360 --> 00:17:35,770
Postal address, how long should that be?

364
00:17:35,770 --> 00:17:38,325


365
00:17:38,325 --> 00:17:39,200
AUDIENCE: [INAUDIBLE]

366
00:17:39,200 --> 00:17:41,900


367
00:17:41,900 --> 00:17:43,890
DAVID MALAN: It's not
just a zip code, though.

368
00:17:43,890 --> 00:17:45,720
Postal address, I heard.

369
00:17:45,720 --> 00:17:50,720
So this is like 1 Brattle Square,
comma, Cambridge Mass., comma, 02138.

370
00:17:50,720 --> 00:17:53,860
And in fact, let me just pull
up a little worksheet here.

371
00:17:53,860 --> 00:17:56,510
This feels like it's
a missed opportunity.

372
00:17:56,510 --> 00:18:01,480
If we have 1 Brattle Square,
comma, Cambridge MA 02138,

373
00:18:01,480 --> 00:18:04,510
I feel like we can do better
than just postal address.

374
00:18:04,510 --> 00:18:07,100
Why don't we explode this a little bit?

375
00:18:07,100 --> 00:18:08,030
What am I getting at?

376
00:18:08,030 --> 00:18:10,970
What should we instead have
for our rows here, perhaps?

377
00:18:10,970 --> 00:18:12,260
AUDIENCE: [INAUDIBLE]

378
00:18:12,260 --> 00:18:17,579
DAVID MALAN: Yeah, so let's
call it street_number,

379
00:18:17,579 --> 00:18:20,620
and an underscore is just a common
way of having what looks like a space,

380
00:18:20,620 --> 00:18:22,360
but it's not, actually.

381
00:18:22,360 --> 00:18:26,240
Street, and then city-- sorry?

382
00:18:26,240 --> 00:18:28,440
AUDIENCE: [INAUDIBLE]

383
00:18:28,440 --> 00:18:29,690
DAVID MALAN: We could do that.

384
00:18:29,690 --> 00:18:30,702
Line one, line two.

385
00:18:30,702 --> 00:18:32,410
Why don't we will keep
it simple for now,

386
00:18:32,410 --> 00:18:34,840
but that's absolutely
an acceptable decision.

387
00:18:34,840 --> 00:18:38,180
And then state, and then let's
be a little US-centric for now

388
00:18:38,180 --> 00:18:42,040
and just do zip code, just because
it'll lead to an interesting mistake

389
00:18:42,040 --> 00:18:43,090
or problem here.

390
00:18:43,090 --> 00:18:44,655
So suppose that's now our address.

391
00:18:44,655 --> 00:18:47,280
It's a little more annoying that
we have all these more fields,

392
00:18:47,280 --> 00:18:49,200
but now we can tag
things a little better.

393
00:18:49,200 --> 00:18:53,210
So now street number probably
shouldn't be a char, should it?

394
00:18:53,210 --> 00:18:54,835
What should it be?

395
00:18:54,835 --> 00:18:55,710
AUDIENCE: [INAUDIBLE]

396
00:18:55,710 --> 00:18:57,835
DAVID MALAN: Maybe, a number
like an integer again?

397
00:18:57,835 --> 00:19:00,170
A big integer?

398
00:19:00,170 --> 00:19:02,170
You probably don't live
at 4 billion Main Street

399
00:19:02,170 --> 00:19:03,490
or anything crazy like that.

400
00:19:03,490 --> 00:19:06,850
So integer is probably
fine, but has anyone

401
00:19:06,850 --> 00:19:13,880
ever lived at an address like
1A Brattle Square, or 1 and 1/2?

402
00:19:13,880 --> 00:19:17,030
These things exist, unfortunately,
even if you haven't lived there,

403
00:19:17,030 --> 00:19:21,240
there are these anomalies
like apartment 1A, 1B, 1C.

404
00:19:21,240 --> 00:19:24,260
So you know what, we probably
shouldn't go with integer,

405
00:19:24,260 --> 00:19:27,440
otherwise we're going
to lose some sales.

406
00:19:27,440 --> 00:19:29,920
Char field, maybe?

407
00:19:29,920 --> 00:19:30,870
I don't know how long.

408
00:19:30,870 --> 00:19:33,370
It's probably not going to be
that long, so 10 or something.

409
00:19:33,370 --> 00:19:34,950
No one's going to write
a longer number, maybe.

410
00:19:34,950 --> 00:19:37,070
But again, we should probably
give more thought to that.

411
00:19:37,070 --> 00:19:39,900
Maybe google, do some research,
but we'll go with our guts for now.

412
00:19:39,900 --> 00:19:44,565
Streets, char, 50, I don't know.

413
00:19:44,565 --> 00:19:46,940
At some point, no one's going
to write it on an envelope,

414
00:19:46,940 --> 00:19:49,350
too, so there's probably
some upper bounds there.

415
00:19:49,350 --> 00:19:54,200
City, same, sure, so char 50.

416
00:19:54,200 --> 00:19:59,120
State, can be US-centric for now.

417
00:19:59,120 --> 00:20:01,850
So it could be a list, so kind
of a judgment call, state.

418
00:20:01,850 --> 00:20:04,000
It could be like two characters.

419
00:20:04,000 --> 00:20:06,140
So actually, maybe, I kept saying char.

420
00:20:06,140 --> 00:20:09,420
I probably mean varchar,
just for some efficiency,

421
00:20:09,420 --> 00:20:12,240
but we'll come back to
that decision in a moment.

422
00:20:12,240 --> 00:20:16,150
Could be a char of length 2 for state.

423
00:20:16,150 --> 00:20:20,670
If in the US they have, like MA,
Massachusetts, NY, New York, NJ, New

424
00:20:20,670 --> 00:20:22,100
Jersey, and so forth.

425
00:20:22,100 --> 00:20:23,630
So it could be fixed at that.

426
00:20:23,630 --> 00:20:25,900
DC for Washington DC.

427
00:20:25,900 --> 00:20:29,915
But I think, Olivier, you
proposed another approach.

428
00:20:29,915 --> 00:20:30,790
AUDIENCE: [INAUDIBLE]

429
00:20:30,790 --> 00:20:33,670
DAVID MALAN: Yeah, so it's a
little annoying to type in,

430
00:20:33,670 --> 00:20:37,890
but an enum might make more sense,
because this way, at least in the US,

431
00:20:37,890 --> 00:20:41,320
you could enumerate, if tediously, but
you do it just once in your database

432
00:20:41,320 --> 00:20:47,480
and never again have to think about
it, all 50 two-character codes.

433
00:20:47,480 --> 00:20:48,660
So I like enum.

434
00:20:48,660 --> 00:20:51,720
Let's stick with that there, because
it sort of enforces more rigor.

435
00:20:51,720 --> 00:20:53,620
And then zip code?

436
00:20:53,620 --> 00:20:55,306
I think Andrew had a thought on that

437
00:20:55,306 --> 00:20:56,180
AUDIENCE: [INAUDIBLE]

438
00:20:56,180 --> 00:20:57,240
DAVID MALAN: Yeah, five or nine.

439
00:20:57,240 --> 00:20:58,323
Let's just keep it simple.

440
00:20:58,323 --> 00:20:59,380
Just do five for now.

441
00:20:59,380 --> 00:21:03,070
But maybe I could just
do an integer, right?

442
00:21:03,070 --> 00:21:08,750
I could, but you know what, I made
this mistake once, in some sense.

443
00:21:08,750 --> 00:21:13,110
Years ago, I was migrating from
Microsoft Outlook to Gmail,

444
00:21:13,110 --> 00:21:18,640
and Outlook has a way of exporting
all of your contacts as an Excel file,

445
00:21:18,640 --> 00:21:21,280
a CSV file, comma separated values file.

446
00:21:21,280 --> 00:21:23,950
And I made the mistake, I
think, of double clicking it,

447
00:21:23,950 --> 00:21:27,380
once I downloaded the export, to
make sure it looked as I expected.

448
00:21:27,380 --> 00:21:31,320
I must have hit Save or let
auto-save kick in or something.

449
00:21:31,320 --> 00:21:35,100
Because when I then imported
it into Gmail, it all worked.

450
00:21:35,100 --> 00:21:39,910
But for years, to this day, and
I did this five, 10 years ago,

451
00:21:39,910 --> 00:21:44,380
I'm still finding friends who have
addresses that look like this.

452
00:21:44,380 --> 00:21:45,700
Why?

453
00:21:45,700 --> 00:21:47,900
AUDIENCE: [INAUDIBLE]

454
00:21:47,900 --> 00:21:50,650
DAVID MALAN: It took
the 0, well, rather, it

455
00:21:50,650 --> 00:21:53,810
took the whole zip code as
a number, and therefore it's

456
00:21:53,810 --> 00:21:56,590
a leading 0 which means
it has no meaning.

457
00:21:56,590 --> 00:21:59,470
And so 2138 seems to be my zip code.

458
00:21:59,470 --> 00:22:07,100
And this is, frankly, an annoying Excel
feature whereby I think by default,

459
00:22:07,100 --> 00:22:10,980
even if it's meant to just
be text, Microsoft Excel

460
00:22:10,980 --> 00:22:13,780
decides, let me be helpful,
and oh, I see only numbers.

461
00:22:13,780 --> 00:22:15,290
Let's treat these as numbers.

462
00:22:15,290 --> 00:22:16,790
And it truncates the leading zeros.

463
00:22:16,790 --> 00:22:19,165
I swear to God, every couple
of months I find an address,

464
00:22:19,165 --> 00:22:22,300
and out of a sort of OCD, I go back
in and add the 0, even though I never

465
00:22:22,300 --> 00:22:23,700
send people letters or anything.

466
00:22:23,700 --> 00:22:25,510
But I'm still finding remnants of this.

467
00:22:25,510 --> 00:22:28,820
So this is to say, is this a good idea?

468
00:22:28,820 --> 00:22:31,610
OK, no, because anyone in
Massachusetts, in this area,

469
00:22:31,610 --> 00:22:33,270
is going to have a o leading them.

470
00:22:33,270 --> 00:22:38,070
So let's go with like
char, probably, five.

471
00:22:38,070 --> 00:22:41,450
And here, realize we
could use an enum and we

472
00:22:41,450 --> 00:22:44,600
could enumerate 10,000
possible zip codes,

473
00:22:44,600 --> 00:22:48,530
but that feels like it's probably
crossing a line of, like, benefits.

474
00:22:48,530 --> 00:22:51,350
If you have to input that
much data into your database

475
00:22:51,350 --> 00:22:52,940
to protect against something.

476
00:22:52,940 --> 00:22:57,400
So char realized you could type
in H-E-L-L-O as your zip code,

477
00:22:57,400 --> 00:22:59,180
which is not, obviously, numeric.

478
00:22:59,180 --> 00:23:01,680
So there's no way, in
a typical database,

479
00:23:01,680 --> 00:23:05,561
to specify only numeric and
only five characters long,

480
00:23:05,561 --> 00:23:07,310
so we're going to have
to do that in code.

481
00:23:07,310 --> 00:23:11,100
We're going to do that in PHP or
Java or whatever language we're

482
00:23:11,100 --> 00:23:14,230
using on the server to enforce
that kind of constraint.

483
00:23:14,230 --> 00:23:14,860
Whoo!

484
00:23:14,860 --> 00:23:18,322
All right, so any questions just yet?

485
00:23:18,322 --> 00:23:19,780
Let's make another design decision.

486
00:23:19,780 --> 00:23:22,500
It turns out that you
also get to choose,

487
00:23:22,500 --> 00:23:26,600
when designing a SQL database, or
typical relational database-- where

488
00:23:26,600 --> 00:23:28,790
again, relational just
means rows and columns,

489
00:23:28,790 --> 00:23:35,500
that's how you organize your data--
and realize that what this means is,

490
00:23:35,500 --> 00:23:37,740
I've been misleading in
that, I'm drawing-- this

491
00:23:37,740 --> 00:23:40,190
is what's called the schema
for a database table.

492
00:23:40,190 --> 00:23:42,810
This is like the
specifications for the table--

493
00:23:42,810 --> 00:23:48,040
but when it comes time
to actually store data,

494
00:23:48,040 --> 00:23:52,081
and we'll do this just by example here.

495
00:23:52,081 --> 00:23:55,080
I'm going to open up Excel, because
Excel will give me rows and columns.

496
00:23:55,080 --> 00:23:58,050
And that's exactly what Oracle and
MySQL and other tools will give me.

497
00:23:58,050 --> 00:24:02,270
So I'm just going to use
it for discussion's sake.

498
00:24:02,270 --> 00:24:05,250
Let me go ahead and open up a
representative document here,

499
00:24:05,250 --> 00:24:06,310
zoom in a bit.

500
00:24:06,310 --> 00:24:15,200
So for instance, our headers are now
first name, last name, gender, ID,

501
00:24:15,200 --> 00:24:20,980
email, street number, street, whoops.

502
00:24:20,980 --> 00:24:25,710
Street, city, state, just
about fits on the screen.

503
00:24:25,710 --> 00:24:29,080
So what this means is that when a
user first registers for my website,

504
00:24:29,080 --> 00:24:32,880
it's going to be something like
David, Malan, m, let's say 1,

505
00:24:32,880 --> 00:24:42,910
malan@harvard.edu, street number will
be like 1 Brattle Square, Cambridge, MA,

506
00:24:42,910 --> 00:24:44,780
02138, and then so forth.

507
00:24:44,780 --> 00:24:48,290
So when I say that a relational database
or SQL database is rows and columns,

508
00:24:48,290 --> 00:24:49,350
I mean this.

509
00:24:49,350 --> 00:24:51,900
That actual data is stored
in rows and columns.

510
00:24:51,900 --> 00:24:53,950
This is just a coincidence,
that we were talking,

511
00:24:53,950 --> 00:24:56,033
and I was just drawing it
out in rows and columns.

512
00:24:56,033 --> 00:24:58,320
This is just the schema,
the overarching definition.

513
00:24:58,320 --> 00:25:01,640
So of these fields here,
or equivalently, there,

514
00:25:01,640 --> 00:25:06,270
which are the fields that you think
I'm likely to search on if I'm a user

515
00:25:06,270 --> 00:25:09,200
or if I'm the database administrator?

516
00:25:09,200 --> 00:25:12,426
Like, what fields am I
actually going to search on?

517
00:25:12,426 --> 00:25:13,830
AUDIENCE: [INAUDIBLE]

518
00:25:13,830 --> 00:25:17,690
DAVID MALAN: The name, yeah so
I like the fact that-- yeah,

519
00:25:17,690 --> 00:25:19,750
email might be pretty common.

520
00:25:19,750 --> 00:25:21,440
Sorry, you said name.

521
00:25:21,440 --> 00:25:24,030
So maybe-- and again, we're
kind of talking in the abstract.

522
00:25:24,030 --> 00:25:25,988
I don't know why you'd
be searching for a name,

523
00:25:25,988 --> 00:25:29,340
but that feels reasonable if
you're searching for a user.

524
00:25:29,340 --> 00:25:31,170
Maybe states, sure, ID.

525
00:25:31,170 --> 00:25:34,100


526
00:25:34,100 --> 00:25:36,160
And it's a slippery
slope, because I could

527
00:25:36,160 --> 00:25:38,890
contrive a scenario where
maybe my boss has asked me,

528
00:25:38,890 --> 00:25:40,417
how many men do we have on our site?

529
00:25:40,417 --> 00:25:42,000
How many women do we have on our site?

530
00:25:42,000 --> 00:25:45,210
And so at that point, you might want
to search on the gender field, too,

531
00:25:45,210 --> 00:25:45,940
and nothing else.

532
00:25:45,940 --> 00:25:47,350
So there's a trade-off here.

533
00:25:47,350 --> 00:25:49,180
Again, there's no
right answer, but there

534
00:25:49,180 --> 00:25:53,760
is a feature in most SQL databases
known as indexing, whereby

535
00:25:53,760 --> 00:25:56,100
you, the designer, the
database administrator,

536
00:25:56,100 --> 00:26:01,730
get to decide in advance which
fields the database should optimize

537
00:26:01,730 --> 00:26:02,980
for searches on.

538
00:26:02,980 --> 00:26:07,620
You could very naively say, optimize
this, optimize that, optimize this,

539
00:26:07,620 --> 00:26:10,300
optimize that and this,
and the database will

540
00:26:10,300 --> 00:26:14,882
do some magical thing underneath the
hood, and do something in such a way

541
00:26:14,882 --> 00:26:17,090
that the next time you search
on any of these fields,

542
00:26:17,090 --> 00:26:18,400
it will, in fact, be faster.

543
00:26:18,400 --> 00:26:19,110
This is possible.

544
00:26:19,110 --> 00:26:20,530
It doesn't cancel itself out.

545
00:26:20,530 --> 00:26:22,500
But there must be a price paid.

546
00:26:22,500 --> 00:26:27,220
If you naively, or over-enthusiastically
say, index all of these fields,

547
00:26:27,220 --> 00:26:29,810
so to speak, make them all
efficiently searchable,

548
00:26:29,810 --> 00:26:31,625
what price are you probably paying?

549
00:26:31,625 --> 00:26:32,500
AUDIENCE: [INAUDIBLE]

550
00:26:32,500 --> 00:26:33,090
DAVID MALAN: Performance.

551
00:26:33,090 --> 00:26:33,798
What do you mean?

552
00:26:33,798 --> 00:26:37,380
Well performance, at least in the
context I'm discussing, is better now.

553
00:26:37,380 --> 00:26:38,830
That's the definition of indexing.

554
00:26:38,830 --> 00:26:41,180
It will make searches faster.

555
00:26:41,180 --> 00:26:43,366
So time decreases, so to speak.

556
00:26:43,366 --> 00:26:44,240
AUDIENCE: [INAUDIBLE]

557
00:26:44,240 --> 00:26:45,031
DAVID MALAN: Space.

558
00:26:45,031 --> 00:26:46,520
So again, these are a common trade.

559
00:26:46,520 --> 00:26:50,820
I can speed up your searches, but it's
going to cost you more bytes of space.

560
00:26:50,820 --> 00:26:51,610
Why?

561
00:26:51,610 --> 00:26:55,230
Well, by default, if we have none of
these red stars, none of these indexes,

562
00:26:55,230 --> 00:26:58,797
as I'm saying, how do you search
for a name in this database?

563
00:26:58,797 --> 00:27:00,630
So let's draw our
attention to this example.

564
00:27:00,630 --> 00:27:06,300
If we have David and Scully and Kareem
and Arwa and others in these rows,

565
00:27:06,300 --> 00:27:06,910
for instance.

566
00:27:06,910 --> 00:27:08,390
So let's do exactly that.

567
00:27:08,390 --> 00:27:13,990
Scully is in here, and then
we have Kareem, and Arwa,

568
00:27:13,990 --> 00:27:18,390
and everyone else, if you don't
have an index defined, so to speak,

569
00:27:18,390 --> 00:27:20,160
the best you can do is linear search.

570
00:27:20,160 --> 00:27:23,470
If you search for Arwa, we're not
going to be able to jump right to her

571
00:27:23,470 --> 00:27:24,140
quickly.

572
00:27:24,140 --> 00:27:26,556
We're going to start top and
go all the way to the bottom,

573
00:27:26,556 --> 00:27:28,600
not unlike our original
Mike Smith example.

574
00:27:28,600 --> 00:27:33,470
If, however, I say, hey, database,
index the first name field,

575
00:27:33,470 --> 00:27:37,000
then it's going to do something
fancier and support something

576
00:27:37,000 --> 00:27:38,130
like binary search.

577
00:27:38,130 --> 00:27:39,820
It's probably not binary search per se.

578
00:27:39,820 --> 00:27:42,810
Databases tend to use another
data structure called b-trees,

579
00:27:42,810 --> 00:27:46,540
not to be confused with binary trees,
that just make it faster to search

580
00:27:46,540 --> 00:27:48,500
something logarithmic in nature.

581
00:27:48,500 --> 00:27:53,510
But the price you pay to build up that
feature, that data structure in memory,

582
00:27:53,510 --> 00:27:54,570
is more bytes.

583
00:27:54,570 --> 00:27:57,170
So it might take some megabytes,
some gigabytes, who knows?

584
00:27:57,170 --> 00:27:58,410
It depends on the data.

585
00:27:58,410 --> 00:28:02,640
So at some point, you have to decide,
it's probably not a common case.

586
00:28:02,640 --> 00:28:06,000
So what are the actual common
cases, if you really had to choose,

587
00:28:06,000 --> 00:28:10,080
what might your favorite fields be?

588
00:28:10,080 --> 00:28:10,580
Email.

589
00:28:10,580 --> 00:28:14,400
And I like email because email,
in theory, should be unique.

590
00:28:14,400 --> 00:28:17,650
And so typically, when you know
in advance that one of your fields

591
00:28:17,650 --> 00:28:20,277
is or will be unique, that
tends to be a good field

592
00:28:20,277 --> 00:28:22,860
to search on, because that way,
when you search for something,

593
00:28:22,860 --> 00:28:26,194
you're going to get back one or
zero responses and then you're done.

594
00:28:26,194 --> 00:28:28,110
You don't have to keep
looking for yet others.

595
00:28:28,110 --> 00:28:31,992
And so in this case here, email,
so long as you can't register twice

596
00:28:31,992 --> 00:28:33,450
with the same email, is a good one.

597
00:28:33,450 --> 00:28:36,710
ID by definition, in the
computer science world,

598
00:28:36,710 --> 00:28:39,610
if you're talking about an
ID, that had better be unique.

599
00:28:39,610 --> 00:28:42,970
That's sort of the connotation
of ID or identifier.

600
00:28:42,970 --> 00:28:46,440
And the rest of these might be,
let's call them nice to haves,

601
00:28:46,440 --> 00:28:47,860
but not really required.

602
00:28:47,860 --> 00:28:49,976
And so in a database,
you specify indexes,

603
00:28:49,976 --> 00:28:51,350
but you can be even more precise.

604
00:28:51,350 --> 00:28:56,060
You can say, hey, database, make sure
that every ID in this table is unique.

605
00:28:56,060 --> 00:28:59,330
Don't even let a programmer
accidentally put in a duplicate email

606
00:28:59,330 --> 00:29:00,740
or duplicate ID number.

607
00:29:00,740 --> 00:29:03,140
So much like enums
protect us similarly, you

608
00:29:03,140 --> 00:29:04,881
can have those lower-level defenses.

609
00:29:04,881 --> 00:29:07,130
And so database design, in
some sense, is kind of fun,

610
00:29:07,130 --> 00:29:08,380
because you do it defensively.

611
00:29:08,380 --> 00:29:11,460
You sort of assume that you work
with horrible, horrible programmers

612
00:29:11,460 --> 00:29:15,550
and you want to put in as many defenses
as you can to protect your data,

613
00:29:15,550 --> 00:29:18,940
but simultaneously you want
to help them perform better

614
00:29:18,940 --> 00:29:21,386
by choosing which
fields to optimize for.

615
00:29:21,386 --> 00:29:24,260
But you can't necessarily do it in
a vacuum like we kind of are here.

616
00:29:24,260 --> 00:29:26,480
You've got to know what are
those common cases being.

617
00:29:26,480 --> 00:29:29,397
If the developers are
implementing an address book,

618
00:29:29,397 --> 00:29:32,230
you might very well want to be able
to search on almost every field,

619
00:29:32,230 --> 00:29:33,830
just by nature of the application.

620
00:29:33,830 --> 00:29:37,910
So maybe you spend
that additional space.

621
00:29:37,910 --> 00:29:39,090
Right, any questions?

622
00:29:39,090 --> 00:29:41,820


623
00:29:41,820 --> 00:29:42,486
Yeah.

624
00:29:42,486 --> 00:29:43,470
AUDIENCE: [INAUDIBLE]

625
00:29:43,470 --> 00:29:44,404
DAVID MALAN: No.

626
00:29:44,404 --> 00:29:45,279
AUDIENCE: [INAUDIBLE]

627
00:29:45,279 --> 00:29:47,840


628
00:29:47,840 --> 00:29:48,826
DAVID MALAN: OK.

629
00:29:48,826 --> 00:29:49,701
AUDIENCE: [INAUDIBLE]

630
00:29:49,701 --> 00:29:52,420


631
00:29:52,420 --> 00:29:54,850
DAVID MALAN: Oh, so we
are talking in a way

632
00:29:54,850 --> 00:29:57,940
now that's completely language agnostic.

633
00:29:57,940 --> 00:30:02,370
So we are talking now about
relational databases more generally,

634
00:30:02,370 --> 00:30:04,760
or SQL databases more generally.

635
00:30:04,760 --> 00:30:06,870
AUDIENCE: [INAUDIBLE]

636
00:30:06,870 --> 00:30:10,030
DAVID MALAN: A better word to use
is, can be used by any language.

637
00:30:10,030 --> 00:30:15,280
So I can write JavaScript code, C
code, C++ code, Java code, Ruby code,

638
00:30:15,280 --> 00:30:19,010
all of which talk to a
database and execute queries.

639
00:30:19,010 --> 00:30:22,310
In fact, that's not a bad
segue to an example query.

640
00:30:22,310 --> 00:30:25,720
And again, we're not going to go into
Java or C++ or any of that anymore,

641
00:30:25,720 --> 00:30:29,420
but in SQL, the language to which I keep
referring, Structured Query Language,

642
00:30:29,420 --> 00:30:32,790
this itself is a programming language,
but it's meant to be used for, no

643
00:30:32,790 --> 00:30:37,330
surprise, structured query queries.

644
00:30:37,330 --> 00:30:38,660
By that I mean this.

645
00:30:38,660 --> 00:30:41,190
The way you select data
from a MySQL database

646
00:30:41,190 --> 00:30:49,330
is you literally type in your program
something like select star from users.

647
00:30:49,330 --> 00:30:52,200
I am assuming that this table,
henceforth is called users.

648
00:30:52,200 --> 00:30:54,860
I could call it anything we want,
but that kind of makes sense.

649
00:30:54,860 --> 00:30:57,240
And so select is a very
common verb, if you

650
00:30:57,240 --> 00:30:59,290
will, in SQL, that literally does that.

651
00:30:59,290 --> 00:31:02,730
What do you think star
means in this context?

652
00:31:02,730 --> 00:31:04,410
AUDIENCE: [INAUDIBLE]

653
00:31:04,410 --> 00:31:05,380
DAVID MALAN: I'm sorry?

654
00:31:05,380 --> 00:31:06,300
AUDIENCE: [INAUDIBLE]

655
00:31:06,300 --> 00:31:09,580
DAVID MALAN: Not required, it's
more inclusive than that, actually.

656
00:31:09,580 --> 00:31:11,700
It's the wild card character.

657
00:31:11,700 --> 00:31:14,740
Star almost always means anything,
so this means, in this case,

658
00:31:14,740 --> 00:31:16,510
select everything from the database.

659
00:31:16,510 --> 00:31:20,730
So when I say this, I mean
give me back every column

660
00:31:20,730 --> 00:31:22,440
from my table called users.

661
00:31:22,440 --> 00:31:24,730
So give me a result set, as it's called.

662
00:31:24,730 --> 00:31:28,210
In other words, give me a copy of the
spreadsheet, is what I'm getting at.

663
00:31:28,210 --> 00:31:34,890
But if I said select star from users
where ID equals 1, how big should

664
00:31:34,890 --> 00:31:36,640
my result set be then?

665
00:31:36,640 --> 00:31:41,680
Or equivalently, how many rows should
I be handed back from the database?

666
00:31:41,680 --> 00:31:45,860
Probably just one, if I have indeed
treated ID as a unique identifier,

667
00:31:45,860 --> 00:31:50,710
and if David has that unique ID, I
should get back one and only one row

668
00:31:50,710 --> 00:31:53,220
containing all of David's information.

669
00:31:53,220 --> 00:31:56,390
If I said this where ID
equals 99, I should get back,

670
00:31:56,390 --> 00:32:00,320
in this context, zero rows,
at least at the moment.

671
00:32:00,320 --> 00:32:03,620
However, if I don't really care
about all that information,

672
00:32:03,620 --> 00:32:06,970
I could just say, where does David live?

673
00:32:06,970 --> 00:32:10,860
Select zip code from
users where ID is 1.

674
00:32:10,860 --> 00:32:15,820
This will select to me only David's zip
code and not the entirety of that row.

675
00:32:15,820 --> 00:32:19,541
Why might I do this instead of
the star query, the wild card?

676
00:32:19,541 --> 00:32:21,950
AUDIENCE: [INAUDIBLE]

677
00:32:21,950 --> 00:32:24,590
DAVID MALAN: Yeah, I might only need it.

678
00:32:24,590 --> 00:32:26,350
So performance is again the answer here.

679
00:32:26,350 --> 00:32:28,540
Why ask for more
information than you need,

680
00:32:28,540 --> 00:32:32,020
because even if it's all right together,
you still have to copy that data,

681
00:32:32,020 --> 00:32:35,560
it would seem, from the database
into your program somehow,

682
00:32:35,560 --> 00:32:38,490
and that's just silly if you
only need five of those digits,

683
00:32:38,490 --> 00:32:40,340
not the entirety of the row.

684
00:32:40,340 --> 00:32:42,180
So how do I insert a user?

685
00:32:42,180 --> 00:32:44,780
Suppose a user has just
registered for the first time.

686
00:32:44,780 --> 00:32:46,560
The syntax would usually look like this.

687
00:32:46,560 --> 00:32:52,700
Insert into users, and
then we would say values,

688
00:32:52,700 --> 00:33:00,150
and then we would say values
like, let's say, Lauren Scully,

689
00:33:00,150 --> 00:33:02,380
our videographer right here.

690
00:33:02,380 --> 00:33:04,390
And the next field is gender.

691
00:33:04,390 --> 00:33:08,020
So we'll say quote, unquote
"f", then we have an ID

692
00:33:08,020 --> 00:33:12,250
and I'm going to say-- let's
pretend she's not actually here,

693
00:33:12,250 --> 00:33:14,380
so we'll rewind in the story.

694
00:33:14,380 --> 00:33:16,530
So 2 will be her ID.

695
00:33:16,530 --> 00:33:19,130
And then the next field
here is her email.

696
00:33:19,130 --> 00:33:22,140
So it's going to be like
Lauren Scully and so forth,

697
00:33:22,140 --> 00:33:24,360
and we'll just dot dot
dot it away from here on.

698
00:33:24,360 --> 00:33:26,890
Now it will get a little
tedious, but the insert query

699
00:33:26,890 --> 00:33:28,310
would ultimately look like that.

700
00:33:28,310 --> 00:33:30,970
If I want to get rid of
Scully, uh-oh, let's deregister

701
00:33:30,970 --> 00:33:37,420
her, she deletes her account,
delete from users where ID equals 2,

702
00:33:37,420 --> 00:33:38,500
will get rid of Scully.

703
00:33:38,500 --> 00:33:48,050
Or I can say update users set,
let's say, what could we change?

704
00:33:48,050 --> 00:33:49,430
Suppose she moves.

705
00:33:49,430 --> 00:33:53,730
Set zip equals 021-- nope,
that's her current zip.

706
00:33:53,730 --> 00:33:54,487
90210.

707
00:33:54,487 --> 00:33:56,320
The only other zip code
I know in the world.

708
00:33:56,320 --> 00:33:59,002
So that would change
her zip code-- actually,

709
00:33:59,002 --> 00:34:00,460
that would not change her zip code.

710
00:34:00,460 --> 00:34:02,170
What did I just do?

711
00:34:02,170 --> 00:34:04,292
Even though the syntax is probably new.

712
00:34:04,292 --> 00:34:05,302
AUDIENCE: [INAUDIBLE]

713
00:34:05,302 --> 00:34:08,010
DAVID MALAN: Yeah, I moved everyone
to Beverly Hills, California.

714
00:34:08,010 --> 00:34:11,920
So I should actually
say where ID equals 2.

715
00:34:11,920 --> 00:34:12,820
And so forth.

716
00:34:12,820 --> 00:34:15,290
So SQL is all about these
kinds of instructions.

717
00:34:15,290 --> 00:34:20,260
Select, insert, delete, update,
with these predicates at the end

718
00:34:20,260 --> 00:34:22,139
these where clauses, so to speak.

719
00:34:22,139 --> 00:34:25,170
And there's a lot more you can
do, but it really just boils down

720
00:34:25,170 --> 00:34:29,750
to simply, if arcanely, expressing
what you want the database to do.

721
00:34:29,750 --> 00:34:31,580
And then the database
will figure out, when

722
00:34:31,580 --> 00:34:35,630
you insert Lauren Scully into the
database, where to put her in memory

723
00:34:35,630 --> 00:34:38,230
so that we can very quickly get
her based on her email address

724
00:34:38,230 --> 00:34:42,610
or based on her ID number or the like.

725
00:34:42,610 --> 00:34:43,391
Yeah, Dan.

726
00:34:43,391 --> 00:34:44,266
AUDIENCE: [INAUDIBLE]

727
00:34:44,266 --> 00:34:46,364


728
00:34:46,364 --> 00:34:47,780
DAVID MALAN: Really good question.

729
00:34:47,780 --> 00:34:50,370
Will these scripts change from
Microsoft Access to Oracle

730
00:34:50,370 --> 00:34:52,290
to MySQL to PostgreSQL?

731
00:34:52,290 --> 00:34:53,790
The short answer is it depends.

732
00:34:53,790 --> 00:34:58,697
In theory, there is a very
significant common subset of SQL

733
00:34:58,697 --> 00:35:00,780
that's shared across all
of these implementations.

734
00:35:00,780 --> 00:35:03,340
However, various manufacturers
have added features

735
00:35:03,340 --> 00:35:07,120
to their databases to do certain things
beyond the scope of these features,

736
00:35:07,120 --> 00:35:08,720
that might, in fact, break.

737
00:35:08,720 --> 00:35:11,210
So the way developers
hedge against this,

738
00:35:11,210 --> 00:35:14,350
is that rather than writing raw
SQL code like I'm writing here,

739
00:35:14,350 --> 00:35:19,460
they instead use a library,
a common library that itself

740
00:35:19,460 --> 00:35:23,650
is sort of higher-level and abstracts
away which product you're using.

741
00:35:23,650 --> 00:35:25,710
And it gives you
functions and procedures

742
00:35:25,710 --> 00:35:28,810
to call so that you never
actually write raw SQL.

743
00:35:28,810 --> 00:35:32,609
In theory, then, you can change
products from Oracle to Microsoft

744
00:35:32,609 --> 00:35:34,650
or vice versa or anything
else, and you literally

745
00:35:34,650 --> 00:35:36,920
change nothing about your code.

746
00:35:36,920 --> 00:35:40,180
The reality, though, is, you sometimes
give up features as a result.

747
00:35:40,180 --> 00:35:43,860
You might have chosen a product because
it's got these value-added features,

748
00:35:43,860 --> 00:35:46,610
and you're just now not
using them consciously.

749
00:35:46,610 --> 00:35:51,630
And anecdotally, most companies tend
never to move away from their database.

750
00:35:51,630 --> 00:35:54,002
So while this is a nice to
have feature, the reality

751
00:35:54,002 --> 00:35:55,960
is, if you're overhauling
your database, you're

752
00:35:55,960 --> 00:35:59,890
probably making bunches of other changes
anyway, that you don't necessarily

753
00:35:59,890 --> 00:36:01,360
need to anticipate that.

754
00:36:01,360 --> 00:36:03,720
So it's arguably
over-engineering the problem,

755
00:36:03,720 --> 00:36:05,670
but it really depends on the context.

756
00:36:05,670 --> 00:36:09,960
But in theory, SQL is shared
across these various products.

757
00:36:09,960 --> 00:36:11,560
Really good questions.

758
00:36:11,560 --> 00:36:12,272
Yeah.

759
00:36:12,272 --> 00:36:13,147
AUDIENCE: [INAUDIBLE]

760
00:36:13,147 --> 00:36:17,820


761
00:36:17,820 --> 00:36:21,480
DAVID MALAN: Yeah, so
you can think a database

762
00:36:21,480 --> 00:36:25,020
is just a server, at the end of
the day, and inside of that server

763
00:36:25,020 --> 00:36:28,670
is a whole bunch of
tables, rows and columns.

764
00:36:28,670 --> 00:36:33,410
And when you send a query like this
from your program, your website,

765
00:36:33,410 --> 00:36:39,340
written in Java, Ruby, Python, whatever,
the server is receiving this command

766
00:36:39,340 --> 00:36:41,660
and interpreting it in
literally the same way

767
00:36:41,660 --> 00:36:43,660
we discussed earlier with
interpreted languages,

768
00:36:43,660 --> 00:36:47,333
and then performing some action on zero
or more rows in zero or more tables.

769
00:36:47,333 --> 00:36:48,208
AUDIENCE: [INAUDIBLE]

770
00:36:48,208 --> 00:36:53,540


771
00:36:53,540 --> 00:36:55,070
DAVID MALAN: Exactly, exactly.

772
00:36:55,070 --> 00:36:58,450
So the pseudocode for something
like that might be this.

773
00:36:58,450 --> 00:37:02,450
In your PHP file or your
Python file or your Java file,

774
00:37:02,450 --> 00:37:09,210
you would have pseudocode code, or
Scratch-like blocks as, if user visits

775
00:37:09,210 --> 00:37:19,870
acme.com/register for first time,
then insert into users and so forth.

776
00:37:19,870 --> 00:37:22,619
And we would translate this to
more concrete code in the end.

777
00:37:22,619 --> 00:37:24,660
But really, we have all
the building blocks here,

778
00:37:24,660 --> 00:37:27,680
even though we're skipping some
of the implementation steps.

779
00:37:27,680 --> 00:37:31,560
So let me find fault with what we
wonderfully did just a moment ago.

780
00:37:31,560 --> 00:37:36,470
You have created a pretty
complete table for users.

781
00:37:36,470 --> 00:37:38,920
Admittedly, we could implement
it in a few different ways,

782
00:37:38,920 --> 00:37:43,030
but you have actually led us
down the path-- and I say you,

783
00:37:43,030 --> 00:37:48,080
but it's probably my fault-- of a fairly
inefficient database implementation.

784
00:37:48,080 --> 00:37:49,950
It's not normalized.

785
00:37:49,950 --> 00:37:52,320
And by normalized I mean
there is going to be,

786
00:37:52,320 --> 00:37:57,380
over time, a significant redundancy,
and therefore inefficiency,

787
00:37:57,380 --> 00:38:00,210
that is waste of space.

788
00:38:00,210 --> 00:38:05,650
Based on only what you see here, can
you envision where this waste of space

789
00:38:05,650 --> 00:38:08,710
is going to come from, over time,
as more and more users register

790
00:38:08,710 --> 00:38:10,860
for your website?

791
00:38:10,860 --> 00:38:13,047
What data might become redundant?

792
00:38:13,047 --> 00:38:19,084


793
00:38:19,084 --> 00:38:20,940
AUDIENCE: [INAUDIBLE]

794
00:38:20,940 --> 00:38:22,686
DAVID MALAN: Why do you mean that?

795
00:38:22,686 --> 00:38:23,561
AUDIENCE: [INAUDIBLE]

796
00:38:23,561 --> 00:38:32,180


797
00:38:32,180 --> 00:38:32,930
DAVID MALAN: Yeah.

798
00:38:32,930 --> 00:38:35,622
And let's assume for the purposes
of today that that is true.

799
00:38:35,622 --> 00:38:38,330
Turns out, and we've learned this
the hard way, that is not true.

800
00:38:38,330 --> 00:38:41,670
Somehow multiple cities have,
somehow, the same zip code,

801
00:38:41,670 --> 00:38:43,390
which breaks this wonderful intuition.

802
00:38:43,390 --> 00:38:46,180
But let's suppose that's true,
because it's almost always true.

803
00:38:46,180 --> 00:38:51,390
So suppose that a zip code is
always associated with the same city

804
00:38:51,390 --> 00:38:53,600
and state, which is kind
of reasonable assumption,

805
00:38:53,600 --> 00:38:54,840
but incorrect, it turns out.

806
00:38:54,840 --> 00:38:57,310
But a reasonable assumption
for today's purposes.

807
00:38:57,310 --> 00:39:01,650
Then suppose that I live in Cambridge,
MA, according to this user's table,

808
00:39:01,650 --> 00:39:04,100
and suppose that Lauren
Scully lives in Cambridge, MA,

809
00:39:04,100 --> 00:39:06,120
and suppose that Kareem
lives in Cambridge, MA,

810
00:39:06,120 --> 00:39:10,400
and Arwa lives in Cambridge,
MA, all of us in 02138.

811
00:39:10,400 --> 00:39:15,890
Why are we remembering Cambridge,
MA, 02138 for all four of us?

812
00:39:15,890 --> 00:39:18,903
What should suffice to remember?

813
00:39:18,903 --> 00:39:20,249
AUDIENCE: [INAUDIBLE]

814
00:39:20,249 --> 00:39:21,540
DAVID MALAN: Just the zip code.

815
00:39:21,540 --> 00:39:25,080
Just that 02138 exists, because
you know what we could do?

816
00:39:25,080 --> 00:39:32,650
We could get a little fancy here
and over here, define another table

817
00:39:32,650 --> 00:39:35,850
where this is going to be the
name, this is going to be the type,

818
00:39:35,850 --> 00:39:38,840
this is going to be the
length, and henceforth, I'm

819
00:39:38,840 --> 00:39:42,900
going to call this my cities table.

820
00:39:42,900 --> 00:39:47,011
This was called, of
course, my users table.

821
00:39:47,011 --> 00:39:49,885
And so what should I put over here
for my cities table, do you think?

822
00:39:49,885 --> 00:39:53,605


823
00:39:53,605 --> 00:39:54,535
AUDIENCE: [INAUDIBLE]

824
00:39:54,535 --> 00:39:55,930
DAVID MALAN: Yeah.

825
00:39:55,930 --> 00:40:01,440
So zip and state and city.

826
00:40:01,440 --> 00:40:05,350
And so the type here, we'll say
this is going to be a char 5 again,

827
00:40:05,350 --> 00:40:06,750
subject to the debate of earlier.

828
00:40:06,750 --> 00:40:14,810
This will be an enum, perhaps like
before, and city will be a varchar 50.

829
00:40:14,810 --> 00:40:17,960
And so now what do I get
to erase from this table

830
00:40:17,960 --> 00:40:21,995
to eliminate that inefficiency?

831
00:40:21,995 --> 00:40:23,100
AUDIENCE: [INAUDIBLE]

832
00:40:23,100 --> 00:40:23,850
DAVID MALAN: Nice.

833
00:40:23,850 --> 00:40:30,239
State and city go away, so I've now
eliminated the potential inefficiency

834
00:40:30,239 --> 00:40:33,280
for redundantly remembering, Cambridge,
MA, Cambridge, MA, Cambridge, MA,

835
00:40:33,280 --> 00:40:35,712
Cambridge, MA, which, hopefully
is never going to change.

836
00:40:35,712 --> 00:40:37,670
And even if it does, it's
minorly annoying, now

837
00:40:37,670 --> 00:40:39,750
that I have to change
it in multiple rows,

838
00:40:39,750 --> 00:40:43,770
whereas here, I could just
change it in one place.

839
00:40:43,770 --> 00:40:46,890
Now what's the trade-off, perhaps?

840
00:40:46,890 --> 00:40:48,020
This was super convenient.

841
00:40:48,020 --> 00:40:50,730
Had all my data nicely together.

842
00:40:50,730 --> 00:40:53,644
But what's clearly the case now?

843
00:40:53,644 --> 00:40:55,684
AUDIENCE: [INAUDIBLE]

844
00:40:55,684 --> 00:40:58,100
DAVID MALAN: Exactly, and I'm
glad you used the word join,

845
00:40:58,100 --> 00:41:01,320
because that's actually the keyword,
in the world of relational databases

846
00:41:01,320 --> 00:41:05,270
in SQL, it's an actual word you
might type or at least convey.

847
00:41:05,270 --> 00:41:09,280
And in fact, what we now have to do
to select David's full information is

848
00:41:09,280 --> 00:41:19,700
something like select star from
users, join cities, on-- and now

849
00:41:19,700 --> 00:41:24,010
I'm going to just move to a second line
so that this fits-- users.zip equals

850
00:41:24,010 --> 00:41:34,570
cities.zip, where users.ID equals 1.

851
00:41:34,570 --> 00:41:35,550
So what's going on?

852
00:41:35,550 --> 00:41:38,970
It's ugly looking, but you can kind of
read it left to right, top to bottom.

853
00:41:38,970 --> 00:41:41,030
Select star from users
is the same as before,

854
00:41:41,030 --> 00:41:42,930
but it's not from users, per se.

855
00:41:42,930 --> 00:41:45,910
It's from users join cities.

856
00:41:45,910 --> 00:41:48,520
What am I joining those two tables on?

857
00:41:48,520 --> 00:41:51,820
Well, apparently, the
users tables zip field,

858
00:41:51,820 --> 00:41:54,810
and this period is just special
syntax to express that idea,

859
00:41:54,810 --> 00:41:58,130
and this is the cities tables zip field.

860
00:41:58,130 --> 00:42:01,580
I want those two to be equal,
but I want to ultimately select

861
00:42:01,580 --> 00:42:06,280
only those rows where
ID in the users table

862
00:42:06,280 --> 00:42:08,730
equals 1, which happened to be mine.

863
00:42:08,730 --> 00:42:11,781
And just to be clear, a
programmer, typically when

864
00:42:11,781 --> 00:42:14,780
hardcode something like the number
1, because otherwise the website only

865
00:42:14,780 --> 00:42:17,630
supports David or the
very first user, you

866
00:42:17,630 --> 00:42:20,720
would instead do
something like ID, where

867
00:42:20,720 --> 00:42:22,510
this represents a
variable, something that

868
00:42:22,510 --> 00:42:26,210
can change over time, similar
in spirit to what I said earlier

869
00:42:26,210 --> 00:42:28,080
with these kinds of placeholders.

870
00:42:28,080 --> 00:42:30,396
But for now we'll just hardcode it as 1.

871
00:42:30,396 --> 00:42:31,520
And so what does this mean?

872
00:42:31,520 --> 00:42:35,100
Well, a nice way to visualize this is
that if this hand is the users table,

873
00:42:35,100 --> 00:42:38,090
and this hand is the zips
table, we're sort of finding--

874
00:42:38,090 --> 00:42:41,330
and the tips of my fingers are zip
over here, and the tips of my fingers

875
00:42:41,330 --> 00:42:43,740
here are zip, you're
kind of interlocking it

876
00:42:43,740 --> 00:42:47,950
so that you get back the resulting
original table, by truly joining

877
00:42:47,950 --> 00:42:49,590
the two tables on the common field.

878
00:42:49,590 --> 00:42:50,840
And it doesn't have to be zip.

879
00:42:50,840 --> 00:42:54,460
It could be most anything else, but
zip is nice, because one, it's short,

880
00:42:54,460 --> 00:42:56,470
two, it's always the
same length, so there's

881
00:42:56,470 --> 00:43:02,270
a real efficiency to what
Olivier proposed here

882
00:43:02,270 --> 00:43:05,200
with factoring out the zip, and
[INAUDIBLE] proposing that we get rid

883
00:43:05,200 --> 00:43:07,110
of city and states.

884
00:43:07,110 --> 00:43:11,370
So this is the process
known as normalization.

885
00:43:11,370 --> 00:43:14,171
Any questions on that?

886
00:43:14,171 --> 00:43:16,170
Well let me point out
this is the kind of stuff,

887
00:43:16,170 --> 00:43:19,202
even though it's fairly low-level,
this discussion, that you would think

888
00:43:19,202 --> 00:43:20,910
you're sort of getting
lost in the weeds,

889
00:43:20,910 --> 00:43:26,690
this is a manifestation of ample
opportunity for developers to be bad.

890
00:43:26,690 --> 00:43:29,600
And in fact, even when we, in
courses I've taught, when we've had,

891
00:43:29,600 --> 00:43:32,290
for instance, inexperienced
undergraduate programmers

892
00:43:32,290 --> 00:43:35,920
build websites, at first glance,
the websites might look terrific.

893
00:43:35,920 --> 00:43:38,280
And they have all of the
functionality we requested,

894
00:43:38,280 --> 00:43:40,650
the developers did a good job.

895
00:43:40,650 --> 00:43:43,370
But they didn't necessarily know
enough about database design

896
00:43:43,370 --> 00:43:46,680
or they didn't think hard
enough about the types of data

897
00:43:46,680 --> 00:43:49,220
and the types of users the
website was going to have,

898
00:43:49,220 --> 00:43:53,240
and we find, then, six months later,
after they've graduated or moved on,

899
00:43:53,240 --> 00:43:56,016
that damn it, our website
is really, genuinely slow.

900
00:43:56,016 --> 00:43:58,890
And I'm not even talking about having
millions or thousands of users.

901
00:43:58,890 --> 00:44:02,580
I mean a few hundred users on campus,
all of whom like to, for instance,

902
00:44:02,580 --> 00:44:04,870
shop for courses at
the same time, they're

903
00:44:04,870 --> 00:44:07,010
using that course catalog
application I mentioned

904
00:44:07,010 --> 00:44:10,410
and the thing is getting really
slow because there were no indexes.

905
00:44:10,410 --> 00:44:13,740
There were no red stars, so to
speak, or we hadn't necessarily

906
00:44:13,740 --> 00:44:17,690
factored out common data to
get some savings of space.

907
00:44:17,690 --> 00:44:21,880
And so when vetting a developer
or database person or the like,

908
00:44:21,880 --> 00:44:25,864
the kinds of questions to think through
is even, when reviewing someone's code,

909
00:44:25,864 --> 00:44:28,530
to say, not necessarily look
through all of their code, but say,

910
00:44:28,530 --> 00:44:30,154
let's look through the database tables.

911
00:44:30,154 --> 00:44:31,150
What are you storing?

912
00:44:31,150 --> 00:44:33,941
And then to say, well, wait a
minute, why are you using an integer?

913
00:44:33,941 --> 00:44:36,224
What if we have 4 billion
and 1 of these rows?

914
00:44:36,224 --> 00:44:38,140
And these kinds of
questions is an opportunity

915
00:44:38,140 --> 00:44:40,170
to kind of push back and
get a sense of, where

916
00:44:40,170 --> 00:44:42,300
if you're not comfortable doing
it, having someone more technical

917
00:44:42,300 --> 00:44:45,425
ask these questions, of whether or not
the person really knows their stuff.

918
00:44:45,425 --> 00:44:47,890
And this is the kind of
stuff, too, that people

919
00:44:47,890 --> 00:44:50,540
on the internet who
are self-taught, maybe

920
00:44:50,540 --> 00:44:53,920
learn less frequently, because you
don't necessarily come across it

921
00:44:53,920 --> 00:44:56,630
as much, because you can get
the database up and running,

922
00:44:56,630 --> 00:44:58,880
but unless you've read
up on tutorials or been

923
00:44:58,880 --> 00:45:01,880
told about database normalization
and indexing and performance,

924
00:45:01,880 --> 00:45:04,255
these are the kinds of things
that are going to hurt you.

925
00:45:04,255 --> 00:45:07,480
And you might think, or a bad engineer
might say, oh, well, we better pay

926
00:45:07,480 --> 00:45:09,600
for a bigger database
or a faster database

927
00:45:09,600 --> 00:45:13,360
or just throw money at this,
vertically scale, not necessarily so.

928
00:45:13,360 --> 00:45:16,920
If you go in-- and you can go in
after the fact-- and add indexes,

929
00:45:16,920 --> 00:45:20,320
and it might take a few hours for the
database to build up that new data

930
00:45:20,320 --> 00:45:24,100
structure that I alluded to earlier,
you can still fix this after the fact,

931
00:45:24,100 --> 00:45:26,180
that this is where you
start to distinguish

932
00:45:26,180 --> 00:45:28,830
good designers from bad
designers, not just aesthetically,

933
00:45:28,830 --> 00:45:32,972
but performance-wise as well.

934
00:45:32,972 --> 00:45:33,555
Any questions?

935
00:45:33,555 --> 00:45:36,420


936
00:45:36,420 --> 00:45:37,480
No?

937
00:45:37,480 --> 00:45:41,980
So for NoSQL, which was the other type
of database to which I alluded earlier,

938
00:45:41,980 --> 00:45:43,490
you don't have rows and columns.

939
00:45:43,490 --> 00:45:47,000
Instead, you would have something
that looks a little more like this.

940
00:45:47,000 --> 00:45:48,630
I'm going to use common syntax.

941
00:45:48,630 --> 00:45:51,270
Curly braces happen to
be used here quite a lot.

942
00:45:51,270 --> 00:45:55,400
You might have something
like first name is David,

943
00:45:55,400 --> 00:46:00,180
you might have last
name is Malan, quotes,

944
00:46:00,180 --> 00:46:07,530
you might have ID is--
excuse me, whoops-- ID is 1,

945
00:46:07,530 --> 00:46:13,410
email is malan@harvard.edu, and I won't
bother typing out the rest, and then

946
00:46:13,410 --> 00:46:14,380
some other things.

947
00:46:14,380 --> 00:46:17,380
In other words, this is
a textual representation

948
00:46:17,380 --> 00:46:20,720
of what we would generally call
an object in a computer program.

949
00:46:20,720 --> 00:46:26,079
And an object is generally just
a collection of key value pairs.

950
00:46:26,079 --> 00:46:27,370
So again, this recurring theme.

951
00:46:27,370 --> 00:46:30,440
We saw key value pairs in HTML,
we saw key value pairs now

952
00:46:30,440 --> 00:46:34,020
in the context of databases, and we
saw key value pairs in the context

953
00:46:34,020 --> 00:46:35,970
of, I think, a language earlier today.

954
00:46:35,970 --> 00:46:36,890
Keeps coming up.

955
00:46:36,890 --> 00:46:39,620
And indeed, that's really
what data boils down to,

956
00:46:39,620 --> 00:46:44,240
data and metadata, or values
and keys, respectively.

957
00:46:44,240 --> 00:46:47,430
So a non-relational
database, something based

958
00:46:47,430 --> 00:46:50,680
on objects, where you just clump
everything together and put it

959
00:46:50,680 --> 00:46:55,640
into memory, would generally be
pictured as, or thought of, as this.

960
00:46:55,640 --> 00:47:00,500
And I'll leave that now as a
sort of alternative approach.

961
00:47:00,500 --> 00:47:03,750
And one isn't necessarily
better than the other.

962
00:47:03,750 --> 00:47:07,310
In fact, very much in vogue
these days are database systems

963
00:47:07,310 --> 00:47:11,942
like MongoDB and Redis and a few
other such tools, freely available,

964
00:47:11,942 --> 00:47:13,400
but they are increasingly en vogue.

965
00:47:13,400 --> 00:47:18,850
Partly because they offer additional
features over these tabular approaches,

966
00:47:18,850 --> 00:47:20,850
but also because they're
a little easier to use,

967
00:47:20,850 --> 00:47:24,099
because you don't have to think as hard
about a lot of these design decisions.

968
00:47:24,099 --> 00:47:25,970
So pluses and minuses.

969
00:47:25,970 --> 00:47:29,740
So realize there are options
beyond what we just spent time on.

970
00:47:29,740 --> 00:47:32,310
So let's do this.

971
00:47:32,310 --> 00:47:37,870
Let's transition a little
back now to web programming,

972
00:47:37,870 --> 00:47:40,470
so that we kind of conclude
today with something

973
00:47:40,470 --> 00:47:43,930
that's a little hands-on, filling
in some gaps from yesterday.

974
00:47:43,930 --> 00:47:45,340
Let me go to this first.

975
00:47:45,340 --> 00:47:49,310
So recall that yesterday
we had some canonical HTML

976
00:47:49,310 --> 00:47:55,110
pages that had initially, only
HTML, and then secondarily had CSS,

977
00:47:55,110 --> 00:47:56,620
cascading style sheets.

978
00:47:56,620 --> 00:47:59,830
This is a new tag that we didn't
see yesterday, or dwell on,

979
00:47:59,830 --> 00:48:01,490
so-called script tag.

980
00:48:01,490 --> 00:48:05,830
Turns out you can actually embed a
language called JavaScript in your web

981
00:48:05,830 --> 00:48:08,310
page and make your web
pages do something.

982
00:48:08,310 --> 00:48:09,710
So what do I mean by that?

983
00:48:09,710 --> 00:48:12,630
Well, let me go ahead and just
borrow this code for a moment.

984
00:48:12,630 --> 00:48:15,860
I'm going to go into Cloud9, no need
to go there yourselves just yet,

985
00:48:15,860 --> 00:48:21,350
and I'm going to call this alert.HTML.

986
00:48:21,350 --> 00:48:23,650
I'm going to paste in my file here.

987
00:48:23,650 --> 00:48:32,070
And just to clarify what I've done, let
me go to this address and go to alert,

988
00:48:32,070 --> 00:48:33,870
and you see the Hello World.

989
00:48:33,870 --> 00:48:35,440
But this is kind of underwhelming.

990
00:48:35,440 --> 00:48:37,410
I want to do something
a little different.

991
00:48:37,410 --> 00:48:40,610
So I'm going to actually do this.

992
00:48:40,610 --> 00:48:43,820
I'm going to go in here e,
and in between my script tags,

993
00:48:43,820 --> 00:48:53,460
say alert('hello,world'); so notice
it's a little sloppy, but I've got HTML,

994
00:48:53,460 --> 00:48:56,180
inside of which is a
language called JavaScript,

995
00:48:56,180 --> 00:48:59,420
and this is what's called a
function call or procedure call.

996
00:48:59,420 --> 00:49:04,500
This is a verb, literally, in this case,
and I am invoking code functionality

997
00:49:04,500 --> 00:49:06,310
that someone else wrote.

998
00:49:06,310 --> 00:49:09,630
So that functionality is an
alert, so let's go to this page

999
00:49:09,630 --> 00:49:14,046
now and click reload, and now you
see a little bit of interactivity.

1000
00:49:14,046 --> 00:49:15,420
It's kind of old school and ugly.

1001
00:49:15,420 --> 00:49:18,580
This kind of reminds you of the
pop-ups, perhaps, of yesteryear

1002
00:49:18,580 --> 00:49:22,030
but it did do something a
little more programmatic.

1003
00:49:22,030 --> 00:49:26,940
So more than that, let's do
something more interesting.

1004
00:49:26,940 --> 00:49:30,980
Let me go in here and get rid of this.

1005
00:49:30,980 --> 00:49:33,840
And I'm going to go ahead and
create a form like we did yesterday.

1006
00:49:33,840 --> 00:49:34,840
Actually, you know what?

1007
00:49:34,840 --> 00:49:37,350
I'm going to go into
google.html, which we

1008
00:49:37,350 --> 00:49:43,027
started on yesterday, which looked like
this, via which we searched for cat

1009
00:49:43,027 --> 00:49:45,360
But notice there's kind of a
bug in the current version.

1010
00:49:45,360 --> 00:49:49,770
It works for cats, but suppose that
I don't cooperate and I type nothing,

1011
00:49:49,770 --> 00:49:53,290
and I simply click submit.

1012
00:49:53,290 --> 00:49:54,540
That's kind of weird behavior.

1013
00:49:54,540 --> 00:49:57,300
Took me to the real Google,
didn't give me an error message.

1014
00:49:57,300 --> 00:50:00,590
I'd like to tell the user
you need to give us a value.

1015
00:50:00,590 --> 00:50:01,780
So how might we do this?

1016
00:50:01,780 --> 00:50:06,790
Well let me go back into Cloud9 and
let me go into the top of my page

1017
00:50:06,790 --> 00:50:11,980
and add a script tag like this, where
I'm going to type some JavaScript code.

1018
00:50:11,980 --> 00:50:15,420
And I'm going to do the following.

1019
00:50:15,420 --> 00:50:22,910
If(document.getelementByID-- and recall
that we talked about that earlier,

1020
00:50:22,910 --> 00:50:23,960
that function.

1021
00:50:23,960 --> 00:50:25,310
What ID do I want to get?

1022
00:50:25,310 --> 00:50:33,050
I want to get q, and I'm going to
say equals nothing, like this--

1023
00:50:33,050 --> 00:50:38,220
actually let me use double quotes
just for consistency-- equals nothing,

1024
00:50:38,220 --> 00:50:46,650
then alert("Please type a query") here.

1025
00:50:46,650 --> 00:50:49,200
So I have what appears to be
something like a condition.

1026
00:50:49,200 --> 00:50:51,410
We've seen this general idea in Scratch.

1027
00:50:51,410 --> 00:50:54,240
It's like one of those puzzle
pieces that looked like this.

1028
00:50:54,240 --> 00:50:55,780
And what am I saying?

1029
00:50:55,780 --> 00:50:59,520
Well, down here, notice I'm
going to do the following.

1030
00:50:59,520 --> 00:51:02,790
I'm going to give this form
field not only a name of q, which

1031
00:51:02,790 --> 00:51:06,630
is what gets passed to Google, but I'm
going to give it a local identifier,

1032
00:51:06,630 --> 00:51:07,630
also called q.

1033
00:51:07,630 --> 00:51:11,780
But I could call this anything I
want, I'm just going to keep it simple

1034
00:51:11,780 --> 00:51:14,570
and also call it q, just for simplicity.

1035
00:51:14,570 --> 00:51:17,650
And now I'm going to do
something a little more.

1036
00:51:17,650 --> 00:51:22,600
On the form fields here, I'm going to
add what's called an event handler.

1037
00:51:22,600 --> 00:51:32,260
On submit, I want to call
a function called validate.

1038
00:51:32,260 --> 00:51:35,520
This does not exist yet, this
word, or this verb validate,

1039
00:51:35,520 --> 00:51:38,560
because what I'm going to do
up here now is add some code.

1040
00:51:38,560 --> 00:51:42,200
I'm going to say function validate.

1041
00:51:42,200 --> 00:51:48,280
I'm going to indent this and add another
curly brace here and another one here.

1042
00:51:48,280 --> 00:51:50,110
Consider what this is now doing.

1043
00:51:50,110 --> 00:51:54,210
I have now-- think of this as created my
own puzzle piece that didn't previously

1044
00:51:54,210 --> 00:51:57,440
exist, and I've called this puzzle
piece the validate puzzle piece.

1045
00:51:57,440 --> 00:52:01,620
Its purpose in life is to execute
the four lines of code inside of it.

1046
00:52:01,620 --> 00:52:04,940
If document.getElementByID
so conceptually,

1047
00:52:04,940 --> 00:52:09,380
that is going to go into the element,
the HTML element whose unique

1048
00:52:09,380 --> 00:52:12,930
idea is just q, and then even though
the syntax looks a little weird,

1049
00:52:12,930 --> 00:52:16,430
that equal equals just means equals.

1050
00:52:16,430 --> 00:52:20,950
So that means if the element with the
unique identifier of q, when gotten,

1051
00:52:20,950 --> 00:52:25,700
has no value, it just equals
quote unquote, nothing in there,

1052
00:52:25,700 --> 00:52:27,170
then what do I want to do?

1053
00:52:27,170 --> 00:52:29,360
I want to yell at the user.

1054
00:52:29,360 --> 00:52:31,710
And we won't go great detail here.

1055
00:52:31,710 --> 00:52:32,960
I'm going to return false.

1056
00:52:32,960 --> 00:52:34,380
That is an error.

1057
00:52:34,380 --> 00:52:38,746
Else, I'm going to return true.

1058
00:52:38,746 --> 00:52:40,120
So either it worked or it didn't.

1059
00:52:40,120 --> 00:52:41,800
False or true.

1060
00:52:41,800 --> 00:52:47,820
And now if I didn't make any mistakes,
let me save this and reload this.

1061
00:52:47,820 --> 00:52:50,940
And let me just double check that
I didn't, in fact, make any typos,

1062
00:52:50,940 --> 00:52:52,690
so I don't embarrass myself.

1063
00:52:52,690 --> 00:52:54,240
Let's see if this works.

1064
00:52:54,240 --> 00:52:56,930
So now I'm going to type cats.

1065
00:52:56,930 --> 00:52:59,421
It still works, or half works, at least.

1066
00:52:59,421 --> 00:53:02,170
Now let me reload it, and now let
me try submitting without typing

1067
00:53:02,170 --> 00:53:05,860
anything-- damn it, it broke.

1068
00:53:05,860 --> 00:53:06,430
One moment.

1069
00:53:06,430 --> 00:53:09,380


1070
00:53:09,380 --> 00:53:12,660
Let me open the console,
[INAUDIBLE] log, reload the page.

1071
00:53:12,660 --> 00:53:13,576
Let me try this again.

1072
00:53:13,576 --> 00:53:17,000


1073
00:53:17,000 --> 00:53:17,501
Oh, damn it.

1074
00:53:17,501 --> 00:53:18,000
I forgot.

1075
00:53:18,000 --> 00:53:18,630
I made a typo.

1076
00:53:18,630 --> 00:53:20,760
I remember what it is.

1077
00:53:20,760 --> 00:53:21,350
.value.

1078
00:53:21,350 --> 00:53:27,060
I meant to say if the value
of the element whose ID is q

1079
00:53:27,060 --> 00:53:29,800
equals that, then yell at the user.

1080
00:53:29,800 --> 00:53:31,870
So now let me hold my breath again.

1081
00:53:31,870 --> 00:53:33,480
Here we go.

1082
00:53:33,480 --> 00:53:34,130
There we go.

1083
00:53:34,130 --> 00:53:35,010
Please type a query.

1084
00:53:35,010 --> 00:53:36,840
So it's not letting me through.

1085
00:53:36,840 --> 00:53:40,210
I can be kind of playful with this,
and instead of checking for no value,

1086
00:53:40,210 --> 00:53:46,720
I can say something like,
no more searching for cats,

1087
00:53:46,720 --> 00:53:51,150
and now we can just more playfully let
the user search for dogs if he or she

1088
00:53:51,150 --> 00:53:57,490
wants, or if I go in here and
search for cats, now I can't.

1089
00:53:57,490 --> 00:53:58,690
So what's the takeaway here?

1090
00:53:58,690 --> 00:54:03,010
So one, we've introduced into
our world of HTML and CSS,

1091
00:54:03,010 --> 00:54:04,320
programming functionality.

1092
00:54:04,320 --> 00:54:06,300
I can actually now
make decisions in code.

1093
00:54:06,300 --> 00:54:10,570
Previously, all I could do is mark up
textual content or graphical content

1094
00:54:10,570 --> 00:54:13,080
and tell it what to look
like and where to display.

1095
00:54:13,080 --> 00:54:16,650
Now I can actually ask
questions of the web page

1096
00:54:16,650 --> 00:54:20,010
and make decisions based
on it, and prompt the user

1097
00:54:20,010 --> 00:54:22,780
if I need to yell at him or her.

1098
00:54:22,780 --> 00:54:28,740
So let's try something
on our own with this.

1099
00:54:28,740 --> 00:54:33,350
Go ahead, let me open up the next slide
here, and just point out one thing.

1100
00:54:33,350 --> 00:54:37,250
Just like with CSS, we can factor out
our JavaScript code to a separate file,

1101
00:54:37,250 --> 00:54:40,660
you can do the same thing
with JavaScript as with CSS.

1102
00:54:40,660 --> 00:54:44,520
And you use that using a source
attribute of the script tag.

1103
00:54:44,520 --> 00:54:46,540
But we won't complicate things for now.

1104
00:54:46,540 --> 00:54:50,440
Instead, if you could
go to not this page,

1105
00:54:50,440 --> 00:55:02,690
but-- let me move this around in order--
go to, if you could, this page here.

1106
00:55:02,690 --> 00:55:03,592
This URL here.

1107
00:55:03,592 --> 00:55:04,550
It's in today's slides.

1108
00:55:04,550 --> 00:55:07,133
You might have to reload because
I've added a couple of thing.

1109
00:55:07,133 --> 00:55:09,970


1110
00:55:09,970 --> 00:55:13,890
But go there where some puzzles await.

1111
00:55:13,890 --> 00:55:16,670
And this will give us a chance,
in a slightly more fun context,

1112
00:55:16,670 --> 00:55:20,610
to dabble with some JavaScript.

1113
00:55:20,610 --> 00:55:25,505
And when you get there,
I'll explain what awaits.

1114
00:55:25,505 --> 00:55:47,350


1115
00:55:47,350 --> 00:55:47,850
Get green.

1116
00:55:47,850 --> 00:56:03,063


1117
00:56:03,063 --> 00:56:03,562
Set blue.

1118
00:56:03,562 --> 00:56:11,030


1119
00:56:11,030 --> 00:56:13,930
Sets green, sets red.

1120
00:56:13,930 --> 00:56:19,220


1121
00:56:19,220 --> 00:56:20,220
Oops.

1122
00:56:20,220 --> 00:56:22,330
Sorry.

1123
00:56:22,330 --> 00:56:27,630
This is the extent of our
documentation for this challenge.

1124
00:56:27,630 --> 00:56:29,920
And this is going to work as follows.

1125
00:56:29,920 --> 00:56:33,340
So what you have on this
page is a whole bunch

1126
00:56:33,340 --> 00:56:38,024
of image puzzles by a buddy
at Stanford University.

1127
00:56:38,024 --> 00:56:41,190
So what you're seeing here is almost
kind of one of those magic eye puzzles,

1128
00:56:41,190 --> 00:56:43,815
but if you just stare at it,
nothing's going to pop out at you.

1129
00:56:43,815 --> 00:56:46,000
Rather, something is
hidden in this image.

1130
00:56:46,000 --> 00:56:47,790
And it's hidden in the following way.

1131
00:56:47,790 --> 00:56:51,740
Images, as you may know, can be
composed of just three colors.

1132
00:56:51,740 --> 00:56:53,346
Some red, some blue, and some green.

1133
00:56:53,346 --> 00:56:55,220
And we can make all the
colors in the rainbow

1134
00:56:55,220 --> 00:56:57,570
by mixing those three colors somehow.

1135
00:56:57,570 --> 00:57:01,940
So this looks mostly green and
blue, but as Nick says here,

1136
00:57:01,940 --> 00:57:04,060
this iron puzzle image is a puzzle.

1137
00:57:04,060 --> 00:57:06,780
It contains an image of
something famous, however,

1138
00:57:06,780 --> 00:57:08,310
the image has been distorted.

1139
00:57:08,310 --> 00:57:11,500
The famous object is in the red values.

1140
00:57:11,500 --> 00:57:13,810
However, the red values
have all been divided by 10.

1141
00:57:13,810 --> 00:57:16,230
So they are too small by a factor of 10.

1142
00:57:16,230 --> 00:57:18,280
So in other words, Nick
took an original image,

1143
00:57:18,280 --> 00:57:21,500
and he desaturated all
of the red from it,

1144
00:57:21,500 --> 00:57:23,850
lowering the amount of red
ink, if you will, in it.

1145
00:57:23,850 --> 00:57:26,060
The blue and green values
are all just meaningless,

1146
00:57:26,060 --> 00:57:30,000
random values, aka noise designed
to obscure the real image.

1147
00:57:30,000 --> 00:57:32,250
So what Nick did was he
toned down the red and then

1148
00:57:32,250 --> 00:57:34,380
he just threw random
amounts of blue and green

1149
00:57:34,380 --> 00:57:37,590
at the image to kind of obscure
what's actually still there.

1150
00:57:37,590 --> 00:57:41,089
You must undo these distortions
to reveal the image.

1151
00:57:41,089 --> 00:57:44,255
First, set all the blue and green values
to zero to get them out of the way,

1152
00:57:44,255 --> 00:57:48,700
and look at the result. Then
multiply each red value by 10,

1153
00:57:48,700 --> 00:57:51,720
scaling back up to
approximately its final value.

1154
00:57:51,720 --> 00:57:53,035
What is the famous object?

1155
00:57:53,035 --> 00:57:57,920
So all of you have this rectangle
in your browser right now.

1156
00:57:57,920 --> 00:58:00,830
And notice that there is some
starter code, so to speak.

1157
00:58:00,830 --> 00:58:04,370
This is JavaScript code that
Nick has written for you.

1158
00:58:04,370 --> 00:58:07,250
And notice that there's
a line in the middle that

1159
00:58:07,250 --> 00:58:10,380
starts with a slash slash, that's
what's generally called a comment.

1160
00:58:10,380 --> 00:58:14,660
It means it's a phrase to the programmer
that has no functional meaning.

1161
00:58:14,660 --> 00:58:16,520
It's just a visual cue to the human.

1162
00:58:16,520 --> 00:58:18,670
So you can go ahead and
delete just that line,

1163
00:58:18,670 --> 00:58:22,214
and be super careful not to
delete or change anything else.

1164
00:58:22,214 --> 00:58:25,130
And let me just walk you through
what this code does and I'll leave it

1165
00:58:25,130 --> 00:58:28,580
to you to figure out the secret image.

1166
00:58:28,580 --> 00:58:32,226
This first line here that I've just
highlighted gives you the following.

1167
00:58:32,226 --> 00:58:34,100
On the left hand side,
you have what's called

1168
00:58:34,100 --> 00:58:39,140
a variable that Nick has arbitrarily,
but reasonably called im for image.

1169
00:58:39,140 --> 00:58:41,660
On the right hand side
of that equal sign,

1170
00:58:41,660 --> 00:58:45,240
he's saying give me a new
quote, unquote "simple image".

1171
00:58:45,240 --> 00:58:49,680
Simple image, in this context
is what's called a class, well,

1172
00:58:49,680 --> 00:58:53,910
it's kind of like a class--
technically a prototype-- but really,

1173
00:58:53,910 --> 00:58:58,000
this is giving me a new object,
the contents of which are the file,

1174
00:58:58,000 --> 00:58:59,610
iron-puzzle.png.

1175
00:58:59,610 --> 00:59:03,190
In other words, Nick has created
this notion of a simple image

1176
00:59:03,190 --> 00:59:05,920
so that we can, for pedagogical
purposes, play with the image

1177
00:59:05,920 --> 00:59:09,790
and change its red,
green, and blue values.

1178
00:59:09,790 --> 00:59:11,750
And how are we doing that?

1179
00:59:11,750 --> 00:59:15,360
This somewhat cryptic syntax here
is kind of like the repeat block

1180
00:59:15,360 --> 00:59:19,140
that some of you saw in Scratch earlier
today, where you can repeat 10 times.

1181
00:59:19,140 --> 00:59:22,220
In this case, Nick has not
hardcoded a number like 10.

1182
00:59:22,220 --> 00:59:28,020
Instead he is saying, initialize
a variable called x to 0,

1183
00:59:28,020 --> 00:59:33,180
check if x is less than
the width of the image.

1184
00:59:33,180 --> 00:59:38,160
And so to be more proper, image is the
variable, dot means go inside of it

1185
00:59:38,160 --> 00:59:40,900
and get its width, and
then open paren, closed

1186
00:59:40,900 --> 00:59:43,687
paren is just a programmer's way
of saying this is a function.

1187
00:59:43,687 --> 00:59:44,520
This is a procedure.

1188
00:59:44,520 --> 00:59:46,430
This is functionality
someone else wrote.

1189
00:59:46,430 --> 00:59:48,570
Use it and give me back an answer.

1190
00:59:48,570 --> 00:59:53,610
And then x++ is a fancy way of
saying, after you've done this once,

1191
00:59:53,610 --> 00:59:55,850
increment x by 1.

1192
00:59:55,850 --> 00:59:58,760
In other words, this
is a programmer's way

1193
00:59:58,760 --> 01:00:05,760
of inducing a loop that's
going to iterate over

1194
01:00:05,760 --> 01:00:10,410
all of the columns in an image.

1195
01:00:10,410 --> 01:00:14,790
An image is just a grid of
dots, rows and columns of dots.

1196
01:00:14,790 --> 01:00:18,270
This is a way of iterating
over all of those columns.

1197
01:00:18,270 --> 01:00:20,770
And on the inside,
meanwhile, we're iterating

1198
01:00:20,770 --> 01:00:24,030
over the heights, here
and here and here.

1199
01:00:24,030 --> 01:00:29,442
So this is just a way of traipsing,
almost like an old school typewriter,

1200
01:00:29,442 --> 01:00:32,230
to just go over the
whole image iteratively.

1201
01:00:32,230 --> 01:00:36,370
Even that's not quite wholly
clear, just take on faith for now,

1202
01:00:36,370 --> 01:00:38,880
that those three lines
of code together are

1203
01:00:38,880 --> 01:00:43,090
going to allow you to iteratively look
at every pixel, every dot in the image.

1204
01:00:43,090 --> 01:00:43,790
What's a pixel?

1205
01:00:43,790 --> 01:00:46,250
Well, to be clear, if we look
at the original and zoom in,

1206
01:00:46,250 --> 01:00:49,060
if you really put your eyes
to the computer screen, that's

1207
01:00:49,060 --> 01:00:53,510
just a whole bunch of dots, several
thousand dots packed together there.

1208
01:00:53,510 --> 01:00:56,180
And so what are you about to do?

1209
01:00:56,180 --> 01:00:59,240
Each one of those dots,
a final definition,

1210
01:00:59,240 --> 01:01:06,350
is the result of what's generally
called RGB, red, green, blue, which

1211
01:01:06,350 --> 01:01:09,940
again, can be combined to
give you any number of colors.

1212
01:01:09,940 --> 01:01:13,200
In fact, if you remember
from many, many years ago,

1213
01:01:13,200 --> 01:01:17,320
projector screens like these things
used to have not one lens but three.

1214
01:01:17,320 --> 01:01:20,700
One of them spit out red light, one of
them spit out green light, one of them

1215
01:01:20,700 --> 01:01:21,600
spit out blue light.

1216
01:01:21,600 --> 01:01:24,391
And if you were in a middle school
like I was where they were never

1217
01:01:24,391 --> 01:01:27,000
properly aligned, you were
always watching history movies

1218
01:01:27,000 --> 01:01:29,770
that were slightly distorted,
because the three colors were not

1219
01:01:29,770 --> 01:01:30,970
combining properly.

1220
01:01:30,970 --> 01:01:36,330
But it turns out that each of
these values red, green, and blue,

1221
01:01:36,330 --> 01:01:37,980
can have a number associated with them.

1222
01:01:37,980 --> 01:01:42,500
For instance, 0 for red means no
red, 0 for green means no green,

1223
01:01:42,500 --> 01:01:45,120
and 0 for blue means no blue.

1224
01:01:45,120 --> 01:01:49,403
So if you have no red, no green,
and no blue, what color do you have?

1225
01:01:49,403 --> 01:01:51,009
AUDIENCE: [INAUDIBLE]

1226
01:01:51,009 --> 01:01:52,800
DAVID MALAN: You would
hope so, it's white.

1227
01:01:52,800 --> 01:01:55,333
Unfortunately, this operates-- sorry?

1228
01:01:55,333 --> 01:01:56,380
AUDIENCE: [INAUDIBLE]

1229
01:01:56,380 --> 01:01:58,630
DAVID MALAN: So you actually
have black, in this case.

1230
01:01:58,630 --> 01:02:01,530
So if you have none of these
colors turned on, you have black.

1231
01:02:01,530 --> 01:02:06,510
However, if you have, let's say a lot
of them, like a lot of red, 255 of it,

1232
01:02:06,510 --> 01:02:10,340
a lot of green, and a lot
of blue, that is white.

1233
01:02:10,340 --> 01:02:12,230
So these are the two extremes.

1234
01:02:12,230 --> 01:02:17,460
So by this logic, if I have a lot
of red and no green and no blue,

1235
01:02:17,460 --> 01:02:18,485
what color is that?

1236
01:02:18,485 --> 01:02:19,360
AUDIENCE: [INAUDIBLE]

1237
01:02:19,360 --> 01:02:20,610
DAVID MALAN: Right, obviously.

1238
01:02:20,610 --> 01:02:25,940
And then no red, lot of
green, no blue, and then

1239
01:02:25,940 --> 01:02:29,590
if you have-- well, we'll just finish
it, just because, but this, of course,

1240
01:02:29,590 --> 01:02:31,350
now, is blue.

1241
01:02:31,350 --> 01:02:33,030
And now you can combine these colors.

1242
01:02:33,030 --> 01:02:36,430
Now as an aside, if any of you have
ever done some actual website design,

1243
01:02:36,430 --> 01:02:38,360
you might actually
see symbols like this.

1244
01:02:38,360 --> 01:02:42,030
FFF-- and actually, it's
probably not even that.

1245
01:02:42,030 --> 01:02:44,380
It's FFFFFF.

1246
01:02:44,380 --> 01:02:48,970
Anyone ever seen F's and E's
and A through-- so it turns out,

1247
01:02:48,970 --> 01:02:52,970
we talked yesterday about decimal,
and today, kind of about decimal.

1248
01:02:52,970 --> 01:02:54,570
Today we talked about binary.

1249
01:02:54,570 --> 01:02:59,010
Turns out, hexadecimal is a very
common base system to use in computing.

1250
01:02:59,010 --> 01:03:04,960
Binary is two, decimal is 10, hex is 16.

1251
01:03:04,960 --> 01:03:08,640
And it turns out, how do
you count in hexadecimal?

1252
01:03:08,640 --> 01:03:11,620
Zero, one, two, three, four,
five, six, seven, eight,

1253
01:03:11,620 --> 01:03:14,730
nine, what do you use after nine?

1254
01:03:14,730 --> 01:03:16,600
What's the next number?

1255
01:03:16,600 --> 01:03:19,180
We already used zero.

1256
01:03:19,180 --> 01:03:20,570
I need 16 of these.

1257
01:03:20,570 --> 01:03:25,770
Zero, one, two, three, four,
five, six, seven, eight, nine,

1258
01:03:25,770 --> 01:03:27,520
you need some arbitrary convention.

1259
01:03:27,520 --> 01:03:30,810
And what mankind decided some time
ago that after nine comes the letter

1260
01:03:30,810 --> 01:03:34,450
A and then B and then C. So the
way you count in hexadecimal

1261
01:03:34,450 --> 01:03:37,040
is zero, one, two, three, four,
five, six, seven, eight, nine,

1262
01:03:37,040 --> 01:03:42,880
A, B, C, D, E, F, and that will count
you all the way, it turns out, to 15.

1263
01:03:42,880 --> 01:03:47,850
So zero to 15 is zero through
F. Now why is that significant?

1264
01:03:47,850 --> 01:03:51,570
Well, when you have two F's,
that's how you express 255.

1265
01:03:51,570 --> 01:03:54,350
So long story short, in
the world of Photoshop,

1266
01:03:54,350 --> 01:03:57,299
that graphic design software,
in the world of web development,

1267
01:03:57,299 --> 01:03:59,590
where you have lots of colors,
of course, to play with,

1268
01:03:59,590 --> 01:04:02,350
often programmers will
express those in hexadecimal,

1269
01:04:02,350 --> 01:04:05,260
just because it tends
to be a little simpler.

1270
01:04:05,260 --> 01:04:07,850
Even though at first glance
it's much more complex.

1271
01:04:07,850 --> 01:04:11,590
So in any case, this is important
because Nick at Stanford

1272
01:04:11,590 --> 01:04:15,100
has given us six pieces of functionality
that you, the budding programmers,

1273
01:04:15,100 --> 01:04:17,060
will now have the ability to use.

1274
01:04:17,060 --> 01:04:19,960
Built into this web
page is six functions,

1275
01:04:19,960 --> 01:04:21,820
six procedures that Nick wrote.

1276
01:04:21,820 --> 01:04:26,800
Three of them will get you a number,
a red, a green, or a blue value.

1277
01:04:26,800 --> 01:04:28,787
Three of them will set that value.

1278
01:04:28,787 --> 01:04:30,620
And these underscores
are just placeholders,

1279
01:04:30,620 --> 01:04:32,600
so you need to know what those are.

1280
01:04:32,600 --> 01:04:36,240
So with these three functions,
the first of these things

1281
01:04:36,240 --> 01:04:39,190
is going to be an x-coordinate,
and the second of these things

1282
01:04:39,190 --> 01:04:40,700
is going to be a y-coordinate.

1283
01:04:40,700 --> 01:04:44,650
In other words, which dot, which
pixel do you want to get the green of,

1284
01:04:44,650 --> 01:04:46,480
get the blue of, get the red of.

1285
01:04:46,480 --> 01:04:51,440
And then here, this is going to be
x, this is going to be a y value,

1286
01:04:51,440 --> 01:04:55,379
and this is going to be a number.

1287
01:04:55,379 --> 01:04:57,170
So let's do the first
line of this together

1288
01:04:57,170 --> 01:05:00,220
and then I'll leave it to you
to try to deduce the rest.

1289
01:05:00,220 --> 01:05:03,100
So per the instructions
on this page, we need

1290
01:05:03,100 --> 01:05:08,960
to increase the red by a factor of
10, and we need to remove the green

1291
01:05:08,960 --> 01:05:09,930
and remove the blue.

1292
01:05:09,930 --> 01:05:12,410
Let's start with the latter scenarios.

1293
01:05:12,410 --> 01:05:17,760
So if I want to, and I'm going
to indent by using some spaces,

1294
01:05:17,760 --> 01:05:22,291
if I want to set the red,
the green, or the blue value,

1295
01:05:22,291 --> 01:05:23,540
I'm going to do the following.

1296
01:05:23,540 --> 01:05:31,280
Image, im.setBlue, and then
based on my instructions here,

1297
01:05:31,280 --> 01:05:36,700
what three things should I
type inside of parentheses now?

1298
01:05:36,700 --> 01:05:41,960
I need the x value, the
y value, and what number

1299
01:05:41,960 --> 01:05:48,770
should I put here if I want to get rid
of the blue, based on this story here?

1300
01:05:48,770 --> 01:05:49,630
Just zero.

1301
01:05:49,630 --> 01:05:52,420
If I want no blue, I'm just
going to change it to zero.

1302
01:05:52,420 --> 01:05:54,465
Now let's just recap what this is doing.

1303
01:05:54,465 --> 01:05:56,970


1304
01:05:56,970 --> 01:06:01,170
I have here on these top
second and third lines,

1305
01:06:01,170 --> 01:06:04,080
I claimed two loops,
nested loops, if you

1306
01:06:04,080 --> 01:06:08,360
will, that are going to have the effect
of progressing from left to right,

1307
01:06:08,360 --> 01:06:11,590
top to bottom over all of the x
values and all of the y values.

1308
01:06:11,590 --> 01:06:15,167
Because again, a picture is
just a grid of rows and columns.

1309
01:06:15,167 --> 01:06:17,000
So this is going to get
rid of all the blue.

1310
01:06:17,000 --> 01:06:18,627
Let me leave in the next line to you.

1311
01:06:18,627 --> 01:06:20,043
How do I get rid of all the green?

1312
01:06:20,043 --> 01:06:23,747


1313
01:06:23,747 --> 01:06:25,140
AUDIENCE: [INAUDIBLE]

1314
01:06:25,140 --> 01:06:26,151
DAVID MALAN: Nice.

1315
01:06:26,151 --> 01:06:28,260
AUDIENCE: [INAUDIBLE]

1316
01:06:28,260 --> 01:06:30,850
DAVID MALAN: Nice.

1317
01:06:30,850 --> 01:06:36,120
And I'm going to zoom out, and just take
care of that you've not done any typos.

1318
01:06:36,120 --> 01:06:39,390
And if you're comfortable
with what you've done,

1319
01:06:39,390 --> 01:06:42,936
go ahead and click the button
Run/Save and see what you get.

1320
01:06:42,936 --> 01:06:46,982


1321
01:06:46,982 --> 01:06:48,690
And again, we've made
just three changes.

1322
01:06:48,690 --> 01:06:52,130
We deleted that first
comment and replaced it

1323
01:06:52,130 --> 01:06:53,575
with these two lines of code.

1324
01:06:53,575 --> 01:06:55,742


1325
01:06:55,742 --> 01:06:58,450
And it's OK if you need to hit
the Run/Save button a couple times

1326
01:06:58,450 --> 01:07:01,190
to fix something.

1327
01:07:01,190 --> 01:07:03,610
And let me also zoom in on my
code so you can transcribe.

1328
01:07:03,610 --> 01:07:04,110
Good.

1329
01:07:04,110 --> 01:07:08,720
So I see Andrew has what
seems to be a mistake.

1330
01:07:08,720 --> 01:07:11,110
He's just got a big black
rectangle on his screen.

1331
01:07:11,110 --> 01:07:13,120
Does anyone else have
a big black rectangle?

1332
01:07:13,120 --> 01:07:13,390
AUDIENCE: Yes.

1333
01:07:13,390 --> 01:07:14,360
DAVID MALAN: Big black rectangle?

1334
01:07:14,360 --> 01:07:16,068
OK, so let's think
about what this means.

1335
01:07:16,068 --> 01:07:20,560
We said that zero, zero, zero,
so no green, no red, no blue,

1336
01:07:20,560 --> 01:07:21,980
is going to give you black.

1337
01:07:21,980 --> 01:07:24,467
And it turns out that
most of our laptops

1338
01:07:24,467 --> 01:07:25,800
just don't have enough fidelity.

1339
01:07:25,800 --> 01:07:27,750
You can't quite tell there
is actually something there.

1340
01:07:27,750 --> 01:07:30,340
And if you kind of maybe lean
your screen forward and back,

1341
01:07:30,340 --> 01:07:32,850
maybe do you see a
little something there?

1342
01:07:32,850 --> 01:07:34,820
Maybe, kind of, sort of?

1343
01:07:34,820 --> 01:07:36,640
It's not perfectly black.

1344
01:07:36,640 --> 01:07:38,050
AUDIENCE: [INAUDIBLE]

1345
01:07:38,050 --> 01:07:39,510
DAVID MALAN: Spoiler!

1346
01:07:39,510 --> 01:07:42,610
There is some red there, but
remember from the specifications

1347
01:07:42,610 --> 01:07:44,940
of the problem, Nick toned it down.

1348
01:07:44,940 --> 01:07:47,860
He desaturated it somewhat,
but not all the way to zero.

1349
01:07:47,860 --> 01:07:51,670
So if we want to magnify the amount
of red, let me propose this trick.

1350
01:07:51,670 --> 01:07:53,750
Let me zoom in on my screen.

1351
01:07:53,750 --> 01:07:58,678
And let me go ahead and say
amount equals im.getRed(x, y).

1352
01:07:58,678 --> 01:08:02,440


1353
01:08:02,440 --> 01:08:05,790
This line of code is giving me
something called a variable.

1354
01:08:05,790 --> 01:08:09,643
I have arbitrarily, but, arguably,
reasonably called my variable what,

1355
01:08:09,643 --> 01:08:10,143
apparently?

1356
01:08:10,143 --> 01:08:13,530


1357
01:08:13,530 --> 01:08:14,340
Amount.

1358
01:08:14,340 --> 01:08:14,980
Just amount.

1359
01:08:14,980 --> 01:08:16,960
I could've called it
anything I want, but I'm

1360
01:08:16,960 --> 01:08:19,490
using this other function
that I described earlier

1361
01:08:19,490 --> 01:08:25,359
to get the amount of red at x comma y.

1362
01:08:25,359 --> 01:08:27,520
Why did I do that?

1363
01:08:27,520 --> 01:08:30,004
What do you want to do here?

1364
01:08:30,004 --> 01:08:32,910


1365
01:08:32,910 --> 01:08:33,619
You need to add--

1366
01:08:33,619 --> 01:08:34,493
AUDIENCE: [INAUDIBLE]

1367
01:08:34,493 --> 01:08:36,279
DAVID MALAN: Yes, maybe
multiply it by 10.

1368
01:08:36,279 --> 01:08:38,862
And if you don't know this, I'm
going to go ahead and do this.

1369
01:08:38,862 --> 01:08:42,060
I'm going to go ahead and
say, I want the amount of red

1370
01:08:42,060 --> 01:08:46,550
I want to be whatever
is at the red, times 10,

1371
01:08:46,550 --> 01:08:50,330
and the star, the asterisk on your
keyboard is the-- don't use x.

1372
01:08:50,330 --> 01:08:51,569
Use the star.

1373
01:08:51,569 --> 01:08:55,350
That's how you multiply things
in most programming languages.

1374
01:08:55,350 --> 01:08:59,790
So according to Kareem's intuition,
stored in this variable called amount,

1375
01:08:59,790 --> 01:09:03,649
is how much red I want at location xy.

1376
01:09:03,649 --> 01:09:11,500
How, now, do I make that
pixel have that number?

1377
01:09:11,500 --> 01:09:12,859
You've already done this before.

1378
01:09:12,859 --> 01:09:17,666
You set the green and the
blue to no value, to zero.

1379
01:09:17,666 --> 01:09:18,540
AUDIENCE: [INAUDIBLE]

1380
01:09:18,540 --> 01:09:20,040
DAVID MALAN: Yes, well
you don't want it to 10.

1381
01:09:20,040 --> 01:09:21,460
You already did the math here.

1382
01:09:21,460 --> 01:09:24,779
So we are getting the value of red,
which is a low number, presumably.

1383
01:09:24,779 --> 01:09:26,180
We're multiplying up by 10.

1384
01:09:26,180 --> 01:09:29,139
What you want to do with
the variable amount now?

1385
01:09:29,139 --> 01:09:30,130
AUDIENCE: [INAUDIBLE]

1386
01:09:30,130 --> 01:09:30,880
DAVID MALAN: Nice.

1387
01:09:30,880 --> 01:09:34,616
So im.set-- what?

1388
01:09:34,616 --> 01:09:35,640
AUDIENCE: setRed.

1389
01:09:35,640 --> 01:09:39,760
DAVID MALAN: setRed, at location xy.

1390
01:09:39,760 --> 01:09:40,260
Yeah.

1391
01:09:40,260 --> 01:09:41,200
And just amount.

1392
01:09:41,200 --> 01:09:44,257
In other words, a variable
is a temporary placeholder

1393
01:09:44,257 --> 01:09:45,840
that you can put anything you want in.

1394
01:09:45,840 --> 01:09:48,680
We happen to be putting a
number in it, at the moment.

1395
01:09:48,680 --> 01:09:51,569
We've multiplied it by
10 to make it bigger.

1396
01:09:51,569 --> 01:09:56,480
And now I'm substituting that variable
as that third argument, or input

1397
01:09:56,480 --> 01:09:57,810
to set red.

1398
01:09:57,810 --> 01:10:00,440
And so that once you
finish that, and take note

1399
01:10:00,440 --> 01:10:02,330
of the semi-colons and the parentheses.

1400
01:10:02,330 --> 01:10:06,290
Go ahead and click
run/save again, and you

1401
01:10:06,290 --> 01:10:10,690
should see, magically, what was actually
there. [? Arwa, ?] what's there?

1402
01:10:10,690 --> 01:10:16,412
The Eiffel Tower in full-fledged
red, not quite dark.

1403
01:10:16,412 --> 01:10:17,870
it should be more obvious now, yes?

1404
01:10:17,870 --> 01:10:18,840
OK.

1405
01:10:18,840 --> 01:10:20,215
And Andrew, no more black box?

1406
01:10:20,215 --> 01:10:21,090
AUDIENCE: [INAUDIBLE]

1407
01:10:21,090 --> 01:10:22,180
DAVID MALAN: All right.

1408
01:10:22,180 --> 01:10:23,610
So I'll keep this on the screen.

1409
01:10:23,610 --> 01:10:27,010
If you want to play with this
later, I'll recreate this for you.

1410
01:10:27,010 --> 01:10:29,140
But this code here did exactly that.

1411
01:10:29,140 --> 01:10:31,460
Why don't we do one other.

1412
01:10:31,460 --> 01:10:33,880
Let me scroll down slightly.

1413
01:10:33,880 --> 01:10:36,760
So in this case, the projector
doesn't really do it justice.

1414
01:10:36,760 --> 01:10:40,486
But on your screens, you probably
have a very red and very black box.

1415
01:10:40,486 --> 01:10:42,610
This, too, is a puzzle that
shows something famous.

1416
01:10:42,610 --> 01:10:44,193
However, the image has been distorted.

1417
01:10:44,193 --> 01:10:47,740
The true image, this time, is
in the blue and green values.

1418
01:10:47,740 --> 01:10:51,820
However, they've all been divided
by 20 so the values are very small.

1419
01:10:51,820 --> 01:10:54,660
The red values are just
random numbers, noise.

1420
01:10:54,660 --> 01:10:57,190
Undo these distortions
to reveal the true image.

1421
01:10:57,190 --> 01:10:59,200
So Nick then tells you what to do.

1422
01:10:59,200 --> 01:11:04,290
Set the red values to zero, and
then don't spoil what it is.

1423
01:11:04,290 --> 01:11:07,110
Then multiply the blue
and green values by 20.

1424
01:11:07,110 --> 01:11:09,820
So it's almost the
same program as before,

1425
01:11:09,820 --> 01:11:11,380
but you're reversing the process.

1426
01:11:11,380 --> 01:11:13,780
And I will put my code from
before on the screen in case

1427
01:11:13,780 --> 01:11:16,650
you want to refer back to it
or play further with that one.

1428
01:11:16,650 --> 01:11:18,100
Let me zoom in on that.

1429
01:11:18,100 --> 01:11:21,450
But solve copper image
puzzle, number two.

1430
01:11:21,450 --> 01:11:37,623


1431
01:11:37,623 --> 01:11:40,580
AUDIENCE: [INAUDIBLE]

1432
01:11:40,580 --> 01:11:44,010
DAVID MALAN: OK, so this one I'm
not going to give as many hints.

1433
01:11:44,010 --> 01:11:47,220
So I would-- oh, let's
see, you have a typo here.

1434
01:11:47,220 --> 01:11:49,621
So remember, this here
actually needs to go there.

1435
01:11:49,621 --> 01:11:52,870
So what I would propose, if you want to
focus on this one, there's the answer.

1436
01:11:52,870 --> 01:11:57,060
If you want to transcribe that, that
should get the first one working.

1437
01:11:57,060 --> 01:11:59,910
And then you can use that as
inspiration for the second one.

1438
01:11:59,910 --> 01:12:02,230
Nice.

1439
01:12:02,230 --> 01:12:02,730
Good.

1440
01:12:02,730 --> 01:12:05,430


1441
01:12:05,430 --> 01:12:08,180
And for the curious,
this is a simple example

1442
01:12:08,180 --> 01:12:11,080
of a science or an art
called steganography,

1443
01:12:11,080 --> 01:12:14,100
the art of hiding information in images.

1444
01:12:14,100 --> 01:12:16,890
Typically, images might be
watermarked very blatantly

1445
01:12:16,890 --> 01:12:19,500
with a logo in the bottom
corner, but clearly, you

1446
01:12:19,500 --> 01:12:22,070
can be much more sophisticated
about it and actually

1447
01:12:22,070 --> 01:12:25,050
hide other images in the Images
somehow with this technique.

1448
01:12:25,050 --> 01:12:59,890


1449
01:12:59,890 --> 01:13:05,770
Take another 30 seconds, and then we'll
at least announce what you should see.

1450
01:13:05,770 --> 01:13:08,330
And I'll leave the third
one as an at-home exercise,

1451
01:13:08,330 --> 01:13:11,353
if you'd like more of a
challenge this weekend.

1452
01:13:11,353 --> 01:13:18,240


1453
01:13:18,240 --> 01:13:20,390
And I think Andrew might
have gotten it first.

1454
01:13:20,390 --> 01:13:22,645
What is the second image, Andrew?

1455
01:13:22,645 --> 01:13:23,920
AUDIENCE: Statue of Liberty.

1456
01:13:23,920 --> 01:13:28,500
DAVID MALAN: Statue of Liberty
will be the answer this time.

1457
01:13:28,500 --> 01:13:31,140
So again, just some simple
examples, the goal of which

1458
01:13:31,140 --> 01:13:35,040
is to give you a sense of how
we've translated pictorial Scratch

1459
01:13:35,040 --> 01:13:40,410
blocks to more annoying and more
complicated code, but all of the ideas

1460
01:13:40,410 --> 01:13:42,980
are still exactly the same,
albeit with the introduction

1461
01:13:42,980 --> 01:13:48,380
now of the notion of a variable, being
able to store something temporarily.

1462
01:13:48,380 --> 01:13:51,750
Let's do one more hands-on,
just to now connect the dots

1463
01:13:51,750 --> 01:13:53,880
to something a little more real-world.

1464
01:13:53,880 --> 01:13:56,610
When you're ready, if you could
go to this URL on the screen.

1465
01:13:56,610 --> 01:14:00,610
That's also in your copy of the
slides, developers.google.com/maps.

1466
01:14:00,610 --> 01:14:03,660
Let's actually do something
real, so to speak, on the web

1467
01:14:03,660 --> 01:14:07,600
using the Google Maps API, or
application programming interface,

1468
01:14:07,600 --> 01:14:08,940
in the following way.

1469
01:14:08,940 --> 01:14:12,341
Google, like many companies,
provides a lot of free functionality

1470
01:14:12,341 --> 01:14:14,840
that you can use to build your
own interesting applications.

1471
01:14:14,840 --> 01:14:18,890
In fact, if you've ever used
Uber to get a cab or a car,

1472
01:14:18,890 --> 01:14:21,640
you probably know that Uber has
a map and it shows cars on it.

1473
01:14:21,640 --> 01:14:24,870
That is, as best as I can
tell, Google Maps API.

1474
01:14:24,870 --> 01:14:28,884
They are actually using Google's maps,
but Uber is not a mapping company,

1475
01:14:28,884 --> 01:14:31,050
nor would that be a
particularly interesting problem

1476
01:14:31,050 --> 01:14:33,510
to solve on top of their
car service problem.

1477
01:14:33,510 --> 01:14:35,510
And so they're standing,
again, on the shoulders

1478
01:14:35,510 --> 01:14:37,520
of others, Google in this case.

1479
01:14:37,520 --> 01:14:42,850
So they use Google's maps but their own
car services and other such features.

1480
01:14:42,850 --> 01:14:47,770
So we're going to take advantage
of this to do the following.

1481
01:14:47,770 --> 01:14:50,230
And if I've gone too fast,
just call me over in a moment.

1482
01:14:50,230 --> 01:14:53,500
Happy to recap some of the image stuff.

1483
01:14:53,500 --> 01:14:56,290
You should see yourself
at a page like this.

1484
01:14:56,290 --> 01:14:58,230
So Google's nice, and
they're among the best

1485
01:14:58,230 --> 01:15:01,364
of providing not only APIs,
but free APIs that you

1486
01:15:01,364 --> 01:15:02,780
can play with or use commercially.

1487
01:15:02,780 --> 01:15:06,450
They do start charging you if your usage
is high, but I went ahead in advance

1488
01:15:06,450 --> 01:15:10,490
and signed us up for a free account
that, hopefully, 10 computers

1489
01:15:10,490 --> 01:15:12,480
won't disqualify us for suddenly.

1490
01:15:12,480 --> 01:15:14,320
So hopefully this
demonstration will work.

1491
01:15:14,320 --> 01:15:18,840
And notice that they have APIs for
Android, iOS, web, and web services,

1492
01:15:18,840 --> 01:15:19,620
whatever that is.

1493
01:15:19,620 --> 01:15:20,700
Let's focus on web.

1494
01:15:20,700 --> 01:15:26,560
So click the pink box, web, and that
will lead you, hopefully, to a page

1495
01:15:26,560 --> 01:15:27,630
here.

1496
01:15:27,630 --> 01:15:29,335
And they've got a whole bunch of APIs.

1497
01:15:29,335 --> 01:15:31,210
And it can be a little
overwhelming at first,

1498
01:15:31,210 --> 01:15:33,000
but I'll steer us through what we want.

1499
01:15:33,000 --> 01:15:38,500
At the top left is the Google Maps
JavaScript API, the JavaScript API.

1500
01:15:38,500 --> 01:15:40,380
So go ahead and click that one.

1501
01:15:40,380 --> 01:15:49,360
And that will lead you now to the
following page, demos and sample code.

1502
01:15:49,360 --> 01:15:51,190
Let me zoom out here.

1503
01:15:51,190 --> 01:15:56,300
And let me get us to-- scroll down
to where it says quick start steps.

1504
01:15:56,300 --> 01:15:57,970
Your screen should look like mine.

1505
01:15:57,970 --> 01:16:01,130
And there's two steps, get
a key and start developing.

1506
01:16:01,130 --> 01:16:04,190
I already did step one for
us, getting a so-called key.

1507
01:16:04,190 --> 01:16:05,320
And this is a common idea.

1508
01:16:05,320 --> 01:16:09,210
An API key is generally just
a big random number or string

1509
01:16:09,210 --> 01:16:11,130
that you are supposed
to paste into your code,

1510
01:16:11,130 --> 01:16:15,280
so that Google knows who you are when
you're using their service, their API.

1511
01:16:15,280 --> 01:16:17,370
Doesn't mean we're
being charged anything.

1512
01:16:17,370 --> 01:16:21,030
And now, click, instead of
one, click start developing.

1513
01:16:21,030 --> 01:16:25,990
If you could just wave me
over if not sure where we are.

1514
01:16:25,990 --> 01:16:28,040
So we'll just scratch the
surface, here but what

1515
01:16:28,040 --> 01:16:31,000
I thought would be compelling
is to actually have all of us,

1516
01:16:31,000 --> 01:16:34,240
using Cloud9 in one window and
this tutorial in another window,

1517
01:16:34,240 --> 01:16:37,120
lets actually get our own
application up and running

1518
01:16:37,120 --> 01:16:40,920
that embeds a custom Google
map in our own webpage,

1519
01:16:40,920 --> 01:16:43,010
and then adds one or two features.

1520
01:16:43,010 --> 01:16:45,520
But we'll just scratch the
surface of what we can do.

1521
01:16:45,520 --> 01:16:47,020
So just a quick sanity check.

1522
01:16:47,020 --> 01:16:49,740
Is everyone at this page,
Google Maps JavaScript API?

1523
01:16:49,740 --> 01:16:50,872
Should say getting started.

1524
01:16:50,872 --> 01:16:53,330
We're not going to go through
the whole thing by any means.

1525
01:16:53,330 --> 01:16:58,090
OK, in another tab, if you don't
have it open, do go into Cloud9

1526
01:16:58,090 --> 01:17:03,500
and get yourself to just
a new tab, ultimately.

1527
01:17:03,500 --> 01:17:11,070
So again, c9.io from yesterday,
c9.io, and just create a new file.

1528
01:17:11,070 --> 01:17:13,500
And go ahead and call
it whatever you'd like.

1529
01:17:13,500 --> 01:17:16,495
I called mine map.html.

1530
01:17:16,495 --> 01:17:17,870
Call it anything ending in .html.

1531
01:17:17,870 --> 01:17:23,930


1532
01:17:23,930 --> 01:17:26,580
And you should be roughly
where I am in this process

1533
01:17:26,580 --> 01:17:31,470
with just a blinking prompt in an empty
tab called something like map.html.

1534
01:17:31,470 --> 01:17:35,808


1535
01:17:35,808 --> 01:17:38,148
Or file, new file this time.

1536
01:17:38,148 --> 01:17:41,960


1537
01:17:41,960 --> 01:17:48,000
And now, over on the
Google Maps JavaScript API,

1538
01:17:48,000 --> 01:17:50,010
we'll skip reading
through all of this text.

1539
01:17:50,010 --> 01:17:53,760
But notice that hello world is
indeed everywhere, you see it now.

1540
01:17:53,760 --> 01:17:58,020
Hello world has this big colorful
example of a whole bunch of HTML.

1541
01:17:58,020 --> 01:18:03,590
Go ahead and copy and paste only that
HTML, so from the doc type at the top

1542
01:18:03,590 --> 01:18:08,810
all the way to the close HTML tag, go
ahead and copy all of that-- again,

1543
01:18:08,810 --> 01:18:14,430
that's under the hello world example--
and paste that into your Cloud9 tab,

1544
01:18:14,430 --> 01:18:17,996
so that now your screen
should look roughly like mine.

1545
01:18:17,996 --> 01:18:22,280


1546
01:18:22,280 --> 01:18:24,520
And you can save it, but
don't load it just yet.

1547
01:18:24,520 --> 01:18:26,290
Let's first look at
the code and see if we

1548
01:18:26,290 --> 01:18:29,110
can't infer or learn
from what it is Google

1549
01:18:29,110 --> 01:18:30,860
has had us blindly copy and paste.

1550
01:18:30,860 --> 01:18:33,334
They just want to help,
literally, get us started,

1551
01:18:33,334 --> 01:18:35,500
but there's not that much
complexity actually there.

1552
01:18:35,500 --> 01:18:40,100


1553
01:18:40,100 --> 01:18:42,210
Any questions just yet?

1554
01:18:42,210 --> 01:18:43,790
We're safe to forge ahead?

1555
01:18:43,790 --> 01:18:44,330
OK.

1556
01:18:44,330 --> 01:18:46,800
So quickly, let's just do
some quick sanity checks.

1557
01:18:46,800 --> 01:18:48,800
Line one of what I
see, and hopefully, you

1558
01:18:48,800 --> 01:18:51,710
see, what does that mean, doctype HTML?

1559
01:18:51,710 --> 01:18:52,385
Kareem, recall?

1560
01:18:52,385 --> 01:18:53,260
AUDIENCE: [INAUDIBLE]

1561
01:18:53,260 --> 01:18:53,968
DAVID MALAN: Yes.

1562
01:18:53,968 --> 01:18:54,870
Here comes HTML 5.

1563
01:18:54,870 --> 01:18:57,950
Meanwhile, line two on the
screen here means hey browser,

1564
01:18:57,950 --> 01:18:59,482
here comes the actual HTML.

1565
01:18:59,482 --> 01:19:01,440
Line three is hey browser,
here comes the head.

1566
01:19:01,440 --> 01:19:04,260
Line four is, of course, hey
browser, here comes the title.

1567
01:19:04,260 --> 01:19:07,780
What does line five do?

1568
01:19:07,780 --> 01:19:09,930
Actually, this doesn't
really do anything for us.

1569
01:19:09,930 --> 01:19:13,340
In this case, it just resizes
the page to a default. Line six,

1570
01:19:13,340 --> 01:19:16,140
we have not talked about, but it
specifies the character encoding.

1571
01:19:16,140 --> 01:19:19,181
There's different ways to encode files,
especially for foreign languages.

1572
01:19:19,181 --> 01:19:21,100
UTF-8 just tends to be the default.

1573
01:19:21,100 --> 01:19:26,580
So now we'll see in line
seven through 16, some CSS.

1574
01:19:26,580 --> 01:19:29,260
And even though we've not seen
all of these things before,

1575
01:19:29,260 --> 01:19:30,810
we can kind of infer.

1576
01:19:30,810 --> 01:19:37,075
So line eight means, hey browser, apply
all of the following to which two tags,

1577
01:19:37,075 --> 01:19:37,575
apparently?

1578
01:19:37,575 --> 01:19:40,650


1579
01:19:40,650 --> 01:19:41,701
The HTML and body text.

1580
01:19:41,701 --> 01:19:43,200
So the comma is the new thing there.

1581
01:19:43,200 --> 01:19:46,140
And that's just a way of
specifying multiple tags at once.

1582
01:19:46,140 --> 01:19:47,640
Then we've got the curly braces.

1583
01:19:47,640 --> 01:19:51,170
So apparently, this tells the browser,
make the height of the page 100%.

1584
01:19:51,170 --> 01:19:54,170
So even if there's very little
content, make the whole page,

1585
01:19:54,170 --> 01:19:55,530
make the thing fill the page.

1586
01:19:55,530 --> 01:19:57,524
Make the map ultimately fill the page.

1587
01:19:57,524 --> 01:19:58,690
Margin, what does that mean?

1588
01:19:58,690 --> 01:20:01,559
That's usually like arbitrary
white space around the edges

1589
01:20:01,559 --> 01:20:04,350
that some browser designer just
decided should be there, because it

1590
01:20:04,350 --> 01:20:05,540
kind of makes things look cleaner.

1591
01:20:05,540 --> 01:20:06,498
But we don't want that.

1592
01:20:06,498 --> 01:20:08,710
We want the map going
all the way to the edges.

1593
01:20:08,710 --> 01:20:10,930
Padding, similar in spirit to margins.

1594
01:20:10,930 --> 01:20:14,980
Margins mean outside, padding means
inside, but it's the same kind of deal.

1595
01:20:14,980 --> 01:20:17,520
It's a little bit of a buffer
between you and the edges.

1596
01:20:17,520 --> 01:20:21,170
And then line 13 is a good
chance for a quick review.

1597
01:20:21,170 --> 01:20:26,440
What does sharp sign map
mean, or hashtag map mean?

1598
01:20:26,440 --> 01:20:29,650
What does that refer to, in principle?

1599
01:20:29,650 --> 01:20:31,485
AUDIENCE: [INAUDIBLE]

1600
01:20:31,485 --> 01:20:32,360
DAVID MALAN: Exactly.

1601
01:20:32,360 --> 01:20:36,900
This property, this CSS property
applies to just one thing, the HTML tag

1602
01:20:36,900 --> 01:20:41,180
that has an ID of quote, unquote "map".

1603
01:20:41,180 --> 01:20:44,460
And now let's fast forward, scroll
down to the bottom of the file, which

1604
01:20:44,460 --> 01:20:49,860
isn't too far away, and notice on line
19, if you paste it exactly like I did,

1605
01:20:49,860 --> 01:20:53,405
line 19 has just a div, which is a
division of the page, which yesterday I

1606
01:20:53,405 --> 01:20:54,820
called a rectangular region.

1607
01:20:54,820 --> 01:20:55,820
It's got nothing in it.

1608
01:20:55,820 --> 01:20:57,550
It's an open tag, close tag.

1609
01:20:57,550 --> 01:20:59,490
But it does have a unique ID.

1610
01:20:59,490 --> 01:21:02,090
So what seems to be
happening here is Google

1611
01:21:02,090 --> 01:21:05,880
is readying our web page to
have a complete 100% height,

1612
01:21:05,880 --> 01:21:09,680
and no padding, no margins, because
what we're going to put inside

1613
01:21:09,680 --> 01:21:13,647
of this div, whose unique ID is
map, is an actual embedded map.

1614
01:21:13,647 --> 01:21:15,480
And we want it to fill
the page and not just

1615
01:21:15,480 --> 01:21:17,560
be some small rectangle in the middle.

1616
01:21:17,560 --> 01:21:24,220
So line 14 similarly emphasizes, the
map itself should have a height of 100%.

1617
01:21:24,220 --> 01:21:29,220
So now notice between lines 20
and 28, this is JavaScript code.

1618
01:21:29,220 --> 01:21:33,020
And this is, even though it's
syntactically a little strange,

1619
01:21:33,020 --> 01:21:34,730
there's not all that much going on here.

1620
01:21:34,730 --> 01:21:39,310
In line 21, this is declaring
something called a variable.

1621
01:21:39,310 --> 01:21:42,030
Instead of calling it
amounts, like we did before,

1622
01:21:42,030 --> 01:21:44,500
we're more precisely saying
var, which just means variable.

1623
01:21:44,500 --> 01:21:46,520
We could have used that in
Nick's code, but he didn't, so I

1624
01:21:46,520 --> 01:21:48,190
didn't bother doing it either.

1625
01:21:48,190 --> 01:21:50,240
It's a variable called
map, and then there's

1626
01:21:50,240 --> 01:21:53,360
a function that's
apparently called initMap.

1627
01:21:53,360 --> 01:21:55,780
So this is like our own custom
puzzle piece in Scratch.

1628
01:21:55,780 --> 01:21:58,830
We've created a piece of
functionality called initMap,

1629
01:21:58,830 --> 01:22:00,980
and you can kind of infer
what's going on here.

1630
01:22:00,980 --> 01:22:02,930
On the left hand side,
we've got a variable,

1631
01:22:02,930 --> 01:22:06,000
so we're going to put the following
thing inside that variable,

1632
01:22:06,000 --> 01:22:07,362
from right to left.

1633
01:22:07,362 --> 01:22:11,940
The right hand side says, hey
browser, give me a new Google map.

1634
01:22:11,940 --> 01:22:16,490
And google.maps.map is just a funky way
of specifying that this functionality

1635
01:22:16,490 --> 01:22:19,790
belongs to Google Maps.

1636
01:22:19,790 --> 01:22:23,010
After the parentheses, we've seen
this before, hey browser, get

1637
01:22:23,010 --> 01:22:29,210
me the elements in the page, the
tag in the page whose unique ID is--

1638
01:22:29,210 --> 01:22:30,710
AUDIENCE: [INAUDIBLE]

1639
01:22:30,710 --> 01:22:31,790
DAVID MALAN: --map.

1640
01:22:31,790 --> 01:22:35,770
And what is going on, well,
this line together, line 23,

1641
01:22:35,770 --> 01:22:38,630
is essentially saying,
hey browser, go get me

1642
01:22:38,630 --> 01:22:42,800
that empty div on the page
whose unique ID is map,

1643
01:22:42,800 --> 01:22:45,600
because I want to insert
into it-- inject into it,

1644
01:22:45,600 --> 01:22:49,520
if you will-- a whole bunch of content
that happens to be coming from the web,

1645
01:22:49,520 --> 01:22:50,427
subsequently.

1646
01:22:50,427 --> 01:22:52,010
And Google's doing all of that for us.

1647
01:22:52,010 --> 01:22:55,350
So again, at the very end of the day,
we have this example of abstraction.

1648
01:22:55,350 --> 01:22:58,610
I have no idea what a map is
or how to implement a map API.

1649
01:22:58,610 --> 01:22:59,460
We don't need to.

1650
01:22:59,460 --> 01:23:02,740
We just need to tell the map
where to put itself, and leave

1651
01:23:02,740 --> 01:23:04,880
those underlying implementation
details to Google.

1652
01:23:04,880 --> 01:23:08,190
Now there is apparently
two pieces of data

1653
01:23:08,190 --> 01:23:11,940
that this example is
providing to Google's API.

1654
01:23:11,940 --> 01:23:16,450
Apparently the center of the map,
and the zoom level, so to speak.

1655
01:23:16,450 --> 01:23:21,390
And does anyone recognize these
coordinates, latitude and longitude?

1656
01:23:21,390 --> 01:23:24,364
Probably not, but we can go back
to the tutorial, literally see.

1657
01:23:24,364 --> 01:23:25,780
But we'll see it in just a moment.

1658
01:23:25,780 --> 01:23:29,880
Zoom level is a value between, I don't
know, one in 13 or something like that.

1659
01:23:29,880 --> 01:23:32,880
It just has to do with how far you're
zoomed in or out, and that's it.

1660
01:23:32,880 --> 01:23:35,690
And now at the very end of
the page, notice line 29--

1661
01:23:35,690 --> 01:23:39,960
it's a little ugly because
it wraps-- this line of code

1662
01:23:39,960 --> 01:23:44,570
is what downloads to the
browser Google's actual API.

1663
01:23:44,570 --> 01:23:47,500
All of the code that Google's
engineers have written that implement

1664
01:23:47,500 --> 01:23:50,000
this whole feature of embeddable maps.

1665
01:23:50,000 --> 01:23:51,470
Now let's not change anything.

1666
01:23:51,470 --> 01:23:54,761
If you're following along, go ahead and
just save that file, if you indeed have

1667
01:23:54,761 --> 01:23:55,760
what I have.

1668
01:23:55,760 --> 01:23:57,370
Go to its URL.

1669
01:23:57,370 --> 01:23:59,820
You can click the Run button
up top and that will tell

1670
01:23:59,820 --> 01:24:03,050
you the URL of your web server again.

1671
01:24:03,050 --> 01:24:06,010
And it will lead you to a new tab.

1672
01:24:06,010 --> 01:24:11,910
If you click Open for
map.html, and odds are you're

1673
01:24:11,910 --> 01:24:15,520
going to get an alert,
an error message, yes?

1674
01:24:15,520 --> 01:24:18,570
Error message, error message?

1675
01:24:18,570 --> 01:24:21,170
So unfortunately, the error
message is not that enlightening

1676
01:24:21,170 --> 01:24:23,890
unless you actually open the
console, that special tab we

1677
01:24:23,890 --> 01:24:27,110
kept opening yesterday and
a little bit earlier today.

1678
01:24:27,110 --> 01:24:29,445
But I stumbled across
this earlier, so I already

1679
01:24:29,445 --> 01:24:30,820
figured out what the solution is.

1680
01:24:30,820 --> 01:24:34,440
In today's slides, or
rather, in Cloud9, notice

1681
01:24:34,440 --> 01:24:36,430
that we didn't do
something deliberately.

1682
01:24:36,430 --> 01:24:40,690
Notice that this script tag in
line 29, if you read through it,

1683
01:24:40,690 --> 01:24:44,440
it's like maps.googleapis.com/
something, something, something,

1684
01:24:44,440 --> 01:24:46,430
then notice someone,
one of the developers,

1685
01:24:46,430 --> 01:24:50,040
wrote in all capital
letters, your API key.

1686
01:24:50,040 --> 01:24:51,700
We need to paste something in there.

1687
01:24:51,700 --> 01:24:53,450
And this was the step
I did for us before,

1688
01:24:53,450 --> 01:24:57,190
and again they might blacklist
us if suddenly, 12 or more of us

1689
01:24:57,190 --> 01:24:59,470
start using the same key,
but let's see what happens.

1690
01:24:59,470 --> 01:25:03,030
So if you go into today's
slides, one slide later, there's

1691
01:25:03,030 --> 01:25:07,070
this very funky-looking string of text.

1692
01:25:07,070 --> 01:25:12,230
Go ahead and just copy that and
paste it where it says your API key.

1693
01:25:12,230 --> 01:25:15,120
That's the one I signed up for.

1694
01:25:15,120 --> 01:25:17,700
And definitely don't try
typing it out manually,

1695
01:25:17,700 --> 01:25:21,210
because it feels fraught
with typos, potentially.

1696
01:25:21,210 --> 01:25:23,260
So just copy and paste that.

1697
01:25:23,260 --> 01:25:26,090
And it's going to make the line
longer, but now, just to be clear,

1698
01:25:26,090 --> 01:25:29,540
it should look a little more
like this, where key equals not

1699
01:25:29,540 --> 01:25:32,200
capitalized yelling at you.

1700
01:25:32,200 --> 01:25:34,810
Save your page, go back
to the other tab, reload,

1701
01:25:34,810 --> 01:25:36,770
and hope to see a map of where?

1702
01:25:36,770 --> 01:25:37,790
AUDIENCE: Australia.

1703
01:25:37,790 --> 01:25:38,748
DAVID MALAN: Australia.

1704
01:25:38,748 --> 01:25:41,200
So apparently those are the
GPS coordinates of Australia.

1705
01:25:41,200 --> 01:25:44,491
And let me walk around for just a moment
and help anyone who's not quite there,

1706
01:25:44,491 --> 01:25:47,729
but let me propose, via Google, find
the GPS coordinates of your own hometown

1707
01:25:47,729 --> 01:25:48,770
or your own home country.

1708
01:25:48,770 --> 01:25:51,436
And probably Google can turn this
up, or Wikipedia can tell you.

1709
01:25:51,436 --> 01:25:54,410
But choose two different values
for latitude and longitude,

1710
01:25:54,410 --> 01:25:57,530
go back in and paste them, and
then reload the page after saving

1711
01:25:57,530 --> 01:26:00,718
and see if you can have a
map for your own hometown.

1712
01:26:00,718 --> 01:26:04,500


1713
01:26:04,500 --> 01:26:08,042
And when you're done with
that, the follow-up challenge--

1714
01:26:08,042 --> 01:26:11,250
and I'll give a little less direction,
deliberately, so that you deliberately

1715
01:26:11,250 --> 01:26:13,791
have to struggle for a couple
minutes with the documentation,

1716
01:26:13,791 --> 01:26:18,740
change the map to be not this
cartoonish default, but a satellite map.

1717
01:26:18,740 --> 01:26:24,600
So you actually see satellite
imagery instead of the pretty colors.

1718
01:26:24,600 --> 01:26:29,710
And the hint I'll give you
is change the map's type.

1719
01:26:29,710 --> 01:26:33,084
Go back to that getting
started page for inspiration.

1720
01:26:33,084 --> 01:26:40,599


1721
01:26:40,599 --> 01:26:42,390
As you may have gleaned,
if you're looking,

1722
01:26:42,390 --> 01:26:44,250
there are so many more
things you can do.

1723
01:26:44,250 --> 01:26:46,380
Some of you have already
changed the map type.

1724
01:26:46,380 --> 01:26:49,890
But you can do-- for instance, let me
go to something we did for the course

1725
01:26:49,890 --> 01:26:52,050
I teach-- maps.cs50.net.

1726
01:26:52,050 --> 01:26:53,470
One of our undergrads did this.

1727
01:26:53,470 --> 01:26:58,890
We center our map over Harvard Yard and
overlay all of these building names,

1728
01:26:58,890 --> 01:27:01,070
and we had him add this.

1729
01:27:01,070 --> 01:27:04,270
So if I want to search for,
for instance, Matthews Hall,

1730
01:27:04,270 --> 01:27:05,730
we have a little drop-down menu.

1731
01:27:05,730 --> 01:27:09,080
And I think he's using Bootstrap, the
library we discussed earlier for this.

1732
01:27:09,080 --> 01:27:12,190
And if you click on Matthews
Hall, it immediately

1733
01:27:12,190 --> 01:27:14,790
jumps the map to a certain
location, and it shows

1734
01:27:14,790 --> 01:27:16,440
you a picture in this little pop-up.

1735
01:27:16,440 --> 01:27:18,670
But even this little
pop-up, we didn't implement.

1736
01:27:18,670 --> 01:27:27,521
If I scroll down on our getting
started page and look for info windows,

1737
01:27:27,521 --> 01:27:29,770
you'll see that some of the
functionality you yourself

1738
01:27:29,770 --> 01:27:31,561
can add, albeit with
a bit more complexity,

1739
01:27:31,561 --> 01:27:33,970
is something called an info window.

1740
01:27:33,970 --> 01:27:37,190
And if I click an example
here, and this is what's fun,

1741
01:27:37,190 --> 01:27:40,530
you can do things like this,
clicking on a marker and then voila,

1742
01:27:40,530 --> 01:27:42,400
information pops up.

1743
01:27:42,400 --> 01:27:45,874
So we haven't quite introduced
enough features of JavaScript

1744
01:27:45,874 --> 01:27:49,040
to paint a picture of exactly how you
could wire all of this stuff together,

1745
01:27:49,040 --> 01:27:50,706
but we've kind of scratched the surface.

1746
01:27:50,706 --> 01:27:53,140
In fact, what I just did when
I clicked on that marker,

1747
01:27:53,140 --> 01:27:55,819
was triggering an event, a
so-called on click event.

1748
01:27:55,819 --> 01:27:57,610
And we actually saw an
event earlier today,

1749
01:27:57,610 --> 01:28:00,670
the so-called submit event,
when we were preventing

1750
01:28:00,670 --> 01:28:02,490
the user from searching for cats.

1751
01:28:02,490 --> 01:28:06,560
So we've kind of picked and choosed
from among all these various features,

1752
01:28:06,560 --> 01:28:08,990
to give you a sense, hopefully,
of what you can actually

1753
01:28:08,990 --> 01:28:11,000
do with a bit more
comfort in programming,

1754
01:28:11,000 --> 01:28:12,587
and completely free resources.

1755
01:28:12,587 --> 01:28:15,856


1756
01:28:15,856 --> 01:28:18,770
Any questions?

1757
01:28:18,770 --> 01:28:19,790
No?

1758
01:28:19,790 --> 01:28:22,542
This is your final chance,
at least today, on a Friday,

1759
01:28:22,542 --> 01:28:25,000
to get anything off your chest
so that you walk out of here

1760
01:28:25,000 --> 01:28:27,067
feeling confident and comfortable.

1761
01:28:27,067 --> 01:28:27,566
Yes.

1762
01:28:27,566 --> 01:28:29,740
AUDIENCE: Why don't
you add one more thing?

1763
01:28:29,740 --> 01:28:32,720
DAVID MALAN: Oh my goodness.

1764
01:28:32,720 --> 01:28:35,260
I need to rest this weekend, I think.

1765
01:28:35,260 --> 01:28:36,180
Other questions?

1766
01:28:36,180 --> 01:28:37,055
AUDIENCE: [INAUDIBLE]

1767
01:28:37,055 --> 01:28:44,130


1768
01:28:44,130 --> 01:28:46,810
DAVID MALAN: You can-- in
Internet Explorer, rest in peace,

1769
01:28:46,810 --> 01:28:49,310
you used to be able to put VB
script, virtual basic script,

1770
01:28:49,310 --> 01:28:50,643
but that really never caught on.

1771
01:28:50,643 --> 01:28:52,490
So the short answer is just JavaScript.

1772
01:28:52,490 --> 01:28:55,144


1773
01:28:55,144 --> 01:28:55,810
Other questions?

1774
01:28:55,810 --> 01:28:58,427


1775
01:28:58,427 --> 01:28:59,760
All right, well, let me do this.

1776
01:28:59,760 --> 01:29:02,070
Let me grab our colleagues outside.

1777
01:29:02,070 --> 01:29:04,500
They have some evaluation
forms that they want everyone

1778
01:29:04,500 --> 01:29:06,310
to spend a few minutes filling out.

1779
01:29:06,310 --> 01:29:08,775
They want to collect that form and any
waivers that you might have outside.

1780
01:29:08,775 --> 01:29:10,240
They'll also have certificates.

1781
01:29:10,240 --> 01:29:12,380
I'm guessing there's
still some snacks outside.

1782
01:29:12,380 --> 01:29:14,360
Let me pass these out, and if you
have any questions in the meantime,

1783
01:29:14,360 --> 01:29:17,120
I'll walk around more individually
and we can get you started.

1784
01:29:17,120 --> 01:29:17,879
Yes, of course.

1785
01:29:17,879 --> 01:29:18,754
AUDIENCE: [INAUDIBLE]

1786
01:29:18,754 --> 01:29:26,737


1787
01:29:26,737 --> 01:29:28,570
DAVID MALAN: That's
usually true these days.

1788
01:29:28,570 --> 01:29:30,730
Certainly with web
software, you are leaning

1789
01:29:30,730 --> 01:29:32,901
on others you're either
aesthetically using things

1790
01:29:32,901 --> 01:29:35,400
like Bootstrap, so you don't
have to implement the low level

1791
01:29:35,400 --> 01:29:37,169
details of menus and
buttons and all that.

1792
01:29:37,169 --> 01:29:39,210
You're leaning on someone
like Google so that you

1793
01:29:39,210 --> 01:29:42,050
don't have to build an Uber
business and a mapping business,

1794
01:29:42,050 --> 01:29:44,850
and any number of similar
applications as well.

1795
01:29:44,850 --> 01:29:46,350
In fact, logins are popular, too.

1796
01:29:46,350 --> 01:29:48,500
If you've used Spotify or
any number of websites,

1797
01:29:48,500 --> 01:29:51,210
you'll log in to some
websites using Facebook.

1798
01:29:51,210 --> 01:29:53,350
So what's nice, there
are APIs for logins

1799
01:29:53,350 --> 01:29:56,570
nowadays, so that you don't have
to have your own users table

1800
01:29:56,570 --> 01:29:59,440
and all of your own database
necessarily to the same extent.

1801
01:29:59,440 --> 01:30:01,795
You can let Facebook do all
of that complexity for you.

1802
01:30:01,795 --> 01:30:03,920
So it's an exciting time,
honestly, in programming,

1803
01:30:03,920 --> 01:30:07,200
because there are so many third party
services that you can build on top of.

1804
01:30:07,200 --> 01:30:10,890
And again, the price you pay is
either financial or downtime.

1805
01:30:10,890 --> 01:30:13,750
If Google goes down,
so does Uber, arguably,

1806
01:30:13,750 --> 01:30:15,690
but perhaps that's a
reasonable trade-off.

1807
01:30:15,690 --> 01:30:18,040
And again, that was one of the themes,
hopefully, for the past couple of days,

1808
01:30:18,040 --> 01:30:18,780
is these trade-offs.

1809
01:30:18,780 --> 01:30:20,738
And rarely is there going
to be a right answer.

1810
01:30:20,738 --> 01:30:25,700
It really is the better
of two or more answers.

1811
01:30:25,700 --> 01:30:26,682
Pass these around.

1812
01:30:26,682 --> 01:30:36,830


1813
01:30:36,830 --> 01:30:41,110
And these Cloud9 accounts will continue
to work, in theory, in perpetuity.

1814
01:30:41,110 --> 01:30:45,000
You might find if you wait a few days
or a week or more to log back into them,

1815
01:30:45,000 --> 01:30:49,170
it might take like one or
five minutes to open back up,

1816
01:30:49,170 --> 01:30:54,090
but that's just because they put
it to sleep to save on resources.

1817
01:30:54,090 --> 01:31:10,527