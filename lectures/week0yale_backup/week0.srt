1
00:00:00,000 --> 00:00:03,465
[BACKGROUND NOISE]

2
00:00:03,465 --> 00:16:10,536


3
00:16:10,536 --> 00:16:11,450
Does it work?

4
00:16:11,450 --> 00:16:26,585


5
00:16:26,585 --> 00:16:28,210
PATRICK REBESCHINI: We can get started.

6
00:16:28,210 --> 00:16:38,110


7
00:16:38,110 --> 00:16:38,610
OK.

8
00:16:38,610 --> 00:16:39,170
Great.

9
00:16:39,170 --> 00:16:40,420
Let's get started.

10
00:16:40,420 --> 00:16:44,070
So it is my greatest pleasure
to welcome you all here today

11
00:16:44,070 --> 00:16:46,700
for the first lecture
of, well, Introduction

12
00:16:46,700 --> 00:16:48,610
to Computing and Programming.

13
00:16:48,610 --> 00:16:55,210
Also known as CS50 or well, CPSC
100, officially here at Yale.

14
00:16:55,210 --> 00:17:00,920
So we couldn't be more excited
to welcome you all here.

15
00:17:00,920 --> 00:17:02,720
My name is Patrick Rebeschini.

16
00:17:02,720 --> 00:17:05,280
I'm the head instructor for the class.

17
00:17:05,280 --> 00:17:09,700
I am here representing a group
of about 60 staff members

18
00:17:09,700 --> 00:17:12,480
that will work with you
throughout the semester.

19
00:17:12,480 --> 00:17:15,140
This number is almost 60 of us.

20
00:17:15,140 --> 00:17:18,540
Yet along the extraordinary
level of commitments

21
00:17:18,540 --> 00:17:22,655
that we put into this
class, makes CS50 the class

22
00:17:22,655 --> 00:17:26,790
at Yale University that offers
the greatest level of support

23
00:17:26,790 --> 00:17:28,060
to all of you.

24
00:17:28,060 --> 00:17:32,040
And we couldn't be more proud of
offering this class here again.

25
00:17:32,040 --> 00:17:37,480
In fact, as you will soon experience,
CS50 is much more than a class.

26
00:17:37,480 --> 00:17:39,220
It's a community.

27
00:17:39,220 --> 00:17:41,350
And you will be part
soon of this community.

28
00:17:41,350 --> 00:17:44,830
This is the second year that
Yale is offering this class.

29
00:17:44,830 --> 00:17:47,740
We are building on the extreme
success of last year, where

30
00:17:47,740 --> 00:17:50,440
for the first time,
here at this university,

31
00:17:50,440 --> 00:17:55,030
undergraduate learning assistant
were adopted in classrooms.

32
00:17:55,030 --> 00:17:58,750
It all started with
this class last year.

33
00:17:58,750 --> 00:18:03,150
So as you know, the class is taught
jointly with Harvard University.

34
00:18:03,150 --> 00:18:06,020
To teach this course
we are relying-- we can

35
00:18:06,020 --> 00:18:10,950
count on the great expertise of
David Malan and the Harvard team.

36
00:18:10,950 --> 00:18:15,030
So David has been teaching
CS50 for well, 10 years now.

37
00:18:15,030 --> 00:18:17,260
And every year he has been
pushing the boundaries

38
00:18:17,260 --> 00:18:20,310
and improving the classroom experience.

39
00:18:20,310 --> 00:18:25,040
Again, we couldn't be more happy to
continue this collaboration with them.

40
00:18:25,040 --> 00:18:27,940
In fact, one of the
most interesting parts,

41
00:18:27,940 --> 00:18:32,660
I will say of running this class now,
both at Harvard and here at Yale,

42
00:18:32,660 --> 00:18:35,520
is the really incredible
cross-fertilization

43
00:18:35,520 --> 00:18:39,870
of ideas, aimed at improving the
learning experience to you all.

44
00:18:39,870 --> 00:18:44,230
So as a result of this extensive
collaboration between the two

45
00:18:44,230 --> 00:18:49,170
university, CS50 is proud to
announce the new version this year

46
00:18:49,170 --> 00:18:50,870
with noticeable changes.

47
00:18:50,870 --> 00:18:53,680
David will all tell us about them now.

48
00:18:53,680 --> 00:18:57,550
So please-- this being
said, please join me

49
00:18:57,550 --> 00:19:00,320
and welcome to give a
big round of applause

50
00:19:00,320 --> 00:19:03,390
to welcome David and
Harvard team here at Yale.

51
00:19:03,390 --> 00:19:06,132
[APPLAUSE]

52
00:19:06,132 --> 00:19:07,982


53
00:19:07,982 --> 00:19:09,347
DAVID MALAN: Thank you.

54
00:19:09,347 --> 00:19:09,846
Thanks.

55
00:19:09,846 --> 00:19:12,650


56
00:19:12,650 --> 00:19:17,500
This is CS50, Harvard University's
and Yale University's introduction

57
00:19:17,500 --> 00:19:20,060
to the intellectual
enterprises of computer science

58
00:19:20,060 --> 00:19:21,590
and the art of programming.

59
00:19:21,590 --> 00:19:25,740
And what that means is that this course
ultimately, is about problem solving.

60
00:19:25,740 --> 00:19:27,949
Indeed many of you might
have come out of high school

61
00:19:27,949 --> 00:19:31,031
or have spent the past couple of years
wondering what some of your friends

62
00:19:31,031 --> 00:19:32,480
did last year or in other classes.

63
00:19:32,480 --> 00:19:34,549
And yet, the reality
is, no matter what we

64
00:19:34,549 --> 00:19:37,840
do at the end of the day in this class,
it's going to be about problem solving.

65
00:19:37,840 --> 00:19:40,420
And as such, perhaps take
some reassurance in the fact

66
00:19:40,420 --> 00:19:42,870
that 73% of the students that
take this class, both here

67
00:19:42,870 --> 00:19:46,335
at Yale as well as at Harvard,
have never taken a CS class before.

68
00:19:46,335 --> 00:19:48,710
So if you're sitting here in
the audience today wondering

69
00:19:48,710 --> 00:19:50,620
why you are sitting here
in the audience today,

70
00:19:50,620 --> 00:19:52,400
or maybe you just followed
along with some friends,

71
00:19:52,400 --> 00:19:54,399
or maybe you've been a
little curious as to what

72
00:19:54,399 --> 00:19:56,294
computer science and
programming is, realize

73
00:19:56,294 --> 00:19:58,960
that most of your classmates to
the left and to the right of you

74
00:19:58,960 --> 00:20:01,940
are very much in that same demographic.

75
00:20:01,940 --> 00:20:04,220
And indeed, if we look
at last year statistics

76
00:20:04,220 --> 00:20:08,860
within the student body of CS50, both
here and at Harvard, 58% of students

77
00:20:08,860 --> 00:20:10,730
describe themselves as less comfortable.

78
00:20:10,730 --> 00:20:12,190
9% is more comfortable.

79
00:20:12,190 --> 00:20:13,799
And then 33% is somewhere in between.

80
00:20:13,799 --> 00:20:16,340
And there's no formal definition
of what these buckets means.

81
00:20:16,340 --> 00:20:18,435
You sort of know you're
less comfortable if you are.

82
00:20:18,435 --> 00:20:20,940
You're feeling a little uneasy
with maybe being in the class.

83
00:20:20,940 --> 00:20:23,940
You're not quite sure if a computer
science class is ultimately for you,

84
00:20:23,940 --> 00:20:26,109
and realize that you are
in very good company.

85
00:20:26,109 --> 00:20:27,900
And indeed the grading,
and the assessment,

86
00:20:27,900 --> 00:20:30,566
and the feedback, and all of that
support structure in the class

87
00:20:30,566 --> 00:20:32,650
is ultimately very much individualized.

88
00:20:32,650 --> 00:20:35,287
More so than most any
other class by design.

89
00:20:35,287 --> 00:20:37,620
And indeed, what ultimately
matters in this class is not

90
00:20:37,620 --> 00:20:40,280
so much where you end
up relative to others,

91
00:20:40,280 --> 00:20:44,170
but where you, in week 11 or last,
and relative to yourself in week

92
00:20:44,170 --> 00:20:46,472
0 here our first.

93
00:20:46,472 --> 00:20:47,430
So what does that mean?

94
00:20:47,430 --> 00:20:50,850
Well, this means of those 73% of
students last year that had never taken

95
00:20:50,850 --> 00:20:53,017
a CS class before, by the
start of the semester they

96
00:20:53,017 --> 00:20:55,600
were dabbling in a language
called Scratch, which we ourselves

97
00:20:55,600 --> 00:20:56,440
will see here today.

98
00:20:56,440 --> 00:20:58,290
And by the end of the
semester had they gone

99
00:20:58,290 --> 00:21:00,800
through this entire list of challenges.

100
00:21:00,800 --> 00:21:02,499
Starting with a language called c.

101
00:21:02,499 --> 00:21:04,290
Implementing, what's
at first glance, going

102
00:21:04,290 --> 00:21:07,110
to be a bit of a challenge for
some, but fairly gratifying once you

103
00:21:07,110 --> 00:21:10,610
get Super Mario bouncing
up and down a pyramid

104
00:21:10,610 --> 00:21:13,105
implemented, albeit, with just
something called ASCII art.

105
00:21:13,105 --> 00:21:15,480
Implementing last year-- what
the students last year then

106
00:21:15,480 --> 00:21:19,370
did after that was implement their
own Caesar cipher and vigenere cipher.

107
00:21:19,370 --> 00:21:21,280
So encryption algorithms
with which you could

108
00:21:21,280 --> 00:21:25,020
scramble information and then unscramble
information to send secret messages.

109
00:21:25,020 --> 00:21:26,110
The game of 15.

110
00:21:26,110 --> 00:21:28,360
If you remember from
childhood or some party favor,

111
00:21:28,360 --> 00:21:31,100
that little plastic game where you move
the numbers up, down, left and right

112
00:21:31,100 --> 00:21:33,600
to try to get them in order,
actually implementing that game

113
00:21:33,600 --> 00:21:35,740
and solving the logic required there.

114
00:21:35,740 --> 00:21:37,740
And then we dabbled in
forensics last year.

115
00:21:37,740 --> 00:21:39,910
So by mid-semester,
students who had never

116
00:21:39,910 --> 00:21:42,230
used their keyboards
for this purpose before,

117
00:21:42,230 --> 00:21:45,130
were writing software
to recover, so to speak,

118
00:21:45,130 --> 00:21:47,520
JPEGs or photographs
that we had accidentally

119
00:21:47,520 --> 00:21:50,530
deleted from a digital
memory card from a camera.

120
00:21:50,530 --> 00:21:54,230
Recovering secret messages
from inside of a bitmap image,

121
00:21:54,230 --> 00:21:56,130
and other such types
of graphics as well.

122
00:21:56,130 --> 00:21:58,870
We then transitioned to giving
the whole class a dictionary.

123
00:21:58,870 --> 00:22:02,430
Just a really big text file
with 150,000 English words.

124
00:22:02,430 --> 00:22:05,180
And everyone was challenged
to somehow read, so to speak,

125
00:22:05,180 --> 00:22:06,880
those words into memory.

126
00:22:06,880 --> 00:22:08,160
Into the computer's memory.

127
00:22:08,160 --> 00:22:10,410
And then answer questions
of the form, is this a word?

128
00:22:10,410 --> 00:22:11,034
Is this a word?

129
00:22:11,034 --> 00:22:11,680
Is this a word?

130
00:22:11,680 --> 00:22:13,980
Really just implementing
a spell checker.

131
00:22:13,980 --> 00:22:16,420
And then challenging each
other with a big board--

132
00:22:16,420 --> 00:22:19,140
a leader board to see who could
use the least amount of memory,

133
00:22:19,140 --> 00:22:22,570
in the least amount of time to
actually spell check large documents.

134
00:22:22,570 --> 00:22:25,860
We transitioned from then to
implementing ones own web server.

135
00:22:25,860 --> 00:22:30,170
So not making web pages in languages
like HTML and CSS, if you're familiar.

136
00:22:30,170 --> 00:22:32,460
But actually implementing
the server that

137
00:22:32,460 --> 00:22:35,360
listens on the internet
for requests from browsers

138
00:22:35,360 --> 00:22:37,122
and then responding to those requests.

139
00:22:37,122 --> 00:22:39,330
Then implementing our own
e-trade like website, where

140
00:22:39,330 --> 00:22:41,590
students could buy and sell stocks.

141
00:22:41,590 --> 00:22:44,690
Drawing in nearly real time
stock quotes from Yahoo Finance.

142
00:22:44,690 --> 00:22:47,300
And allowing students to see
how their portfolio develops.

143
00:22:47,300 --> 00:22:49,670
And then finally a mash up
of Google News and Google

144
00:22:49,670 --> 00:22:52,640
Maps whereby students
by term by terms end

145
00:22:52,640 --> 00:22:56,210
had the ability to click, and
round, and search on a Google map.

146
00:22:56,210 --> 00:22:58,160
And then see all of
the news articles that

147
00:22:58,160 --> 00:23:00,040
are proximal to those particular areas.

148
00:23:00,040 --> 00:23:02,280
So truly going from zero to 60.

149
00:23:02,280 --> 00:23:05,520
And along the way having what we had
last year called, hacker additions.

150
00:23:05,520 --> 00:23:07,311
That raise the bar
further for those of you

151
00:23:07,311 --> 00:23:10,490
who might very well have a good
amount of experience being in that 9%

152
00:23:10,490 --> 00:23:11,449
of more comfortable.

153
00:23:11,449 --> 00:23:13,240
So realize that there's
a very high ceiling

154
00:23:13,240 --> 00:23:15,300
even within those
challenges for students

155
00:23:15,300 --> 00:23:16,760
coming from a different background.

156
00:23:16,760 --> 00:23:18,718
Because at the end of
the day, we're ultimately

157
00:23:18,718 --> 00:23:21,010
focused quite simply on this.

158
00:23:21,010 --> 00:23:23,110
But what does this
mean, problem solving?

159
00:23:23,110 --> 00:23:25,200
So let's propose that
we distill it like this.

160
00:23:25,200 --> 00:23:27,650
So problem solving is really
just this kind of picture.

161
00:23:27,650 --> 00:23:30,775
So you've got inputs to some problem,
something you actually want to solve.

162
00:23:30,775 --> 00:23:33,120
The goal is to get outputs,
a solution to that problem.

163
00:23:33,120 --> 00:23:36,050
And then in the middle is
what we'll call a black box.

164
00:23:36,050 --> 00:23:40,070
You don't necessarily know or even
care what's inside that black box.

165
00:23:40,070 --> 00:23:42,770
All you know is that when
you feed input into it,

166
00:23:42,770 --> 00:23:45,990
you hopefully get output
or a solution from it.

167
00:23:45,990 --> 00:23:48,480
And while today we'll look
both at inputs and outputs,

168
00:23:48,480 --> 00:23:50,938
we'll long term, and over the
course of the whole semester,

169
00:23:50,938 --> 00:23:52,980
focus on what's inside that box.

170
00:23:52,980 --> 00:23:56,140
And therein will lie
something called algorithms.

171
00:23:56,140 --> 00:23:59,400
Step by step instructions for
actually solving some problems.

172
00:23:59,400 --> 00:24:01,190
But what's an example of some inputs?

173
00:24:01,190 --> 00:24:03,940
So maybe a simple thing at the
start of every school year, someone

174
00:24:03,940 --> 00:24:05,190
might want to take attendance.

175
00:24:05,190 --> 00:24:08,130
So we might do one, two,
three, four, five, six,

176
00:24:08,130 --> 00:24:10,110
and how would I keep
track of that information.

177
00:24:10,110 --> 00:24:12,151
I might just go one, two,
three, four, five, six.

178
00:24:12,151 --> 00:24:13,820
And just use sort of single digits.

179
00:24:13,820 --> 00:24:17,310
Or I could actually record
this a little longer term.

180
00:24:17,310 --> 00:24:19,440
And how do I represent all
the humans in this room?

181
00:24:19,440 --> 00:24:21,000
Well, I might do something like, OK.

182
00:24:21,000 --> 00:24:22,170
I see one person.

183
00:24:22,170 --> 00:24:22,700
All right.

184
00:24:22,700 --> 00:24:27,280
I see another person, a
third person, and so forth.

185
00:24:27,280 --> 00:24:30,170
But no one counts people like this.

186
00:24:30,170 --> 00:24:33,052
So literally, most of us if we're
even going to draw anything at all,

187
00:24:33,052 --> 00:24:35,010
are probably going to go
one, two, three, four,

188
00:24:35,010 --> 00:24:40,340
maybe get a little fancy, five, six,
seven, eight, nine, ten and so forth.

189
00:24:40,340 --> 00:24:43,060
And that's actually a
system called unary.

190
00:24:43,060 --> 00:24:46,649
Uno, like uno implying one, where you
just have one letter of the alphabet.

191
00:24:46,649 --> 00:24:47,940
You've just got this hash mark.

192
00:24:47,940 --> 00:24:50,670
And I, for efficiency, just drew
these hash marks, ultimately

193
00:24:50,670 --> 00:24:51,600
as straight lines.

194
00:24:51,600 --> 00:24:53,766
But I could have drawn them
as little stick figures.

195
00:24:53,766 --> 00:24:55,650
Where to represent
one person, one input,

196
00:24:55,650 --> 00:24:58,310
I just draw a stick
figure or a hash mark.

197
00:24:58,310 --> 00:25:00,010
But this isn't all that expressive.

198
00:25:00,010 --> 00:25:04,120
If all I have is these hash
marks, let alone stick figures,

199
00:25:04,120 --> 00:25:07,510
how might I represent
something like the number 15?

200
00:25:07,510 --> 00:25:09,150
Or 15 people in the room?

201
00:25:09,150 --> 00:25:14,840
I might have to do something like 1,
2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,

202
00:25:14,840 --> 00:25:17,370
14, 15.

203
00:25:17,370 --> 00:25:18,930
It just does not scale very well.

204
00:25:18,930 --> 00:25:21,830
As the inputs get large, we
need a better system than this.

205
00:25:21,830 --> 00:25:24,010
And it turns out that the
system that computers use

206
00:25:24,010 --> 00:25:26,610
is not all that different
from what you and I know.

207
00:25:26,610 --> 00:25:29,401
In fact, most people in this room,
even if you are among those less

208
00:25:29,401 --> 00:25:32,400
comfortable, don't necessarily know
how your Mac or PC really works,

209
00:25:32,400 --> 00:25:35,910
you've probably at least heard, that
underneath the hood are 0's and 1's.

210
00:25:35,910 --> 00:25:37,490
The so-called binary system.

211
00:25:37,490 --> 00:25:41,440
So indeed, computers have more than
just hash marks in their vocabulary,

212
00:25:41,440 --> 00:25:43,550
but not as much of a
vocabulary as we humans.

213
00:25:43,550 --> 00:25:45,310
Indeed, we humans don't use binary.

214
00:25:45,310 --> 00:25:47,260
Bi meaning 2, 0 and 1.

215
00:25:47,260 --> 00:25:50,240
But decimal, deca
meaning 10, 0 through 9.

216
00:25:50,240 --> 00:25:53,760
So we have a lot more expressive
capabilities in our normal human world.

217
00:25:53,760 --> 00:25:57,820
But I'd argue that these systems,
binary, and decimal, and everything

218
00:25:57,820 --> 00:26:01,390
in between and beyond, are
actually all quite familiar.

219
00:26:01,390 --> 00:26:05,750
For instance, consider
this example here, 123.

220
00:26:05,750 --> 00:26:09,950
So this really is, of course,
a number we know as 123.

221
00:26:09,950 --> 00:26:13,260
But all I just drew was just this
pattern of symbols, glyphs so to speak.

222
00:26:13,260 --> 00:26:15,200
Sort of shapes on the board in chalk.

223
00:26:15,200 --> 00:26:19,051
But why do we immediately and
intuitively grasp this as 123?

224
00:26:19,051 --> 00:26:20,800
Well, if you were like
me in grade school,

225
00:26:20,800 --> 00:26:26,020
you probably learned that this is the
1s column, this is the 10s column,

226
00:26:26,020 --> 00:26:27,430
this is the 100s column.

227
00:26:27,430 --> 00:26:28,960
And why is that useful?

228
00:26:28,960 --> 00:26:32,540
Well, it's simple arithmetic you now
do to get from a pattern of symbols

229
00:26:32,540 --> 00:26:35,040
to a number we understand intuitively.

230
00:26:35,040 --> 00:26:40,260
Is what, 100 times 1, and then
10 times 2, and 1 times 3,

231
00:26:40,260 --> 00:26:43,960
which of course is just 100, and
this is 20, and this is three.

232
00:26:43,960 --> 00:26:45,840
And so if we add those together-- ah.

233
00:26:45,840 --> 00:26:49,980
So therein lies the sort of reasoning
behind why this set of symbols

234
00:26:49,980 --> 00:26:52,650
means something real and numeric.

235
00:26:52,650 --> 00:26:58,130
Well, computers do the exact same thing,
but they only can count as high as one.

236
00:26:58,130 --> 00:27:00,500
Whereas I was able to
count as high as three.

237
00:27:00,500 --> 00:27:03,480
And in fact, if I kept going I could
go as high as nine in this system.

238
00:27:03,480 --> 00:27:06,530
Computers only have zeros
and ones in their alphabet.

239
00:27:06,530 --> 00:27:07,510
So what does that mean?

240
00:27:07,510 --> 00:27:13,000
Well, it just means that if a computer
wants to represent, say the number 0,

241
00:27:13,000 --> 00:27:17,400
maybe using three characters-- three
letters of the alphabet so to speak,

242
00:27:17,400 --> 00:27:19,150
that's how a computer represents 0.

243
00:27:19,150 --> 00:27:20,720
So not all that scary so far.

244
00:27:20,720 --> 00:27:22,550
It's exactly what we humans would do.

245
00:27:22,550 --> 00:27:25,510
And in fact, most of us would just
ignore the leading zeros anyway.

246
00:27:25,510 --> 00:27:27,740
A computer, if it wants
to store the number 1,

247
00:27:27,740 --> 00:27:29,430
turns out is going to do this.

248
00:27:29,430 --> 00:27:31,730
And a computer to store
the number 2 is not

249
00:27:31,730 --> 00:27:35,380
going to do the unary system,
which I alluded to earlier.

250
00:27:35,380 --> 00:27:37,460
It's actually going to do this.

251
00:27:37,460 --> 00:27:39,670
And this is probably
where the pattern starts

252
00:27:39,670 --> 00:27:41,670
to become less obvious for most folks.

253
00:27:41,670 --> 00:27:44,680
That's 2, this is 3.

254
00:27:44,680 --> 00:27:47,700
Curiously, this is now 4.

255
00:27:47,700 --> 00:27:50,220
And now it really does
seem to be perhaps cryptic,

256
00:27:50,220 --> 00:27:52,862
but it's not if we consider
what binary really means.

257
00:27:52,862 --> 00:27:54,820
It means you have two
letters of your alphabet.

258
00:27:54,820 --> 00:27:58,040
So two possible characters
for each placeholder.

259
00:27:58,040 --> 00:28:02,070
So that really means we're going
to need a 1s place, or 2s place,

260
00:28:02,070 --> 00:28:06,900
a 4s place and then
8, and 16, 32, and 64.

261
00:28:06,900 --> 00:28:08,390
And what's the difference there?

262
00:28:08,390 --> 00:28:13,250
Like these are 1, 2, 4, 8, 16, 32, 64.

263
00:28:13,250 --> 00:28:16,790
And before we had 110, 100,000, 10,000.

264
00:28:16,790 --> 00:28:19,270
What's the similarity there?

265
00:28:19,270 --> 00:28:21,040
And what's the pattern?

266
00:28:21,040 --> 00:28:21,605
Yeah.

267
00:28:21,605 --> 00:28:23,480
STUDENT: Powers of 2
instead of powers of 10.

268
00:28:23,480 --> 00:28:23,760
DAVID MALAN: Yeah.

269
00:28:23,760 --> 00:28:25,390
Powers of 2 instead of powers of 10.

270
00:28:25,390 --> 00:28:28,260
And so if I wanted to keep
going, 8, 16s and so forth--

271
00:28:28,260 --> 00:28:31,922
but now if you have this sort
of clue, now the binary system

272
00:28:31,922 --> 00:28:33,380
is actually pretty straightforward.

273
00:28:33,380 --> 00:28:37,010
Why is this pattern of 0's
in the world of computers 0?

274
00:28:37,010 --> 00:28:41,010
Well because it's 4 times 0, 2
times 0, 1 times 0 and you get 0.

275
00:28:41,010 --> 00:28:42,750
Why is this the number 1?

276
00:28:42,750 --> 00:28:46,170
Same reasoning, but now we
have a 1 in the 1 column.

277
00:28:46,170 --> 00:28:47,940
Why is this 2?

278
00:28:47,940 --> 00:28:50,550
We have a 1 in the 2s column.

279
00:28:50,550 --> 00:28:56,290
And how then do I represent
say, the number 7 in binary?

280
00:28:56,290 --> 00:28:57,424
Say louder.

281
00:28:57,424 --> 00:28:58,270
STUDENT: Three 1s.

282
00:28:58,270 --> 00:28:59,186
DAVID MALAN: Three 1s.

283
00:28:59,186 --> 00:29:03,210
So 1, 1, 1 because we just need
4 plus 2 plus 1 gives me 7.

284
00:29:03,210 --> 00:29:03,710
All right.

285
00:29:03,710 --> 00:29:06,510
So from there how do we
represent 8 with 3 placeholders?

286
00:29:06,510 --> 00:29:09,410


287
00:29:09,410 --> 00:29:10,022
Yeah.

288
00:29:10,022 --> 00:29:11,170
STUDENT: 1, 0, 0, 0.

289
00:29:11,170 --> 00:29:13,070
DAVID MALAN: Yeah 1, 0, 0, 0.

290
00:29:13,070 --> 00:29:15,480
And yet maybe, I kind
of technically need

291
00:29:15,480 --> 00:29:18,480
to add another placeholder to the board.

292
00:29:18,480 --> 00:29:21,580
If I want to fit that I indeed
need to do something like this.

293
00:29:21,580 --> 00:29:25,090
So I actually need to use now
the 8s column, and that's fine.

294
00:29:25,090 --> 00:29:28,780
But the curious thing in computing is
that that's going to cost us something.

295
00:29:28,780 --> 00:29:30,490
You need more RAM in your computer now.

296
00:29:30,490 --> 00:29:32,448
You need more memory
because you need something

297
00:29:32,448 --> 00:29:35,750
physical to store that
additional bit, so to speak.

298
00:29:35,750 --> 00:29:36,800
Binary digits.

299
00:29:36,800 --> 00:29:39,360
And indeed all that's happened
here, like the decimal system,

300
00:29:39,360 --> 00:29:43,480
if we keep adding numbers up and up
and up, we go to 5 to 6 to 7 to 8

301
00:29:43,480 --> 00:29:45,430
it's like carrying the 1, literally.

302
00:29:45,430 --> 00:29:48,040
And then everything else
goes back down to zero.

303
00:29:48,040 --> 00:29:51,970
But how do we actually represent
these things physically in a computer?

304
00:29:51,970 --> 00:29:55,480
Well, at the end of the day, the only
physical input going into my computer

305
00:29:55,480 --> 00:29:59,730
here is this power cord, so
electricity or electrons from the wall.

306
00:29:59,730 --> 00:30:03,020
And so how do I get from something
physical like that to actually

307
00:30:03,020 --> 00:30:06,730
representing an idea like this instead.

308
00:30:06,730 --> 00:30:08,030
Well, what could we do?

309
00:30:08,030 --> 00:30:11,660
We could consider that, all right,
maybe if electricity is flowing

310
00:30:11,660 --> 00:30:13,520
I could store it and hold on to it.

311
00:30:13,520 --> 00:30:15,350
And if I'm holding on
to some electricity,

312
00:30:15,350 --> 00:30:17,800
that's just going to
arbitrarily represent a 1.

313
00:30:17,800 --> 00:30:20,097
And if I pull the plug
and there's nothing there,

314
00:30:20,097 --> 00:30:22,430
you know that's just going
to arbitrarily represent a 0.

315
00:30:22,430 --> 00:30:23,800
So if something's there, 1.

316
00:30:23,800 --> 00:30:25,380
If nothing's there, 0.

317
00:30:25,380 --> 00:30:27,520
Or you can make this
a little more visual.

318
00:30:27,520 --> 00:30:28,804
Here is a 0.

319
00:30:28,804 --> 00:30:31,470
There's nothing interesting going
on about the back of my phone.

320
00:30:31,470 --> 00:30:34,790
But if I allow a little
bit of electricity to flow,

321
00:30:34,790 --> 00:30:37,590
even though it's a little bright
in here, my flashlight went on.

322
00:30:37,590 --> 00:30:41,940
So I'm storing a charge and ergo,
this phone now represents a 1.

323
00:30:41,940 --> 00:30:43,800
So 0 1.

324
00:30:43,800 --> 00:30:49,730
So with 1 iPhone how high can I
count using this kind of approach?

325
00:30:49,730 --> 00:30:50,590
I mean to 1.

326
00:30:50,590 --> 00:30:52,000
It's not all that compelling.

327
00:30:52,000 --> 00:30:53,270
So what more could we do?

328
00:30:53,270 --> 00:30:57,280
Well let's see, is anyone on their
phone right now that I could borrow?

329
00:30:57,280 --> 00:30:59,900
Anyone who has a phone
with a flashlight built in?

330
00:30:59,900 --> 00:31:01,069
May I borrow?

331
00:31:01,069 --> 00:31:02,110
I don't need it unlocked.

332
00:31:02,110 --> 00:31:02,610
All right.

333
00:31:02,610 --> 00:31:03,250
Thank you.

334
00:31:03,250 --> 00:31:03,880
Let me borrow this.

335
00:31:03,880 --> 00:31:04,379
All right.

336
00:31:04,379 --> 00:31:11,670
So if I now scroll up and here,
what am I representing now?

337
00:31:11,670 --> 00:31:12,170
Yeah.

338
00:31:12,170 --> 00:31:15,450
So it's a three because this is in the
1s column, this is in the 2s column.

339
00:31:15,450 --> 00:31:16,580
So 1 plus 2 is 3.

340
00:31:16,580 --> 00:31:19,510
And then if we try to get
really creative-- oh, thank you.

341
00:31:19,510 --> 00:31:20,790
Very preemptive.

342
00:31:20,790 --> 00:31:21,660
All right.

343
00:31:21,660 --> 00:31:23,200
I now have three iPhones.

344
00:31:23,200 --> 00:31:24,910
All right.

345
00:31:24,910 --> 00:31:28,600
And now this-- I won't
do any further than this.

346
00:31:28,600 --> 00:31:30,480
What am I representing now?

347
00:31:30,480 --> 00:31:31,190
Just sevens.

348
00:31:31,190 --> 00:31:34,100
But I needed physically
more memory in this case.

349
00:31:34,100 --> 00:31:35,020
But that's all it is.

350
00:31:35,020 --> 00:31:38,970
You can think of what's going on--
thank you-- inside of your phone

351
00:31:38,970 --> 00:31:42,340
as just being a switch that's
being turned on and off.

352
00:31:42,340 --> 00:31:44,450
And if you've ever heard
the word transistor.

353
00:31:44,450 --> 00:31:47,412
Or if you've ever heard the
marketing speak Intel inside,

354
00:31:47,412 --> 00:31:50,370
that's speaking to the kind of hardware
that's inside of your computer.

355
00:31:50,370 --> 00:31:52,807
Intel makes CPUs,
central processing units,

356
00:31:52,807 --> 00:31:54,890
which are like the brains
inside of your computer.

357
00:31:54,890 --> 00:31:56,740
And these CPUs and
things they're connected

358
00:31:56,740 --> 00:31:58,840
to have lots and lots of tiny switches.

359
00:31:58,840 --> 00:32:02,540
Millions, billions of switches
that can either be on or off.

360
00:32:02,540 --> 00:32:04,940
So computers, thankfully,
like our Macs and PCs,

361
00:32:04,940 --> 00:32:09,930
can count way higher than 7 or 8
because they have way more than three

362
00:32:09,930 --> 00:32:10,760
or four bits.

363
00:32:10,760 --> 00:32:14,240
Way more than the equivalent of the
three flashlights that we just had.

364
00:32:14,240 --> 00:32:18,210
But now this starts to get
pretty uninteresting quickly.

365
00:32:18,210 --> 00:32:21,910
If I now want to actually be able
to do something more interesting,

366
00:32:21,910 --> 00:32:26,440
I want to be able to jump
to something like this.

367
00:32:26,440 --> 00:32:29,704
So ASCII, it's not really a useful
acronym, but American Standard Code

368
00:32:29,704 --> 00:32:30,870
for Information Interchange.

369
00:32:30,870 --> 00:32:33,550
It just means, some years
ago we humans decided,

370
00:32:33,550 --> 00:32:36,824
you know what, we want to be able to do
more with computers than just numbers.

371
00:32:36,824 --> 00:32:38,990
We don't want them to just
be expensive calculators,

372
00:32:38,990 --> 00:32:42,830
we'd like to be able to do things like
word processing, albeit very simply.

373
00:32:42,830 --> 00:32:46,130
Later we had email and other such media.

374
00:32:46,130 --> 00:32:49,800
And so the world decided some years
ago according to this system ASCII,

375
00:32:49,800 --> 00:32:50,870
you know what?

376
00:32:50,870 --> 00:32:53,070
In certain types of
programs any time you

377
00:32:53,070 --> 00:32:56,749
see the equivalent of the number
65, like the pattern of bits.

378
00:32:56,749 --> 00:32:58,540
And we could do the
math here on the board.

379
00:32:58,540 --> 00:33:00,550
The pattern of bits that represent 65.

380
00:33:00,550 --> 00:33:03,340
Don't think of it as 65 in decimal.

381
00:33:03,340 --> 00:33:07,720
Think of it as arbitrarily, but
globally, consistently as the capital

382
00:33:07,720 --> 00:33:08,301
A.

383
00:33:08,301 --> 00:33:10,050
And then the world
decided, you know what?

384
00:33:10,050 --> 00:33:11,730
Let's take another pattern of bits.

385
00:33:11,730 --> 00:33:13,870
And if we ever see the
number 66, let's just

386
00:33:13,870 --> 00:33:16,673
assume that that is the
capital B. Fast forward to H

387
00:33:16,673 --> 00:33:21,610
and I, if you see 72 or 73, that
should be an H and an I, respectively.

388
00:33:21,610 --> 00:33:23,880
And so as long as the whole
world agrees upon this.

389
00:33:23,880 --> 00:33:27,442
So that when you receive an email, or
you would get a file on a USB stick,

390
00:33:27,442 --> 00:33:29,900
or something like that-- when
you see that pattern of bits,

391
00:33:29,900 --> 00:33:33,080
you know that it should be this
letter or some other letter.

392
00:33:33,080 --> 00:33:34,720
But it's context specific, right.

393
00:33:34,720 --> 00:33:38,350
An email program might interpret
these things as characters,

394
00:33:38,350 --> 00:33:41,860
but a graphing calculator or
calculator might represent or interpret

395
00:33:41,860 --> 00:33:44,470
these things, of course, as letters.

396
00:33:44,470 --> 00:33:47,710
So with that said, quick little review.

397
00:33:47,710 --> 00:33:51,540
This is maybe a three character
e-mail that's been sent to me.

398
00:33:51,540 --> 00:33:54,090
Underneath the hood it's all in
0s and 1s, But we don't care.

399
00:33:54,090 --> 00:33:57,680
We're going to start to abstract
above the 0s and 1s to letters.

400
00:33:57,680 --> 00:34:02,930
And if I see a pattern of 0s and 1s that
really represent 72, hint, hint, 73,

401
00:34:02,930 --> 00:34:04,966
and then 33, what's the message?

402
00:34:04,966 --> 00:34:06,448
STUDENT: [INAUDIBLE]

403
00:34:06,448 --> 00:34:08,739
DAVID MALAN: So if you think
back just a moment ago, HI

404
00:34:08,739 --> 00:34:13,310
was the message I was trying to
communicate here because H is 72,

405
00:34:13,310 --> 00:34:17,025
I is 73, and now 33-- you wouldn't
necessarily know this in advance,

406
00:34:17,025 --> 00:34:19,900
but it turns out if you actually
see more of the chart and the system

407
00:34:19,900 --> 00:34:22,900
that humanity agreed upon years
ago, it's just an exclamation point.

408
00:34:22,900 --> 00:34:27,690
And indeed, there is a pattern of
symbols and numbers for every character

409
00:34:27,690 --> 00:34:29,949
that you might have on your keyboard.

410
00:34:29,949 --> 00:34:30,489
All right.

411
00:34:30,489 --> 00:34:31,760
Let's abstract further.

412
00:34:31,760 --> 00:34:35,480
If we don't want to just have
things like numbers and letters,

413
00:34:35,480 --> 00:34:37,520
we actually want to implement graphics.

414
00:34:37,520 --> 00:34:39,451
Well, if you've ever
heard the acronym RGB.

415
00:34:39,451 --> 00:34:41,659
It's kind of dated now, but
it's still kind of there.

416
00:34:41,659 --> 00:34:43,480
RGB is red, green, blue.

417
00:34:43,480 --> 00:34:45,480
And it's just a system
of saying, you know what,

418
00:34:45,480 --> 00:34:47,750
let's use three sets of bits.

419
00:34:47,750 --> 00:34:51,380
A set of 8 bits, another set of 8
bits, and another set of 8 bits.

420
00:34:51,380 --> 00:34:53,810
And let's use those bits
to store how much red we

421
00:34:53,810 --> 00:34:57,530
want on our screen, how much
green we want on our screen,

422
00:34:57,530 --> 00:35:00,170
and how much blue we want on our screen.

423
00:35:00,170 --> 00:35:03,960
And this just means that if you
have a lot-- a big number for red,

424
00:35:03,960 --> 00:35:05,300
that means give me a lot of red.

425
00:35:05,300 --> 00:35:07,758
If you have a big number for
green, give me a lot of green.

426
00:35:07,758 --> 00:35:10,760
And if you have just a little bit
of blue or a small number like 33,

427
00:35:10,760 --> 00:35:12,060
give me a little bit of blue.

428
00:35:12,060 --> 00:35:15,820
And if you happen to combine those
three magnitudes, so to speak,

429
00:35:15,820 --> 00:35:19,260
you get this-- you barely can see on
the projector here, but this murky

430
00:35:19,260 --> 00:35:20,730
shade of yellow or brown.

431
00:35:20,730 --> 00:35:24,690
But this is to say, using that
pattern of 8 plus 8 plus plus 8--

432
00:35:24,690 --> 00:35:27,810
that pattern of 24 bits
is how a computer would

433
00:35:27,810 --> 00:35:32,560
store that shade of yellow in one
tiny dot a pixel on the screen.

434
00:35:32,560 --> 00:35:36,670
So we've gone from 0s and 1s to decimal
numbers to letters of the alphabet.

435
00:35:36,670 --> 00:35:39,780
Or more interesting, colored dots.

436
00:35:39,780 --> 00:35:42,300
Well, what of course then comes next?

437
00:35:42,300 --> 00:35:45,140
Well, what is an image that you
see on Facebook or get in an email?

438
00:35:45,140 --> 00:35:46,272
Or the like?

439
00:35:46,272 --> 00:35:48,230
What is the definition
technically of an image?

440
00:35:48,230 --> 00:35:51,190


441
00:35:51,190 --> 00:35:53,810
Yeah.

442
00:35:53,810 --> 00:35:57,370
What is an image composed of if you
look really close at your screen?

443
00:35:57,370 --> 00:35:57,870
Yeah.

444
00:35:57,870 --> 00:35:59,286
It's just a whole bunch of pixels.

445
00:35:59,286 --> 00:36:01,320
In fact, if you take your
laptop maybe later on,

446
00:36:01,320 --> 00:36:03,280
and look really closely
at it-- depending

447
00:36:03,280 --> 00:36:06,470
on how expensive the laptop is and
how high quality the screen is,

448
00:36:06,470 --> 00:36:09,580
you might very well see all of
the little dots on the screen.

449
00:36:09,580 --> 00:36:11,990
And those dots or pixels,
which means there's

450
00:36:11,990 --> 00:36:15,910
24 bits representing every pixel in that
photograph that you see on Facebook,

451
00:36:15,910 --> 00:36:18,149
or that you just took
on your iPhone recently.

452
00:36:18,149 --> 00:36:20,190
And so that's how we get
to things like graphics.

453
00:36:20,190 --> 00:36:21,220
Well, what's a video?

454
00:36:21,220 --> 00:36:24,760
A video is just a set of graphics
flying by the screen again

455
00:36:24,760 --> 00:36:25,880
and again and again.

456
00:36:25,880 --> 00:36:30,180
And so videos really, are just patterns
of bits representing grids, rows

457
00:36:30,180 --> 00:36:32,980
and columns of dots,
flying by the screen image,

458
00:36:32,980 --> 00:36:35,340
after image, after image, a.k.a.

459
00:36:35,340 --> 00:36:36,750
Motion pictures.

460
00:36:36,750 --> 00:36:38,440
So that's it for inputs and outputs.

461
00:36:38,440 --> 00:36:40,520
All we have now is an
assumption that, you

462
00:36:40,520 --> 00:36:43,290
know what, if we want a computer
to represent information,

463
00:36:43,290 --> 00:36:44,660
we have a system for doing it.

464
00:36:44,660 --> 00:36:46,880
We can do it with 0s and
1s at the end of the day.

465
00:36:46,880 --> 00:36:49,260
But we can abstract, so
to speak, on top of that

466
00:36:49,260 --> 00:36:51,240
so as to represent more
interesting things.

467
00:36:51,240 --> 00:36:54,890
And here on out in CS50, and in
computer science more generally,

468
00:36:54,890 --> 00:36:57,350
we now stand on the shoulders
of all the people who

469
00:36:57,350 --> 00:36:59,630
came before us who figured that out.

470
00:36:59,630 --> 00:37:04,270
And now just assume that computers
can represent inputs and outputs.

471
00:37:04,270 --> 00:37:07,240
But now let's actually
do something with them.

472
00:37:07,240 --> 00:37:10,950
So an algorithm is just a set
of instructions, step by step,

473
00:37:10,950 --> 00:37:12,440
for solving some problem.

474
00:37:12,440 --> 00:37:14,830
And what might one such problem be.

475
00:37:14,830 --> 00:37:18,540
So this is an old school
technology, a phone book.

476
00:37:18,540 --> 00:37:21,634
And inside of a phone book is a
whole bunch of names and numbers.

477
00:37:21,634 --> 00:37:23,800
And those names are generally
sorted alphabetically.

478
00:37:23,800 --> 00:37:27,410
So if I wanted to find someone in
this phone book like Mike Smith,

479
00:37:27,410 --> 00:37:29,030
what's a typical human going to do?

480
00:37:29,030 --> 00:37:32,100
Well, you could simply open
it up, look at the first page.

481
00:37:32,100 --> 00:37:33,490
I don't see Mike Smith.

482
00:37:33,490 --> 00:37:35,840
Turn to the second page,
I don't see Mike Smith.

483
00:37:35,840 --> 00:37:37,930
And just keep going and going.

484
00:37:37,930 --> 00:37:40,497
Is this step by step approach correct?

485
00:37:40,497 --> 00:37:43,480


486
00:37:43,480 --> 00:37:44,410
Yeah.

487
00:37:44,410 --> 00:37:46,180
It's kind of stupid, right.

488
00:37:46,180 --> 00:37:47,746
It's inefficient, right.

489
00:37:47,746 --> 00:37:50,620
Because it's going to take forever
to get to Mike, but it is correct.

490
00:37:50,620 --> 00:37:52,720
Because if Mike is here
I will indeed find him.

491
00:37:52,720 --> 00:37:55,130
So what's a slightly more
reasonable person going to do?

492
00:37:55,130 --> 00:37:58,280
They might still open to the front,
and maybe fly through the phone book

493
00:37:58,280 --> 00:37:59,350
two pages at a time.

494
00:37:59,350 --> 00:38:00,940
Two, four, six, eight.

495
00:38:00,940 --> 00:38:02,930
I can't actually
physically do it very well.

496
00:38:02,930 --> 00:38:05,660
But in theory, this should be
twice as fast, two pages at a time.

497
00:38:05,660 --> 00:38:07,252
Is this algorithm correct?

498
00:38:07,252 --> 00:38:09,352
STUDENT: [INAUDIBLE]

499
00:38:09,352 --> 00:38:10,560
DAVID MALAN: Not necessarily.

500
00:38:10,560 --> 00:38:11,060
Good.

501
00:38:11,060 --> 00:38:12,212
Why that caveat?

502
00:38:12,212 --> 00:38:16,120
STUDENT: Because he could be on one
of the pages that you're skipping.

503
00:38:16,120 --> 00:38:16,870
DAVID MALAN: Yeah.

504
00:38:16,870 --> 00:38:18,360
So even if I get closer and closer.

505
00:38:18,360 --> 00:38:22,250
What if he's just accidentally, by bad
luck, sandwiched between the two pages

506
00:38:22,250 --> 00:38:23,390
that I'm flying over?

507
00:38:23,390 --> 00:38:26,020


508
00:38:26,020 --> 00:38:27,830
So we need a fix for this.

509
00:38:27,830 --> 00:38:29,690
We actually need to
then say, wait a minute,

510
00:38:29,690 --> 00:38:32,340
maybe if we go too far, maybe
if we hit the T section,

511
00:38:32,340 --> 00:38:35,770
for T coming after Smith, then we should
at least double back at least one page.

512
00:38:35,770 --> 00:38:38,730
So fixable, but there is
a conditional issue there.

513
00:38:38,730 --> 00:38:42,259
So it's twice as fast, but you might
have to double back just a little bit.

514
00:38:42,259 --> 00:38:45,300
But no one in his room, even if you
don't really use phone books anymore,

515
00:38:45,300 --> 00:38:46,840
is going to start at the beginning.

516
00:38:46,840 --> 00:38:49,417
What are you going to do
looking for Mike Smith?

517
00:38:49,417 --> 00:38:51,000
You're going to go roughly to the S's.

518
00:38:51,000 --> 00:38:52,920
Or if you don't really have
the cheat sheet on the paper,

519
00:38:52,920 --> 00:38:54,465
you're going to go at least
roughly to the middle.

520
00:38:54,465 --> 00:38:56,320
And certainly not to
the front of the book.

521
00:38:56,320 --> 00:38:57,230
You're going to look down.

522
00:38:57,230 --> 00:38:59,870
And mathematically you're probably
going to see the M section, which

523
00:38:59,870 --> 00:39:00,990
is roughly in the middle.

524
00:39:00,990 --> 00:39:02,948
And then you're going to
realize, what is true?

525
00:39:02,948 --> 00:39:04,068
Where is Mike?

526
00:39:04,068 --> 00:39:05,270
STUDENT: [INAUDIBLE]

527
00:39:05,270 --> 00:39:06,020
DAVID MALAN: Yeah.

528
00:39:06,020 --> 00:39:07,630
So he's over on this side.

529
00:39:07,630 --> 00:39:08,810
And so what can you do?

530
00:39:08,810 --> 00:39:14,970
Well, both figuratively and literally
can you tear the problem in half once?

531
00:39:14,970 --> 00:39:20,360
And then know that you can throw
this half of the problem away.

532
00:39:20,360 --> 00:39:24,270
And now we're left with fundamentally
the same problem, but it's half as big.

533
00:39:24,270 --> 00:39:26,020
And so now what's the
set of instructions?

534
00:39:26,020 --> 00:39:27,853
What's the algorithm
for finding Mike Smith?

535
00:39:27,853 --> 00:39:29,130
It's the exact same thing.

536
00:39:29,130 --> 00:39:31,850
Now this happens to be the M
section and this is the Z section,

537
00:39:31,850 --> 00:39:34,750
but the fundamental
formula is still the same.

538
00:39:34,750 --> 00:39:36,900
Go roughly to the middle,
look down, oh, darn it.

539
00:39:36,900 --> 00:39:39,260
Now I'm in the T section,
I've gone too far.

540
00:39:39,260 --> 00:39:42,740
But here too can you
apply that same logic.

541
00:39:42,740 --> 00:39:45,289
Throw half of the problem
away and now we're

542
00:39:45,289 --> 00:39:47,330
left with a problem that's
a quarter of the size.

543
00:39:47,330 --> 00:39:54,240
And we can repeat, and we can repeat,
and we can repeat until theoretically

544
00:39:54,240 --> 00:39:58,290
there's just one page left on
which Mike either is or isn't.

545
00:39:58,290 --> 00:40:00,114
So what's so powerful about this idea?

546
00:40:00,114 --> 00:40:01,780
I mean after all, it's pretty intuitive.

547
00:40:01,780 --> 00:40:03,490
No one's going to start at the
beginning of the phone book

548
00:40:03,490 --> 00:40:05,420
and flip 1,000 pages to find Mike Smith.

549
00:40:05,420 --> 00:40:08,419
Most everyone in this room is going
to do roughly that kind of algorithm

550
00:40:08,419 --> 00:40:09,320
save for the tearing.

551
00:40:09,320 --> 00:40:11,580
And so why did we do that?

552
00:40:11,580 --> 00:40:13,910
Well, consider the efficiency.

553
00:40:13,910 --> 00:40:17,600
Consider just how much better this
algorithm was by breaking it down

554
00:40:17,600 --> 00:40:18,990
into its component parts.

555
00:40:18,990 --> 00:40:20,080
So what did I first do?

556
00:40:20,080 --> 00:40:21,489
I picked up the phone book.

557
00:40:21,489 --> 00:40:23,280
And a computer scientist,
and a programmer,

558
00:40:23,280 --> 00:40:26,190
more generally it turns out, is going
to start counting everything at 0.

559
00:40:26,190 --> 00:40:26,710
Why?

560
00:40:26,710 --> 00:40:29,340
Well, it's a little strange
that we humans count, generally,

561
00:40:29,340 --> 00:40:30,500
starting from one.

562
00:40:30,500 --> 00:40:34,210
Because what's the smallest number
we can clearly represent based

563
00:40:34,210 --> 00:40:36,030
even on our old grade school math?

564
00:40:36,030 --> 00:40:38,500
Well, it was 0, whether
it's in decimal or binary.

565
00:40:38,500 --> 00:40:41,000
And so you'll see in the world
of computing and programming,

566
00:40:41,000 --> 00:40:43,720
specifically, we start
counting everything from 0.

567
00:40:43,720 --> 00:40:45,790
So I picked up the phone book step 0.

568
00:40:45,790 --> 00:40:48,024
I'm going to open to the
middle of the phone book.

569
00:40:48,024 --> 00:40:49,940
And that's indeed an
expression of what I did.

570
00:40:49,940 --> 00:40:52,000
And then step two was look at the names.

571
00:40:52,000 --> 00:40:55,210
Step three is a little
different conceptually.

572
00:40:55,210 --> 00:40:56,700
I'm asking myself a question.

573
00:40:56,700 --> 00:40:59,710
If Smith is among the names,
I'm going to make a decision.

574
00:40:59,710 --> 00:41:02,650
If he's among the names,
then I'm going to call Mike.

575
00:41:02,650 --> 00:41:05,690
And I'm going to make a decision
based on that piece of information.

576
00:41:05,690 --> 00:41:10,200
However, if not, if Smith is
earlier in the book to the left,

577
00:41:10,200 --> 00:41:14,300
I'm going to open to the middle
of the left half of the book.

578
00:41:14,300 --> 00:41:17,774
And then here's the cleverness,
I'm going to go back to step two.

579
00:41:17,774 --> 00:41:19,690
I'm going to sort of
stand on my own shoulders

580
00:41:19,690 --> 00:41:21,210
and just repeat the past work I did.

581
00:41:21,210 --> 00:41:24,162
But the work I have left is
less, and less, and less.

582
00:41:24,162 --> 00:41:25,370
But it's still going to work.

583
00:41:25,370 --> 00:41:28,210
But if Mike, instead, is later
in the book to the right,

584
00:41:28,210 --> 00:41:31,080
I'm going to open to the middle
of the right half of the book,

585
00:41:31,080 --> 00:41:33,340
then go back to step two.

586
00:41:33,340 --> 00:41:35,430
But there's actually a fourth scenario.

587
00:41:35,430 --> 00:41:39,436
Mike's either here,
or here, or here, or--

588
00:41:39,436 --> 00:41:40,252
STUDENT: Not there.

589
00:41:40,252 --> 00:41:41,210
DAVID MALAN: Not there.

590
00:41:41,210 --> 00:41:44,680
And indeed, if we don't anticipate
this fourth and final scenario

591
00:41:44,680 --> 00:41:47,610
our program might be buggy
or flawed in some way.

592
00:41:47,610 --> 00:41:51,120
Else, quit in the case that
we haven't found Mike at all.

593
00:41:51,120 --> 00:41:53,820
And indeed, if you've ever noticed
your computer hanging, or all

594
00:41:53,820 --> 00:41:56,590
of a sudden word or some other
program just quits unexpectedly,

595
00:41:56,590 --> 00:41:58,714
and sometimes thee error
message is literally that.

596
00:41:58,714 --> 00:42:00,170
This program quit unexpectedly.

597
00:42:00,170 --> 00:42:01,670
It can be for any number of reasons.

598
00:42:01,670 --> 00:42:04,220
But sometimes it's
something as simple as this.

599
00:42:04,220 --> 00:42:06,540
The human programmer
who wrote that software

600
00:42:06,540 --> 00:42:09,710
didn't realize that, oh, there's a
forth thing that can actually happen.

601
00:42:09,710 --> 00:42:12,580
And if you don't write code to
capture that fourth scenario,

602
00:42:12,580 --> 00:42:17,442
it is indeed unexpected sometimes
what the computer might actually do.

603
00:42:17,442 --> 00:42:19,150
Now let's call out a
few of these things.

604
00:42:19,150 --> 00:42:21,565
So in yellow here, I
have highlighted terms

605
00:42:21,565 --> 00:42:23,690
that henceforth we're just
going to call functions.

606
00:42:23,690 --> 00:42:26,800
Functions in the world of
programming are just like actions,

607
00:42:26,800 --> 00:42:27,950
statements of actions.

608
00:42:27,950 --> 00:42:31,820
So pick up, open to, look
at, call, open, open, quit.

609
00:42:31,820 --> 00:42:35,450
That's a function, a procedure,
an action, any number of synonyms

610
00:42:35,450 --> 00:42:36,284
would work as well.

611
00:42:36,284 --> 00:42:37,950
Now what are these things now in yellow?

612
00:42:37,950 --> 00:42:40,310
If else, if else, if
else, these are what

613
00:42:40,310 --> 00:42:42,600
we're going to call
conditions in programming,

614
00:42:42,600 --> 00:42:45,370
or branches, decision
points, if you will.

615
00:42:45,370 --> 00:42:48,859
But how do you know which fork
in the road to take, so to speak?

616
00:42:48,859 --> 00:42:50,650
We need to highlight
the terms to the right

617
00:42:50,650 --> 00:42:53,670
there, which are these
yes, no questions.

618
00:42:53,670 --> 00:42:55,140
These true false questions.

619
00:42:55,140 --> 00:42:56,980
Smith among names?

620
00:42:56,980 --> 00:42:58,290
Smith earlier in book?

621
00:42:58,290 --> 00:42:59,360
Smith later in book?

622
00:42:59,360 --> 00:43:01,590
These are questions to
which there is a yes, or no,

623
00:43:01,590 --> 00:43:08,210
or equivalently true, or false, or
equivalently, one or zero answer.

624
00:43:08,210 --> 00:43:10,360
And meanwhile there's
just one last piece.

625
00:43:10,360 --> 00:43:12,040
This here has what kind of effect?

626
00:43:12,040 --> 00:43:14,330
Whether or not you program
before, how would you

627
00:43:14,330 --> 00:43:17,130
describe what step
seven and 10 are doing?

628
00:43:17,130 --> 00:43:20,210


629
00:43:20,210 --> 00:43:21,127
What did you say?

630
00:43:21,127 --> 00:43:22,210
STUDENT: A recursive step.

631
00:43:22,210 --> 00:43:23,080
DAVID MALAN: A recursive step.

632
00:43:23,080 --> 00:43:24,100
Yes, essentially.

633
00:43:24,100 --> 00:43:26,484
It's technically iterative
here if you're familiar.

634
00:43:26,484 --> 00:43:27,650
But we'll come back to that.

635
00:43:27,650 --> 00:43:30,030
But it's doing something clearly.

636
00:43:30,030 --> 00:43:32,470
Again, it's inducing a
cycle, a loop, right.

637
00:43:32,470 --> 00:43:34,870
You're literally going
back to some earlier step.

638
00:43:34,870 --> 00:43:38,692
And so indeed, this is going to
implement some kind of cycle.

639
00:43:38,692 --> 00:43:41,150
But you're not going to get
stuck in this endlessly, right.

640
00:43:41,150 --> 00:43:45,390
Because if you're constantly checking is
Mike here, or to the left, or not here,

641
00:43:45,390 --> 00:43:47,460
eventually he's not going to be there.

642
00:43:47,460 --> 00:43:50,690
And you can just quit altogether
as per that last line.

643
00:43:50,690 --> 00:43:51,934
So that's it for vocabulary.

644
00:43:51,934 --> 00:43:54,350
And this was what we would
generally call pseudocode code.

645
00:43:54,350 --> 00:43:55,670
It's not an actual language.

646
00:43:55,670 --> 00:43:58,505
It's just very terse English,
but it communicates the point.

647
00:43:58,505 --> 00:43:59,880
There's no formal structure here.

648
00:43:59,880 --> 00:44:01,838
You just use it's few
words, but as clear words

649
00:44:01,838 --> 00:44:03,970
as you can to communicate your idea.

650
00:44:03,970 --> 00:44:06,680
Now how good is that algorithm
and how much better is it?

651
00:44:06,680 --> 00:44:09,670
Well, we don't have to get into the
specifics of numbers or anything

652
00:44:09,670 --> 00:44:10,169
like that.

653
00:44:10,169 --> 00:44:12,400
But we can look at the
shape of this solution.

654
00:44:12,400 --> 00:44:16,294
So if we just draw some xy plot
here on the horizontal axis here.

655
00:44:16,294 --> 00:44:17,960
Let's just call the size of the problem.

656
00:44:17,960 --> 00:44:21,640
And a computer scientist would
typically use n as the variable here.

657
00:44:21,640 --> 00:44:25,790
So n pages, or n people in the room, or
whatever it is you're trying to count.

658
00:44:25,790 --> 00:44:29,139
And then on the vertical axis on the
left, that would be the time to solve.

659
00:44:29,139 --> 00:44:31,430
So how many seconds does it
take me to find Mike Smith?

660
00:44:31,430 --> 00:44:32,721
Or how many steps does it take?

661
00:44:32,721 --> 00:44:34,200
How many page turns does it take?

662
00:44:34,200 --> 00:44:37,470
So that's how much it costs
me in time to solve a problem.

663
00:44:37,470 --> 00:44:41,130
And we might draw the first
algorithms slope, if you will,

664
00:44:41,130 --> 00:44:43,010
as just this straight line in red.

665
00:44:43,010 --> 00:44:44,550
And I'll call it n.

666
00:44:44,550 --> 00:44:45,217
Why n?

667
00:44:45,217 --> 00:44:47,050
Why is it just this one
to one relationship?

668
00:44:47,050 --> 00:44:48,800
Well, if Verizon or
whatever phone company

669
00:44:48,800 --> 00:44:51,230
adds one more page to
the phone book next year,

670
00:44:51,230 --> 00:44:54,470
that might push Mike one
more step closer to the end,

671
00:44:54,470 --> 00:44:56,050
depending on where that page is.

672
00:44:56,050 --> 00:44:58,480
And so the effect might just
be to add one more second.

673
00:44:58,480 --> 00:44:59,620
Or one more page turn.

674
00:44:59,620 --> 00:45:01,070
A one to one ratio.

675
00:45:01,070 --> 00:45:03,510
By contrast, the second algorithm.

676
00:45:03,510 --> 00:45:07,506
How much faster was that intuitively?

677
00:45:07,506 --> 00:45:08,880
Where I went two pages at a time?

678
00:45:08,880 --> 00:45:09,764
Yeah.

679
00:45:09,764 --> 00:45:10,597
STUDENT: [INAUDIBLE]

680
00:45:10,597 --> 00:45:13,355


681
00:45:13,355 --> 00:45:14,180
DAVID MALAN: Yeah.

682
00:45:14,180 --> 00:45:15,320
So it's going to be twice as fast.

683
00:45:15,320 --> 00:45:17,444
And we would draw that here
depending on the scale.

684
00:45:17,444 --> 00:45:20,320
It still is a straight line,
but lower than the red line.

685
00:45:20,320 --> 00:45:22,510
Because for some number
of pages, if it takes

686
00:45:22,510 --> 00:45:24,460
you this many steps with
the first algorithm,

687
00:45:24,460 --> 00:45:26,670
it's going to take you half
as many steps with the second.

688
00:45:26,670 --> 00:45:28,870
And so the yellow line
describing the second algorithm

689
00:45:28,870 --> 00:45:30,090
is just going to be below it.

690
00:45:30,090 --> 00:45:33,350
But what's really powerful is to
think about the third and final,

691
00:45:33,350 --> 00:45:36,580
and amazingly most intuitive
algorithm, that has this shape.

692
00:45:36,580 --> 00:45:38,820
Technically we would call
this a logarithmic curve.

693
00:45:38,820 --> 00:45:40,409
Log base 2 of n in this case.

694
00:45:40,409 --> 00:45:41,700
But that doesn't really matter.

695
00:45:41,700 --> 00:45:45,240
What matters really is the fundamentally
different shape that it has.

696
00:45:45,240 --> 00:45:48,910
And you can consider just how
much shorter this line really

697
00:45:48,910 --> 00:45:50,720
is in the long run.

698
00:45:50,720 --> 00:45:51,970
It's constantly increasing.

699
00:45:51,970 --> 00:45:53,720
It doesn't flatten out perfectly.

700
00:45:53,720 --> 00:46:00,130
But it grows ever so much more slowly
as the problem gets bigger and bigger.

701
00:46:00,130 --> 00:46:02,810
And you can think of it this
way-- if Verizon doesn't just

702
00:46:02,810 --> 00:46:06,510
add one page next year but doubles
the number of pages in the phone book,

703
00:46:06,510 --> 00:46:08,840
the first algorithm might
take twice as many steps.

704
00:46:08,840 --> 00:46:11,460
If it's 1,000 pages this
year, 2,000 pages next year,

705
00:46:11,460 --> 00:46:13,280
Mike might be that much farther away.

706
00:46:13,280 --> 00:46:15,480
So it's 1,000 extra steps to find him.

707
00:46:15,480 --> 00:46:17,710
The second algorithm
might be only 500 more

708
00:46:17,710 --> 00:46:21,590
steps to find him because again,
I'm flying through it two at a time.

709
00:46:21,590 --> 00:46:23,050
But what about the third algorithm?

710
00:46:23,050 --> 00:46:25,110
If Verizon doubles the
size of the phone book

711
00:46:25,110 --> 00:46:28,720
next year from 1,000 to 2000
pages, how many more steps

712
00:46:28,720 --> 00:46:31,640
is my third algorithm going to take?

713
00:46:31,640 --> 00:46:32,730
Yeah, it's just one.

714
00:46:32,730 --> 00:46:34,700
And that's the powerful idea.

715
00:46:34,700 --> 00:46:38,880
You can take 1,000 page bite
out of that problem at once.

716
00:46:38,880 --> 00:46:40,610
And now if you consider
a silly scenario,

717
00:46:40,610 --> 00:46:43,420
but it kind of speaks to the
power of this kind of intuition--

718
00:46:43,420 --> 00:46:47,594
if a phone book had, like, four billion
pages, feels like a really big problem.

719
00:46:47,594 --> 00:46:49,510
And indeed, it might
take me four billion page

720
00:46:49,510 --> 00:46:52,649
turns to find Mike Smith in that
case with the first algorithm.

721
00:46:52,649 --> 00:46:54,940
But how many steps would it
take in the third algorithm

722
00:46:54,940 --> 00:46:57,685
to find Mike among four
billion pieces of paper?

723
00:46:57,685 --> 00:47:00,965


724
00:47:00,965 --> 00:47:02,340
So four billion you tear in half.

725
00:47:02,340 --> 00:47:03,320
You get two billion.

726
00:47:03,320 --> 00:47:08,910
Then one billion, then 500 million,
250 million, 125 million-- but it

727
00:47:08,910 --> 00:47:10,880
feels like this is
going to take a while.

728
00:47:10,880 --> 00:47:13,440
I might need 32 fingers
to count up that high.

729
00:47:13,440 --> 00:47:17,440
But it is indeed as
few as 32 page tears.

730
00:47:17,440 --> 00:47:20,160
You can go from four
billion to one page dividing

731
00:47:20,160 --> 00:47:23,130
the original number of
pages in half 32 times

732
00:47:23,130 --> 00:47:25,390
until you're left with
just that single page.

733
00:47:25,390 --> 00:47:27,420
Now, of course, I'm cheating here.

734
00:47:27,420 --> 00:47:32,570
It's not that we are just being sort
of stupid entirely with the first two

735
00:47:32,570 --> 00:47:33,570
algorithms.

736
00:47:33,570 --> 00:47:37,600
I am cheating in some sense, or
really I'm leveraging an assumption.

737
00:47:37,600 --> 00:47:41,710
What was true about the phone book
in its original form that allowed

738
00:47:41,710 --> 00:47:43,550
me to even use that third algorithm?

739
00:47:43,550 --> 00:47:44,210
Yeah?

740
00:47:44,210 --> 00:47:45,460
AUDIENCE: It was alphabetized.

741
00:47:45,460 --> 00:47:47,230
DAVID MALAN: It was alphabetized, right?

742
00:47:47,230 --> 00:47:49,600
If it were just in random
order, this is a waste

743
00:47:49,600 --> 00:47:50,980
of time, this whole conversation.

744
00:47:50,980 --> 00:47:53,600
I have to look at every
page if it's in random order

745
00:47:53,600 --> 00:47:56,450
to find Mike Smith before I
can conclude he's there or not.

746
00:47:56,450 --> 00:47:58,980
And so the corner we
have cut is that I have

747
00:47:58,980 --> 00:48:01,852
assumed that someone else in
this case did the work for me.

748
00:48:01,852 --> 00:48:04,560
And so that ultimately invites
the question, well, wait a minute.

749
00:48:04,560 --> 00:48:07,384
How do you sort 1,000
pages of names and numbers?

750
00:48:07,384 --> 00:48:09,300
That's actually a different
problem, something

751
00:48:09,300 --> 00:48:10,674
we'll come back to in the future.

752
00:48:10,674 --> 00:48:14,230
But when you think about websites
like Facebook and Google for Gmail

753
00:48:14,230 --> 00:48:16,550
and things like Google's
own search indexes,

754
00:48:16,550 --> 00:48:19,900
when you have millions or billions of
pieces of data being stored these days,

755
00:48:19,900 --> 00:48:22,760
searching-- and not to mention
sorting those problems--

756
00:48:22,760 --> 00:48:25,550
is ultimately a challenge unto itself.

757
00:48:25,550 --> 00:48:28,350
And indeed, this then is
just one of those challenges

758
00:48:28,350 --> 00:48:29,560
that we'll be looking at.

759
00:48:29,560 --> 00:48:31,690
So now let's take a moment
and take a look at CS50

760
00:48:31,690 --> 00:48:35,182
itself and give you a sense of
what's in store this semester.

761
00:48:35,182 --> 00:48:37,640
Indeed, if you haven't already,
do take a look at this URL.

762
00:48:37,640 --> 00:48:39,980
And as Patrick alluded
to, this year we're

763
00:48:39,980 --> 00:48:43,230
making a significant investment all
the more in the course's support

764
00:48:43,230 --> 00:48:46,270
structure in terms of the TAs
and the CAs, office hours,

765
00:48:46,270 --> 00:48:49,620
sections availability, and
digital materials online, as well.

766
00:48:49,620 --> 00:48:53,589
Indeed, in terms of the course's
lecture, we're here today.

767
00:48:53,589 --> 00:48:55,880
And the expectations this
year officially of the course

768
00:48:55,880 --> 00:48:58,470
are attend to today, the course's
last lecture, and a course

769
00:48:58,470 --> 00:49:01,261
roughly in the middle of the semester
with every lecture in between

770
00:49:01,261 --> 00:49:03,380
made available generally
on a Friday afternoon

771
00:49:03,380 --> 00:49:06,340
online, both for Yale students
and Harvard students this year.

772
00:49:06,340 --> 00:49:08,190
Indeed, one of the
fundamental changes is

773
00:49:08,190 --> 00:49:10,410
that we're adopting at
Harvard a paradigm very much

774
00:49:10,410 --> 00:49:12,670
like we did here last
year and now this year,

775
00:49:12,670 --> 00:49:16,400
so that similarly, we still film most
of the course's lectures in Cambridge

776
00:49:16,400 --> 00:49:19,000
but make them available earlier
than we have in the past

777
00:49:19,000 --> 00:49:21,640
so that those of you-- if you
would like to, for instance,

778
00:49:21,640 --> 00:49:24,500
get a head start on materials
on the the first weekend rather

779
00:49:24,500 --> 00:49:28,100
than the second weekend, you'll have
access to these kinds of materials,

780
00:49:28,100 --> 00:49:32,661
searchable, embeddable, hyperlinkable
to related resources all the earlier.

781
00:49:32,661 --> 00:49:35,660
In terms of the topics, to give you
a sense of the course's trajectory--

782
00:49:35,660 --> 00:49:38,465
and some of this might be jargon for
now, but not for long, rest assured.

783
00:49:38,465 --> 00:49:41,110
We'll start today, ultimately,
with looking at one programming

784
00:49:41,110 --> 00:49:42,360
language called Scratch.

785
00:49:42,360 --> 00:49:45,480
We'll transition thereafter
next week to something called C

786
00:49:45,480 --> 00:49:48,240
and then looking at other building
blocks for solving problems,

787
00:49:48,240 --> 00:49:52,330
things called arrays and algorithms,
how we use memory to our advantage

788
00:49:52,330 --> 00:49:54,426
and disadvantage, and
things like data structures,

789
00:49:54,426 --> 00:49:57,300
and then toward the tail end of the
class looking at machine learning

790
00:49:57,300 --> 00:49:59,510
and looking at another
language called Python,

791
00:49:59,510 --> 00:50:03,560
how the web works, how the internet more
generally works, protocols like HTTP,

792
00:50:03,560 --> 00:50:07,050
languages for databases like
SQL, JavaScript for the web,

793
00:50:07,050 --> 00:50:09,100
and ultimately tying
all of those together.

794
00:50:09,100 --> 00:50:10,808
And so indeed, at the
end of the day, you

795
00:50:10,808 --> 00:50:16,350
will not learn in this class Scratch
or C or Python or SQL or JavaScript.

796
00:50:16,350 --> 00:50:19,660
You will instead more generally learn
computer science and the foundations

797
00:50:19,660 --> 00:50:21,890
thereof, and you will
learn how to program

798
00:50:21,890 --> 00:50:24,900
in any number of these
languages along the way.

799
00:50:24,900 --> 00:50:27,070
So indeed, one of the goals
of the course in the end

800
00:50:27,070 --> 00:50:30,260
is to take off all of the course's
training wheels by those final weeks

801
00:50:30,260 --> 00:50:32,810
so that after this, you can
return to your own fields--

802
00:50:32,810 --> 00:50:34,610
whether that is or is
not computer science

803
00:50:34,610 --> 00:50:38,390
or engineering, in the natural
sciences, arts, humanities, or beyond--

804
00:50:38,390 --> 00:50:40,820
and bring some of this
course's ideas and this field's

805
00:50:40,820 --> 00:50:43,500
ideas and practical
skills to your own domain

806
00:50:43,500 --> 00:50:45,580
in order to solve problems therein.

807
00:50:45,580 --> 00:50:49,090
What we'll be doing here meanwhile
in most Thursdays after today

808
00:50:49,090 --> 00:50:52,260
is with the course's heads leading
what we'll call walkthroughs

809
00:50:52,260 --> 00:50:53,720
of the course's problem sets.

810
00:50:53,720 --> 00:50:55,710
So each week when we
have a problem set, we'll

811
00:50:55,710 --> 00:50:59,000
be walking through in a location
like this the course's challenges,

812
00:50:59,000 --> 00:51:01,682
offering you some tips and
tricks and design techniques.

813
00:51:01,682 --> 00:51:03,640
But if you're not able
to make those in person,

814
00:51:03,640 --> 00:51:05,860
realize those same
resources will be embedded

815
00:51:05,860 --> 00:51:07,690
by one of the course's
teaching assistants

816
00:51:07,690 --> 00:51:09,960
in the problem sets themselves, as well.

817
00:51:09,960 --> 00:51:13,224
The problem sets this year, unlike
last year, based on feedback,

818
00:51:13,224 --> 00:51:14,640
will still be released on Fridays.

819
00:51:14,640 --> 00:51:17,410
But rather than being due
the subsequent Friday,

820
00:51:17,410 --> 00:51:21,179
thereby giving you only seven days,
will effectively be due 10 days later.

821
00:51:21,179 --> 00:51:23,720
And indeed, this will mean that
they'll overlap by a weekend.

822
00:51:23,720 --> 00:51:25,469
But we hope this year
especially this will

823
00:51:25,469 --> 00:51:28,420
allow students to better accommodate
ebb and flow in their schedules,

824
00:51:28,420 --> 00:51:31,140
whether it's academics or
extracurriculars or athletics

825
00:51:31,140 --> 00:51:32,380
or midterm season.

826
00:51:32,380 --> 00:51:36,160
You can either front-load or back-load
your week focusing on CS50 based

827
00:51:36,160 --> 00:51:38,500
on your own week's actual course load.

828
00:51:38,500 --> 00:51:41,090
The problem sets themselves
will cover a range of languages,

829
00:51:41,090 --> 00:51:44,090
though we'll focus
predominantly early on on C

830
00:51:44,090 --> 00:51:49,140
before we focus thereafter on higher
level, more web-centric languages.

831
00:51:49,140 --> 00:51:52,070
And then a couple of FAQs here--
should you take a class like CS50

832
00:51:52,070 --> 00:51:53,000
as a first-year?

833
00:51:53,000 --> 00:51:54,070
So absolutely.

834
00:51:54,070 --> 00:51:56,570
And indeed, it's not
necessarily something

835
00:51:56,570 --> 00:52:00,540
you should postpone until you've cut
your teeth on other types of classes.

836
00:52:00,540 --> 00:52:02,390
But rather, consider
that for many students,

837
00:52:02,390 --> 00:52:05,140
myself included back in the day,
this is a very unfamiliar field,

838
00:52:05,140 --> 00:52:07,097
especially if you
never did take a AP CSA

839
00:52:07,097 --> 00:52:08,680
or something like that in high school.

840
00:52:08,680 --> 00:52:10,805
But realize that early on,
whether it's this course

841
00:52:10,805 --> 00:52:14,000
or some other introductory course,
now is indeed the best time,

842
00:52:14,000 --> 00:52:18,182
I think, to find some new path or
some new academic interest, as well.

843
00:52:18,182 --> 00:52:21,140
And then taking with other courses--
so one of the key differences here

844
00:52:21,140 --> 00:52:24,006
versus Harvard is that we only
take four courses per semester

845
00:52:24,006 --> 00:52:25,130
at Harvard for some reason.

846
00:52:25,130 --> 00:52:27,594
And you guys actually pull
off some 36 courses in total

847
00:52:27,594 --> 00:52:30,510
over the course of your four years,
which means generally four or five

848
00:52:30,510 --> 00:52:31,140
classes.

849
00:52:31,140 --> 00:52:34,467
And I do think it's quite fair to say
and to disclaim CS50, by design, is

850
00:52:34,467 --> 00:52:36,800
probably not the type of class
that you should typically

851
00:52:36,800 --> 00:52:39,780
take with four other
courses for a total of five

852
00:52:39,780 --> 00:52:42,349
because psets are by
design fairly intensive.

853
00:52:42,349 --> 00:52:44,140
Indeed, I too learned
this back in the day.

854
00:52:44,140 --> 00:52:47,210
I wouldn't describe CS50 and
computer science, programming

855
00:52:47,210 --> 00:52:50,577
as so much hard as it
is just time-consuming.

856
00:52:50,577 --> 00:52:52,660
It's not the kind of thing
where after dinner, you

857
00:52:52,660 --> 00:52:54,410
can go back to your dorm
room, sit down, and start

858
00:52:54,410 --> 00:52:55,810
focusing on the pset
thinking, all right,

859
00:52:55,810 --> 00:52:57,440
I'm gonna bang this out
tonight and then move

860
00:52:57,440 --> 00:52:59,100
on to my next subject the next day.

861
00:52:59,100 --> 00:53:00,550
Sometimes you just hit a wall.

862
00:53:00,550 --> 00:53:01,790
You have bugs in your code.

863
00:53:01,790 --> 00:53:04,000
You don't necessarily know
how to solve some problem.

864
00:53:04,000 --> 00:53:07,770
And one of the key features of
programming for myself to this day

865
00:53:07,770 --> 00:53:10,580
is you just kind of need to take
a step back sometimes, sleep on it

866
00:53:10,580 --> 00:53:13,970
or think on it over the course
of a jog or some other activity,

867
00:53:13,970 --> 00:53:15,340
and then come back to it fresh.

868
00:53:15,340 --> 00:53:17,030
And you just need these windows of time.

869
00:53:17,030 --> 00:53:19,010
And indeed, that's why we've
lengthened the amount of time

870
00:53:19,010 --> 00:53:21,810
available for the problem sets
this year and also, per that URL

871
00:53:21,810 --> 00:53:24,050
I put up earlier as to
what's new this semester,

872
00:53:24,050 --> 00:53:27,050
trimmed the problem sets so that
they're fundamentally no less rigorous,

873
00:53:27,050 --> 00:53:29,841
and the takeaways are no less, but
there's a lot less front matter,

874
00:53:29,841 --> 00:53:33,730
a lot less legwork that you need to
do at the front of every problem set,

875
00:53:33,730 --> 00:53:36,780
as you'll see, before you can
actually dive into the meat of it.

876
00:53:36,780 --> 00:53:39,600
So realize that those and other
changes are on the horizon

877
00:53:39,600 --> 00:53:42,590
to better accommodate students,
but ultimately to make sure

878
00:53:42,590 --> 00:53:44,960
that the takeaways are
indeed as high as possible.

879
00:53:44,960 --> 00:53:47,430
So while more work than it
might be in a typical class,

880
00:53:47,430 --> 00:53:51,220
we do hope that the returns for
you and the takeaways for you

881
00:53:51,220 --> 00:53:53,590
and the skills and ideas
with which you exit

882
00:53:53,590 --> 00:53:56,021
are all the more compelling as a result.

883
00:53:56,021 --> 00:53:58,520
And to get you there-- and this
is one of the key takeaways,

884
00:53:58,520 --> 00:54:01,570
as Patrick alluded earlier-- is
the course's support structure.

885
00:54:01,570 --> 00:54:05,820
So not only does CS50 have one of
the largest course staffs on campus.

886
00:54:05,820 --> 00:54:07,850
It also has one of the
most undergraduate.

887
00:54:07,850 --> 00:54:09,800
Indeed, CS50 last year
was the first class

888
00:54:09,800 --> 00:54:11,466
to have an undergraduate teaching staff.

889
00:54:11,466 --> 00:54:14,670
And testament to that success do now
many other courses within Yale CS

890
00:54:14,670 --> 00:54:15,600
have that, as well.

891
00:54:15,600 --> 00:54:19,006
And for students, specifically,
will these TAs and course assistants

892
00:54:19,006 --> 00:54:21,130
be supporting a whole
network of support resources,

893
00:54:21,130 --> 00:54:24,350
among them sections or
recitations, weekly opportunities

894
00:54:24,350 --> 00:54:27,774
to have more intimate discussions
and reviews of material targeted

895
00:54:27,774 --> 00:54:30,690
for different tracks, for students
less comfortable, more comfortable,

896
00:54:30,690 --> 00:54:31,820
or somewhere in between.

897
00:54:31,820 --> 00:54:34,986
These will follow the availability of
the lectures by several days each week

898
00:54:34,986 --> 00:54:36,070
on Mondays and Tuesdays.

899
00:54:36,070 --> 00:54:38,070
And then office hours--
one-on-one opportunities

900
00:54:38,070 --> 00:54:41,590
for help from the course CAs and TAs
will be on Wednesdays and Thursdays

901
00:54:41,590 --> 00:54:44,500
and Sundays at multiple
times, all of which

902
00:54:44,500 --> 00:54:48,280
will be posted on the course's website,
even more than last year, as well.

903
00:54:48,280 --> 00:54:51,601
But what's key to CS50, if
not admittedly a bit unusual,

904
00:54:51,601 --> 00:54:53,850
is the course's culture that
we've tried to cultivate,

905
00:54:53,850 --> 00:54:56,772
both in Cambridge for many years
and now most recently in New Haven.

906
00:54:56,772 --> 00:54:59,230
And in fact, coming up this
Saturday, if you haven't heard,

907
00:54:59,230 --> 00:55:02,510
is CS50 Puzzle Day, which has
nothing to do with computer science

908
00:55:02,510 --> 00:55:05,530
but is entirely designed to send
a message that computer science is

909
00:55:05,530 --> 00:55:06,765
about problem solving.

910
00:55:06,765 --> 00:55:09,640
And indeed, if you'd like to partner
with one or two or three friends

911
00:55:09,640 --> 00:55:12,250
and form a team for CS50
Puzzle Day, take a look

912
00:55:12,250 --> 00:55:14,110
at the adverts that are on the way out.

913
00:55:14,110 --> 00:55:17,682
And three hours of pizza and
puzzles and prizes await.

914
00:55:17,682 --> 00:55:19,390
And indeed, for the
first time this year,

915
00:55:19,390 --> 00:55:20,973
it won't be held jointly with Harvard.

916
00:55:20,973 --> 00:55:23,630
It will be here independently at Yale.

917
00:55:23,630 --> 00:55:25,915
So keep an eye out for
those if you haven't.

918
00:55:25,915 --> 00:55:28,540
Most every Friday in the semester
do we try to make a big class

919
00:55:28,540 --> 00:55:32,810
feel small and bring some 50 students
to lunch with the course's staff,

920
00:55:32,810 --> 00:55:34,830
with alumni, friends
from industry to talk

921
00:55:34,830 --> 00:55:38,730
about what life is like after a
class like CS50 and over the summers

922
00:55:38,730 --> 00:55:40,350
and after graduation.

923
00:55:40,350 --> 00:55:42,380
So keep an eye out for
invitations to that.

924
00:55:42,380 --> 00:55:44,088
For the first time
ever this year will we

925
00:55:44,088 --> 00:55:47,520
hold the first ever CS50 coding
contest, an optional opt-in opportunity

926
00:55:47,520 --> 00:55:51,680
mid-semester, after all of us have had
some six or seven weeks of programming

927
00:55:51,680 --> 00:55:56,200
in C under their belts to compete,
if you would so choose-- again

928
00:55:56,200 --> 00:55:58,560
on teams-- trying to
solve as many challenges

929
00:55:58,560 --> 00:56:02,260
as you can in programming with
friends of yours against others.

930
00:56:02,260 --> 00:56:04,950
And toward the tail of the semester
will we charter some buses,

931
00:56:04,950 --> 00:56:06,950
actually spend some time
in Cambridge, if you'd

932
00:56:06,950 --> 00:56:09,560
like to join us, for the
so-called CS50 hackathon.

933
00:56:09,560 --> 00:56:10,700
At 7 PM we'll begin.

934
00:56:10,700 --> 00:56:12,070
Around 9 PM, we'll have pizza.

935
00:56:12,070 --> 00:56:13,750
Around 1:00 AM, we'll have burritos.

936
00:56:13,750 --> 00:56:16,650
And anyone still awake on the
bus ride home around 5:00 AM,

937
00:56:16,650 --> 00:56:20,170
we'll stop off for pancakes
at IHOP on the way home--

938
00:56:20,170 --> 00:56:23,640
a 12-hour opportunity to immerse
yourself with classmates and staff

939
00:56:23,640 --> 00:56:26,050
in the course's final project,
which is an opportunity

940
00:56:26,050 --> 00:56:27,970
to go well beyond the
course's problem sets

941
00:56:27,970 --> 00:56:32,050
and design and implement most
anything of interest to you,

942
00:56:32,050 --> 00:56:35,270
that will ultimately be
featured here in Commons.

943
00:56:35,270 --> 00:56:38,610
The first ever CS50 fair was last
year, an end-of-semester exhibition

944
00:56:38,610 --> 00:56:41,560
or celebration of what everyone
in the class had accomplished,

945
00:56:41,560 --> 00:56:45,910
especially those, again, who went from
nothing to something, from zero to 60,

946
00:56:45,910 --> 00:56:48,550
having no prior background
and exhibiting, ultimately,

947
00:56:48,550 --> 00:56:53,060
something for the whole campus and,
if online, the world to see, as well.

948
00:56:53,060 --> 00:56:56,880
Now, these here are just a few of the
TAs and CAs that makes CS50 possible.

949
00:56:56,880 --> 00:56:59,134
Allow me to invite any
of those staff members

950
00:56:59,134 --> 00:57:01,800
who are here to come up on stage,
as well as the course's heads,

951
00:57:01,800 --> 00:57:04,885
to offer some words of
inspiration, as well.

952
00:57:04,885 --> 00:57:29,238


953
00:57:29,238 --> 00:57:30,050
ANDI: Hi, guys.

954
00:57:30,050 --> 00:57:31,390
Can you guys hear me?

955
00:57:31,390 --> 00:57:36,360
Thanks for joining us on this
lovely, rainy Thursday afternoon.

956
00:57:36,360 --> 00:57:37,110
My name is Andi.

957
00:57:37,110 --> 00:57:38,170
I'm a junior in Berkeley.

958
00:57:38,170 --> 00:57:43,350
And along with Stelios and Summer,
we will be your three head teaching

959
00:57:43,350 --> 00:57:45,377
assistants for this upcoming year.

960
00:57:45,377 --> 00:57:47,210
So, I guess, show of
hands-- how many of you

961
00:57:47,210 --> 00:57:52,780
have no intention of being a CS
major nor really diving deeply

962
00:57:52,780 --> 00:57:56,030
into computer science as a major here?

963
00:57:56,030 --> 00:57:56,620
Awesome.

964
00:57:56,620 --> 00:57:58,830
That's brilliant.

965
00:57:58,830 --> 00:58:01,950
So I'm actually a global affairs
and cognitive science major.

966
00:58:01,950 --> 00:58:03,880
I literally came to
Yale with the intention

967
00:58:03,880 --> 00:58:08,299
of never having to look at a
number ever again in my life.

968
00:58:08,299 --> 00:58:11,090
When I came to Yale, this was
something that was never on my radar.

969
00:58:11,090 --> 00:58:12,560
I wanted to learn about poetry.

970
00:58:12,560 --> 00:58:14,600
I wanted to learn about
international affairs.

971
00:58:14,600 --> 00:58:16,610
I wanted to learn about
watercolor drawings.

972
00:58:16,610 --> 00:58:19,460
Yes, we offer a class
on watercolor drawings.

973
00:58:19,460 --> 00:58:23,440
But I never really was interested
in anything STEM related.

974
00:58:23,440 --> 00:58:25,720
But then the older I
got, the more I realized

975
00:58:25,720 --> 00:58:29,440
that every field really in some
sense employs computer science,

976
00:58:29,440 --> 00:58:31,800
or if not computer science, computation.

977
00:58:31,800 --> 00:58:34,400
In fact, for my global
affairs capstone project,

978
00:58:34,400 --> 00:58:38,120
we're using data analytics
to analyze terrorist attacks

979
00:58:38,120 --> 00:58:39,780
for Boko Haram in Nigeria.

980
00:58:39,780 --> 00:58:43,610
And so as you can see, regardless
of what major you end up pursuing

981
00:58:43,610 --> 00:58:47,740
or what your interests here at Yale
are, programming and the foundations

982
00:58:47,740 --> 00:58:50,230
of whatever skills are super useful.

983
00:58:50,230 --> 00:58:55,940
And CS50 really is well equipped to
kind of lend a lot of its resources

984
00:58:55,940 --> 00:58:58,160
to you, regardless of
how comfortable you are

985
00:58:58,160 --> 00:59:00,690
or how interested you are
in pursuing the class.

986
00:59:00,690 --> 00:59:03,390
Summer's going to talk a little
bit about what you guys are

987
00:59:03,390 --> 00:59:05,735
going to learn about this year.

988
00:59:05,735 --> 00:59:06,610
SUMMER: Hi, everyone.

989
00:59:06,610 --> 00:59:07,420
I'm Summer Wu.

990
00:59:07,420 --> 00:59:09,190
I'm a junior in Morse.

991
00:59:09,190 --> 00:59:14,200
And I actually started out
as a CS50 student myself.

992
00:59:14,200 --> 00:59:17,560
So three years ago, I was on a gap year.

993
00:59:17,560 --> 00:59:20,040
I'd never taken a CS
class in high school,

994
00:59:20,040 --> 00:59:23,900
but I thought that in my free time,
it'd be cool to learn how to code.

995
00:59:23,900 --> 00:59:28,710
So I did a quick Google search,
looked for what was available online,

996
00:59:28,710 --> 00:59:33,090
and saw this video with muppets
and DJs and cool websites.

997
00:59:33,090 --> 00:59:35,550
I was like, I want to
learn how to do that.

998
00:59:35,550 --> 00:59:40,790
So I took the course, and I
just fell in love with it.

999
00:59:40,790 --> 00:59:46,510
But I remember being so jealous of the
kids who could attend the hackathon,

1000
00:59:46,510 --> 00:59:50,710
attend Puzzle Day, attend office
hours, get help from TAs in person.

1001
00:59:50,710 --> 00:59:53,510
And so I never imagined
that I'd get the chance

1002
00:59:53,510 --> 00:59:56,740
to be here involved in
the course that first got

1003
00:59:56,740 --> 00:59:59,730
me interested in computer
science and is the reason why

1004
00:59:59,730 --> 01:00:01,790
I'm a computer science major today.

1005
01:00:01,790 --> 01:00:05,390
So I'll warn you, this class
is going to stretch you.

1006
01:00:05,390 --> 01:00:07,220
It's going to challenge you.

1007
01:00:07,220 --> 01:00:10,010
But it's also going to
teach you how to do things

1008
01:00:10,010 --> 01:00:11,606
that you never imagined you could.

1009
01:00:11,606 --> 01:00:15,430


1010
01:00:15,430 --> 01:00:18,260
STELIOS: Hi, everyone.

1011
01:00:18,260 --> 01:00:19,610
My name is Stelios.

1012
01:00:19,610 --> 01:00:24,340
I am a junior in Branford
College and a CS major.

1013
01:00:24,340 --> 01:00:27,740
I'm also from Athens, Greece.

1014
01:00:27,740 --> 01:00:29,930
I'm really looking forward
to meeting all of you,

1015
01:00:29,930 --> 01:00:35,110
chatting with you at section, at
office hours, at Friday lunches.

1016
01:00:35,110 --> 01:00:37,350
I'm really excited because
we've put so much effort

1017
01:00:37,350 --> 01:00:40,750
into creating a unique support
structure for all of you

1018
01:00:40,750 --> 01:00:45,270
to make your experience with
the course the best possible.

1019
01:00:45,270 --> 01:00:48,740
And I hope that although most of
you have probably not taken a CS

1020
01:00:48,740 --> 01:00:53,410
course before, I hope that's CS50
for you is what sparks interest

1021
01:00:53,410 --> 01:00:56,360
to further pursue computer
science in the future,

1022
01:00:56,360 --> 01:00:59,370
as it has done with so
many people in the past.

1023
01:00:59,370 --> 01:01:02,840
So thank you for being
here, excited to see you.

1024
01:01:02,840 --> 01:01:04,587
Jason Hirschhorn.

1025
01:01:04,587 --> 01:01:05,920
JASON HIRSCHHORN: Hi, everybody.

1026
01:01:05,920 --> 01:01:07,800
My name is Jason Hirschhorn.

1027
01:01:07,800 --> 01:01:09,150
I live in Silliman.

1028
01:01:09,150 --> 01:01:13,010
And I went to Harvard as an undergrad
and majored in social studies

1029
01:01:13,010 --> 01:01:14,970
and minored in computer science.

1030
01:01:14,970 --> 01:01:19,200
And one of my principal roles here
is to support this wonderful staff

1031
01:01:19,200 --> 01:01:20,730
as they support you all.

1032
01:01:20,730 --> 01:01:22,510
In fact, this is not all of them.

1033
01:01:22,510 --> 01:01:27,330
There are 55 undergraduates and
graduates here to support you all.

1034
01:01:27,330 --> 01:01:30,520
And I daresay one of the best
parts of the course for you

1035
01:01:30,520 --> 01:01:34,180
all is getting to work with
them, getting to know them,

1036
01:01:34,180 --> 01:01:38,489
getting to see them, both in CS50
and outside of CS50 this semester

1037
01:01:38,489 --> 01:01:39,780
and for many semesters to come.

1038
01:01:39,780 --> 01:01:42,870
So hopefully you'll take the
course because hopefully you

1039
01:01:42,870 --> 01:01:47,160
get to interact with the
wonderful staff we have on stage.

1040
01:01:47,160 --> 01:01:51,077
SPEAKER: Well, let me finish
by saying it will be fun.

1041
01:01:51,077 --> 01:01:52,910
DAVID MALAN: Well,
thanks to our whole team.

1042
01:01:52,910 --> 01:01:55,710
Allow me to dim the lights and
allow some more of our team,

1043
01:01:55,710 --> 01:01:58,990
both from Cambridge and New Haven,
to say hello as these guys file off.

1044
01:01:58,990 --> 01:02:02,230
And after that will we transition to
the first of our programming engagements

1045
01:02:02,230 --> 01:02:03,684
with this language called Scratch.

1046
01:02:03,684 --> 01:02:04,600
So thanks to the team.

1047
01:02:04,600 --> 01:02:06,870
Let's dim the lights and
hear from a few others.

1048
01:02:06,870 --> 01:02:10,307
[APPLAUSE]

1049
01:02:10,307 --> 01:02:11,780


1050
01:02:11,780 --> 01:02:14,240
[VIDEO  PLAYBACK]

1051
01:02:14,240 --> 01:02:19,310
-The mission of CS50 is to make you
more comfortable with a totally new way

1052
01:02:19,310 --> 01:02:21,047
of thinking, this computational mindset.

1053
01:02:21,047 --> 01:02:22,880
-It made computer science
interesting, which

1054
01:02:22,880 --> 01:02:26,341
is something I didn't really realize
was possible until I took the class.

1055
01:02:26,341 --> 01:02:27,090
-I was like, whoa.

1056
01:02:27,090 --> 01:02:30,220
I'm really translating my thoughts
into a computer right now.

1057
01:02:30,220 --> 01:02:34,070
-Even if you don't have any background
in computer science or any experience,

1058
01:02:34,070 --> 01:02:36,240
this is actually the class for you.

1059
01:02:36,240 --> 01:02:38,350
-So I definitely want
my students to just

1060
01:02:38,350 --> 01:02:40,450
get excited about computer science.

1061
01:02:40,450 --> 01:02:43,287
Not just programming, but
thinking like a computer scientist

1062
01:02:43,287 --> 01:02:45,370
is really what I want to
try to teach my freshman.

1063
01:02:45,370 --> 01:02:47,660
-CS50 is hard and rewarding.

1064
01:02:47,660 --> 01:02:48,692
-An experience.

1065
01:02:48,692 --> 01:02:49,556
-Extravaganza.

1066
01:02:49,556 --> 01:02:52,450
-It's bringing us to the next level.

1067
01:02:52,450 --> 01:02:54,950
[MUSIC PLAYING]

1068
01:02:54,950 --> 01:02:58,267
-The TFs are, I think, the
lifeblood of the course.

1069
01:02:58,267 --> 01:03:00,660
-I'm excited to have
my students I'm helping

1070
01:03:00,660 --> 01:03:04,127
have that aha moment to realize
what they're actually trying

1071
01:03:04,127 --> 01:03:05,710
to do, to figure out how to do a pset.

1072
01:03:05,710 --> 01:03:07,538
-CS50's definitely a hard course.

1073
01:03:07,538 --> 01:03:10,060
But unlike any other
course really at Yale,

1074
01:03:10,060 --> 01:03:11,859
it has such a great,
supportive community.

1075
01:03:11,859 --> 01:03:13,650
-You absolutely don't
need to know anything

1076
01:03:13,650 --> 01:03:15,441
about coding to be able
to take the course.

1077
01:03:15,441 --> 01:03:18,370
-It's amazing to watch how far
people come in one semester.

1078
01:03:18,370 --> 01:03:21,710
-You weren't alone sitting in
your room learning to code,

1079
01:03:21,710 --> 01:03:23,270
but it was more than just a class.

1080
01:03:23,270 --> 01:03:24,144
It was an experience.

1081
01:03:24,144 --> 01:03:28,600
-The best way to learn concepts and
to process them is by teaching others.

1082
01:03:28,600 --> 01:03:30,133
-What is the telephone split?

1083
01:03:30,133 --> 01:03:33,034
[MUSIC PLAYING]

1084
01:03:33,034 --> 01:03:34,180
-And this is CS50.

1085
01:03:34,180 --> 01:03:36,910
[MUSIC PLAYING]

1086
01:03:36,910 --> 01:03:37,820


1087
01:03:37,820 --> 01:03:38,480
-This is CS50.

1088
01:03:38,480 --> 01:03:39,546
-Got a problem?

1089
01:03:39,546 --> 01:03:40,952
Tear it in half.

1090
01:03:40,952 --> 01:03:41,904
[MUSIC PLAYING]

1091
01:03:41,904 --> 01:03:44,284
Throw it away.

1092
01:03:44,284 --> 01:03:45,620
DAVID MALAN: All right.

1093
01:03:45,620 --> 01:03:49,290
So let's tackle-- in a little
bit, incidentally, it's

1094
01:03:49,290 --> 01:03:51,370
been this tradition for
some reason for 10 years

1095
01:03:51,370 --> 01:03:53,360
to serve cake at the
start and the end of CS50.

1096
01:03:53,360 --> 01:03:56,900
So awaiting you at the end of
today, in addition to syllabi,

1097
01:03:56,900 --> 01:04:00,370
will be some cake as well, and
the course's staff to say hello.

1098
01:04:00,370 --> 01:04:03,210
But now, let's transition to the
first of our languages, where

1099
01:04:03,210 --> 01:04:07,070
we'll spend really just a week and one
problem set on this domain, Scratch.

1100
01:04:07,070 --> 01:04:09,260
And you'll find if you've
programmed before, many

1101
01:04:09,260 --> 01:04:12,380
of the ideas and the
possibilities are familiar to you.

1102
01:04:12,380 --> 01:04:14,260
But you'll find that
it's fun along the way

1103
01:04:14,260 --> 01:04:17,301
to figure out exactly how to translate
some of the ideas you already know

1104
01:04:17,301 --> 01:04:19,952
to this particular environment
to really impress your family

1105
01:04:19,952 --> 01:04:23,160
and friends with your work, which can
go online, if you so choose, afterward.

1106
01:04:23,160 --> 01:04:24,951
And if you have no
prior experience and are

1107
01:04:24,951 --> 01:04:27,640
among the majority of
students less comfortable,

1108
01:04:27,640 --> 01:04:31,420
realize that many of the ideas we
just explored with reality-- things

1109
01:04:31,420 --> 01:04:34,070
like phone books and attendance
and so forth-- translate

1110
01:04:34,070 --> 01:04:38,380
fairly nicely to a computer,
but not if you use,

1111
01:04:38,380 --> 01:04:39,810
initially, a language like this.

1112
01:04:39,810 --> 01:04:42,390
So this is a program written
in a language called C.

1113
01:04:42,390 --> 01:04:44,690
And we'll spend quite a bit
of time in C, ultimately.

1114
01:04:44,690 --> 01:04:48,660
But odds are, this will look a bit
cryptic to you at first glance.

1115
01:04:48,660 --> 01:04:51,860
In fact, there's a lot of weird
syntax, parentheses, angle brackets,

1116
01:04:51,860 --> 01:04:53,522
curly braces, quotes, and semicolons.

1117
01:04:53,522 --> 01:04:55,980
And indeed, if you dive into
programming for the first time

1118
01:04:55,980 --> 01:04:59,520
looking at and trying to create stuff
like this, honestly, you get so mired

1119
01:04:59,520 --> 01:05:02,600
so often in just stupid
minutia that has nothing

1120
01:05:02,600 --> 01:05:04,340
intellectually interesting about it.

1121
01:05:04,340 --> 01:05:07,080
But imagine if you could create
this same program-- which,

1122
01:05:07,080 --> 01:05:12,300
as you might kind of infer, probably
prints "Hello, world" somehow or other.

1123
01:05:12,300 --> 01:05:15,950
We can distill that same idea into
just two puzzle pieces, if you will.

1124
01:05:15,950 --> 01:05:18,950
Indeed, Scratch is interesting
because it's this graphical language.

1125
01:05:18,950 --> 01:05:22,210
You can drag and drop these
puzzle pieces that only interlock

1126
01:05:22,210 --> 01:05:24,040
if it makes logical sense to do so.

1127
01:05:24,040 --> 01:05:25,930
And so in Scratch,
we'll soon see, this is

1128
01:05:25,930 --> 01:05:29,560
how you would implement that same
program, with just two puzzle pieces

1129
01:05:29,560 --> 01:05:31,520
that pretty much do what they say.

1130
01:05:31,520 --> 01:05:34,970
But we'll see in just a moment that some
of the building blocks that we alluded

1131
01:05:34,970 --> 01:05:38,240
to earlier and a few more are all that
ultimately are going to constitute

1132
01:05:38,240 --> 01:05:39,560
some of our earliest programs.

1133
01:05:39,560 --> 01:05:41,560
We're going to have things
like functions-- just

1134
01:05:41,560 --> 01:05:44,134
actions that do something,
like say hello, world.

1135
01:05:44,134 --> 01:05:46,300
We're going to have loops,
things that induce cycles

1136
01:05:46,300 --> 01:05:49,310
again and again, just like we
did a moment ago with searching

1137
01:05:49,310 --> 01:05:50,210
for Mike Smith.

1138
01:05:50,210 --> 01:05:53,290
Variables, like in algebra, if you
have x or y, that can store a number.

1139
01:05:53,290 --> 01:05:56,040
Well, in a program, you can actually
store more than just numbers.

1140
01:05:56,040 --> 01:06:00,390
You can store words and sentences
and graphics and other things still.

1141
01:06:00,390 --> 01:06:03,630
Boolean expressions, just
questions-- yes or no, true or false.

1142
01:06:03,630 --> 01:06:06,780
Conditions, making decisions
based on those yes/no answers.

1143
01:06:06,780 --> 01:06:09,990
And then fancier things like
array and threads and events

1144
01:06:09,990 --> 01:06:12,200
and any number of other
features, but all of which

1145
01:06:12,200 --> 01:06:14,770
map very nicely to very
friendly blocks like this.

1146
01:06:14,770 --> 01:06:18,836
This is going to be a function, a
purple puzzle piece that just says

1147
01:06:18,836 --> 01:06:20,817
what its name is-- in this case, say.

1148
01:06:20,817 --> 01:06:22,650
And then often, there's
a white box that you

1149
01:06:22,650 --> 01:06:24,650
can type in or drag some value into.

1150
01:06:24,650 --> 01:06:27,470
And that's what's generally
called an argument or a parameter.

1151
01:06:27,470 --> 01:06:30,210
It's a way of altering the
default behavior of a puzzle

1152
01:06:30,210 --> 01:06:33,630
piece or a function so that it does
something custom for you like saying,

1153
01:06:33,630 --> 01:06:38,670
hello, world or hello, Andy or hello,
Jason or some other sentence instead.

1154
01:06:38,670 --> 01:06:41,930
If you want to say that a
lot-- literally forever--

1155
01:06:41,930 --> 01:06:44,242
you can take another
puzzle piece called forever

1156
01:06:44,242 --> 01:06:46,200
and just sandwiched the
two together like this.

1157
01:06:46,200 --> 01:06:50,190
And that loop, as the picture suggests,
means just say hello, world forever,

1158
01:06:50,190 --> 01:06:51,910
again and again and again.

1159
01:06:51,910 --> 01:06:54,940
Or, if you only want to do it a
finite number of times, like 50 times,

1160
01:06:54,940 --> 01:06:58,150
there's going to be another puzzle
piece for that-- repeat 50 times.

1161
01:06:58,150 --> 01:07:00,290
Meanwhile, if you want
to have a variable

1162
01:07:00,290 --> 01:07:02,190
in this language we're
about to play with,

1163
01:07:02,190 --> 01:07:03,980
you can use a orange block like this.

1164
01:07:03,980 --> 01:07:06,850
And this variable I arbitrarily
called i for integer.

1165
01:07:06,850 --> 01:07:08,390
And I just set it equal to 0.

1166
01:07:08,390 --> 01:07:10,880
And so maybe i, in this
case-- this variable--

1167
01:07:10,880 --> 01:07:12,730
represents someone's score in a game.

1168
01:07:12,730 --> 01:07:15,780
You start at zero, and every time you
make a goal or something like that,

1169
01:07:15,780 --> 01:07:17,370
you get one additional point.

1170
01:07:17,370 --> 01:07:18,930
You can ask questions in Scratch.

1171
01:07:18,930 --> 01:07:21,490
If we drag and drop puzzle
pieces in a moment like this,

1172
01:07:21,490 --> 01:07:24,570
you can ask questions like,
well, is i less than 50?

1173
01:07:24,570 --> 01:07:26,160
Maybe you need 50 points to win.

1174
01:07:26,160 --> 01:07:27,993
And so this would be
the question you'd ask.

1175
01:07:27,993 --> 01:07:30,130
Or, more generally, you
could say is x less than y,

1176
01:07:30,130 --> 01:07:31,880
where there's two variables involved?

1177
01:07:31,880 --> 01:07:34,420
Now, this one is a lot
bigger at first glance,

1178
01:07:34,420 --> 01:07:37,570
but really not all that more complex.

1179
01:07:37,570 --> 01:07:41,490
This is just a combination
of conditions and variables

1180
01:07:41,490 --> 01:07:45,470
and Boolean expressions to ask
three questions-- is x less than y?

1181
01:07:45,470 --> 01:07:46,760
If so, say so.

1182
01:07:46,760 --> 01:07:48,270
Say, x is less than y.

1183
01:07:48,270 --> 01:07:52,671
Else, if x is greater than
y, else x must be equal to y.

1184
01:07:52,671 --> 01:07:55,170
And whereas with Mike Smith,
there were four scenarios, here

1185
01:07:55,170 --> 01:07:58,370
in the world of numbers, x is either
less than, greater than, or equal to.

1186
01:07:58,370 --> 01:08:00,631
All we have are three forks in the road.

1187
01:08:00,631 --> 01:08:02,630
And then there's fancier
puzzle pieces like this

1188
01:08:02,630 --> 01:08:05,713
for things like arrays, where we're
going to be able to store information.

1189
01:08:05,713 --> 01:08:09,690
We're going to see blocks that allow
us to implement multiple threads,

1190
01:08:09,690 --> 01:08:12,720
another feature we'll use, and
then also something called events.

1191
01:08:12,720 --> 01:08:15,490
But before we get to that
point and create even,

1192
01:08:15,490 --> 01:08:18,100
ultimately, our own custom
puzzle pieces, let's

1193
01:08:18,100 --> 01:08:20,050
actually open the program itself.

1194
01:08:20,050 --> 01:08:20,960
So this is Scratch.

1195
01:08:20,960 --> 01:08:23,590
It's available at scratch.mit.edu.

1196
01:08:23,590 --> 01:08:25,750
And you're welcome to play
now or later, as well.

1197
01:08:25,750 --> 01:08:27,430
This happens to be the offline version.

1198
01:08:27,430 --> 01:08:29,229
For people who don't
necessarily have great internet,

1199
01:08:29,229 --> 01:08:31,062
you can download the
same software, as well.

1200
01:08:31,062 --> 01:08:33,560
And there's really only three
components to this software.

1201
01:08:33,560 --> 01:08:36,960
On the top left-hand corner of
the screen is the sort of stage

1202
01:08:36,960 --> 01:08:39,900
that Scratch, who by default
looks like a cat, lives inside.

1203
01:08:39,900 --> 01:08:42,899
He can move up, down, left, and right
and do any number of other things,

1204
01:08:42,899 --> 01:08:46,620
and can look any number of ways based
on the costumes that you assign to him.

1205
01:08:46,620 --> 01:08:49,080
But this is what we'll call a
sprite, a sort of character.

1206
01:08:49,080 --> 01:08:51,529
And you can have multiple
characters, as we'll soon see.

1207
01:08:51,529 --> 01:08:56,160
In the middle now are all these puzzle
pieces and these categories or pallets

1208
01:08:56,160 --> 01:08:57,000
thereof.

1209
01:08:57,000 --> 01:08:58,529
So right now, I clicked on Motion.

1210
01:08:58,529 --> 01:09:02,000
And so I'm seeing all of the
motion-related puzzle pieces or blocks,

1211
01:09:02,000 --> 01:09:04,050
so functions that have
to do with going up,

1212
01:09:04,050 --> 01:09:06,050
down, left, or right or
some other operation.

1213
01:09:06,050 --> 01:09:09,890
But if I clicked on Looks, you
could see things like the say block

1214
01:09:09,890 --> 01:09:11,184
that we saw just a moment ago.

1215
01:09:11,184 --> 01:09:14,350
And if I click on Control, you'll see
things like the repeat and the forever

1216
01:09:14,350 --> 01:09:16,510
and the if block that
we saw a moment ago.

1217
01:09:16,510 --> 01:09:17,770
And so you'll find
that we'll just scratch

1218
01:09:17,770 --> 01:09:19,850
the surface of some of the
puzzle pieces together,

1219
01:09:19,850 --> 01:09:21,933
but it's all fairly intuitive
and point and click.

1220
01:09:21,933 --> 01:09:24,319
Indeed, Scratch was designed
for younger students

1221
01:09:24,319 --> 01:09:26,830
to help give them an outlet
for creative thinking.

1222
01:09:26,830 --> 01:09:29,140
And yet wonderfully, it's
a wonderful stepping stone

1223
01:09:29,140 --> 01:09:33,120
to exactly the ideas we're going to
explore in C and Python and JavaScript,

1224
01:09:33,120 --> 01:09:33,819
as well.

1225
01:09:33,819 --> 01:09:38,060
On the right-hand side, finally, here
is this, the so-called scripts area.

1226
01:09:38,060 --> 01:09:41,850
And this is just the blank slate with
which you begin to write a program.

1227
01:09:41,850 --> 01:09:42,997
And I'll exactly that.

1228
01:09:42,997 --> 01:09:46,080
Now, I happen to know where things are
because I've done this a few times.

1229
01:09:46,080 --> 01:09:48,810
But I know that under
the Events category,

1230
01:09:48,810 --> 01:09:51,620
there's this block here--
when green flag clicked.

1231
01:09:51,620 --> 01:09:54,890
And notice if I zoom out and
back in over here on the stage,

1232
01:09:54,890 --> 01:09:57,290
Scratch lives within this
little rectangular world,

1233
01:09:57,290 --> 01:10:00,020
atop which is a green
flag and a red stop sign.

1234
01:10:00,020 --> 01:10:02,280
So go and stop, respectively.

1235
01:10:02,280 --> 01:10:04,810
And so what do I want to do
when that green flag is clicked?

1236
01:10:04,810 --> 01:10:07,000
Well, let me go to that Looks category.

1237
01:10:07,000 --> 01:10:09,457
And let me go ahead
and drag and drop this.

1238
01:10:09,457 --> 01:10:12,040
And notice as soon as it gets
close, they're sort of magnetic.

1239
01:10:12,040 --> 01:10:14,589
So if I now let go, it snaps
together nice and cleanly.

1240
01:10:14,589 --> 01:10:17,130
And I'm going to go ahead and
say something like hello, world

1241
01:10:17,130 --> 01:10:18,290
for two seconds.

1242
01:10:18,290 --> 01:10:22,830
Let me zoom out and click now the
green flag, and say, hello, world.

1243
01:10:22,830 --> 01:10:23,330
All right.

1244
01:10:23,330 --> 01:10:24,560
So that's all fine and good.

1245
01:10:24,560 --> 01:10:26,000
Not all that exciting.

1246
01:10:26,000 --> 01:10:27,440
Let's make it a little cuter.

1247
01:10:27,440 --> 01:10:29,594
And I know that in
advance, Scratch happens

1248
01:10:29,594 --> 01:10:31,260
to come with some cute things like this.

1249
01:10:31,260 --> 01:10:33,820
So play sound meow until done.

1250
01:10:33,820 --> 01:10:35,631
So let's do this.

1251
01:10:35,631 --> 01:10:36,480
[MEOW]

1252
01:10:36,480 --> 01:10:37,919
Aw, that's adorable.

1253
01:10:37,919 --> 01:10:38,960
And if I click it again--

1254
01:10:38,960 --> 01:10:41,020
[MEOW]

1255
01:10:41,020 --> 01:10:41,560
And again.

1256
01:10:41,560 --> 01:10:42,840
[MEOW]

1257
01:10:42,840 --> 01:10:44,860
But I keep having to reanimate Scratch.

1258
01:10:44,860 --> 01:10:46,110
But I can do better than this.

1259
01:10:46,110 --> 01:10:49,160
Why don't I just drag three of these.

1260
01:10:49,160 --> 01:10:50,921
And now it's three times as adorable.

1261
01:10:50,921 --> 01:10:52,364
[MEOWING]

1262
01:10:52,364 --> 01:10:54,290
OK, actually, it's a little creepy.

1263
01:10:54,290 --> 01:10:57,120
So we need something in between there.

1264
01:10:57,120 --> 01:10:59,970
If I go to Control, it looks like
there's actually a wait block.

1265
01:10:59,970 --> 01:11:03,094
And so notice if I hover over there--
and let me make this a little bigger.

1266
01:11:03,094 --> 01:11:04,880
If I hover, it's going
to snap into place.

1267
01:11:04,880 --> 01:11:07,760
So wait one second, wait one second.

1268
01:11:07,760 --> 01:11:09,270
Let's hit green flag again.

1269
01:11:09,270 --> 01:11:12,430
[MEOWING]

1270
01:11:12,430 --> 01:11:13,795


1271
01:11:13,795 --> 01:11:16,760
OK, a little more natural,
but not very efficient.

1272
01:11:16,760 --> 01:11:20,400
So this is correct if my program's
goal was meow three times.

1273
01:11:20,400 --> 01:11:22,510
But it's not very well-designed.

1274
01:11:22,510 --> 01:11:23,840
I kind of cut some corners.

1275
01:11:23,840 --> 01:11:24,830
I got a little lazy.

1276
01:11:24,830 --> 01:11:31,720
What feels like-- what do I seem
to have done poorly, would you say?

1277
01:11:31,720 --> 01:11:33,297
Yeah?

1278
01:11:33,297 --> 01:11:34,130
Yeah, in the middle.

1279
01:11:34,130 --> 01:11:37,308


1280
01:11:37,308 --> 01:11:39,183
AUDIENCE: Used more
memory than you needed to

1281
01:11:39,183 --> 01:11:41,105
because you're using
so many different line.

1282
01:11:41,105 --> 01:11:42,480
DAVID MALAN: Yeah, so more lines.

1283
01:11:42,480 --> 01:11:45,290
And it wouldn't necessarily be memory,
though it could be seen as that way.

1284
01:11:45,290 --> 01:11:46,998
But it's definitely--
there's redundancy.

1285
01:11:46,998 --> 01:11:49,540
And I literally kind of dragged
and dropped the same things.

1286
01:11:49,540 --> 01:11:52,664
And if you kind of extrapolate-- if
it's not obvious here-- well, how would

1287
01:11:52,664 --> 01:11:54,010
I meow 30 times?

1288
01:11:54,010 --> 01:11:57,550
I would drag and drop, like,
30 more pairs of puzzle pieces.

1289
01:11:57,550 --> 01:11:58,990
And surely, there's a better way.

1290
01:11:58,990 --> 01:12:00,156
And we've seen a better way.

1291
01:12:00,156 --> 01:12:02,970
What intuitively would
be the better way?

1292
01:12:02,970 --> 01:12:03,990
Yeah, just use a loop.

1293
01:12:03,990 --> 01:12:04,910
No copy and paste.

1294
01:12:04,910 --> 01:12:06,890
And indeed, anytime this
semester if you start

1295
01:12:06,890 --> 01:12:09,990
finding yourself dragging and dropping,
or really copying and pasting,

1296
01:12:09,990 --> 01:12:13,150
dangerous habit to get into because
this is just not very maintainable.

1297
01:12:13,150 --> 01:12:15,840
For instance, if I want to change
the sound to something else,

1298
01:12:15,840 --> 01:12:18,926
I have to change it now in three
locations instead of just one.

1299
01:12:18,926 --> 01:12:20,675
Because indeed, if I
break this away-- I'm

1300
01:12:20,675 --> 01:12:22,270
just going to decouple it like that.

1301
01:12:22,270 --> 01:12:28,000
Let me grab a repeat block, and
then click three, type three,

1302
01:12:28,000 --> 01:12:30,115
throw some of these
away by just letting go.

1303
01:12:30,115 --> 01:12:31,990
And then notice it
doesn't look like it fits,

1304
01:12:31,990 --> 01:12:34,239
but magnetically, it's going
to not only snap in place

1305
01:12:34,239 --> 01:12:35,610
but grow to fit the shape.

1306
01:12:35,610 --> 01:12:36,410
So that's good.

1307
01:12:36,410 --> 01:12:37,630
And now if I click play.

1308
01:12:37,630 --> 01:12:39,970
[MEOWING]

1309
01:12:39,970 --> 01:12:40,470


1310
01:12:40,470 --> 01:12:41,720
Very nice.

1311
01:12:41,720 --> 01:12:42,226
All right.

1312
01:12:42,226 --> 01:12:44,600
And now it's very easy to
change, too, because I can just

1313
01:12:44,600 --> 01:12:46,770
change one number in one place.

1314
01:12:46,770 --> 01:12:48,600
But this, too, is not
all that interesting.

1315
01:12:48,600 --> 01:12:51,450
Let's actually have
Scratch not meow, but move.

1316
01:12:51,450 --> 01:12:58,780
Let me go to Motion and move 10 steps
inside of-- whoops, let me fix this.

1317
01:12:58,780 --> 01:13:03,560
Let me have it move 10 steps--
actually, let's not do repeat.

1318
01:13:03,560 --> 01:13:06,770
Let me grab a control block,
and do the following forever.

1319
01:13:06,770 --> 01:13:08,820
Forever, move 10 steps.

1320
01:13:08,820 --> 01:13:11,170
And click Play.

1321
01:13:11,170 --> 01:13:11,700
OK.

1322
01:13:11,700 --> 01:13:12,840
So thankfully, he stops.

1323
01:13:12,840 --> 01:13:15,810
Otherwise, kids would get very upset
when they sort of lose their cat.

1324
01:13:15,810 --> 01:13:18,820
But at least I can drag
him back into the screen.

1325
01:13:18,820 --> 01:13:22,277
But this is not all that
great of a game or animation.

1326
01:13:22,277 --> 01:13:24,360
It would be nice if maybe
he bounced off the edge.

1327
01:13:24,360 --> 01:13:26,120
So what do we do?

1328
01:13:26,120 --> 01:13:30,402
What construct do we need to have
Scratch decide to bounce, do you think,

1329
01:13:30,402 --> 01:13:32,110
even if you've never
seen Scratch before?

1330
01:13:32,110 --> 01:13:32,693
Yeah, in back.

1331
01:13:32,693 --> 01:13:34,459
AUDIENCE: You need an
if block or if-then.

1332
01:13:34,459 --> 01:13:36,750
DAVID MALAN: Yeah, so some
kind of if block or if-then.

1333
01:13:36,750 --> 01:13:38,375
So actually, we have one of these here.

1334
01:13:38,375 --> 01:13:40,600
So if-- so let me get
rid of the movement.

1335
01:13:40,600 --> 01:13:42,170
Let me zoom in so it's bigger.

1336
01:13:42,170 --> 01:13:42,990
So how about this.

1337
01:13:42,990 --> 01:13:48,020
Forever, if Sensing--
we've not seen this before.

1338
01:13:48,020 --> 01:13:49,260
I need a Boolean expression.

1339
01:13:49,260 --> 01:13:52,070
And it turns out if touching what?

1340
01:13:52,070 --> 01:13:55,130
If touching the edge,
what do I want to do?

1341
01:13:55,130 --> 01:13:58,130
Well, if I go back to Motion,
turns out, oh, I can turn around.

1342
01:13:58,130 --> 01:13:59,450
Let me drag this in here.

1343
01:13:59,450 --> 01:14:02,530
Why don't I go ahead and
turn around 180 degrees?

1344
01:14:02,530 --> 01:14:04,290
And now, let me just move at the end.

1345
01:14:04,290 --> 01:14:06,600
I could put the movement at
the beginning or the end.

1346
01:14:06,600 --> 01:14:10,552
But logically, every time I move, I
want to check, am I touching the edge?

1347
01:14:10,552 --> 01:14:11,510
Am I touching the edge?

1348
01:14:11,510 --> 01:14:12,590
Am I touching the edge?

1349
01:14:12,590 --> 01:14:15,300
So that logically I turn around if so.

1350
01:14:15,300 --> 01:14:17,290
So let's hit play.

1351
01:14:17,290 --> 01:14:18,130
OK.

1352
01:14:18,130 --> 01:14:20,010
So it's slightly buggy, so to speak.

1353
01:14:20,010 --> 01:14:22,660
And a bug is just a mistake
in a computer program.

1354
01:14:22,660 --> 01:14:23,900
But at least it's working.

1355
01:14:23,900 --> 01:14:25,520
And in fact, I can go in here.

1356
01:14:25,520 --> 01:14:29,230
And let me make it not 10 steps at a
time, but this is all animation is.

1357
01:14:29,230 --> 01:14:31,410
This is all a cartoon
or even a movie is.

1358
01:14:31,410 --> 01:14:33,210
Let me move 20 steps at a time.

1359
01:14:33,210 --> 01:14:37,300
So 20 times as many things are happening
once, or twice as many, in this case.

1360
01:14:37,300 --> 01:14:38,700
And he's moving faster.

1361
01:14:38,700 --> 01:14:41,250
Let me change to 30.

1362
01:14:41,250 --> 01:14:43,550
100.

1363
01:14:43,550 --> 01:14:45,506
1,000.

1364
01:14:45,506 --> 01:14:46,630
And it's going really fast.

1365
01:14:46,630 --> 01:14:48,290
And this is-- yeah, OK.

1366
01:14:48,290 --> 01:14:50,230
So now we're just messing with it.

1367
01:14:50,230 --> 01:14:51,054
OK, so buggy.

1368
01:14:51,054 --> 01:14:52,720
But we can drag him out of the way here.

1369
01:14:52,720 --> 01:14:54,386
But we can make more fun with this, too.

1370
01:14:54,386 --> 01:14:56,810
How about this-- he's upside down.

1371
01:14:56,810 --> 01:14:58,900
But it turns out Scratch--
and there is actually,

1372
01:14:58,900 --> 01:15:01,610
I have to disclaim, no academic
value to what I'm about to do.

1373
01:15:01,610 --> 01:15:06,300
But if I open up the microphone, let's
stop him and do something like this.

1374
01:15:06,300 --> 01:15:08,060
Ouch!

1375
01:15:08,060 --> 01:15:08,984
[LAUGH]

1376
01:15:08,984 --> 01:15:11,300


1377
01:15:11,300 --> 01:15:12,090
That was adorable.

1378
01:15:12,090 --> 01:15:12,840
Thank you.

1379
01:15:12,840 --> 01:15:16,950
Now, this is what my voice
looks like when I yell ouch.

1380
01:15:16,950 --> 01:15:18,730
I don't think we caught your laughter.

1381
01:15:18,730 --> 01:15:19,380
That's OK.

1382
01:15:19,380 --> 01:15:22,650
Let me save this as "ouch."

1383
01:15:22,650 --> 01:15:24,015
Let's save this as "ouch".

1384
01:15:24,015 --> 01:15:25,510
And now we'll go back to Scripts.

1385
01:15:25,510 --> 01:15:27,760
And now I need-- let's see, Sound.

1386
01:15:27,760 --> 01:15:29,260
Oh, play sound ouch.

1387
01:15:29,260 --> 01:15:34,280
So if I'm touching the edge, let me
first play ouch, and then turn around.

1388
01:15:34,280 --> 01:15:36,291
And now let's put him in the middle.

1389
01:15:36,291 --> 01:15:40,854
[SAYING "OUCH"]

1390
01:15:40,854 --> 01:15:41,840
Twice as fast.

1391
01:15:41,840 --> 01:15:46,760


1392
01:15:46,760 --> 01:15:47,930
OK.

1393
01:15:47,930 --> 01:15:49,880
But it's literally
doing what I'm saying.

1394
01:15:49,880 --> 01:15:53,680
So it is in fact correct, it's
just a little annoying quickly.

1395
01:15:53,680 --> 01:15:56,430
So let's add something
more interesting to this.

1396
01:15:56,430 --> 01:15:59,050
Let me actually open up
one that I made in advance,

1397
01:15:59,050 --> 01:16:04,660
aptly called Pet the
Cat, that does this.

1398
01:16:04,660 --> 01:16:06,440
Here's the script up here.

1399
01:16:06,440 --> 01:16:10,610
What is this going to
do in English terms?

1400
01:16:10,610 --> 01:16:11,920
What's this designed to do?

1401
01:16:11,920 --> 01:16:14,000
Yeah, let's go some-- yeah?

1402
01:16:14,000 --> 01:16:15,765
AUDIENCE: When you
pet the cat, it meows.

1403
01:16:15,765 --> 01:16:18,390
DAVID MALAN: Yeah, so when you
pet the cat, it's going to meow.

1404
01:16:18,390 --> 01:16:21,552
So in other words, there's now
a forever loop still, combined

1405
01:16:21,552 --> 01:16:23,760
with a condition, combined
with a Boolean expression,

1406
01:16:23,760 --> 01:16:26,240
combined with a couple
of functions, the effect

1407
01:16:26,240 --> 01:16:28,710
of which, once I play
this program, is nothing

1408
01:16:28,710 --> 01:16:32,920
happens until I move the cursor
closer and closer and closer and--

1409
01:16:32,920 --> 01:16:34,129
[MEOW]

1410
01:16:34,129 --> 01:16:35,420
Then it's like petting the cat.

1411
01:16:35,420 --> 01:16:37,310
[MEOW]

1412
01:16:37,310 --> 01:16:40,370
Only once you actually
move the cursor over him.

1413
01:16:40,370 --> 01:16:46,064
Now, I also whipped up don't pet
the cat, which does this instead.

1414
01:16:46,064 --> 01:16:47,450
[MEOWING]

1415
01:16:47,450 --> 01:16:49,585
So he's just constantly meowing.

1416
01:16:49,585 --> 01:16:50,555
[MEOWING]

1417
01:16:50,555 --> 01:16:53,805
But if I get too close--

1418
01:16:53,805 --> 01:16:55,745
[MEOWING]

1419
01:16:55,745 --> 01:16:58,180
[ROAR]

1420
01:16:58,180 --> 01:16:59,690
So how does this work?

1421
01:16:59,690 --> 01:17:01,980
Now I just have a
two-way fork in the road.

1422
01:17:01,980 --> 01:17:05,030
If touching mouse pointer,
then play the lion sound.

1423
01:17:05,030 --> 01:17:08,050
Else just play the meow sound,
and then wait three seconds so

1424
01:17:08,050 --> 01:17:09,980
that it's kind of doing
it very tranquilly.

1425
01:17:09,980 --> 01:17:10,480
All right.

1426
01:17:10,480 --> 01:17:13,390
So that's combining
some more ideas still.

1427
01:17:13,390 --> 01:17:16,970
Let's take a look at this example
I whipped up called threads.

1428
01:17:16,970 --> 01:17:20,120
And this one is fundamentally
different in that it leverages

1429
01:17:20,120 --> 01:17:22,170
a feature of many
programming language called

1430
01:17:22,170 --> 01:17:26,070
threads, the ability of a program to
literally do two things simultaneously.

1431
01:17:26,070 --> 01:17:29,700
Indeed, these days if you're using
Google Docs or Microsoft Word,

1432
01:17:29,700 --> 01:17:35,720
and your document's constantly being
spell-checked even as you type-- or you

1433
01:17:35,720 --> 01:17:37,680
hit Command-P or Control-P
and print something,

1434
01:17:37,680 --> 01:17:39,480
it's printing while you continue typing.

1435
01:17:39,480 --> 01:17:42,780
Programs today can indeed do multiple
things at once, just like in Scratch

1436
01:17:42,780 --> 01:17:43,280
here.

1437
01:17:43,280 --> 01:17:46,500
So here, I have two sprites
now, a bird and a cat.

1438
01:17:46,500 --> 01:17:48,880
And if I click on each of
those characters one at a time,

1439
01:17:48,880 --> 01:17:51,690
I see right now the bird's
scripts at top right.

1440
01:17:51,690 --> 01:17:53,370
Now I see the cat's.

1441
01:17:53,370 --> 01:17:54,640
Bird's, cat's.

1442
01:17:54,640 --> 01:17:56,370
So each of them have their own script.

1443
01:17:56,370 --> 01:17:58,800
But notice, what puzzle piece
do they both begin with?

1444
01:17:58,800 --> 01:18:00,360
When green flag clicked.

1445
01:18:00,360 --> 01:18:02,990
And bird, when green flag clicked.

1446
01:18:02,990 --> 01:18:06,970
So when I click the green flag,
both of those scripts or programs

1447
01:18:06,970 --> 01:18:08,859
are going to run in parallel.

1448
01:18:08,859 --> 01:18:11,900
And you'll notice that the bird is
just mindlessly bouncing off the edge.

1449
01:18:11,900 --> 01:18:16,990
The cat clearly has been programmed
with a strategic advantage.

1450
01:18:16,990 --> 01:18:18,804
And--

1451
01:18:18,804 --> 01:18:19,590
[ROAR]

1452
01:18:19,590 --> 01:18:19,921


1453
01:18:19,921 --> 01:18:20,420
All right.

1454
01:18:20,420 --> 01:18:23,440
So the cat caught the bird in this case.

1455
01:18:23,440 --> 01:18:24,490
Why is that?

1456
01:18:24,490 --> 01:18:29,410
Well, notice first we just have
the bird just mindlessly going

1457
01:18:29,410 --> 01:18:31,220
to this initial location,
and then forever,

1458
01:18:31,220 --> 01:18:32,874
if not touching the cat, just move.

1459
01:18:32,874 --> 01:18:34,290
And if you're on the edge, bounce.

1460
01:18:34,290 --> 01:18:34,970
And just move.

1461
01:18:34,970 --> 01:18:36,386
And if you're on the edge, bounce.

1462
01:18:36,386 --> 01:18:38,940
But the cat, meanwhile,
has some additional logic

1463
01:18:38,940 --> 01:18:44,350
that says this-- first, just so
that this isn't completely biased

1464
01:18:44,350 --> 01:18:47,291
against the bird, notice that I've
used a green puzzle piece there

1465
01:18:47,291 --> 01:18:48,790
that actually picks a random number.

1466
01:18:48,790 --> 01:18:52,279
A feature of many languages is to give
you random or pseudorandom numbers.

1467
01:18:52,279 --> 01:18:55,320
So in this case, the cat initially
chooses a random number between, like,

1468
01:18:55,320 --> 01:18:57,827
90 degrees and 180
degrees, essentially, so

1469
01:18:57,827 --> 01:18:59,410
that there's a little bit of variance.

1470
01:18:59,410 --> 01:19:03,100
And then forever, if touching
the bird, play the lion sound.

1471
01:19:03,100 --> 01:19:04,854
Otherwise, just point toward the bird.

1472
01:19:04,854 --> 01:19:05,770
Point toward the bird.

1473
01:19:05,770 --> 01:19:10,299
Point toward the bird, which is a
puzzle piece unto itself in this case.

1474
01:19:10,299 --> 01:19:11,840
Well, we can do one other thing here.

1475
01:19:11,840 --> 01:19:15,920
Let me open up the events program here.

1476
01:19:15,920 --> 01:19:19,620
And here we again have two sprites,
which look like these two puppets here.

1477
01:19:19,620 --> 01:19:21,810
And what's interesting here is this.

1478
01:19:21,810 --> 01:19:25,240
The orange guy has this
set of puzzle pieces here.

1479
01:19:25,240 --> 01:19:27,800
Forever do the following--
if the space bar is pressed,

1480
01:19:27,800 --> 01:19:31,530
then say, Marco, and
then broadcast an event.

1481
01:19:31,530 --> 01:19:35,560
And meanwhile, the blue guy here has
this-- when you receive the event,

1482
01:19:35,560 --> 01:19:36,640
say Polo.

1483
01:19:36,640 --> 01:19:38,950
So it turns out in Scratch
and in other languages,

1484
01:19:38,950 --> 01:19:41,930
there are ways for two programs
or two scripts, in this case,

1485
01:19:41,930 --> 01:19:46,410
to intercommunicate so that when I
hit the space bar, he says Marco.

1486
01:19:46,410 --> 01:19:49,639
And the other one hears that, so to
speak, and says Polo in response.

1487
01:19:49,639 --> 01:19:52,180
So you can write programs that
actually interact in this way.

1488
01:19:52,180 --> 01:19:54,730
And if I do this one instead,
I can even add variables,

1489
01:19:54,730 --> 01:19:57,387
just using one sprite in this case.

1490
01:19:57,387 --> 01:19:58,678
This one's especially annoying.

1491
01:19:58,678 --> 01:20:02,274
[SEAL BARKING]

1492
01:20:02,274 --> 01:20:03,200


1493
01:20:03,200 --> 01:20:08,590
Now, notice on the right we've got
some additional logic over here.

1494
01:20:08,590 --> 01:20:11,246
How do I stop this seal from barking?

1495
01:20:11,246 --> 01:20:14,420
[SEAL BARKING]

1496
01:20:14,420 --> 01:20:18,930


1497
01:20:18,930 --> 01:20:21,730
It looks like on the right-hand
side is what's playing the sound.

1498
01:20:21,730 --> 01:20:24,600
But it's only playing a
sound if what is true?

1499
01:20:24,600 --> 01:20:29,490
If a variable-- orange
block-- muted is zero.

1500
01:20:29,490 --> 01:20:34,016
How do I change muted to be 1,
meaning true, make this muted?

1501
01:20:34,016 --> 01:20:38,555
Apparently, the other script, I can
hit the space bar, and now he stops.

1502
01:20:38,555 --> 01:20:41,180
So we can have this intercommunication
across scripts, as well,

1503
01:20:41,180 --> 01:20:44,449
by just sharing a variable
across the two like this.

1504
01:20:44,449 --> 01:20:45,990
Now, this isn't all that interesting.

1505
01:20:45,990 --> 01:20:50,460
Let's go ahead and do this and combine
a lot of these ideas with this program

1506
01:20:50,460 --> 01:20:52,040
here.

1507
01:20:52,040 --> 01:20:54,200
Before we do that, though,
how about one volunteer?

1508
01:20:54,200 --> 01:20:56,658
Let me take the pressure off
of me because I don't actually

1509
01:20:56,658 --> 01:20:57,380
play this game.

1510
01:20:57,380 --> 01:20:59,130
Let's have someone we
haven't seen before.

1511
01:20:59,130 --> 01:21:02,520
You have to be comfortable coming
up on stage here, on camera.

1512
01:21:02,520 --> 01:21:03,530
OK, come on up.

1513
01:21:03,530 --> 01:21:04,230
Very brave.

1514
01:21:04,230 --> 01:21:05,152
What's your name?

1515
01:21:05,152 --> 01:21:06,062
IDRIS: Idris.

1516
01:21:06,062 --> 01:21:06,853
DAVID MALAN: Sorry?

1517
01:21:06,853 --> 01:21:07,296
IDRIS: Idris.

1518
01:21:07,296 --> 01:21:08,770
DAVID MALAN: Idris, nice to meet you.

1519
01:21:08,770 --> 01:21:09,270
Come on up.

1520
01:21:09,270 --> 01:21:11,730
And now, on your own mobile
phone, do you play Pokemon GO?

1521
01:21:11,730 --> 01:21:12,667
IDRIS: No.

1522
01:21:12,667 --> 01:21:13,500
DAVID MALAN: Really?

1523
01:21:13,500 --> 01:21:14,204
IDRIS: Yeah.

1524
01:21:14,204 --> 01:21:14,870
DAVID MALAN: OK.

1525
01:21:14,870 --> 01:21:15,120
All right.

1526
01:21:15,120 --> 01:21:16,078
Well, nice to meet you.

1527
01:21:16,078 --> 01:21:16,920
Come on over.

1528
01:21:16,920 --> 01:21:18,050
I don't either.

1529
01:21:18,050 --> 01:21:21,480
So we'll figure out together how to
play this, which someone actually

1530
01:21:21,480 --> 01:21:26,240
went and implemented in Scratch
by changing the cat to essentially

1531
01:21:26,240 --> 01:21:28,360
different characters all together.

1532
01:21:28,360 --> 01:21:30,970
And if I fullscreen
this here, we're going

1533
01:21:30,970 --> 01:21:32,960
to see the following game together.

1534
01:21:32,960 --> 01:21:35,660
Still loading, still loading.

1535
01:21:35,660 --> 01:21:36,370
Come on.

1536
01:21:36,370 --> 01:21:38,690
Let me do this.

1537
01:21:38,690 --> 01:21:40,620
Come on.

1538
01:21:40,620 --> 01:21:43,300
This game is so big that it crashed.

1539
01:21:43,300 --> 01:21:45,080
Stand by.

1540
01:21:45,080 --> 01:21:48,490
Try this once more.

1541
01:21:48,490 --> 01:21:49,810
Come on.

1542
01:21:49,810 --> 01:21:50,311
All right.

1543
01:21:50,311 --> 01:21:52,940


1544
01:21:52,940 --> 01:21:53,530
There we go.

1545
01:21:53,530 --> 01:21:54,029
OK.

1546
01:21:54,029 --> 01:21:55,430
Green flag.

1547
01:21:55,430 --> 01:21:56,290
So here we go.

1548
01:21:56,290 --> 01:21:57,050
[MUSIC PLAYING]

1549
01:21:57,050 --> 01:21:58,610
Choose the middle level here.

1550
01:21:58,610 --> 01:22:00,300
Click the blue guy there.

1551
01:22:00,300 --> 01:22:00,800
All right.

1552
01:22:00,800 --> 01:22:03,960
And you can use the arrow
keys-- up, down, left, right.

1553
01:22:03,960 --> 01:22:08,250
Now, let's consider as we do this--
and then go after the character there.

1554
01:22:08,250 --> 01:22:08,750
Yep.

1555
01:22:08,750 --> 01:22:11,886
And now click him with the mouse.

1556
01:22:11,886 --> 01:22:12,793
Oh, yeah.

1557
01:22:12,793 --> 01:22:13,293
Move.

1558
01:22:13,293 --> 01:22:13,762
Where's the arrow?

1559
01:22:13,762 --> 01:22:14,231
Here you go.

1560
01:22:14,231 --> 01:22:14,700
So click on there.

1561
01:22:14,700 --> 01:22:14,940
Yeah.

1562
01:22:14,940 --> 01:22:15,440
All right.

1563
01:22:15,440 --> 01:22:22,108
So now, I'm told you have a Poke ball,
that if click it, it will do that.

1564
01:22:22,108 --> 01:22:24,032
Very good.

1565
01:22:24,032 --> 01:22:26,490
In practicing for today, I
found this version of the game's

1566
01:22:26,490 --> 01:22:27,860
actually not very hard.

1567
01:22:27,860 --> 01:22:33,750
So if you want to go again here,
walk down to this Poke ball.

1568
01:22:33,750 --> 01:22:34,880
And then go take a right.

1569
01:22:34,880 --> 01:22:37,300
Try clicking on it.

1570
01:22:37,300 --> 01:22:39,220
Oh, actually, that's
the store, apparently.

1571
01:22:39,220 --> 01:22:40,270
OK so close that.

1572
01:22:40,270 --> 01:22:41,250
Never done that before.

1573
01:22:41,250 --> 01:22:42,666
Maybe go up to this thing up here.

1574
01:22:42,666 --> 01:22:43,560
Oh, there you go.

1575
01:22:43,560 --> 01:22:45,010
Wait, there's one over there.

1576
01:22:45,010 --> 01:22:46,512
Oh, there's another.

1577
01:22:46,512 --> 01:22:47,385
OK.

1578
01:22:47,385 --> 01:22:47,885
Down.

1579
01:22:47,885 --> 01:22:49,310
Yeah, click.

1580
01:22:49,310 --> 01:22:50,735
OK, that's very cute.

1581
01:22:50,735 --> 01:22:53,585


1582
01:22:53,585 --> 01:22:54,910
OK, very well done.

1583
01:22:54,910 --> 01:22:56,110
This game is not very hard.

1584
01:22:56,110 --> 01:22:56,610
OK.

1585
01:22:56,610 --> 01:22:58,250
Congratulations.

1586
01:22:58,250 --> 01:23:00,820
Here, we have a CS50
stress ball for you.

1587
01:23:00,820 --> 01:23:03,780
But consider for just a moment what
some of the takeaways are there.

1588
01:23:03,780 --> 01:23:05,363
Easier than the real game, apparently.

1589
01:23:05,363 --> 01:23:07,909
But all we have going
on here is a character

1590
01:23:07,909 --> 01:23:10,200
that probably has some kind
of loop associated with it.

1591
01:23:10,200 --> 01:23:10,690
It's not a cat.

1592
01:23:10,690 --> 01:23:11,960
It's this character instead.

1593
01:23:11,960 --> 01:23:15,152
And that loop is just constantly
saying, if up arrow pressed,

1594
01:23:15,152 --> 01:23:17,360
if down arrow pressed, if
left arrow pressed or right

1595
01:23:17,360 --> 01:23:20,060
arrow pressed, move up
or down or left or right.

1596
01:23:20,060 --> 01:23:23,970
Or if there's another puzzle piece there
that says when touching another sprite,

1597
01:23:23,970 --> 01:23:27,420
when touching one of the characters
to the Poke ball, if touching,

1598
01:23:27,420 --> 01:23:28,540
then do this.

1599
01:23:28,540 --> 01:23:30,900
So all of the ideas we've
been using thus far really

1600
01:23:30,900 --> 01:23:35,230
can just be applied in this particular
context to play this game, as well.

1601
01:23:35,230 --> 01:23:39,680
Let me go ahead and pull
up one other here, in fact.

1602
01:23:39,680 --> 01:23:43,160
Let me go ahead and pull
up, let's say, this.

1603
01:23:43,160 --> 01:23:44,640
This is something we remixed.

1604
01:23:44,640 --> 01:23:46,429
Made by one of our
students in Cambridge,

1605
01:23:46,429 --> 01:23:49,470
and then I went through and changed
pretty much every instance of Harvard

1606
01:23:49,470 --> 01:23:51,680
to Yale this time.

1607
01:23:51,680 --> 01:23:53,970
Would someone like to
compete against the Ivies

1608
01:23:53,970 --> 01:23:57,750
here in another accumulation
of all of these ideas?

1609
01:23:57,750 --> 01:23:58,762
Come on down, yes.

1610
01:23:58,762 --> 01:23:59,470
What's your name?

1611
01:23:59,470 --> 01:24:00,290
DINA: Dina.

1612
01:24:00,290 --> 01:24:01,115
DAVID MALAN: Adina?

1613
01:24:01,115 --> 01:24:01,480
DINA: Dina.

1614
01:24:01,480 --> 01:24:02,510
DAVID MALAN: Dina, come on down.

1615
01:24:02,510 --> 01:24:03,420
All right, Dina.

1616
01:24:03,420 --> 01:24:06,880
So this game gets harder and
harder, because in this game,

1617
01:24:06,880 --> 01:24:10,070
there's variables being used as well
that are constantly keeping track

1618
01:24:10,070 --> 01:24:12,030
of what level you are in the game.

1619
01:24:12,030 --> 01:24:13,220
So nice to meet you.

1620
01:24:13,220 --> 01:24:14,350
Come around here.

1621
01:24:14,350 --> 01:24:17,560
And so the goal here is to sort
of make your way through a maze

1622
01:24:17,560 --> 01:24:18,810
that this student implemented.

1623
01:24:18,810 --> 01:24:21,434
And just to set the stage, each
of these pictures on the screen

1624
01:24:21,434 --> 01:24:23,322
is its own sprite, its own character.

1625
01:24:23,322 --> 01:24:25,780
So these were by default cats,
but the student changed them

1626
01:24:25,780 --> 01:24:27,580
to the various Ivies logos here.

1627
01:24:27,580 --> 01:24:30,470
And then you'll see that just
by using conditions and loops

1628
01:24:30,470 --> 01:24:32,948
and functions and more, you get this.

1629
01:24:32,948 --> 01:24:33,578
[MUSIC PLAYING]

1630
01:24:33,578 --> 01:24:35,328
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1631
01:24:35,328 --> 01:24:39,160


1632
01:24:39,160 --> 01:24:40,118
Yeah, OK.

1633
01:24:40,118 --> 01:24:43,471


1634
01:24:43,471 --> 01:24:46,210
Yeah, keep going.

1635
01:24:46,210 --> 01:24:47,280
First level's very easy.

1636
01:24:47,280 --> 01:24:48,654
You've just got to go over there.

1637
01:24:48,654 --> 01:24:51,744
But again, consider, this is just a
loop listening for the arrow keys--

1638
01:24:51,744 --> 01:24:52,660
up, down, left, right.

1639
01:24:52,660 --> 01:24:54,420
And now a sensing block.

1640
01:24:54,420 --> 01:24:55,445
Very nice.

1641
01:24:55,445 --> 01:24:58,700
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1642
01:24:58,700 --> 01:25:06,440


1643
01:25:06,440 --> 01:25:07,388
Very nice.

1644
01:25:07,388 --> 01:25:10,650
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1645
01:25:10,650 --> 01:25:21,640


1646
01:25:21,640 --> 01:25:22,530
Very nice.

1647
01:25:22,530 --> 01:25:24,075
Pretty easy, Crimson.

1648
01:25:24,075 --> 01:25:25,160
All right.

1649
01:25:25,160 --> 01:25:26,350
Levels-- uh-oh.

1650
01:25:26,350 --> 01:25:28,480
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1651
01:25:28,480 --> 01:25:31,080


1652
01:25:31,080 --> 01:25:33,250
And again, in these
three Harvard crests,

1653
01:25:33,250 --> 01:25:36,434
you just have logic
saying if on edge, bounce.

1654
01:25:36,434 --> 01:25:39,338
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1655
01:25:39,338 --> 01:25:40,790


1656
01:25:40,790 --> 01:25:43,751
OK, what you're doing is
more interesting than why.

1657
01:25:43,751 --> 01:25:44,250
Very nice.

1658
01:25:44,250 --> 01:25:44,910
Very nice.

1659
01:25:44,910 --> 01:25:46,370
Uh-oh.

1660
01:25:46,370 --> 01:25:49,450
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1661
01:25:49,450 --> 01:25:52,105


1662
01:25:52,105 --> 01:25:53,730
I think you have to sacrifice yourself.

1663
01:25:53,730 --> 01:25:56,472
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1664
01:25:56,472 --> 01:25:56,972
Quick!

1665
01:25:56,972 --> 01:26:00,948


1666
01:26:00,948 --> 01:26:04,924
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1667
01:26:04,924 --> 01:26:10,388


1668
01:26:10,388 --> 01:26:10,888
Nice.

1669
01:26:10,888 --> 01:26:18,340


1670
01:26:18,340 --> 01:26:18,840
That's OK.

1671
01:26:18,840 --> 01:26:19,870
You'll get it.

1672
01:26:19,870 --> 01:26:22,404
Yes, yes!

1673
01:26:22,404 --> 01:26:24,356
Very nice.

1674
01:26:24,356 --> 01:26:27,284
[CHEERING]

1675
01:26:27,284 --> 01:26:28,260


1676
01:26:28,260 --> 01:26:31,676
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1677
01:26:31,676 --> 01:26:35,580


1678
01:26:35,580 --> 01:26:37,040
Nice!

1679
01:26:37,040 --> 01:26:40,470
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1680
01:26:40,470 --> 01:27:05,150


1681
01:27:05,150 --> 01:27:05,650
Got it.

1682
01:27:05,650 --> 01:27:07,610
Come on!

1683
01:27:07,610 --> 01:27:09,570
Second to last level.

1684
01:27:09,570 --> 01:27:13,000
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1685
01:27:13,000 --> 01:27:15,688


1686
01:27:15,688 --> 01:27:16,680
All right.

1687
01:27:16,680 --> 01:27:20,152
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1688
01:27:20,152 --> 01:27:27,092


1689
01:27:27,092 --> 01:27:27,592
Yes.

1690
01:27:27,592 --> 01:27:32,330


1691
01:27:32,330 --> 01:27:34,120
Good use of variables here.

1692
01:27:34,120 --> 01:27:35,870
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1693
01:27:35,870 --> 01:27:36,870
Yes.

1694
01:27:36,870 --> 01:27:40,843
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1695
01:27:40,843 --> 01:27:42,807


1696
01:27:42,807 --> 01:27:43,789
Nice.

1697
01:27:43,789 --> 01:27:47,226
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1698
01:27:47,226 --> 01:27:49,681


1699
01:27:49,681 --> 01:27:50,670
It's OK.

1700
01:27:50,670 --> 01:27:51,870
We got to get to the end.

1701
01:27:51,870 --> 01:27:52,370
There.

1702
01:27:52,370 --> 01:27:53,110
Oh!

1703
01:27:53,110 --> 01:27:56,080
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1704
01:27:56,080 --> 01:27:58,260


1705
01:27:58,260 --> 01:28:00,966
Might run late today, but
it's gonna be worth it.

1706
01:28:00,966 --> 01:28:04,300
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1707
01:28:04,300 --> 01:28:05,740


1708
01:28:05,740 --> 01:28:08,620
You can do it!

1709
01:28:08,620 --> 01:28:09,580
Yeah!

1710
01:28:09,580 --> 01:28:12,378
[CHEERING]

1711
01:28:12,378 --> 01:28:13,330


1712
01:28:13,330 --> 01:28:16,186
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1713
01:28:16,186 --> 01:28:17,570
This one's really hard.

1714
01:28:17,570 --> 01:28:20,170
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1715
01:28:20,170 --> 01:28:23,558


1716
01:28:23,558 --> 01:28:25,100
We'll give you two more lives.

1717
01:28:25,100 --> 01:28:26,068
Can you do it?

1718
01:28:26,068 --> 01:28:29,456
[MUSIC - MC HAMMER, "U CAN'T TOUCH
 THIS"]

1719
01:28:29,456 --> 01:28:32,844


1720
01:28:32,844 --> 01:28:33,344
All right.

1721
01:28:33,344 --> 01:28:35,260
How about a big round
of applause nonetheless.

1722
01:28:35,260 --> 01:28:36,900
You got to the second to last level.

1723
01:28:36,900 --> 01:28:37,823
Thank you.

1724
01:28:37,823 --> 01:28:41,064
[APPLAUSE]

1725
01:28:41,064 --> 01:28:41,990


1726
01:28:41,990 --> 01:28:45,700
So this is only to say how much you
can do with these kinds of things.

1727
01:28:45,700 --> 01:28:47,992
And realize, too, that when
puzzle pieces don't exist--

1728
01:28:47,992 --> 01:28:50,991
and indeed, this is going to be one
of the powers with the first problem

1729
01:28:50,991 --> 01:28:53,180
sets and beyond-- is to
actually create your own.

1730
01:28:53,180 --> 01:28:54,960
And this is just a snippet
of one of the examples

1731
01:28:54,960 --> 01:28:56,330
you'll be able to play
with online, where

1732
01:28:56,330 --> 01:28:59,480
if you don't have built into Scratch
something like a cough puzzle piece,

1733
01:28:59,480 --> 01:29:01,570
you can actually make it yourself.

1734
01:29:01,570 --> 01:29:03,487
And so all of this and more awaits.

1735
01:29:03,487 --> 01:29:05,570
And just to paint a final
picture of indeed what's

1736
01:29:05,570 --> 01:29:09,220
ahead in store for the class for you,
based on some pictures from classmates

1737
01:29:09,220 --> 01:29:13,070
past, allow me to dim the lights
one last time and show you CS50.

1738
01:29:13,070 --> 01:29:15,680


1739
01:29:15,680 --> 01:29:19,138
[MUSIC PLAYING]

1740
01:29:19,138 --> 01:31:04,310


1741
01:31:04,310 --> 01:31:04,960
All right.

1742
01:31:04,960 --> 01:31:07,640
That's it for CS50.

1743
01:31:07,640 --> 01:31:11,064
Cake is now served.

1744
01:31:11,064 --> 01:31:16,710


1745
01:31:16,710 --> 01:31:20,060
[MUSIC PLAYING]

1746
01:31:20,060 --> 01:31:33,724