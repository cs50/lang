[Fona troksnis] Vai tas strādā? PATRICK REBESCHINI: Mēs varam sākt. LABI. Lieliski. Sāksim. Tātad tas ir mans lielākais prieks sveikt jūs visus šeit šodien pirmo lekciju no, labi, ievads uz Computing un plānošanu. Pazīstams arī kā CS50 vai arī, CPSC 100, oficiāli šeit Yale. 

Tāpēc mēs nevarētu būt vairāk satraukti sveikt jūs visus šeit. Mans vārds ir Patrick Rebeschini. Es esmu vadītājs instruktors klasei. Es esmu šeit, kas pārstāv grupu aptuveni 60 darbinieki kas strādās kopā ar jums visā semestrī. Šis skaitlis ir gandrīz 60 no mums. Taču pa ārkārtas saistību līmenis ka mēs nodot šo klase, padara CS50 to klasi at Yale University, kas piedāvā lielākais atbalsta līmenis jums visiem. Un mēs nevarētu būt vairāk lepoties piedāvā šo klasi šeit atkal. 

Faktiski, kā jūs drīz pieredze, CS50 ir daudz vairāk nekā klasē. Tā ir kopiena. Un jums būs daļa drīz šīs kopienas. Šis ir otrais gads, Yale piedāvā šo klasi. Mēs veidojam uz galējās panākumus pagājušajā gadā, kur pirmo reizi, šeit šajā universitātē, bakalaura mācību palīgs tika pieņemti klasēs. Tas viss sākās ar šajā klasē pagājušajā gadā. 

Tātad, kā jūs zināt, klases tiek mācīta kopā ar Hārvarda universitātē. Mācīt šo kursu mēs esam relying-- varam paļauties uz lielo kompetenci David Malan un Hārvardas komanda. Tātad Dāvids ir mācīšana CS50 labi, 10 gadus. Un katru gadu viņš ir bijis stumšanas robežas un uzlabojot klases pieredzi. Atkal, mēs nevarētu būt laimīgs turpināt šo sadarbību ar tām. 

Faktiski, viens no Visinteresantākie daļas, Es teikšu darboties šajā klasē tagad, gan Harvard un šeit at Yale, ir tiešām neticami savstarpējā bagātināšanās ideju, kuru mērķis ir uzlabot mācīšanās pieredzi jums visiem. Tā kā rezultātā šis plašais sadarbība starp divām universitāte, CS50 ir lepna paziņot jauno versiju šogad ar ievērojamām izmaiņām. David būs visu pastāstīt par tiem tagad. Tātad please-- šo būtni teica, lūdzu pievienoties man un laipni, lai dotu liels kārta aplausi sveikt Dāvidu un Harvard komanda šeit Yale. 

[Aplausi] 

DAVID Malan: Paldies. Paldies. Tas ir CS50, Harvard University s un Jēlas Universitātes ievads uz intelektuālo uzņēmumiem datorzinātnēs un mākslas programmu. Un ko tas nozīmē, ka šo kursu galu galā, ir par problēmu risināšanu. Patiešām, daudzi no jums varētu atnācu no vidusskolas vai ir pavadījuši pēdējo pāris gadu laikā jautājums, ko daži no jūsu draugiem darīja pagājušajā gadā vai citās klasēs. Un tomēr, realitāte ir, neatkarīgi no tā, ko mēs do beigās, dienā šajā klasē, tas būs par problēmu risināšanu. 

Un kā, piemēram, varbūt ņemt daži apliecinājums faktā ka 73% studentu, kas šo klasi, gan šeit at Yale, kā arī at Harvard, nekad nav veikušas CS klasi pirms. Tātad, ja jūs sēžat šeit auditorija šodien jautājums kāpēc jūs sēžat šeit auditoriju šodien, vai varbūt jūs vienkārši jāievēro kopā ar dažiem draugiem, vai varbūt jūs esat bijis maz ziņkārīgs par to, ko datorzinātnes un programmēšana, realizēt ka lielākā daļa no jūsu klasesbiedriem, lai pa kreisi un pa labi no jums ir ļoti daudz šajā pašā demogrāfisko. 

Un tiešām, ja mēs skatāmies pagājušā gada statistiku ietvaros studentu ķermeņa CS50, gan šeit un Hārvarda, 58% studentu aprakstīt sevi kā mazāk apmierināti. 9% ir ērtāk. Un tad 33% ir kaut kur pa vidu. Un tur nav formāla definīcija par to, ko šie kausi nozīmē. Jūs veida zināt, jūs esat mazāk ērti, ja jums ir. Jūs sajūta mazliet neomulīgs ar varbūt ir klasē. Tu neesi gluži pārliecināts, vai dators zinātne klase galu galā, lai jūs, un saprast, ka jūs esat ļoti laba kompānija. Un patiešām šķirošana, un novērtējums, un atsauksmes, un visi, kas atbalsta struktūra klasē galu galā ļoti individuāli. Vairāk, nekā lielākā daļa jebkuru cita klase ar dizainu. Un tiešām, ko galu galā jautājumi šajā klasē nav tik daudz kur jūs galu up, salīdzinot ar citiem, bet kur tu, 11 nedēļas vai pēdējā, un attiecībā pret sevi nedēļai 0 šeit mūsu pirmais. Tātad, ko tas nozīmē? Nu, tas nozīmē, no tiem 73% skolēni pagājušajā gadā, kas nekad nav veikti CS klase pirms, ar sākumu semestra tie tika niekošanās valodā sauc Scratch, kas mēs paši redzēs šodien. Un līdz beigām semestris bija tie aizgājuši pa visu šo sarakstu izaicinājumiem. Sākot ar valodu sauc par C. Īstenošanā, kas ir pēc pirmā acu uzmetiena, dodoties būt mazliet izaicinājums dažas, bet diezgan gandarījums, kad jums nokļūt Super Mario veselīgs augšup un lejup piramīdas īstenoti, lai gan, tikai ar kaut ko sauc ASCII art. pēdējo year-- īstenošanas ko skolēni pagājušajā gadā, tad tomēr pēc tam tika īstenot viņu paša Cēzara šifra un vigenere izrēķināt. Tātad šifrēšanas algoritmu ar kuru jūs varētu motokross informācija un tad atšifrēt informācija nosūtīt slepenu ziņu. Spēle 15.. Ja jūs atceraties no bērnībā vai kādu puse labvēlību, ka maz plastmasas spēle, kur jūs pārvietoties skaitļi uz augšu, uz leju, pa kreisi un pa labi lai mēģinātu iegūt tos, lai, patiesībā īsteno šo spēli un risinot loģiku tur nepieciešamo. Un tad mēs dabbled kriminālistikas pagājušajā gadā. 

Tātad, vidum semestrī, studenti, kas nekad nav bijis izmanto savas klaviatūras šim nolūkam pirms, Tika rakstīšanas programmatūru atgūt, tā sakot, JPEG vai fotogrāfijas ka mums bija nejauši svītrots no digitālās atmiņas karti no kameras. Atgūt slepenu ziņu no iekšpuses bitkartes attēlu, un citas šādas veidi grafikas, kā arī. 

Mēs pēc tam pārgāja uz dodot visa klase vārdnīca. Tikai tiešām liels teksta failu ar 150.000 angļu vārdiem. Un visi tika apstrīdēts kaut kā lasīt, tā sakot, šie vārdi atmiņā. Into datora atmiņā. Un tad atbildēt uz jautājumiem veidlapas, ir šis vārds? Vai tas ir vārds? Vai tas ir vārds? Tiešām tikai īstenojot pareizrakstības pārbaudītājs. Un tad izaicinājums katram citi ar lielu board-- līderis padome, lai redzētu, kas varētu izmantot vismazāko atmiņas, kas vismazāk laika, lai tiešām pareizrakstības pārbaude lielus dokumentus. 

Mēs pārgāja no tam Īstenojot ones savu web serveri. Līdz ar to ne padarot interneta lapas valodās piemēram, HTML un CSS, ja jūs esat iepazinušies. Bet patiesībā īsteno serveris, klausās internetā pieprasījumiem no pārlūkprogrammām un pēc tam atbildēt uz šiem lūgumiem. Tad īsteno mūsu pašu e-komercija, piemēram, tīmekļa vietni, kur skolēni varētu pirkt un pārdot akcijas. Zīmēšanas gandrīz reālā laikā akciju citāti no Yahoo Finance. Un ļaujot studentiem, lai redzētu kā viņu portfolio attīstās. Un tad beidzot mash up Google News un Google Kartes saskaņā ar kuriem skolēni ar terminu apzīmējumi beigām bija iespēja uzklikšķināt, un apaļas, un meklēt par Google kartē. Un tad redzētu visas Ziņu raksti, kas ir proksimāls tām konkrētajām jomām. Tik tiešām iet no nulles līdz 60. 

Un pa ceļam ar to, kas mums bija pērn sauc, hakeru papildinājumi. Ka pacelt latiņu tālāk uz tiem no jums, kas varētu ļoti labi būt labs daudzums pieredze ir šajā 9% par ērtāku. Tāpēc jāsaprot, ka tur ir ļoti augstie griesti pat tie, izaicinājumi studentiem nāk no cita fona. Jo beigās diena, mēs galu galā koncentrējas gluži vienkārši par to. 

Bet ko tas domāju, problēmu risināšanu? Tātad, pieņemsim ierosināt mēs destilēt to, kā šis. Tātad problēmu risināšana ir patiešām tikai šāda veida attēlu. Tātad jūs esat ieguvuši ieejas zināmā problēma, kaut jūs tiešām vēlaties, lai atrisinātu. Mērķis ir iegūt rezultātus, risinājums šai problēmai. Un tad pa vidu ir ko mēs saucam melnā kaste. Jums nav obligāti zināt vai pat aprūpi, kas ir iekšā, ka melnā kaste. Viss, kas Jums jāzina, ir tas, ka tad, kad jums barību ieguldījumu tajā, jūs, cerams, saņemt produkciju vai risinājums no tā. Un, kamēr šodien mēs apskatīt gan ieejas un izejas, mēs ņemšu ilgtermiņa, un pār Protams, no visa semestra, koncentrēties uz to, kas ir iekšā, ka kastē. 

Un tajā atradīsies kaut kas ko sauc algoritmi. Soli pa solim instrukcijas faktiski atrisināt dažas problēmas. Bet to, kas ir piemērs dažu izejvielas? Tāpēc varbūt vienkārša lieta pie sākuma katra mācību gada, kāds varētu vēlēties, lai apmeklēšanu. Tātad, mēs varētu darīt viens, divi, trīs, četri, pieciem, sešiem, un kā es varētu saglabāt līdzi šo informāciju. Es varētu tikai iet viens, divi, trīs, četri, pieciem, sešiem. Un tikai izmantot veida vienu ciparu. 

Vai es tiešām varētu ierakstīt Tas mazliet ilgāka termiņa. Un kā es varu pārstāvēt visu tad cilvēki šajā telpā? Nu, es varētu darīt kaut ko līdzīgu, OK. Es redzu vienu personu. Viss kārtībā. Es redzu citu personu A trešā persona, un tā tālāk. Bet neviens skaitās cilvēki kā šis. Tātad burtiski, lielākā daļa no mums, ja mēs esam pat gatavojas izdarīt kaut ko, , iespējams, gatavojas iet viens divi trīs četri, varbūt iegūt mazliet iedomātā, pieci, seši, septiņi, astoņi, deviņi, desmit un tā tālāk. 

Un tas ir faktiski sistēma, ko sauc unāro. Uno, piemēram, ANO un tas nozīmē vienu, kur vienkārši ir viens alfabēta burts. Jūs esat tikko saņēmu šo hash zīmi. Un es, efektivitātes, tikai vērsa šie hash zīmes, galu galā kā taisnas līnijas. Bet es varētu būt izstrādāts tiem kā maz stick skaitļi. Kur lai pārstāvētu viens cilvēks, viens ievades, Es tikai izdarīt stick skaitlis vai hash zīme. Bet tas vēl nav viss, kas izteiksmīga. 

Ja viss man ir šie hash zīmes, nemaz nerunājot par stick skaitļi, kā es varētu pārstāvēt kaut ko līdzīgu skaitu 15? Vai 15 cilvēki telpā? Es varētu būt kaut ko darīt, piemēram, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15. Tas vienkārši nav mērogā ļoti labi. Kā ieejas saņemt liels, mēs nepieciešama labāka sistēma nekā šis. 

Un izrādās, ka sistēma, kas izmanto datorus nav viss, kas atšķiras no tā, ko jūs un es zinu. Patiesībā lielākā daļa cilvēku šajā telpā, pat tad, ja jums ir viens no tiem mazāk ērti, ne vienmēr zināt kā jūsu Mac vai PC tiešām darbojas, Jūs esat droši vien vismaz dzirdējuši, ka zem motora pārsega ir 0 un 1 s. Ts binārā sistēma. Tātad tiešām, datori ir vairāk nekā tikai hash zīmes viņu vārdu krājumu, bet ne tik daudz vārdu krājums kā mēs cilvēkiem. 

Patiesi, mēs cilvēki neizmanto bināro. Bi nozīmē 2, 0 un 1. Bet decimal, deka nozīmē 10, 0 līdz 9. Tāpēc mums ir daudz izteiksmīgāku spējas mūsu normālu cilvēku pasaulē. Bet es gribētu apgalvot, ka šīs sistēmas, bināro, un decimal, un viss starp un ārpus tās, ir patiesībā viss ir diezgan pazīstams. Piemēram, uzskata, šis piemērs šeit, 123. Tātad tas patiešām ir, protams, vairāki mēs zinām kā 123. Bet viss, ko es tikko vērsa bija tikai šis modelis simbolu, glyphs lai runāt. Kārtot formu uz kuģa ar krītu. 

Bet kāpēc mēs uzreiz un intuitīvi saprast to kā 123? Nu, ja jums ir līdzīgi me pakāpē skolā, Jūs, iespējams, uzzināja, ka tas ir 1s kolonna, tas ir 10s kolonna, tas ir 100s kolonna. Un kāpēc ir tā, ka noderīga? Nu, tas ir vienkārši aritmētika jums tagad jādara, lai saņemtu no modeli simbolu uz vairākiem mēs saprotam intuitīvi. Ir tas, 100 reizes 1, un pēc tam 10 reizes 2 un 1 reizes 3, kas, protams, ir tikai 100, un tas ir 20, un tas ir trīs. Un tāpēc, ja mēs pievienot šos together-- ah. Tātad tajā slēpjas veida pamatojuma aiz kāpēc šo komplektu simbolu nozīmē kaut ko reālu un ciparu. 

Nu, datori darīt tieši to pašu, bet tās tikai var rēķināties pat vienu. Tā kā man bija iespēja rēķināties pat trīs. Un patiesībā, ja es tur iet es varētu iet augsta kā deviņiem šajā sistēmā. Datori ir tikai nulles un tie savā alfabētā. 

Tātad, ko tas nozīmē? Nu, tas tikai nozīmē, ka tad, ja datora vēlas pārstāvēt, teiksim skaits 0, varbūt izmantojot trīs characters-- trīs alfabēta burti tā sakot, tas, kā dators ir 0. Tāpēc ne viss, kas biedējoši līdz šim. Tas ir tieši tas, ko mēs cilvēki varētu darīt. Un patiesībā, lielākā daļa no mums vēlētos ignorēt vadošo nullēm anyway. 

Dators, ja tā vēlas lai saglabātu numuru 1, Izrādās, gatavojas to darīt. Un datoru, lai uzglabātu numurs 2 ir ne gatavojas darīt unāro sistēmu, ko es norādīja uz agrāk. Tas tiešām gatavojas to darīt. Un tas ir iespējams kur modelis sākas kļūt mazāk skaidrs vairumam ļaudīm. Tas ir 2, tas ir 3. Interesanti, tas ir tagad 4. Un tagad tas tiešām šķiet, ir varbūt noslēpumains, bet tas nav, ja mēs uzskatām ko binārā īsti nozīmē. Tas nozīmē, ka jums ir divi burti jūsu alfabēta. Tātad divi iespējamie zīmes katram vietturi. 

Tātad tas tiešām nozīmē, ka mēs ejam uz nepieciešamību 1s vieta, vai 2S vieta, 4s vietu un pēc tam 8, un 16, 32, un 64. Un kāda ir atšķirība tur? Tāpat tie ir 1, 2, 4, 8, 16, 32, 64. Un pirms mums bija 110, 100,000, 10000. Kāda ir līdzība tur? Un, kas ir modelis? Jā. STUDENTU: pilnvaras 2 nevis pilnvaras 10. DAVID Malan: Jā. Pilnvaras 2 nevis pilnvaras 10. Un tāpēc, ja es gribēju, lai saglabātu iet, 8, 16s un tā forth-- bet tagad, ja Jums ir šāda veida no pavediens, tagad binārā sistēma faktiski ir diezgan vienkārši. Kāpēc tas ir modelis 0'S pasaulē datoru 0? Nu, jo tas ir 4 reizes 0, 2 reizes 0, 1 reizes 0 un jums 0. 

Kāpēc tas ir numurs 1? Pats pamatojums, bet tagad mēs ir 1 no 1. slejā. Kāpēc tas ir 2? Mums ir 1 no 2s kolonnā. Un kā tad es varu pārstāvēt saka, numura 7 bināro? Say skaļāk. 

STUDENT: Trīs 1s. 

DAVID Malan: Trīs 1s. Tātad 1, 1, 1 jo mums vienkārši vajag 4 plus 2 plus 1 dod man 7. Viss kārtībā. Tātad, no turienes, kā mēs pārstāvēt 8 ar 3 vietturi? Jā. 

STUDENT: 1, 0, 0, 0. 

DAVID Malan: Jā 1, 0, 0, 0. Un tomēr varbūt, es veida tehniski nepieciešama pievienot vēl viettura uz kuģa. Ja es gribu, lai ietilptu, ka es patiešām jādara kaut kas līdzīgs šim. Tāpēc man tiešām ir nepieciešams, lai izmantotu tagad 8s kolonna, un tas ir jauki. Bet ziņkārīgs lieta skaitļošanas ir ka notiek uz izmaksu mums kaut ko. Jums ir nepieciešams vairāk RAM datorā tagad. Jums ir nepieciešams vairāk atmiņas jo jums ir nepieciešams kaut ko fiziskā uzglabāt ka papildu bit, lai runāt. Binary cipari. Un tiešām viss, kas ir noticis Šeit, tāpat kā decimāldaļu sistēmā, ja mēs turpinām pievienojot skaitļus uz augšu un uz augšu un uz augšu, mēs iet uz 5 līdz 6 līdz 7. un 8. tas ir, piemēram, veicot: 1, burtiski. Un tad viss pārējais iet atpakaļ uz leju līdz nullei. 

Bet kā mēs patiesībā pārstāvam šīs lietas fiziski datoru? Nu, beigās, dienā, tikai fiziskā ievade notiek manā datorā šeit tas ir barošanas vads, tāpēc elektroenerģijas vai elektroni no sienas. Un tā kā es varu saņemt no kaut fiziskā, piemēram, ka faktiski pārstāv ideja kā šis vietā. 

Nu, ko mēs varētu darīt? Mēs varētu uzskatīt, ka, labi, varbūt, ja elektrība plūst Es varētu glabāt un uz to. Un, ja es esmu saimniecībā zināmā elektroenerģiju, kas ir tikai gatavojas patvaļīgi veido 1. Un, ja es velciet kontaktdakšu un tur nekas tur, jūs zināt, ka ir tikai gatavojas patvaļīgi pārstāvēt 0. 

Tātad, ja kaut kas ir tur, 1. Ja nekas ir tur, 0. Vai arī jūs varat veikt šo nedaudz vairāk vizuāli. Šeit ir 0. Tur nekas interesants iesākto par par atpakaļ manu tālruni. Bet, ja es varētu nedaudz bit elektroenerģijas plūsmas, pat ja tas ir nedaudz spilgti šeit, mans lukturītim devās. Tāpēc es esmu glabājusi maksas un Ergo, šis tālrunis tagad ir 1. Tik 0 1. 

Tātad ar 1. iPhone cik augstu es varu rēķināties ar šādu pieeju? Es domāju, lai 1. Tas vēl nav viss, kas pārliecinoši. Tātad, ko vēl mēs varētu darīt? Nu pieņemsim redzēt, ir kāds, par to tālrunis tiesības tagad, ka es varētu aizņemties? Ikviens, kuram ir telefons ar lukturīti uzcelta? Vai es drīkstu aizņemties? Man nevajag to atbloķēt. Viss kārtībā. Paldies. Ļaujiet man aizņemties šo. Viss kārtībā. Tātad, ja es tagad ritiniet uz augšu un šeit, ko es pārstāv tagad? Jā. Tātad, tas ir trīs, jo tas tiek sniegta 1s kolonna, tas ir, ar 2s kolonnā. Tātad 1 plus 2 ir 3. Un tad, ja mēs mēģinātu iegūt tiešām creative-- oh, paldies. Ļoti preemptive. Viss kārtībā. Man tagad ir trīs iPhones. Viss kārtībā. 

Un tagad this-- es ne darīt tālāk nekā šis. Ko es pārstāv tagad? Tikai Sevens. Bet man vajadzēja fiziski vairāk atmiņas šajā gadījumā. Bet tas viss tā ir. Jūs varat domāt par to, kas notiek on-- paldies you-- iekšpusē tālruni kā tikai to slēdzi, kas ir tiek ieslēgts un izslēgts. 

Un, ja jūs esat kādreiz dzirdējuši vārds tranzistors. Vai, ja jūs esat kādreiz dzirdējuši mārketinga runāt Intel iekšā, kas ir uzrunājot veida aparatūru kas ir iekšā datoru. Intel liek CPU, centrālo procesoru bloku, kas ir līdzīgi smadzenēm iekšpusē datora. Un šie CPU un lietas, viņi savienoti ir daudz un daudz tiny slēdži. Miljoniem, miljardiem slēdži kas var būt vai nu ieslēgt vai izslēgt. 

Tātad datoriem, par laimi, tāpat kā mūsu Mac un PC, var rēķināties veids lielāks nekā 7 vai 8 jo viņiem ir daudz vairāk nekā trīs vai četri biti. Tā vairāk nekā ekvivalents Trīs kabatas, ka mēs tikko bija. Bet tagad tas sāk iegūt diezgan neinteresanti ātri. Ja es tagad gribu, lai faktiski varētu darīt kaut ko vairāk interesantu, Es gribu, lai varētu lēkt lai kaut kas līdzīgs šim. 

Tātad ASCII, tas nav īsti noderīgs akronīms, bet American Standard Code Informācijas apmaiņai. Tas tikai nozīmē, dažus gadus Pirms mēs cilvēkiem nolemts, Jūs zināt, ko mēs gribam, lai varētu izdarīt vairāk ar datoru, nekā tikai skaitļi. Mēs negribam viņus tikko būt dārgi kalkulatori, mēs gribētu, lai varētu darīt lietas, piemēram, tekstapstrāde, kaut arī ļoti vienkārši. Vēlāk mums bija e-pastu un citus šādus materiālus. 

Un tā pasaule nolēma dažiem gadiem pirms saskaņā ar šo sistēmu ASCII, tu zini ko? Dažu veidu programmas jebkurā laikā jūs redzēt ekvivalentu skaitu 65, kā modelis bitiem. Un mēs varētu darīt math šeit uz kuģa. Bitu, kas pārstāv 65 modelis. Nedomā par to kā 65 komata. Domājiet par to kā patvaļīgi, bet globāli, konsekventi kā kapitāla A. Un tad pasaule nolēma, jūs zināt, ko? Paņemsim vēl vienu modeli bitiem. Un, ja mēs kādreiz redzēt skaitlis 66, pieņemsim tikai pieņemu, ka tas ir kapitāls B. Ātri uz priekšu līdz H un es, ja jūs redzat 72 vai 73, kas vajadzētu būt H un es, attiecīgi. Un tik ilgi, kamēr viss pasaules piekrīt uz šo. Tā, ka tad, kad jūs saņemsiet e-pastu, vai jūs varētu saņemt failu uz USB stick, vai kaut kas tamlīdzīgs that-- kad redzat, ka modelis bitiem, jūs zināt, ka tas būtu tas burts vai kādu citu burtu. 

Bet tas ir konteksts īpašs, vai ne. E-pasta programma varētu interpretēt šīs lietas kā rakstzīmes, bet grafikus kalkulators vai kalkulators varētu pārstāvēt vai interpretēt šīs lietas, protams, kā burtiem. 

Tātad ar to teica, ātrā maz pārskatīšanu. Tas ir varbūt trīs raksturs e-pastu, kas ir nosūtīts uz mani. Zem motora pārsega tas viss 0s un 1s, bet mēs vienalga. Mēs ejam, lai sāktu abstrakts virs 0s un 1s uz vēstulēm. Un, ja es redzu modeli 0s un 1s, kas tiešām pārstāv 72, mājiens, mājiens, 73, un tad 33, kas ir ziņa? 

STUDENT: [nedzirdama] DAVID Malan: Tātad, ja jūs domājat, ka atpakaļ atpakaļ tikai mirklis, HI bija ziņa es centos sazināties šeit, jo H ir 72, Man ir 73, un tagad 33-- tu negribēji vienmēr zina, tas jau iepriekš, bet izrādās, ja jūs faktiski redzēt vairāk par diagrammu un sistēmas ka cilvēce vienojās gadiem pirms, tas ir tikai izsaukuma zīme. Un tiešām, ir modelis simboli un cipari katram raksturs ka jūs varētu būt uz tastatūras. 

Viss kārtībā. Pieņemsim abstrakts tālāk. Ja mēs negribam vienkārši ir lietas, piemēram, cipariem un burtiem, mēs tiešām vēlamies īstenot grafiku. Nu, ja jūs esat kādreiz dzirdēja akronīms RGB. Tas ir sava veida datēta tagad, bet tas joprojām ir sava veida tur. RGB ir sarkana, zaļa, zila. Un tas ir tikai sistēma no sakot, jūs zināt, ko, pieņemsim izmantot trīs komplekti bitiem. Kopums 8 biti, vēl viens komplekts 8 biti, un vēl viens komplekts 8 biti. Un pieņemsim izmantot šos bitus uzglabāt cik daudz sarkano mēs vēlaties par, mūsu ekrāna cik daudz zaļā mēs gribam mūsu ekrāna, un cik daudz zilo mēs gribam mūsu ekrāna. Un tas tikai nozīmē, ka, ja jums ir lot-- liels numuru sarkans, tas nozīmē, ka man daudz sarkanā krāsā. Ja jums ir liels numurs zaļa, dod man daudz zaļo. Un, ja jums ir tikai nedaudz no zila vai nedaudziem kā 33, man mazliet zila. Un, ja jums gadās apvienot tos trīs lielumi, tā sakot, jums this-- jūs tikko var redzēt uz projektoru šeit, bet tas tumšs ēnojums dzeltens vai brūns. 

Bet tas ir teikt, izmantojot šo modelis 8 plus 8 plus plus 8-- ka modelis 24 bitu ir kā dators būtu uzglabāt ka ēnā dzeltena vienā tiny dot pikseli uz ekrāna. Tāpēc mēs esam aizgājuši no 0s un 1s uz decimālo numurus uz alfabēta burtiem. Vai vairāk interesanti, krāsaini punkti. 

Nu, ko, protams, tad nāk nākamais? Nu, kas ir attēls, kas jums skatiet Facebook vai saņemt pa e-pastu? Vai kā? Kāda ir definīcija tehniski no attēla? Jā. Kas ir attēls sastāv no tā, ja jums izskatās tiešām tuvu pie ekrāna? Jā. Tas ir tikai visu ķekars pikseļi. Patiesībā, ja jūs lietojat savu klēpjdators varbūt vēlāk, un izskatās tiešām cieši at it-- atkarībā par cik dārgi klēpjdators ir un cik augstas kvalitātes ekrāns ir, jūs varētu ļoti labi redzēt visus maz punktiņi uz ekrāna. 

Un tie punkti vai pikseļi, kas nozīmē, ka ir 24 biti, kas pārstāv katru pikseli tādā ziņā, ka fotogrāfija, ka jūs redzēt uz Facebook, vai arī, ka jūs vienkārši ņēma uz jūsu iPhone nesen. Un tā tas, kā mēs uz lietām, piemēram, grafikas. Nu, kas ir video? Video ir tikai kopa grafikas lidojot ekrāna atkal un atkal un atkal. Un tā video tiešām, ir tikai modeļi bitu pārstāv Režģi, rindas un kolonnas punkti, lidojot ekrāna attēlu, pēc attēla, pēc attēlu, pazīstams arī kā Kustīgās bildes. Tā ka to ieejas un izejas. 

Viss, kas mums ir tagad, ir pieņēmums, ka jūs zināt, ko, ja mēs gribam datoru pārstāvēt informāciju, mums ir sistēma, lai dara to. Mēs varam darīt to ar 0s un 1s beigās, dienā. Bet mēs varam abstrakta, tāpēc runāt, uz augšu, ka tā, lai veidotu vairāk interesantas lietas. Un šeit par out in CS50, un datorzinātnes kopumā, mēs tagad stāv uz pleciem no visiem cilvēkiem, kas nāca pirms mums, kas izpētījuši, ka out. Un tagad tikai pieņemt, ka datori var pārstāvēt ieejas un izejas. 

Bet tagad pieņemsim faktiski kaut ko darīt ar tiem. Tātad algoritms ir tikai kopa instrukcijas, soli pa solim, risināšanai dažas problēmas. Un ko varētu viens šāda problēma būt. Tātad šī ir vecās skolas tehnoloģija, tālruņa grāmatu. Un iekšpusē tālruņa grāmata ir viss ķekars vārdus un numurus. Un šie nosaukumi parasti ir sakārtoti pēc alfabēta. 

Tātad, ja es gribēju atrast kādu, Šis tālrunis grāmatu, piemēram, Mike Smith, kas ir tipisks cilvēks gatavojas darīt? Nu, jūs varētu vienkārši atvērt it up, apskatīt pirmajā lapā. Es neredzu Mike Smith. Savukārt uz otro lapu, Es neredzu Mike Smith. Un tikai glabāt iet un iet. Vai šī pakāpeniskā pieeja ir pareiza? Jā. Tas ir sava veida stulba, tiesības. Tas ir neefektīva, vai ne. Jo tas notiek, lai uz visiem laikiem lai nokļūtu Mike, bet tas ir pareizs. Jo, ja Mike ir šeit Es tiešām atradīs viņu. 

Tātad, kas ir nedaudz vairāk saprātīga persona gatavojas darīt? Viņi joprojām var atvērt uz priekšu, un varbūt lidot caur tālruņa grāmatu divas lappuses vienā reizē. Divi, četri, seši, astoņi. Es nevaru tiešām fiziski darīt to ļoti labi. Bet teorētiski, tas būtu divreiz tik strauji, divas lappuses vienā reizē. Vai šis algoritms ir pareizi? 

STUDENT: [nedzirdama] DAVID Malan: Ne vienmēr. Labi. Kāpēc tas brīdinājums? 

STUDENT: Tāpēc, ka viņš varētu būt viens no lapām, ka jūs izlaižot. DAVID Malan: Jā. Tātad, pat ja man tuvāk un tuvāk. Ko darīt, ja viņš ir tikai nejauši, ar slikti luck, iestiprināta starp divām lapām ka es esmu peld pāri? Tātad mums ir nepieciešams noteikt par to. Mums tiešām ir nepieciešams tad saka, pagaidiet minūti, Varbūt, ja mēs iet pārāk tālu, varbūt ja mēs hit T sadaļu, T nāk pēc Smith, tad mums vajadzētu vismaz dubultā atpakaļ vismaz vienu lapu. Tātad fixable, bet ir nosacītu jautājums tur. Tātad, tas ir divreiz ātrāk, bet jūs varētu ir dubultā atpakaļ tikai mazliet. Bet neviens savā istabā, pat tad, ja jums nav īsti izmantot telefonu grāmatas vairs, gatavojas sākt sākumā. Ko tu taisies darīt meklē Mike Smith? Jūs esat gatavojas doties aptuveni uz S gados. Vai arī, ja jums nav īsti ir Cheat lapa uz papīra, jūs gatavojas iet vismaz aptuveni uz vidu. Un, protams, ne uz priekšā grāmatas. Jūs esat gatavojas skatīties uz leju. Un matemātiski jūs, iespējams, gatavojas redzēt M sadaļu, kas ir aptuveni pa vidu. Un tad jūs gatavojas saprast, kas ir taisnība? Kur ir Mike? 

STUDENT: [nedzirdama] DAVID Malan: Jā. Tāpēc viņš ir vairāk nekā šajā pusē. Un tā, ko jūs varat darīt? Nu, gan pārnestā nozīmē un burtiski Jūs varat saplēst problēmu pusi reizi? Un tad zināt, ka jūs varat mest šī puse no problēmas prom. Un tagad mēs esam palikuši pamatos tā pati problēma, bet tas ir uz pusi tik liels. Un tāpēc tagad to, kas ir komplekts instrukcijas? Kas ir algoritms lai atrastu Mike Smith? Tas ir tieši tas pats. 

Tagad tas notiek, ir M sadaļa, un tas ir Z sadaļa, bet pamata formula ir joprojām tāda pati. Iet apmēram uz vidu, skatīties uz leju, oh, darn to. Tagad es esmu T sadaļā, Es esmu gājusi pārāk tālu. Bet arī šeit jūs varat piemērot šo pašu loģiku. Mest puse no problēmas prom, un tagad mēs esam palicis ar problēmu, kas ir viena ceturtdaļa no lieluma. Un mēs varam atkārtot, un mēs varam atkārtot, un mēs varam atkārtot, kamēr teorētiski tur ir tikai viena lapa kreisi uz kas Mike nu ir vai nav. 

Tātad, kas ir tik spēcīgs par šo ideju? Es domāju, galu galā, tas ir diezgan intuitīvi. Neviens gatavojas sākt pie sākot no tālruņu grāmatas un uzsist 1000 lapas, lai atrastu Mike Smith. Lielākā daļa ikviens šajā telpā notiek darīt aptuveni šāda veida algoritmu ietaupīt uz plīsumiem. 

Un tā kāpēc mēs to darām? Nu, uzskata efektivitāti. Apsveriet, cik daudz labāk tas algoritms bija sadalot to uz leju sastāvdaļās. Tātad, ko es pirmo reizi darīt? Es pacēlu telefona grāmatu. Un dators zinātnieks, un programmētājs, vispār izrādās, notiek sākt skaitīšanas visu 0. 

Kāpēc? Nu, tas ir mazliet dīvaini ka mēs cilvēkiem rēķināties, vispār, sākot no viena. Jo kas ir mazākais skaits mēs varam skaidri atspoguļo, pamatojoties pat uz mūsu veco grade skolas math? Nu, tas bija 0, vai tas ir aiz komata vai bināro. Un tā jūs redzēsiet pasaulē skaitļošanas un programmēšana, Konkrētāk, sākam skaitot viss no 0. 

Tāpēc es pacēlu telefona grāmatu soli 0. Es esmu gatavojas atvērt ar vidū telefona grāmatu. Un tas tiešām ir izpausme, ko es darīju. Un tad divas solis bija apskatīt nosaukumiem. Step trīs ir nedaudz atšķirīgs konceptuāli. Es esmu jautā sev jautājumu. Ja Smith ir viens no vārdiem, Es esmu gatavojas pieņemt lēmumu. Ja viņš ir starp vārdiem, tad es esmu dodas uz zvanu Mike. Un es esmu gatavojas pieņemt lēmumu pamatojoties uz šī gabala informācijas. 

Tomēr, ja ne, ja Smith ir agrāk grāmatā pa kreisi, Es esmu gatavojas atvērt uz vidu kreisā puse no grāmatas. Un tad šeit ir gudrība, Es esmu gatavojas doties atpakaļ uz divi soli. Es esmu gatavojas veida stāvēt uz savām pleciem un tikai atkārtot iepriekšējo darbu es darīju. Bet darbs man ir palicis, ir mazāk, un mazāk, un mazāk. Bet tas joprojām dodas uz darbu. Bet, ja Mike, vietā, ir vēlāk grāmatā pa labi, Es esmu gatavojas atvērt uz vidu no labajā pusē grāmatas, tad doties atpakaļ uz divi soli. 

Bet tur tiešām ceturtais scenārijs. Mike ir vai nu šeit, vai šeit, vai šeit, or-- 

STUDENT: Nav tur. DAVID Malan: Nav tur. Un tiešām, ja mums nav paredzēt šis ceturtais un pēdējais scenārijs Mūsu programma varētu būt buggy vai kļūdains kaut kādā veidā. Else, atmest, ja kas mēs neesam atraduši Mike vispār. Un tiešām, ja jūs esat kādreiz ievērojuši dators karājas, vai visi pēkšņi vārdu vai kādu citu Programma tikai aizveras negaidīti, un dažreiz tevi kļūda vēstījums ir burtiski ka. Šī programma atmest negaidīti. Tā var būt jebkura vairāku iemeslu dēļ. Bet dažreiz tas ir kaut kas tik vienkāršs kā šis. Cilvēka programmētājs kurš rakstīja šo programmatūru nesaprata, ka, ak, tur ir tālāk lieta, kas faktiski var notikt. Un, ja jums nav rakstīt kodu sagūstīt, ka ceturto scenāriju, tas ir tiešām negaidīts dažreiz ko dators varētu faktiski darīt. Tagad sauksim ārā dažas no šīm lietām. Tātad dzeltens šeit, es ir uzsvēruši noteikumi ka turpmāk mēs esam tikai dodas uz zvanu funkciju. Funkcijas pasaulē programmēšana ir tāpat kā rīcību, paziņojumi darbību. Tātad uzņemt, atvērta, meklēt at, zvaniet, atklāts, atvērts, atmest. Tas ir uzdevums, procedūra, darbība, kāds skaits sinonīmus darbosies kā labi. Tagad to, kas ir šīs lietas tagad dzeltenā krāsā? Ja cits, ja cits, ja cits, tie ir kādi mēs ejam, lai izsauktu apstākļi plānošanu, vai filiāles, lēmums norāda, ja Jums gribas. Bet kā jūs zināt, kas dakša uz ceļa, lai, tā sakot? Mums ir nepieciešams, lai izceltu termini pa labi tur, kas ir šie jā, no uzdotajiem. Šie patiesie viltus jautājumiem. Smith starp vārdiem? Smith agrāk grāmatā? Smith vēlāk grāmatā? Tie ir jautājumi kas ir jā, vai nē, vai līdzvērtīgi patiess vai nepatiess, vai līdzvērtīgi, viens vai nulle atbilde. 

Un tikmēr tur ir tikai viens pēdējais gabals. Tas šeit ir kāda veida sekas? Tas, vai jums programma pirms, kā tu aprakstīt, kas solis septiņi un 10 darāt? Ko tu teici? STUDENT: rekursīvo solis. DAVID Malan: rekursīvo solis. Jā, būtībā. Tas ir tehniski iteratīvs šeit, ja jūs esat iepazinušies. Bet mēs būsim atpakaļ uz to. Bet tas dara kaut ko skaidri. Atkal, tas mudinātu cikls, cilpas, tiesības. Jūs burtiski dodas atpakaļ uz kādā agrākā posmā. Un tā tiešām, tas būs īstenot kādu ciklu. Bet jūs neesat gatavojas saņemt iestrēdzis šajā bezgalīgi, labi. Jo, ja jūs pastāvīgi pārbaudīt ir Mike šeit, vai pa kreisi, vai ne šeit, galu galā viņš nav gatavojas būt tur. Un jūs varat vienkārši atmest pavisam kā uz šī pēdējā rindā. 

Tā ka to vārdu krājumu. Un tas bija tas, ko mēs būtu parasti sauc pseudocode kodu. Tas nav faktiskā valoda. Tā ir tikai ļoti kodolīgs angļu, bet tas sazinās punktu. Nav formāla struktūra šeit. Jums tikai izmantot, tas ir maz vārdus, bet kā skaidri vārdi kā jūs varat sazināties savu ideju. 

Tagad, cik labi ir tas, ka algoritms un cik daudz labāk tas ir? Nu, mums nav iekļūt specifika numuru vai jebko tāpat. Bet mēs varam apskatīt forma šā šķīduma. Tātad, ja mēs vienkārši izdarīt dažus xy gabals šeit uz horizontālās ass šeit. Pieņemsim tikai zvanīt problēmas apjomu. Un dators zinātnieks būtu parasti izmanto N kā mainīgo šeit. Tātad n lapas, vai n cilvēki telpā, vai kāds tas ir jūs mēģināt skaitīt. 

Un tad uz vertikālās ass, no pa kreisi, kas varētu būt laiks, lai atrisinātu. Tik, cik sekundes dara ņem mani atrast Mike Smith? Vai cik soļus tas veic? Cik lapa pagriezienus tas veic? Tātad tas, cik tas maksā mani laikā, lai atrisinātu problēmu. Un mēs varētu izdarīt pirmais algoritmi slīpums, ja jūs, kā tikai šo taisna līnija sarkanā krāsā. Un es aicinu to n. 

Kāpēc n? Kāpēc tas ir tikai šī viena vienam attiecības? Nu, ja Verizon vai neatkarīgi telefona sabiedrība piebilst vēl vienu lapu, lai tālrunis grāmatu nākamajā gadā, kas varētu virzīt Mike vienu vairāk soli tuvāk galam, atkarībā no tā, kad šī lapa ir. Un tā efekts var tikai būtu pievienot vēl vienu sekundi. Vai vēl viena lapa kārta. Viens pret vienu attiecību. 

Savukārt otrais algoritms. Cik daudz ātrāk bija tas, ka intuitīvi? Kur es devos divas lapas vienā reizē? Jā. 

STUDENT: [nedzirdama] 

DAVID Malan: Jā. Tātad tas būs divreiz ātrāk. Un mēs varētu izdarīt, ka šeit atkarībā no apjoma. Tas joprojām ir taisna līnija, bet zemāks nekā sarkanās līnijas. Tāpēc, ka uz kādu numuru lappušu, ja tas notiek Jums tas daudzi pasākumi, ar pirmais algoritmu, tas notiek, lai jūs pusi kā daudzi soļi ar otro. Un tā dzeltenā līnija aprakstot otro algoritmu ir tikai būs zem tā. 

Bet to, kas ir patiešām spēcīgs ir domāt par trešais un pēdējais, un pārsteidzoši visvairāk intuitīvākas algoritms, kas ir šo formu. Tehniski mēs sauktu šis ir logaritmiska līkne. Log n 2 bāzi šajā lietā. Bet tas nav īsti jautājums. Svarīgi tiešām ir fundamentāli atšķirīgs forma, ka tā ir. Un jūs varat apsvērt, cik daudz īsāks šī līnija patiešām ir ilgtermiņā. Tas ir pastāvīgi pieaug. Tas nav saplacināt perfekti. Bet tas aug kādreiz tik daudz lēnāk jo problēma kļūst lielāka un lielāka. Un jūs varat domāt par to šajā way-- ja Verizon nav tikai pievienot vienu lapu nākamgad, bet dubultspēlēs lappušu skaits tālruņu katalogā, pirmais algoritms varētu veikt divreiz tik daudz soļus. Ja tas ir 1000 lappuses šo gadā, 2000 lapas nākamajā gadā, Mike varētu būt, ka daudz tālāk. Tātad, tas ir 1000 papildu pasākumus, lai atrastu viņu. Otrais algoritms varētu būt tikai 500 vairāk soļi, lai atrastu viņu, jo atkal, Es esmu peld caur to divu laikā. 

Bet ko par trešo algoritmu? Ja Verizon divkāršo lielums tālruņa grāmatu nākamgad no 1000 līdz 2000. gadam lapas, cik daudz soļu ir mans trešais algoritms gatavojas veikt? Jā, tas ir tikai viens. Un tas ir spēcīgs ideja. Jūs varat lietot 1,000 lapu kodums no šīs problēmas uzreiz. Un tagad, ja jūs uzskatāt, dumjš scenārijs, bet tā veida runā uz jauda šāda veida intuition-- ja tālrunis grāmata bija, piemēram, četrus miljardus lapas, jūtas kā ļoti liela problēma. Un tiešām, tas varētu ņem mani četri miljardi lapu Izrādās, lai atrastu Mike Smith ka gadījumā ar pirmo algoritmu. Bet cik soļus tas tā ņemt trešajā algoritmu atrast Mike starp četriem miljardi gabali papīra? Tātad četrus miljardus jūs saplēst uz pusēm. Jūs saņemsiet divi miljardi. Tad viens miljards, tad 500000000, 250000000, 125 million-- bet tas uzskata, tāpat kā tas ir gatavojas veikt kādu laiku. Es varētu būt vajadzīga 32 pirkstiem saskaitīt, ka augstas. Bet tas tiešām ir tik maz kā 32 lappušu asaras. Jūs varat iet no četriem miljardus vienu lapu dalot oriģinālu skaits lappuses uz pusi 32 reizes kamēr jūs palicis tikai, ka viena lapa. 

Tagad, protams, es esmu krāpšanos šeit. Tas nav, ka mēs vienkārši ir sava stulba pilnīgi ar pirmās divas algoritmi. Es esmu krāpšanos savā ziņā, vai tiešām es esmu piesaistot pieņēmumu. Kāds bija taisnība par tālruņa grāmatu tās sākotnējā formā, kas ļāva man pat izmantot šo trešo algoritmu? Yeah? Mērķauditorija: Tas bija sakārtoti alfabētiskā secībā. DAVID Malan: Tas bija sakārtoti alfabētiskā secībā, vai ne? Ja tas būtu tikai izlases kārtība, tas ir atkritumi laika, visa šī saruna. Man ir apskatīt katru lapa, ja tas ir jauktā secībā atrast Mike Smith pirms I var secināt, ka viņš ir tur vai nav. Un tā stūra mums ir samazināt ir tas, ka man ir pieņemts, ka kāds cits šajā gadījumā darīja darbu par mani. Un tā, kas galu galā uzaicinājumi jautājums, labi, pagaidiet minūti. Kā jūs šķirot 1000 lappuses nosaukumu un numuru? Tas ir tiešām atšķirīgs problēma, kaut mēs atgriezties nākotnē. Bet, kad jūs domājat par mājas lapas piemēram, Facebook un Google Gmail un lietas, piemēram, Google pašu meklēšanas indeksi, ja jums ir miljoniem vai miljardiem gabali datiem, kas tiek glabāti šajās dienās, searching-- un nemaz nerunājot šķirošanas šos problems-- galu galā ir izaicinājums pār sevi pašu. Un tiešām, tas tad ir tikai viens no tiem uzdevumiem, ka mēs būsim apskatot. 

Tāpēc tagad pieņemsim, veltiet laiku un to apskatīt CS50 sevi un sniedz jums sajūtu to, kas veikalā šajā semestrī. Patiešām, ja jums nav jau, do to apskatīt šo URL. Un kā Patrick norādīja to, šogad mēs esam veicot ievērojamas investīcijas visu vairāk gaitā atbalstu struktūra ziņā Tehniskās vienošanās un CAS, darba laiks, sekcijas pieejamību, un digitālie materiāli tiešsaistē, kā arī. Patiešām, runājot par kursu s lekcija, mēs esam šeit šodien. Un cerības šis gadā oficiāli Kursa ir apmeklēt, lai šodien, protams, ir pēdējā lekcija, un protams apmēram vidū semestra ar katru lekciju starp pieejami vispār piektdienas pēcpusdienā online, gan Yale studentiem un Harvard studentiem šogad. Tiešām, kas ir viens no būtiskas izmaiņas ir ka mēs esam pieņemot at Harvard paradigmas ļoti daudz tāpat mēs šeit pagājušajā gadā un tagad šajā gadā, lai līdzīgi, mēs joprojām filma visvairāk Kursa s lekcijas Cambridge bet padarīt tos pieejamus iepriekš nekā mums ir pagātnē tāpēc, ka tie no you-- ja jums vēlētos, piemēram, saņemt atspērienu par materiāliem par pirmo nedēļas nogalē samērā nekā otrajā nedēļas nogalē, jums ir piekļuve šiem materiāliem veidu, meklēšanas, Iegulstams, hyperlinkable lai saistītu resursu visu agrāk. Runājot par tēmu, lai dotu jums sajūtu kursa s trajectory-- un daži no tas varētu būt žargons par tagad, bet ne uz ilgu laiku, esiet droši. Mēs sākt jau šodien, galu galā, ar meklē vienu programmu valodā sauc nulles. Mēs pārejas tam nākamajā nedēļā, lai kaut ko sauc par C un tad meklē citas ēkas bloki problēmu risināšanai, lietas sauc bloki un algoritmus, kā mēs izmantojam atmiņas mūsu labā un trūkumi, un lietas, piemēram, datu struktūras, un pēc tam uz astes beigām klase meklē mašīnu apmācības un meklē citu valodā sauc Python, kā web darbojas, kā internets vairāk parasti darbojas, protokoli, piemēram, HTTP, valodas datubāzēm, piemēram, SQL, JavaScript web, un galu galā sasaistīšana visi no tiem kopā. 

Un tā tiešām, pie beigām dienā, jums neiemācīsies šajā klasē Scratch vai C vai Python vai SQL vai JavaScript. Jūs vietā vispār mācīties datorzinātnes un nodibinājumi apakšpunktu, un jūs iemācīties programmēt jebkurā daudziem no tiem valodas gar ceļu. Tātad tiešām, viens no mērķiem no kursa beigās ir pacelties visus kurss s mācību riteņi ar tiem pēdējās nedēļās lai pēc tam, jūs varat atgrieztos savā fields-- vai tas ir vai nav datorzinātne vai inženierzinātnēs, jo dabas zinātnes, māksla, humanitārās zinātnes, vai beyond-- un dot dažus no šo Protams idejas un šajā jomā ir idejas un praktiski prasmes uz savu domēnu Lai atrisinātu problēmas tajā. 

Ko mēs darīsim šeit tikmēr vairumā ceturtdienās pēc šodien ir ar kursu galvām vadošajiem ko mēs saucam walkthroughs Kursa problēma kopas. Tātad, katru nedēļu, kad mēs ir problēma noteikt, mēs iešana cauri vietā kā šis kurss ir problēmas, piedāvā jums dažus padomus un trikiem un dizaina metodes. Bet, ja jūs neesat spējīgs veikt tiem personīgi, realizēt tos pats resursi tiks iestrādāta ar vienu no kursa s mācību asistenti problēmā nosaka paši, kā arī. 

Problēma noteikti šogad, atšķirībā pagājušajā gadā, balstoties uz atsauksmēm, joprojām būs atbrīvota piektdienās. Bet nevis dēļ turpmākā Piektdiena, tādējādi sniedzot jums tikai septiņas dienas, efektīvi ir jāmaksā 10 dienas vēlāk. Un tiešām, tas nozīmē, ka tie būs pārklājas ar nedēļas nogalē. Bet mēs ceram, ka šogad īpaši tas ļauj studentiem labāk pielāgotos bēgums un plūsmas viņu grafikiem, vai tas ir akadēmiķi vai extracurriculars vai vieglatlētikā vai vidusposma sezona. Jūs varat vai nu priekšējā slodze vai back-load savu nedēļu koncentrējoties uz CS50 balstīta par savu nedēļas faktisko kursu slodzi. 

Problēma noteikti sevi segs valodu klāstu, lai gan mēs koncentrējamies galvenokārt agri uz C pirms mēs pēc tam koncentrēties uz augstāku līmenis, vairāk interneta orientētus valodas. Un tad pāris FAQ here-- Jums vajadzētu veikt klases, piemēram CS50 kā pirmo gadu? Tik absolūti. Un tiešām, tas nav vienmēr kaut kas Jums vajadzētu atlikt, kamēr jūs esat samazināt zobus uz citu veidu klasēm. Bet, jāapsver ka daudziem studentiem, mani ieskaitot atpakaļ dienā, šis ir ļoti svešs lauks, it īpaši, ja jums nekad nebija veikt AP CSA vai kaut kas tamlīdzīgs vidusskolā. Bet saprotu, ka agri, vai tas ir šis kurss vai kādu citu ievadkurss, tagad patiešām ir labākais laiks, Es domāju, lai atrastu kādu jaunu ceļu vai dažas jaunas akadēmiskās intereses, kā arī. Un tad, ņemot ar citiem courses-- tāpēc viens no galvenajiem atšķirības šeit versus Harvard ir tas, ka mēs tikai veikt četrus kursus semestrī Hārvarda kāda iemesla dēļ. Un jūs puiši tiešām pull off daži 36 kursu kopējais gaitā jūsu četriem gadiem, kas nozīmē, ka parasti četri vai pieci klases. Un es domāju, ka tas ir diezgan godīgi teikt un atsakās CS50, dizains, ir iespējams, ne klases tips ka jums vajadzētu parasti ņemt ar četriem citiem kursi kopā pieci jo psets ir līdz dizains diezgan intensīva. Patiešām, es arī uzzināju šis atpakaļ dienā. Es nevarētu aprakstīt CS50 un datorzinātnes, programmēšana jo tik daudz grūti, kā tas ir tikai laikietilpīga. Tas nav veida lieta kur pēc vakariņām, jūs var doties atpakaļ uz savu kopmītnes istaba, apsēsties, un sāciet koncentrējoties uz PSET domāšana, labi, Es esmu gonna bang šo out šovakar un pēc tam pārvietot uz manu nākamo tēmu nākamajā dienā. Reizēm jūs vienkārši hit sienas. Jums ir bugs jūsu kodu. Jums nav obligāti zināt kā atrisināt dažas problēmas. Un viena no galvenajām iezīmēm programmēšanas par sevi līdz pat šai dienai ir jums tikko veida nepieciešams veikt solis atpakaļ dažreiz, gulēt uz tā vai domājat par to gaitā par jog vai kādu citu darbību, un pēc tam nāk atpakaļ uz to svaigu. Un jums ir nepieciešams šos logus laika. 

Un tiešām, tas ir iemesls, kāpēc mēs esam pagarināts laiku, pieejami problemātiskajām komplekti šogad un arī, par šo URL Es safasēti agrāk par kas jauns šajā semestrī, apgrieztām problēma nosaka tā, lai viņi būtībā ne mazāk stingra, un takeaways nav mazāk, bet tur ir daudz mazāk front jautājums, daudz mazāk legwork, kas jums ir nepieciešams, lai do priekšā katru problēmu kopumu, kā jūs redzēsiet, pirms jūs varat faktiski nodoties gaļu no tā. Tā saprotu, ka tie un citi izmaiņas ir uz horizonta labāk uzņemt studentus, bet galu galā, lai pārliecinātos, ka takeaways ir tiešām, cik augstu vien iespējams. Tāpēc, kamēr vairāk darba, nekā to varētu būt tipisks klasē, mēs ceram, ka atgriežas jūs un takeaways par jums un prasmes un idejas ar kuru jūs izejat ir vēl jo vairāk pārliecinoši, kā rezultātā. Un, lai iegūtu Jums there-- un tas ir viens no galvenajiem takeaways, kā Patrick norādīja earlier-- ir Kurss ir atbalsta struktūra. Tātad ne tikai CS50 ir viens no lielākie kurss personāls par Campus. Tas arī ir viens no visvairāk bakalaura. Patiešām, CS50 pērn bija pirmajā klasē lai būtu bakalaura mācībspēkus. Un apliecinājums šo panākumu darīt tagad daudzi citi laukumi Yale CS ir, ka, kā labi. Un studentiem, īpaši, būs šīs vienošanās un kursu palīgi būt atbalsts visa tīkls atbalsta resursiem, Starp tām sadaļām vai recitations, nedēļas iespējas lai būtu vairāk intīmo diskusijas un atsauksmes materiāla mērķtiecīgu par dažādām trasēm, studentiem mazāk apmierināti, ērtāk, vai kaut kur pa vidu. Tie sekos pieejamību lekcijas ar vairākas dienas katru nedēļu pirmdienās un otrdienās. Un tad birojs hours-- viens pret viens iespējas palīdzību no kursa CA un Tas būs trešdienās un ceturtdienās un svētdienās pie vairākiem reizes, kas visi tiks publicēta kursa tīmekļa vietnē, pat vairāk nekā pagājušajā gadā, kā arī. 

Bet to, kas ir galvenais, lai CS50, ja nav protams mazliet neparasti, ir Kurss ir kultūra, kas mēs esam mēģinājuši audzēt, gan Cambridge daudzus gadus un tagad pavisam nesen New Haven. Un patiesībā, tuvojas tas Sestdien, ja neesat dzirdējuši, ir CS50 Puzzle diena, kas ir nekāda sakara ar datorzinātnēs bet ir pilnībā izstrādāta, lai nosūtītu ziņojums, ka datorzinātnes ir par problēmu risināšanu. Un tiešām, ja vēlaties, lai partneris ar vienu vai diviem vai trim draugiem un veidot komandu CS50 Puzzle diena, ieskatieties pie reklāmās, kas ir uz izeju. Un trīs stundas picas un mīklas un balvas gaida. Un tiešām, lai Pirmo reizi šajā gadā, tā netiks solidāri ar Harvard. Tas būs šeit neatkarīgi Yale. Lai saglabātu acu, kas paredzēti tiem, ja jums nav. Lielākā katru piektdienu šajā semestrī mēs cenšamies veikt liela klasi justies mazs un radīt ap 50 skolēniem uz pusdienām ar kursu personālu, ar absolventu, draugiem no rūpniecības runāt par to, kāda ir dzīve pēc klases tāpat CS50 un pa vasarām un pēc skolas beigšanas. Lai saglabātu acu, kas paredzēti ielūgumus uz to. Pirmo reizi kādreiz Šogad mēs turēt pirmais CS50 kodēšana konkurss, izvēles opt-in iespēja mid-semestrī, kad mums visiem ir bijusi daži sešas vai septiņas nedēļas programmēšana C ar savas jostas konkurēt, ja jūs būtu tik choose-- atkal par teams-- mēģinot atrisināt tik daudz izaicinājumus kā jūs varat programmēšanā ar draugi jums pret citiem. 

Un uz astes semestra Vai mēs čartera daži autobusi, faktiski pavadīt kādu laiku Cambridge, ja jūs vēlētos pievienoties mums, lai tā saukto CS50 hackathon. 7 PM mēs sāksim. Ap 9 PM, mums būs pica. Ap 1:00, mums būs burritos. Un kāds vēl nomodā par autobusu braukt mājās ap 5:00, mēs apstāties off pankūkām pie IHOP ceļā home-- 12 stundu iespēja iegremdēt sevi ar klasesbiedriem un darbiniekiem Gaitā galīgajā projektā, kas ir iespēja iet krietni pārsniedz Protams problēma komplekti un izstrādāt un īstenot lielāko kaut kas interesē jūs, kas galu galā Featured šeit Commons. Pirmais CS50 godīgi pēdējo reizi gadā, kas ir beigu semestra izstāde vai svētki, ko visi klasē bija paveikts, jo īpaši tiem, atkal, kurš devās no neko kaut ko, no nulles līdz 60, kam nav iepriekšējas fona un uzrāda, galu galā, kaut visai Campus un, ja online, pasaule, lai redzētu, kā arī. 

Tagad tie šeit ir tikai daži no Tehniskās vienošanās un CAS, kas padara CS50 iespējams. Ļaujiet man uzaicināt jebkuru no šo darbinieku kas ir šeit, lai nākt klajā uz skatuves, kā arī kursa galvām, piedāvāt dažus vārdus iedvesma, kā arī. 

ANDI: Hi, guys. Vai jūs guys mani dzirdi? Paldies par pievienošanos mums par šo jauki, lietains ceturtdienas pēcpusdienā. Mans vārds ir Andi. Es esmu junior Berkeley. Un kopā ar Stelios un vasarā, mēs būsim jūsu trīs galvu mācīšana palīgi šo gaidāmo gadu. Tātad, es domāju, šovs hands-- cik daudzi no jums nav nodoma būt par CS galvenais, ne īsti niršanas dziļi uz datorzinātņu kā galvenais šeit? Satriecošs. Tas ir izcili. 

Tāpēc es esmu tiešām pasaules lietām un izziņas zinātne galvenais. Es burtiski ieradās Yale ar nodomu no nekad nav apskatīt numurs kādreiz atkal manā dzīvē. Kad es atbraucu uz Yale, tas bija kaut kas nekad nav bijis manā radariem. Es gribēju uzzināt par dzeju. Es gribēju, lai uzzinātu par starptautiski jautājumi. Es gribēju, lai uzzinātu par akvarelis zīmējumi. Jā, mēs piedāvājam klasi uz akvarelis zīmējumiem. 

Bet es nekad tiešām bija ieinteresēts kaut STEM saistīti. Bet tad vecāki I ieguva, jo vairāk es sapratu ka katrs lauks tiešām dažās saprāts strādā datorzinātnes, vai ja nav datorzinātnes, aprēķins. Patiesībā, mana pasaules lietas Capstone projekts, mēs izmantojot datu analīzes analizēt teroristu uzbrukumu par Boko Haram Nigērijā. Un tā, kā jūs varat redzēt, neatkarīgi par to, ko galvenais jūs galu galā turpināt vai kādas ir jūsu intereses šeit Yale ir, programmēšana un nodibinājumi no kāda prasmes ir super noderīga. Un CS50 patiešām ir labi aprīkota, lai veida aizdot daudz resursu jums, neatkarīgi no tā, cik ērti jūs esat vai cik ieinteresēts esat tiekšanos uz klasi. 

Vasara ir gatavojas runāt mazliet mazliet par to, ko jūs guys ir dodas, lai uzzinātu par šo gadu. SUMMER: Sveiki, visiem. Es esmu Summer Wu. Es esmu junioru Morse. Un es tiešām sāku kā CS50 students pats. Pirms Tātad trīs gadus, es biju uz plaisa gadu. Es nekad pieņemts CS klase vidusskolā, bet es domāju, ka savā brīvajā laikā, tas lūdzu būt cool, lai uzzinātu, kā kods. Tāpēc es tomēr ātri Google meklēšanu, meklēja to, kas bija pieejami tiešsaistē, un redzēju šo video ar Muppets un dīdžeji un atdzesē tīmekļa vietnēm. Man bija līdzīgi, es gribu uzzinātu, kā to izdarīt. 

Tāpēc es ņēma kursu, un es vienkārši iemīlēja to. Bet es atceros to tik greizsirdīgs no bērni, kas varētu apmeklē hackathon, apmeklēt Puzzle diena, apmeklēt biroju stundas, saņemt palīdzību no Tehniskās vienošanās, personīgi. Un tāpēc es nekad iedomāties ka es gribētu iegūt iespēju kas šeit iesaistītas protams, ka pirmo reizi dabūja mani interesē datorā zinātne un tas ir iemesls, kāpēc Es esmu datorzinātņu galvenais šodien. Tāpēc es ņemšu jūs brīdināt, šo klasi gatavojas stiept jums. Tas būs izaicinājums jums. Bet tas ir arī gatavojas mācīt, kā darīt lietas ka jūs nekad iedomāties jūs varētu. 

Stelios: Sveiki, visiem. Mans vārds ir Stelios. Esmu junioru Branford College un CS galvenais. Es esmu arī no Atēnām, Grieķijā. Es esmu patiesi cer lai sasniegtu jums visiem, čatā ar jums sadaļā, at darba laiks, pie piektdienas pusdienām. Es esmu patiesi satraukti, jo mēs esam izveidojuši tik daudz pūļu , lai izveidotu unikālu atbalstu struktūra par jums visiem lai padarītu savu pieredzi ar kurss labāko iespējamo. Un es ceru, ka, lai gan lielākā daļa no Jūs, iespējams, nav pieņemts CS Protams, pirms, es ceru, ka tas CS50 Jums ir tas, ko dzirksteles interesi lai turpinātu īstenot datoru zinātne nākotnē, kā tas ir darīts ar tik daudzi cilvēki, kas agrāk. Tātad paldies par to, ka šeit, satraukti redzēt jūs. Jason Hirschhorn. Jason Hirschhorn: Sveiki, visiem. Mans vārds ir Jason Hirschhorn. Es dzīvoju Silliman. Un es devos uz Harvard kā undergrad un specializējies sociālajās zinībās un minored datorzinātnēs. Un viens no maniem galvenajiem uzdevumiem šeit ir atbalstīt šo brīnišķīgo darbinieki jo viņi atbalsta jūs visus. Faktiski, tas ir ne visi no tiem. Ir 55 undergraduates un absolventi šeit, lai atbalstītu jūs visus. Un es daresay viens no labākajiem daļas kursu, lai jūs viss kļūst strādāt viņiem, iepazīt viņus, panākt, lai redzētu tos, gan CS50 un ārpus CS50 šajā semestrī un daudziem semestri nākt. Tāpēc cerams, jūs ņemšu Protams, jo, cerams, jums iegūt, lai mijiedarbotos ar brīnišķīgi darbinieki mums ir uz skatuves. 

SPEAKER: Nu, ļaujiet man pabeigt sakot tas būs jautri. DAVID Malan: Nu, pateicoties visai mūsu komandai. Ļaujiet man tuvās gaismas un ļauj dažas vairāk no mūsu komandas, gan no Kembridžas un New Haven, teikt sveiki jo šie puiši failu off. Un pēc tam mēs pāriet uz pirmā no mūsu programmēšanas saistībām ar šo valodu sauc Scratch. Tātad pateicoties komandai. Pieņemsim tuvās gaismas un dzirdēt no dažiem citiem. 

[Aplausi] 

[VIDEO PLAYBACK] 

-The Misija CS50 ir padarīt jūs ērtāk ar pilnīgi jaunā veidā domāšanas, šī skaitļošanas domāšanas. -Tas Veikts datorzinātnes interesanti, kas ir kaut kas man nav īsti saprast bija iespējams, līdz man bija klasi. -Es Bija, piemēram, paga. Es esmu patiešām tulkojot manas domas datorā tiesības tagad. 

-Pat Ja jums nav nekādu fona datorzinātnēs vai jebkādu pieredzi, tas ir faktiski klases jums. 

-Tātad Es noteikti gribu mani skolēni uz tikko get satraukti par datorzinātnes. Ne tikai programmēšana, bet domāšana kā datora zinātnieks ir patiešām to, ko es gribu mēģināt mācīt manu pirmkursnieks. 

-CS50 Ir grūti un atalgojot. 

-An Pieredze. 

-Extravaganza. 

-Tas Ir celt mūs uz nākamo līmeni. 

[SKAN MŪZIKA] 

-Mikroshēmas TFS ir, es domāju, tad asinsrites kursa. 

-I'm Satraukti, ka mani skolēni Es esmu palīdzot ir, ka aha brīdis realizēt ko viņi patiesībā mēģina darīt, lai noskaidrotu, kā to izdarīt PSET. 

-CS50 Noteikti ir grūti, protams. Bet atšķirībā no jebkura cita Protams tiešām at Yale, tas ir tik liels, atbalstoša kopiena. -Jūs Absolūti nav nepieciešams zināt kaut ko par kodēšanu, lai spētu veikt kursu. -Tas Ir pārsteidzošs, lai noskatītos, cik tālu cilvēki nāk vienā semestrī. 

-Jūs Nebija vieni sēdēja savu istabu mācīties kodu, bet tas bija vairāk nekā tikai klasē. Tā bija pieredze. -The Labākais veids kā mācīties koncepcijas un tos apstrādāt, ir, mācot citus. 

-Kas Ir telefons split? 

[SKAN MŪZIKA] 

-Un Tas ir CS50. 

[SKAN MŪZIKA] 

-Tas Ir CS50. 

-Got Problēma? Saplēst to pusi. 

[SKAN MŪZIKA] 

Aizmet to prom. 

DAVID Malan: Labi. Tātad pieņemsim tackle-- in nedaudz bit, starp citu, tas ir bijusi šī tradīcija daži iemesls 10 gadus kalpot kūka pie sākuma un beigu CS50. Tā gaida jums beigās Šodien, papildus mācību priekšmetu programmas, būs daži torti, kā arī, un Kurss darbinieki teikt sveiki. Bet tagad, pieņemsim pāreja uz Pirmais no mūsu valodas, kur mēs tērēt tiešām tikai nedēļu, un viens Problēma, kas par šo domēnu, Scratch. Un jūs atradīsiet, ja esat ieprogrammēts pirms daudziem idejām un Iespējas ir pazīstami ar jums. Bet jūs atradīsiet, ka tas ir jautri gar ceļu izdomāt, kā tieši tulkot dažas idejas, jūs jau zināt šo konkrēto vidi lai patiešām pārsteigt savu ģimeni un draugi ar savu darbu, kas var doties tiešsaistē, ja jums tā izvēlēties, pēc tam. 

Un, ja jums nav iepriekšēja pieredze un ir vidū vairākums studenti mazāk apmierināti, apzināties, ka daudzas no idejām mēs tikai jāizpēta reality-- lietām piemēram, telefona grāmatu un apmeklētība un tā forth-- tulkot diezgan labi ar datoru, bet, ja jūs izmantojat, Sākotnēji, valoda, kā šis. Tātad šī ir programma uzrakstīts valodā sauc C. Un mēs pavadīt diezgan daudz laika C, galu galā. Bet izredzes ir, tas izskatās mazliet mistisks ar jums pēc pirmā acu uzmetiena. Patiesībā, tur ir daudz dīvaini sintakses, iekavās leņķa kronšteini, cirtaini bikšturi, citātus, un semikoliem. Un tiešām, ja jūs nodoties programmēšanas pirmo reizi meklē un mēģina radīt sīkumi piemēram, tas, godīgi, jums tik iestigusi tik bieži vienkārši stulba daudzie ka ir nekas intelektuāli interesanti par to. 

Bet iedomājieties, ja jūs varētu izveidot Tas pats program-- kas, kā jūs varētu veida secināt, iespējams, izdrukas "Hello, World" tā vai citādi. Varam destilēt to pašu ideju tikai divas puzzle gabalus, ja Jums gribas. Patiešām, Scratch ir interesanti jo tas ir šī grafiskā valoda. Jūs varat vilkt un nomest tos puzzle gabalus, ka tikai savienojas ja tas padara loģisku jēga to darīt. Un tāpēc nulles, mēs drīz redzēt, tas ir kā jūs varētu īstenot, ka pats programma, tikai ar diviem puzzle gabalus ka diezgan daudz darīt to, ko viņi saka. 

Bet mēs redzēsim tikai brīdi, ka daži no pamatelementiem, kas mums atsaucās lai ātrāk un vēl dažus, ir viss, kas galu galā gatavojas veido daži no mūsu senākajiem programmām. Mēs ejam, lai būtu lietas tāpat functions-- tikko darbības, kas kaut ko darīt, piemēram, sasveicināties, pasaule. Mums nāksies cilpas, lietas, kas inducē ciklu atkal un atkal, tāpat kā mēs darīja pirms brīža ar meklēšanu Mike Smith. Mainīgie, piemēram, algebra, ja jums ir X vai Y, kas var uzglabāt vairākus. Nu, programmā, jūs faktiski var uzglabāt vairāk nekā tikai skaitļi. Jūs varat uzglabāt vārdus un teikumus un grafikas un citas lietas joprojām. Būla izteiksmes, tikko questions-- jā vai nē, patiess vai nepatiess. Nosacījumus, pieņemot lēmumus pamatojoties uz šiem jā / nē atbildes. 

Un tad mīļotājs lietas, piemēram, masīvs un diegi un notikumi un neierobežotu skaitu citu pazīmes, bet visi no kuriem karti ļoti labi ļoti draudzīgas bloķē patika to. Tas būs funkcija A violeta puzzle gabals, kas vienkārši saka ko tās nosaukums is-- šajā gadījumā teikt. Un tad bieži vien, tur ir balta kaste, kas jums varat ierakstīt vai velciet kādu vērtību vērā. Un tas, ko tas vispār sauc par argumentu vai parametru. Tas ir veids, kā izmainīt Noklusējuma uzvedība puzzle gabals vai funkcija tā, ka tas kaut pasūtījuma jums tāpat kā teikt, hello, pasaules vai hello, Andy vai hello, Jason vai kādu citu soda vietā. 

Ja jūs vēlaties teikt, ka lot-- burtiski forever-- Jūs varat veikt citu puzzle gabals sauc uz visiem laikiem un tikai iestiprināta divi kopā, kā šis. Un ka cilpa, jo aina liecina, nozīmē tikai teikt hello, pasaule uz visiem laikiem, atkal un atkal un atkal. Vai, ja jūs tikai vēlaties darīt to ierobežots skaits reižu, piemēram, 50 reizes, tur būs vēl viens puzzle gabals that-- atkārtot 50 reizes. 

Tikmēr, ja vēlaties ir mainīgo šajā valodā mēs esam par spēlēt ar, Jūs varat izmantot apelsīnu bloku, kā šis. Un šis mainīgais es patvaļīgi aicināja I skaitlim. Un es tikai noteikt, ka vienāda ar 0. Un tāpēc varbūt es, šajā case-- šis variable-- pārstāv kādu rezultātu spēlē. Jūs sākat no nulles, un katru reizi, kad veikt mērķis vai kaut kas tamlīdzīgs, Jūs saņemsiet vienu papildu punktu. 

Jūs varat uzdot jautājumus nulles. Ja mēs velciet un nometiet puzzle gabaliņi brīdi, piemēram, tas, Jūs varat uzdot jautājumus, piemēram, labi, ir man mazāk par 50? Varbūt jums nepieciešams 50 punktus, lai uzvarētu. Un tā tas būtu jautājums jūs gribētu lūgt. Vai, vispārīgāk, tu varētu teikt, ir x mazāks nekā y, kur tur ir divi mainīgie? Tagad tas viens ir daudz lielāks pēc pirmā acu uzmetiena, bet tiešām nav viss, kas sarežģītāka. 

Tas ir tikai kombinācija nosacījumu un mainīgo un Būla izteiksmes lūgt Trīs questions-- ir x mazāks nekā y? Ja tā, tad tā teikt. Teiksim, x ir mazāks nekā y. Cits, ja x ir lielāks nekā y, citādi x ir vienāds ar y. Un tā kā ar Mike Smith, tur bija četri scenāriji, šeit pasaulē numuru, x ir vai nu mazāk nekā, ir lielāks par vai vienāds ar. Viss, kas mums ir trīs dakšas ceļa. Un tad tur ir mīļotājs puzzle gabalus, piemēram, tas lietas, piemēram, masīvus, kur mēs esam būs iespēja, lai saglabātu informāciju. Mēs ejam, lai redzētu, blokus, kas ļauj mums īstenot vairākus pavedienus, Vēl viena iezīme mēs izmantosim, un tad arī kaut ko sauc notikumus. Bet, pirms mēs nokļūt, ka punkts un radīt vēl, galu galā, mūsu pašu custom puzzle gabalus, pieņemsim faktiski atvērt pati programma. 

Tātad tas ir Scratch. Tas ir pieejams scratch.mit.edu. Un jūs esat laipni aicināti spēlēt tagad vai vēlāk, kā arī. Tas notiek, ir bezsaistē versija. Cilvēkiem, kas nav vienmēr ir liels internetu, Jūs varat lejupielādēt pašu programmatūru, kā arī. Un tur tiešām ir tikai trīs komponenti šo programmatūru. Uz augšējā kreisajā stūrī ekrāns ir sava veida skatuves ka Scratch, kas pēc noklusējuma izskatās kaķis, dzīvo iekšā. Viņš var virzīties uz augšu, uz leju, pa kreisi un pa labi un darīt jebkādu skaitu citu, un var skatīties jebkurā vairākos veidos, pamatojoties uz tērpiem, ka jūs uzticēt viņam. Bet tas ir tas, ko mēs saucam elfa, sava veida raksturs. Un jūs varat būt vairākas zīmes, kā mēs drīz redzēt. 

Vidū, tagad visi šie puzzle gabalus un šīs kategorijas vai paliktņus apakšpunktu. Tāpēc tieši tagad, es noklikšķinājuši uz Motion. Un tā es esmu redzēt visus šos kustību saistītu puzzle gabalus vai bloki, tāpēc funkcijas, kas ir darīt ar iet uz augšu, uz leju, pa kreisi vai pa labi vai kādu citu darbību. Bet, ja es noklikšķinājis uz izskatās, jūs varēja redzēt lietas, piemēram, teiksim bloku ka mēs redzējām tikai pirms brīža. Un, ja es noklikšķiniet uz Control, jūs redzēsiet lietas, piemēram, par atkārtotu un visiem laikiem un ja bloks, kas mēs redzējām pirms brīža. 

Un tā jūs atradīsiet ka mēs vienkārši saskrāpēt virsma daži no puzzle gabalus kopā, bet tas viss ir diezgan intuitīvs un punkts un klikšķi. Patiešām, Scratch tika izstrādāta jaunākiem skolēniem lai palīdzētu dot viņiem noietu par radošu domāšanu. Un tomēr lieliski, tas ir brīnišķīgs atspēriena uz vienām un tām idejām, mēs spēsim izpētīt C un Python un JavaScript, arī. 

No labajā pusē, visbeidzot, šeit tas ir, tā saukto skripti zonu. Un tas ir tikai tukša šīfera ar kas jums sākt rakstīt programmu. Un es tieši tā. Tagad es zinu, kur lietas ir jo es esmu darījis pāris reizes. Bet es zinu, ka saskaņā notikumus kategorija, tur ir šis bloks here-- zaļus karogs uzklikšķināt. Un paziņojums, ja es tālināt un atpakaļ vairāk nekā šeit uz skatuves, Scratch dzīvi šajā maz taisnstūra pasaule, atop kas ir zaļš karogs un sarkanā stop zīme. Tā iet un apstāties, attiecīgi. 

Un tā, ko vēlos darīt ja kas zaļš karogs ir noklikšķinājuši? Nu, ļaujiet man iet uz ka Izskatās kategoriju. Un ļaujiet man iet uz priekšu un velciet un nometiet to. Un paziņojums, tiklīdz tas izpaužas tuvu, viņi veida magnētiskās. Tātad, ja es tagad let iet, tā nofiksējas kopā jauki un tīri. Un es iešu uz priekšu un teikt kaut ko līdzīgu hello, pasaule divas sekundes. Ļaujiet man zoom out un noklikšķiniet tagad zaļais karogs, un teikt, sveiki, pasaule. Viss kārtībā. Tā ka viss ir labi un labs. Ne viss, kas aizraujoši. Lai tas nedaudz cuter. Un es zinu, ka avanss, Scratch notiek nākt ar dažām jaukām lietām, piemēram, šis. Tāpēc spēlē Sound Meow līdz darīts. Tātad, pieņemsim darīt. 

[MJAU] 

Aw, tas ir adorable. Un, ja es noklikšķiniet uz tā again-- 

[MJAU] 

Un atkal. 

[MJAU] 

Bet es turpinu kam atdzīvināt nulles. Bet es varu darīt labāk nekā šis. Kāpēc es vienkārši velciet trīs no tiem. Un tagad tas ir trīs reizes adorable. 

[Meowing] 

Labi, patiesībā, tas ir mazliet rāpojošs. Tāpēc mums ir nepieciešams kaut ko starp tur. Ja es eju uz Control, tas izskatās tur tiešām jāgaida bloks. Un tā pamanīt, ja es lidināties virs there-- un ļaujiet man tas nedaudz lielāks. Ja es lidināties, tas notiek lai snap vietā. Tātad jāgaida vienu sekundi, pagaidiet vienu sekundi. Pieņemsim hit zaļo karogu vēlreiz. 

[Meowing] 

OK, nedaudz vairāk dabas, bet ne ļoti efektīva. Tātad šī ir pareiza, ja mana programma ir mērķis bija meow trīs reizes. Bet tas nav ļoti labi izstrādāta. Es veida samazināt dažas stūriem. Man mazliet slinks. Kādas jūtas like-- ko man šķiet to ir darījuši slikti, jūs teiktu? Yeah? Jā, pa vidu. Mērķauditorija: Lietotas vairāk atmiņa, nekā jums nepieciešams, lai jo jūs izmantojat tik daudz dažādu līnijas. DAVID Malan: Jā, tā vairāk līnijām. Un tas ne vienmēr būs atmiņas, lai gan to varētu uzskatīt par šādā veidā. Bet tas ir definitely-- tur ir atlaišana. Un es burtiski veida vilka un samazinājās pašas lietas. Un, ja jūs veida extrapolate-- ja tas nav skaidrs here-- labi, kā būtu Es meow 30 reizes? Es vilkt un nomest, piemēram, vairāk 30 pārus puzzle gabalus. Un, protams, tur ir labāks veids. Un mēs esam redzējuši labāku ceļu. Kas intuitīvi būtu būt labāks veids? Jā, tikai izmantot cilpu. Nav copy un paste. Un tiešām, jebkurā laikā šis semestris ja jūs sākat atrast sev velkot un nometot, vai tiešām kopējot un ielīmējot, bīstams ieradums, lai nokļūt, jo tas ir tikai nav ļoti maintainable. Piemēram, ja es vēlos mainīt skaņu uz kaut ko citu, Man ir jāmaina tagad trīs vietas, nevis tikai vienā. Jo patiesi, ja I pārtrauktu šo away-- es esmu tikai gatavojas nodalīt to, piemēram, ka. Ļaujiet man paķert atkārtošanas bloku, un tad noklikšķiniet uz trīs, trīs tips, mest daži no šiem prom, tikai ļaujot iet. Un tad pamanīt neizskatās kā tas der, bet magnētiski, tas notiek ne tikai snap vietā bet augt, lai ietilptu formu. Tātad tas ir labi. Un tagad, ja es noklikšķiniet play. 

[Meowing] Ļoti labi. Viss kārtībā. Un tagad tas ir ļoti viegli mainās, arī, jo es varu tikai mainīt vienu numuru vienā vietā. Bet tas arī nav visu, kas interesants. Pieņemsim faktiski ir Scratch nav meow, bet pārvietoties. Ļaujiet man iet uz Motion un pārvietot 10 soļi iekšā of-- whoops, ļaujiet man noteikt šo. Man ir tas pāriet 10 steps-- patiesībā, pieņemsim nav do atkārtot. Ļaujiet man paķert vadības bloku, un rīkojieties šādi mūžīgi. Forever, pārvietot 10 soļus. Un noklikšķiniet uz Atskaņot. 

LABI. Tātad par laimi, viņš apstājas. Pretējā gadījumā bērni varētu saņemt ļoti apbēdināts kad viņi veida zaudē savu kaķi. Bet vismaz es varu vilkt viņam atpakaļ uz ekrāna. Bet tas vēl nav viss, kas liels par spēli vai animāciju. Būtu jauki, ja varbūt viņš atlekšanai pie malas. Tātad, ko mēs darām? Ko būvēt mums vajag, lai būtu Scratch nolemj lielība, vai jūs domājat, pat ja jūs nekad neesmu redzējis Scratch pirms? Jā, muguras. Mērķauditorija: Jums nepieciešams ja bloka vai ja-tad. DAVID Malan: Jā, tāpēc daži veida, ja bloka vai ja-tad. Tik tiešām, mums ir viens no tiem šeit. Tik if-- tāpēc ļaujiet man iegūt atbrīvoties no kustības. Ļaujiet man tuvinātu tāpēc tas ir lielāks. Tā kā par šo. Forever, ja Sensing-- mēs esam nav redzējis šo pirms. Man vajag Būla izteiksme. Un izrādās, ja pieskaras, ko? Ja pieskaras malai, Ko es gribu darīt? Nu, ja es dodos atpakaļ uz Motion, Izrādās, ak, es varētu apgriezties. Ļaujiet man velciet to šeit. Kāpēc man iet uz priekšu un apgriezties par 180 grādiem? 

Un tagad, ļaujiet man tikai pārvietot beigās. Es varētu likt kustību sākums vai beigas. Bet loģiski, katru reizi, kad es pārvietot, es vēlaties, lai pārbaudītu, vai es pieskaroties mala? Man pieskaras malai? Man pieskaras malai? Tā, ka loģiski es pagriežos, ja tā. Tātad, pieņemsim hit spēlē. 

LABI. Tātad, tas ir nedaudz buggy, lai runāt. Un bug ir tikai kļūda in datorprogramma. Bet vismaz tas strādā. Un patiesībā, es varētu iet šeit. Un ļaujiet man tā ne 10 soļi pie laiks, bet tas ir viss, animācija ir. Tas ir karikatūra vai pat filma ir. Ļaujiet man pāriet 20 soļus laikā. Tātad 20 reizes vairāk lietas notiek vienreiz vai divreiz vairāk, šajā gadījumā. Un viņš pārvietojas ātrāk. Ļaujiet man pāriet uz 30. 100. 1000. Un tas notiek ļoti ātri. Un tas is-- jā, OK. 

Tāpēc tagad mēs esam tikai messing ar to. Labi, tā buggy. Bet mēs varam vilkt viņu no tā šeit. Bet mēs varam padarīt vairāk jautrības ar to, too. Kā par this-- viņš ir otrādi. Bet izrādās Scratch-- un tur ir faktiski, Man ir noliegt, ne akadēmiskā vērtība, ko es esmu gatavojas darīt. Bet, ja es atvērtu mikrofonu, pieņemsim viņu apturēt, un darīt kaut kas līdzīgs šim. Sakta! 

[LAUGH] 

Tas bija adorable. Paldies. Tagad tas ir tas, ko mana balss izskatās, kad es kliegt sakta. Es nedomāju, ka mēs nozvejotas jūsu smiekli. Tas ir labi. Ļaujiet man saglabāt to kā "Sakta". Pieņemsim, saglabājiet to kā "sakta". Un tagad mēs iesim atpakaļ uz skriptus. Un tagad es need-- pieņemsim redzēt, Skaņa. Ak, spēlēt skaņas sakta. Tātad, ja es esmu pieskaras malai, ļaujiet man Pirmā play sakta, un tad apgriezties. Un tagad pieņemsim ielika vidū. 

[Sakot "sakta"] 

Divreiz ātrāk. 

LABI. Bet tas ir burtiski dara to, ko es saku. Tātad tas ir faktiski pareiza, tas ir tikai nedaudz kaitinošas ātri. Tātad pieņemsim pievienot kaut ko vairāk interesanti šo. Ļaujiet man tiešām atvērt viens, ka es jau iepriekš, trāpīgi sauc mājdzīvnieku Kaķis, kas to dara. Lūk skripts šeit. Kas tas ir gatavojas darīt angļu izteiksmē? Kas tas ir paredzēts darīt? Jā, iesim some-- yeah? 

Mērķauditorija: Kad tevi pet kaķis, tas Vau. DAVID Malan: Jā, tad, kad jūs pet kaķis, tas būs meow. Tātad citiem vārdiem sakot, tur tagad mūžīgi cilpa joprojām kopā ar nosacījumu, kombinētā ar Būla izteiksme, apvienojumā ar pāris funkciju, ietekme no kuriem, kad es spēlēt Šī programma, nav nekas notiek kamēr es pārvietot kursoru tuvāk un tuvāk un tuvāk and-- 

[MJAU] Tad tas ir tāpat kā petting kaķi. [MJAU] Tikai tad, kad jūs faktiski pārvietojiet kursoru pār viņu. Tagad es arī saputo nav mājdzīvnieku kaķis, kas tas vietā. 

[Meowing] 

Tātad viņš vienkārši pastāvīgi meowing. 

[Meowing] 

Bet, ja es pārāk close-- 

[Meowing] 

[ROAR] 

Tātad, kā tas darbojas? Tagad man vienkārši ir divvirzienu dakša uz ceļa. Ja pieskaras peles kursoru, tad spēlē lauva skaņu. Else vienkārši spēlēt Ņau skaņu, un tad jāgaida trīs sekundes, lai ka tas ir sava veida dara tas ļoti mierīgi. Viss kārtībā. Tātad tas ir apvienojot daži vairāk idejas joprojām. Pieņemsim to apskatīt šajā piemērā Es saputo sauc pavedieni. Un šī ir fundamentāli atšķiras ar to, ka piesaista raksturīga daudziem programmēšanas valoda sauc diegi, spēju programmu, lai burtiski darīt divas lietas vienlaicīgi. Patiešām, šajās dienās, ja jūs izmantojat Google Docs vai Microsoft Word, un dokuments ir pastāvīgi pareizrakstības pārbaudīts pat kā jūs type-- vai jūs hit Command-P vai Control-P un drukas kaut, tas ir drukāšanas, kamēr jūs turpināt rakstīt. Programmas šodien tiešām var darīt vairākas lietas uzreiz, tāpat kā Scratch šeit. 

Tātad šeit, man ir divi sprites tagad, putnu un kaķis. Un, ja es noklikšķiniet uz katru no tie rakstzīmes pa vienam, Es redzu tagad putna skripti pie augšējā labajā stūrī. Tagad es redzu kaķa. Putna, kaķa. Tātad katram no tiem ir sava skriptu. Bet paziņojums, ko puzzle piece viņi abi sākt ar? Kad zaļais karogs uzklikšķināt. Un putnu, kad zaļš karogs uzklikšķināt. Tātad, kad es noklikšķiniet uz zaļo karogu, abi šie skripti vai programmas gatavojas paralēli. Un jūs pamanīsiet, ka putns ir tikai mindlessly veselīgs pie malas. Kaķis skaidri ir ieprogrammēts ar stratēģisku priekšrocību. Un-- 

[ROAR] Viss kārtībā. Tātad kaķis noķerti putns šajā gadījumā. Kāpēc ir tā, ka? Nu, paziņojums vispirms mums vienkārši ir putns tikai mindlessly iet uz šī sākotnējā atrašanās vietā, un tad uz visiem laikiem, ja nepieskaras kaķi, vienkārši pārvietot. Un, ja jūs uz malas, lielība. Un vienkārši pārvietot. Un, ja jūs uz malas, lielība. Bet kaķis, tikmēr, ir dažas papildu loģika ka saka this-- pirmkārt, tikai tik ka tas nav pilnīgi neobjektīva pret putns, ievērosiet, ka es esmu izmanto zaļo puzzles gabaliņam tur kas faktiski cērtes izlases numuru. Iezīme daudzās valodās ir dot Jums izlases vai pseudorandom numuri. Tātad, šajā gadījumā, kaķis sākotnēji izvēlas nejaušu skaitli starp, piemēram, 90 grādi un 180 grādi, būtībā, tāpēc ka tur ir mazliet dispersijas. Un tad uz visiem laikiem, ja aizkustinošs putns, spēlēt lauva skaņu. Pretējā gadījumā, tikai punkts pret putnu. Punktu pret putnu. Punkts pret putnu, kas ir puzzle gabals pati par sevi šajā lietā. Nu, mēs varam izdarīt vienu cita lieta šeit. Ļaujiet man atvērt pasākumu programma šeit. Un šeit mēs atkal ir divas sprites, kas izskatās šiem diviem marionetes šeit. Un, kas ir interesanti šeit tas ir. Oranžā puisis ir šis komplekts puzzle gabalus šeit. Forever darīt following-- ja starpdevējs ir nospiests, tad saka, Marco, un tad pārraidīt notikumu. Un tikmēr, zilā puisis šeit ir this-- kad saņemat notikumu, saka Polo. Tātad izrādās Scratch un citās valodās, ir veidi, lai divas programmas vai divas skripti, šajā gadījumā, lai savstarpēji savienoti tā, ka tad, kad es hit starpdevējs, viņš saka Marko. Un otrs var dzirdēt, ka, lai uz runā, un saka Polo atbildes. Tātad jūs varat rakstīt programmas, kas faktiski mijiedarboties šādā veidā. Un, ja man šo vienu vietā, Es pat varat pievienot mainīgos, tikai izmantojot vienu Sprite šajā gadījumā. Tas viens ir īpaši kaitinošas. 

[SEAL BARKING] 

Tagad, paziņojums par tiesībām, mēs esam ieguvuši daži papildu loģika nekā šeit. Kā es varu pārtraukt šo zīmogs no riešanas? 

[SEAL BARKING] 

Izskatās, uz labās puses puse ir tas, kas ir spēlē skaņu. Bet tas ir tikai spēlējot skaņu vai to, kas ir taisnība? Ja a variable-- oranža block-- izslēgts ir nulle. Kā es varu mainīt izslēgts būt 1, nozīmē taisnība, padara šo izslēgts? Acīmredzot, otrs scenārijs, es varu hit starpdevējs, un tagad viņš apstājas. Tātad, mēs varam būt šo savstarpējā komunikācija pāri skriptus, kā arī, , tikai daloties mainīgo pāri diviem, kā šis. Tagad tas nav tik interesanti. Iesim uz priekšu un darīt, un apvienot daudz no šīm idejām ar šo programmu šeit. Pirms mēs to darām, lai gan, kā par vienu brīvprātīgo? Ļaujiet man izmantot spiedienu off par mani, jo man nav faktiski spēlēt šo spēli. Pieņemsim, ir kāds mums neesmu redzējis. Jums ir jābūt ērti nāk uz skatuves šeit, uz kameru. OK, nāk uz augšu. Ļoti drosmīgs. Kā tevi sauc? 

Idris: Idris. DAVID Malan: Sorry? Idris: Idris. DAVID Malan: Idris, nice to meet you. Nāciet uz augšu. Un tagad, savā mobilajā telefonā tālrunis, tu spēlē Pokemon GO? 

Idris: Nē. DAVID Malan: Tiešām? Idris: Jā. DAVID Malan: OK. Viss kārtībā. Nu, jauki ar jums iepazīties. Nāc uz vairāk. Man nav, vai nu. Tātad mēs izdomāt kopīgi, kā spēlēt to, ko kāds tiešām gāja un īstenoti Scratch mainot kaķis būtībā dažādas rakstzīmes kopā. Un, ja es pilnekrāna režīmā Tas šeit, mēs ejam redzēt šo spēli kopā. Joprojām notiek ielāde, joprojām iekraušanas. Aiziet. Ļaujiet man darīt. Aiziet. Šī spēle ir tik liels, ka tā avarēja. Stāvēt. Izmēģiniet šo vēlreiz. Aiziet. Viss kārtībā. 

Tur mēs ejam. LABI. Zaļš karogs. Tātad, šeit mēs ejam. 

[SKAN MŪZIKA] 

Izvēlieties vidū līmeni šeit. Noklikšķiniet uz zilā puisis tur. Viss kārtībā. Un jūs varat izmantot bultiņu keys-- augšu, uz leju, pa kreisi, pa labi. Tagad, pieņemsim apsvērt, kā mēs this-- un tad iet pēc rakstura tur. Yep. Un tagad noklikšķiniet viņam ar peli. Ak jā. Pārvietot. Kur ir bultiņa? Šeit jums iet. Tādēļ noklikšķiniet uz tur. Jā. Viss kārtībā. Tāpēc tagad, es esmu teicis jums ir kule bumba, ka, ja uz tā, tas būs jādara. Ļoti labi. Praktizē šodien, es konstatēja šo versiju spēles patiesībā nav ļoti grūti. Tātad, ja jūs vēlaties doties atkal šeit, iet uz leju, lai šo Kule bumbu. Un tad iet ņemt tiesības. Mēģiniet noklikšķinot uz tā. Ak, patiesībā, tas ir veikals, acīmredzot. Labi, lai aizvērtu to. Nekad darījuši agrāk. Varbūt iet līdz šī lieta šeit. Ak, tur jums iet. Pagaidiet, tur ir viens tur. Ak, tur ir cits. LABI. Leju. Jā, noklikšķiniet. 

OK, tas ir ļoti gudrs. Labi, ļoti labi darīts. Šī spēle nav ļoti grūti. LABI. Apsveicu. Šeit mums ir CS50 stress ball jums. Bet uzskatu, tikai brīdi, ko daži no takeaways ir tur. Vieglāk nekā reālā spēle, acīmredzot. Bet visi mēs esam gatavojas šeit ir raksturs ka, iespējams, ir sava veida no cilpas, kas saistītas ar to. Tas nav kaķis. Tas ir šis raksturs vietā. Un tas cilpa ir tikai nepārtraukti sakot, ja uz augšu bultiņas nospiests, ja uz leju arrow nospiests, ja kreisā bultiņa nospiests vai pa labi bultiņa nospiests, virzīties uz augšu vai uz leju vai pa kreisi vai pa labi. Vai, ja tur ir vēl viens puzzle gabals tur ka saka, kad pieskaras citu Sprite, kad pieskaras viens no varoņiem uz Kule bumbu, ja aizkustinošs, tad to izdarītu. 

Tāpēc visas idejas, esam bijis, izmantojot līdz šim patiešām var vienkārši piemērot šo konkrēto konteksts, lai spēlētu šo spēli, kā arī. Ļaujiet man iet uz priekšu un velciet up vienu citu šeit, patiesībā. Ļaujiet man iet uz priekšu un velciet up, teiksim, šo. Tas ir kaut kas, mēs remixed. Made viens no mūsu studenti Cambridge, un tad es devos cauri un mainīt diezgan daudz katrs gadījums, Harvard līdz Yale šoreiz. Vai kāds vēlētos sacensties pret Ivies šeit citā uzkrāšanu no visas šīs idejas? Nāc lejā, jā. Kā tevi sauc? 

DINA: Dina. 

DAVID Malan: Adina? 

DINA: Dina. 

DAVID Malan: Dina, nāk uz leju. Labi, Dina. Tātad šī spēle kļūst grūtāk un grūtāk, jo šajā spēlē, tur ir mainīgie tiek izmantoti arī kas pastāvīgi sekotu no kādā līmenī jūs esat spēlē. Tik jauki ar jums iepazīties. Nāciet šeit tuvumā. Un tā mērķis šeit ir, lai kārtotu no padarīt savu ceļu caur labirints ka šis students īstenoti. 

Un tikai, lai uzstādītu posmu, katrs no šiem attēliem uz ekrāna ir sava elfa, savs raksturs. Tātad tie bija pēc noklusējuma kaķiem, bet students tos mainījies dažādām Ivies logotipus šeit. Un tad jūs redzēsiet, ka tikko izmantojot nosacījumus un cilpas un funkcijas un vairāk, jūs saņemsiet to. 

[SKAN MŪZIKA] [MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

Jā, OK. Jā, tur notiek. Pirmā līmeņa ir ļoti viegli. Jūs esat tikko got iet tur. Bet atkal, uzskata, tas ir tikai cilpa klausās bultiņas keys-- uz augšu, uz leju, pa kreisi, pa labi. Un tagad uzrādi bloks. Ļoti labi. 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

Ļoti labi. 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

Ļoti labi. Diezgan viegli, Crimson. Viss kārtībā. Levels-- uh-oh. 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

Un atkal, jo tie trīs Harvard vainago, Jums vienkārši ir loģika sakot, ja uz malu, lielība. 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

OK, ko jūs darāt, ir vairāk interesanti nekā kāpēc. Ļoti labi. Ļoti labi. Ak, vai. 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] Es domāju, ka jums ir upurēt sevi. [MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] Ātri! 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] Nice. Tas ir labi. Jūs saņemsiet to. Jā jā! Ļoti labi. 

[Uzmundrinoša] 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

Nice! 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] Sapratu. Aiziet! Otrais uz pēdējo līmeni. 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

Viss kārtībā. 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] Jā. Labi izmantot mainīgo šeit. [MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] Jā. [MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] Nice. [MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] Ir labi. Mēs saņēmām nokļūt līdz beigām. Tur. Oh! 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

Varētu palaist vēlu šodien, bet tas ir gonna būt tā vērts. 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

Tu to vari izdarīt! Yeah! 

[Uzmundrinoša] 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

Tas viens ir patiešām grūti. 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

Mēs jums vēl divas dzīvības. Vai vari to izdarīt? 

[MUSIC - MC HAMMER, "U nevar pieskarties  THIS "] 

Viss kārtībā. Kā par lielu kārtā aplausu tomēr. Tev uz otro līdz pēdējam līmenim. Paldies. 

[Aplausi] 

Tātad tas ir tikai pateikt, cik daudz jūs var darīt ar šīm lietām. Un saprast arī to, ka tad, kad puzzle gabalus nav exist-- un tiešām, šis būs viens pilnvaru ar pirmo problēmu komplekti un beyond-- ir faktiski izveidot savu. Un tas ir tikai fragments viens no piemēriem Jūs varēsiet spēlēt ar online, kur ja jums nav iebūvēti Scratch kaut kā klepus puzzle gabals, Jūs faktiski var veikt pats. 

Un tā visu šo un vairāk gaida. Un tikai gleznot galīgais priekšstatu par patiešām to, kas ir priekšu veikalā klasē jums, pamatojoties uz dažas bildes no klasesbiedriem pagātne, ļaujiet man tuvās gaismas vienu pēdējo reizi, un parādīs CS50. 

[SKAN MŪZIKA] 

Viss kārtībā. Tas ir tas par CS50. Cake tagad pasniedz. 

[SKAN MŪZIKA] 