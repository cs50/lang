1
00:00:00,000 --> 00:00:00,000

2
00:00:00,000 --> 00:00:00,000
[MUSIIKKIA]

3
00:00:00,000 --> 00:00:13,950

4
00:00:13,950 --> 00:00:16,240
>> DAVID J. MALAN: Selvä, tämä on CS50.

5
00:00:16,240 --> 00:00:18,010
Ja tämä on viikolla yksi.

6
00:00:18,010 --> 00:00:22,050
Niin muistaa, että viimeisen kerran viikolla nolla,
keskityimme päättelyä.

7
00:00:22,050 --> 00:00:25,440
Ja me siirtynyt kuin se,
Scratch, graafinen ohjelmointi

8
00:00:25,440 --> 00:00:27,360
kieli ystävämme
MIT: n Media Lab.

9
00:00:27,360 --> 00:00:31,730
>> Ja Scratch, teimme tutkia
ajatuksia, kuten toiminnot, ja olosuhteet,

10
00:00:31,730 --> 00:00:35,210
ja silmukat ja muuttujia, ja jopa
tapahtumia, ja langat, ja enemmän.

11
00:00:35,210 --> 00:00:37,880
Ja tänään, aiomme
jatkaa näitä ideoita,

12
00:00:37,880 --> 00:00:40,630
ja todella ottaa niitä
myönnetty, mutta kääntää ne

13
00:00:40,630 --> 00:00:44,220
toiselle kielelle tunnetaan C. Nyt,
C on perinteisempi kieltä.

14
00:00:44,220 --> 00:00:46,020
Se on alemmalla tasolla
kieli, jos haluatte.

15
00:00:46,020 --> 00:00:47,300
>> Se on puhtaasti tekstimuodossa.

16
00:00:47,300 --> 00:00:49,910
Ja niin ensi silmäyksellä, se on
kaikki tulee näyttämään varsin arvoituksellinen

17
00:00:49,910 --> 00:00:51,430
jos et ole koskaan ohjelmoida ennen.

18
00:00:51,430 --> 00:00:53,530
Aiomme olla
puolipistettä, ja suluissa,

19
00:00:53,530 --> 00:00:55,150
ja aaltosulkei-, ja enemmän.

20
00:00:55,150 --> 00:00:57,240
Mutta ymmärtää, että vaikka
vaikka syntaksi on

21
00:00:57,240 --> 00:01:00,600
noin näyttää hieman tuntemattomia
useimpiin teistä, katso aiemmin, että.

22
00:01:00,600 --> 00:01:03,220
Ja yrittää nähdä ideoita
jotka ovat todellakin tuttu,

23
00:01:03,220 --> 00:01:06,750
koska täällä viikolla yhdessä mitä
alamme tehdä on vertailla,

24
00:01:06,750 --> 00:01:08,980
aluksi, Scratch versus C.

25
00:01:08,980 --> 00:01:12,350
>> Niinpä esimerkiksi, muistaa, että kun me
toteutetaan ensimmäinen ohjelmiemme

26
00:01:12,350 --> 00:01:16,220
viimeksi meillä oli lohko, joka näytti
vähän jotain tämän kaltaisia ​​osia, kun

27
00:01:16,220 --> 00:01:19,990
Vihreä lippu napsautetaan, ja sitten meillä oli
yksi tai useampi palapelin palaset sen alapuolella,

28
00:01:19,990 --> 00:01:22,150
tässä tapauksessa sanoa, hei maailma.

29
00:01:22,150 --> 00:01:24,870
Joten todellakin Scratch,
kun klikkaa että Vihreä lippu

30
00:01:24,870 --> 00:01:27,390
ajaa minun ohjelma, niin
puhumaan, nämä ovat

31
00:01:27,390 --> 00:01:29,520
lohkot saavat toteutettu, tai juosta.

32
00:01:29,520 --> 00:01:32,230
Ja erityisesti, Scratch
sanoi, hei, maailma.

33
00:01:32,230 --> 00:01:35,377
>> Nyt olen voinut määritellyt
eri sanoja täällä.

34
00:01:35,377 --> 00:01:37,960
Mutta saa nähdä, että todellakin, monet
Näiden blocks-- ja todellakin

35
00:01:37,960 --> 00:01:41,880
C monet functions-- voi olla
parametrized tai räätälöityjä

36
00:01:41,880 --> 00:01:43,150
tehdä eri asioita.

37
00:01:43,150 --> 00:01:45,520
Itse asiassa C jos
haluat muuntaa, nyt,

38
00:01:45,520 --> 00:01:47,567
Tämän Scratch-ohjelma
Tämän muuta kieltä,

39
00:01:47,567 --> 00:01:49,650
aiomme kirjoittaa
vähän jotain tällaista.

40
00:01:49,650 --> 00:01:52,540
>> Myönnettäköön, on jonkin verran tuntemattomia
syntaksin siellä todennäköisesti, int,

41
00:01:52,540 --> 00:01:54,380
ja suluissa, ja mitätön.

42
00:01:54,380 --> 00:01:57,740
Mutta printf-- vaikka olisit
sitä mieltä, että olisi vain tulostaa.

43
00:01:57,740 --> 00:02:00,120
Mutta print tarkoittaa print
alustettu, kuten tulemme pian nähdä.

44
00:02:00,120 --> 00:02:02,140
Tämä kirjaimellisesti tulostaa
näytölle tahansa

45
00:02:02,140 --> 00:02:05,990
on sisällä niitä sulkuja, jotka
tietenkin tässä tapauksessa on, Hello World.

46
00:02:05,990 --> 00:02:09,290
>> Mutta huomaat joitakin muita
syntaksi, jotkut lainausmerkkeihin,

47
00:02:09,290 --> 00:02:11,890
että suluissa lopussa,
semi-paksusuolen ja vastaavat.

48
00:02:11,890 --> 00:02:15,027
Joten siellä on hieman yläpuolella,
niin sanotusti sekä kognitiivisesti

49
00:02:15,027 --> 00:02:17,860
ja syntaktisesti, että aiomme
täytyy muistaa ennen pitkää.

50
00:02:17,860 --> 00:02:20,720
Mutta ymmärtää, että käytäntöä,
tämä alkaa hyppää ulos sinua.

51
00:02:20,720 --> 00:02:24,920
>> Itse asiassa, nyt keskittyä, että yksi
toiminto specifically-- tässä tapauksessa,

52
00:02:24,920 --> 00:02:26,290
tervehtimään maailmassa.

53
00:02:26,290 --> 00:02:27,560
Sano on funktio.

54
00:02:27,560 --> 00:02:31,320
Hello world on sen parametri,
tai argumentti, sen räätälöinnin.

55
00:02:31,320 --> 00:02:34,320
>> Ja vastaavuuden C on vain
olemaan tämä rivi täällä,

56
00:02:34,320 --> 00:02:38,710
missä printf vastaa, sanoa,
kaksinkertainen lainattu merkkijono, hei

57
00:02:38,710 --> 00:02:41,470
maailma on vastaava, tietenkin,
ja mitä on valkoisen laatikon siellä.

58
00:02:41,470 --> 00:02:45,680
Ja kenoviivan n, vaikka hieman
outoja ja poissa Scratch,

59
00:02:45,680 --> 00:02:49,380
yksinkertaisesti tulee olemaan vaikutusta me will
katso tietokoneessa, kuten Mac tai PC,

60
00:02:49,380 --> 00:02:51,660
vain siirtämällä
kursori seuraavalle riville.

61
00:02:51,660 --> 00:02:53,970
Se on kuin lyödä
Enter-näppäintä.

62
00:02:53,970 --> 00:02:55,580
>> Niinpä näemme, että uudelleen ennen pitkää.

63
00:02:55,580 --> 00:02:58,640
Mutta ensin katsomaan tätä
Toinen esimerkki tapauksessa silmukoita.

64
00:02:58,640 --> 00:03:02,830
Meillä oli tämä ikuisesti silmukan viimeinen kerta,
joka oli sarja palapelin palaset

65
00:03:02,830 --> 00:03:05,490
että teki jotain kirjaimellisesti
forever-- tässä tapauksessa,

66
00:03:05,490 --> 00:03:08,360
sanoa, hei maailma, hello world,
Hello World, Hello World.

67
00:03:08,360 --> 00:03:10,350
Joten se päättymättömään silmukkaan virhe.

68
00:03:10,350 --> 00:03:14,580
>> In C, jos haluamme toteuttaa tämän
Sama ajatus, voisimme yksinkertaisesti tehdä.

69
00:03:14,580 --> 00:03:19,570
Vaikka totta, printf hei world-- nyt
kun taas vain semanttisesti, millaisia

70
00:03:19,570 --> 00:03:23,090
loihtii ajatus tehdä
jotain uudestaan ​​ja uudestaan, ja uudestaan,

71
00:03:23,090 --> 00:03:23,980
ja kuinka kauan?

72
00:03:23,980 --> 00:03:27,990
No, true-- muistuttaa, että
totta on pelkästään tai yhdessä.

73
00:03:27,990 --> 00:03:30,660
>> Ja totta on, tietenkin, aina totta.

74
00:03:30,660 --> 00:03:33,060
Joten se on tavallaan merkityksetön
lausuma vain sanoa totta.

75
00:03:33,060 --> 00:03:36,890
Mutta tosiaan, tämä on tarkoituksellista,
sillä jos totta on vain aina totta,

76
00:03:36,890 --> 00:03:40,850
kuin vaikka totta vain merkitsee,
jos hieman epäsuorasti,

77
00:03:40,850 --> 00:03:44,070
että seuraava riviä koodia
välillä ne aaltosulkeita

78
00:03:44,070 --> 00:03:48,320
pitäisi vain suorittaa uudestaan, ja uudestaan,
ja uudelleen, ja koskaan todella lopettaa.

79
00:03:48,320 --> 00:03:50,230
>> Mutta jos et halua
loop lopettaa, koska me

80
00:03:50,230 --> 00:03:54,500
viime kerralla kanssa jotain
Tämän, toista seuraavat 50 kertaa,

81
00:03:54,500 --> 00:03:57,700
C voimme tehdä saman mitä
kutsutaan varten loop-- avainsanan

82
00:03:57,700 --> 00:03:59,330
ei ole aikaa, mutta varten.

83
00:03:59,330 --> 00:04:03,290
Ja sitten meillä on joitakin uusia syntaksin täällä,
int i on yhtä kuin 0, i alle 50,

84
00:04:03,290 --> 00:04:03,880
i ++.

85
00:04:03,880 --> 00:04:05,430
Ja palaamme siihen.

86
00:04:05,430 --> 00:04:09,660
Mutta tämä on yksinkertaisesti kuinka olisimme
kääntää joukko Scratch lohkojen

87
00:04:09,660 --> 00:04:13,079
joukolle C riviä koodia.

88
00:04:13,079 --> 00:04:14,450
>> Samaan aikaan, harkitse muuttujia.

89
00:04:14,450 --> 00:04:16,540
Ja itse asiassa, me vain
Näin yhden hetki sitten.

90
00:04:16,540 --> 00:04:21,220
Ja kun kyseessä on Scratch, jos me
halusi julistaa muuttuja nimeltä i

91
00:04:21,220 --> 00:04:24,590
i on kokonaisluku, vain numero,
ja haluamme asettaa sen jotain arvoa,

92
00:04:24,590 --> 00:04:28,410
me käyttää tätä oranssi
lohko here-- asetetaan i 0.

93
00:04:28,410 --> 00:04:30,800
>> Ja näemme tänään
pidemmälle, aivan kuten viime viikolla,

94
00:04:30,800 --> 00:04:33,850
ohjelmoijat tekevät melkein aina
alkaa laskea nollasta, oikeastaan

95
00:04:33,850 --> 00:04:34,950
sopimuksen mukaan.

96
00:04:34,950 --> 00:04:37,250
Vaan myös siksi, hae
keskustelumme binary,

97
00:04:37,250 --> 00:04:39,990
pienin määrä voit
edustavat minkä tahansa määrän bittejä

98
00:04:39,990 --> 00:04:41,640
on vain olemaan 0 itseään.

99
00:04:41,640 --> 00:04:45,190
Ja niin me yleensä alkaa
alustetaan jopa meidän muuttujia 0.

100
00:04:45,190 --> 00:04:47,710
>> Ja C tekemään samoin,
aiomme sanoa int

101
00:04:47,710 --> 00:04:50,110
kokonaisluku, en vain sopimuksen mukaan.

102
00:04:50,110 --> 00:04:53,390
Voisin ovat kutsuneet tätä muuttujaa
mitä haluan, kuten Scratch.

103
00:04:53,390 --> 00:04:57,770
Ja sitten on yhtä kuin 0 vain valtuutettuja
arvo 0 oikealta

104
00:04:57,770 --> 00:05:01,319
ja ottaa sen muuttujan, tai
säilytysastia siellä, vasemmalla.

105
00:05:01,319 --> 00:05:04,360
Ja puolipistettä kuten me see-- ja
olemme nähneet muutamia näistä already--

106
00:05:04,360 --> 00:05:06,530
tarkoittaa vain loppuun ajatuksen.

107
00:05:06,530 --> 00:05:09,430
Jatka tehdä jotain muuta
viivoille, jotka seuraavat.

108
00:05:09,430 --> 00:05:11,330
>> Nyt entä Boolen ilmaisuja?

109
00:05:11,330 --> 00:05:14,320
Muista, että Scratch,
nämä olivat ilmaisuja

110
00:05:14,320 --> 00:05:16,740
jotka ovat joko totta
tai false-- kysymyksiä,

111
00:05:16,740 --> 00:05:18,910
todella, jotka ovat joko tosi tai epätosi.

112
00:05:18,910 --> 00:05:21,960
Joten jos kyseessä on Scratch, voisimme
esittää yksinkertaisen kysymyksen näin,

113
00:05:21,960 --> 00:05:24,586
on i alle 50?

114
00:05:24,586 --> 00:05:25,710
Joten i, jälleen, on kokonaisluku.

115
00:05:25,710 --> 00:05:27,210
Ehkä käytämme sitä
joka Scratch-ohjelma

116
00:05:27,210 --> 00:05:29,310
seurata pisteet
Tai jotain sellaista.

117
00:05:29,310 --> 00:05:33,810
Joten tämä syntaksin täällä Scratch
vain tarkoittaa, on i alle 50?

118
00:05:33,810 --> 00:05:37,330
No, onneksi jotain on
yksinkertaisia ​​C. Ja kääntää,

119
00:05:37,330 --> 00:05:41,780
Tässä me yksinkertaisesti sanoa i vähemmän
yli 50, tutuilla avaimen

120
00:05:41,780 --> 00:05:42,850
näppäimistöllä.

121
00:05:42,850 --> 00:05:45,141
>> Sillä välin, jos halusi
sanoa jotain yleisempää,

122
00:05:45,141 --> 00:05:49,890
kuin hyvin, on x alle y, jossa kukin
x ja y ovat itse muuttujia?

123
00:05:49,890 --> 00:05:52,280
Voimme tehdä sama asia
C, kunhan olemme

124
00:05:52,280 --> 00:05:53,942
luoneet nämä muuttujat jo.

125
00:05:53,942 --> 00:05:55,650
Ja näemme, miten
tehdä ennen pitkää.

126
00:05:55,650 --> 00:05:58,590
Haluamme yksinkertaisesti sanoa x vähemmän kuin y.

127
00:05:58,590 --> 00:06:00,530
>> Joten olet alkanut
katso joitakin yhtäläisyyksiä.

128
00:06:00,530 --> 00:06:03,490
Ja ne ihmiset, jotka ovat tehneet
Scratch olivat varmasti

129
00:06:03,490 --> 00:06:05,250
innoittamana joitakin näistä perusajatuksia.

130
00:06:05,250 --> 00:06:10,350
Ja näet tällaista
syntaksin monissa languages--

131
00:06:10,350 --> 00:06:12,160
ei vain Scratch, ei
juuri C, mutta Python,

132
00:06:12,160 --> 00:06:14,790
ja JavaScript, ja
muita kieliä vielä.

133
00:06:14,790 --> 00:06:18,270
>> Tarkastellaan toinen konstruktio
C: ltä, käsitteestä ehdon,

134
00:06:18,270 --> 00:06:20,370
tekemässä jotain ehdollisesti.

135
00:06:20,370 --> 00:06:22,720
Jos jokin on totta, tehdä tämä.

136
00:06:22,720 --> 00:06:24,457
Jos jotain muuta on totta, tehdä.

137
00:06:24,457 --> 00:06:27,040
Se on eräänlainen ohjelmointi
vastine tienhaaraan.

138
00:06:27,040 --> 00:06:29,730
Ehkä se on kaksisuuntainen haarukka,
kolmitie haarukka, tai enemmän.

139
00:06:29,730 --> 00:06:32,800
Ja Scratch, olisimme
nähnyt jotain tällaista.

140
00:06:32,800 --> 00:06:34,010
>> Eli tämä on iso.

141
00:06:34,010 --> 00:06:36,750
Mutta pitävät suhteellisen
yksinkertaisuus logiikan.

142
00:06:36,750 --> 00:06:44,010
Jos x on pienempi kuin y, niin sano x on pienempi
kuin y, muuta, jos x on suurempi kuin y,

143
00:06:44,010 --> 00:06:46,230
sitten sanoa x on suurempi kuin y.

144
00:06:46,230 --> 00:06:48,300
Ja sitten, loogisesti, jos
luulet takaisin Scratch

145
00:06:48,300 --> 00:06:52,610
tai vain oman ihmisen intuitio,
hyvin, jos x ei ole suurempi kuin y ja x

146
00:06:52,610 --> 00:06:57,000
ei ole pienempi kuin y, niin tietenkin
x tulee olemaan yhtä kuin y.

147
00:06:57,000 --> 00:06:59,690
Joten tässä tapauksessa, jonka pesintä
nämä Scratch lohkot,

148
00:06:59,690 --> 00:07:02,580
voimme saavuttaa kolme
tapa tienhaaraan?

149
00:07:02,580 --> 00:07:04,980
>> Samalla jos haluamme
tehdä sen C, se luultavasti

150
00:07:04,980 --> 00:07:08,420
näyttää hieman simpler-- ainakin
kun saat perehtynyt syntaksia.

151
00:07:08,420 --> 00:07:12,050
Jos x on pienempi kuin y,
printf x on pienempi kuin y.

152
00:07:12,050 --> 00:07:16,140
Else jos x on suurempi kuin y,
printf x on suurempi kuin y.

153
00:07:16,140 --> 00:07:21,210
Else printf x on yhtä suuri kuin y-- ja,
jälleen, kanssa kenoviiva päättyy juuri

154
00:07:21,210 --> 00:07:24,160
näitä uusia rivejä niin, että jos
oikeastaan ​​juoksi tällaista ohjelmaa

155
00:07:24,160 --> 00:07:25,940
se vain siirtää
kohdistin lopulta

156
00:07:25,940 --> 00:07:28,100
seuraavalle riville näytön.

157
00:07:28,100 --> 00:07:31,270
>> Nyt puolestaan ​​Scratch ollut muita
kehittyneempiä ominaisuuksia, vain

158
00:07:31,270 --> 00:07:34,320
joista osa aiomme
aluksi siirtyä maailmaan C.

159
00:07:34,320 --> 00:07:37,010
Ja yksi niistä oli
kutsutaan listan Scratch.

160
00:07:37,010 --> 00:07:39,100
Ja tämä oli erityinen
tyyppinen muuttuja

161
00:07:39,100 --> 00:07:42,840
sallittu voit tallentaa useita asioita
se takaisin, takaisin, takaisin, takaisin.

162
00:07:42,840 --> 00:07:45,540
>> C, sillä ei ole
luetteloita, sinänsä, mutta jotain

163
00:07:45,540 --> 00:07:48,090
jotka ovat yleisesti
nimeltään paneelit, vaikka me

164
00:07:48,090 --> 00:07:50,590
palata myöhemmin tämän lukukauden
katsomalla jotain

165
00:07:50,590 --> 00:07:52,780
kutsutaan lista, tai oikeastaan ​​linkitetty lista.

166
00:07:52,780 --> 00:07:55,510
Mutta nyt, lähin
vastaava C meille

167
00:07:55,510 --> 00:07:57,345
tulee olemaan jotain
kutsutaan jono.

168
00:07:57,345 --> 00:07:59,740
Ja joukko on yksinkertaisesti
erityinen muuttuja

169
00:07:59,740 --> 00:08:03,160
jonka avulla voit tallentaa tietoja
takaisin, takaisin, takaisin, takaisin.

170
00:08:03,160 --> 00:08:05,840
>> Ja todellakin, Scratch,
jos halusimme päästä

171
00:08:05,840 --> 00:08:09,030
ensimmäinen osa array tai
list-- ja aion kutsua sitä,

172
00:08:09,030 --> 00:08:13,600
Sopimuksen mukaan argv, argumentti
vektori, mutta siitä lisää ennen pitkää.

173
00:08:13,600 --> 00:08:17,090
Jos Haluan saada ensimmäisen elementin
of argv, maailmassa Scratch

174
00:08:17,090 --> 00:08:20,930
te itse tehdä yleensä
aloita laskien 1.

175
00:08:20,930 --> 00:08:22,850
>> Ja niin voisin saada erä 1 argv.

176
00:08:22,850 --> 00:08:26,310
Se, miten MIT toteutettu
käsite listojen.

177
00:08:26,310 --> 00:08:29,860
Mutta C, aion
yksinkertaisemmin vain sanoa, argv,

178
00:08:29,860 --> 00:08:32,758
joka taas on nimi minun
list-- tai olla selvää, jono.

179
00:08:32,758 --> 00:08:34,549
Ja jos haluan ensimmäisen
elementtejä, aion

180
00:08:34,549 --> 00:08:37,890
käyttää hakasulkeissa johon
ehkä ei usein alle näppäimistön.

181
00:08:37,890 --> 00:08:40,150
>> Mutta 0 tarkoittaa vain, saada minulle ensimmäinen.

182
00:08:40,150 --> 00:08:42,160
Joten välillä ja
Ajan myötä aiomme

183
00:08:42,160 --> 00:08:44,570
alkaa nähdä nämä dikotomioiden
välillä Scratch ja C,

184
00:08:44,570 --> 00:08:46,070
jolloin Scratch käyttää yhtä.

185
00:08:46,070 --> 00:08:47,670
Me C käyttää 0 täällä.

186
00:08:47,670 --> 00:08:49,420
Mutta voit nopeasti nähdä
kun ymmärrät

187
00:08:49,420 --> 00:08:52,920
perustan jokaisen kielen, joka
nämä asiat alkavat saada sitäkin

188
00:08:52,920 --> 00:08:56,860
tuttuja käytännön kautta ja käytäntö.

189
00:08:56,860 --> 00:08:59,700
>> Joten todella näyttävät nyt ohjelmaa.

190
00:08:59,700 --> 00:09:04,031
Tässä on ensimmäinen meidän C
lähdekoodi täydellistä ohjelmia.

191
00:09:04,031 --> 00:09:06,280
Ja ohjelma aiomme
tarjottavaa vastiketta

192
00:09:06,280 --> 00:09:09,340
on yksi, joka on vastaava
kyseiseen aiemmin Scratch pala.

193
00:09:09,340 --> 00:09:13,210
>> Joten täällä, meillä on mitä
luultavasti yksinkertaisin C-ohjelma

194
00:09:13,210 --> 00:09:15,410
voit kirjoittaa, että
todella tekee jotain.

195
00:09:15,410 --> 00:09:18,250
Nyt me näkemättä,
nyt, on muun muassa,

196
00:09:18,250 --> 00:09:21,190
vakio io.h, ja nämä kulma
suluissa, ja int ja tyhjä,

197
00:09:21,190 --> 00:09:22,840
ja aaltosulkumerkkien ja vastaavat.

198
00:09:22,840 --> 00:09:25,390
>> Ja Haluan vain keskittyä
mitä, ainakin intuitiivisesti,

199
00:09:25,390 --> 00:09:26,860
ponnahtavat ulos sinua jo.

200
00:09:26,860 --> 00:09:30,300
Itse tärkein, en
välttämättä tiedä, mitä tämä on,

201
00:09:30,300 --> 00:09:34,580
mutta aivan kuten Scratch oli, että kun
Vihreä lippu napsautetaan palapelin pala,

202
00:09:34,580 --> 00:09:39,070
niin tekee C ohjelmointikielellä
on tärkein koodinpätkä, joka

203
00:09:39,070 --> 00:09:43,380
saa suorittaa oletusarvoisesti. Ja, todellakin,
se kirjaimellisesti aiotaan kutsua main.

204
00:09:43,380 --> 00:09:44,720
>> Joten tärkein on funktio.

205
00:09:44,720 --> 00:09:48,720
Ja se on erityinen toiminto, joka on olemassa
C, että kun käynnistää ohjelman

206
00:09:48,720 --> 00:09:52,720
se on tärkein, joka saa hoitaa
oletuksena. Kun maailma Scratch,

207
00:09:52,720 --> 00:09:56,970
se oli yleensä silloin, kun vihreä lippu
napsautetaan, joka sai käynnistetään oletusarvona.

208
00:09:56,970 --> 00:10:01,130
>> Samalla olemme nähneet tämän ennenkin,
printf tai tulostaa muotoiltu, se

209
00:10:01,130 --> 00:10:05,620
olemaan funktio mukana
C, sekä koko joukko muita,

210
00:10:05,620 --> 00:10:10,140
että tulee aika ja aika
uudelleen, jotta tekemään juuri

211
00:10:10,140 --> 00:10:12,450
nimensä, tulostaa jotain.

212
00:10:12,450 --> 00:10:13,500
Mitä haluat tulostaa?

213
00:10:13,500 --> 00:10:15,770
No, näemme, että
sulkemalla merkkiä

214
00:10:15,770 --> 00:10:18,680
kuten these-- Hello World,
kenoviiva n lainausmerkkeihin,

215
00:10:18,680 --> 00:10:23,040
voimme kertoa printf tarkalleen
mitä tulostaa ruudulla.

216
00:10:23,040 --> 00:10:26,430
>> Mutta jotta tehdä
että, valitettavasti

217
00:10:26,430 --> 00:10:30,010
otettava jotain, joka on
jo arvoituksellinen meille ihmisille,

218
00:10:30,010 --> 00:10:34,510
mutta ainakin se on hieman readable--
terävä sisältävät, standardi io.h, int,

219
00:10:34,510 --> 00:10:39,340
main, mitätön, printf, kaikki maaginen
loitsut me juuri nähnyt ruudulla.

220
00:10:39,340 --> 00:10:42,470
Mutta meidän oikeastaan ​​tarvitse
mennä enemmän mystistä edelleen.

221
00:10:42,470 --> 00:10:47,140
Meidän täytyy ensin kääntää koodia
kirjoittaisimme konekielelle.

222
00:10:47,140 --> 00:10:51,370
Ja muistaa viime viikolla, että koneet,
ainakin ne tiedämme täällä,

223
00:10:51,370 --> 00:10:54,450
lopussa päivän ainoa
ymmärtää nollia ja ykkösiä.

224
00:10:54,450 --> 00:10:58,100
>> Ja minun Jumalani, jos olisimme kirjoittaa nämä
nollia ja ykkösiä itse ohjelmaan,

225
00:10:58,100 --> 00:11:01,260
se olisi hyvin, hyvin nopeasti
ottaa hauskaa pois mitään.

226
00:11:01,260 --> 00:11:05,150
Mutta näyttää siltä, ​​per viime viikolla,
että nämä kuviot nollia ja ykkösiä

227
00:11:05,150 --> 00:11:06,400
vain on erityinen merkitys.

228
00:11:06,400 --> 00:11:08,500
Tietyissä yhteyksissä,
ne saattavat merkitä numeroita.

229
00:11:08,500 --> 00:11:11,840
>> Joissakin yhteyksissä, he saattavat merkitä
kirjaimia, tai väreihin tai useita

230
00:11:11,840 --> 00:11:14,710
Muiden abstraktioita siinä sen.

231
00:11:14,710 --> 00:11:18,450
Mutta aivan kuten tietokoneessa on
CPU, Central Processing Unit,

232
00:11:18,450 --> 00:11:20,390
tai aivot tietokoneesi sisälle.

233
00:11:20,390 --> 00:11:22,240
Se on yleensä Intel
sisällä, koska se on

234
00:11:22,240 --> 00:11:24,900
yksi suurimmista yrityksistä
joka tekee suorittimia tietokoneita.

235
00:11:24,900 --> 00:11:28,910
>> No, Intel prosessorit ja muut
yksinkertaisesti ovat päättäneet etukäteen

236
00:11:28,910 --> 00:11:33,970
että tietyt kuviot nollien ja
niistä tarkoittaa tiettyjä asioita.

237
00:11:33,970 --> 00:11:37,040
Tiettyjä uusia nollia ja ykkösiä
tarkoittaa, tulostaa näyttöön,

238
00:11:37,040 --> 00:11:39,710
tai lisätä nämä kaksi lukua, tai
vähentää nämä kaksi lukua,

239
00:11:39,710 --> 00:11:43,310
tai siirtää tämä pala tiedot
minun tietokoneen muistiin tänne,

240
00:11:43,310 --> 00:11:47,870
tai useita muita erittäin alhainen,
mutta lopulta hyödyllinen, toimintaa.

241
00:11:47,870 --> 00:11:53,022
Mutta onneksi me ihmiset eivät aio
tarvitse tietää tämä taso.

242
00:11:53,022 --> 00:11:56,230
Todellakin, aivan kuten viime kerralla, jossa
hajamielinen uudestaan ​​ja uudestaan, ja uudestaan,

243
00:11:56,230 --> 00:11:58,930
rakennus hyvin alhainen
primitives kuten nollia ja ykkösiä

244
00:11:58,930 --> 00:12:01,160
korkeamman tason käsitteitä
kuten numeroita ja kirjaimia,

245
00:12:01,160 --> 00:12:04,330
ja värit, ja lisää,
jotta voimme kuin ohjelmoijat

246
00:12:04,330 --> 00:12:07,080
seistä harteille
muita, jotka ovat tulleet ennen meitä

247
00:12:07,080 --> 00:12:11,260
ja käyttää ohjelmistoa, että muut
ihmiset ovat kirjoittaneet ennen us--

248
00:12:11,260 --> 00:12:14,340
nimittäin ohjelmia kutsutaan kääntäjiä.

249
00:12:14,340 --> 00:12:17,770
>> C on kieli,
on yleensä koottu,

250
00:12:17,770 --> 00:12:22,130
joka tarkoittaa muunnettu
lähdekoodi konekielelle.

251
00:12:22,130 --> 00:12:25,230
Erityisesti mitä tämä tarkoittaa
on, että jos olet saanut lähde

252
00:12:25,230 --> 00:12:29,530
koodi, joka itse kirjoittaa, koska me pian
tulee aivan hetken ruudulla,

253
00:12:29,530 --> 00:12:33,140
ja haluat muuntaa sen
lopulta kone code--

254
00:12:33,140 --> 00:12:37,100
ne nollia ja ykkösiä, jotka
vain Mac- tai PC

255
00:12:37,100 --> 00:12:41,230
understands-- sinulla ensimmäinen
ruokkia että lähdekoodi kuin

256
00:12:41,230 --> 00:12:46,340
tulo erityiseen
ohjelma nimeltä kääntäjä,

257
00:12:46,340 --> 00:12:48,974
jonka lähtö me
on näet on konekielelle.

258
00:12:48,974 --> 00:12:51,890
Ja todellakin, viimeksi puhuimme
noin, todella, lopussa päivä,

259
00:12:51,890 --> 00:12:52,610
ongelmanratkaisu.

260
00:12:52,610 --> 00:12:53,360
Sinulla tuloa.

261
00:12:53,360 --> 00:12:54,318
Ja olet saanut lähdöt.

262
00:12:54,318 --> 00:12:56,560
Ja olet saanut jonkinlaista
algoritmin keskellä.

263
00:12:56,560 --> 00:12:59,830
>> Algoritmit voivat varmasti
ohjelmistossa,

264
00:12:59,830 --> 00:13:02,900
kuten näimme kanssa pseudokoodina viime viikolla
ja kuten näemme todellisia koodia

265
00:13:02,900 --> 00:13:03,490
Tämä viikko.

266
00:13:03,490 --> 00:13:06,430
Ja niin kääntäjän oikeastaan ​​vain
on joukko algoritmeja sisällä

267
00:13:06,430 --> 00:13:10,060
siitä, että osaavat
muuntaa erityinen avainsanoja,

268
00:13:10,060 --> 00:13:12,180
kuten tärkein, ja printf,
ja muut, jotka olemme juuri

269
00:13:12,180 --> 00:13:17,620
Näin osaksi malleja nollia ja
ne, jotka Intel sisällä ja muita suorittimia

270
00:13:17,620 --> 00:13:20,020
todella ymmärtää.

271
00:13:20,020 --> 00:13:22,460
Miten teemme tämän?

272
00:13:22,460 --> 00:13:24,470
Mistä saamme kääntäjä?

273
00:13:24,470 --> 00:13:26,400
>> Useimmat meistä täällä on Mac tai PC.

274
00:13:26,400 --> 00:13:29,152
Ja käytät Mac OS, tai
Windows tai Linux tai Solaris,

275
00:13:29,152 --> 00:13:30,860
tai useita muita
käyttöjärjestelmät.

276
00:13:30,860 --> 00:13:32,568
Ja todellakin, voisimme
mennä ulos radalle

277
00:13:32,568 --> 00:13:35,710
ja lataa kääntäjä
Mac- tai PC

278
00:13:35,710 --> 00:13:37,360
juuri sinun käyttöjärjestelmään.

279
00:13:37,360 --> 00:13:39,617
Mutta me kaikki olla
eri sivuja, niin sanotusti.

280
00:13:39,617 --> 00:13:41,450
Meidän täytyisi hieman
eri kokoonpanoissa.

281
00:13:41,450 --> 00:13:43,210
Ja asiat eivät toimi kaikille sama.

282
00:13:43,210 --> 00:13:45,280
Ja, todellakin, näinä päivinä
monet meistä eivät käytä

283
00:13:45,280 --> 00:13:47,516
ohjelmisto, joka toimii vain meidän läppäreissä.

284
00:13:47,516 --> 00:13:49,390
Sen sijaan käyttää jotain
kuten selaimen, joka

285
00:13:49,390 --> 00:13:52,930
pystymme käyttämään web-pohjainen
sovellukset pilvessä.

286
00:13:52,930 --> 00:13:55,630
Ja myöhemmin tämän lukukauden,
teemme juuri näin.

287
00:13:55,630 --> 00:13:59,660
Me kirjoittaa sovelluksia tai
ohjelmistoa käyttäen code-- ei C,

288
00:13:59,660 --> 00:14:02,860
mutta muita kieliä, kuten Python ja
JavaScript-- jotka kulkevat pilvessä.

289
00:14:02,860 --> 00:14:05,860
>> Ja tehdä niin, me itse
lukukauden aikana

290
00:14:05,860 --> 00:14:11,890
todella käyttää pilvipohjaisen
ympäristö tunnetaan CS50 IDE.

291
00:14:11,890 --> 00:14:16,030
Tämä on web-pohjainen ohjelmointi
ympäristö, tai yhtenäinen kehittäminen

292
00:14:16,030 --> 00:14:20,610
ympäristö, Ide, joka on rakennettu huipulla joitakin
avoimen lähdekoodin ohjelmistoja kutsutaan Cloud 9.

293
00:14:20,610 --> 00:14:22,966
Ja olemme tehneet joitakin pedagogisia
yksinkertaistuksia se

294
00:14:22,966 --> 00:14:25,840
jotta salata tiettyjä ominaisuuksia,
ensimmäisten viikkojen emme tarvitse,

295
00:14:25,840 --> 00:14:27,770
jonka jälkeen voit
paljastavat heitä ja useimmat

296
00:14:27,770 --> 00:14:29,400
mitä haluat ympäristön kanssa.

297
00:14:29,400 --> 00:14:32,470
>> Ja se antaa meille myös, että
esiasenna tiettyjä ohjelmistoja.

298
00:14:32,470 --> 00:14:35,330
Asioita, kuten ns CS50
kirjasto, josta pian nähdä

299
00:14:35,330 --> 00:14:39,210
antaa meille C joidenkin
lisätoimintoja.

300
00:14:39,210 --> 00:14:44,392
Joten jos menet lopulta CS50.io,
sinua pyydetään kirjautumaan sisään,

301
00:14:44,392 --> 00:14:46,350
ja kun teet ja luoda
tilin ilmaiseksi,

302
00:14:46,350 --> 00:14:52,150
voit jolla siirrytään
ympäristö, joka näyttää aivan näin.

303
00:14:52,150 --> 00:14:53,760
>> Nyt tämä on oletustila.

304
00:14:53,760 --> 00:14:55,650
Kaikki on mukavaa ja
kirkas ruudulla.

305
00:14:55,650 --> 00:14:57,941
Monet meistä on tapana
työskentelevät CS50 pala, joka on

306
00:14:57,941 --> 00:14:59,150
melko myöhään yöhön.

307
00:14:59,150 --> 00:15:02,400
Ja niin jotkut ehkä mieluummin
muuttaa sen Yökäyttötilassa niin sanotusti.

308
00:15:02,400 --> 00:15:05,550
>> Mutta lopulta, mitä olet
näkemään sisällä CS50 IDE

309
00:15:05,550 --> 00:15:08,340
on kolme erillistä areas--
alue vasemmalla, jossa

310
00:15:08,340 --> 00:15:12,604
tiedostot ovat menossa olevan
pilvi, alue ylhäällä oikealla

311
00:15:12,604 --> 00:15:14,270
jossa koodi tulee olemaan muokattavissa.

312
00:15:14,270 --> 00:15:16,650
Voit avata
yksittäisiä välilehtiä mihinkään ohjelmaan

313
00:15:16,650 --> 00:15:19,670
että kirjoitat tämän lukukauden sisällä
Kyseisen oikeassa yläkulmassa.

314
00:15:19,670 --> 00:15:23,070
Ja sitten useimmat arcanely,
ja vielä voimakkaasti,

315
00:15:23,070 --> 00:15:26,610
tulee olemaan tämä asia on
pohja tunnetaan pääteikkunaan.

316
00:15:26,610 --> 00:15:29,450
>> Tämä on vanha koulu
Command Line Interface,

317
00:15:29,450 --> 00:15:32,240
tai CLI, joka sallii
voit suorittaa komentoja

318
00:15:32,240 --> 00:15:35,260
on computer-- tässä tapauksessa
tietokone uudelleen cloud--

319
00:15:35,260 --> 00:15:39,090
tehdä asioita, kuten kääntää koodia
lähdekoodista konekielelle,

320
00:15:39,090 --> 00:15:43,600
ajaa ohjelmia, tai aloittaa
web-palvelin, tai päästä käsiksi tietokantaan,

321
00:15:43,600 --> 00:15:47,454
ja useita muita tekniikoita
että aloitamme käyttää ennen pitkää.

322
00:15:47,454 --> 00:15:49,370
Mutta sinne, olemme
menossa oikeastaan

323
00:15:49,370 --> 00:15:51,240
mennä verkossa ja aloittaa pelaamisen.

324
00:15:51,240 --> 00:15:54,399
Ja tehdä niin, nyt ensimmäinen
aloittaa puuhastelun kanssa tärkein,

325
00:15:54,399 --> 00:15:55,940
ja kirjoittaa pääosan ohjelmaa.

326
00:15:55,940 --> 00:15:59,170
Ja nyt käyttää tätä toimintoa
printf, jota käytimme aiemmin,

327
00:15:59,170 --> 00:16:01,050
yksinkertaisesti sanoa jotain.

328
00:16:01,050 --> 00:16:04,910
>> Joten tässä olen jo sisällä CS50 IDE.

329
00:16:04,910 --> 00:16:05,930
Olen kirjautunut etukäteen.

330
00:16:05,930 --> 00:16:07,360
Ja minä täysin seulotaan ikkunan.

331
00:16:07,360 --> 00:16:09,670
Ja niin, lopulta, sinun
Myös tulevina ongelmia

332
00:16:09,670 --> 00:16:12,960
seuraa samanlainen vaiheita,
tarjoaa online-dokumentaatio.

333
00:16:12,960 --> 00:16:16,360
Joten sinun ei tarvitse huolehtia
imevää jokainen pieni tekninen askel

334
00:16:16,360 --> 00:16:17,730
että en tänään.

335
00:16:17,730 --> 00:16:19,222
>> Mutta saat seuraavanlaisen näytön.

336
00:16:19,222 --> 00:16:20,430
Satun olemaan yötilassa.

337
00:16:20,430 --> 00:16:22,944
Ja voit kirkastaa kaiken
up poistamalla yötila.

338
00:16:22,944 --> 00:16:24,860
Ja lopussa on
päivä, olet menossa nähdä

339
00:16:24,860 --> 00:16:30,090
nämä kolme areas-- tiedosto
selain vasemmalla, koodi välilehdet ylös,

340
00:16:30,090 --> 00:16:32,430
ja pääteikkuna alareunassa.

341
00:16:32,430 --> 00:16:34,890
>> Anna minun mennä eteenpäin ja
kirjoittaa ensimmäinen ohjelma.

342
00:16:34,890 --> 00:16:42,300
Aion ennaltaehkäisevästi mene File,
Save, ja pelastaa minun tiedosto hello.c.

343
00:16:42,300 --> 00:16:46,850
Itse Sopimuksen mukaan mitään ohjelmaa me
kirjoitus, joka on kirjoitettu C-kielellä

344
00:16:46,850 --> 00:16:49,739
tulee nimetä jotain
piste c, sopimuksen mukaan.

345
00:16:49,739 --> 00:16:53,030
Joten aion nimetä sen hello.c, koska
Haluan vain sanoa hei maailmaan.

346
00:16:53,030 --> 00:16:54,820
Nyt aion zoomata
ulos ja sitten Tallenna.

347
00:16:54,820 --> 00:16:58,180
Ja kaikki Minulla on tässä nyt on välilehti
jossa voin alkaa kirjoittaa koodia.

348
00:16:58,180 --> 00:16:59,490
>> Tämä ei aio koota.

349
00:16:59,490 --> 00:17:00,300
Tämä ei tarkoita mitään.

350
00:17:00,300 --> 00:17:02,750
Ja joten vaikka I muunnetaan
tämä nollia ja ykkösiä,

351
00:17:02,750 --> 00:17:05,390
CPU tulee ole
idea, mitä tapahtuu ympärillä.

352
00:17:05,390 --> 00:17:14,170
Mutta jos kirjoitan radoilla, jotka eivät täsmää
kanssa C: n conventions-- C olento,

353
00:17:14,170 --> 00:17:20,150
uudelleen, tämä language-- kanssa syntaksi kuten
Tämän printf hei world-- ja olen

354
00:17:20,150 --> 00:17:22,210
mennyt mukava
Näin ajan mittaan.

355
00:17:22,210 --> 00:17:24,510
Joten en usko tein
tahansa painovirheitä.

356
00:17:24,510 --> 00:17:27,910
>> Mutta, poikkeuksetta, ensimmäinen
aika teet tämän, et.

357
00:17:27,910 --> 00:17:31,090
Ja mitä aion tehdä ehkä kovin
hyvin toimi sinulle ensimmäistä kertaa.

358
00:17:31,090 --> 00:17:33,610
Ja se on täysin OK,
koska juuri nyt te

359
00:17:33,610 --> 00:17:37,662
voi vain nähdä paljon uutuuden,
mutta ajan mittaan kun saat tuttuja

360
00:17:37,662 --> 00:17:39,870
Tämän ympäristöön, ja
tällä kielellä, ja toiset,

361
00:17:39,870 --> 00:17:42,370
voit alkaa nähdä asioita,
ovat joko oikea tai väärä.

362
00:17:42,370 --> 00:17:44,369
>> Ja tämä on mitä
opetus kaverit ja kurssi

363
00:17:44,369 --> 00:17:48,780
avustajat saada niin hyvä ajan, on
tiputtelua virheitä tai vikoja koodissa.

364
00:17:48,780 --> 00:17:52,110
Mutta Väitän, että siellä
Ei vikoja tämän koodin.

365
00:17:52,110 --> 00:17:53,990
Joten Haluan nyt ohjelman suorittamiseen.

366
00:17:53,990 --> 00:17:57,440
>> Nyt yksin Mac- tai PC, olen
tapana kaksoinäpäyttämällä kuvakkeita

367
00:17:57,440 --> 00:17:59,350
kun haluan ajaa joitakin ohjelmaan.

368
00:17:59,350 --> 00:18:01,080
Mutta se ei ole täällä mallin.

369
00:18:01,080 --> 00:18:04,570
Tässä ympäristössä, joka on CS50 IDE.

370
00:18:04,570 --> 00:18:07,192
Olemme käyttöympäristön
nimeltään Linux.

371
00:18:07,192 --> 00:18:09,900
Linux muistuttaa toinen
käyttöjärjestelmä, yleisesti tunnettua

372
00:18:09,900 --> 00:18:10,850
kuten Unix.

373
00:18:10,850 --> 00:18:16,340
Ja Linux tunnetaan erityisesti
jonka Command Line Ympäristö, CLI.

374
00:18:16,340 --> 00:18:20,070
Nyt käytämme tiettyä
maku Linux kutsutaan Ubuntu.

375
00:18:20,070 --> 00:18:22,770
Ja Ubuntu on yksinkertaisesti
tietyt versio Linux.

376
00:18:22,770 --> 00:18:27,900
>> Mutta nämä Linuxin näinä päivinä tehdä todella
tulevat graafisia käyttöliittymiä.

377
00:18:27,900 --> 00:18:30,360
Ja yksi satumme
käyttää tässä web-pohjainen.

378
00:18:30,360 --> 00:18:32,735
Joten tämä voisi näyttää jopa
hieman erilainen kuin jotain

379
00:18:32,735 --> 00:18:35,310
itse voisi olla
nähnyt tai ajaa ohi.

380
00:18:35,310 --> 00:18:37,910
>> Joten aion mennä eteenpäin
nyt ja toimi seuraavasti.

381
00:18:37,910 --> 00:18:40,950
Olen tallentanut tämä kuva hello.c.

382
00:18:40,950 --> 00:18:47,350
Aion mennä eteenpäin ja
tyyppi clanghello.c Niin Clang

383
00:18:47,350 --> 00:18:49,850
että C-kieli on kääntäjä.

384
00:18:49,850 --> 00:18:51,952
Se valmiiksi asennettuna CS50 IDE.

385
00:18:51,952 --> 00:18:54,910
Ja voit ehdottomasti ladata ja
asentaa tämän itse Mac tai PC.

386
00:18:54,910 --> 00:18:57,910
>> Mutta jälleen kerran, sinun ei tarvitse kaikkia
esikokoonpano tehty.

387
00:18:57,910 --> 00:19:00,940
Joten nyt, olen vain
aikoo juosta clanghello.c.

388
00:19:00,940 --> 00:19:03,240
Ja nyt huomaa syntaksin
tässä lopulta

389
00:19:03,240 --> 00:19:06,930
ymmärtää vain sitä, että minulla on
kansion tai hakemiston nimeltä Työtila.

390
00:19:06,930 --> 00:19:11,030
Tämä dollarin merkki on vain yleissopimus
for merkitys, kirjoita komennot täällä.

391
00:19:11,030 --> 00:19:14,560
>> Se, mitä kutsutaan nopea, vain
sopimuksen mukaan on dollarin merkki.

392
00:19:14,560 --> 00:19:19,130
Ja jos menen eteenpäin nyt ja valitse
Anna, mikään ei tunnu tapahtuneen.

393
00:19:19,130 --> 00:19:20,930
Mutta se on itse asiassa hyvä asia.

394
00:19:20,930 --> 00:19:23,650
Mitä vähemmän, mikä tapahtuu
näytön, sitä todennäköisemmin

395
00:19:23,650 --> 00:19:26,710
koodi on olla oikea,
ainakin syntaktisesti.

396
00:19:26,710 --> 00:19:29,120
>> Joten jos haluan suorittaa tämän
ohjelma, mitä teen?

397
00:19:29,120 --> 00:19:33,770
No, käy ilmi, että
oletusnimi sopimuksen mukaan

398
00:19:33,770 --> 00:19:38,854
ohjelmia kun et määritä
Nimeä ohjelma on vain a.out.

399
00:19:38,854 --> 00:19:41,270
Ja tämä syntaksi liian, luultavasti
tutustua ennen pitkää.

400
00:19:41,270 --> 00:19:47,500
>> Dot slash tarkoittaa vain, hei, CS50
IDE, suorita ohjelma nimeltä a.out

401
00:19:47,500 --> 00:19:49,400
se sisällä minun hakemistossa.

402
00:19:49,400 --> 00:19:51,520
Tämä piste tarkoittaa nykyisen hakemiston.

403
00:19:51,520 --> 00:19:55,040
Ja näemme, mitä muut tällaiset sekvenssit
Merkkien merkitsee ennen pitkää.

404
00:19:55,040 --> 00:19:58,430
>> Joten tässä sitä mennään, Enter, Hello World.

405
00:19:58,430 --> 00:20:00,080
Ja huomaat, että mitä tapahtui?

406
00:20:00,080 --> 00:20:01,580
Se ei ainoastaan ​​tulostaa Hello World.

407
00:20:01,580 --> 00:20:05,990
Se myös muutti
kursori seuraavalle riville.

408
00:20:05,990 --> 00:20:07,160
>> Ja miksi se oli?

409
00:20:07,160 --> 00:20:12,400
Mikä oli koodi että me kirjoitti ennen
että varmistetaan, että kursori

410
00:20:12,400 --> 00:20:14,882
siirry seuraavalle riville?

411
00:20:14,882 --> 00:20:16,840
Hassua noin
tietokone on se vain menee

412
00:20:16,840 --> 00:20:18,570
tehdä kirjaimellisesti mitä kerrot sitä tekemään.

413
00:20:18,570 --> 00:20:26,050
>> Joten jos kerrot sen printf hei,
pilkku, avaruus, maailma, lähellä lainaus,

414
00:20:26,050 --> 00:20:29,090
se kirjaimellisesti vain menossa
tulostaa ne merkit.

415
00:20:29,090 --> 00:20:31,980
Mutta minulla oli tämä erikoismerkki
lopussa, muistaa, kenoviiva n.

416
00:20:31,980 --> 00:20:34,230
Ja juuri varmistettu
että merkki oli

417
00:20:34,230 --> 00:20:36,570
seuraavalle riville näytön.

418
00:20:36,570 --> 00:20:38,097
>> Itse asiassa, anna minun mennä ja tehdä tämän.

419
00:20:38,097 --> 00:20:39,430
Anna minun mennä eteenpäin ja poistaa.

420
00:20:39,430 --> 00:20:41,180
Nyt, huomaa, että
alkuun minun näytön siellä

421
00:20:41,180 --> 00:20:42,890
pieni punainen valo
välilehti ilmaisee,

422
00:20:42,890 --> 00:20:45,047
hei, et ole tallentanut tiedostoa.

423
00:20:45,047 --> 00:20:47,880
Joten aion edetä ohjaus
S tai komento S, tallenna tiedosto.

424
00:20:47,880 --> 00:20:51,130
Nyt goes-- meni varten moment-- vihreä.

425
00:20:51,130 --> 00:20:53,760
Ja nyt se takaisin
vain on läheinen ikoni.

426
00:20:53,760 --> 00:21:01,860
>> Jos minä nyt ajaa clanghello.c uudelleen,
Enter, piste slash, a.out, Enter,

427
00:21:01,860 --> 00:21:04,110
näet, että se vielä toimi.

428
00:21:04,110 --> 00:21:06,020
Mutta se luultavasti hieman buginen.

429
00:21:06,020 --> 00:21:08,714
Juuri nyt minun prompt-- työtila,
ja sitten, että dollarin merkki,

430
00:21:08,714 --> 00:21:10,880
ja sitten minun todellinen prompt--
on kaikki samalla linjalla.

431
00:21:10,880 --> 00:21:14,540
Joten tämä varmasti esteettinen vika,
vaikka se ei oikeastaan ​​looginen vika.

432
00:21:14,540 --> 00:21:16,250
>> Joten aion kumota mitä tein.

433
00:21:16,250 --> 00:21:18,560
Aion uusintana a.out.

434
00:21:18,560 --> 00:21:22,710
Huomatkaa Olen lisännyt
Rivinvaihtomerkkiä takaisin.

435
00:21:22,710 --> 00:21:24,280
Olen tallentanut tiedoston.

436
00:21:24,280 --> 00:21:31,630
>> Joten aion uusintana a.out, and--
dammit, bug, bug tarkoittaa virhe.

437
00:21:31,630 --> 00:21:35,020
Eli vika on, että vaikka
Lisäsin kenoviivan n siellä,

438
00:21:35,020 --> 00:21:41,180
uudelleen tallennettu, uudelleen juoksi ohjelma,
käyttäytyminen oli sama.

439
00:21:41,180 --> 00:21:42,640
Miksi olisi?

440
00:21:42,640 --> 00:21:43,910
>> Olen puuttuu askel, eikö?

441
00:21:43,910 --> 00:21:47,620
Tämä keskeinen askel aikaisemmin oli, että olet
to-- kun muutat lähdekoodia,

442
00:21:47,620 --> 00:21:49,610
se kääntyy pois myös ajaa
se läpi kääntäjä

443
00:21:49,610 --> 00:21:51,102
uudelleen niin saat uuden koneen koodi.

444
00:21:51,102 --> 00:21:52,810
Ja konekoodi
nollat ​​ja ykköset,

445
00:21:52,810 --> 00:21:56,260
tulevat olemaan lähes identtiset, mutta
ei täydellisesti niin, koska tarvitsemme,

446
00:21:56,260 --> 00:21:57,510
tietenkin, että uusi rivi.

447
00:21:57,510 --> 00:22:02,640
>> Joten korjata, aion tarvitsevat
uusintana clanghello.c, kirjoita, dot

448
00:22:02,640 --> 00:22:03,800
slash, a.out.

449
00:22:03,800 --> 00:22:08,402
Ja nyt, hei maailma on palannut
missä Odotan sen olevan.

450
00:22:08,402 --> 00:22:09,610
Tämä kaikki on siis hieno ja hyvä.

451
00:22:09,610 --> 00:22:13,150
Mutta a.out on tyhmä nimi varten
ohjelma, vaikka se sattuu olemaan,

452
00:22:13,150 --> 00:22:16,530
historiallisista syistä
default-- tarkoittaa kokoonpano lähdöt.

453
00:22:16,530 --> 00:22:20,780
>> Mutta anna minun mennä eteenpäin täällä
ja tehdä tämän eri tavalla.

454
00:22:20,780 --> 00:22:24,760
Haluan hei maailma -ohjelma
todella kutsua hei.

455
00:22:24,760 --> 00:22:28,320
Joten jos se olisi kuvake minun
työpöydälle, se ei olisi a.out.

456
00:22:28,320 --> 00:22:29,730
Sitä olisi nimeltään hei.

457
00:22:29,730 --> 00:22:33,660
>> Joten tehdä tämän, se kääntyy pois
että Clang, kuten monet ohjelmat,

458
00:22:33,660 --> 00:22:37,980
tukee komentoriviargumentteja,
tai lippuja, tai kytkimiä,

459
00:22:37,980 --> 00:22:39,600
joka yksinkertaisesti vaikuttaa sen käyttäytymiseen.

460
00:22:39,600 --> 00:22:45,160
Erityisesti Clang tukee viiva o
lippu, joka sitten ottaa toinen sana.

461
00:22:45,160 --> 00:22:48,190
Tässä tapauksessa, minä mielivaltaisesti,
mutta kohtuudella, kutsuvat sitä hei.

462
00:22:48,190 --> 00:22:50,710
Mutta voisin kutsua sitä jotain
Haluan, paitsi a.out, joka

463
00:22:50,710 --> 00:22:52,390
olisi melko lisäksi piste.

464
00:22:52,390 --> 00:22:55,640
>> Ja sitten vain määritellä nimi
Tiedoston en haluaisi kääntää.

465
00:22:55,640 --> 00:22:59,190
Joten nyt vaikka alussa
komennon minulla on vielä Clang,

466
00:22:59,190 --> 00:23:01,410
lopussa komennon
Minulla on vielä tiedostonimi,

467
00:23:01,410 --> 00:23:05,520
Nyt nämä komentoriviltä
argumentteja, nämä liput, jotka sanovat,

468
00:23:05,520 --> 00:23:11,180
oh, muuten, lähtö-o, tiedosto
kutsutaan hei, ei oletuksena a.out.

469
00:23:11,180 --> 00:23:13,810
>> Joten jos osuin Anna nyt, ei mitään
näyttää tapahtuneen.

470
00:23:13,810 --> 00:23:17,900
Ja vielä, nyt voin tehdä piste slash hei.

471
00:23:17,900 --> 00:23:19,089
Joten se on sama ohjelma.

472
00:23:19,089 --> 00:23:21,380
Nollat ​​ja niistä ovat
identtiset lopussa päivän.

473
00:23:21,380 --> 00:23:24,210
>> Mutta he kahdessa
eri files-- a.out,

474
00:23:24,210 --> 00:23:26,490
joka on ensimmäinen versio
ja vain tyhmästi nimetty,

475
00:23:26,490 --> 00:23:30,250
ja nyt hei, joka on paljon
enemmän pakottavia nimi ohjelmalle.

476
00:23:30,250 --> 00:23:33,195
Mutta rehellisesti, olen koskaan
menossa muistaa tätä uudelleen,

477
00:23:33,195 --> 00:23:34,070
ja uudestaan, ja uudestaan.

478
00:23:34,070 --> 00:23:36,411
Ja itse asiassa, kuten me kirjoittaa
monimutkaisempi ohjelmia,

479
00:23:36,411 --> 00:23:38,160
komennot olet
täytyy kirjoittaa

480
00:23:38,160 --> 00:23:40,920
menevät vielä
monimutkaisempia edelleen.

481
00:23:40,920 --> 00:23:41,940
>> Ja niin ei hätää.

482
00:23:41,940 --> 00:23:46,220
On käynyt ilmi, että ihmiset ennen
meistä ovat ymmärtäneet hekin

483
00:23:46,220 --> 00:23:47,530
oli tämä täsmälleen sama ongelma.

484
00:23:47,530 --> 00:23:50,900
Hekin eivät nauti tarvitse
tyyppi melko pitkä, mystistä komentoja,

485
00:23:50,900 --> 00:23:52,200
puhumattakaan muista niitä.

486
00:23:52,200 --> 00:23:56,070
Ja niin ihmiset ennen meitä tehneet
muita ohjelmia, jotka helpottavat

487
00:23:56,070 --> 00:23:57,670
koota ohjelmiston.

488
00:23:57,670 --> 00:24:01,609
>> Ja, todellakin, yksi tällainen
Ohjelma on nimeltään Make.

489
00:24:01,609 --> 00:24:03,150
Joten aion mennä eteenpäin ja tehdä tätä.

490
00:24:03,150 --> 00:24:05,691
Aion perua kaiken I
juuri teki seuraavalla tavalla.

491
00:24:05,691 --> 00:24:07,690
Saanen tyyppi LS.

492
00:24:07,690 --> 00:24:10,980
Ja huomaat kolme things--
a.out, ja tähti, hei

493
00:24:10,980 --> 00:24:12,810
ja tähti, ja hello.c.

494
00:24:12,810 --> 00:24:14,730
Toivottavasti tämä olisi
olla hieman intuitiivinen,

495
00:24:14,730 --> 00:24:18,220
sikäli kuin aiemmin oli
mitään tässä työtilassa.

496
00:24:18,220 --> 00:24:21,240
Ei ollut mitään jouduin
luotu kunnes aloimme luokassa.

497
00:24:21,240 --> 00:24:22,840
>> Ja olen luonut hello.c.

498
00:24:22,840 --> 00:24:24,544
Sitten kootaan sitä, ja kutsui sitä a.out.

499
00:24:24,544 --> 00:24:27,460
Ja sitten kootaan uudelleen hieman
eri tavalla ja kutsui sitä hei.

500
00:24:27,460 --> 00:24:32,830
Olen siis kolme tiedostoja tähän hakemistoon,
Tässä kansio nimeltä Työtila.

501
00:24:32,830 --> 00:24:35,005
Nyt näen, että myös
jos en loitontaa itse.

502
00:24:35,005 --> 00:24:37,530
>> Jos minä loitontaa täällä ja
katsokaa, että sivun oikeassa

503
00:24:37,530 --> 00:24:39,940
kulma, kuten luvattiin vasen
laidassa näytön

504
00:24:39,940 --> 00:24:42,990
on aina menossa näyttämään
mitä tililläsi, mitä

505
00:24:42,990 --> 00:24:44,790
sisäpuoli CS50 IDE.

506
00:24:44,790 --> 00:24:46,680
Ja on kolme tiedostoa siellä.

507
00:24:46,680 --> 00:24:49,070
>> Joten haluan päästä eroon a.out ja hei.

508
00:24:49,070 --> 00:24:51,275
Ja kuten ehkä
kuvitella intuitiivisesti, sinun

509
00:24:51,275 --> 00:24:53,400
voisi lajitella valvonnan klikkauksen
tai oikealla klikkaa tästä.

510
00:24:53,400 --> 00:24:54,590
Ja tämä pieni valikko ponnahtaa.

511
00:24:54,590 --> 00:24:57,170
Voit ladata tiedoston, suorita
se, esikatsella sitä, virkistää, nimetä uudelleen,

512
00:24:57,170 --> 00:24:57,700
tai mitä ei.

513
00:24:57,700 --> 00:25:00,260
>> Voisin vain poistaa,
ja se menisi pois.

514
00:25:00,260 --> 00:25:05,260
Mutta nyt tehdä asioita komennolla
linja nyt, jotta totutella

515
00:25:05,260 --> 00:25:07,010
Tämän, ja toimi seuraavasti.

516
00:25:07,010 --> 00:25:12,345
Aion mennä eteenpäin ja poistaa
a.out kirjoittamalla kirjaimellisesti rma.out.

517
00:25:12,345 --> 00:25:14,890
On käynyt ilmi, komento
poistamalla tai poistamalla jotain,

518
00:25:14,890 --> 00:25:16,280
ei poista tai poista.

519
00:25:16,280 --> 00:25:21,260
>> Se on enemmän ytimekkäästi RM, vain säästää
sinulle näppäimistön, ja paina Enter.

520
00:25:21,260 --> 00:25:24,707
Nyt aiomme olla hieman
arvoituksellisesti poistaa tavallinen tiedosto a.out.

521
00:25:24,707 --> 00:25:27,040
En todellakaan tiedä, mitä
epäsäännöllinen tiedosto olisi vielä.

522
00:25:27,040 --> 00:25:28,660
Mutta en halua poistaa sitä.

523
00:25:28,660 --> 00:25:30,150
>> Joten aion kirjoittaa y kyllä.

524
00:25:30,150 --> 00:25:31,940
Tai voisin kirjoittaa sen ulos, ja paina Enter.

525
00:25:31,940 --> 00:25:33,440
Ja jälleen, mikään ei tunnu tapahtuvan.

526
00:25:33,440 --> 00:25:35,840
Mutta se on yleensä hyvä asia.

527
00:25:35,840 --> 00:25:40,490
>> Jos kirjoitan LS tällä kertaa,
mitä minun pitäisi nähdä?

528
00:25:40,490 --> 00:25:44,930
Toivottavasti vain hei ja hello.c.

529
00:25:44,930 --> 00:25:47,286
Nyt sivuhuomautuksena, luultavasti
huomaa tähti, tähti,

530
00:25:47,286 --> 00:25:48,660
se lopussa minun ohjelmia.

531
00:25:48,660 --> 00:25:50,201
Ja he myös näy vihreänä.

532
00:25:50,201 --> 00:25:53,970
Tämä on vain CS50 IDE tapa
of cluing sinut siihen

533
00:25:53,970 --> 00:25:55,280
että se ei ole lähdekoodia.

534
00:25:55,280 --> 00:25:58,880
Se suoritettavan, eli runnable
ohjelma, jonka voit todella ajaa

535
00:25:58,880 --> 00:26:01,020
tekemällä piste slash, ja sitten se nimi.

536
00:26:01,020 --> 00:26:05,860
>> Nyt, anna minun mennä eteenpäin ja poistaa
Tämän, rm hei, Enter, poista säännöllisesti

537
00:26:05,860 --> 00:26:08,010
tiedosto hei, kyllä.

538
00:26:08,010 --> 00:26:11,180
Ja nyt jos kirjoitan LS,
olemme takaisin hello.c.

539
00:26:11,180 --> 00:26:13,917
Yritä poistaa
Varsinainen lähdekoodia.

540
00:26:13,917 --> 00:26:16,250
Vaikka on olemassa ominaisuuksia
rakennettu CS50 IDE jossa

541
00:26:16,250 --> 00:26:19,870
voit käydä läpi versiohistoriaa
ja taaksepäin ajassa, jos olet vahingossa

542
00:26:19,870 --> 00:26:23,660
poistaa jotain, tee olla tietoinen
kohti näitä kehotteita kyllä ​​tai ei,

543
00:26:23,660 --> 00:26:25,381
mitä todella haluat tehdä.

544
00:26:25,381 --> 00:26:27,380
Ja jos menen ylös
vasen yläkulmassa täällä,

545
00:26:27,380 --> 00:26:30,696
jäljellä on hello.c.

546
00:26:30,696 --> 00:26:32,570
Joten ei kimppua
muut komennot

547
00:26:32,570 --> 00:26:37,550
voi suorittaa maailmassa Linux,
joista yksi on, jälleen, Saa.

548
00:26:37,550 --> 00:26:40,180
Ja aiomme tehdä
minun ohjelma nyt seuraavasti.

549
00:26:40,180 --> 00:26:43,270
>> Sijaan tehdä kalahtaa,
sen sijaan tehdä kalahtaa-o,

550
00:26:43,270 --> 00:26:45,860
Aion yksinkertaisesti
kirjaimellisesti tyyppi, tehdä hei.

551
00:26:45,860 --> 00:26:49,630
Ja nyt huomaa, olen
ei kirjoittamalla tehdä hello.c.

552
00:26:49,630 --> 00:26:50,910
Olen kirjoittamalla tehdä hei.

553
00:26:50,910 --> 00:26:54,840
>> Ja tämä ohjelma Tee että
mukana CS50 IDE, ja lisää

554
00:26:54,840 --> 00:26:57,090
yleensä Linux,
on ohjelma, joka on

555
00:26:57,090 --> 00:26:59,120
aikoo tehdä ohjelma nimeltä Hei.

556
00:26:59,120 --> 00:27:03,680
Ja se tulee olettaa, sopimuksen mukaan,
että jos ohjelma voidaan tehdä,

557
00:27:03,680 --> 00:27:09,030
se aiotaan tehdä lähteestä
koodi tiedosto päättyy piste c, hello.c.

558
00:27:09,030 --> 00:27:12,210
>> Joten jos osuin Anna nyt huomaa, että
komennon, joka saa suorittaa

559
00:27:12,210 --> 00:27:14,340
on itse asiassa jopa pidempi
ennen kuin aikaisemmin.

560
00:27:14,340 --> 00:27:16,670
Ja se johtuu siitä olemme
esimääritetty CS50 IDE olla

561
00:27:16,670 --> 00:27:19,878
lisäominaisuuksia rakennettu, että
emme tarvitse vielä, mutta pian tulee.

562
00:27:19,878 --> 00:27:23,470
Mutta avain asia on ymmärrettävä
Nyt olen Hei ohjelma.

563
00:27:23,470 --> 00:27:27,080
>> Jos kirjoitan LS taas, I
on hei ohjelma.

564
00:27:27,080 --> 00:27:32,070
Ja voin ajaa sen kanssa
piste slash a.out, no,

565
00:27:32,070 --> 00:27:35,590
koska koko kohta tämän
Harjoitus oli piste slash hei.

566
00:27:35,590 --> 00:27:38,089
Ja nyt minulla on hei maailma -ohjelma.

567
00:27:38,089 --> 00:27:39,880
Joten eteenpäin,
olemme melkein aina vain

568
00:27:39,880 --> 00:27:42,088
menossa koota meidän ohjelmia
komennolla Make.

569
00:27:42,088 --> 00:27:45,300
Ja sitten me aiomme käyttää niitä
piste leikata, ja ohjelman nimi.

570
00:27:45,300 --> 00:27:49,610
Mutta ymmärtää, mitä tehdä, on tekemässä
te, se ei itse ole kääntäjä.

571
00:27:49,610 --> 00:27:53,310
Se on vain mukavuussyistä ohjelma
joka osaa käynnistää kääntäjä

572
00:27:53,310 --> 00:27:56,470
ajaa niin, että voit itse käyttää sitä.

573
00:27:56,470 --> 00:28:00,220
>> Mitä muita komentoja olemassa
Linux, ja vuorostaan ​​CS50 IDE?

574
00:28:00,220 --> 00:28:03,107
Tulemme pian nähdä, että on olemassa
CD-komento, Change Directory.

575
00:28:03,107 --> 00:28:05,190
Näin voit sisällä
sinun komentorivikäyttöliittymän

576
00:28:05,190 --> 00:28:07,610
eteenpäin, ja takaisin,
ja avata eri kansioihin

577
00:28:07,610 --> 00:28:08,860
ilman hiirtä.

578
00:28:08,860 --> 00:28:12,470
>> LS näimme, joka tarkoittaa lista
tiedostot hakemistossa.

579
00:28:12,470 --> 00:28:14,650
Tee Dir, voit
luultavasti alkaa päätellä

580
00:28:14,650 --> 00:28:18,150
mitä nämä tarkoittavat now-- tehdä hakemistoon,
Jos haluat luoda kansion.

581
00:28:18,150 --> 00:28:21,270
RM poistaa, RM Dir varten
poista directory-- ja nämä,

582
00:28:21,270 --> 00:28:24,160
jälleen, ovat komentorivin
vastineet, mitä

583
00:28:24,160 --> 00:28:26,945
voisi tehdä CS50 IDE hiirellä.

584
00:28:26,945 --> 00:28:28,820
Mutta löydät pian
että joskus se on vain

585
00:28:28,820 --> 00:28:30,610
paljon nopeammin tekemistä
asioita, joissa on näppäimistö,

586
00:28:30,610 --> 00:28:33,690
ja lopulta paljon tehokkaampi.

587
00:28:33,690 --> 00:28:36,440
>> Mutta on vaikea väittää, että
mitä olemme tehneet tähän mennessä

588
00:28:36,440 --> 00:28:39,990
on kaikki, tehokas, kun kaikki
olemme sanoneet on, hei maailma.

589
00:28:39,990 --> 00:28:43,740
Ja itse en hardcoded
sanat Hello World minun ohjelmaan.

590
00:28:43,740 --> 00:28:45,530
Ei ole mitään dynamiikkaa vielä.

591
00:28:45,530 --> 00:28:49,320
Scratch oli kertaluokkaa
mielenkiintoisempia viime viikolla.

592
00:28:49,320 --> 00:28:51,220
>> Ja niin mennään sinne.

593
00:28:51,220 --> 00:28:55,310
Otetaan askel kohti että
tapa joitakin näistä toiminnoista.

594
00:28:55,310 --> 00:28:59,470
Joten ei ainoastaan ​​C mukana printf,
ja rypäleterttuja muita toimintoja

595
00:28:59,470 --> 00:29:01,850
joista näemme
ajan mittaan, se ei

596
00:29:01,850 --> 00:29:05,760
tekevät kaiken niin helppoa heti
portin saada käyttäjä syöttää.

597
00:29:05,760 --> 00:29:08,140
>> Itse asiassa, yksi puutteista
kielten kuten C,

598
00:29:08,140 --> 00:29:10,140
ja jopa Java ja vielä
muut, on se, että se ei

599
00:29:10,140 --> 00:29:15,860
helpottavat vain saada asioita, kuten
kokonaislukuja käyttäjiltä, ​​tai jouset, sanoja,

600
00:29:15,860 --> 00:29:19,970
ja lauseita, puhumattakaan asioita, kuten
liukuluku arvoja tai todelliset luvut

601
00:29:19,970 --> 00:29:23,240
jossa desimaalipisteet, ja oikeastaan
pitkä numeroita, kuten tulemme pian nähdä.

602
00:29:23,240 --> 00:29:27,000
Joten tämä luettelo rakenteista, nämä
ovat kuin muut Scratch palapelin palaset

603
00:29:27,000 --> 00:29:31,090
että olemme esiasennettuna CS50
IDE että käytämme muutaman viikon

604
00:29:31,090 --> 00:29:34,010
kuten apupyörät tapaisena, ja
lopulta ottaa niitä pois, ja katso

605
00:29:34,010 --> 00:29:37,210
alla huppu, ehkä kello
miten nämä asiat toteutetaan.

606
00:29:37,210 --> 00:29:40,460
>> Mutta tehdä tämän, nyt
todella kirjoittaa ohjelma.

607
00:29:40,460 --> 00:29:41,770
Anna minun mennä eteenpäin nyt.

608
00:29:41,770 --> 00:29:44,750
Ja aion luoda uusi
tiedosto napsauttamalla tätä pientä plus,

609
00:29:44,750 --> 00:29:45,970
ja valitsemalla uusi tiedosto.

610
00:29:45,970 --> 00:29:49,250
>> Aion säästää tämän seuraavan
yksi niin, sanokaamme, string.c,

611
00:29:49,250 --> 00:29:50,750
koska haluan pelata jouset.

612
00:29:50,750 --> 00:29:53,990
Ja merkkijono C on vain
merkkijono.

613
00:29:53,990 --> 00:29:56,090
Joten nyt mennään eteenpäin
ja toimi seuraavasti.

614
00:29:56,090 --> 00:30:01,204
>> Lisää vakio IO.h-- ja
se kääntyy pois standardin IO,

615
00:30:01,204 --> 00:30:03,360
IO tarkoittaa vain tulo ja lähtö.

616
00:30:03,360 --> 00:30:05,920
Joten käy ilmi, että
tämä linja tässä mitä

617
00:30:05,920 --> 00:30:08,140
on naapurimaiden meitä käyttämään printf.

618
00:30:08,140 --> 00:30:10,410
Printf tietenkin tuottaa ulostulon.

619
00:30:10,410 --> 00:30:15,000
Joten voidakseen käyttää printf, se kääntyy
ulos täytyy olla koodirivin

620
00:30:15,000 --> 00:30:16,040
yläosassa tiedoston.

621
00:30:16,040 --> 00:30:18,456
>> Ja me palaamme mitä
joka todella merkitsee ennen pitkää.

622
00:30:18,456 --> 00:30:20,400
On käynyt ilmi, että
tahansa C-ohjelma I kirjoittaa,

623
00:30:20,400 --> 00:30:23,640
Minun täytyy aloittaa sen kanssa
koodia, joka näyttää tältä.

624
00:30:23,640 --> 00:30:26,860
Ja huomaat CS50 IDE, ja
muut yhtenäinen kehittäminen

625
00:30:26,860 --> 00:30:30,050
ympäristöissä, kuten se,
ovat menossa yrittää parhaansa

626
00:30:30,050 --> 00:30:31,780
he voivat lopettaa oman ajattelun.

627
00:30:31,780 --> 00:30:35,930
Itse asiassa, hetki sitten, jos en kumoa
mitä tein, osuin Enter.

628
00:30:35,930 --> 00:30:39,160
>> Sitten osuma auki kihara
ahdin, paina Enter uudelleen.

629
00:30:39,160 --> 00:30:40,430
Ja se päättynyt minun ajatus.

630
00:30:40,430 --> 00:30:45,140
Se antoi uuden linjan, sisennetty ei vähempää
for nice tyylillinen syistä näemme.

631
00:30:45,140 --> 00:30:48,559
Ja sitten se automaattisesti antoi minulle
että kihara ahdin päätän ajatus.

632
00:30:48,559 --> 00:30:50,600
Nyt, se ei aina
arvata mitä haluat tehdä.

633
00:30:50,600 --> 00:30:53,620
Mutta suurelta osin, se tekee
säästää noin painalluksia.

634
00:30:53,620 --> 00:30:59,560
Joten hetki sitten meillä oli tämä program--
hei, maailma, ja sitten koottu se,

635
00:30:59,560 --> 00:31:00,460
ja sitten juoksi sen.

636
00:31:00,460 --> 00:31:01,867
Mutta ei ole dynamiikkaa täällä.

637
00:31:01,867 --> 00:31:03,700
Mitä jos halusimme
tehdä jotain erilaista?

638
00:31:03,700 --> 00:31:07,630
No, mitä jos halusin todella
saat merkkijonon käyttäjä?

639
00:31:07,630 --> 00:31:11,250
Aion käyttää palapelin pala
nimeltään tarkalleen that-- saada merkkijono.

640
00:31:11,250 --> 00:31:15,860
>> Osoittautuu C että kun et halua
tarjota aineksia palapelin pala,

641
00:31:15,860 --> 00:31:19,360
tai oikeammin on -toiminnolla
kirjaimellisesti vain tehdä alkusulun,

642
00:31:19,360 --> 00:31:20,430
lähellä suluissa.

643
00:31:20,430 --> 00:31:25,540
Joten se on ikään kuin siellä
ei valkoista ruutua kirjoitat.

644
00:31:25,540 --> 00:31:27,720
Sano lohko ennen
oli pieni valkoinen laatikko.

645
00:31:27,720 --> 00:31:29,660
Meillä ei ole, että valkoisen laatikon nyt.

646
00:31:29,660 --> 00:31:33,310
>> Mutta kun kutsun get merkkijono, minä
haluavat laittaa tuloksen jonnekin.

647
00:31:33,310 --> 00:31:37,680
Joten hyvin yleinen paradigma C on
soittaa toiminto, kuten get string täällä,

648
00:31:37,680 --> 00:31:41,070
ja sitten tallentaa sen palauttama arvo.

649
00:31:41,070 --> 00:31:44,450
Se on seurausta sen
vaivaa jotain.

650
00:31:44,450 --> 00:31:47,630
>> Ja mikä on
rakentaa ohjelmointi,

651
00:31:47,630 --> 00:31:53,450
onko Scratch tai nyt C, että me
voi käyttää todella tallentaa jotain?

652
00:31:53,450 --> 00:31:55,990
Kutsui sitä muuttuja, eikö?

653
00:31:55,990 --> 00:32:00,320
Ja Scratch, emme oikeastaan
välitä mitä oli menossa muuttujiin.

654
00:32:00,320 --> 00:32:02,170
>> Mutta tässä tapauksessa, me todella tehdä.

655
00:32:02,170 --> 00:32:03,719
Aion sanoa merkkijono.

656
00:32:03,719 --> 00:32:05,510
Ja sitten voisi kutsua
Tässä mitä haluan.

657
00:32:05,510 --> 00:32:08,340
Aion kutsua sitä
nimi, saa saada merkkijono.

658
00:32:08,340 --> 00:32:10,250
>> Nyt vaikka olet
vähän uusi tässä,

659
00:32:10,250 --> 00:32:11,984
huomata, että olen puuttuu joitakin yksityiskohtia.

660
00:32:11,984 --> 00:32:13,150
Olen unohtamatta puolipisteellä.

661
00:32:13,150 --> 00:32:14,400
Minun täytyy lopettaa tämän ajatuksen.

662
00:32:14,400 --> 00:32:17,480
Joten aion siirtää minun osoitinta,
ja osuma puolipisteellä siellä.

663
00:32:17,480 --> 00:32:19,130
Ja mitä olen juuri tehnyt?

664
00:32:19,130 --> 00:32:21,440
Tällä rivillä koodia,
numero 5 tällä hetkellä,

665
00:32:21,440 --> 00:32:23,799
Soitan get merkkijonon ilman panoksia.

666
00:32:23,799 --> 00:32:26,090
Joten ei ole pieni valkoinen
ajas Tallenna lohko on.

667
00:32:26,090 --> 00:32:28,590
>> Sanon vain, hei,
tietokone, saada minut merkkijono.

668
00:32:28,590 --> 00:32:31,390
Yhtäsuuruusmerkin ei oikeastaan
yhtäläisyysmerkki, sinänsä.

669
00:32:31,390 --> 00:32:33,790
Se on tehtävä
operaattorin, joka tarkoittaa,

670
00:32:33,790 --> 00:32:37,860
hei, tietokone, siirrä arvo
oikealta yli vasemmalle.

671
00:32:37,860 --> 00:32:40,480
Ja vasemmassa, olen seuraava.

672
00:32:40,480 --> 00:32:43,580
>> Hei, tietokone, anna minulle string--
merkkijono.

673
00:32:43,580 --> 00:32:45,637
Ja soittaa merkkijono nimi.

674
00:32:45,637 --> 00:32:47,220
Enkä edes kutsua sitä Name.

675
00:32:47,220 --> 00:32:49,970
>> Voisin kutsua sitä, perinteisesti,
jotain S,

676
00:32:49,970 --> 00:32:52,900
paljon kuin käytimme i
soittaa muuttuja i.

677
00:32:52,900 --> 00:32:54,829
Mutta nyt minun täytyy tehdä jotain.

678
00:32:54,829 --> 00:32:57,370
Olisi aika tyhmää
kääntämistä tätä koodia, käynnissä

679
00:32:57,370 --> 00:32:59,410
Tämän ohjelman, vaikka
Saan merkkijono,

680
00:32:59,410 --> 00:33:01,580
koska se on edelleen vain
menossa tervehtimään maailmaan.

681
00:33:01,580 --> 00:33:06,140
>> Mutta mitä jos en halua muuttaa tätä.

682
00:33:06,140 --> 00:33:07,940
Miksi en tee tätä?

683
00:33:07,940 --> 00:33:11,632
Prosentti s, pilkku s.

684
00:33:11,632 --> 00:33:13,090
Ja tämä on hieman arvoituksellinen vielä.

685
00:33:13,090 --> 00:33:15,560
>> Haluan siis tehdä minun muuttujia selvempi.

686
00:33:15,560 --> 00:33:17,510
Saanen nimetä tämän muuttujan nimi.

687
00:33:17,510 --> 00:33:20,230
Ja katsotaan jos emme voi kiusata
lisäksi mitä täällä tapahtuu.

688
00:33:20,230 --> 00:33:22,770
>> Joten linja viisi, Saan merkkijono.

689
00:33:22,770 --> 00:33:25,620
Ja olen tallentamiseksi merkkijonon,
mitä käyttäjä on kirjoittanut

690
00:33:25,620 --> 00:33:28,430
at hänen näppäimistö,
muuttujaan nimeltä Name.

691
00:33:28,430 --> 00:33:30,590
Ja käy ilmi, että
printf ei vain

692
00:33:30,590 --> 00:33:34,220
ottaa yhden argumentin hengen
lainauksia, yksi tulo lainausmerkkeihin.

693
00:33:34,220 --> 00:33:39,100
>> Se voi kestää kaksi tai kolme tai enemmän, kuten
että toinen tai kolmas tai neljäs,

694
00:33:39,100 --> 00:33:42,320
ovat kaikki nimet muuttujien
tai erityisesti arvot,

695
00:33:42,320 --> 00:33:48,610
että haluat kytkeä,
dynaamisesti, että merkkijono lainausmerkeissä.

696
00:33:48,610 --> 00:33:52,110
Toisin sanoen, mitä
olisi vikana?

697
00:33:52,110 --> 00:33:57,920
Jos minä vain sanoi hei nimi, kenoviiva
n, pelasti minun tiedosto käännetty minun koodi,

698
00:33:57,920 --> 00:34:01,660
ja juoksi tämä, mitä tapahtuisi?

699
00:34:01,660 --> 00:34:05,139
>> Se juuri menossa sanoa, hei
nimi, kirjaimellisesti N-A-M-E,

700
00:34:05,139 --> 00:34:07,900
mikä on typerää, koska
se ei poikkea maailmasta.

701
00:34:07,900 --> 00:34:10,400
Joten mitään lainausmerkit on
mitä kirjaimellisesti tulostetaan.

702
00:34:10,400 --> 00:34:12,520
Joten jos Haluan olla
paikkamerkin siellä,

703
00:34:12,520 --> 00:34:14,422
Olen itse täytyy käyttää
joitakin erityisiä syntaksi.

704
00:34:14,422 --> 00:34:17,380
Ja se osoittautuu jos olet lukenut
dokumentaatio printf toiminto,

705
00:34:17,380 --> 00:34:21,320
se kertoo, että
Jos käytät prosenttia s,

706
00:34:21,320 --> 00:34:23,920
voit korvata arvon seuraavasti.

707
00:34:23,920 --> 00:34:27,190
>> Pilkun jälkeen jälkeen
lainausmerkki, voit yksinkertaisesti

708
00:34:27,190 --> 00:34:29,179
kirjoittaa nimi
muuttuja, että haluat

709
00:34:29,179 --> 00:34:33,790
kytkeä tuohon muotoon
koodin, tai muodossa määrittelyksi,

710
00:34:33,790 --> 00:34:35,469
prosentin s jousille.

711
00:34:35,469 --> 00:34:39,190
Ja nyt jos säästin minun arkistoida,
Menen takaisin alas minun terminaaliin.

712
00:34:39,190 --> 00:34:42,870
Ja kirjoitan Tee String,
koska, jälleen, nimi tämän

713
00:34:42,870 --> 00:34:45,510
tiedosto että valitsin ennen on string.c.

714
00:34:45,510 --> 00:34:48,510
>> Joten aion sanoa tehdä String, kirjoita.

715
00:34:48,510 --> 00:34:51,550
Hyvänen, tarkastella kaikkia
virheet olemme tehneet jo.

716
00:34:51,550 --> 00:34:55,540
Ja tämä is-- mitä, tämä on todella
kuten kuusi, seitsemän linja-ohjelma?

717
00:34:55,540 --> 00:34:57,790
Joten tämä on, jos se voi hyvin
nopeasti ylivoimainen.

718
00:34:57,790 --> 00:35:00,890
>> Tämä terminaali ikkuna on
nyt vain regurgitated

719
00:35:00,890 --> 00:35:03,230
valtava määrä virheilmoituksia.

720
00:35:03,230 --> 00:35:07,560
Varmasti, en ole enemmän virhettä
viestejä kuin olen riviä koodia.

721
00:35:07,560 --> 00:35:08,680
Joten mitä on tekeillä?

722
00:35:08,680 --> 00:35:10,920
>> No, paras strategia
tehdä milloin

723
00:35:10,920 --> 00:35:13,710
do kohtaavat ylivoimainen
virheluetteloa niin,

724
00:35:13,710 --> 00:35:16,690
on selaa taaksepäin, etsiä komennolla
juuri juoksemasi joka minun tapauksessani

725
00:35:16,690 --> 00:35:18,020
on tehdä merkkijono.

726
00:35:18,020 --> 00:35:21,630
Katsokaa, mitä tehdä teki, ja se, että
pitkä Clang komento, no big deal siellä.

727
00:35:21,630 --> 00:35:22,950
>> Mutta punainen on huono.

728
00:35:22,950 --> 00:35:24,750
Green yrittää olla
lempeä ja avulias.

729
00:35:24,750 --> 00:35:26,140
Mutta se on edelleen huono, tässä tapauksessa.

730
00:35:26,140 --> 00:35:27,510
Mutta missä on se huono?

731
00:35:27,510 --> 00:35:31,450
>> String.c, linja viisi, merkki viisi.

732
00:35:31,450 --> 00:35:32,930
Joten tämä on vain yleinen sopimus.

733
00:35:32,930 --> 00:35:36,060
Jotain paksusuolen jotain merkitsee
rivinumero ja merkin numero.

734
00:35:36,060 --> 00:35:41,080
Virhe, käyttö pimeän
tunniste merkkijono.

735
00:35:41,080 --> 00:35:42,900
Tarkoititko vakiona?

736
00:35:42,900 --> 00:35:45,530
>> Joten valitettavasti Clang
yrittää olla avuksi.

737
00:35:45,530 --> 00:35:46,850
Mutta se on väärin, tässä tapauksessa.

738
00:35:46,850 --> 00:35:49,350
Ei, Clang, en tarkoita standardi IO.

739
00:35:49,350 --> 00:35:51,070
Tarkoitin että linjalla, kyllä.

740
00:35:51,070 --> 00:35:53,420
>> Mutta linja viisi on tämä yksi täällä.

741
00:35:53,420 --> 00:35:57,040
Ja Clang ei
ymmärtää S-T-R-I-N-G.

742
00:35:57,040 --> 00:36:01,490
Se on pimeän tunniste, joka on
sana se vain ei ole koskaan ennen nähty.

743
00:36:01,490 --> 00:36:05,730
Ja se johtuu C-kieli
me kirjoittaa koodia juuri nyt,

744
00:36:05,730 --> 00:36:08,070
ei ole muuttujia kutsutaan jouset.

745
00:36:08,070 --> 00:36:11,380
>> Se ei oletuksena, tuki
jotain kutsutaan merkkijono.

746
00:36:11,380 --> 00:36:16,750
Se on CS50 pala
ammattikieltä, mutta hyvin tavanomainen.

747
00:36:16,750 --> 00:36:18,600
Mutta voin korjata seuraavasti.

748
00:36:18,600 --> 00:36:22,090
>> Jos lisään yhtä riviä koodia
alkuun tämän ohjelman,

749
00:36:22,090 --> 00:36:27,890
sisältävät CS50.h, joka on toinen tiedosto
jonnekin sisällä CS50 IDE, jonnekin

750
00:36:27,890 --> 00:36:30,820
kiintolevyn, niin sanotusti,
Ubuntu-käyttöjärjestelmä

751
00:36:30,820 --> 00:36:33,590
että olen käynnissä, että
on tiedosto, joka on

752
00:36:33,590 --> 00:36:38,740
menossa opettaa toiminta
järjestelmä mikä merkkijono on vain

753
00:36:38,740 --> 00:36:41,930
kuten standardi io.h on tiedosto
käyttöjärjestelmä, joka on

754
00:36:41,930 --> 00:36:44,430
menossa opettaa sitä mitä printf on.

755
00:36:44,430 --> 00:36:46,810
>> Todellakin, olisimme saaneet
hyvin samanlaisen viestin

756
00:36:46,810 --> 00:36:50,600
jos IO oli myöntänyt standardi
IO.h ja yritti käyttää printf.

757
00:36:50,600 --> 00:36:53,632
Joten aion mennä eteenpäin ja vain
Ohjaa L tyhjentää tietokoneen näytöllä.

758
00:36:53,632 --> 00:36:56,340
Tai voit kirjoittaa selkeitä ja se tulee
vain tyhjentää pääteikkuna.

759
00:36:56,340 --> 00:36:58,020
Mutta voit silti vierittää ajassa taaksepäin.

760
00:36:58,020 --> 00:37:01,100
>> Ja aion uusintana tehdä String.

761
00:37:01,100 --> 00:37:03,660
Cross sormiani tällä kertaa Enter.

762
00:37:03,660 --> 00:37:05,380
Voi luoja, se toimi.

763
00:37:05,380 --> 00:37:09,280
se näyttää minulle pitkä arvoituksellisesti komennon
sitähän Varmista luotu kautta Clang,

764
00:37:09,280 --> 00:37:10,460
mutta ei virheilmoituksia.

765
00:37:10,460 --> 00:37:12,460
Joten ymmärtää, vaikka
saatat saada täysin

766
00:37:12,460 --> 00:37:14,480
hukkua
määrä virheilmoituksia,

767
00:37:14,480 --> 00:37:17,540
se vain voi olla ärsyttävää CSS
vaikutus, jossa Clang ei ymmärrä

768
00:37:17,540 --> 00:37:19,620
Ensinnäkin, mikä tarkoittaa, että sen jälkeen
ei ymmärrä seuraava sana,

769
00:37:19,620 --> 00:37:20,560
tai seuraavalle riville.

770
00:37:20,560 --> 00:37:22,850
Ja niin se vain tukehtuu koodin.

771
00:37:22,850 --> 00:37:24,440
Mutta fix voisi olla yksinkertaista.

772
00:37:24,440 --> 00:37:27,822
Ja niin aina keskittyä
ensimmäinen rivi tuotos.

773
00:37:27,822 --> 00:37:29,530
Ja jos et
ymmärtää se, katsokaa

774
00:37:29,530 --> 00:37:32,480
avainsanoja, jotka saattavat olla
vihjeitä, ja rivinumero,

775
00:37:32,480 --> 00:37:34,650
ja merkin, jossa
että virhe voi olla.

776
00:37:34,650 --> 00:37:40,328
>> Nyt haluan mennä eteenpäin ja kirjoita
piste slash, merkkijono, kirjoita.

777
00:37:40,328 --> 00:37:44,340
Hm, se ei sano hei mitään.

778
00:37:44,340 --> 00:37:46,210
Miksi?

779
00:37:46,210 --> 00:37:48,170
No, muistaa, missä on se käynnissä?

780
00:37:48,170 --> 00:37:53,730
>> Se on luultavasti jumissa tällä hetkellä
silmukan, jos haluatte, on line kuusi,

781
00:37:53,730 --> 00:37:56,950
koska Get String suunnittelun,
kirjoittanut CS50 henkilöstö,

782
00:37:56,950 --> 00:38:00,350
on kirjaimellisesti tarkoitus vain istua
siellä odottamassa, ja odottaa,

783
00:38:00,350 --> 00:38:01,850
ja odottaa merkkijono.

784
00:38:01,850 --> 00:38:03,792
Kaikki me tarkoitamme merkkijono on ihmisen panos.

785
00:38:03,792 --> 00:38:04,500
Joten tiedätkö mitä?

786
00:38:04,500 --> 00:38:05,166
Anna minun mennä eteenpäin.

787
00:38:05,166 --> 00:38:08,704
Ja vain hetken mielijohteesta, haluaisin
kirjoita nimeäni, David, anna.

788
00:38:08,704 --> 00:38:10,120
Nyt minulla on enemmän dynaaminen ohjelma.

789
00:38:10,120 --> 00:38:11,240
Se sanoi, hei David.

790
00:38:11,240 --> 00:38:16,280
>> Jos menen eteenpäin ja suorita tämä uudelleen,
Yritän sanoa Zamila nimen, anna.

791
00:38:16,280 --> 00:38:17,940
Ja nyt meillä on dynaaminen ohjelma.

792
00:38:17,940 --> 00:38:19,380
En ole koodattu maailmaa.

793
00:38:19,380 --> 00:38:21,760
En ole koodattu
nimi, tai David tai Zamila.

794
00:38:21,760 --> 00:38:25,350
>> Nyt se on paljon enemmän kuin ohjelmat
me tiedämme, missä se kestää tulo,

795
00:38:25,350 --> 00:38:27,870
se tuottaa hieman eri tuotos.

796
00:38:27,870 --> 00:38:31,020
Nyt tämä ei ole paras
käyttäjäkokemusta tai UX.

797
00:38:31,020 --> 00:38:33,000
Juoksen ohjelma.

798
00:38:33,000 --> 00:38:35,830
>> En tiedä, mitä minun pitäisi
tehdä, jos en oikeastaan ​​katsoa

799
00:38:35,830 --> 00:38:37,290
tai muistaa lähdekoodia.

800
00:38:37,290 --> 00:38:39,640
Joten tehdä käyttäjän
Koe hieman paremmin

801
00:38:39,640 --> 00:38:41,240
yksinkertaisin asioita.

802
00:38:41,240 --> 00:38:44,782
Anna minun mennä takaisin tähän
ohjelma, ja sanoa yksinkertaisesti printf.

803
00:38:44,782 --> 00:38:48,870
>> Ja anna minun mennä eteenpäin ja sanoa nimi, paksusuoli,
ja välilyönti, ja sitten puolipisteellä.

804
00:38:48,870 --> 00:38:51,170
Ja huvin, ei takaisku n.

805
00:38:51,170 --> 00:38:52,980
Ja se on tahallista,
koska en halua

806
00:38:52,980 --> 00:38:54,590
kehotteen siirtyä seuraavalle riville.

807
00:38:54,590 --> 00:38:58,800
>> Haluan sen sijaan tehdä tämän, tee merkkijono
kääntää minun koodi uuden koneen

808
00:38:58,800 --> 00:39:00,980
koodi piste slash merkkijono.

809
00:39:00,980 --> 00:39:02,460
Ah, tämä on paljon kauniimpi.

810
00:39:02,460 --> 00:39:05,780
Nyt en oikeastaan ​​tiedä mitä tietokone
haluaa minun tekevän, antaa sille nimi.

811
00:39:05,780 --> 00:39:10,020
>> Joten aion mennä eteenpäin ja kirjoita
Rob, kirjoita, ja hei, Rob.

812
00:39:10,020 --> 00:39:13,640
Niin, ymmärtää, tämä on vielä lopussa
Päivän vain yhdeksän linja ohjelmaa.

813
00:39:13,640 --> 00:39:15,090
Mutta olemme ottaneet nämä vauvan askelia.

814
00:39:15,090 --> 00:39:18,380
>> Kirjoitimme yksi rivi, jolla me
olivat tuttuja, printf, Hello World.

815
00:39:18,380 --> 00:39:19,980
Sitten undid hieman siitä.

816
00:39:19,980 --> 00:39:21,560
Ja me todella käytetään get merkkijono.

817
00:39:21,560 --> 00:39:23,362
Ja me heitti että arvon muuttujaan.

818
00:39:23,362 --> 00:39:26,070
Sitten menimme eteenpäin ja parantanut
se edelleen, kolmannella rivillä.

819
00:39:26,070 --> 00:39:29,220
Ja tämä iteratiivinen prosessi
tallennusohjelmistojen on todella avain.

820
00:39:29,220 --> 00:39:33,420
Vuonna CS50, ja elämässä yleensä,
ei yleisesti ottaen tulisi istua alas,

821
00:39:33,420 --> 00:39:36,800
on ohjelma mielessä, ja kokeile kirjoittaminen
koko hemmetin asia kerralla.

822
00:39:36,800 --> 00:39:40,810
>> Se väistämättä johtaa tavalla
enemmän virheitä kuin me itse nähnyt täällä.

823
00:39:40,810 --> 00:39:44,070
Jopa minä, tähän päivään, jatkuvasti
tehdä muita typeriä virheitä,

824
00:39:44,070 --> 00:39:47,480
ovat todella vaikeampaa virheitä
jotka ovat vaikeampi selvittää.

825
00:39:47,480 --> 00:39:52,095
Mutta te tekee enemmän virheitä enemmän
riviä koodia kirjoittaa kaikki kerralla.

826
00:39:52,095 --> 00:39:54,220
Ja niin tämä käytäntö,
kirjoittaa hieman koodia

827
00:39:54,220 --> 00:39:57,930
että olet tyytyväinen, koota
se, ajaa sitä, testata sitä yleisemmin,

828
00:39:57,930 --> 00:40:01,370
siirrä on-- joten aivan kuten me jatkoimme
kerrospukeutuminen ja kerrospukeutuminen viime viikolla,

829
00:40:01,370 --> 00:40:04,190
rakentamassa jotain hyvin
yksinkertaista jotain monimutkaisempi,

830
00:40:04,190 --> 00:40:05,200
tehdä saman täällä.

831
00:40:05,200 --> 00:40:08,500
Älä istu, ja yritä
kirjoittaa koko ongelma.

832
00:40:08,500 --> 00:40:10,780
Oikeastaan ​​ottaa nämä vauvan askelia.

833
00:40:10,780 --> 00:40:15,100
>> Nyt jouset eivät ole kaikki
että hyödyllisiä itselleen.

834
00:40:15,100 --> 00:40:18,210
Olimme itse asiassa, ihannetapauksessa, kuten on
jotain muuta meidän työkalusarja.

835
00:40:18,210 --> 00:40:20,990
Joten itse asiassa juuri siihen.

836
00:40:20,990 --> 00:40:24,900
>> Anna minun mennä eteenpäin nyt ja lietsoa
hieman eri ohjelmaa.

837
00:40:24,900 --> 00:40:28,320
Ja me kutsumme tätä int.c, kokonaisluku.

838
00:40:28,320 --> 00:40:30,870
Aion vastaavasti
kuuluu CS550.h.

839
00:40:30,870 --> 00:40:33,060
Aion vakiovarusteista IO.

840
00:40:33,060 --> 00:40:36,630
Ja se tulee olemaan melko yleisiä
Näiden ensimmäisten päivien luokan.

841
00:40:36,630 --> 00:40:39,050
>> Ja aion valmis
itseni päätehtävä.

842
00:40:39,050 --> 00:40:43,370
Nyt sen sijaan saada merkkijono,
mennään eteenpäin ja saada int.

843
00:40:43,370 --> 00:40:49,285
Kutsutaan sitä i, ja kutsua sitä saada
int, lähellä parens, puolipisteellä.

844
00:40:49,285 --> 00:40:51,410
Ja nyt Tehdään
jotain sen kanssa, printf.

845
00:40:51,410 --> 00:40:56,190
>> Sanotaan jotain
Hei, kenoviiva n, pilkulla i.

846
00:40:56,190 --> 00:41:00,010
Joten olen aika paljon matkii
mitä tein juuri äsken.

847
00:41:00,010 --> 00:41:01,660
Olen paikkamerkki täällä.

848
00:41:01,660 --> 00:41:05,150
Olen pilkku i täällä, koska haluan
kytkeä i tuohon paikkamerkki.

849
00:41:05,150 --> 00:41:07,250
>> Joten mene eteenpäin ja kokeile
koottaessa ohjelma.

850
00:41:07,250 --> 00:41:10,060
Tiedosto on nimeltään int.c.

851
00:41:10,060 --> 00:41:12,920
Joten aion sanoa, tehdä int, kirjoita.

852
00:41:12,920 --> 00:41:16,420
Voi luoja, mutta ei ole iso juttu, eikö?

853
00:41:16,420 --> 00:41:17,230
On virhe.

854
00:41:17,230 --> 00:41:19,810
>> Siellä on syntaktinen virhe
tässä niin, että ohjelma ei voi

855
00:41:19,810 --> 00:41:25,460
koottava sisällä int.c, viiva
seitsemän, merkki 27, virhe formaatti

856
00:41:25,460 --> 00:41:28,400
täsmennetään tyyppi char
tähti, mitä se on.

857
00:41:28,400 --> 00:41:30,020
Mutta väite tyyppi on int.

858
00:41:30,020 --> 00:41:33,110
>> Niin tässäkin emme aio to--
vaikka tänään on paljon materiaalia,

859
00:41:33,110 --> 00:41:35,710
aiomme hukuttaa teitä
ehdottomasti jokainen piirre C,

860
00:41:35,710 --> 00:41:38,070
ja ohjelmointi yleisemmin
vain nämä ensimmäisten viikkojen aikana.

861
00:41:38,070 --> 00:41:40,400
Joten siellä on usein olemaan ammattikieltä
jolla et tunne.

862
00:41:40,400 --> 00:41:43,350
Ja itse asiassa, nieriä tähti on jotain
aiomme palata

863
00:41:43,350 --> 00:41:44,830
viikon tai kahden kuluttua.

864
00:41:44,830 --> 00:41:47,530
>> Mutta nyt, katsotaanpas jos voimme
jäsentää sanoja, jotka ovat tuttuja.

865
00:41:47,530 --> 00:41:50,750
Alustat-- joten kuulimme muoto
specifier, formaatti koodin ennen.

866
00:41:50,750 --> 00:41:51,840
Se on tuttu.

867
00:41:51,840 --> 00:41:53,840
Type-- mutta väite on tyyppiä int.

868
00:41:53,840 --> 00:41:55,980
Hetkinen, i on int.

869
00:41:55,980 --> 00:41:59,230
>> Ehkä prosenttia s oikeastaan
on joitakin määritelty merkitys.

870
00:41:59,230 --> 00:42:00,230
Ja todellakin, se tekee.

871
00:42:00,230 --> 00:42:03,101
Kokonaisluku, jos haluat
printf korvata sitä,

872
00:42:03,101 --> 00:42:05,350
todella on käytettävä
eri muotoon määrittelyksi.

873
00:42:05,350 --> 00:42:06,890
Ja et tiedä tätä
ellei joku määrännyt,

874
00:42:06,890 --> 00:42:07,973
tai olet tehnyt sen ennenkin.

875
00:42:07,973 --> 00:42:10,490
Mutta prosenttia i on mitä
voidaan yleisesti käytetty

876
00:42:10,490 --> 00:42:12,240
Printf varten kytkemällä kokonaisluku.

877
00:42:12,240 --> 00:42:14,920
Voit myös käyttää prosenttia
d desimaalikokonaisluku.

878
00:42:14,920 --> 00:42:16,490
Mutta i on mukava ja yksinkertainen täällä.

879
00:42:16,490 --> 00:42:17,590
Joten mennään sen kanssa.

880
00:42:17,590 --> 00:42:21,160
>> Nyt haluan mennä eteenpäin ja
uusintana make int, Enter.

881
00:42:21,160 --> 00:42:23,328
Se on hyvä, ei virheitä.

882
00:42:23,328 --> 00:42:27,260
Dot slash int-- OK, huono käyttökokemuksen
koska en ole kertonut itse

883
00:42:27,260 --> 00:42:27,760
mitä tehdä.

884
00:42:27,760 --> 00:42:28,426
Mutta se käy hyvin.

885
00:42:28,426 --> 00:42:29,480
Olen kiinni siitä nopeasti.

886
00:42:29,480 --> 00:42:36,260
>> Nyt anna minun mennä eteenpäin ja
Kirjoita David, OK, Zamila, Rob.

887
00:42:36,260 --> 00:42:37,820
OK, joten tämä on hyvä asia.

888
00:42:37,820 --> 00:42:41,710
Tällä kertaa, olen käyttäen toimintoa,
palapelin pala, nimeltään get int.

889
00:42:41,710 --> 00:42:44,230
Ja se osoittautuu out-- ja me
katso tätä myöhemmin term--

890
00:42:44,230 --> 00:42:47,730
CS50 henkilökunta on toteuttanut
saada merkkijono siten

891
00:42:47,730 --> 00:42:50,350
että se vain fyysisesti
saada merkkijono sinulle.

892
00:42:50,350 --> 00:42:54,340
>> Se on toteutettu get int vuonna
siten, että se vain

893
00:42:54,340 --> 00:42:55,590
saada kokonaisluku sinulle.

894
00:42:55,590 --> 00:42:57,830
Ja jos, ihmisen,
eivät tee yhteistyötä, se on

895
00:42:57,830 --> 00:43:00,590
kirjaimellisesti juuri menossa
sano uudelleen, uudelleen, uudelleen,

896
00:43:00,590 --> 00:43:05,200
kirjaimellisesti istuu siellä silmukoiden, kunnes
te velvoittaa joitakin maaginen numero,

897
00:43:05,200 --> 00:43:07,670
kuten 50, ja hei 50.

898
00:43:07,670 --> 00:43:11,440
>> Tai jos me suorita tämä uudelleen
ja kirjoita 42, hei 42.

899
00:43:11,440 --> 00:43:15,750
Ja niin get int toiminto
sisällä että palapelin pala

900
00:43:15,750 --> 00:43:19,050
riittää logiikka, tarpeeksi ajatus,
selvittää, mikä on sana?

901
00:43:19,050 --> 00:43:20,330
Ja mikä on numero?

902
00:43:20,330 --> 00:43:23,165
Vain hyväksymällä lopulta numeroita.

903
00:43:23,165 --> 00:43:25,690

904
00:43:25,690 --> 00:43:30,230
>> Joten käy ilmi, että tämä
ei ole kovin ilmeikäs.

905
00:43:30,230 --> 00:43:30,910
niin kaukana.

906
00:43:30,910 --> 00:43:33,690
Joten, jee, viimeinen kerta
meni melko nopeasti

907
00:43:33,690 --> 00:43:38,320
osaksi täytäntöön pelejä, ja animaatio,
ja taideteosten Scratch.

908
00:43:38,320 --> 00:43:42,260
Ja tässä, me ollaan sisältöä
jossa Hello World, ja hei 50.

909
00:43:42,260 --> 00:43:43,696
>> Se ei ole kaikki, että inspiroiva.

910
00:43:43,696 --> 00:43:46,070
Ja, todellakin, nämä ensimmäiset
esimerkkejä kestää jonkin aikaa

911
00:43:46,070 --> 00:43:47,510
ylösajamiseen jännitystä.

912
00:43:47,510 --> 00:43:49,854
Mutta meillä on niin paljon enemmän
hallita nyt, itse asiassa.

913
00:43:49,854 --> 00:43:51,770
Ja aiomme hyvin
nopeasti aloittaa kerrospukeutuminen

914
00:43:51,770 --> 00:43:53,870
päälle näistä perus perusalkioiden.

915
00:43:53,870 --> 00:43:56,370
>> Mutta ensin on ymmärrettävä
mitä rajoitukset ovat.

916
00:43:56,370 --> 00:43:58,620
Itse asiassa, yksi niistä asioista
Scratch ei helposti

917
00:43:58,620 --> 00:44:00,990
tehkäämme todella näyttää
alla huppu,

918
00:44:00,990 --> 00:44:03,740
ja ymmärtää, mitä
tietokone on, mitä se voi tehdä,

919
00:44:03,740 --> 00:44:05,250
ja mitä sen rajoitukset ovat.

920
00:44:05,250 --> 00:44:08,580
Ja todellakin, että puute
ymmärtämistä, mahdollisesti pitkäaikainen

921
00:44:08,580 --> 00:44:12,520
voi johtaa omia mistakes-- kirjoittaminen
vikoja, kirjallisesti turvaton ohjelmisto,

922
00:44:12,520 --> 00:44:13,880
hakkeroidaan jollakin tavalla.

923
00:44:13,880 --> 00:44:17,130
>> Joten ottamaan askeleita kohti
ymmärrystä tämä vähän paremmin

924
00:44:17,130 --> 00:44:19,710
tapa, sanovat, seuraava esimerkki.

925
00:44:19,710 --> 00:44:23,550
Aion mennä eteenpäin ja toteuttaa
todella nopeasti ohjelma nimeltä lisääjä.

926
00:44:23,550 --> 00:44:25,134
Kuten, nyt lisätä joitakin numeroita yhteen.

927
00:44:25,134 --> 00:44:27,800
Ja aion koodata joitakin kulmat
täällä, ja kopioi ja liitä

928
00:44:27,800 --> 00:44:30,270
jossa olin ennen, vain
jotta voimme lähteä aikaisemmin.

929
00:44:30,270 --> 00:44:33,090
Nyt olen saanut perus alkuja
ohjelma nimeltä lisääjä.

930
00:44:33,090 --> 00:44:34,670
>> Ja mennään eteenpäin ja tehdä tätä.

931
00:44:34,670 --> 00:44:38,680
Aion mennä eteenpäin ja
vaikkapa intx saa päästä int.

932
00:44:38,680 --> 00:44:39,430
Ja tiedätkö mitä?

933
00:44:39,430 --> 00:44:40,990
Tehdään paremman käyttökokemuksen.

934
00:44:40,990 --> 00:44:45,740
>> Joten sanotaan että x on, ja tehokkaasti
kehottaa käyttäjää antamaan meille x.

935
00:44:45,740 --> 00:44:50,600
Ja anna minun mennä eteenpäin ja sanoa, printf
miten y on, tällä kertaa odottaa

936
00:44:50,600 --> 00:44:53,140
kaksi arvoa käyttäjältä.

937
00:44:53,140 --> 00:44:59,759
Ja sitten mennään vain eteenpäin ja
esimerkiksi printf, summa x ja y on.

938
00:44:59,759 --> 00:45:01,300
Ja nyt en halua tehdä prosenttiin s.

939
00:45:01,300 --> 00:45:09,080
Haluan tehdä prosenttiin i, kenoviiva
n, ja sitten kytke summa-arvoon.

940
00:45:09,080 --> 00:45:10,620
>> Joten miten voin edetä tässä?

941
00:45:10,620 --> 00:45:11,270
Tiedätkö mitä?

942
00:45:11,270 --> 00:45:12,840
En osaa käyttää muuttujia.

943
00:45:12,840 --> 00:45:15,140
Saanen ilmoittaa uuden, int z.

944
00:45:15,140 --> 00:45:16,770
>> Ja aion yrittää arvata täällä.

945
00:45:16,770 --> 00:45:21,470
Jos on yhtäsuuruusmerkit tässä
kieli, ehkä voin vain tehdä x plus y,

946
00:45:21,470 --> 00:45:23,660
kunhan päätän
ajatteli puolipistettä?

947
00:45:23,660 --> 00:45:28,170
Nyt voin palata tänne, kytke z,
lopettaa tämän ajatuksen kanssa puolipisteellä.

948
00:45:28,170 --> 00:45:33,160
Ja katsotaan nyt, jos nämä
sekvenssit lines-- x on saada int.

949
00:45:33,160 --> 00:45:34,770
Y on saada int.

950
00:45:34,770 --> 00:45:37,980
>> Lisää x ja y, säilytä arvoa z--
niin, taas, muista yhtäläisyysmerkki

951
00:45:37,980 --> 00:45:38,560
ei ole yhtä suuri.

952
00:45:38,560 --> 00:45:41,100
Se toimeksianto oikealta vasemmalle.

953
00:45:41,100 --> 00:45:45,180
Ja nyt tulostaa että summa
x ja y eivät ole kirjaimellisesti z,

954
00:45:45,180 --> 00:45:46,830
mutta mitä sisällä z.

955
00:45:46,830 --> 00:45:50,090
Joten tehdä Adder -
mukava, ei virheitä tällä kertaa.

956
00:45:50,090 --> 00:45:53,030
Dot slash Adder, kirjoita,
x tulee olemaan 1.

957
00:45:53,030 --> 00:45:55,380
>> Y tulee olemaan 2.

958
00:45:55,380 --> 00:45:58,964
Ja summa x ja y on 3.

959
00:45:58,964 --> 00:46:00,130
Niin, että kaikki hyvä ja hieno.

960
00:46:00,130 --> 00:46:03,260
>> Voisi siis kuvitella, että matematiikka
pitäisi toimia tällaisen ohjelman.

961
00:46:03,260 --> 00:46:04,040
Mutta tiedätkö mitä?

962
00:46:04,040 --> 00:46:06,904
Onko tämä muuttuja, viiva
12, jopa välttämätöntä?

963
00:46:06,904 --> 00:46:09,820
Sinun ei tarvitse saada tapana
vain tallentamiseen asioita muuttujien

964
00:46:09,820 --> 00:46:10,980
vain koska voit.

965
00:46:10,980 --> 00:46:13,550
Ja itse asiassa, se on yleensä
harkittu huono suunnittelu

966
00:46:13,550 --> 00:46:18,100
jos olet luomassa muuttuja, nimeltään
z tässä tapauksessa, säilytykseen jotain se,

967
00:46:18,100 --> 00:46:21,390
ja sitten heti
käyttää sitä, mutta ei koskaan enää.

968
00:46:21,390 --> 00:46:24,700
Miksi antaa jotakin nimi
kuten z jos olet kirjaimellisesti

969
00:46:24,700 --> 00:46:26,770
aio käyttää, että
asia vain kerran, ja niin

970
00:46:26,770 --> 00:46:29,380
proksimaalisesti jossa loit
se ensimmäinen paikka,

971
00:46:29,380 --> 00:46:31,052
niin lähellä suhteen riviä koodia?

972
00:46:31,052 --> 00:46:31,760
Joten tiedätkö mitä?

973
00:46:31,760 --> 00:46:34,480
On käynyt ilmi, että C on melko joustava.

974
00:46:34,480 --> 00:46:36,586
Jos minä todella haluavat
plug-in-arvojen täällä,

975
00:46:36,586 --> 00:46:38,210
En tarvitse julistaa uusi muuttuja.

976
00:46:38,210 --> 00:46:41,680
Voisin plug-in x plus
y, koska C ymmärtää

977
00:46:41,680 --> 00:46:43,390
aritmeettinen ja matemaattisia operaattoreita.

978
00:46:43,390 --> 00:46:47,140
>> Voin siis vain sanoa, tehdä tämän matematiikka,
x plus y riippumatta nämä arvot ovat,

979
00:46:47,140 --> 00:46:50,780
plug tuloksena
kokonaisluvun merkkijono.

980
00:46:50,780 --> 00:46:53,730
Joten tämä voisi olla, vaikka
vain yksi rivi lyhyempi,

981
00:46:53,730 --> 00:46:58,480
parempi suunnittelu, parempaa ohjelmaa,
koska siellä on vähemmän koodia, siis

982
00:46:58,480 --> 00:46:59,921
vähemmän minua ymmärtämään.

983
00:46:59,921 --> 00:47:01,920
Ja se on myös juuri siivooja,
sikäli kuin emme ole

984
00:47:01,920 --> 00:47:04,620
käyttöön uusia sanoja,
uusia symboleja, kuten z,

985
00:47:04,620 --> 00:47:07,510
vaikka ne eivät oikeastaan
palvella paljon tarkoitusta.

986
00:47:07,510 --> 00:47:12,890
>> Valitettavasti matematiikka ei ole
kaikki luotettavia joskus.

987
00:47:12,890 --> 00:47:15,270
Mennään eteenpäin ja tehdä tätä.

988
00:47:15,270 --> 00:47:18,200
Aion mennä eteenpäin
nyt ja toimi seuraavasti.

989
00:47:18,200 --> 00:47:27,650
>> Tehdään printf, prosenttia i, plus prosenttia
i, on oltava prosenttia i, kenoviiva n.

990
00:47:27,650 --> 00:47:32,240
Ja aion tehdä this-- xyx plus y.

991
00:47:32,240 --> 00:47:34,821
Joten olen juuri menossa kirjoittaa
Tässä hieman eri täällä.

992
00:47:34,821 --> 00:47:36,320
Saanen tehdä nopeasti järki tarkistaa.

993
00:47:36,320 --> 00:47:37,986
Jälleen älkäämme päästä eteenpäin itsestämme.

994
00:47:37,986 --> 00:47:41,420
Tee lisätoiminto, piste slash lisätoiminto.

995
00:47:41,420 --> 00:47:44,950
x on 1, y on 2, 1 ja 2 on 3.

996
00:47:44,950 --> 00:47:45,870
Niin se on hyvä.

997
00:47:45,870 --> 00:47:49,060
Mutta katsotaanpa mutkistaa tätä nyt
hieman, ja luo uuden tiedoston.

998
00:47:49,060 --> 00:47:53,350
>> Aion kutsua tätä,
sanovat, ints, monikko kokonaislukuja.

999
00:47:53,350 --> 00:47:55,980
Aloitan jossa olin hetki sitten.

1000
00:47:55,980 --> 00:47:57,770
Mutta nyt tehkäämme muutamia muita rivejä.

1001
00:47:57,770 --> 00:48:03,430
Anna minun mennä eteenpäin ja tehdä seuraava,
printf, prosenttia i miinus prosenttia i,

1002
00:48:03,430 --> 00:48:08,959
on prosentti i, pilkku x, pilkku yx miinus y.

1003
00:48:08,959 --> 00:48:10,750
Joten teen hieman
eri matematiikka siellä.

1004
00:48:10,750 --> 00:48:11,624
Tehdään toinen.

1005
00:48:11,624 --> 00:48:16,610
Joten prosenttia i kertaa prosenttiin
i on prosentti i, kenoviiva n.

1006
00:48:16,610 --> 00:48:21,430
Katsotaan plug-in x ja y ja x kertaa y.

1007
00:48:21,430 --> 00:48:24,530
Käytämme tähtimerkkiä
tietokoneen kertaa.

1008
00:48:24,530 --> 00:48:26,390
>> Et käytä x. x on
muuttujan nimi.

1009
00:48:26,390 --> 00:48:28,270
Käytät tähti kertolasku.

1010
00:48:28,270 --> 00:48:29,020
Tehdään yksi.

1011
00:48:29,020 --> 00:48:34,580
Printf prosenttia I jaettuna
by prosenttia i, on prosentti i,

1012
00:48:34,580 --> 00:48:40,460
backslash n. xy jaettuna y--
joten käytät vinoviivan C

1013
00:48:40,460 --> 00:48:41,502
tehdä jako.

1014
00:48:41,502 --> 00:48:42,460
Ja Tehdään yksi muu.

1015
00:48:42,460 --> 00:48:47,920

1016
00:48:47,920 --> 00:48:55,240
Loput prosenttia i, jakautuu
by prosenttia i, on prosenttia i.

1017
00:48:55,240 --> 00:48:59,550
xy-- ja nyt jäljellä
on mitä on jäljellä.

1018
00:48:59,550 --> 00:49:02,980
Kun yrität jakamalla
nimittäjä osaksi osoittaja,

1019
00:49:02,980 --> 00:49:05,570
kuinka paljon on jäljellä, että
et voisi jakaa ulos?

1020
00:49:05,570 --> 00:49:07,910
>> Joten ei ole oikeastaan,
väistämättä, symboli

1021
00:49:07,910 --> 00:49:09,470
olemme käyttäneet asteella tätä.

1022
00:49:09,470 --> 00:49:13,830
Mutta C. Voit
sanoa x modulo y, jossa

1023
00:49:13,830 --> 00:49:18,000
Tämän prosenttimerkkiä tässä context--
erehdyttävästi kun olet sisällä

1024
00:49:18,000 --> 00:49:20,170
kaksinkertaisen lainausmerkkejä,
sisällä printf, prosenttia

1025
00:49:20,170 --> 00:49:21,830
käytetään muodossa määrittelyksi.

1026
00:49:21,830 --> 00:49:25,420
>> Kun käytät prosenttia ulkopuolella
että matemaattinen lauseke,

1027
00:49:25,420 --> 00:49:29,910
se on modulo operaattori modulaarinen
arithmetic-- meidän tarkoituksiin

1028
00:49:29,910 --> 00:49:33,650
täällä, vain tarkoittaa, mikä on
Loput x jaettuna y?

1029
00:49:33,650 --> 00:49:36,130
Joten x jaettuna y on x slash y.

1030
00:49:36,130 --> 00:49:38,220
Mikä jäljellä x jaettuna y?

1031
00:49:38,220 --> 00:49:41,780
Se x mod y, ohjelmoijana sanoisi.

1032
00:49:41,780 --> 00:49:48,300
>> Jos siis tehnyt virheitä täällä, haluan
mennä eteenpäin ja tehdä ints, monikossa, mukava,

1033
00:49:48,300 --> 00:49:50,010
ja piste slash ints.

1034
00:49:50,010 --> 00:49:55,270
Ja mennään eteenpäin ja
do, sanokaamme, 1, 10.

1035
00:49:55,270 --> 00:49:58,390
Selvä, 1 plus 10 on 11, check.

1036
00:49:58,390 --> 00:50:01,240
1 miinus 10 on negatiivinen 9, tarkista.

1037
00:50:01,240 --> 00:50:03,420
>> 1 kertaa 10 on 10, check.

1038
00:50:03,420 --> 00:50:07,090
1 jaettuna 10 is--
OK, me ohittaa tämän yhden.

1039
00:50:07,090 --> 00:50:09,480
Loput 1 jaettuna 10 on 1.

1040
00:50:09,480 --> 00:50:10,680
Pitää paikkansa.

1041
00:50:10,680 --> 00:50:12,630
Mutta on vika täällä.

1042
00:50:12,630 --> 00:50:15,390
>> Joten yksi esitin
luovuttaa, ei ole oikein.

1043
00:50:15,390 --> 00:50:16,670
Siis, se on lähellä 0.

1044
00:50:16,670 --> 00:50:20,670
1 jaettuna 10, tiedätte, jos olemme
vähentämiseksi noin kulmat, varma, se on nolla.

1045
00:50:20,670 --> 00:50:28,050
Mutta se pitäisi oikeastaan ​​olla 1/10,
0,1 tai 0,10, 0,1000, tai niin edelleen.

1046
00:50:28,050 --> 00:50:30,600
>> Sen ei pitäisi oikeastaan ​​olla nolla.

1047
00:50:30,600 --> 00:50:35,990
No, käy ilmi, että tietokone on
tekemällä kirjaimellisesti mitä kerroimme sitä tekemään.

1048
00:50:35,990 --> 00:50:39,460
Teemme matematiikka kuten x jaettuna y.

1049
00:50:39,460 --> 00:50:44,680
Ja sekä x ja y, per linjat
koodia aikaisemmin, ovat kokonaislukuja.

1050
00:50:44,680 --> 00:50:50,440
>> Lisäksi linjalla 15, olemme
kertoo printf, hei, printf plug-in

1051
00:50:50,440 --> 00:50:54,230
kokonaisluku, plug-in kokonaisluku,
plug-käytettäessä integer-- nimenomaan

1052
00:50:54,230 --> 00:50:57,580
x ja sitten y, ja niin x
jaettuna y. x ja y ovat ints.

1053
00:50:57,580 --> 00:50:59,060
Olemme hyvä siellä.

1054
00:50:59,060 --> 00:51:01,250
>> Mutta mitä on x jaetaan x?

1055
00:51:01,250 --> 00:51:06,790
x jaettuna y pitäisi olla,
matemaattisesti, 1/10 tai 0,1,

1056
00:51:06,790 --> 00:51:11,600
joka on reaaliluku, reaaliluku
ottaa mahdollisesti desimaalipisteen.

1057
00:51:11,600 --> 00:51:13,230
Se ei ole kokonaisluku.

1058
00:51:13,230 --> 00:51:18,290
>> Mutta mikä on lähin
kokonaisluvun 1/10 eli 0,1?

1059
00:51:18,290 --> 00:51:21,114
Joo, se tavallaan on nolla.

1060
00:51:21,114 --> 00:51:22,030
0.1 on näin paljon.

1061
00:51:22,030 --> 00:51:22,890
Ja 1 on näin paljon.

1062
00:51:22,890 --> 00:51:25,870
Joten 1/10 on lähempänä
0 kuin se on yksi.

1063
00:51:25,870 --> 00:51:30,800
>> Ja mitä sitten C on tekemässä us--
Tällainen koska kerroimme se to--

1064
00:51:30,800 --> 00:51:32,600
on lyhennetty, että kokonaisluku.

1065
00:51:32,600 --> 00:51:40,540
Se ottaa arvon, joka taas on
tarkoitus olla jotain 0,1000,

1066
00:51:40,540 --> 00:51:41,800
0 ja niin edelleen.

1067
00:51:41,800 --> 00:51:45,320
Ja se katkaisemiseksi kaiken
desimaalipisteen jälkeen

1068
00:51:45,320 --> 00:51:47,510
siten, että kaikki tämän
tavaraa, koska se ei

1069
00:51:47,510 --> 00:51:51,910
sovi käsite kokonaisluku, joka
on vain numero kuin negatiivinen 1, 0, 1,

1070
00:51:51,910 --> 00:51:55,830
ylös ja alas, se heittää pois kaiken
desimaalipisteen jälkeen, koska olet

1071
00:51:55,830 --> 00:51:59,020
ei mahdu desimaalipisteen
in kokonaisluku määritelmän.

1072
00:51:59,020 --> 00:52:01,290
>> Joten vastaus tässä on nolla.

1073
00:52:01,290 --> 00:52:02,600
Miten siis korjata?

1074
00:52:02,600 --> 00:52:04,400
Me tarvitsemme toinen ratkaisu kaikki yhdessä.

1075
00:52:04,400 --> 00:52:06,880
Ja voimme tehdä tämän seuraavasti.

1076
00:52:06,880 --> 00:52:12,820
>> Anna minun mennä eteenpäin ja luoda uusi
tiedosto, tämä yksi nimeltään floats.c.

1077
00:52:12,820 --> 00:52:16,500
Ja tallenna se täällä
samaan hakemistoon, float.c.

1078
00:52:16,500 --> 00:52:19,360

1079
00:52:19,360 --> 00:52:23,260
Ja anna minun mennä eteenpäin ja kopioi
joitakin että koodia aikaisemmin.

1080
00:52:23,260 --> 00:52:27,690
>> Mutta sen sijaan saada
int, tehdään tämä.

1081
00:52:27,690 --> 00:52:31,037
Anna minulle liukulukuarvoksi
nimeltään x. jossa liukuluku

1082
00:52:31,037 --> 00:52:33,370
arvo on vain kirjaimellisesti
jotain liukuvan pilkun.

1083
00:52:33,370 --> 00:52:34,410
Se voi liikkua vasemmalle, oikealle.

1084
00:52:34,410 --> 00:52:35,530
Se on todellinen numero.

1085
00:52:35,530 --> 00:52:38,050
>> Ja Soitan ei
saada int, mutta saada kellua,

1086
00:52:38,050 --> 00:52:41,420
joka myös oli yksi valikko
annetuista vaihtoehdoista C250 kirjastossa.

1087
00:52:41,420 --> 00:52:43,220
Vaihdetaan y käteisvaroja.

1088
00:52:43,220 --> 00:52:45,000
Joten tämä tulee saada kellua.

1089
00:52:45,000 --> 00:52:47,620
>> Ja nyt, emme halua kytkeä ints.

1090
00:52:47,620 --> 00:52:53,130
On käynyt ilmi, meidän on käytettävä prosenttiin
f float, prosenttia f float,

1091
00:52:53,130 --> 00:52:54,560
ja nyt tallentaa sen.

1092
00:52:54,560 --> 00:53:01,220
Ja nyt, sormet ristissä, tee
kellukkeet, mukava, piste slash kelluu.

1093
00:53:01,220 --> 00:53:04,280
x tulee olemaan yksi 1. y
Tulee olemaan 10 uudelleen.

1094
00:53:04,280 --> 00:53:08,240
>> Ja kiva, OK minun lisäksi on oikea.

1095
00:53:08,240 --> 00:53:10,240
Toivoin enemmän,
mutta unohdin kirjoittaa sitä.

1096
00:53:10,240 --> 00:53:13,250
Joten mennään ja korjata looginen virhe.

1097
00:53:13,250 --> 00:53:16,280
>> Mennään eteenpäin ja napata seuraavaa.

1098
00:53:16,280 --> 00:53:18,080
Me vain tehdä vähän kopioi ja liitä.

1099
00:53:18,080 --> 00:53:20,080
Ja aion sanoa miinus.

1100
00:53:20,080 --> 00:53:21,890
>> Ja aion sanoa kertaa.

1101
00:53:21,890 --> 00:53:24,060
Ja aion sanoa jaettu.

1102
00:53:24,060 --> 00:53:28,240
Ja en aio tehdä modulo,
joka ei ole yhtä germane tässä,

1103
00:53:28,240 --> 00:53:33,690
jaettuna f, ja ajat plus--
OK, tehdään tämä uudestaan.

1104
00:53:33,690 --> 00:53:44,210
>> Tee kellukkeet, piste slash kellukkeet,
ja 1, 10, and-- mukava, no, OK.

1105
00:53:44,210 --> 00:53:45,250
Joten olen idiootti.

1106
00:53:45,250 --> 00:53:47,000
Joten tämä on hyvin yleinen
tietotekniikassa

1107
00:53:47,000 --> 00:53:49,780
tehdä typeriä virheitä näin.

1108
00:53:49,780 --> 00:53:53,100
>> Opetuksellisia tarkoituksia varten,
mitä halusin tehdä

1109
00:53:53,100 --> 00:53:57,410
oli muuttaa tiedettä täällä
plus, miinus, että ajat,

1110
00:53:57,410 --> 00:54:01,140
ja jakaa, kun toivottavasti
huomanneet tämän harjoituksen aikana.

1111
00:54:01,140 --> 00:54:04,700
Nyt Katsotaanpa uudelleen kokoaa
ohjelma, tehdä piste slash kelluu.

1112
00:54:04,700 --> 00:54:07,950
>> Ja kolmannen kerran, nyt
katso jos se täyttää odotukseni.

1113
00:54:07,950 --> 00:54:21,480
1, 10, kirjoita, kyllä, OK, 1.000,
jaettuna 10.000, on 0,100000.

1114
00:54:21,480 --> 00:54:24,952
Ja se osoittautuu voimme valvoa, kuinka monta
numerot ovat sen jälkeen ne desimaaliin.

1115
00:54:24,952 --> 00:54:25,660
Me itse asiassa tulee.

1116
00:54:25,660 --> 00:54:26,790
Palaamme tähän.

1117
00:54:26,790 --> 00:54:28,440
>> Mutta nyt, itse asiassa, matematiikka on oikea.

1118
00:54:28,440 --> 00:54:30,090
Joten, jälleen, mikä on takeaway täällä?

1119
00:54:30,090 --> 00:54:33,050
On käynyt ilmi, että C, on
ei vain pelkästään strings-- ja, itse asiassa,

1120
00:54:33,050 --> 00:54:36,120
ei ole oikeastaan, koska me
lisätä ne kanssa CS50 kirjasto.

1121
00:54:36,120 --> 00:54:37,710
Mutta ei ole vain ints.

1122
00:54:37,710 --> 00:54:38,990
>> On myös kelluu.

1123
00:54:38,990 --> 00:54:42,810
Ja se osoittautuu joukko muita tietoja
tyyppejä myös, että käytämme ennen pitkää.

1124
00:54:42,810 --> 00:54:46,270
Osoittautuu, jos haluat yhden
merkki, ei merkkijono,

1125
00:54:46,270 --> 00:54:47,610
voit käyttää vain char.

1126
00:54:47,610 --> 00:54:52,350
>> Osoittautuu, että jos haluat bool,
looginen arvo, tosi tai epätosi vain,

1127
00:54:52,350 --> 00:54:56,840
kiitos CS50 kirjasto, olemme
lisätään C BOOL tietotyyppi samoin.

1128
00:54:56,840 --> 00:54:59,180
Mutta se myös esittää vuonna
monia muita kieliä samoin.

1129
00:54:59,180 --> 00:55:04,130
Ja käy ilmi, että joskus
tarvitsee suurempia numeroita sitten tulevat oletuksena

1130
00:55:04,130 --> 00:55:05,210
jossa ints ja kelluu.

1131
00:55:05,210 --> 00:55:10,590
>> Ja itse asiassa, kaksinkertainen on useita
joka käyttää ei 32 bittiä, mutta 64 bittiä.

1132
00:55:10,590 --> 00:55:14,990
Ja pitkään pitkään on numero,
käyttää ei 32 bittiä mutta 64 bittiä,

1133
00:55:14,990 --> 00:55:19,190
vastaavasti, liukuluku
arvot ja kokonaislukuja, vastaavasti.

1134
00:55:19,190 --> 00:55:22,780
Joten itse asiassa nyt
tutustua tähän toimintoon.

1135
00:55:22,780 --> 00:55:26,150
>> Aion mennä eteenpäin tässä
ja lietsoa yksi muu ohjelma.

1136
00:55:26,150 --> 00:55:32,020
Täällä, aion mennä eteenpäin
ja sisällyttävät CS50.h.

1137
00:55:32,020 --> 00:55:34,910
Ja anna minun mennä, ovat standardin IO.h.

1138
00:55:34,910 --> 00:55:37,320
>> Ja huomaat jotain
funky täällä tapahtuu.

1139
00:55:37,320 --> 00:55:40,592
Se ei ole värikoodeja asioita
samoin kuin ennen.

1140
00:55:40,592 --> 00:55:43,550
Ja on käynyt ilmi, että koska minä
eivät ole antaneet asia tiedostonimen.

1141
00:55:43,550 --> 00:55:47,270
>> Aion kutsua tätä yksi
sizeof.c, ja valitse Tallenna.

1142
00:55:47,270 --> 00:55:51,039
Ja huomaa, mitä tapahtuu, hyvin
valkoinen koodia vastaan ​​mustaa taustaa.

1143
00:55:51,039 --> 00:55:52,830
Nyt ainakin siellä
purppuramaisen siellä.

1144
00:55:52,830 --> 00:55:54,490
Ja se on syntaksi korostettu.

1145
00:55:54,490 --> 00:55:57,700
>> Tämä johtuu yksinkertaisesti, olen
kertoi IDE minkälainen tiedosto

1146
00:55:57,700 --> 00:56:01,060
se on antamalla sille nimi, ja
erityisesti tiedostopääte.

1147
00:56:01,060 --> 00:56:03,620
Nyt mennään eteenpäin ja tehdä tätä.

1148
00:56:03,620 --> 00:56:08,910
Aion mennä eteenpäin ja hyvin
yksinkertaisesti tulostaa following-- bool

1149
00:56:08,910 --> 00:56:11,080
on prosenttia LU.

1150
00:56:11,080 --> 00:56:12,950
>> Tulemme takaisin
että vain hetken.

1151
00:56:12,950 --> 00:56:15,840
Ja sitten aion
tulostuskoon bool.

1152
00:56:15,840 --> 00:56:18,170
Ja nyt, vain säästää
itse jonkin aikaa, olen

1153
00:56:18,170 --> 00:56:20,280
aikoo tehdä koko
joukko näistä kerralla.

1154
00:56:20,280 --> 00:56:24,620
Ja erityisesti, aion
vaihtaa tämän char ja char.

1155
00:56:24,620 --> 00:56:27,760
Tämä yksi, aion muuttaa
kaksinkertainen ja kaksinkertainen.

1156
00:56:27,760 --> 00:56:31,440
>> Tämä yksi, aion muuttaa
kelluvaan ja kellua.

1157
00:56:31,440 --> 00:56:35,670
Tämä yksi, aion
muuttuvat int ja int.

1158
00:56:35,670 --> 00:56:38,660
Ja tämä, aion
vaihtaa pitkään pitkään.

1159
00:56:38,660 --> 00:56:40,840
Ja se on edelleen ottaen
pitkään, pitkään pitkään.

1160
00:56:40,840 --> 00:56:44,572
>> Ja sitten lopuksi annoin
itse liikaa, merkkijono.

1161
00:56:44,572 --> 00:56:47,030
On käynyt ilmi, että C, siellä
erityinen operaattori nimeltään

1162
00:56:47,030 --> 00:56:50,260
koko se kirjaimellisesti
menossa, kun ajaa,

1163
00:56:50,260 --> 00:56:52,099
Kerro meille kokoa
jokainen näistä muuttujista.

1164
00:56:52,099 --> 00:56:53,890
Ja tämä on tapa, nyt,
voimme liittää takaisin

1165
00:56:53,890 --> 00:56:57,140
viime viikon keskustelu
Tietojen ja edustus.

1166
00:56:57,140 --> 00:57:00,330
>> Anna minun mennä eteenpäin ja koota
koko piste slash koko.

1167
00:57:00,330 --> 00:57:01,210
Ja katsotaan.

1168
00:57:01,210 --> 00:57:05,210
On käynyt ilmi, että C,
nimenomaan CS50 IDE,

1169
00:57:05,210 --> 00:57:08,170
nimenomaan
käyttöjärjestelmä Ubuntu,

1170
00:57:08,170 --> 00:57:11,100
joka on 64-bittinen käyttöjärjestelmä
järjestelmä tässä tapauksessa,

1171
00:57:11,100 --> 00:57:14,189
bool on menossa
käyttää yhden tavun tilaa.

1172
00:57:14,189 --> 00:57:16,480
Niin koko mitataan,
ei bittiä, mutta tavuina.

1173
00:57:16,480 --> 00:57:18,690
Ja muistaa, että yksi tavu on kahdeksan bittiä.

1174
00:57:18,690 --> 00:57:22,030
Joten bool, vaikka
Teknisesti tarvitaan vain 0 tai 1,

1175
00:57:22,030 --> 00:57:24,092
se on hieman tuhlaileva
miten me lisännyt sen.

1176
00:57:24,092 --> 00:57:26,800
Se todella tulee käyttää koko
byte-- niin kaikki nollia, ovat ehkä

1177
00:57:26,800 --> 00:57:31,050
kaikki ne, tai jotain sellaista,
tai vain yksi 1 joukossa kahdeksan bittiä.

1178
00:57:31,050 --> 00:57:34,962
>> Char puolestaan ​​käytetään hahmo
kuten ASCII per viime viikolla,

1179
00:57:34,962 --> 00:57:36,170
tulee olemaan yksi merkki.

1180
00:57:36,170 --> 00:57:42,340
Ja että synchs kanssa käsityksemme
se on enintään 256 bits-- pikemminkin

1181
00:57:42,340 --> 00:57:45,360
synchs sen kanssa yhteydessä ole
pidempi kuin 8 bittiä, joka

1182
00:57:45,360 --> 00:57:47,450
antaa meille jopa 256 arvoa.

1183
00:57:47,450 --> 00:57:49,680
Kaksinkertainen on menossa
olla 8 tavua tai 64 bittiä.

1184
00:57:49,680 --> 00:57:50,510
>> Koho on 4.

1185
00:57:50,510 --> 00:57:51,690
Int on 4.

1186
00:57:51,690 --> 00:57:52,980
Pitkä, pitkä on 8.

1187
00:57:52,980 --> 00:57:54,716
Ja merkkijono on 8.

1188
00:57:54,716 --> 00:57:55,840
Mutta älä huoli siitä.

1189
00:57:55,840 --> 00:57:57,340
Aiomme kuoria takaisin, että kerros.

1190
00:57:57,340 --> 00:57:59,940
On käynyt ilmi, jouset voi
olla pidempi kuin 8 tavua.

1191
00:57:59,940 --> 00:58:02,310
>> Ja todellakin, olemme kirjoittaneet
jouset jo, Hello World,

1192
00:58:02,310 --> 00:58:03,700
yli 8 tavua.

1193
00:58:03,700 --> 00:58:06,270
Mutta me palaamme
että vain hetken.

1194
00:58:06,270 --> 00:58:09,690
Mutta take pois tässä on seuraava.

1195
00:58:09,690 --> 00:58:15,320
>> Mikä tahansa tietokone on vain rajallinen
muistin määrän ja tilaa.

1196
00:58:15,320 --> 00:58:17,860
Voit tallentaa vain niin paljon
tiedostoja Macin tai PC.

1197
00:58:17,860 --> 00:58:23,030
Voit tallentaa vain niin paljon ohjelmia
RAM käynnissä kerralla, välttämättä edes

1198
00:58:23,030 --> 00:58:26,360
virtuaalinen muisti, koska
sinulla on rajallinen määrä muistia.

1199
00:58:26,360 --> 00:58:28,990
>> Ja vain picture-- jos
et ole koskaan avannut kannettavan

1200
00:58:28,990 --> 00:58:31,300
tai tilata lisää muistia
for tietokonetta,

1201
00:58:31,300 --> 00:58:33,670
ehkä tiedä, että
tietokoneesi sisälle

1202
00:58:33,670 --> 00:58:36,590
on jotain, joka näyttää
vähän kuin tämä.

1203
00:58:36,590 --> 00:58:40,540
Joten tämä on vain yleinen yhtiö nimeltä
Ratkaisevaa joka tekee RAM tietokoneita.

1204
00:58:40,540 --> 00:58:43,620
Ja RAM on jossa ohjelmat
elävät, kun he käynnissä.

1205
00:58:43,620 --> 00:58:46,630
>> Joten jokaisen Mac- tai PC, kun kaksinkertainen
valitse ohjelma, ja se avautuu,

1206
00:58:46,630 --> 00:58:48,921
ja se avaa joitakin Word-dokumentti
Tai jotain sellaista,

1207
00:58:48,921 --> 00:58:51,764
se varastoi väliaikaisesti
RAM, koska RAM on nopeampi

1208
00:58:51,764 --> 00:58:53,680
kuin kovalevyllä, tai
SSD-levy.

1209
00:58:53,680 --> 00:58:56,600
Joten se on vain jos ohjelmia mennä
elää kun he käynnissä,

1210
00:58:56,600 --> 00:58:58,060
tai kun tiedostoja käytetään.

1211
00:58:58,060 --> 00:59:00,890
>> Joten sinulla on asioita, jotka näyttävät
näin sisällä kannettavan tietokoneen,

1212
00:59:00,890 --> 00:59:03,320
tai hieman suurempi asioita
sisällä työpöydän.

1213
00:59:03,320 --> 00:59:07,440
Mutta avain on sinulla on vain
rajallinen määrä näistä asioista.

1214
00:59:07,440 --> 00:59:11,230
Ja on vain rajallinen määrä
laitteisto istuu tällä työpöytä oikealla

1215
00:59:11,230 --> 00:59:11,730
tässä.

1216
00:59:11,730 --> 00:59:15,920
>> Joten, varmasti, emme voi varastoida
äärettömän pitkä numeroita.

1217
00:59:15,920 --> 00:59:19,030
Ja vielä, jos luulet takaisin
asteella, kuinka monta numeroa voi

1218
00:59:19,030 --> 00:59:21,400
sinun on oikea
of desimaalipilkkua?

1219
00:59:21,400 --> 00:59:24,680
Tästä asiasta, kuinka monta numeroa voi
olet vasemmalla desimaalipilkkua?

1220
00:59:24,680 --> 00:59:26,300
Todella, äärettömän monta.

1221
00:59:26,300 --> 00:59:30,840
>> Nyt me ihmiset ehkä vain
osaavat lausua miljoonaan,

1222
00:59:30,840 --> 00:59:34,990
ja miljardia biljoonaa, ja
Kvadriljoona, ja quintillion.

1223
00:59:34,990 --> 00:59:39,370
Ja olen Loitonnetaan minun
understanding-- tai my-- ymmärrän

1224
00:59:39,370 --> 00:59:41,110
numeroita, mutta minun
ääntäminen numeroita.

1225
00:59:41,110 --> 00:59:44,720
Mutta he voivat saada äärettömän suuri kanssa
äärettömän monta numeroa vasemmalle

1226
00:59:44,720 --> 00:59:47,050
tai oikealla desimaalipilkkua.

1227
00:59:47,050 --> 00:59:50,040
>> Mutta tietokoneissa on vain
rajallinen määrä muistia,

1228
00:59:50,040 --> 00:59:53,510
äärellinen määrä transistoreita, joka on
rajallinen määrä lamppujen sisälle.

1229
00:59:53,510 --> 00:59:57,350
Mitä tapahtuu, kun
olet tila loppuu?

1230
00:59:57,350 --> 00:59:59,620
Toisin sanoen, jos
muistelen viime viikolla

1231
00:59:59,620 --> 01:00:03,160
Kun puhuimme numeroita
itse edustaa binary,

1232
01:00:03,160 --> 01:00:05,480
Oletetaan, että meillä
Tämä 8-bittinen arvo täällä.

1233
01:00:05,480 --> 01:00:08,290
>> Ja meillä on seitsemän 1: n ja yhden 0.

1234
01:00:08,290 --> 01:00:10,827
Ja oletetaan, että haluamme
Lisää 1 tähän arvoon.

1235
01:00:10,827 --> 01:00:12,410
Tämä on todella suuri määrä nyt.

1236
01:00:12,410 --> 01:00:16,610
>> Tämä on 254, jos muistan
matematiikka viime viikolla oikealta.

1237
01:00:16,610 --> 01:00:19,480
Mutta mitä jos muutan
että oikeanpuoleisin 0 1?

1238
01:00:19,480 --> 01:00:22,800
Koko määrä, ja
Tietenkin tulee kahdeksan 1: n.

1239
01:00:22,800 --> 01:00:24,050
Joten olemme edelleen hyvä.

1240
01:00:24,050 --> 01:00:27,204
>> Ja että luultavasti edustaa
255, vaikkakin riippuen yhteydessä

1241
01:00:27,204 --> 01:00:29,120
se voisi todella edustaa
negatiivinen luku.

1242
01:00:29,120 --> 01:00:31,240
Mutta siitä lisää toisella kertaa.

1243
01:00:31,240 --> 01:00:34,220
Tämä tuntuu se on noin
peräti voin luottaa.

1244
01:00:34,220 --> 01:00:35,290
>> Nyt se on vain 8 bittiä.

1245
01:00:35,290 --> 01:00:38,170
Ja Mac, varmasti, on tapa
enemmän kuin 8 bittiä muistia.

1246
01:00:38,170 --> 01:00:39,170
Mutta se ei ole rajallinen.

1247
01:00:39,170 --> 01:00:43,230
Joten Sama pätee, vaikka
on enemmän nämä ovat näytöllä.

1248
01:00:43,230 --> 01:00:47,020
>> Mutta mitä tapahtuu, jos olet
tallentamista tämä määrä, 255,

1249
01:00:47,020 --> 01:00:49,290
ja haluat laskea 1 hieman korkeampi?

1250
01:00:49,290 --> 01:00:51,600
Haluatko mennä 255-256.

1251
01:00:51,600 --> 01:00:55,800
Ongelma on tietenkin se, että jos
alkaa laskea nollasta kuten viime viikolla,

1252
01:00:55,800 --> 01:00:59,670
et voi laskea niin korkea
256, puhumattakaan 257,

1253
01:00:59,670 --> 01:01:02,584
puhumattakaan 258, m koska mitä
tapahtuu, kun lisäät 1?

1254
01:01:02,584 --> 01:01:05,000
Jos tehdä vanhan alakoulussa
lähestymistapa, laittaa 1 täällä,

1255
01:01:05,000 --> 01:01:08,150
ja sitten 1 plus 1 on 2, mutta se on
todella nolla, kannat 1,

1256
01:01:08,150 --> 01:01:09,695
kuljettaa 1, kuljettaa 1.

1257
01:01:09,695 --> 01:01:12,620
Kaikki nämä asiat,
Näiden 1: n, mene nollaan.

1258
01:01:12,620 --> 01:01:17,820
Ja te päätteeksi, kyllä, kuten joku
huomautti, 1 vasemmalla puolella.

1259
01:01:17,820 --> 01:01:22,540
Mutta kaiken voit
itse nähdä ja mahdu muistiin

1260
01:01:22,540 --> 01:01:27,960
on vain kahdeksan 0: n, toisin sanoen
jossain vaiheessa, jos, tietokone,

1261
01:01:27,960 --> 01:01:32,490
kokeillut laskee riittävän korkea ylös, olet
menossa kietoa, näyttäisi siltä,

1262
01:01:32,490 --> 01:01:35,850
nolla, tai ehkä jopa negatiivinen
numerot, jotka ovat jopa pienempi kuin nolla.

1263
01:01:35,850 --> 01:01:37,260
>> Voimme tavallaan nähdä tämän.

1264
01:01:37,260 --> 01:01:39,900
Anna minun mennä eteenpäin ja kirjoittaa
todellinen nopea ohjelma täällä.

1265
01:01:39,900 --> 01:01:43,690
Anna minun mennä eteenpäin ja kirjoittaa
ohjelma nimeltä ylivuoto.

1266
01:01:43,690 --> 01:01:49,980
Sisällytä CS50.h, sisältävät
standardi IO.h-- oh,

1267
01:01:49,980 --> 01:01:51,730
Olen todella ikävä syntaksin.

1268
01:01:51,730 --> 01:01:54,440
Joten tallentaa tämän overflow.c.

1269
01:01:54,440 --> 01:01:57,084
>> Ja nyt int main void--
ja ennen pitkää käymme

1270
01:01:57,084 --> 01:01:59,500
palata miksi
pidämme kirjoittamista int main mitätön.

1271
01:01:59,500 --> 01:02:02,080
Mutta nyt, haluan vain tehdä
se, itsestäänselvyytenä.

1272
01:02:02,080 --> 01:02:06,200
Annetaan itse int,
ja alustaa sen 0.

1273
01:02:06,200 --> 01:02:11,716
>> Katsotaan sitten tehdä int saan zero--
itse asiassa, tehdään päättymättömään silmukkaan

1274
01:02:11,716 --> 01:02:12,590
ja katso mitä tapahtuu.

1275
01:02:12,590 --> 01:02:22,440
Vaikka totta, niin nyt tulostaa n
on prosentti i, kenoviiva n, plug-in n.

1276
01:02:22,440 --> 01:02:27,200
Mutta nyt, tehdään n saa n plus 1.

1277
01:02:27,200 --> 01:02:29,660
>> Eli toisin sanoen, kullakin
iteraatio tämän loputon silmukka,

1278
01:02:29,660 --> 01:02:32,550
Otetaan n arvosta,
ja lisätään 1 siihen, ja sitten

1279
01:02:32,550 --> 01:02:34,350
tuloksen tallentaminen takaisin n vasemmalla.

1280
01:02:34,350 --> 01:02:37,150
Ja itse asiassa, olemme nähneet syntaksin
hieman näin lyhyesti.

1281
01:02:37,150 --> 01:02:39,730
Viileä temppu on sen sijaan
kirjoittamisen tämän kaiken,

1282
01:02:39,730 --> 01:02:42,770
voit itse sanoa n plus on 1.

1283
01:02:42,770 --> 01:02:47,480
>> Tai jos todella haluat olla fancy,
voit sanoa n plus plus puolipisteellä.

1284
01:02:47,480 --> 01:02:50,130
Mutta nämä kaksi jälkimmäistä ovat vain
mitä olimme kutsua syntaktinen sokeria

1285
01:02:50,130 --> 01:02:50,790
että ensimmäinen asia.

1286
01:02:50,790 --> 01:02:53,456
>> Ensimmäinen asia on selvempi,
täysin hieno, täysin oikea.

1287
01:02:53,456 --> 01:02:55,470
Mutta tämä on yleisempää, sanon.

1288
01:02:55,470 --> 01:02:57,210
Niin teemme tätä vain hetken.

1289
01:02:57,210 --> 01:03:01,685
>> Oletetaan nyt tehdä ylivuoto, joka kuulostaa
melko pahaenteinen, piste slash ylivuoto.

1290
01:03:01,685 --> 01:03:04,380

1291
01:03:04,380 --> 01:03:09,852
Katsotaan, n on tulossa melko iso.

1292
01:03:09,852 --> 01:03:11,310
Mutta Ajatellaanpa, kuinka suuri voi n päästä?

1293
01:03:11,310 --> 01:03:12,870
>> n on int.

1294
01:03:12,870 --> 01:03:16,400
Näimme äsken kokoon
Esimerkiksi että int on neljä tavua.

1295
01:03:16,400 --> 01:03:22,070
Tiedämme viime viikolla, neljä tavua on
32 bittiä, koska 8 kertaa 4, joka on 32.

1296
01:03:22,070 --> 01:03:23,460
Se tulee olemaan 4 miljardia.

1297
01:03:23,460 --> 01:03:25,802
>> Ja olemme jopa 800000.

1298
01:03:25,802 --> 01:03:28,510
Tämä tulee kestää ikuisesti
laskea niin korkealle kuin suinkin mahdollista.

1299
01:03:28,510 --> 01:03:30,635
Joten aion mennä eteenpäin,
kuten saatat ennen pitkää,

1300
01:03:30,635 --> 01:03:34,910
ja osuma ohjaus C-- rehellisesti, Ohjaus
C, paljon, jossa valvonta C yleisesti

1301
01:03:34,910 --> 01:03:36,034
välineet peruuttaa.

1302
01:03:36,034 --> 01:03:38,200
Valitettavasti, koska tämä
on käynnissä pilveen,

1303
01:03:38,200 --> 01:03:41,190
joskus pilvi on
sylkeminen ulos niin paljon tavaraa,

1304
01:03:41,190 --> 01:03:44,180
niin paljon tuotos, se tulee
kestää vähän aikaa minun panos

1305
01:03:44,180 --> 01:03:45,630
päästä pilveen.

1306
01:03:45,630 --> 01:03:49,240
Joten vaikka osuin
Ohjaus C muutaman sekunnin sitten,

1307
01:03:49,240 --> 01:03:53,110
tämä on ehdottomasti sivussa
vaikutus päättymättömään silmukkaan.

1308
01:03:53,110 --> 01:03:56,070
>> Ja niin tällaisissa tapauksissa, olemme
aio jättää sen olla.

1309
01:03:56,070 --> 01:03:59,050
Ja aiomme lisätä toisen
pääteikkuna tänne

1310
01:03:59,050 --> 01:04:03,186
kanssa plus, mikä tietysti ei
niin, koska se on vielä miettiä.

1311
01:04:03,186 --> 01:04:05,310
Ja mennään eteenpäin ja olla
hieman järkevämpi.

1312
01:04:05,310 --> 01:04:07,768
>> Aion mennä eteenpäin ja tehdä
tämä vain äärellisen monta kertaa.

1313
01:04:07,768 --> 01:04:10,047
Käytetään for-silmukka,
joka viittasin aiemmin.

1314
01:04:10,047 --> 01:04:10,630
Tehdään tämä.

1315
01:04:10,630 --> 01:04:13,430
Anna minulle toinen muuttuja int i saa 0.

1316
01:04:13,430 --> 01:04:17,430
i on pienempi kuin, sanokaamme, 64 i ++.

1317
01:04:17,430 --> 01:04:24,010
Nyt anna minun mennä eteenpäin ja tulostaa
out n on prosentin i, pilkku n.

1318
01:04:24,010 --> 01:04:27,547
Ja sitten n- tämä on edelleen
vie ikuisesti.

1319
01:04:27,547 --> 01:04:28,130
Tehdään tämä.

1320
01:04:28,130 --> 01:04:30,620
>> n saa n kertaa 2.

1321
01:04:30,620 --> 01:04:34,140
Tai voisimme olla fancy
ja tehdä kertaa = 2.

1322
01:04:34,140 --> 01:04:37,120
Mutta sanotaan vaikka n
on yhtä kuin itse, kertaa 2.

1323
01:04:37,120 --> 01:04:39,321
Toisin sanoen, tämän
uusi versio ohjelmasta,

1324
01:04:39,321 --> 01:04:41,820
En halua odottaa ikuisesti
alkaen kuten 800000 4 miljardia.

1325
01:04:41,820 --> 01:04:43,070
Toivotaan vain hoitaa tämän.

1326
01:04:43,070 --> 01:04:44,920
>> Katsotaan todella kaksinkertaistuu n kerta.

1327
01:04:44,920 --> 01:04:47,660
Joka muistaa, kaksinkertaistaminen on
vastakohta ottaa tietenkin.

1328
01:04:47,660 --> 01:04:50,035
Ja kun viime viikolla meillä
jotain uudestaan, ja uudestaan,

1329
01:04:50,035 --> 01:04:52,200
ja jälleen, huippunopea,
kaksinkertaistaminen varmasti

1330
01:04:52,200 --> 01:04:58,080
saa meidät 1 suurin mahdollinen
arvoa, että voimme laskea sisäisellä.

1331
01:04:58,080 --> 01:04:59,750
>> Joten tehdä juuri tätä.

1332
01:04:59,750 --> 01:05:01,720
Ja me palaamme tähän ennen pitkää.

1333
01:05:01,720 --> 01:05:04,180
Mutta tämä taas on aivan
toistuva lohko Scratch.

1334
01:05:04,180 --> 01:05:05,600
Ja voit käyttää tätä ennen pitkää.

1335
01:05:05,600 --> 01:05:10,170
>> Tämä tarkoittaa vain sitä, count nollasta
asti, mutta ei yhtä suuri, 64.

1336
01:05:10,170 --> 01:05:14,285
Ja jokaisen iteraation tämän
silmukka, vain pitää kasvattamalla i.

1337
01:05:14,285 --> 01:05:18,990
Joten i ++ - ja tämä yleinen konstruktio
rivillä 7 on vain erittäin yleinen tapa

1338
01:05:18,990 --> 01:05:22,290
toistamaan muutaman rivin
koodi, jokin määrä kertoja.

1339
01:05:22,290 --> 01:05:23,362
Mitkä riviä koodia?

1340
01:05:23,362 --> 01:05:25,570
Nämä aaltosulkei-, kun
saattanut poimittu nyt,

1341
01:05:25,570 --> 01:05:26,780
tarkoittaa, toimi seuraavasti.

1342
01:05:26,780 --> 01:05:29,510
>> Se on kuin Scratch, kun
se on keltainen lohkojen

1343
01:05:29,510 --> 01:05:32,680
ja muut värit tuollaista
omaksua tai halata muita lohkoja.

1344
01:05:32,680 --> 01:05:34,750
Se mitä nämä kihara
olkaimet tekevät täällä.

1345
01:05:34,750 --> 01:05:40,200
Joten jos sain syntaksin right-- sinulle
näkee porkkana symboli C välineet

1346
01:05:40,200 --> 01:05:42,706
niin monta kertaa olin
yritetään ratkaista tämä ongelma.

1347
01:05:42,706 --> 01:05:45,330
Joten päästä eroon, että yksi
kokonaan, ja sulje se ikkuna.

1348
01:05:45,330 --> 01:05:46,520
Ja käytämme uuteen.

1349
01:05:46,520 --> 01:05:51,980
Tee ylivuoto, piste slash
ylivuoto, Enter, kaikki hyvin,

1350
01:05:51,980 --> 01:05:53,090
se näyttää pahalta aluksi.

1351
01:05:53,090 --> 01:05:56,200
Mutta nyt selata ajassa taaksepäin,
koska tein tämän 64 kertaa.

1352
01:05:56,200 --> 01:05:58,700
>> Ja huomaa, ensimmäistä kertaa, n on 1.

1353
01:05:58,700 --> 01:06:03,110
Toisen kerran, n on 2,
Sitten 4, sitten 8, sitten 16.

1354
01:06:03,110 --> 01:06:09,450
Ja näyttää siltä, ​​että niin pian kuin
Saan noin 1 miljardi,

1355
01:06:09,450 --> 01:06:12,800
jos en kaksinkertaistaa jälleen, että
pitäisi antaa minulle 2 miljardia.

1356
01:06:12,800 --> 01:06:14,980
Mutta näyttää siltä, ​​se on
aivan partaalla.

1357
01:06:14,980 --> 01:06:18,930
>> Ja niin se todella pursuaa
int alkaen 1 miljardi

1358
01:06:18,930 --> 01:06:23,514
karkeasti negatiivinen 2
miljardia, koska kokonaisluku,

1359
01:06:23,514 --> 01:06:25,430
toisin kuin numerot me
olivat olettaen viime viikolla,

1360
01:06:25,430 --> 01:06:28,397
voi olla sekä positiivisia että negatiivisia
todellisuudessa ja tietokoneen.

1361
01:06:28,397 --> 01:06:30,730
Niin ainakin yksi näistä
bittiä tehokkaasti varastettu.

1362
01:06:30,730 --> 01:06:34,190
Niinpä me oikeastaan ​​vain 31 bittiä,
tai 2 miljardia mahdollisia arvoja.

1363
01:06:34,190 --> 01:06:38,220
>> Mutta nyt, takeaway on melko
yksinkertaisesti, mitä nämä luvut ovat

1364
01:06:38,220 --> 01:06:42,280
ja mitä matematiikka on,
jotain pahaa tapahtuu lopulta,

1365
01:06:42,280 --> 01:06:46,980
koska lopulta yrität
permutoimaan bitit yksi liian monta kertaa.

1366
01:06:46,980 --> 01:06:51,060
Ja te tehokkaasti menevät kaikki
1: n ja ehkä kaikki 0: n, tai ehkä

1367
01:06:51,060 --> 01:06:54,260
vain joitakin muita malli, että se
selvästi, riippuen asiayhteydestä,

1368
01:06:54,260 --> 01:06:56,342
voidaan tulkita negatiiviseksi numero.

1369
01:06:56,342 --> 01:06:59,300
Ja niin se näyttäisi korkein I
voi laskea tässä nimenomaisessa ohjelmassa

1370
01:06:59,300 --> 01:07:01,210
on vain noin 1 miljardi.

1371
01:07:01,210 --> 01:07:02,760
Mutta on osaratkaisu täällä.

1372
01:07:02,760 --> 01:07:03,480
Tiedätkö mitä?

1373
01:07:03,480 --> 01:07:07,600
>> Saanen muuttuvat peräisin
int pitkä pitkä.

1374
01:07:07,600 --> 01:07:10,633
Ja anna minun mennä eteenpäin täällä
ja say-- aion olla

1375
01:07:10,633 --> 01:07:12,290
muuttaa tämä allekirjoittamaton pitkä.

1376
01:07:12,290 --> 01:07:16,860
Tai, katsotaanpa, en koskaan muista itse.

1377
01:07:16,860 --> 01:07:19,920
>> Mennään eteenpäin ja tehdä ylivuoto.

1378
01:07:19,920 --> 01:07:21,860
Ei, se ei ole sitä, OTT, kiitos.

1379
01:07:21,860 --> 01:07:23,430
Joten joskus Clang voi olla hyödyksi.

1380
01:07:23,430 --> 01:07:27,550
En muista mitä muotoa
specifier oli pitkään pitkään.

1381
01:07:27,550 --> 01:07:28,950
>> Mutta todellakin, Clang kertoi.

1382
01:07:28,950 --> 01:07:31,570
Green on jonkinlainen hyviä,
edelleen sitä teit virheen.

1383
01:07:31,570 --> 01:07:33,190
Se arvaamaan, että tarkoitin LLD.

1384
01:07:33,190 --> 01:07:38,750
>> Joten Otan se neuvo, pitkä
pitkä desimaaliluku, paitsi että.

1385
01:07:38,750 --> 01:07:43,190
Ja anna minun uusintana se, dot
slash ylivuoto, Enter.

1386
01:07:43,190 --> 01:07:45,020
Ja nyt, mitä on siistiä tämä.

1387
01:07:45,020 --> 01:07:49,140
>> Jos minä vierittää ajassa taaksepäin, vielä käynnisty
laskenta samalla place-- 1, 2, 4,

1388
01:07:49,140 --> 01:07:50,220
8, 16.

1389
01:07:50,220 --> 01:07:54,860
Ilmoitus, saamme kaikki
asti 1 miljardi.

1390
01:07:54,860 --> 01:07:57,070
Mutta sitten noustaan ​​2 miljardia.

1391
01:07:57,070 --> 01:08:01,300
>> Sitten saamme 4 miljardia,
sitten 8 miljardia, 17 miljardia.

1392
01:08:01,300 --> 01:08:03,340
Ja me mennä enemmän, ja
korkeampi, ja korkeampi.

1393
01:08:03,340 --> 01:08:05,740
Lopulta tämäkin taukoja.

1394
01:08:05,740 --> 01:08:09,350
>> Lopulta pitkä pitkä,
joka on 64-bittinen arvo, ei

1395
01:08:09,350 --> 01:08:13,660
32-bittinen arvo, jos lasketaan
liian korkea ja sitä kietoa 0.

1396
01:08:13,660 --> 01:08:16,410
Ja tässä tapauksessa, me sattuvat
päätyä negatiivinen luku.

1397
01:08:16,410 --> 01:08:17,550
>> Eli tämä on ongelma.

1398
01:08:17,550 --> 01:08:20,439
Ja käy ilmi, että tämä
Ongelma ei ole kovin mystistä.

1399
01:08:20,439 --> 01:08:23,060
Vaikka olen tarkoituksella
aiheuttama sitä näitä virheitä,

1400
01:08:23,060 --> 01:08:26,149
se kääntyy pois näemme sen tavallaan kaiken
ympärillämme, tai ainakin jotkut meistä tekevät.

1401
01:08:26,149 --> 01:08:28,939
>> Joten Lego Star Wars, jos
olet koskaan pelannut peliä,

1402
01:08:28,939 --> 01:08:33,830
se osoittautuu voit mennä ympäri
rikkoa asioita LEGO maailmassa,

1403
01:08:33,830 --> 01:08:36,640
ja kerätä kolikoita, olennaisesti.

1404
01:08:36,640 --> 01:08:39,200
Ja jos olet koskaan pelannut
tämä peli aivan liian paljon aikaa,

1405
01:08:39,200 --> 01:08:42,630
koska tämä nimetön yksittäiset
täällä teki, kokonaismäärä

1406
01:08:42,630 --> 01:08:46,700
kolikoita, jotka voit kerätä
on, näyttäisi siltä, ​​4 miljardia.

1407
01:08:46,700 --> 01:08:48,240
>> Nyt se on todella pyöristetty.

1408
01:08:48,240 --> 01:08:50,239
Joten LEGO yritti
pitää asiat käyttäjäystävällinen.

1409
01:08:50,239 --> 01:08:53,779
He eivät tee sitä tarkalleen 2
32 teho, per viime viikolla.

1410
01:08:53,779 --> 01:08:55,310
Mutta 4 miljardia on syy.

1411
01:08:55,310 --> 01:08:58,979
Näyttää siltä, ​​tämän tiedon perusteella,
että LEGO, ja yritys, joka

1412
01:08:58,979 --> 01:09:02,624
teki tämän todellinen ohjelmisto, päätti
että Enimmäismäärä kolikoita

1413
01:09:02,624 --> 01:09:04,540
käyttäjä voi kerääntyä
on todellakin 4 miljardia,

1414
01:09:04,540 --> 01:09:12,069
koska he valitsivat niiden koodin
käyttää ei pitkään pitkään, ilmeisesti,

1415
01:09:12,069 --> 01:09:16,140
mutta vain kokonaisluku, allekirjoittamattomasta
kokonaisluku, vain positiivinen kokonaisluku, jonka

1416
01:09:16,140 --> 01:09:18,089
max arvo on karkeasti se.

1417
01:09:18,089 --> 01:09:19,380
No, tässä on toinen hauska yksi.

1418
01:09:19,380 --> 01:09:23,500
Joten pelin Civilization, joka
jotkut teistä saattavat tuntea, jossa

1419
01:09:23,500 --> 01:09:26,660
käy ilmi, että vuosia sitten
oli virhe tässä pelissä, jolloin

1420
01:09:26,660 --> 01:09:28,750
jos rooliin
Gandhi peliin,

1421
01:09:28,750 --> 01:09:34,020
sen sijaan hänestä on hyvin pasifisti,
sen sijaan oli uskomattoman, uskomattoman

1422
01:09:34,020 --> 01:09:36,399
aggressiivinen, joissakin olosuhteissa.

1423
01:09:36,399 --> 01:09:40,529
Erityisesti sillä tavalla, että Civilization
teoksia on, että jos pelaaja,

1424
01:09:40,529 --> 01:09:44,680
hyväksyä demokratia, sinun
aggressiivisuus pisteet saa

1425
01:09:44,680 --> 01:09:48,130
vähennetään kahdella, joten miinus
miinus, ja sitten miinus miinus.

1426
01:09:48,130 --> 01:09:50,569
>> Joten vähennä 2 alkaen
todellinen iteroimalla.

1427
01:09:50,569 --> 01:09:56,650
Valitettavasti jos iteroimalla on
aluksi 1, ja vähennä 2 siitä

1428
01:09:56,650 --> 01:09:59,050
hyväksymisen jälkeen demokratia
kuten Gandhi täällä saattaisi

1429
01:09:59,050 --> 01:10:02,200
ovat tehneet, koska hän oli hyvin passive--
1 mittakaavassa aggressiivisuus.

1430
01:10:02,200 --> 01:10:04,830
Mutta jos hän omaksuu demokratian, sitten
hän kulkee 1 negatiiviseksi 1.

1431
01:10:04,830 --> 01:10:11,470
>> Valitettavasti ne olivat
käyttämällä unsigned numerot,

1432
01:10:11,470 --> 01:10:15,400
mikä tarkoittaa, että ne käsitellään jopa negatiivista
numeroita kuin ne olisivat positiivisia.

1433
01:10:15,400 --> 01:10:19,780
Ja se osoittautuu, että
positiivinen vastaava negatiivinen 1,

1434
01:10:19,780 --> 01:10:23,480
tyypilliseen tietokoneohjelmat, on 255.

1435
01:10:23,480 --> 01:10:27,250
Joten jos Gandhi hyväksyy
demokratiaa, ja siksi on

1436
01:10:27,250 --> 01:10:32,470
hänen aggressiivisuus pisteet laskivat,
se todella koittavat 255

1437
01:10:32,470 --> 01:10:35,470
ja tekee hänestä eniten
aggressiivinen luonne peliin.

1438
01:10:35,470 --> 01:10:36,930
Joten voit googlettaa ylös tästä.

1439
01:10:36,930 --> 01:10:39,380
Ja se oli todellakin
vahingossa ohjelmointi bug,

1440
01:10:39,380 --> 01:10:43,010
mutta joka on tullut varsin
Lore lähtien.

1441
01:10:43,010 --> 01:10:44,360
>> Siinä kaikki hauskaa ja söpö.

1442
01:10:44,360 --> 01:10:47,760
Enemmän pelottavaa on, kun varsinainen
reaalimaailman laitteita, eikä pelejä,

1443
01:10:47,760 --> 01:10:48,820
nämä samat viat.

1444
01:10:48,820 --> 01:10:54,500
Itse asiassa vain vuosi sitten artikkeli tuli
ulos noin Boeing 787.

1445
01:10:54,500 --> 01:10:56,850
>> Ja artikkeli ensin
silmäyksellä lukee hieman mystistä.

1446
01:10:56,850 --> 01:11:01,480
Mutta se sanoi, ohjelmisto
haavoittuvuus Boeingin

1447
01:11:01,480 --> 01:11:04,790
uusi 787 Dreamliner jet on
voi aiheuttaa lentäjien

1448
01:11:04,790 --> 01:11:07,220
hallinnan menetyksen
ilma, mahdollisesti

1449
01:11:07,220 --> 01:11:11,750
puolivälissä lennon, FAA virkamiehet
varoitti lentoyhtiöt hiljattain.

1450
01:11:11,750 --> 01:11:14,520
Se oli määritys
että malli 787

1451
01:11:14,520 --> 01:11:19,770
lentokone, joka on kytketty
yhtäjaksoisesti 248 päivää

1452
01:11:19,770 --> 01:11:24,880
voivat menettää kokonaan vaihtovirran, AC,
sähkövoimaa vuoksi generaattorin

1453
01:11:24,880 --> 01:11:28,892
ohjausyksiköt, GCUs samanaikaisesti
menee epäonnistua vikasietotilassa.

1454
01:11:28,892 --> 01:11:29,850
Se on tavallaan menettää minua.

1455
01:11:29,850 --> 01:11:35,390
Mutta muistio totesi, OK, nyt sain, että
ehto johtui ohjelmisto

1456
01:11:35,390 --> 01:11:38,590
laskuri sisäiset
generaattorin ohjaus

1457
01:11:38,590 --> 01:11:44,860
yksiköt, jotka vuotaa yli jälkeen
248 päivää jatkuvan tehon.

1458
01:11:44,860 --> 01:11:47,070
Olemme julkaista tämän
huomaa katoamisen estämiseksi

1459
01:11:47,070 --> 01:11:49,300
Kaikkien vaihtovirtateknologialla
voima, joka voi johtaa

1460
01:11:49,300 --> 01:11:50,980
menetys ohjaamaan lentokonetta.

1461
01:11:50,980 --> 01:11:55,380
>> Joten, kirjaimellisesti, on jonkin verran kokonaisluku,
tai jostakin vastaavasta tietotyyppi,

1462
01:11:55,380 --> 01:11:57,960
käytetään ohjelmistojen
todellisessa lentokoneessa

1463
01:11:57,960 --> 01:12:00,756
että jos pidät lentokone
tarpeeksi kauan, mikä ilmeisesti

1464
01:12:00,756 --> 01:12:03,880
voi olla, jos olet juuri käynnissä
niitä jatkuvasti ja koskaan irrottamalla

1465
01:12:03,880 --> 01:12:06,810
oman lentokone, näyttää siltä, ​​tai
kerroit sen akut kuolee,

1466
01:12:06,810 --> 01:12:09,840
lopulta laskea, ja ylös,
ja ylös, ja ylös ja ylös, ja ylös.

1467
01:12:09,840 --> 01:12:12,150
>> Ja luonnostaan, joka on
rajallinen määrä muistia

1468
01:12:12,150 --> 01:12:15,880
vuotaa yli, liikkuva takaisin
nolla tai jokin negatiivinen arvo,

1469
01:12:15,880 --> 01:12:19,920
sivuvaikutus, joka on
pelottavan todellinen todellisuus

1470
01:12:19,920 --> 01:12:23,970
että kone saattaa tarvita
käynnistettävä uudelleen, tehokkaasti,

1471
01:12:23,970 --> 01:12:27,290
tai voi pudota, pahempi, koska se lentää.

1472
01:12:27,290 --> 01:12:29,230
Joten tällaisia ​​asioita
ovat edelleen keskuudessamme,

1473
01:12:29,230 --> 01:12:33,130
even-- tämä oli 2015 artikkelin,
sitäkin pelottavaa

1474
01:12:33,130 --> 01:12:36,100
kun et välttämättä
ymmärtää, arvostaa, tai ennakoida

1475
01:12:36,100 --> 01:12:38,640
tuollaiset virheet.

1476
01:12:38,640 --> 01:12:42,030
>> Joten se kääntyy pois on olemassa yksi muu
huono puoli datan esityksessä.

1477
01:12:42,030 --> 01:12:47,080
On käynyt ilmi, että jopa kellukkeet ovat
Tällainen virheellinen, koska kellukkeet, liian,

1478
01:12:47,080 --> 01:12:51,440
Ehdotin ovat 32 bittiä, tai
ehkä 64, jos käytät kaksinkertainen.

1479
01:12:51,440 --> 01:12:53,070
Mutta se on silti rajallinen.

1480
01:12:53,070 --> 01:12:57,070
>> Ja saalis on, että jos voit
laittaa ääretön määrä numeroita

1481
01:12:57,070 --> 01:12:59,460
desimaalipisteen jälkeen,
ei ole mitään keinoa sinun

1482
01:12:59,460 --> 01:13:02,690
voi edustaa kaikkia mahdollisia
numeroita, jotka me opetettiin

1483
01:13:02,690 --> 01:13:04,990
alakoulussa voi esiintyä maailmassa.

1484
01:13:04,990 --> 01:13:08,870
Tietokone lähinnä, on
valita osajoukko näitä numeroita

1485
01:13:08,870 --> 01:13:10,200
edustaa tarkasti.

1486
01:13:10,200 --> 01:13:12,450
>> Nyt tietokone voi
pyöreä ehkä vähän,

1487
01:13:12,450 --> 01:13:17,900
ja voi voit karkeasti tallentaa
rajoittamattoman määrän saatat mahdollisesti haluta.

1488
01:13:17,900 --> 01:13:20,940
Mutta intuitiivisesti, jos
on rajallinen määrä bittejä,

1489
01:13:20,940 --> 01:13:24,560
voit vain permute niitä
niin monella rajallinen tavoin.

1490
01:13:24,560 --> 01:13:26,570
Joten et voi mahdollisesti
Käytä rajallinen määrä

1491
01:13:26,570 --> 01:13:29,880
permutaatiomat- bittien,
malleja nollia ja ykkösiä,

1492
01:13:29,880 --> 01:13:32,940
edustamaan ääretön
määrä numeroita,

1493
01:13:32,940 --> 01:13:37,370
mikä viittaa siihen, että tietokoneet saattavat
hyvinkin olla valehtelee meille joskus.

1494
01:13:37,370 --> 01:13:38,770
>> Itse asiassa, tehdään tämä.

1495
01:13:38,770 --> 01:13:41,239
Anna minun mennä takaisin CS50 IDE.

1496
01:13:41,239 --> 01:13:43,030
Anna minun mennä eteenpäin ja
luoda pieni ohjelma

1497
01:13:43,030 --> 01:13:47,940
kutsuttu epätarkkuus, jotka osoittavat, että
tietokoneet ovat todellakin epätarkka.

1498
01:13:47,940 --> 01:13:51,910
>> Ja anna minun mennä eteenpäin ja aloittaa
joitakin että koodin ennen,

1499
01:13:51,910 --> 01:13:53,830
ja nyt vain toimi seuraavasti.

1500
01:13:53,830 --> 01:14:03,640
Anna minun mennä eteenpäin ja tehdä printf, prosenttia
f, kenoviiva n, 1 jaettuna 10.

1501
01:14:03,640 --> 01:14:07,430
Toisin sanoen, nyt sukeltaa syvemmälle
1/10, kuten 1 ja jaettuna 10.

1502
01:14:07,430 --> 01:14:09,760
Varmasti, tietokone voi edustaa 1/10.

1503
01:14:09,760 --> 01:14:13,620
>> Joten mene eteenpäin ja tehdä epätarkkuus.

1504
01:14:13,620 --> 01:14:14,390
Katsotaan.

1505
01:14:14,390 --> 01:14:16,210
Muoto määrittelee tyypin kaksinkertainen.

1506
01:14:16,210 --> 01:14:18,160
Mutta väite on tyyppiä int.

1507
01:14:18,160 --> 01:14:19,040
Mitä tapahtuu?

1508
01:14:19,040 --> 01:14:21,970
>> Voi, mielenkiintoinen, joten se on
opetus oli ennen.

1509
01:14:21,970 --> 01:14:26,050
Sanon, hei, tietokone näyttää
minulle float prosenttia f.

1510
01:14:26,050 --> 01:14:28,200
Mutta annan sen 2 ints.

1511
01:14:28,200 --> 01:14:31,120
Joten se kääntyy pois, voin korjata
tämä pari tapaa.

1512
01:14:31,120 --> 01:14:38,430
>> Voisin vain kääntää One 1.0, ja
10 otetaan 10,0, mikä todellakin

1513
01:14:38,430 --> 01:14:42,390
vaikutuksesta muuntaa
ne floats-- edelleen toivottavasti

1514
01:14:42,390 --> 01:14:43,180
sama numero.

1515
01:14:43,180 --> 01:14:45,880
Tai se osoittautuu on jotain
näemme taas ennen pitkää.

1516
01:14:45,880 --> 01:14:47,170
Voisit heittää numeroita.

1517
01:14:47,170 --> 01:14:49,880
>> Voit käyttää tätä sulkumerkintä
lauseke, voit sanoa,

1518
01:14:49,880 --> 01:14:52,560
hei, tietokone, ota tämä
10, jonka tiedän on int.

1519
01:14:52,560 --> 01:14:54,660
Mutta hoitamattomana kiitos,
ikään kuin se on float.

1520
01:14:54,660 --> 01:14:56,680
Mutta tämä tuntuu tarpeettoman monimutkainen.

1521
01:14:56,680 --> 01:14:59,040
>> Meidän tarkoituksiin tänään,
Haluan vain kirjaimellisesti

1522
01:14:59,040 --> 01:15:02,700
tekevät niistä liukulukuarvoja
joiden desimaalierottimen näin.

1523
01:15:02,700 --> 01:15:07,060
Anna minun mennä eteenpäin ja uusinta, tee
epätäsmällisyys, hyvä, piste slash

1524
01:15:07,060 --> 01:15:08,870
epätäsmällisyys, kirjoita.

1525
01:15:08,870 --> 01:15:10,990
OK, etsimme hyvää.

1526
01:15:10,990 --> 01:15:18,194
>> 1 jaettuna 10, saamieni
Mac täällä, on todellakin 0,100000.

1527
01:15:18,194 --> 01:15:21,360
Nyt minulle opetettiin alakoulussa siellä
pitäisi olla ääretön määrä 0: n.

1528
01:15:21,360 --> 01:15:23,151
Joten ainakin yrittää
nähdä joitakin niistä.

1529
01:15:23,151 --> 01:15:26,770
On käynyt ilmi, että printf on hieman
harrastaja silti kuin olemme käyttäneet.

1530
01:15:26,770 --> 01:15:30,890
On käynyt ilmi, sinun ei tarvitse määrittää
vain prosentin f, tai vain prosentti i.

1531
01:15:30,890 --> 01:15:33,830
Voit itse määrittää
jotkut ohjaus vaihtoehtoja täällä.

1532
01:15:33,830 --> 01:15:36,470
>> Erityisesti aion
sanoa, hei, printf,

1533
01:15:36,470 --> 01:15:39,660
oikeastaan ​​näytä minulle 10 desimaaliin.

1534
01:15:39,660 --> 01:15:40,820
Joten se näyttää hieman outo.

1535
01:15:40,820 --> 01:15:42,845
Mutta te sanotte prosenttia,
piste, kuinka monta numeroa

1536
01:15:42,845 --> 01:15:44,970
haluat nähdä jälkeen
desimaalipilkun, ja sitten f

1537
01:15:44,970 --> 01:15:48,340
Litteiden, vain koska se on
mitä dokumentaatio sanoo.

1538
01:15:48,340 --> 01:15:50,080
Anna minun mennä eteenpäin ja tallenna se.

1539
01:15:50,080 --> 01:15:52,460
>> Ja huomaa myös, Saan
väsynyt retyping asioita.

1540
01:15:52,460 --> 01:15:55,900
Joten olen vain asettamalla ylös ja
alas nuoli minun avaimet tänne.

1541
01:15:55,900 --> 01:15:58,710
Ja jos minä pitää lyödä ylös, sinun
voi nähdä kaikkien komentojen

1542
01:15:58,710 --> 01:16:01,090
että tein, tai väärin tehty.

1543
01:16:01,090 --> 01:16:04,630
>> Ja aion mennä eteenpäin nyt ja
ei oikeastaan ​​käyttää tätä, ilmeisesti.

1544
01:16:04,630 --> 01:16:11,416
Tee epätäsmällisyys, dot
slash imprecision-- niin

1545
01:16:11,416 --> 01:16:13,290
mitä opetettiin
asteella tarkastusten perusteella.

1546
01:16:13,290 --> 01:16:19,010
Vaikka olen tulostaa sen 10 desimaalin
asettaa se, todellakin on 0,10000.

1547
01:16:19,010 --> 01:16:19,840
Mutta tiedätkö mitä?

1548
01:16:19,840 --> 01:16:21,150
>> Mennään hieman ahne.

1549
01:16:21,150 --> 01:16:23,990
Sanotaan, kuten, näytä minulle 55
huomauttaa jälkeen desimaalin.

1550
01:16:23,990 --> 01:16:26,160
Katsotaan todella ottaa tämän
ohjelmoida ulos spin.

1551
01:16:26,160 --> 01:16:31,170
Saanen sen uudestaan ​​make
epätäsmällisyys, piste slash, epätarkkuus.

1552
01:16:31,170 --> 01:16:32,390
>> Ja tässä mennään.

1553
01:16:32,390 --> 01:16:34,420
Lapsuuden oli valhe.

1554
01:16:34,420 --> 01:16:48,410
Ilmeisesti 1 jaettuna 10 on todellakin
0.100000000000000005551115123--

1555
01:16:48,410 --> 01:16:49,740
>> Mitä tapahtuu?

1556
01:16:49,740 --> 01:16:53,360
No, se kääntyy pois, jos sellainen
Katso riittävän ulos taustalla

1557
01:16:53,360 --> 01:16:55,950
edustus tästä
numero, se todella

1558
01:16:55,950 --> 01:17:00,400
ei ole juuri 1/10 tai 0,1 ja
ääretön määrä nollia.

1559
01:17:00,400 --> 01:17:01,630
Nyt Miksi?

1560
01:17:01,630 --> 01:17:06,250
>> No, vaikka tämä on yksinkertainen
numeron meille ihmisille, 1 jaettuna 10,

1561
01:17:06,250 --> 01:17:10,910
se on edelleen yksi äärettömän monta
numeroita että voisimme ajatella.

1562
01:17:10,910 --> 01:17:14,490
Mutta tietokone voi edustaa vain
äärellisen monta niin numeroita.

1563
01:17:14,490 --> 01:17:18,710
Ja niin tehokkaasti, mitä
tietokone näyttää meille on sen lähin

1564
01:17:18,710 --> 01:17:22,940
approksimaatio numero
Haluamme uskoa on 1/10,

1565
01:17:22,940 --> 01:17:27,760
tai oikeastaan ​​0,10000 loputtomiin.

1566
01:17:27,760 --> 01:17:30,425
>> Pikemminkin, vaikka tämä on
niin lähellä kuin se voi saada.

1567
01:17:30,425 --> 01:17:32,300
Ja todellakin, jos tarkastellaan
alla huppu,

1568
01:17:32,300 --> 01:17:37,050
koska olemme täällä tarkastelemalla
55 desimaalilla,

1569
01:17:37,050 --> 01:17:39,990
me itse nähdä, että todellisuus.

1570
01:17:39,990 --> 01:17:42,610
Nyt kun Sivuhuomautuksena, jos olet
koskaan nähnyt movie--

1571
01:17:42,610 --> 01:17:45,780
useimmat varmaan haven't--
mutta Superman 3 muutama vuosi sitten,

1572
01:17:45,780 --> 01:17:49,500
Richard Pryor olennaisesti panostettava tähän
todellisuus hänen yrityksensä varastaa paljon

1573
01:17:49,500 --> 01:17:53,500
Fraktioiden ja jakeet penniä,
koska company-- muistaakseni,

1574
01:17:53,500 --> 01:17:57,210
se on ollut while-- oli olennaisesti
heittää pois mitään, mikä ei sopinut

1575
01:17:57,210 --> 01:17:58,790
osaksi käsite senttiä.

1576
01:17:58,790 --> 01:18:01,480
>> Mutta jos lisäät kaikki nämä
pieni, pieni, pieni määrä uudestaan,

1577
01:18:01,480 --> 01:18:04,960
ja uudestaan, ja uudestaan, voit, kuten
hänen tapauksessa tehdä hyvä määrä rahaa.

1578
01:18:04,960 --> 01:18:08,010
>> Tämä sama ajatus oli huijannut
uudempi, mutta silti nyt vanhemmat

1579
01:18:08,010 --> 01:18:10,500
elokuva, nimeltään Office Space,
jossa kaverit siinä elokuvassa,

1580
01:18:10,500 --> 01:18:13,501
teki saman, ruuvata se ylös
täysin, päätyi aivan liikaa

1581
01:18:13,501 --> 01:18:14,666
rahaa niiden pankkitilille.

1582
01:18:14,666 --> 01:18:15,800
Se oli hyvin epäilyttävä.

1583
01:18:15,800 --> 01:18:19,290
Mutta lopussa päivä,
epätäsmällisyys on kaikkialla ympärillämme.

1584
01:18:19,290 --> 01:18:22,240
>> Ja myös, voi olla
pelottavan tapauksessa.

1585
01:18:22,240 --> 01:18:25,590
On käynyt ilmi, että Superman 3
ja Toimistotilaa sivuun, siellä

1586
01:18:25,590 --> 01:18:28,460
voi olla joitakin hyvin todellinen
maailma seurauksia

1587
01:18:28,460 --> 01:18:32,290
realiteetit epätarkka
tietojen esittämisessä

1588
01:18:32,290 --> 01:18:34,770
että vaikka me ihmisten
tämä päivä ei välttämättä

1589
01:18:34,770 --> 01:18:38,230
ymmärtää samoin kuin meidän pitäisi,
tai muistaa niin usein kuin pitäisi.

1590
01:18:38,230 --> 01:18:42,950
Ja todellakin, seuraavat leike on
mistä katsomaan joitakin hyvin todellinen maailma

1591
01:18:42,950 --> 01:18:47,730
seurauksia, mitä tapahtuu, jos
eivät ymmärrä epätarkkuus että

1592
01:18:47,730 --> 01:18:50,065
voi tapahtua numeroita edustus.

1593
01:18:50,065 --> 01:18:51,300
>> [VIDEOTOISTOSTA]

1594
01:18:51,300 --> 01:18:55,620
>> -Tietotekniikka, Olemme kaikki tulleet hyväksyä
usein turhauttavaa ongelmia,

1595
01:18:55,620 --> 01:19:00,310
mennä them-- vikoja, viruksia,
ja ohjelmistot glitches,

1596
01:19:00,310 --> 01:19:03,130
Pienten hinta maksaa
helpotukseksi.

1597
01:19:03,130 --> 01:19:07,800
Mutta korkean teknologian ja nopea
sotilas- ja avaruusohjelma sovelluksia,

1598
01:19:07,800 --> 01:19:12,800
pienin ongelma voi
suurennetaan katastrofiin.

1599
01:19:12,800 --> 01:19:18,900
>> 4. kesäkuuta, 1996 tutkijat valmistettu
käynnistää miehittämättömän Ariane 5 raketti.

1600
01:19:18,900 --> 01:19:21,220
Se kantoi tieteen
satelliitit suunnitellut

1601
01:19:21,220 --> 01:19:24,600
vahvistaa tarkasti, kuinka
Maan magneettikenttä toimii vuorovaikutuksessa

1602
01:19:24,600 --> 01:19:27,410
aurinko tuulet.

1603
01:19:27,410 --> 01:19:30,800
Raketti rakennettiin
Euroopan avaruusjärjestön

1604
01:19:30,800 --> 01:19:34,370
ja nostetaan pois sen laitos
rannikolla Guyanassa.

1605
01:19:34,370 --> 01:19:37,540
>> -At Noin 37 sekunnin
lennon, he ensin

1606
01:19:37,540 --> 01:19:39,270
huomasi jotain oli vialla.

1607
01:19:39,270 --> 01:19:42,250
Suuttimet oli kääntyvä vuonna
tapa ne todella pitäisi.

1608
01:19:42,250 --> 01:19:46,580
Noin 40 sekunnin lennon,
selvästi, ajoneuvo oli vaikeuksissa.

1609
01:19:46,580 --> 01:19:48,850
>> Ja silloin he tekivät
päätöstä tuhota sen.

1610
01:19:48,850 --> 01:19:52,780
Valikoima turvallisuusvastuuhenkilön, jossa
valtava suolet, painetaan nappia,

1611
01:19:52,780 --> 01:19:58,150
räjähti raketti, ennen kuin se voisi
tullut vaaran yleiselle turvallisuudelle.

1612
01:19:58,150 --> 01:20:01,060
>> -Tämä Oli neito
matkasta Ariane 5.

1613
01:20:01,060 --> 01:20:03,960
Ja sen tuhoamista otti
aseta koska virhe

1614
01:20:03,960 --> 01:20:05,822
upotettu raketin ohjelmisto.

1615
01:20:05,822 --> 01:20:08,280
-The Ongelma Ariane oli
että oli useita, että

1616
01:20:08,280 --> 01:20:10,600
vaaditaan 64 bittiä ilmaista.

1617
01:20:10,600 --> 01:20:13,590
Ja he halusivat muuntaa
se on 16-bittinen numero.

1618
01:20:13,590 --> 01:20:15,610
Ne olettaa, että
numero ei koskaan tule

1619
01:20:15,610 --> 01:20:20,980
erittäin suuri, että useimmat niistä
numerot 64-bittinen numero olivat nollia.

1620
01:20:20,980 --> 01:20:22,440
He olivat väärässä.

1621
01:20:22,440 --> 01:20:25,060
>> -edellä Kyvyttömyys yhden
ohjelma hyväksyä

1622
01:20:25,060 --> 01:20:29,510
sellainen määrä tuottaman
toinen oli juureen epäonnistumisen.

1623
01:20:29,510 --> 01:20:34,350
Ohjelmistojen kehittäminen oli tullut
kalliiksi osa uutta teknologiaa.

1624
01:20:34,350 --> 01:20:38,140
Ariane raketti ovat olleet hyvin
onnistuu, niin ohjelmisto

1625
01:20:38,140 --> 01:20:41,550
luotu se oli myös
käytetty Ariane 5.

1626
01:20:41,550 --> 01:20:47,940
>> -The Perusongelmana oli, että Ariane
5 oli nopeampi, kiihtyi nopeammin.

1627
01:20:47,940 --> 01:20:51,450
Ja ohjelmisto ei ollut
osuus siitä.

1628
01:20:51,450 --> 01:20:55,060
>> -The Tuhoaminen raketti
oli valtava taloudellinen katastrofi,

1629
01:20:55,060 --> 01:20:58,790
kaikki johtuu minuutti ohjelmistovirhe.

1630
01:20:58,790 --> 01:21:01,210
Mutta tämä ei ollut ensimmäinen
aika tietojen muuntaminen ongelmat

1631
01:21:01,210 --> 01:21:04,820
oli vaivannut moderni ohjusteknologia.

1632
01:21:04,820 --> 01:21:08,050
>> -In 1991 käynnistäen
Ensimmäisen Persianlahden sodan,

1633
01:21:08,050 --> 01:21:10,570
Patriot Missile
kokenut samantyyppinen

1634
01:21:10,570 --> 01:21:12,800
Numeron muuntaminen ongelma.

1635
01:21:12,800 --> 01:21:16,090
Ja sen seurauksena, 28 ihmistä,
28 amerikkalaista sotilasta,

1636
01:21:16,090 --> 01:21:19,080
kuoli, ja noin
100 toiset haavoittui,

1637
01:21:19,080 --> 01:21:22,780
kun Patriot, joka piti
suojautua saapuvat scuds,

1638
01:21:22,780 --> 01:21:25,830
ei osunut.

1639
01:21:25,830 --> 01:21:31,670
>> -Kun Irak hyökkäsi Kuwaitiin, ja Amerikassa
käynnistettiin Aavikkomyrskyn vuoden 1991 alussa,

1640
01:21:31,670 --> 01:21:35,780
Patriot Missile akut lähetettiin
suojella Saudi-Arabia ja Israel

1641
01:21:35,780 --> 01:21:39,230
Irakin Scud ohjus hyökkäyksiä.

1642
01:21:39,230 --> 01:21:43,810
Patriot on US keskipitkän kantaman
pinta ilmaan järjestelmä, valmistettu

1643
01:21:43,810 --> 01:21:45,770
jonka Raytheon yhtiö.

1644
01:21:45,770 --> 01:21:52,340
>> -The Koko Patriot torjuntahävittäjä
itsessään on noin noin 20 jalkaa pitkä.

1645
01:21:52,340 --> 01:21:55,230
Ja se painaa noin 2000 kiloa.

1646
01:21:55,230 --> 01:21:59,320
Ja se harjoittaa taistelukärjestä noin,
Minusta se on noin 150 kiloa.

1647
01:21:59,320 --> 01:22:03,930
Ja taistelukärki itsessään
korkea räjähtävä, joka

1648
01:22:03,930 --> 01:22:07,330
on fragmentteja sen ympärille.

1649
01:22:07,330 --> 01:22:11,680
Koteloa taistelukärki on
tarkoituksena on toimia kuten buckshot.

1650
01:22:11,680 --> 01:22:14,110
>> -The Ohjuksia kuljetetaan
neljä per kontti,

1651
01:22:14,110 --> 01:22:17,130
ja kuljetetaan puoliperävaunu.

1652
01:22:17,130 --> 01:22:24,930
>> -The Patriot ohjuspuolustusjärjestelmää
ulottuu vähintään 20 vuotta.

1653
01:22:24,930 --> 01:22:28,420
Se oli alun perin suunniteltu
kuin ilmatorjuntaohjusjärjestelmään

1654
01:22:28,420 --> 01:22:30,720
ampua alas vihollisen lentokoneita.

1655
01:22:30,720 --> 01:22:34,500
Ensimmäisessä Persianlahden sodan,
kun se sota tuli mukaan,

1656
01:22:34,500 --> 01:22:39,745
armeijan halusi käyttää sitä
ampua alas scuds, ei lentokoneita.

1657
01:22:39,745 --> 01:22:43,620
>> Irakin Air Force oli
ei niin suuri ongelma.

1658
01:22:43,620 --> 01:22:46,670
Mutta armeija oli huolissaan scuds.

1659
01:22:46,670 --> 01:22:50,170
Ja niin he yrittivät
päivittää Patriot.

1660
01:22:50,170 --> 01:22:52,800
>> -Intercepting Vihollinen
ohjus kulkee Mach 5

1661
01:22:52,800 --> 01:22:55,830
tultaisiin riittävän haastava.

1662
01:22:55,830 --> 01:22:58,490
Mutta kun Patriot
kiidätettiin laskemista,

1663
01:22:58,490 --> 01:23:02,860
armeija ei ollut tietoisia
Irakin muutos, joka teki

1664
01:23:02,860 --> 01:23:05,930
niiden scuds lähes mahdotonta lyödä.

1665
01:23:05,930 --> 01:23:10,740
>> Mitä tapahtui on scuds että
oli tulossa oli epävakaa.

1666
01:23:10,740 --> 01:23:11,692
Heidät huojuu.

1667
01:23:11,692 --> 01:23:14,910
Syynä tähän oli
irakilaisia, jotta

1668
01:23:14,910 --> 01:23:18,280
päästä 600 km
ulos 300 kilometrin

1669
01:23:18,280 --> 01:23:21,700
kantaman ohjusten, otti paino
pois edestä taistelukärki.

1670
01:23:21,700 --> 01:23:23,390
He tekivät taistelukärki kevyempi.

1671
01:23:23,390 --> 01:23:27,330
>> Joten nyt Patriot on
yrittää tulla klo Scud.

1672
01:23:27,330 --> 01:23:30,230
Ja suurimman osan ajasta,
Valtaosa ajasta,

1673
01:23:30,230 --> 01:23:32,940
se vain lentää, jonka Scud.

1674
01:23:32,940 --> 01:23:37,260
Kun Patriot-operaattoreille
tajusi Patriot jäi kohteeseensa,

1675
01:23:37,260 --> 01:23:41,690
ne räjäytetään Patriot ydinpommi
vältetään mahdolliset tappiot, jos se

1676
01:23:41,690 --> 01:23:44,570
annettiin pudota maahan.

1677
01:23:44,570 --> 01:23:48,790
>> -Se Oli mitä useimmat ihmiset näkivät,
näitä suuria tulipalloja taivaalla,

1678
01:23:48,790 --> 01:23:54,550
ja ymmärtää väärin
kuuntelevansa Scud taistelukärkiä.

1679
01:23:54,550 --> 01:23:56,630
>> -Vaikka Yöllä
taivas, Patriots ilmestyi

1680
01:23:56,630 --> 01:24:00,370
olla onnistuneesti
tuhoaa Scuds kello Dhahran,

1681
01:24:00,370 --> 01:24:03,360
ei voi olla virhe
sen toiminnasta.

1682
01:24:03,360 --> 01:24:07,970
Siellä Patriot tutkajärjestelmän
kadottaa saapuvasta Scud,

1683
01:24:07,970 --> 01:24:10,721
ja ei koskaan käynnistetty takia
ohjelmaongelmaan virhe.

1684
01:24:10,721 --> 01:24:14,090

1685
01:24:14,090 --> 01:24:18,940
Se oli israelilaisia, joka ensimmäisenä löysi
että enää järjestelmä oli,

1686
01:24:18,940 --> 01:24:22,690
sitä suurempi aika ristiriita
tuli, koska kellon sulautettujen

1687
01:24:22,690 --> 01:24:24,810
järjestelmän tietokoneelle.

1688
01:24:24,810 --> 01:24:28,210
>> -Noin Kaksi viikkoa ennen
tragedia Dhahran,

1689
01:24:28,210 --> 01:24:30,770
israelilaiset raportoidaan
puolustusministeriö

1690
01:24:30,770 --> 01:24:32,590
että järjestelmä oli menettää aikaa.

1691
01:24:32,590 --> 01:24:35,360
Noin kahdeksan tuntia tai käynnissä,
he huomasivat, että järjestelmä

1692
01:24:35,360 --> 01:24:37,720
oli tulossa huomattavasti epätarkempi.

1693
01:24:37,720 --> 01:24:41,900
Puolustusministeriö vastasi
kertoo kaikki Patriot akkujen

1694
01:24:41,900 --> 01:24:44,950
ja jätä järjestelmiä
on pitkään.

1695
01:24:44,950 --> 01:24:49,160
He eivät koskaan sanoi mitä pitkään was--
kahdeksan tuntia, 10 tuntia, 1000 tuntia.

1696
01:24:49,160 --> 01:24:51,360
Kukaan ei tiennyt.

1697
01:24:51,360 --> 01:24:53,380
>> -The Patriot akku
sijoitettiin kasarmin

1698
01:24:53,380 --> 01:24:58,350
at Dhahran ja sen puutteellinen sisäinen
kello oli ollut yli 100 tuntia

1699
01:24:58,350 --> 01:25:01,670
yönä helmikuun 25. päivä.

1700
01:25:01,670 --> 01:25:05,917
>> -Se Seurataan aika tarkkuudella
noin kymmenesosa toinen.

1701
01:25:05,917 --> 01:25:08,000
Nyt kymmenesosa toinen
on mielenkiintoinen numero,

1702
01:25:08,000 --> 01:25:11,920
koska se ei voi ilmaista
binary tarkalleen, mikä

1703
01:25:11,920 --> 01:25:16,820
tarkoittaa sitä ei voida ilmaista tarkasti,
missä tahansa nykyaikaisessa digitaalisen tietokoneen.

1704
01:25:16,820 --> 01:25:18,540
On vaikea uskoa.

1705
01:25:18,540 --> 01:25:21,210
>> Mutta käyttää tätä esimerkkinä.

1706
01:25:21,210 --> 01:25:23,540
Otetaan numero yksi kolmasosa.

1707
01:25:23,540 --> 01:25:27,350
Kolmasosa ei voi olla
ilmaistaan ​​desimaalilukuna tarkalleen.

1708
01:25:27,350 --> 01:25:32,080
Kolmannes on 0,333
jatkunut äärettömyyteen.

1709
01:25:32,080 --> 01:25:36,480
>> Ei ole mitenkään tehdä sitä
absoluuttinen tarkkuus desimaalin.

1710
01:25:36,480 --> 01:25:39,560
Juuri sellainen ongelma
että tapahtui Patriot.

1711
01:25:39,560 --> 01:25:44,100
Mitä pidempi järjestelmä juoksi, The
huonompi aika virhe tuli.

1712
01:25:44,100 --> 01:25:48,890
>> -Kun 100 tunnin toimintaa,
virheestä ajassa oli vain noin kolmannes

1713
01:25:48,890 --> 01:25:50,600
toisen.

1714
01:25:50,600 --> 01:25:54,210
Mutta mitä kohdistaminen
ohjus kulkee Mach 5,

1715
01:25:54,210 --> 01:25:58,710
se johti seuranta
virhe on yli 600 metriä.

1716
01:25:58,710 --> 01:26:02,120
Olisi kohtalokas virhe
sotilaat mitä

1717
01:26:02,120 --> 01:26:08,940
tapahtui on Scud käynnistää oli
havaitaan varhaisessa vaiheessa varoitus satelliittien

1718
01:26:08,940 --> 01:26:12,860
ja he tiesivät, että Scud oli
tulossa niiden yleistä suuntaa.

1719
01:26:12,860 --> 01:26:15,320
He eivät tiedä, missä se oli tulossa.

1720
01:26:15,320 --> 01:26:18,250
>> -Se Oli nyt jopa tutka
komponentti Patriot järjestelmän

1721
01:26:18,250 --> 01:26:23,190
puolustavat Dhahran paikantaa ja pitää
Seuraa saapuvan vihollisen ohjus.

1722
01:26:23,190 --> 01:26:24,609
>> -The Tutka oli hyvin älykäs.

1723
01:26:24,609 --> 01:26:26,650
Olisi todella seurata
asento Scud,

1724
01:26:26,650 --> 01:26:30,350
ja sitten ennustaa missä se todennäköisesti
olisi seuraavan kerran tutka lähetetään

1725
01:26:30,350 --> 01:26:31,420
pulssi ulos.

1726
01:26:31,420 --> 01:26:33,110
Tämä kutsuttiin erilaisia ​​portti.

1727
01:26:33,110 --> 01:26:37,660
>> -Sitten, Kun Patriot
päättää tarpeeksi aikaa on

1728
01:26:37,660 --> 01:26:42,450
välitetään mennä takaisin ja tarkista seuraava
paikka tälle havaittu kohde,

1729
01:26:42,450 --> 01:26:43,600
se menee takaisin.

1730
01:26:43,600 --> 01:26:48,650
Joten kun se meni takaisin väärään
paikka, sitten se ei näe mitään esinettä.

1731
01:26:48,650 --> 01:26:52,160
Ja se päättää, että ei ole
esine, se oli väärä tunnistus,

1732
01:26:52,160 --> 01:26:53,930
ja laskee radan.

1733
01:26:53,930 --> 01:26:57,030
>> -The Saapuva Scud katosi
tutkanäytöltä.

1734
01:26:57,030 --> 01:27:00,260
Ja sekuntia myöhemmin, se
lyönyt kasarmiin.

1735
01:27:00,260 --> 01:27:06,150
Scud tappoi 28, ja oli viimeinen
yksi ampui ensimmäisen Persianlahden sodan.

1736
01:27:06,150 --> 01:27:11,960
>> On traagista, päivitetty ohjelmisto
saapui Dhahran seuraavana päivänä.

1737
01:27:11,960 --> 01:27:14,930
Ohjelmisto virhe oli
ollut kiinteä, sulkeminen

1738
01:27:14,930 --> 01:27:19,806
yksi luku levoton
historiasta Patriot ohjus.

1739
01:27:19,806 --> 01:27:20,729
>> [VIDEOTOISTOSTA]

1740
01:27:20,729 --> 01:27:23,520
DAVID J. MALAN: Eli tämä on kaikki
sanoa, että nämä kysymykset ylivuoto

1741
01:27:23,520 --> 01:27:25,860
ja epätarkkuus ovat liian todellinen.

1742
01:27:25,860 --> 01:27:26,920
Miten tähän on tultu?

1743
01:27:26,920 --> 01:27:28,895
Aloitimme puhu vain printf.

1744
01:27:28,895 --> 01:27:31,270
Tämäkin toiminto
tulostaa jotain näyttöä,

1745
01:27:31,270 --> 01:27:33,450
ja toimme sen jälkeen
muutamia muita toimintoja

1746
01:27:33,450 --> 01:27:34,945
alkaen ns CS50: n kirjasto.

1747
01:27:34,945 --> 01:27:36,910
Ja jatkamme
katso nämä aikanaan.

1748
01:27:36,910 --> 01:27:40,760
Ja me, erityisesti, käyttää get merkkijono,
ja saada int, ja nyt myös saada kellua,

1749
01:27:40,760 --> 01:27:44,410
ja vielä toiset silti kohtaamme
ja käyttää itse ennen pitkää.

1750
01:27:44,410 --> 01:27:47,220
>> Mutta toisinaan, on
me jo nähneet tarvetta

1751
01:27:47,220 --> 01:27:50,520
tallentaa mitä nämä tehtävät käsin takaisin?

1752
01:27:50,520 --> 01:27:52,920
He käsi meidät takaisin merkkijono,
tai int tai float.

1753
01:27:52,920 --> 01:27:56,070
Ja joskus meidän täytyy laittaa, että
string, tai int tai float, jonnekin.

1754
01:27:56,070 --> 01:28:00,100
>> Ja tallentaa ne asiat, muistaa vain
kuten Scratch, olemme muuttujia.

1755
01:28:00,100 --> 01:28:03,260
Mutta toisin Scratch,
C meillä on todellinen tyypit

1756
01:28:03,260 --> 01:28:05,530
of variables-- data
tyypit, lisää generally--

1757
01:28:05,530 --> 01:28:08,640
niiden joukossa, merkkijono, int, joka on
kellua, ja nämä toiset vielä.

1758
01:28:08,640 --> 01:28:12,321
>> Ja niin kun me julistaa muuttujia C,
meidän täytyy julistaa meidän tietotyyppejä.

1759
01:28:12,321 --> 01:28:14,820
Tämä ei ole jotain me will
täytyy tehdä myöhemmin lukukauden

1760
01:28:14,820 --> 01:28:16,810
kuten siirtyminen muille kielille.

1761
01:28:16,810 --> 01:28:19,610
Mutta nyt, tarvitsemme
joka priori etukäteen,

1762
01:28:19,610 --> 01:28:24,370
selittää tietokoneeseen minkälaista
muuttuvan haluamme antaa meille.

1763
01:28:24,370 --> 01:28:27,290
>> Nyt puolestaan ​​tulostaa
tuollaiset tietotyyppejä,

1764
01:28:27,290 --> 01:28:29,570
meidän on kerrottava printf mitä odottaa.

1765
01:28:29,570 --> 01:28:32,450
Ja näimme prosentin s jousille,
ja prosenttia i kokonaislukuja,

1766
01:28:32,450 --> 01:28:33,790
ja muutama muu jo.

1767
01:28:33,790 --> 01:28:37,237
Ja ne ovat yksinkertaisesti vaatimukset
visuaalisen esityksen

1768
01:28:37,237 --> 01:28:38,070
nämä tiedot.

1769
01:28:38,070 --> 01:28:42,080
>> Ja jokainen näistä voi todella olla
parametrized tai viritetty jollakin tavalla,

1770
01:28:42,080 --> 01:28:45,370
jos haluat edelleen ohjaus
tyyppi tuotoksen että saat.

1771
01:28:45,370 --> 01:28:49,604
Ja itse asiassa, käy ilmi, että ei ainoastaan
on olemassa backslash n uuden linjan.

1772
01:28:49,604 --> 01:28:52,520
On jotain muuta kutsutaan kenoviiva
r rivinvaihto, joka

1773
01:28:52,520 --> 01:28:54,360
on lähempänä
vanha koulu kirjoituskone,

1774
01:28:54,360 --> 01:28:57,690
ja myös Windows käytetty jo useita vuosia.

1775
01:28:57,690 --> 01:28:59,690
>> On backslash t välilehdet.

1776
01:28:59,690 --> 01:29:03,170
Osoittautuu, että jos haluat
lainausmerkki sisällä merkkijono,

1777
01:29:03,170 --> 01:29:05,000
muistuttaa, että olemme käyttäneet
lainausmerkki double

1778
01:29:05,000 --> 01:29:07,900
lainaus vasemmalla ja oikealla
päättyy meidän jousille toistaiseksi.

1779
01:29:07,900 --> 01:29:09,420
Tämä näyttäisi sekoittaa asioita.

1780
01:29:09,420 --> 01:29:12,503
>> Jos haluat laittaa lainausmerkki vuonna
keskellä string-- ja, todellakin,

1781
01:29:12,503 --> 01:29:13,670
se on hämmentävää nähdä.

1782
01:29:13,670 --> 01:29:17,120
Ja niin sinun täytyy paeta, niin
puhua, kaksinkertainen lainata jotain

1783
01:29:17,120 --> 01:29:18,860
kuten, kirjaimellisesti, Kenoviiva lainausmerkki.

1784
01:29:18,860 --> 01:29:20,230
Ja siellä on muutamia muita vielä.

1785
01:29:20,230 --> 01:29:24,540
Ja näemme enemmän näistä
todellisessa käytössä ennen pitkää.

1786
01:29:24,540 --> 01:29:27,930
>> Joten nyt siirtyminen
data, ja edustus,

1787
01:29:27,930 --> 01:29:30,820
ja aritmeettiset operaattorit, kaikki
joista antoi meille jonkin rakennuksen

1788
01:29:30,820 --> 01:29:32,070
lohkojen joka pelata.

1789
01:29:32,070 --> 01:29:34,481
Mutta nyt katsotaanpa todella antaa
meille loput sanaston

1790
01:29:34,481 --> 01:29:36,230
että meillä oli jo
viime viikolla Scratch

1791
01:29:36,230 --> 01:29:39,350
ottamalla tarkastella joitakin muita
konstruktioita in C-- ei niitä kaikkia.

1792
01:29:39,350 --> 01:29:41,680
Mutta ideat olemme
tulleet oikeastaan ​​vain

1793
01:29:41,680 --> 01:29:45,610
korostaa käännös
yksi kieli, Scratch, toiseen, C.

1794
01:29:45,610 --> 01:29:48,470
>> Ja ajan myötä, me poimia
lisää työkaluja meidän työkalupakki,

1795
01:29:48,470 --> 01:29:49,820
niin sanotusti syntaktisesti.

1796
01:29:49,820 --> 01:29:54,190
Ja todellakin, näet, että ideat
ovat nyt melko tuttuja viime viikolla.

1797
01:29:54,190 --> 01:29:55,200
Joten tehdään tämä.

1798
01:29:55,200 --> 01:29:58,870
>> Mennään eteenpäin ja lietsoa ohjelma
joka todella käyttää joitakin ilmaisuja,

1799
01:29:58,870 --> 01:30:00,720
Boolen lauseke.

1800
01:30:00,720 --> 01:30:02,810
Anna minun mennä eteenpäin täällä
ja luo uuden tiedoston.

1801
01:30:02,810 --> 01:30:06,090
Soitan tämän condition.c.

1802
01:30:06,090 --> 01:30:09,350
>> Anna minun mennä eteenpäin ja
sisältävät CS50 kirjasto.

1803
01:30:09,350 --> 01:30:12,640
Ja anna minun mennä eteenpäin ja sisältävät
standardi IO.h meidän toimintoja,

1804
01:30:12,640 --> 01:30:14,690
ja printf, ja lisää vastaavasti.

1805
01:30:14,690 --> 01:30:18,900
Annan itselleni että boilerplate of
int main mitätön, jonka selitys me will

1806
01:30:18,900 --> 01:30:20,360
palata tulevaisuudessa.

1807
01:30:20,360 --> 01:30:23,820
>> Nyt haluan mennä eteenpäin ja antaa
Itse int kautta get int.

1808
01:30:23,820 --> 01:30:25,970
Sitten anna minun mennä eteenpäin ja tehdä tätä.

1809
01:30:25,970 --> 01:30:30,150
Haluan sanoa, jos i on less-- katsotaanpa
erottaa positiivinen, negatiivinen,

1810
01:30:30,150 --> 01:30:31,260
tai nolla-arvot.

1811
01:30:31,260 --> 01:30:36,630
>> Joten jos i on pienempi kuin nolla, anna minun
on vain tämä ohjelma yksinkertaisesti sanoa,

1812
01:30:36,630 --> 01:30:42,370
negatiivinen, kenoviiva n, muu
Jos i on suurempi kuin nolla.

1813
01:30:42,370 --> 01:30:47,030
Nyt olen tietenkin aikoo sanoa
printf positiivinen, kenoviiva n.

1814
01:30:47,030 --> 01:30:50,690
Ja sitten muu if-- voisin tehdä tätä.

1815
01:30:50,690 --> 01:30:53,410
>> Voisin tehdä, jos i on yhtä suuri kuin 0.

1816
01:30:53,410 --> 01:30:55,840
Mutta olisin päätöksenteon
Ainakin yksi virhe jo.

1817
01:30:55,840 --> 01:30:59,480
Muista, että yhtäläisyysmerkki on
erisuuri, koska me ihmiset tunnemme.

1818
01:30:59,480 --> 01:31:01,010
>> Mutta se on tehtävä operaattori.

1819
01:31:01,010 --> 01:31:05,640
Ja me emme halua ottaa 0 annetun
oikealle ja laita se i vasemmalla.

1820
01:31:05,640 --> 01:31:11,810
Joten välttää tämän sekaannuksen, tai
ehkä väärinkäyttö yhtäläisyysmerkin,

1821
01:31:11,810 --> 01:31:14,740
ihmisillä päätti joitakin vuosia sitten
että monissa ohjelmointikielissä

1822
01:31:14,740 --> 01:31:18,000
kun haluat tarkistaa tasa
vasemman ja oikean,

1823
01:31:18,000 --> 01:31:19,635
te itse käyttää yhtä kuin tasavertaisina.

1824
01:31:19,635 --> 01:31:21,010
Joten osut yhtäsuuruusmerkkiä kahdesti.

1825
01:31:21,010 --> 01:31:25,600
Kun haluat määrittää oikealta
vasemmalle, käytät yhden yhtäläisyysmerkki.

1826
01:31:25,600 --> 01:31:29,360
Jotta voisimme tehdä this-- muuta
jos i on yhtä suuri kuin nolla.

1827
01:31:29,360 --> 01:31:31,710
>> Voisin sitten mennä ja
avaan aaltosulkeita,

1828
01:31:31,710 --> 01:31:36,087
ja sanoa, printf 0, kenoviiva n, tehty.

1829
01:31:36,087 --> 01:31:38,170
Mutta muista, miten nämä
haarautuu tie voi toimia.

1830
01:31:38,170 --> 01:31:39,836
Ja todellakin, ajattele logiikka.

1831
01:31:39,836 --> 01:31:41,510
i on useita.

1832
01:31:41,510 --> 01:31:43,320
Se on kokonaisluku, erityisesti.

1833
01:31:43,320 --> 01:31:48,600
Ja se tarkoittaa se tulee olemaan vähemmän
kuin 0 tai suurempi kuin 0, tai 0.

1834
01:31:48,600 --> 01:31:51,600
On siis olemassa sellaista tämän
implisiittinen oletusmarginaali.

1835
01:31:51,600 --> 01:31:54,920
>> Ja jotta voisimme, aivan kuten
Scratch, luopua if,

1836
01:31:54,920 --> 01:31:55,747
ja vain sanoa muuta.

1837
01:31:55,747 --> 01:31:57,830
Loogisesti, jos sinulle
ohjelmoija tietää on vain

1838
01:31:57,830 --> 01:32:01,635
kolme kauhat, johon
skenaario voi fall-- ensimmäinen,

1839
01:32:01,635 --> 01:32:03,510
Toisen tai kolmannen
Tässä case-- eivät

1840
01:32:03,510 --> 01:32:07,100
vaivaudu lisäämällä ylimääräisiä tarkkuus
ja lisälogiikka siellä.

1841
01:32:07,100 --> 01:32:09,690
Vain mennä eteenpäin kanssa
Oletuksena tässä tapauksessa on muu.

1842
01:32:09,690 --> 01:32:11,950
>> Nyt mennään eteenpäin
tallennuksen jälkeen tämä, tee

1843
01:32:11,950 --> 01:32:15,760
olosuhteet piste slash conditions--
ole suuri käyttöliittymä,

1844
01:32:15,760 --> 01:32:18,914
koska en ole kehotukset
käyttäjä, kuten aiemmin mainitsin.

1845
01:32:18,914 --> 01:32:19,580
Mutta se käy hyvin.

1846
01:32:19,580 --> 01:32:20,454
Me pitää se yksinkertainen.

1847
01:32:20,454 --> 01:32:21,890
Yritetään numero 42.

1848
01:32:21,890 --> 01:32:23,240
Ja se on positiivinen.

1849
01:32:23,240 --> 01:32:26,120
Kokeillaan numero
negatiivinen 42, negatiivinen.

1850
01:32:26,120 --> 01:32:28,244
>> Kokeillaan arvo 0.

1851
01:32:28,244 --> 01:32:29,160
Ja, todellakin, se toimii.

1852
01:32:29,160 --> 01:32:33,900
Nyt näet ongelmia ennen
pitkä, testaus asiat kolme kertaa,

1853
01:32:33,900 --> 01:32:34,980
todennäköisesti riitä.

1854
01:32:34,980 --> 01:32:37,438
Et luultavasti halua testata joitakin
isompi numeroita, jotkut pienempiä

1855
01:32:37,438 --> 01:32:40,520
numeroita, jotkut kulma tapauksissa, kuten
tulemme kuvaamaan niitä.

1856
01:32:40,520 --> 01:32:42,500
>> Mutta nyt, tämä on
melko yksinkertainen ohjelma.

1857
01:32:42,500 --> 01:32:45,160
Ja olen melko varma, loogisesti,
että se kuuluu kolme tapausta.

1858
01:32:45,160 --> 01:32:49,360
Ja tosiaankin, vaikka me vain
keskitytty mahdollisten haittoja

1859
01:32:49,360 --> 01:32:53,480
epätarkkuuden ja ylivuoto, vuonna
Todellisuudessa jossa monet CS50 ongelmia,

1860
01:32:53,480 --> 01:32:56,000
emme aio huolehtia
noin, koko ajan,

1861
01:32:56,000 --> 01:32:59,050
näitä kysymyksiä ylivuodon ja
epätäsmällisyys, sillä itse asiassa C,

1862
01:32:59,050 --> 01:33:01,889
se on itse asiassa ole kovin
helppo välttää niitä asioita.

1863
01:33:01,889 --> 01:33:04,180
Jos haluat laskea
isompi, ja isompi, ja isompi,

1864
01:33:04,180 --> 01:33:07,510
se kääntyy pois on tekniikoita olet
voi käyttää, joihin liittyy usein asioita kutsutaan

1865
01:33:07,510 --> 01:33:11,240
kirjastoja, kokoelmia koodin, joka
muut ihmiset kirjoitti, että voit käyttää,

1866
01:33:11,240 --> 01:33:13,910
ja muut kielet kuten
Java ja muut, itse asiassa

1867
01:33:13,910 --> 01:33:15,800
tehdä paljon helpompaa
laskea jopa korkeampi.

1868
01:33:15,800 --> 01:33:19,810
Niin se todella on joitakin näistä vaaroista
funktio käyttämäsi kielen.

1869
01:33:19,810 --> 01:33:22,710
Ja tulevina viikkoina käymme
kuinka vaarallista C todella

1870
01:33:22,710 --> 01:33:24,950
voi olla, jos et käytä sitä oikein.

1871
01:33:24,950 --> 01:33:27,610
Mutta sieltä, ja
Python ja JavaScript, on

1872
01:33:27,610 --> 01:33:32,620
me kerros joitakin ylimääräisiä suojauksia,
ja ajaa vähemmän näiden riskien.

1873
01:33:32,620 --> 01:33:35,820
>> Joten tehdä hieman enemmän
mielenkiintoinen logiikka ohjelmaamme.

1874
01:33:35,820 --> 01:33:39,110
Joten anna minun mennä eteenpäin ja luoda
ohjelma nimeltä Looginen

1875
01:33:39,110 --> 01:33:43,804
vain jotta voin leikkiä joitakin
Varsinainen logiikka, logical.c.

1876
01:33:43,804 --> 01:33:46,870
Otan vain kopioida ja liittää joitakin
koodi aikaisemmin niin saan takaisin

1877
01:33:46,870 --> 01:33:49,950
Tämän mukava lähtökohta.

1878
01:33:49,950 --> 01:33:53,980
>> Anna minun tällä kertaa tehdä char C. Olen
aio antaa sille nimi C

1879
01:33:53,980 --> 01:33:58,510
vain koska se on tavanomainen,
saat merkin käyttäjältä.

1880
01:33:58,510 --> 01:34:00,730
Ja Teeskennelläänpä kuten
Olen osan täytäntöönpanossa

1881
01:34:00,730 --> 01:34:04,130
Kyseisen Rm ohjelman remove
ohjelma ennen kehotuksen käyttäjä

1882
01:34:04,130 --> 01:34:05,400
poistaa tiedoston.

1883
01:34:05,400 --> 01:34:06,750
Miten teemme tämän?

1884
01:34:06,750 --> 01:34:11,090
>> Haluan sanoa, jos C on yhtä suuri kuin
on yhtä suuri kuin, lainaus lainaus päättyy,

1885
01:34:11,090 --> 01:34:16,304
y, niin aion olettaa
että käyttäjä on valinnut kyllä.

1886
01:34:16,304 --> 01:34:17,470
Olen juuri menossa painoon kyllä.

1887
01:34:17,470 --> 01:34:19,440
Jos se oli todella kirjallisesti
poisto-ohjelma,

1888
01:34:19,440 --> 01:34:21,420
voisimme poistaa tiedoston
enemmän riviä koodia.

1889
01:34:21,420 --> 01:34:22,461
Mutta me pitää se yksinkertainen.

1890
01:34:22,461 --> 01:34:25,950

1891
01:34:25,950 --> 01:34:31,250
>> If c on yhtä kuin yhtä kuin n-
ja nyt täällä, aion sanoa,

1892
01:34:31,250 --> 01:34:32,980
käyttäjän on tarkoittanut mitään.

1893
01:34:32,980 --> 01:34:34,360
Ja sitten muuta, tiedätkö mitä?

1894
01:34:34,360 --> 01:34:36,200
En tiedä mitä muuta
käyttäjän tulee kirjoittaa.

1895
01:34:36,200 --> 01:34:38,533
Joten olen juuri menossa sanoa, että
että on virhe, mitä

1896
01:34:38,533 --> 01:34:40,070
hän todella kirjoitettu.

1897
01:34:40,070 --> 01:34:41,180
>> Joten mitä täällä tapahtuu?

1898
01:34:41,180 --> 01:34:44,530
On perustavanlaatuinen ero
versus mitä olen tehnyt aikaisemmin.

1899
01:34:44,530 --> 01:34:49,300
Lainausmerkkeihin, lainausmerkit, double
lainauksia, ja, vielä, heittomerkkejä,

1900
01:34:49,300 --> 01:34:50,170
heittomerkkeihin.

1901
01:34:50,170 --> 01:34:52,860
On käynyt ilmi C, että kun
haluat kirjoittaa merkkijonon,

1902
01:34:52,860 --> 01:34:56,680
et käytä lainausmerkkejä, aivan kuten olemme
käyttänyt kaikki tällä kertaa printf.

1903
01:34:56,680 --> 01:35:02,030
>> Mutta jos haluat käsitellä vain
yhden merkin, ns nieriä,

1904
01:35:02,030 --> 01:35:03,780
sitten todellisuudessa käytettiin heittomerkkeihin.

1905
01:35:03,780 --> 01:35:05,450
Ne teistä, jotka ovat ohjelmoitu
ennen, ei ehkä ole

1906
01:35:05,450 --> 01:35:07,850
oli huolestua
erottelu tietyillä kielillä.

1907
01:35:07,850 --> 01:35:09,450
In C, sillä on väliä.

1908
01:35:09,450 --> 01:35:12,560
Ja niin kun saan char ja haluan
vertailla, että char käyttäen tasavertaisten

1909
01:35:12,560 --> 01:35:18,350
on yhtä kuin jotkut kirjain, kuten y tai n, teen,
todellakin, täytyy olla puolilainausmerkkejä.

1910
01:35:18,350 --> 01:35:19,770
>> Nyt mennään eteenpäin ja tehdä tätä.

1911
01:35:19,770 --> 01:35:26,180
Mennään eteenpäin ja tekevät
looginen piste slash looginen.

1912
01:35:26,180 --> 01:35:27,305
Ja nyt Minua pyydetään.

1913
01:35:27,305 --> 01:35:30,638
Joten, oletettavasti, paremman käyttökokemuksen
itse asiassa kerro, mitä tehdä täällä.

1914
01:35:30,638 --> 01:35:33,030
Mutta aion vain sokeasti
sanoa y for kyllä, OK, mukava.

1915
01:35:33,030 --> 01:35:35,780
>> Oletetaan ajaa sen uudestaan, n ilman, mukava.

1916
01:35:35,780 --> 01:35:39,610
Oletetaan kuten tietyt ihmiset tiedän,
minun lukitusnäppäin on aivan liian usein.

1917
01:35:39,610 --> 01:35:43,740
Joten en pääoma Y, kirjoita, virhe.

1918
01:35:43,740 --> 01:35:46,130
OK, se ei ole, mitä olen odottanut.

1919
01:35:46,130 --> 01:35:48,170
Todellakin, tietokone
tekee kirjaimellisesti mitä

1920
01:35:48,170 --> 01:35:51,794
Kerroin sen do-- tarkistaa
pieniä y ja pieniä n.

1921
01:35:51,794 --> 01:35:53,960
Tämä ei tunnu hyvältä
käyttökokemuksen, vaikka.

1922
01:35:53,960 --> 01:35:59,010
Saanen kysyä ja hyväksyn
joko pienet kirjaimet tai isot kirjaimet.

1923
01:35:59,010 --> 01:36:02,090
Joten se kääntyy pois, haluat ehkä
sanoa jotain Scratch,

1924
01:36:02,090 --> 01:36:08,150
kuten kirjaimellisesti tai C yhtä suuri kuin
on yhtä kuin pääoman yhden lainattu y.

1925
01:36:08,150 --> 01:36:11,400
Osoittautuu, C ei ole
Tämän kirjaimellinen avainsanan tai.

1926
01:36:11,400 --> 01:36:12,880
>> Mutta siinä on kaksi pystysuoraa baaria.

1927
01:36:12,880 --> 01:36:15,463
Sinun täytyy pitää Shift yleensä,
Jos käytät Yhdysvaltain näppäimistö,

1928
01:36:15,463 --> 01:36:18,910
ja osui pystypalkki
avain yläpuolella enteriä.

1929
01:36:18,910 --> 01:36:22,410
Mutta tämä pystypalkki
pystyviiva tarkoittaa tai.

1930
01:36:22,410 --> 01:36:26,220
>> Jos sitä vastoin halusimme
sanoa ja, kuten Scratch,

1931
01:36:26,220 --> 01:36:28,180
voisimme tehdä ampersand ampersand.

1932
01:36:28,180 --> 01:36:31,330
Siinä ei ole mitään loogista järkeä täällä,
koska ihmisen ei mitenkään

1933
01:36:31,330 --> 01:36:37,110
kirjoitit sekä y että pieniä y
ja pääoma Y samaa merkkiä.

1934
01:36:37,110 --> 01:36:39,470
Joten vai mitä aiomme täällä.

1935
01:36:39,470 --> 01:36:46,280
>> Joten jos en tee tätä molemmissa paikoissa, tai c
on yhtä kuin yhtä suuri kuin pääoman N, nyt uusintana,

1936
01:36:46,280 --> 01:36:49,390
tehdä loogisia, aloita looginen.

1937
01:36:49,390 --> 01:36:51,200
Nyt voin kirjoittaa y.

1938
01:36:51,200 --> 01:36:53,920
Ja voin tehdä sen uudelleen
pääoma Y, tai pääoman N.

1939
01:36:53,920 --> 01:36:56,630
Ja voisin lisätä ylimääräisiä
yhdistelmät edelleen.

1940
01:36:56,630 --> 01:36:58,810
>> Joten tämä on looginen
Ohjelma sikäli kuin nyt

1941
01:36:58,810 --> 01:37:01,940
Olen tarkkailun loogisesti
tämä arvo tai tätä arvoa.

1942
01:37:01,940 --> 01:37:06,420
Enkä tarvitse välttämättä,
keksiä kaksi ifs tai muuten IFS.

1943
01:37:06,420 --> 01:37:09,960
Itse asiassa voin yhdistää joitakin
logiikan yhteen tällä tavalla.

1944
01:37:09,960 --> 01:37:11,950
Joten tämä olisi parempi
suunniteltu pelkästään

1945
01:37:11,950 --> 01:37:17,490
sanomalla, jos C on yhtä pieniä kirjaimia y,
tulostaa kyllä, muuta, jos c on yhtä kuin pääoman Y,

1946
01:37:17,490 --> 01:37:20,074
tulostaa kyllä, muuten jos c on yhtä suuri kuin
lower-- Toisin sanoen,

1947
01:37:20,074 --> 01:37:21,990
sinun ei tarvitse olla
enemmän ja enemmän oksia.

1948
01:37:21,990 --> 01:37:28,840
Voit yhdistää joitakin vastaavia
oksat loogisesti, koska tällä tavalla.

1949
01:37:28,840 --> 01:37:34,150
>> Joten katsomaan vain yhdellä
lopullinen ainesosa, yksi lopullisen rakenteen,

1950
01:37:34,150 --> 01:37:34,847
että C avulla.

1951
01:37:34,847 --> 01:37:36,930
Ja tulemme takaisin
Tulevaisuudessa muille edelleen.

1952
01:37:36,930 --> 01:37:41,400
Ja sitten me päätellä tarkastelemalla
at ei oikeellisuutta code--

1953
01:37:41,400 --> 01:37:46,070
saada koodin work-- mutta suunnittelu
koodia, ja istuttaa ne siemenet varhain.

1954
01:37:46,070 --> 01:37:51,337
>> Joten anna minun mennä eteenpäin ja
avata uuden tiedoston täällä.

1955
01:37:51,337 --> 01:37:51,920
Tiedätkö mitä?

1956
01:37:51,920 --> 01:37:54,450
Aion uudelleen toteuttamaan
että samaa ohjelmaa,

1957
01:37:54,450 --> 01:37:55,940
mutta eri konstruktia.

1958
01:37:55,940 --> 01:38:00,110
>> Haluan siis nopeasti antaa itselleni
pääsy ovat CS50.h

1959
01:38:00,110 --> 01:38:04,150
että CS50 kirjasto,
standardi Io.h varten printf.

1960
01:38:04,150 --> 01:38:06,510
Anna minulle int main mitätön.

1961
01:38:06,510 --> 01:38:09,310
Ja sitten täällä, anna
minun mennä eteenpäin ja tehdä tätä.

1962
01:38:09,310 --> 01:38:12,010
>> Char c saa päästä nieriä, aivan kuten ennenkin.

1963
01:38:12,010 --> 01:38:16,770
Ja aion käyttää uutta konstruktio
now-- kytkin, mitä merkki?

1964
01:38:16,770 --> 01:38:19,820
Joten kytkin on ikään kuin
kytkentä juna kappaleita.

1965
01:38:19,820 --> 01:38:22,070
Tai oikeastaan, se on eräänlainen
if else, jos if,

1966
01:38:22,070 --> 01:38:23,980
mutta kirjoitettu hieman eri tavalla.

1967
01:38:23,980 --> 01:38:25,490
>> Kytkin näyttää tältä.

1968
01:38:25,490 --> 01:38:29,060
Sinulla on kytkin, ja mitä sitten
merkki tai numero, jonka haluat katsoa,

1969
01:38:29,060 --> 01:38:32,000
Sitten jotkut aaltosulkeita like in
Scratch, sano tehdä tätä kamaa.

1970
01:38:32,000 --> 01:38:33,480
Ja sitten on erilaisia ​​tapauksia.

1971
01:38:33,480 --> 01:38:34,830
>> Et käytä jos ja muuta.

1972
01:38:34,830 --> 01:38:37,050
Sinä kirjaimellisesti käyttää sanaa tapaus.

1973
01:38:37,050 --> 01:38:38,790
Ja sanoisit jotain tällaista.

1974
01:38:38,790 --> 01:38:43,820
>> Joten kyseessä on pieniä y,
tai jos kyseessä on pääoman Y,

1975
01:38:43,820 --> 01:38:47,350
mennä eteenpäin ja tulostaa kyllä.

1976
01:38:47,350 --> 01:38:49,020
Ja sitten puhkeaa kytkimen.

1977
01:38:49,020 --> 01:38:49,580
Se siitä.

1978
01:38:49,580 --> 01:38:50,880
Olemme valmiit.

1979
01:38:50,880 --> 01:38:57,270
>> If, niin sanotusti,
pienet kirjaimet n, tai pääoman N,

1980
01:38:57,270 --> 01:39:02,560
sitten mennä eteenpäin ja tulostaa
out ei, ja sitten tauko.

1981
01:39:02,560 --> 01:39:08,022
Else-- ja tällainen on
oletusmarginaali indeed-- printf error--

1982
01:39:08,022 --> 01:39:10,980
ja vain hyvä toimenpide, vaikka
loogisesti tämä tauko ei ole välttämätöntä

1983
01:39:10,980 --> 01:39:12,896
koska olemme lopussa
kytkimen tapauksessa,

1984
01:39:12,896 --> 01:39:14,520
Olen nyt murtaa pois kytkin.

1985
01:39:14,520 --> 01:39:16,280
Joten tämä näyttää hieman erilainen.

1986
01:39:16,280 --> 01:39:18,272
>> Mutta, loogisesti, se on
vastaa todellisuudessa.

1987
01:39:18,272 --> 01:39:19,980
Ja miksi käytät
yksi yli muiden?

1988
01:39:19,980 --> 01:39:23,220
Joskus vain henkilökohtaisista mieltymyksistä,
joskus estetiikka,

1989
01:39:23,220 --> 01:39:25,420
jos Vilkaisen tämän
Nyt on jotain

1990
01:39:25,420 --> 01:39:27,510
sanottava, että
luettavuus tämän koodin.

1991
01:39:27,510 --> 01:39:30,690
Siis, puhumattakaan siitä, että tämä
koodi on uusi monille meistä huoneessa.

1992
01:39:30,690 --> 01:39:33,515
>> Mutta se juuri sellainen on melko.

1993
01:39:33,515 --> 01:39:37,760
Katsos pieniä y, pääoma Y,
pienet kirjaimet n, pääoma N oletus,

1994
01:39:37,760 --> 01:39:40,150
se juuri sellainen hyppää
ulos sinua tavalla

1995
01:39:40,150 --> 01:39:42,200
että, luultavasti, ehkä
edellisessä esimerkissä

1996
01:39:42,200 --> 01:39:45,780
kanssa IFS ja pystypalkit,
ja muuten IFS, ei välttämättä ole.

1997
01:39:45,780 --> 01:39:51,600
Eli tämä on oikeastaan ​​kyse henkilökohtaisista
valinta, todella, tai luettavuutta,

1998
01:39:51,600 --> 01:39:52,360
koodin.

1999
01:39:52,360 --> 01:39:58,230
>> Mutta kannalta toiminnallisuus, haluan
mennä eteenpäin ja tehdä kytkin, piste slash

2000
01:39:58,230 --> 01:40:05,830
kytkin, ja nyt kirjoittaa pieniä kirjaimia y,
pääoma Y, pienet n, pääoman N,

2001
01:40:05,830 --> 01:40:09,250
David, uudelleen koska se on
ei yksi merkki.

2002
01:40:09,250 --> 01:40:12,050
Tehdään x, virhe, odotetusti.

2003
01:40:12,050 --> 01:40:15,640
Ja logically-- ja tämä on jotain
Kannustan in general-- jopa

2004
01:40:15,640 --> 01:40:17,790
vaikka olemme vain naarmuttamista
pinta joitakin näistä ominaisuuksista.

2005
01:40:17,790 --> 01:40:20,560
>> Ja se ei ehkä ole ilmeinen, kun
itse istuutua näppäimistö,

2006
01:40:20,560 --> 01:40:21,370
miten tämä toimii?

2007
01:40:21,370 --> 01:40:22,240
Mitä tämä tekee?

2008
01:40:22,240 --> 01:40:25,630
Kaunis asia ottaa
kannettavan tietokoneen tai työpöydällä, tai käyttää

2009
01:40:25,630 --> 01:40:29,290
tietokoneeseen, jossa on kääntäjä,
ja koodieditori näin,

2010
01:40:29,290 --> 01:40:32,990
on voit melkein aina vastata näihin
kysymykset itse vain yrittää.

2011
01:40:32,990 --> 01:40:36,570
>> Esimerkiksi jos retorisen
kysymys käsillä olivat,

2012
01:40:36,570 --> 01:40:39,540
mitä tapahtuu, jos unohdat
tauko lausuntoja?

2013
01:40:39,540 --> 01:40:41,400
Joka on itse asiassa
hyvin yleinen asia tehdä,

2014
01:40:41,400 --> 01:40:43,540
koska se ei näytä
kuten todella tarvitset niitä.

2015
01:40:43,540 --> 01:40:46,790
He eivät todellakaan kruunaavat
ajatellut kuten suluissa tai kihara

2016
01:40:46,790 --> 01:40:47,714
ahdin tekee.

2017
01:40:47,714 --> 01:40:49,630
Mennään eteenpäin ja
kääntää koodin ja nähdä.

2018
01:40:49,630 --> 01:40:53,690
Joten kytkin, piste slash kytkin.

2019
01:40:53,690 --> 01:40:56,435
Katsotaan kirjoittaa pienillä kirjaimilla
y, ylhäältä tapauksessa Enter.

2020
01:40:56,435 --> 01:40:59,390

2021
01:40:59,390 --> 01:41:00,700
Joten olen kirjoittanut y.

2022
01:41:00,700 --> 01:41:04,420
>> Ohjelma sanoi kyllä, ei, virhe,
ikään kuin se muuttaa käsitystään.

2023
01:41:04,420 --> 01:41:09,280
Mutta se sellainen oli, koska mitä tapahtuu
kytkimellä on ensimmäinen tapaus, joka

2024
01:41:09,280 --> 01:41:13,899
ottelu tarkoittaa sitä, hei tietokone,
suorittaa kaikki koodi alla.

2025
01:41:13,899 --> 01:41:16,690
Ja jos et sano taukoa, tai
älä sano taukoa, tai eivät sano taukoa,

2026
01:41:16,690 --> 01:41:19,540
tietokone räjäyttää
läpi kaikki nämä rivit

2027
01:41:19,540 --> 01:41:22,779
ja suorittaa ne kaikki kunnes
se pääsee että kihara ahdin.

2028
01:41:22,779 --> 01:41:24,320
Joten jarruilla todellakin tarpeen.

2029
01:41:24,320 --> 01:41:27,120
Mutta takeaway tässä, kun
epävarma, kokeilla jotain.

2030
01:41:27,120 --> 01:41:29,510
Ehkä tallentaa koodin ensimmäinen,
tai tallentaa sen ylimääräinen tiedostoon

2031
01:41:29,510 --> 01:41:32,930
jos olet todella huolissaan
Messing ja ottaa talteen

2032
01:41:32,930 --> 01:41:34,430
työtä, jota tiedät toimivan.

2033
01:41:34,430 --> 01:41:35,410
>> Mutta yritä asiat.

2034
01:41:35,410 --> 01:41:38,074
Ja älä niin pelätä, ehkä,
mitä tietokone voisi tehdä,

2035
01:41:38,074 --> 01:41:39,490
tai että saatat rikkoa jotain.

2036
01:41:39,490 --> 01:41:42,790
Voit aina palata takaisin
jossain aiemmassa versiossa.

2037
01:41:42,790 --> 01:41:45,640
>> Joten lopettaa katsomalla
suunnitteluvaiheessa koodia.

2038
01:41:45,640 --> 01:41:49,020
Meillä on tämä kyky nyt kirjoittaa
olosuhteet, ja kirjoittaa silmukoita,

2039
01:41:49,020 --> 01:41:50,850
ja muuttujia, ja puhelutoiminnot.

2040
01:41:50,850 --> 01:41:54,590
Joten rehellisesti, olemme tavallaan takaisin
jossa olimme viikko sitten Scratch,

2041
01:41:54,590 --> 01:42:00,120
vaikkakin vähemmän pakottavia tekstisisällön
ympäristö kuin Scratch sallii.

2042
01:42:00,120 --> 01:42:03,990
>> Mutta huomaa, miten nopeasti olemme hankkinut
että sanastoa, vaikka se on

2043
01:42:03,990 --> 01:42:07,570
vie vähän aikaa uppoavat,
jotta voimme nyt käyttää tätä sanastoa

2044
01:42:07,570 --> 01:42:10,320
kirjoittaa enemmän mielenkiintoisia ohjelmia.

2045
01:42:10,320 --> 01:42:12,940
Ja sallikaa vauva askel
kohti tuota, seuraavasti.

2046
01:42:12,940 --> 01:42:14,890
Anna minun mennä eteenpäin ja
luo uuden tiedoston täällä.

2047
01:42:14,890 --> 01:42:17,750
>> Aion kutsua tätä
prototype.c, ja ottaa käyttöön

2048
01:42:17,750 --> 01:42:20,954
ensimmäistä kertaa, kyky
tehdä omia toimintoja.

2049
01:42:20,954 --> 01:42:22,870
Jotkut teistä saattaa olla
tehnyt tämän Scratch,

2050
01:42:22,870 --> 01:42:25,430
jolloin voit luoda
omia lohkojen Scratch,

2051
01:42:25,430 --> 01:42:27,892
ja vedä ne paikoilleen
minne haluat C.

2052
01:42:27,892 --> 01:42:30,100
Ja useimmissa ohjelmointi
kieliä, voit tehdä juuri

2053
01:42:30,100 --> 01:42:33,580
that-- tehdä omia toimintoja,
jos ne eivät ole jo olemassa.

2054
01:42:33,580 --> 01:42:38,660
>> Niinpä esimerkiksi, anna minun mennä eteenpäin
ja ovat CS50.h, ja ne sisältävät

2055
01:42:38,660 --> 01:42:43,110
standardi IO.h, int main mitätön.

2056
01:42:43,110 --> 01:42:46,020
Ja nyt meillä on
paikkamerkkikentät valmiina.

2057
01:42:46,020 --> 01:42:48,550
En pidä tulostus asioita
kuten ihmisten nimet tänään.

2058
01:42:48,550 --> 01:42:51,910
Ja se tuntuu like--
ei olisi mukavaa, jos siellä

2059
01:42:51,910 --> 01:42:53,936
oli toiminto nimeltään nimenselvennys?

2060
01:42:53,936 --> 01:42:55,060
En tarvitse käyttää printf.

2061
01:42:55,060 --> 01:42:56,976
En tarvitse muistaa
kaikki muotoa koodit.

2062
01:42:56,976 --> 01:43:00,050
Miksi en, tai miksi
ei joku ennen minua,

2063
01:43:00,050 --> 01:43:02,980
luo toiminto nimeltään print
nimi, joka annetaan jonkin nimen,

2064
01:43:02,980 --> 01:43:03,980
yksinkertaisesti tulostaa sen?

2065
01:43:03,980 --> 01:43:08,700
>> Toisin sanoen, jos sanon, hei,
tietokone, anna minulle merkkijono

2066
01:43:08,700 --> 01:43:11,870
pyytämällä käyttäjä tällaista,
kautta CS50: n get merkkijono.

2067
01:43:11,870 --> 01:43:15,090
Hei, tietokone, laita se merkkijono
muuttujaa vasemmalla puolella,

2068
01:43:15,090 --> 01:43:16,150
ja kutsuvat sitä s.

2069
01:43:16,150 --> 01:43:22,150
Ja sitten, hei tietokone, mennä eteenpäin
ja tulostaa henkilön nimen, tehty.

2070
01:43:22,150 --> 01:43:26,240
>> Nyt, se olisi mukavaa, koska
Ohjelman osuvasti nimetty,

2071
01:43:26,240 --> 01:43:29,170
kertoo minulle mitä sen pitäisi tehdä
Poiketen näistä funktion nimiä.

2072
01:43:29,170 --> 01:43:32,930
Anna minun mennä ja tehdä prototyyppi, Enter.

2073
01:43:32,930 --> 01:43:34,930
Ja valitettavasti
tämä ei aio lentää.

2074
01:43:34,930 --> 01:43:39,430
>> Prototype.c, rivi 7, merkki
5, virhe, implisiittinen ilmoitus

2075
01:43:39,430 --> 01:43:42,960
Funktion nimenselvennys
on pätemätön C99, C99

2076
01:43:42,960 --> 01:43:45,130
tarkoittaen versio C
joka tuli ulos vuonna 1999.

2077
01:43:45,130 --> 01:43:45,730
Siinä kaikki.

2078
01:43:45,730 --> 01:43:48,780
>> Joten en tiedä mitä
kaikki tämä tarkoittaa vielä.

2079
01:43:48,780 --> 01:43:50,810
Mutta en tunnista virhe punaisena.

2080
01:43:50,810 --> 01:43:51,770
Se on aika selvää.

2081
01:43:51,770 --> 01:43:53,769
>> Ja näyttää siltä, ​​että
vihreä merkki tästä,

2082
01:43:53,769 --> 01:43:57,520
ongelma on painatuksella nimi, avoin
paren s, lähellä paren, puolipisteellä.

2083
01:43:57,520 --> 01:44:01,800
Mutta implisiittinen ilmoitus
toiminto näimme lyhyesti aikaisemmin.

2084
01:44:01,800 --> 01:44:04,880
Tämä tarkoittaa yksinkertaisesti, että Clang
ei tiedä mitä tarkoitan.

2085
01:44:04,880 --> 01:44:09,000
>> Olen käyttänyt sanaston sanaa, että se on
koskaan nähnyt tai opetettu ennen.

2086
01:44:09,000 --> 01:44:11,950
Ja niin minun täytyy opettaa sitä
mitä tämä toiminto tarkoittaa.

2087
01:44:11,950 --> 01:44:13,590
Joten aion mennä eteenpäin ja tehdä se.

2088
01:44:13,590 --> 01:44:17,970
>> Aion mennä eteenpäin ja toteuttaa
oma toiminto nimeltään Print Name.

2089
01:44:17,970 --> 01:44:24,720
Ja aion sanoa, seuraavasti, että
se tekee näin, printf, hei, prosenttia

2090
01:44:24,720 --> 01:44:27,760
s, kenoviiva n, nimi, puolipisteellä.

2091
01:44:27,760 --> 01:44:29,250
Joten mitä minä juuri tehdä?

2092
01:44:29,250 --> 01:44:31,325
>> Joten se kääntyy pois, jotta
toteuttaa oma toiminta,

2093
01:44:31,325 --> 01:44:33,845
me tavallaan lainata joidenkin
sama rakenne kuin pääasiallisena

2094
01:44:33,845 --> 01:44:35,720
että olemme juuri olleet
itsestään selvänä, ja minä

2095
01:44:35,720 --> 01:44:37,730
tietävät vain kopioimalla ja
liittämällä melko paljon, mitä

2096
01:44:37,730 --> 01:44:39,170
Olen kirjoittanut aikaisemmin.

2097
01:44:39,170 --> 01:44:40,570
Mutta huomaa kuvio täällä.

2098
01:44:40,570 --> 01:44:43,750
Int, Main, Void, me kiusaa toisistaan
ennen pitkää, mitä se todella tarkoittaa.

2099
01:44:43,750 --> 01:44:46,160
>> Mutta tänään, vain
huomaa rinnakkaisuus.

2100
01:44:46,160 --> 01:44:48,210
Void, tulostaa nimi,
string nimi, joten ei

2101
01:44:48,210 --> 01:44:50,310
violetti avainsanan, joka
aiomme aloittaa

2102
01:44:50,310 --> 01:44:54,067
soittamalla palautuva, nimi
toiminnon, ja sitten tulo.

2103
01:44:54,067 --> 01:44:56,400
Joten itse asiassa, voimme tislata
tällainen kuten viime viikolla

2104
01:44:56,400 --> 01:44:59,030
koska tämä on nimi tai
algoritmi koodin olemme

2105
01:44:59,030 --> 01:45:00,761
menossa write--
algoritmi taustalla

2106
01:45:00,761 --> 01:45:02,010
koodi aiomme kirjoittaa.

2107
01:45:02,010 --> 01:45:03,180
>> Tämä on sen panos.

2108
01:45:03,180 --> 01:45:04,670
Tämä on sen ulostulo.

2109
01:45:04,670 --> 01:45:08,730
Tämä toiminto, tulostaa nimi, on
tarkoituksena on ottaa merkkijonon nimeltään nimi,

2110
01:45:08,730 --> 01:45:11,350
tai mitä tahansa, kuten syöttö, ja sitten mitätön.

2111
01:45:11,350 --> 01:45:13,904
Se ei palaa mitään,
kuten saada merkkijono tai saada int tekee.

2112
01:45:13,904 --> 01:45:15,570
Joten se tulee luovuttaa minulle jotain takaisin.

2113
01:45:15,570 --> 01:45:17,960
Se on vain olemaan
sivuvaikutus, niin sanotusti,

2114
01:45:17,960 --> 01:45:19,570
tulostus henkilön nimen.

2115
01:45:19,570 --> 01:45:22,260
Joten huomata, rivi 7, I
voi soittaa nimenselvennys.

2116
01:45:22,260 --> 01:45:25,920
Linja 10, voin määritellä
tai toteuttaa nimenselvennys.

2117
01:45:25,920 --> 01:45:28,450
Mutta valitettavasti se ei riitä.

2118
01:45:28,450 --> 01:45:31,230
>> Anna minun mennä eteenpäin ja
kääntää tämän tallennuksen jälkeen.

2119
01:45:31,230 --> 01:45:33,910
Whoa, nyt, olen tehnyt sen
pahempaa, se näyttäisi.

2120
01:45:33,910 --> 01:45:37,027
Joten implisiittinen ilmoitus
toiminto tulostaa nimi on virheellinen.

2121
01:45:37,027 --> 01:45:38,360
Ja taas on enemmän virheitä.

2122
01:45:38,360 --> 01:45:41,430
Mutta kun varoitettiin aikaisemmin, jopa
jos saat hukkua,

2123
01:45:41,430 --> 01:45:44,850
tai hieman surullista nähdä niin monta
virheitä, keskittyä vain ensimmäiseen

2124
01:45:44,850 --> 01:45:47,500
aluksi, koska se voi vain
on ollut kerrannaisvaikutuksia.

2125
01:45:47,500 --> 01:45:51,970
Joten C, tai Clang tarkemmin,
ei vieläkään tunnista nimenselvennys.

2126
01:45:51,970 --> 01:45:54,580
>> Ja se johtuu Clang,
suunnittelun, on tavallaan tyhmä.

2127
01:45:54,580 --> 01:45:56,280
Se tekee vain mitä kerrot sitä tekemään.

2128
01:45:56,280 --> 01:46:00,950
Ja se vain tekee niin siinä järjestyksessä
jossa kerrot sitä tekemään.

2129
01:46:00,950 --> 01:46:05,270
>> Olen siis määritellyt tärkeimmät linjalla neljä,
kuten olemme tehneet melko usein.

2130
01:46:05,270 --> 01:46:07,980
Olen määritellyt print nimi rivillä 10.

2131
01:46:07,980 --> 01:46:11,793
Mutta olen yrittänyt käyttää
print nimi rivillä seitsemän.

2132
01:46:11,793 --> 01:46:13,670
>> Se liian pian, ei ole vielä olemassa.

2133
01:46:13,670 --> 01:46:19,150
Joten en voinut olla fiksu, ja olla,
OK, joten tehdään vain pelata yhdessä,

2134
01:46:19,150 --> 01:46:23,680
ja siirrä nimenselvennys ylös
täällä, ja uudelleen koota.

2135
01:46:23,680 --> 01:46:24,550
Herranjumala.

2136
01:46:24,550 --> 01:46:25,260
Se toimi.

2137
01:46:25,260 --> 01:46:26,670
Se oli niin yksinkertaista.

2138
01:46:26,670 --> 01:46:28,120
>> Mutta logiikka on juuri näin.

2139
01:46:28,120 --> 01:46:30,870
Sinun täytyy opettaa Clang mitä se
on määrittelemällä funktion ensimmäinen.

2140
01:46:30,870 --> 01:46:31,920
Sitten voit käyttää sitä.

2141
01:46:31,920 --> 01:46:33,940
Mutta suoraan sanoen, tämä tuntuu
kuten kaltevalle pinnalle.

2142
01:46:33,940 --> 01:46:35,773
>> Joten joka kerta Juoksen
osaksi ongelma, olen vain

2143
01:46:35,773 --> 01:46:39,450
menossa esiin ja kopioi koodi
Kirjoitin, leikkaa se ja liitä se täällä.

2144
01:46:39,450 --> 01:46:41,370
Ja varmasti, voisimme
keksiä joitakin skenaarioita

2145
01:46:41,370 --> 01:46:43,286
jossa yksi toiminto saattaisi
täytyy soittaa toiselle.

2146
01:46:43,286 --> 01:46:46,030
Ja et vain voi laittaa jokaisen
toiminto kaikkien muiden yläpuolelle.

2147
01:46:46,030 --> 01:46:47,930
>> Joten se kääntyy pois siellä n
parempi ratkaisu.

2148
01:46:47,930 --> 01:46:50,100
Voimme jättää tämän olla.

2149
01:46:50,100 --> 01:46:53,677
Ja rehellisesti, se on yleensä mukava,
ja kätevä, ja hyvä muotoilu

2150
01:46:53,677 --> 01:46:56,760
laittaa tärkein ensin, koska, jälleen,
Tärkein aivan kuten silloin, kun vihreä lippu napsautetaan,

2151
01:46:56,760 --> 01:46:59,027
että on toiminto,
saa suorittaa oletusarvoisesti.

2152
01:46:59,027 --> 01:47:01,110
Joten ehkä myös laittaa
se yläosassa tiedoston

2153
01:47:01,110 --> 01:47:03,560
niin, että kun tai
muut ihmisen tarkastellaan tiedosto

2154
01:47:03,560 --> 01:47:06,360
Tiedätkö mitä tapahtuu
vain lukemalla tärkein ensin.

2155
01:47:06,360 --> 01:47:15,360
Joten se kääntyy pois, voimme kertoa Clang
ennakoivasti, hei, Clang, rivillä neljä,

2156
01:47:15,360 --> 01:47:17,940
Lupaan toteuttaa
toiminto nimeltään Tulosta

2157
01:47:17,940 --> 01:47:22,600
Nimi joka vie merkkijonon kutsutaan nimellä
syötteenä, ja palaa mitään, mitätön.

2158
01:47:22,600 --> 01:47:24,770
Ja minä kiertää
sen täytäntöönpanoa myöhemmin.

2159
01:47:24,770 --> 01:47:25,680
>> Täältä tulee Main.

2160
01:47:25,680 --> 01:47:29,130
Tärkeimmät nyt rivillä 9 voi käyttää
Tulosta Name koska Clang

2161
01:47:29,130 --> 01:47:32,600
on luottavainen, että lopulta,
se kohtaavat määritelmän

2162
01:47:32,600 --> 01:47:34,880
täytäntöönpanon Print Name.

2163
01:47:34,880 --> 01:47:37,390
Joten kun tallentavan tiedostoa, anna
minun mennä eteenpäin ja tehdä prototyyppi,

2164
01:47:37,390 --> 01:47:38,498
näyttää hyvältä tällä kertaa.

2165
01:47:38,498 --> 01:47:43,470
Dot slash, prototyyppi, haluan
mennä eteenpäin ja kirjoittaa nimen.

2166
01:47:43,470 --> 01:47:48,440
David, hei David, Zamila, hei
Zamila, ja todellakin nyt se toimii.

2167
01:47:48,440 --> 01:47:52,200
>> Joten ainesosa tässä on se, että olemme
teki mukautetun funktion, kuten mukautetun

2168
01:47:52,200 --> 01:47:54,219
Scratch lohko me kutsuvat sitä.

2169
01:47:54,219 --> 01:47:57,010
Mutta toisin Scratch jossa voit
vain luoda sen ja alkaa käyttää sitä,

2170
01:47:57,010 --> 01:47:59,330
Nyt meidän täytyy olla
hieman pikkutarkka,

2171
01:47:59,330 --> 01:48:03,410
ja itse kouluttaa Clang
käyttää, tai odottaa sitä.

2172
01:48:03,410 --> 01:48:09,140
Nyt sivuhuomautuksena, miksi koko ajan on
me olleet vain sokeasti uskoon lukien

2173
01:48:09,140 --> 01:48:12,170
CS50.h, ja myös vakio IO.h?

2174
01:48:12,170 --> 01:48:15,190
>> No, se kääntyy pois,
joukossa muutamia muita asioita,

2175
01:48:15,190 --> 01:48:18,550
kaikki se näissä dot h
tiedostoja, jotka sattuvat olemaan tiedostoja.

2176
01:48:18,550 --> 01:48:20,460
He header-tiedostoja, niin sanotusti.

2177
01:48:20,460 --> 01:48:23,270
He vielä kirjoitettu C. Mutta
he erityyppinen tiedosto.

2178
01:48:23,270 --> 01:48:28,690
>> Nyt voit melko paljon olettaa
että kaikki mikä on sisällä CS50.h

2179
01:48:28,690 --> 01:48:33,360
on noin yksi-alukset, kuten tämä, ei
Toimintojen nimeltään Print Name,

2180
01:48:33,360 --> 01:48:36,840
mutta Get String, Get
Float, ja muutama muu.

2181
01:48:36,840 --> 01:48:41,510
Ja on samanlaisia ​​prototyyppejä,
yksi vaipat sisällä standardin IO.h

2182
01:48:41,510 --> 01:48:46,241
varten printf, joka on nyt
oma Tulosta nimi -toiminto.

2183
01:48:46,241 --> 01:48:49,490
Eli toisin sanoen, tämä koko ajan olemme
juuri sokeasti kopioida ja liittää

2184
01:48:49,490 --> 01:48:51,780
sisällyttää tämän, sisältävät
että, mitä tapahtuu?

2185
01:48:51,780 --> 01:48:55,310
Nämä ovat vain sellainen vihjeitä
että kalahtaa, mitä toimintoja

2186
01:48:55,310 --> 01:49:00,170
ovat todellakin täytäntöön, vain
muualla eri tiedostoja

2187
01:49:00,170 --> 01:49:02,440
muualla järjestelmässä.

2188
01:49:02,440 --> 01:49:05,160
>> Niinpä olemme ottaneet käyttöön nimenselvennys.

2189
01:49:05,160 --> 01:49:07,910
Se on tämä sivuvaikutus
tulostus jotain ruudulla.

2190
01:49:07,910 --> 01:49:10,170
Mutta se ei varsinaisesti
käsi minulle jotain takaisin.

2191
01:49:10,170 --> 01:49:12,200
Miten edetä
toteuttamista varten, joka

2192
01:49:12,200 --> 01:49:14,510
ei käsi minulle jotain takaisin?

2193
01:49:14,510 --> 01:49:15,580
>> No, kokeile tätä.

2194
01:49:15,580 --> 01:49:21,360
Anna minun mennä eteenpäin ja toteuttaa
niminen tiedosto return.c

2195
01:49:21,360 --> 01:49:24,530
jotta voimme osoittaa, miten jotain
kuten Get String, tai Get Int,

2196
01:49:24,530 --> 01:49:27,340
on todella palaamassa
jotain takaisin käyttäjälle.

2197
01:49:27,340 --> 01:49:29,840
Mennään eteenpäin ja määritellä int main mitätön.

2198
01:49:29,840 --> 01:49:33,230
>> Ja jälleen, että tulevaisuudessa käymme
selittää, mitä se int ja että void

2199
01:49:33,230 --> 01:49:34,090
on todella tekee.

2200
01:49:34,090 --> 01:49:35,840
Mutta tänään käymme
pitää itsestäänselvyytenä.

2201
01:49:35,840 --> 01:49:39,970
Aion mennä eteenpäin ja printf,
hyvä käyttäjäkokemus, x on.

2202
01:49:39,970 --> 01:49:44,360
Ja sitten aion odottaa
Käyttäjä antaa minulle x get int.

2203
01:49:44,360 --> 01:49:48,459
>> Ja sitten aion mennä eteenpäin
ja tulostaa x neliöön.

2204
01:49:48,459 --> 01:49:50,500
Joten kun on vain
näppäimistö, ihmiset yleisesti

2205
01:49:50,500 --> 01:49:52,600
käyttää pikku porkkana
symboli näppäimistöllä

2206
01:49:52,600 --> 01:49:55,330
edustamaan valta
yhdessä tai että eksponentti.

2207
01:49:55,330 --> 01:49:58,960
Joten x potenssiin on läsnä i.

2208
01:49:58,960 --> 01:50:00,660
>> Ja nyt aion tehdä tämän.

2209
01:50:00,660 --> 01:50:03,940
Voisin do-- mitä x
potenssiin? x potenssiin on x kertaa x.

2210
01:50:03,940 --> 01:50:06,690
>> Ja teimme joitakin
aika sitten jo tänään.

2211
01:50:06,690 --> 01:50:08,730
Tämä ei tunnu
kovin paljon edistystä.

2212
01:50:08,730 --> 01:50:09,570
Tiedätkö mitä?

2213
01:50:09,570 --> 01:50:13,100
Katsotaan hyödyntää jotakin siitä ajatuksesta
viime aika abstraktio.

2214
01:50:13,100 --> 01:50:16,080
>> Eikö olisi mukavaa, jos
siellä on toiminto nimeltään

2215
01:50:16,080 --> 01:50:18,460
neliö, että juuri näin?

2216
01:50:18,460 --> 01:50:20,640
Se on edelleen, on lopussa
päivä, tekee saman matematiikka.

2217
01:50:20,640 --> 01:50:22,410
Mutta katsotaanpa abstrakti
pois ajatusta ottaen

2218
01:50:22,410 --> 01:50:25,280
yksi numero kerrottuna
toinen, ja vain antaa sille nimi,

2219
01:50:25,280 --> 01:50:27,360
kuten neliö tämä arvo.

2220
01:50:27,360 --> 01:50:29,560
>> Ja, toisin sanoen,
C, nyt luoda funktion

2221
01:50:29,560 --> 01:50:32,660
kutsutaan neliön että juuri näin.

2222
01:50:32,660 --> 01:50:34,600
Se tulee kutsua neliö.

2223
01:50:34,600 --> 01:50:35,790
Se tulee ottaa int.

2224
01:50:35,790 --> 01:50:37,820
Ja me tulee juuri
kutsuvat sitä n oletusarvoisesti.

2225
01:50:37,820 --> 01:50:39,403
>> Mutta voisimme kutsua sitä mitä me haluamme.

2226
01:50:39,403 --> 01:50:42,900
Ja kaikki se menee
do, kirjaimellisesti, on paluu

2227
01:50:42,900 --> 01:50:45,810
tulos n kertaa n.

2228
01:50:45,810 --> 01:50:48,980
Mutta koska se on
palaavat jotain, joka

2229
01:50:48,980 --> 01:50:53,690
on avainsana violetti olemme
koskaan ennen nähnyt, I rivillä 11,

2230
01:50:53,690 --> 01:50:55,410
voi vain sanoa mitätön tällä kertaa.

2231
01:50:55,410 --> 01:51:01,320
>> Void, esimerkissä olemme juuri nähnyt
pikemminkin tulostaa nimi, tarkoittaa vain sitä,

2232
01:51:01,320 --> 01:51:02,190
tee jotain.

2233
01:51:02,190 --> 01:51:04,170
Mutta älä käsi jotain takaisin.

2234
01:51:04,170 --> 01:51:06,790
Tässä tapauksessa en halua
palata n kertaa n,

2235
01:51:06,790 --> 01:51:08,460
tai mitä se on, että numero.

2236
01:51:08,460 --> 01:51:12,460
>> Joten en voi sanoa, hei, tietokone,
Palaan mitään, mitätön.

2237
01:51:12,460 --> 01:51:16,166
Se tulee palata, luonteeltaan, int.

2238
01:51:16,166 --> 01:51:17,790
Ja niin se on kaikki mitä on tekeillä.

2239
01:51:17,790 --> 01:51:20,070
>> Panos lähtöruutuun
tulee olemaan int.

2240
01:51:20,070 --> 01:51:24,760
Ja jotta voimme käyttää sitä, se on
on nimi, N. Se tulee lähtö

2241
01:51:24,760 --> 01:51:26,240
int, joka ei tarvitse nimeä.

2242
01:51:26,240 --> 01:51:29,590
Voimme jättää tärkein, tai kuka on
käyttävät minua muistamaan tätä arvoa, jos me

2243
01:51:29,590 --> 01:51:31,120
haluavat omalla vaihteleva.

2244
01:51:31,120 --> 01:51:33,230
>> Ja, jälleen, ainoa uusi
avainsana tässä Return.

2245
01:51:33,230 --> 01:51:34,480
Ja olen juuri tekemässä joitakin matematiikkaa.

2246
01:51:34,480 --> 01:51:41,825
Jos halusin olla tarpeetonta,
Voisin sanoa int tuote saa n kertaa n.

2247
01:51:41,825 --> 01:51:44,170
>> Ja sitten voisi sanoa, palauta tuote.

2248
01:51:44,170 --> 01:51:47,360
Mutta jälleen kerran, minun kohta aikaisempana
tämä vain ei ole hyvä design--

2249
01:51:47,360 --> 01:51:50,060
kuten, miksi käyttöön nimi,
symboli, kuten tuote,

2250
01:51:50,060 --> 01:51:51,570
vain välittömästi palauttaa sen?

2251
01:51:51,570 --> 01:51:53,670
Se on vähän puhtaampi,
hieman tiukempi, niin

2252
01:51:53,670 --> 01:51:59,380
puhua, vain sanoa paluu n kertaa
n, päästä eroon tästä linjan kokonaan.

2253
01:51:59,380 --> 01:52:02,860
>> Ja se on vain vähemmän koodia lukea,
vähemmän mahdollisuuksia virheitä.

2254
01:52:02,860 --> 01:52:05,180
Ja katsotaanpa, jos tämä
todella toimii nyt.

2255
01:52:05,180 --> 01:52:09,380
Nyt aion mennä
eteenpäin ja tehdä paluun.

2256
01:52:09,380 --> 01:52:11,460
>> Voi ei, implisiittinen ilmoitus toiminto.

2257
01:52:11,460 --> 01:52:14,080
Tein tämän virheen ennen, no big deal.

2258
01:52:14,080 --> 01:52:18,950
Saanen kirjoita, tai korosta ja
kopioida, täsmälleen sama toiminto prototyyppi,

2259
01:52:18,950 --> 01:52:21,342
tai allekirjoitus, funktion täällä.

2260
01:52:21,342 --> 01:52:22,800
Tai voisin siirtää koko toiminto.

2261
01:52:22,800 --> 01:52:23,841
>> Mutta se on vähän laiska.

2262
01:52:23,841 --> 01:52:24,870
Joten emme tee sitä.

2263
01:52:24,870 --> 01:52:27,960
Nyt, tehtäköön paluu
jälleen, piste slash paluu.

2264
01:52:27,960 --> 01:52:32,790
>> x 2. x potenssiin on 4.
x 3. x potenssiin on 9.

2265
01:52:32,790 --> 01:52:35,300
Ja toiminto näyttää
Nyt toimivan.

2266
01:52:35,300 --> 01:52:36,550
Joten mitä eroa täällä?

2267
01:52:36,550 --> 01:52:42,520
Olen toiminto, joka kutsutaan neliö,
Tässä tapauksessa, joka laitoin tulo.

2268
01:52:42,520 --> 01:52:43,830
Ja palaan lähtö.

2269
01:52:43,830 --> 01:52:46,210
Ja kuitenkin aikaisemmin, jos
Avaan toinen esimerkki

2270
01:52:46,210 --> 01:52:51,640
aiemmista, josta
oli nimeltään prototype.c,

2271
01:52:51,640 --> 01:52:54,770
Minulla oli print nimi, joka
palasi mitätön, niin sanotusti,

2272
01:52:54,770 --> 01:52:58,730
Tai se palasi mitään, ja
yksinkertaisesti oli sivuvaikutus.

2273
01:52:58,730 --> 01:53:00,230
>> Joten mitä täällä tapahtuu?

2274
01:53:00,230 --> 01:53:03,520
No, pitävät toiminto
saada merkkijono vain hetken.

2275
01:53:03,520 --> 01:53:06,570
Olemme funktiolla
saada merkkijono seuraavalla tavalla.

2276
01:53:06,570 --> 01:53:10,464
>> Meillä on ollut tehtävä saada
merkkijono, kuten muun muassa CS50.h,

2277
01:53:10,464 --> 01:53:16,624
ovat standardin IO.h, int, tärkein, mitätön.

2278
01:53:16,624 --> 01:53:18,790
Ja sen jälkeen joka kerta olen
nimeltään get merkkijono tähän mennessä,

2279
01:53:18,790 --> 01:53:23,260
Olen sanonut jotain, merkkijono s
saa saada merkkijono, koska get string--

2280
01:53:23,260 --> 01:53:27,880
kutsukaamme tätä get.c-- get merkkijono
itse palauttaa merkkijonon, joka voin sitten

2281
01:53:27,880 --> 01:53:32,050
käyttää, ja sanoa, hei, pilkku,
prosentin s, kenoviiva n, s.

2282
01:53:32,050 --> 01:53:35,660
>> Joten tämä on samaa esimerkkiä,
todella, että meillä oli aikaisemmin.

2283
01:53:35,660 --> 01:53:37,920
Joten merkkijono palauttaa arvon.

2284
01:53:37,920 --> 01:53:41,260
Mutta hetki sitten, print string
ei palauta arvoa.

2285
01:53:41,260 --> 01:53:42,721
Se vain on sivuvaikutus.

2286
01:53:42,721 --> 01:53:44,220
Joten tämä on perustavanlaatuinen ero.

2287
01:53:44,220 --> 01:53:46,710
Olemme nähneet eri
tyyppisiä toimintoja nyt,

2288
01:53:46,710 --> 01:53:49,490
joista jotkut ovat palanneet
arvot, joista jotkut eivät.

2289
01:53:49,490 --> 01:53:51,890
Joten ehkä se on merkkijono, tai int tai float.

2290
01:53:51,890 --> 01:53:53,480
Tai ehkä se on vain mitätön.

2291
01:53:53,480 --> 01:53:55,710
>> Ja ero on
että nämä toiminnot, jotka

2292
01:53:55,710 --> 01:53:59,940
saada tietoja ja palauttaa arvon todella
tuo jotakin takaisin pöytään,

2293
01:53:59,940 --> 01:54:01,110
niin sanoakseni.

2294
01:54:01,110 --> 01:54:03,710
Joten mene eteenpäin ja
katsokaa yksi viimeinen

2295
01:54:03,710 --> 01:54:09,129
Esimerkkien joka antaa tunteen, nyt on
miten voisimme todellakin abstrakti parempi,

2296
01:54:09,129 --> 01:54:11,670
ja paremmin, ja paremmin, tai enemmän,
ja enemmän, ja enemmän, jotta

2297
01:54:11,670 --> 01:54:13,810
kirjoittamaan lopulta parempaa koodia.

2298
01:54:13,810 --> 01:54:16,860
Mennään eteenpäin, ja hengessä
Scratch, toimi seuraavasti.

2299
01:54:16,860 --> 01:54:21,700
>> Anna minun mennä eteenpäin ja sisältävät
CS50.h ja standardi IO.h.

2300
01:54:21,700 --> 01:54:24,010
Anna minun mennä eteenpäin ja antaa
itse int, tärkein, mitätön.

2301
01:54:24,010 --> 01:54:27,380
Ja anna minun mennä eteenpäin, kutsuvat tätä cough.c.

2302
01:54:27,380 --> 01:54:35,510
>> Ja anna minun mennä eteenpäin ja vain
kuten Scratch, tulostaa yskä / n.

2303
01:54:35,510 --> 01:54:37,170
Ja haluan tehdä tätä kolme kertaa.

2304
01:54:37,170 --> 01:54:39,670
Joten olen tietenkin juuri menossa
kopioida ja liittää kolme kertaa.

2305
01:54:39,670 --> 01:54:46,440
Olen nyt menossa tekemään
yskä piste slash yskä.

2306
01:54:46,440 --> 01:54:50,120
Annetaan itse vähän enemmän tilaa
täällä, Anna, yskä, yskä, yskä.

2307
01:54:50,120 --> 01:54:53,970
>> On tietysti jo
mahdollisuus parantaa.

2308
01:54:53,970 --> 01:54:55,679
Olen kopioida ja liittää
muutaman kerran tänään.

2309
01:54:55,679 --> 01:54:58,261
Mutta se oli vain niin en
täytyy kirjoittaa niin monta merkkiä.

2310
01:54:58,261 --> 01:55:00,250
Olen edelleen muuttaneet
nämä riviä koodia ovat.

2311
01:55:00,250 --> 01:55:04,240
>> Nämä kolme riviä ovat samanlaiset,
joka tuntuu laiska ja todellakin on,

2312
01:55:04,240 --> 01:55:07,110
ja ei luultavasti ole oikea lähestymistapa.

2313
01:55:07,110 --> 01:55:11,029
Joten mitä ainesosan
voisimme parantaa tätä koodia?

2314
01:55:11,029 --> 01:55:12,570
Meillä ei tarvitse kopioida ja liittää koodin.

2315
01:55:12,570 --> 01:55:15,070
>> Ja tosiaankin, milloin tunnet
itse kopioimalla,

2316
01:55:15,070 --> 01:55:17,700
eikä edes muuttuvat koodia,
kertoimet ovat olemassa parempi tapa.

2317
01:55:17,700 --> 01:55:19,470
Ja todellakin, siellä on.

2318
01:55:19,470 --> 01:55:22,510
Anna minun mennä eteenpäin ja tehdä silmukka,
vaikka syntaksi ei ehkä

2319
01:55:22,510 --> 01:55:24,570
tulevat luonnollisesti vielä.

2320
01:55:24,570 --> 01:55:29,494
>> Tekemällä tämän kolmesti, yksinkertaisesti
tekemällä following--

2321
01:55:29,494 --> 01:55:31,160
ja satun tietää tätä käytäntöön.

2322
01:55:31,160 --> 01:55:32,810
Meillä on kuitenkin useita esimerkkejä nyt.

2323
01:55:32,810 --> 01:55:34,950
Ja näet verkossa
lisää viitteitä edelleen.

2324
01:55:34,950 --> 01:55:37,790
>> Tämä on syntaksi rivillä 6, että
aivan kuten Scratch joka toistuu

2325
01:55:37,790 --> 01:55:40,090
lohko, toista seuraavat kolme kertaa.

2326
01:55:40,090 --> 01:55:41,340
Se on vähän maaginen nyt.

2327
01:55:41,340 --> 01:55:43,050
Mutta tämä saa enemmän,
ja tutumpi.

2328
01:55:43,050 --> 01:55:45,050
>> Ja se tulee toistaa
line kahdeksan kolme kertaa,

2329
01:55:45,050 --> 01:55:52,390
niin että jos olen uudelleen koota make yskä,
piste slash yskä, yskä, yskä, yskä.

2330
01:55:52,390 --> 01:55:54,030
Se toimii edelleen samalla tavalla.

2331
01:55:54,030 --> 01:55:55,550
Niin, että kaikki hyvä ja hieno.

2332
01:55:55,550 --> 01:55:58,200
Mutta se ei ole kovin abstracted.

2333
01:55:58,200 --> 01:55:59,371
>> Se on täysin oikein.

2334
01:55:59,371 --> 01:56:01,370
Mutta se tuntuu siellä
voisi olla mahdollisuus,

2335
01:56:01,370 --> 01:56:03,750
kuten maailmassa
Scratch, eräänlainen alku

2336
01:56:03,750 --> 01:56:07,530
lisätä muutamia semantiikan tässä niin, että
En vain joitakin varten silmukka,

2337
01:56:07,530 --> 01:56:09,867
ja toiminto, jossa lukee
yskä, vai yskä.

2338
01:56:09,867 --> 01:56:10,450
Tiedätkö mitä?

2339
01:56:10,450 --> 01:56:12,620
Yritän olla
hieman viileämpi kuin,

2340
01:56:12,620 --> 01:56:16,090
ja itse asiassa kirjoittaa funktio, joka
on joitakin sivuvaikutuksia, kutsuvat sitä yskä.

2341
01:56:16,090 --> 01:56:20,830
>> Ja siinä ei tulo, ja
palauttaa mitään arvoa tuotokseksi.

2342
01:56:20,830 --> 01:56:22,680
Mutta tiedätkö mitä se tekee?

2343
01:56:22,680 --> 01:56:29,370
Se this-- printf,
lainaus lainaus, yskä.

2344
01:56:29,370 --> 01:56:32,380
>> Ja nyt täällä, aion
mennä eteenpäin ja int,

2345
01:56:32,380 --> 01:56:36,070
i saa nolla, i alle 3, i plus plus.

2346
01:56:36,070 --> 01:56:39,770
Aion tehdä printf, joka on
luultavasti alhainen täytäntöönpano

2347
01:56:39,770 --> 01:56:40,270
yksityiskohta.

2348
01:56:40,270 --> 01:56:41,353
En välitä miten yskä.

2349
01:56:41,353 --> 01:56:43,240
Haluan vain käyttää yskä toimintoa.

2350
01:56:43,240 --> 01:56:44,840
Ja olen juuri menossa soittaa yskä.

2351
01:56:44,840 --> 01:56:46,204
>> Nyt huomaa kahtiajako.

2352
01:56:46,204 --> 01:56:49,370
Kun soitat toiminto, jos et
haluavat antaa sen tuloihin, täysin hieno.

2353
01:56:49,370 --> 01:56:51,780
Tee avoin paren lähellä
paren, ja olet valmis.

2354
01:56:51,780 --> 01:56:56,271
>> Kun määrittää funktion, tai
julistaa funktion prototyyppi,

2355
01:56:56,271 --> 01:56:58,770
Jos tiedät etukäteen se ei ole
vie argumentteja,

2356
01:56:58,770 --> 01:57:01,170
sanoa mitätön näissä suluissa siellä.

2357
01:57:01,170 --> 01:57:05,660
Ja se tekee, että olet
ei vahingossa sitä väärin.

2358
01:57:05,660 --> 01:57:07,020
Anna minun mennä eteenpäin ja tehdä yskä.

2359
01:57:07,020 --> 01:57:08,540
Ja tietenkin, olen tehnyt virheen.

2360
01:57:08,540 --> 01:57:10,410
>> Dammit, siellä on, että
implisiittinen ilmoitus.

2361
01:57:10,410 --> 01:57:11,325
Mutta se käy hyvin.

2362
01:57:11,325 --> 01:57:12,590
Se on helppo korjata.

2363
01:57:12,590 --> 01:57:18,240
Tarvitsen vain prototyyppi ylempänä
minun tiedosto kuin olen todellisuudessa käyttävät sitä.

2364
01:57:18,240 --> 01:57:20,070
>> Joten nyt tehtäköön yskä taas mukava.

2365
01:57:20,070 --> 01:57:20,790
Nyt se toimii.

2366
01:57:20,790 --> 01:57:22,930
Tee yskä, yskä, yskä, yskä.

2367
01:57:22,930 --> 01:57:25,930
Joten voisi ajatella, että olemme todella
runsaat insinöörin tätä ongelmaa.

2368
01:57:25,930 --> 01:57:26,763
Ja todellakin, me olemme.

2369
01:57:26,763 --> 01:57:28,870
Tämä ei ole hyvä
ehdokas ohjelman

2370
01:57:28,870 --> 01:57:31,930
kategoriassa
refaktorointi, ja tekee mitä

2371
01:57:31,930 --> 01:57:35,645
nimeltään hierarkkinen hajoaminen,
jos otat koodia, ja sitten

2372
01:57:35,645 --> 01:57:38,790
te sellainen tekijä asioita, niin kuin
syyksi enemmän semantiikka heille

2373
01:57:38,790 --> 01:57:40,930
ja käyttää sitä lopulta pitkällä aikavälillä.

2374
01:57:40,930 --> 01:57:43,490
Mutta se on rakennuspalikka kohti
kehittyneempiä ohjelmia

2375
01:57:43,490 --> 01:57:45,600
että aloitamme
kirjallisesti ennen pitkää, että

2376
01:57:45,600 --> 01:57:50,090
antaa meille mahdollisuuden sanastoa
jolla kirjoittamaan parempaa koodia.

2377
01:57:50,090 --> 01:57:52,920
Ja todellakin, katsotaanpa jos
voi yleistää tätä pidemmälle.

2378
01:57:52,920 --> 01:57:57,984
>> Se tuntuu hieman ontuva, että minä, tärkein,
tarvitse huolehtia tästä hiton silmukka,

2379
01:57:57,984 --> 01:57:59,400
ja kutsuvan yskä uudestaan ​​ja uudestaan.

2380
01:57:59,400 --> 01:58:03,050
Miksi en voi vain kertoa yskä,
ota yskä kolme kertaa?

2381
01:58:03,050 --> 01:58:08,170
Toisin sanoen, miksi en voi vain
antaa panos yskä ja tehdä tämän?

2382
01:58:08,170 --> 01:58:11,270
>> Miksi en voi vain sanoa, vuonna
Tärkein yskä kolme kertaa.

2383
01:58:11,270 --> 01:58:13,150
Ja nyt, tämä on tavallaan maaginen.

2384
01:58:13,150 --> 01:58:14,540
Se on hyvin iteratiivinen täällä.

2385
01:58:14,540 --> 01:58:15,940
Ja se on, todellakin, vauva askel.

2386
01:58:15,940 --> 01:58:19,250
>> Mutta juuri kyky sanoa
rivi kahdeksan, yskä kolme kertaa,

2387
01:58:19,250 --> 01:58:20,730
se on vain niin paljon enemmän luettavaa.

2388
01:58:20,730 --> 01:58:24,210
Ja plus, en tarvitse tietää
tai välitä kuinka yskä on toteutettu.

2389
01:58:24,210 --> 01:58:26,460
Ja todellakin, myöhemmin
termi ja opinnäytetöiden,

2390
01:58:26,460 --> 01:58:29,150
Jos puuttua projektin
luokkatoveri tai kaksi luokkatoverit,

2391
01:58:29,150 --> 01:58:32,370
huomaat, että olet menossa
on, tai haluat, jakaa työ.

2392
01:58:32,370 --> 01:58:34,650
>> Ja olet menossa haluavat päättää
etukäteen, kuka tekee mitä,

2393
01:58:34,650 --> 01:58:35,483
ja jossa kappaleet?

2394
01:58:35,483 --> 01:58:37,520
Ja eikö olisi mukavaa
Jos esimerkiksi

2395
01:58:37,520 --> 01:58:40,100
huolehtia kirjoittamisen tärkein, tehty.

2396
01:58:40,100 --> 01:58:43,470
Ja kämppäkaveri, tai
kumppani yleisemmin

2397
01:58:43,470 --> 01:58:45,230
huolehtii täytäntöönpanon yskä.

2398
01:58:45,230 --> 01:58:49,540
>> Ja tämä jako, nämä
seinät abstraktio,

2399
01:58:49,540 --> 01:58:52,310
tai kerrosten abstraktio jos
te, ovat erittäin tehokkaita,

2400
01:58:52,310 --> 01:58:55,480
koska erityisesti suurempien,
monimutkaisempia ohjelmia ja järjestelmiä,

2401
01:58:55,480 --> 01:59:00,070
se mahdollistaa useiden ihmisiä rakentamaan
asioita yhdessä, ja lopulta

2402
01:59:00,070 --> 01:59:02,680
ommel työnsä yhteen tällä tavalla.

2403
01:59:02,680 --> 01:59:05,332
Mutta tietenkin, me
täytyy nyt korjata yskä.

2404
01:59:05,332 --> 01:59:07,290
Meidän täytyy kertoa yskä
että, hei, tiedätkö mitä?

2405
01:59:07,290 --> 01:59:11,230
Olet menossa tarvitse ottaa
input-- niin ei mitätön, mutta int ja nyt.

2406
01:59:11,230 --> 01:59:15,170
Mennään eteenpäin ja panna
yskä int. i saa nolla.

2407
01:59:15,170 --> 01:59:16,890
>> i on pienempi kuin se, kuinka monta kertaa.

2408
01:59:16,890 --> 01:59:18,550
Sanoin kolme aiemmin.

2409
01:59:18,550 --> 01:59:20,420
Mutta se ei ole mitä haluan.

2410
01:59:20,420 --> 01:59:25,520
En halua yskä voidaan yleistää
tukea mitä tahansa määrää toistojen.

2411
01:59:25,520 --> 01:59:28,800
>> Joten, todellakin, se on n että haluan,
mitä käyttäjä kertoo minulle.

2412
01:59:28,800 --> 01:59:31,620
Nyt voin mennä eteenpäin ja sanoa tulostaa yskä.

2413
01:59:31,620 --> 01:59:34,750
Ja mitä numero
käyttäjä kulkee,

2414
01:59:34,750 --> 01:59:36,890
Aion kerrata, että monta kertaa.

2415
01:59:36,890 --> 01:59:39,160
>> Joten lopussa päivä,
Ohjelma on sama.

2416
01:59:39,160 --> 01:59:42,820
Mutta huomaa kaikki tätä kamaa
voisi olla jopa toiseen tiedostoon.

2417
01:59:42,820 --> 01:59:45,620
Itse asiassa en tiedä tällä
hetki miten printf toteutetaan.

2418
01:59:45,620 --> 01:59:47,980
>> En tiedä tällä hetkellä, miten saada
string, tai saada int, tai saada kellua

2419
01:59:47,980 --> 01:59:48,646
pannaan täytäntöön.

2420
01:59:48,646 --> 01:59:50,930
Ja en halua
nähdä niitä tietokoneen näytöllä.

2421
01:59:50,930 --> 01:59:55,320
Koska se on, olen alkanut keskittyä
minun ohjelma, eikä näitä tehtäviä.

2422
01:59:55,320 --> 01:59:59,070
>> Ja niin, todellakin, heti kun
Aloita factoring koodi näin ulos,

2423
01:59:59,070 --> 02:00:01,397
voisimme jopa siirtää yskä
erilliseen tiedostoon?

2424
02:00:01,397 --> 02:00:02,730
Joku voisi toteuttaa sitä.

2425
02:00:02,730 --> 02:00:06,810
Ja sinun ja ohjelma tulee
hyvin kaunis, ja hyvin luettavissa,

2426
02:00:06,810 --> 02:00:10,830
luultavasti, todella neljä
line-ohjelma oikeassa.

2427
02:00:10,830 --> 02:00:13,510
>> Joten mene eteenpäin nyt
ja vielä yksi muutos.

2428
02:00:13,510 --> 02:00:16,180
Huomaa, että minun prototyyppi
on vaihtaa ylös.

2429
02:00:16,180 --> 02:00:18,390
Haluan siis korjata, että niin
En saa huusi.

2430
02:00:18,390 --> 02:00:22,580
>> Tee yskä, minä juoksen yskä kerran
enemmän, edelleen tehdä sama asia.

2431
02:00:22,580 --> 02:00:26,010
Mutta nyt huomaa meillä on
ainesosa yksi lopullinen versio.

2432
02:00:26,010 --> 02:00:26,940
Tiedätkö mitä?

2433
02:00:26,940 --> 02:00:29,040
En halua vain yskä, välttämättä.

2434
02:00:29,040 --> 02:00:30,802
Haluan olla jotain yleisempää.

2435
02:00:30,802 --> 02:00:31,510
Joten tiedätkö mitä?

2436
02:00:31,510 --> 02:00:32,450
En halua tehdä tätä.

2437
02:00:32,450 --> 02:00:37,140
Haluan olla, aivan kuten Scratch
ei, sanoa lohko, mutta ei pelkästään

2438
02:00:37,140 --> 02:00:38,680
sanoa jotain muutamia kertoja.

2439
02:00:38,680 --> 02:00:41,510
Haluan sen sanoa hyvin erityinen merkkijono.

2440
02:00:41,510 --> 02:00:43,850
Ja siksi en
haluavat sen vain sanoa yskä.

2441
02:00:43,850 --> 02:00:47,660
Haluan sen sanoa mitä tahansa
merkkijono johdetaan.

2442
02:00:47,660 --> 02:00:49,960
>> Joten huomata, olen yleistynyt
tämä niin, että nyt

2443
02:00:49,960 --> 02:00:53,110
vaikkapa tuntuu hyvältä nimi
Tämän, kuten Scratch,

2444
02:00:53,110 --> 02:00:55,530
ottaa kaksi argumenttia, toisin Scratch.

2445
02:00:55,530 --> 02:00:56,570
Yksi on merkkijono.

2446
02:00:56,570 --> 02:00:57,300
Yksi on int.

2447
02:00:57,300 --> 02:00:58,130
>> Ja voisin vaihtaa niitä.

2448
02:00:58,130 --> 02:01:00,713
Olen juuri sellainen kuin ajatus
sanoa merkkijono ensin, ja sitten

2449
02:01:00,713 --> 02:01:01,940
kuinka monta kertaa myöhemmin.

2450
02:01:01,940 --> 02:01:03,970
Void tarkoittaa sitä vielä
ei palaa mitään.

2451
02:01:03,970 --> 02:01:06,428
Nämä ovat vain visuaalinen puoli
vaikutuksia, kuten kanssa [? Jordan,?]

2452
02:01:06,428 --> 02:01:08,240
sanallinen sivuvaikutus huutaa.

2453
02:01:08,240 --> 02:01:12,630
Se kuitenkin tekee jotain n kertaa,
0 asti, mutta ei yhtä suuri kuin n.

2454
02:01:12,630 --> 02:01:14,540
Tämä tarkoittaa n koko kertaa.

2455
02:01:14,540 --> 02:01:16,540
Ja sitten vain tulostaa
mitä se merkkijono on.

2456
02:01:16,540 --> 02:01:19,060
Joten olen todella yleistynyt
koodirivin.

2457
02:01:19,060 --> 02:01:22,460
Joten nyt, miten voin toteuttaa
yskä toiminto?

2458
02:01:22,460 --> 02:01:25,520
>> Voin tehdä mitätön yskä.

2459
02:01:25,520 --> 02:01:28,501
Ja voin silti ottaa miten
monta kertaa haluat yskä.

2460
02:01:28,501 --> 02:01:29,250
Mutta tiedätkö mitä?

2461
02:01:29,250 --> 02:01:31,240
Voin nyt punt sanoa.

2462
02:01:31,240 --> 02:01:36,540
>> Voin soittaa sanoa kanssa
sana yskä, kulkee n.

2463
02:01:36,540 --> 02:01:40,410
Ja jos haluan myös toteuttaa,
vain huvin vuoksi, aivastus funktio,

2464
02:01:40,410 --> 02:01:42,290
Voin sneeze joitakin kertoja.

2465
02:01:42,290 --> 02:01:47,300
Ja voin pitää uudelleenkäyttö n, koska
huomaa, että m tässä yhteydessä tai laajuus

2466
02:01:47,300 --> 02:01:49,470
on olemassa vain tämän toiminnon.

2467
02:01:49,470 --> 02:01:52,767
>> Ja n tässä yhteydessä vain
vallitsee tätä toimintoa täällä.

2468
02:01:52,767 --> 02:01:54,600
Joten me palaamme
näitä kysymyksiä soveltamisalan.

2469
02:01:54,600 --> 02:02:01,160
Ja tässä, olen juuri menossa sanoa,
Achoo, ja sitten n kertaa, puolipisteellä.

2470
02:02:01,160 --> 02:02:04,340
>> Ja nyt, minä vain täytyy lainata
nämä toiminnot allekirjoitukset täällä.

2471
02:02:04,340 --> 02:02:06,290
Joten yskä on oikea.

2472
02:02:06,290 --> 02:02:10,090
Void aivastus on oikea nyt.

2473
02:02:10,090 --> 02:02:12,390
>> Ja olen edelleen täytyy vain sanoa.

2474
02:02:12,390 --> 02:02:18,990
Joten aion sanoa, vaikkapa
string s, int n, puolipisteellä.

2475
02:02:18,990 --> 02:02:22,010
Joten olen yli-suunnitelleet
pahus pois tästä ohjelmasta.

2476
02:02:22,010 --> 02:02:23,760
>> Ja tämä ei
välttämättä tarkoita tämä on

2477
02:02:23,760 --> 02:02:26,343
mitä pitäisi tehdä, kun kirjallinen
edes yksinkertaisimpia ohjelmia.

2478
02:02:26,343 --> 02:02:29,280
Ota jotain, joka on ilmeisesti
todella yksinkertainen, todella lyhyt,

2479
02:02:29,280 --> 02:02:31,800
ja uudelleen toteuttaa se
käyttämällä aivan liikaa koodia.

2480
02:02:31,800 --> 02:02:34,560
Mutta voit itse nähdä ja
aika muistella näitä esimerkkejä,

2481
02:02:34,560 --> 02:02:38,610
ja ymmärtää,, oi, ne ovat vaiheet
otimme todella yleistää,

2482
02:02:38,610 --> 02:02:40,797
tekijä jotain,
kunnes lopussa päivän

2483
02:02:40,797 --> 02:02:42,380
minun koodi on oikeastaan ​​aika kohtuullinen.

2484
02:02:42,380 --> 02:02:45,960
Koska jos Haluan yskä kolme
ajat sitten aivastaa kolme kertaa,

2485
02:02:45,960 --> 02:02:50,420
En yksinkertaisesti menossa uusintana tämän,
ohjelma tehdä yskä, ja suorita yskä.

2486
02:02:50,420 --> 02:02:53,620
Ja minulla on kolme yskää
ja kolme aivastaa.

2487
02:02:53,620 --> 02:02:55,990
>> Ja niin tämä on perus
paradigma, jos haluatte,

2488
02:02:55,990 --> 02:03:00,110
kuinka voisimme edetä
todella toteuttaa ohjelmaa.

2489
02:03:00,110 --> 02:03:03,220
Mutta Haluan vain nähdä nyt, mikä on
olemme tehneet kaiken tämän ajan,

2490
02:03:03,220 --> 02:03:06,940
ja mitä jotkut lopullista kappaletta
ovat tämän takana yksinkertaisen komennon.

2491
02:03:06,940 --> 02:03:09,620
Lopussa päivän, olemme
käyttänyt Clang meidän kääntäjä.

2492
02:03:09,620 --> 02:03:11,494
Olemme kirjallisesti lähde
koodi, muuttaen sen

2493
02:03:11,494 --> 02:03:12,820
kautta Clang konekielelle.

2494
02:03:12,820 --> 02:03:15,540
>> Ja olemme käyttäneet tehdä vain
helpottaa meidän näppäimistön niin

2495
02:03:15,540 --> 02:03:20,740
että meidän ei tarvitse muistaa
ne loitsut of Clang itse.

2496
02:03:20,740 --> 02:03:22,640
Mutta mikä on tehdä todella tekee?

2497
02:03:22,640 --> 02:03:24,750
Ja puolestaan ​​mitä on
Kalahtaa todella tekee?

2498
02:03:24,750 --> 02:03:28,790
>> On käynyt ilmi, vaikka olemme yksinkertaistettu
tämänpäiväisessä keskustelussa sanomalla,

2499
02:03:28,790 --> 02:03:33,090
otat lähdekoodia, siirtää sen
tulona kääntäjä, joka antaa sinulle

2500
02:03:33,090 --> 02:03:35,750
tuotos koneen
koodi kääntyy siellä n

2501
02:03:35,750 --> 02:03:37,420
muutamia eri vaiheita sisällä siellä.

2502
02:03:37,420 --> 02:03:41,940
Ja kokoaminen sattuu olemaan sateenvarjo
termi koko joukko vaiheita.

2503
02:03:41,940 --> 02:03:43,970
Mutta Haluan vain kiusaa
tätä todella nopeasti.

2504
02:03:43,970 --> 02:03:48,070
>> On käynyt ilmi, että olemme tehneet
enemmän asioita joka kerta kun käynnistää ohjelman

2505
02:03:48,070 --> 02:03:50,990
tai joka kerta kun kääntää ohjelmaa tänään.

2506
02:03:50,990 --> 02:03:55,020
Niin esikäsittelyyn viittaa
this-- mitään C-ohjelma,

2507
02:03:55,020 --> 02:03:58,720
kuten näemme uudelleen ja uudelleen,
joka alkaa tämän hash symboli,

2508
02:03:58,720 --> 02:04:03,320
tai hashtagin symboli täällä, merkitsee
se on esikäsittelijään direktiivi.

2509
02:04:03,320 --> 02:04:07,330
Tämä tarkoittaa tässä tapauksessa, hei
tietokone, tehdä jotain tämän tiedoston

2510
02:04:07,330 --> 02:04:09,430
ennen kuin itse koota oman koodin.

2511
02:04:09,430 --> 02:04:15,220
>> Tässä tapauksessa hash sisältävät sanoen,
pohjimmiltaan, C tapa sanoa,

2512
02:04:15,220 --> 02:04:19,325
hei tietokone, mene saada sisältöä
of CS50.h ja liittää ne täällä.

2513
02:04:19,325 --> 02:04:22,170
Hei tietokone, mene saada
sisällöstä standardin IO.h,

2514
02:04:22,170 --> 02:04:24,690
aina kun se on sen
kiintolevy, liitä se tähän.

2515
02:04:24,690 --> 02:04:27,390
Joten ne asioita tapahtuu
Ensimmäinen aikana esikäsittely.

2516
02:04:27,390 --> 02:04:28,880
>> Ja Clang tekee kaiken tämän meille.

2517
02:04:28,880 --> 02:04:30,510
Ja se tekee sen niin hiton
nopea, et edes

2518
02:04:30,510 --> 02:04:32,000
katso neljä erillistä asioita tapahtuu.

2519
02:04:32,000 --> 02:04:34,100
Mutta se ensimmäinen tällainen askel.

2520
02:04:34,100 --> 02:04:35,560
>> Mitä oikeastaan ​​tapahtuu?

2521
02:04:35,560 --> 02:04:38,320
No, seuraava virallinen
vaihe on koota.

2522
02:04:38,320 --> 02:04:40,385
Ja käy ilmi, että
ohjelmaa koostettaessa

2523
02:04:40,385 --> 02:04:44,060
teknisesti tarkoittaa menee
lähdekoodi, tavaraa olemme

2524
02:04:44,060 --> 02:04:47,890
kirjoittanut tänään, jotain
nimeltään assembly, jotain

2525
02:04:47,890 --> 02:04:49,260
joka näyttää hieman erilainen.

2526
02:04:49,260 --> 02:04:51,050
>> Ja itse asiassa, voimme nähdä tämän todella nopeasti.

2527
02:04:51,050 --> 02:04:53,890
Anna minun itse mennä minun IDE.

2528
02:04:53,890 --> 02:04:58,050
Anna minun mennä eteenpäin ja avoin hello.c, joka
on ensimmäinen ohjelma, jota

2529
02:04:58,050 --> 02:04:59,120
alkoi tänään.

2530
02:04:59,120 --> 02:05:04,130
Ja anna minun mennä eteenpäin ja ajaa Clang
hieman eri tavalla, Clang-s, hello.c,

2531
02:05:04,130 --> 02:05:07,720
joka on todella aikoo
anna minulle toinen tiedosto hello.s.

2532
02:05:07,720 --> 02:05:10,330
>> Ja me luultavasti koskaan
jälleen nähdä tällaista koodia.

2533
02:05:10,330 --> 02:05:13,030
Jos ottaa alemmalla tasolla
järjestelmät luokan kuten CS61,

2534
02:05:13,030 --> 02:05:14,920
näet paljon enemmän
Tällaisen koodin.

2535
02:05:14,920 --> 02:05:17,020
Mutta tämä on konekielellä.

2536
02:05:17,020 --> 02:05:22,050
Tämä on X86 konekielellä
että CPU, joka on taustalla

2537
02:05:22,050 --> 02:05:24,460
CS50 IDE todella ymmärtää.

2538
02:05:24,460 --> 02:05:27,060
>> Ja arvoituksellinen kuin se
katso, se on jotain

2539
02:05:27,060 --> 02:05:29,180
tietokone ymmärtää melko hyvin.

2540
02:05:29,180 --> 02:05:30,790
Sub q, tämä on vähennä.

2541
02:05:30,790 --> 02:05:31,660
On liikkeitä.

2542
02:05:31,660 --> 02:05:35,730
>> Siellä soittaa toimintoja täällä,
x Oring, liike, lisäosa, pop,

2543
02:05:35,730 --> 02:05:36,430
paluuta.

2544
02:05:36,430 --> 02:05:38,850
Joten on joitakin hyvin
alhainen ohjeet

2545
02:05:38,850 --> 02:05:41,280
että suorittimia ymmärtää, että
Viittasin aikaisemmin.

2546
02:05:41,280 --> 02:05:43,100
Juuri Intel Inside.

2547
02:05:43,100 --> 02:05:45,030
>> On malleja
nollia ja ykkösiä, jotka

2548
02:05:45,030 --> 02:05:51,800
karttaa näihin arcanely muotoiltu, mutta
jokseenkin hyvin nimetty, ohjeet,

2549
02:05:51,800 --> 02:05:52,780
niin sanoakseni.

2550
02:05:52,780 --> 02:05:54,780
Tämä on mitä tapahtuu, kun
te kääntää koodia.

2551
02:05:54,780 --> 02:05:58,560
Saat kokoonpano
kieli ulos siitä, mikä

2552
02:05:58,560 --> 02:06:04,680
tarkoittaa, että kolmas vaihe on koota
että kokoonpano koodin, lopulta,

2553
02:06:04,680 --> 02:06:09,080
kone code-- nollia ja ykkösiä, eikä
tekstissä, josta juuri nähnyt hetki sitten.

2554
02:06:09,080 --> 02:06:13,370
>> Joten esikäsittelyä ei joka löytää
ja korvaa, ja muutamia muita asioita.

2555
02:06:13,370 --> 02:06:16,430
Kääntäminen vie lähde
koodi C, lähdekoodi

2556
02:06:16,430 --> 02:06:18,980
että me kirjoitti, kokoonpano
koodi, joka me vain vilkaisi.

2557
02:06:18,980 --> 02:06:22,170
Kokoaminen vie että kokoonpano
koodi nollia ja ykkösiä

2558
02:06:22,170 --> 02:06:24,680
että CPU todella
ymmärtää lopussa päivän.

2559
02:06:24,680 --> 02:06:27,630
Ja linkittäminen on viimeinen vaihe
että tapahtuu us-- uudelleen,

2560
02:06:27,630 --> 02:06:29,830
niin nopeasti emme edes
notice-- joka sanoo,

2561
02:06:29,830 --> 02:06:32,460
hei tietokone, ottaa kaikki
nollat ​​ja ne, jotka

2562
02:06:32,460 --> 02:06:36,750
johtui kokoamisessa Daavidin koodia,
ja hänen pääasiallinen tehtävä tässä tapauksessa.

2563
02:06:36,750 --> 02:06:39,160
>> Ja hei tietokone, mene saada
kaikki nollat ​​ja ykköset

2564
02:06:39,160 --> 02:06:42,180
että CS50 henkilöstö kirjoitti
sisällä CS50 kirjasto.

2565
02:06:42,180 --> 02:06:43,440
Sekoita ne sisään Daavidin.

2566
02:06:43,440 --> 02:06:46,648
Ja hei tietokone, mene saada kaikki nollat
ja ne, jotka joku muu kirjoitti vuotta

2567
02:06:46,648 --> 02:06:47,470
sitten varten printf.

2568
02:06:47,470 --> 02:06:49,880
Ja lisätä ne osaksi
koko asia, joten olemme

2569
02:06:49,880 --> 02:06:52,870
sain nollia ja ykkösiä, The
CS50 henkilöstön nollia ja ykkösiä,

2570
02:06:52,870 --> 02:06:55,370
printf nollia ja ykkösiä,
ja mitään muuta käytämme.

2571
02:06:55,370 --> 02:07:00,410
>> He kaikki saavat yhdistetään yhdeksi
ohjelmaa nimeltä, tässä tapauksessa, hei.

2572
02:07:00,410 --> 02:07:03,141
Joten tästä lähtien, me vain
käyttää sanaa kokoamiseen.

2573
02:07:03,141 --> 02:07:06,390
Ja otamme selvänä, että kun
sanomme, kääntää ohjelma, se tarkoittaa,

2574
02:07:06,390 --> 02:07:08,849
hei tehdä esikäsittelyä,
kokoonpano, ja yhdistää.

2575
02:07:08,849 --> 02:07:11,890
Mutta on todella jokin mehukas tavaraa
siellä tapahtuu alla huppu.

2576
02:07:11,890 --> 02:07:13,723
Ja varsinkin jos
saada utelias jonkin aikaa,

2577
02:07:13,723 --> 02:07:15,900
voit alkaa tönäisi
noin tällä alhaisemmalla tasolla.

2578
02:07:15,900 --> 02:07:19,660
Mutta nyt, ymmärtää, että
joukossa takeaways tänään

2579
02:07:19,660 --> 02:07:23,420
ovat yksinkertaisesti
alkaa prosessi,

2580
02:07:23,420 --> 02:07:26,700
saada mukava
jotain Hello World.

2581
02:07:26,700 --> 02:07:29,575
Itse asiassa suurin osa mitä teimme tänään
ei varmasti uppoavat huippunopea.

2582
02:07:29,575 --> 02:07:31,491
Ja kestää jonkin
aika, ja jotkut käytäntö.

2583
02:07:31,491 --> 02:07:33,864
Ja kertoimet ovat, sinun tulee lajitella
of haluat lyödä näppäimistön

2584
02:07:33,864 --> 02:07:34,780
tai huutaa näyttöä.

2585
02:07:34,780 --> 02:07:35,880
Ja kaikki tämä on OK.

2586
02:07:35,880 --> 02:07:38,320
Tosin ehkä yritä
tee se kirjastossa niin paljon.

2587
02:07:38,320 --> 02:07:40,820
>> Ja lopulta, luultavasti
olisi voinut kuitenkin, aloittaa

2588
02:07:40,820 --> 02:07:44,580
nähdä kuvioita, niin hyvää koodia
että olet kirjoittanut ja virheitä

2589
02:07:44,580 --> 02:07:45,370
että olet tehnyt.

2590
02:07:45,370 --> 02:07:48,965
Ja paljon kuin prosessin
tulossa TF tai CA on kuin,

2591
02:07:48,965 --> 02:07:51,590
voit alkaa saada paremmin ja
paremmin näkemään näitä kuvioita,

2592
02:07:51,590 --> 02:07:53,774
ja vain ratkaisemaan
omat ongelmansa lopulta.

2593
02:07:53,774 --> 02:07:56,940
Tällä välin tulee olemaan runsaasti
meistä antamaan sinulle tukea ja painukaa

2594
02:07:56,940 --> 02:07:57,481
tämän läpi.

2595
02:07:57,481 --> 02:07:59,450
Ja arvonkorotukset
kaikki ongelmat

2596
02:07:59,450 --> 02:08:01,366
aiotte ohjataan läpi
kaikki komennot

2597
02:08:01,366 --> 02:08:05,330
että en todellakaan tiedä mistä
paljon käytännön nyt,

2598
02:08:05,330 --> 02:08:07,380
mutta ehkä lentänyt
yli pään nyt.

2599
02:08:07,380 --> 02:08:08,580
Ja se on täysin kunnossa.

2600
02:08:08,580 --> 02:08:11,230
>> Mutta lopulta olet menossa
alkaa nähdä kuvioita syntyä.

2601
02:08:11,230 --> 02:08:14,260
Ja kun saat ohi kaikki
tyhmä yksityiskohtia, kuten suluissa,

2602
02:08:14,260 --> 02:08:16,710
ja aaltosulkei-, ja puolipistettä,
ja tavaraa, rehellisesti,

2603
02:08:16,710 --> 02:08:19,360
joka ei ole ollenkaan
älyllisesti mielenkiintoinen.

2604
02:08:19,360 --> 02:08:22,690
Ja se ei ole tavoite
minkään johdanto luokassa.

2605
02:08:22,690 --> 02:08:24,410
Se on ideoita, jotka ovat menossa merkitystä.

2606
02:08:24,410 --> 02:08:26,659
>> Se on silmukoita, ja
olosuhteet, ja toiminnot,

2607
02:08:26,659 --> 02:08:30,552
ja voimakkaammin ottoon,
ja factoring koodia,

2608
02:08:30,552 --> 02:08:33,510
ja hyvä suunnittelu, ja hyvä
tyyli, ja lopulta oikeellisuutta

2609
02:08:33,510 --> 02:08:37,330
oman koodin, joka on viime kädessä
menossa asia eniten.

2610
02:08:37,330 --> 02:08:40,925
Joten ensi viikolla, otamme nämä
ideoita, tuli ensimmäisen kerran Scratch

2611
02:08:40,925 --> 02:08:42,800
ja ovat nyt kääntänyt
C. Ja aloitamme

2612
02:08:42,800 --> 02:08:45,740
esitellä ensimmäinen
kurssin reaalimaailman verkkotunnuksia.

2613
02:08:45,740 --> 02:08:50,140
>> Me keskitymme maailman turvallisuutta,
ja tarkemmin salaus,

2614
02:08:50,140 --> 02:08:51,980
taidetta muokkaamisella tietoja.

2615
02:08:51,980 --> 02:08:54,000
Ja ensimmäisten joukossa
ongelmat itse

2616
02:08:54,000 --> 02:08:56,840
saa kirjoittaa pidemmälle
leikkii joitakin syntaksin

2617
02:08:56,840 --> 02:08:59,880
ja ratkaista loogisia
ongelmia, lopulta ennen pitkää,

2618
02:08:59,880 --> 02:09:03,960
on todella muokkaamaan tai salata,
ja lopulta purkaa tietoa.

2619
02:09:03,960 --> 02:09:06,470
Ja kaikki olemme tehneet
tänään, tulee melko alhainen

2620
02:09:06,470 --> 02:09:09,190
tasolla, on juuri menossa sallia
voimme ottaa yhden, ja yksi,

2621
02:09:09,190 --> 02:09:13,550
ja yksi askel edellä kohti
kirjallisesti mielenkiintoisin koodin vielä.

2622
02:09:13,550 --> 02:09:15,050
>> Niin siitä lisää ensi viikolla.

2623
02:09:15,050 --> 02:09:17,834

2624
02:09:17,834 --> 02:09:18,762
>> [VIDEOTOISTOSTA]

2625
02:09:18,762 --> 02:09:19,690

2626
02:09:19,690 --> 02:09:22,006
>> -Mitä Voi kertoa minulle
viimeinen kerta, kun näin hänet?

2627
02:09:22,006 --> 02:09:26,041

2628
02:09:26,041 --> 02:09:27,040
-Mitä Voin sanoa, todella?

2629
02:09:27,040 --> 02:09:30,500

2630
02:09:30,500 --> 02:09:35,340
Siis, se oli kuin mikä tahansa muu
pre-tuotanto harjoitus,

2631
02:09:35,340 --> 02:09:40,510
paitsi siellä oli jotain hän sanoi
aivan lopussa, että kiinni minua.

2632
02:09:40,510 --> 02:09:44,810

2633
02:09:44,810 --> 02:09:46,640
>> -Tämä Oli CS50.

2634
02:09:46,640 --> 02:09:49,440

2635
02:09:49,440 --> 02:09:52,190
>> -Se On leikattu kaikille,
hienoa työtä harjoitus.

2636
02:09:52,190 --> 02:09:53,070
>> -Se Lounas?

2637
02:09:53,070 --> 02:09:54,986
>> -Joo, Sinä ja voin
napata voileipä hieman.

2638
02:09:54,986 --> 02:09:58,380
Saanen tiedotustilaisuuden kanssa
David todella nopeasti.

2639
02:09:58,380 --> 02:09:59,160
David?

2640
02:09:59,160 --> 02:10:01,260
David?

2641
02:10:01,260 --> 02:10:03,110
>> [END TOISTO]

