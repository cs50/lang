1
00:00:00,000 --> 00:00:00,000

2
00:00:00,000 --> 00:00:00,000
[MUZIKO Ludanta]

3
00:00:00,000 --> 00:00:13,950

4
00:00:13,950 --> 00:00:16,240
>> DAVID J. Malan: Bone, ĉi tiu estas CS50.

5
00:00:16,240 --> 00:00:18,010
Kaj tio estas semajno unu.

6
00:00:18,010 --> 00:00:22,050
Do memoru, ke lastfoje en semajno nulo,
ni centris en komputa pensado.

7
00:00:22,050 --> 00:00:25,440
Kaj ni transitioneis de tiu al
Nulo, grafika programado

8
00:00:25,440 --> 00:00:27,360
lingvo de niaj amikoj
ĉe MIT Media Lab.

9
00:00:27,360 --> 00:00:31,730
>> Kaj kun Scratch, ni esploru
ideoj kiel funkcioj kaj kondiĉoj

10
00:00:31,730 --> 00:00:35,210
kaj maŝojn kaj variabloj, kaj eĉ
eventoj, kaj fadenoj, kaj pli.

11
00:00:35,210 --> 00:00:37,880
Kaj hodiaŭ, ni tuj
kontinui uzante tiujn ideojn,

12
00:00:37,880 --> 00:00:40,630
kaj vere prenas ilin por
konceditaj, sed traduki ilin

13
00:00:40,630 --> 00:00:44,220
al alia lingvo nomata C. Nun,
C estas pli tradiciaj lingvo.

14
00:00:44,220 --> 00:00:46,020
Ĝi estas malalta nivelo
lingvo, se vi volas.

15
00:00:46,020 --> 00:00:47,300
>> Ĝi estas pure teksta.

16
00:00:47,300 --> 00:00:49,910
Kaj do unuavide, ĝi estas
ĉiuj tuj serĉos iom kamufla

17
00:00:49,910 --> 00:00:51,430
se vi neniam planita antaŭe.

18
00:00:51,430 --> 00:00:53,530
Ni tuj devas
punktokomoj kaj krampoj,

19
00:00:53,530 --> 00:00:55,150
kaj krispa krampoj, kaj pli.

20
00:00:55,150 --> 00:00:57,240
Sed rimarkas ke eĉ
kvankam la sintakso estas

21
00:00:57,240 --> 00:01:00,600
pri rigardi iomete nekonataj
al plejparto de vi, vidas preter tio.

22
00:01:00,600 --> 00:01:03,220
Kaj provi vidi la ideojn
kiuj estas ja konata,

23
00:01:03,220 --> 00:01:06,750
ĉar tie en semajno unu kia
ni komencos fari estas kompari,

24
00:01:06,750 --> 00:01:08,980
komence, Scratch kontre C.

25
00:01:08,980 --> 00:01:12,350
>> Do, ekzemple, memoras ke kiam ni
implementado la unua de niaj programoj

26
00:01:12,350 --> 00:01:16,220
lasta fojo, ni havis blokon kiu aspektis
iom io this-- kiam

27
00:01:16,220 --> 00:01:19,990
verdaj flago klakis, kaj tiam ni devis
unu aŭ pli enigmo pecoj sub ĝi,

28
00:01:19,990 --> 00:01:22,150
tiukaze, diru, saluton mondo.

29
00:01:22,150 --> 00:01:24,870
Do efektive, en Scratch,
Kiam mi klakas tiu verda flago

30
00:01:24,870 --> 00:01:27,390
kuri mia programo, do
paroli, tio estas

31
00:01:27,390 --> 00:01:29,520
la blokojn kiuj aplikiĝas, aŭ kuri.

32
00:01:29,520 --> 00:01:32,230
Kaj, specife, Scratch
diris, saluton, mondo.

33
00:01:32,230 --> 00:01:35,377
>> Nun, mi povus esti precizigita
malsamaj vortoj tie.

34
00:01:35,377 --> 00:01:37,960
Sed ni vidos ke ja multaj
de tiuj blocks-- kaj efektive,

35
00:01:37,960 --> 00:01:41,880
en C da functions-- povas esti
parametrigita aŭ adaptitajn

36
00:01:41,880 --> 00:01:43,150
fari malsamajn aferojn.

37
00:01:43,150 --> 00:01:45,520
Fakte, en C, se ni
volas konverti, nun,

38
00:01:45,520 --> 00:01:47,567
ĉi Scratch programo
al tiu alia lingvo,

39
00:01:47,567 --> 00:01:49,650
ni tuj skribos
iom io tiamaniere.

40
00:01:49,650 --> 00:01:52,540
>> Koncedita, ekzistas iu nekonata
sintakso tie plej verŝajne, int,

41
00:01:52,540 --> 00:01:54,380
kaj krampojn kaj dezerta.

42
00:01:54,380 --> 00:01:57,740
Sed printf-- kvankam vi farus
kredas ke nur estus presitaj.

43
00:01:57,740 --> 00:02:00,120
Sed presitaj signifas presaĵo
formatita, kiel ni baldaŭ vidos.

44
00:02:00,120 --> 00:02:02,140
Ĉi laŭvorte presos
al la ekrano ajn

45
00:02:02,140 --> 00:02:05,990
estas ene de tiuj krampoj, kiuj
Kompreneble en tiu kazo estas, saluton mondo.

46
00:02:05,990 --> 00:02:09,290
>> Sed vi rimarkos iun alian
sintakso, iuj citiloj,

47
00:02:09,290 --> 00:02:11,890
ke la krampoj ĉe la fino,
la duon-dupunkto kaj similaj.

48
00:02:11,890 --> 00:02:15,027
Do ekzistas iom de supre,
tiel diri, ambaŭ cognitively

49
00:02:15,027 --> 00:02:17,860
kaj sintakse, ke ni iras
havi memori antaux longe.

50
00:02:17,860 --> 00:02:20,720
Sed rimarkas ke kun praktiko,
tio komencos salti tra vi.

51
00:02:20,720 --> 00:02:24,920
>> Fakte, ni enfokusigi ke oni
funkcio specifically-- tiukaze,

52
00:02:24,920 --> 00:02:26,290
diru saluton mondo.

53
00:02:26,290 --> 00:02:27,560
Tiel diri estas la funkcio.

54
00:02:27,560 --> 00:02:31,320
Saluton mondo estas lia parametro,
aŭ argumento, lia personigo.

55
00:02:31,320 --> 00:02:34,320
>> Kaj la ekvivalento en C estas nur
tuj estos ĉi tiu linio tie,

56
00:02:34,320 --> 00:02:38,710
kie printf samvaloras, diru,
la duobla citita ŝnuro, saluton

57
00:02:38,710 --> 00:02:41,470
mondo egalas kompreneble
al kio estas en la blanka skatolo.

58
00:02:41,470 --> 00:02:45,680
Kaj la backslash n, kvankam iom
stranga kaj forestanta de Scratch,

59
00:02:45,680 --> 00:02:49,380
simple tuj havi la efikon ni
vidi en komputilo, kiel mia Mac aŭ PC,

60
00:02:49,380 --> 00:02:51,660
de nur movanta la
kursoron al la sekvanta linio.

61
00:02:51,660 --> 00:02:53,970
Estas kiel frapanta
Entajpu sur via klavaro.

62
00:02:53,970 --> 00:02:55,580
>> Do ni vidos ke denove antaŭ longe.

63
00:02:55,580 --> 00:02:58,640
Sed unue, Lasita-a preni rigardi ĉi
alia ekzemplo estas la kazo de cikloj.

64
00:02:58,640 --> 00:03:02,830
Ni havis ĉi eterna buklo lasta fojo,
kiu estis serio de puzlo pecoj

65
00:03:02,830 --> 00:03:05,490
kiuj faris ion laŭvorte
forever-- tiukaze,

66
00:03:05,490 --> 00:03:08,360
diru, saluton mondo, saluton mondo,
saluton mondo, saluton mondo.

67
00:03:08,360 --> 00:03:10,350
Do ĝi estas senfina ciklo de dezajno.

68
00:03:10,350 --> 00:03:14,580
>> En C, se ni volas apliki tiun
sama ideo, ni povus simple fari tion.

69
00:03:14,580 --> 00:03:19,570
Dum vera, printf saluton world-- nun
dum, nur semantike, ia

70
00:03:19,570 --> 00:03:23,090
elvokas la ideon de fari
io denove kaj denove, kaj denove,

71
00:03:23,090 --> 00:03:23,980
kaj por kiom longe?

72
00:03:23,980 --> 00:03:27,990
Nu, true-- revokon ke
vera estas nur sur aŭ unu.

73
00:03:27,990 --> 00:03:30,660
>> Kaj vera estas, kompreneble, ĉiam vera.

74
00:03:30,660 --> 00:03:33,060
Do ĝi estas speco de sensignifa
deklaro simple diri vera.

75
00:03:33,060 --> 00:03:36,890
Sed ja, tio estas intenca,
ĉar se vera estas nur ĉiam vera,

76
00:03:36,890 --> 00:03:40,850
ol dum vera nur implicas,
se iom nerekte,

77
00:03:40,850 --> 00:03:44,070
ke la sekvajn liniojn de kodo
intere tiuj buklaj krampoj

78
00:03:44,070 --> 00:03:48,320
devus nur ekzekuti denove, kaj denove,
kaj denove, kaj neniam vere halti.

79
00:03:48,320 --> 00:03:50,230
>> Sed se vi deziras vian
buklo halti, kiel ni

80
00:03:50,230 --> 00:03:54,500
faris lastan fojon kun iu kiel
tiu, ripeti la sekvaj 50 fojojn,

81
00:03:54,500 --> 00:03:57,700
en C ni povas fari lin sama kun kio estas
nomita por loop-- la ŝlosilvorto

82
00:03:57,700 --> 00:03:59,330
ne dum, sed por.

83
00:03:59,330 --> 00:04:03,290
Kaj tiam ni havas kelkajn novajn sintakso tie,
kun int i egalas 0, i malpli ol 50,

84
00:04:03,290 --> 00:04:03,880
i ++.

85
00:04:03,880 --> 00:04:05,430
Kaj ni revenos al tio.

86
00:04:05,430 --> 00:04:09,660
Sed tiu estas simple kiel ni farus
traduki la aro de Scratch blokoj

87
00:04:09,660 --> 00:04:13,079
al aro de C linioj de kodo.

88
00:04:13,079 --> 00:04:14,450
>> Dume, Konsideri variabloj.

89
00:04:14,450 --> 00:04:16,540
Kaj, fakte, ni nur
vidis antaŭ momento.

90
00:04:16,540 --> 00:04:21,220
Kaj en la kazo de Scratch, se ni
volis deklari variablon nomis i

91
00:04:21,220 --> 00:04:24,590
por i esti entjero, nur nombro,
kaj ni volas agordi ĝin por iu valoro,

92
00:04:24,590 --> 00:04:28,410
ni uzus tiun oranĝo
bloki here-- starigis i al 0.

93
00:04:28,410 --> 00:04:30,800
>> Kaj ni vidos hodiaŭ kaj
preter, kiel pasintsemajne,

94
00:04:30,800 --> 00:04:33,850
programistoj fari preskaŭ ĉiam
komenci rakonti de nulo, vere

95
00:04:33,850 --> 00:04:34,950
per konvencio.

96
00:04:34,950 --> 00:04:37,250
Sed ankaŭ ĉar revoko de
nia diskuto de duuma,

97
00:04:37,250 --> 00:04:39,990
la plej malgranda nombro vi povas
reprezenti kun iu ajn nombro de bitoj

98
00:04:39,990 --> 00:04:41,640
estas ĝuste tuj esti 0 sin.

99
00:04:41,640 --> 00:04:45,190
Kaj tiel ni ĝenerale komencas
inicializar nia variabloj al 0.

100
00:04:45,190 --> 00:04:47,710
>> Kaj en C por fari la saman,
ni tuj diru int

101
00:04:47,710 --> 00:04:50,110
por entjero, I nur per konvencio.

102
00:04:50,110 --> 00:04:53,390
Mi povus esti nomata ĉi ŝanĝiĝema
ion mi volas, ĝuste kiel en Scratch.

103
00:04:53,390 --> 00:04:57,770
Kaj tiam egalas 0 ĵus kuratoroj
la valoron 0 de la dekstra

104
00:04:57,770 --> 00:05:01,319
kaj metas ĝin en la variablo, aŭ la
stokado ujo tie, maldekstre.

105
00:05:01,319 --> 00:05:04,360
Kaj la duon-dupunkto kiel ni see-- kaj
ni vidis kelkajn el tiuj already--

106
00:05:04,360 --> 00:05:06,530
nur signifas finon de penso.

107
00:05:06,530 --> 00:05:09,430
Procedi fari ion alian
sur la linioj kiuj sekvas.

108
00:05:09,430 --> 00:05:11,330
>> Nun, kio pri Bulea esprimoj?

109
00:05:11,330 --> 00:05:14,320
Memoru ke en Scratch,
jen esprimoj

110
00:05:14,320 --> 00:05:16,740
kiuj estas ĉu vera
aŭ false-- demandoj,

111
00:05:16,740 --> 00:05:18,910
vere, ke estas ĉu vera aŭ malvera.

112
00:05:18,910 --> 00:05:21,960
Tiel en la kazo de Scratch, ni eble
demandi simplan demandon tiel,

113
00:05:21,960 --> 00:05:24,586
Estas i malpli ol 50?

114
00:05:24,586 --> 00:05:25,710
Do mi, denove, estas entjero.

115
00:05:25,710 --> 00:05:27,210
Eble ni uzas ĝin
en Scratch programo

116
00:05:27,210 --> 00:05:29,310
konservi trako de dudeko
aŭ ion tian.

117
00:05:29,310 --> 00:05:33,810
Do tiu sintakso tie en Scratch
nur signifas, estas i malpli ol 50?

118
00:05:33,810 --> 00:05:37,330
Nu, dankeme, io
simpla en C. Kaj traduki,

119
00:05:37,330 --> 00:05:41,780
tio ni simple diru i malpli
ol 50, uzante la konata ŝlosilo

120
00:05:41,780 --> 00:05:42,850
sur via klavaro.

121
00:05:42,850 --> 00:05:45,141
>> Dume, se vi volis
diri ion pli ĝenerala,

122
00:05:45,141 --> 00:05:49,890
kiel, nu, estas x malpli ol y, kie ĉiu
de x kaj y estas mem variabloj?

123
00:05:49,890 --> 00:05:52,280
Ni povas fari la samon
en C, tiel longe kiel ni havas

124
00:05:52,280 --> 00:05:53,942
kreita tiuj variabloj jam.

125
00:05:53,942 --> 00:05:55,650
Kaj ni vidos kiel
faru tion antaŭ longe.

126
00:05:55,650 --> 00:05:58,590
Ni simple diru x malpli ol y.

127
00:05:58,590 --> 00:06:00,530
>> Do vi komencas
vidi iujn similecojn.

128
00:06:00,530 --> 00:06:03,490
Kaj tiuj homoj, kiuj faris
Nulo estis certe

129
00:06:03,490 --> 00:06:05,250
inspirita iuj de tiuj bazaj ideoj.

130
00:06:05,250 --> 00:06:10,350
Kaj vi vidos tian
sintakso en multaj languages--

131
00:06:10,350 --> 00:06:12,160
Ne nur Scratch, ne
nur C, sed Python,

132
00:06:12,160 --> 00:06:14,790
kaj JavaScript, kaj
aliaj lingvoj ankoraŭ.

133
00:06:14,790 --> 00:06:18,270
>> Ni konsideru alian konstrukcio
de C, la nocio de kondiĉo,

134
00:06:18,270 --> 00:06:20,370
fari ion kondiĉe.

135
00:06:20,370 --> 00:06:22,720
Se io estas vera, do ĉi.

136
00:06:22,720 --> 00:06:24,457
Se io alia estas vera, fari tion.

137
00:06:24,457 --> 00:06:27,040
Ĝi estas speco de la programado
ekvivalenta de forko en la vojo.

138
00:06:27,040 --> 00:06:29,730
Eble ĝi estas dudirekta forko,
tridirekta forko, aŭ pli.

139
00:06:29,730 --> 00:06:32,800
Kaj en Scratch, ni havu
vidis ion kiel tiu.

140
00:06:32,800 --> 00:06:34,010
>> Do ĉi tiu estas granda.

141
00:06:34,010 --> 00:06:36,750
Sed konsideri la relativan
simpleco de la logiko.

142
00:06:36,750 --> 00:06:44,010
Se x estas pli malgranda ol y, tiam diru x estas malpli
ol y, alie se x estas pli granda ol y,

143
00:06:44,010 --> 00:06:46,230
tiam diru x estas pli granda ol y.

144
00:06:46,230 --> 00:06:48,300
Kaj tiam, logike, se
vi pensas reen al Scratch

145
00:06:48,300 --> 00:06:52,610
aŭ nur via propra homa intuicio,
bone, se x ne estas pli granda ol y, kaj x

146
00:06:52,610 --> 00:06:57,000
ne malpli ol y, tiam kompreneble
x estas iranta esti egala al y.

147
00:06:57,000 --> 00:06:59,690
Do en ĉi tiu kazo, de nestado
tiuj Scratch blokoj,

148
00:06:59,690 --> 00:07:02,580
ni povas atingi tri
maniero forkon en la vojo?

149
00:07:02,580 --> 00:07:04,980
>> Dume, se ni volas
fari tion en C, ĝi eble

150
00:07:04,980 --> 00:07:08,420
aspektas iom simpler-- almenaŭ
iam vi akiri familiara kun la sintakso.

151
00:07:08,420 --> 00:07:12,050
Se x estas pli malgranda ol y,
printf x estas malpli ol y.

152
00:07:12,050 --> 00:07:16,140
Else if x estas pli granda ol y,
printf x estas pli granda ol y.

153
00:07:16,140 --> 00:07:21,210
Alie printf x estas egala al y-- kaj,
denove kun tiuj backslash finiĝas ĵus

154
00:07:21,210 --> 00:07:24,160
por tiuj novaj linioj por ke se vi
fakte kuris tian programon

155
00:07:24,160 --> 00:07:25,940
ĝi simple movas
vian kursoron finfine

156
00:07:25,940 --> 00:07:28,100
al la sekva linio de la ekrano.

157
00:07:28,100 --> 00:07:31,270
>> Nun, dume Scratch havis aliajn
pli kompleksaj funkcioj, nur

158
00:07:31,270 --> 00:07:34,320
iuj de kiuj ni tuj
komence movi super al la mondo de C.

159
00:07:34,320 --> 00:07:37,010
Kaj unu el ili estis
nomita listo en Scratch.

160
00:07:37,010 --> 00:07:39,100
Kaj tio estis speciala
tipo de variablo kiu

161
00:07:39,100 --> 00:07:42,840
permesis stoki multoblajn aferojn
en ĝin, subteni, apogi, subteni.

162
00:07:42,840 --> 00:07:45,540
>> En C, ĝi ne havas
listoj, per, sed io

163
00:07:45,540 --> 00:07:48,090
kiuj estas pli ĝenerale
nomata tabeloj, kvankam ni

164
00:07:48,090 --> 00:07:50,590
revenu poste ĉi semestro
por rigardi ion

165
00:07:50,590 --> 00:07:52,780
nomita liston, aŭ vere ligillisto.

166
00:07:52,780 --> 00:07:55,510
Sed nuntempe, la plej proksima
ekvivalenta en C por ni

167
00:07:55,510 --> 00:07:57,345
tuj estos io
nomita tabelo.

168
00:07:57,345 --> 00:07:59,740
Kaj tabelo estas simple
speciala tipo de variablo

169
00:07:59,740 --> 00:08:03,160
kiu permesas stoki datumoj
dorso, apogi, subteni, por dorso.

170
00:08:03,160 --> 00:08:05,840
>> Kaj cetere, en Scratch,
Se ni volis atingi

171
00:08:05,840 --> 00:08:09,030
la unua elemento de tabelo aŭ
oni list-- kaj mi tuj vokos ŝin,

172
00:08:09,030 --> 00:08:13,600
per konvencio, argv, argumento
vektoro, sed pli sur tiu antaŭ longe.

173
00:08:13,600 --> 00:08:17,090
Se mi volas ricevi la unuan elementon
de argv, en la mondo de Scratch

174
00:08:17,090 --> 00:08:20,930
vi fakte faras tipe
komenci rakonti de 1.

175
00:08:20,930 --> 00:08:22,850
>> Do mi povus akiri eron 1 de argv.

176
00:08:22,850 --> 00:08:26,310
Tio estas nur kiel MIT implementado
la nocio de listoj.

177
00:08:26,310 --> 00:08:29,860
Sed en C, mi tuj
pli simple nur diru, argv,

178
00:08:29,860 --> 00:08:32,758
kiu denove estas la nomo de mia
list-- aŭ esti klara, tabelo.

179
00:08:32,758 --> 00:08:34,549
Kaj se mi volas la unuan
elementoj, mi tuj

180
00:08:34,549 --> 00:08:37,890
uzi kvadrataj krampoj, kion vi
eble ne ofte uzita sub klavaro.

181
00:08:37,890 --> 00:08:40,150
>> Sed 0 signifas nur, min la unua.

182
00:08:40,150 --> 00:08:42,160
Tiel sur okazo kaj kiel
tempo pasas, ni tuj

183
00:08:42,160 --> 00:08:44,570
komenci vidi tiujn dicotomías
inter Scratch kaj C,

184
00:08:44,570 --> 00:08:46,070
per Scratch uzas.

185
00:08:46,070 --> 00:08:47,670
Ni en C utiligas 0 tie.

186
00:08:47,670 --> 00:08:49,420
Sed vi rapide vidi
iam vi komprenos

187
00:08:49,420 --> 00:08:52,920
la fundamentoj de ĉiu lingvo, ke
tiuj aĵoj komencas akiri ĉiujn pli

188
00:08:52,920 --> 00:08:56,860
familiara tra praktiko kaj praktiko.

189
00:08:56,860 --> 00:08:59,700
>> Do ni vere rigardi nun en programo.

190
00:08:59,700 --> 00:09:04,031
Tie estos la unua de nia C
fontkodon por kompleta programoj.

191
00:09:04,031 --> 00:09:06,280
Kaj la programo ni iras
oferi pro konsidero

192
00:09:06,280 --> 00:09:09,340
Estas kiu estas ekvivalenta
por ke antaŭaj Scratch peco.

193
00:09:09,340 --> 00:09:13,210
>> Do tie, ni havas kio estas
eble la plej simpla C programon

194
00:09:13,210 --> 00:09:15,410
vi povas skribi ke
fakte faras ion.

195
00:09:15,410 --> 00:09:18,250
Nun ni rigardu pasinteco,
nuntempe, ĝi inkludas:

196
00:09:18,250 --> 00:09:21,190
norma io.h, kaj tiuj angulo
krampoj, kaj int kaj dezerta,

197
00:09:21,190 --> 00:09:22,840
kaj la krispa krampoj, kaj similaj.

198
00:09:22,840 --> 00:09:25,390
>> Kaj ni simple enfokusigi
kio, almenaŭ intuicie,

199
00:09:25,390 --> 00:09:26,860
povus salti tra vi jam.

200
00:09:26,860 --> 00:09:30,300
Fakte, ĉefa, mi ne faras
nepre scias kio tiu estas,

201
00:09:30,300 --> 00:09:34,580
sed multe kiel Scratch havis kiam
verdaj flago klakis enigmo pecon,

202
00:09:34,580 --> 00:09:39,070
tiel faras C programlingvo
havas ĉefan pecon de kodo kiu

203
00:09:39,070 --> 00:09:43,380
gets ekzekutita defaŭlte. Kaj, efektive,
ĝi estas laŭvorte tuj nomos ĉefa.

204
00:09:43,380 --> 00:09:44,720
>> Tiel ĉefa estas funkcio.

205
00:09:44,720 --> 00:09:48,720
Kaj ĝi estas speciala funkcio kiu ekzistas
en C ke kiam vi kuros programon,

206
00:09:48,720 --> 00:09:52,720
ĝi estas ĉefa kiu akiras kuri per
defaŭlta. En la mondo de Scratch,

207
00:09:52,720 --> 00:09:56,970
estis kutime kiam verda flago
klakis ke got kuras defaŭlte.

208
00:09:56,970 --> 00:10:01,130
>> Dume, ni vidis tion antaŭe,
printf aŭ presita formatita, jen

209
00:10:01,130 --> 00:10:05,620
tuj esti funkcio kiu venas kun
C, kune kun tuta amaso de aliaj,

210
00:10:05,620 --> 00:10:10,140
ke volo de tempo kaj tempo
denove, por fari precize

211
00:10:10,140 --> 00:10:12,450
kiel ĝia nomo indikas, montri ion.

212
00:10:12,450 --> 00:10:13,500
Kion ni volas presi?

213
00:10:13,500 --> 00:10:15,770
Nu, ni vidos ke
per enmetanta karakteroj

214
00:10:15,770 --> 00:10:18,680
kiel these-- saluton mondo,
backslash n en citiloj,

215
00:10:18,680 --> 00:10:23,040
ni povas diri printf ekzakte
kio presi sur la ekrano.

216
00:10:23,040 --> 00:10:26,430
>> Sed por fari
ke ni bedaŭrinde

217
00:10:26,430 --> 00:10:30,010
bezonas preni iun kiu estas
Jam kamufla por ni homoj,

218
00:10:30,010 --> 00:10:34,510
sed almenaŭ estas iom readable--
akra inkluzivas, norma io.h, int,

219
00:10:34,510 --> 00:10:39,340
ĉefa, malplenon, printf, ĉiuj la magiaj
sorĉojn ni ĵus vidis en la ekrano.

220
00:10:39,340 --> 00:10:42,470
Sed ni efektive devas
iri pli arcano ankoraŭ.

221
00:10:42,470 --> 00:10:47,140
Ni unue bezonas por traduki la kodon
ke ni skribu en maŝino kodo.

222
00:10:47,140 --> 00:10:51,370
Kaj memoras de lasta semajno ke maŝinoj,
almenaŭ tiuj ni konas tie,

223
00:10:51,370 --> 00:10:54,450
fine de la tago nur
kompreni nuloj kaj aĵoj.

224
00:10:54,450 --> 00:10:58,100
>> Kaj mia Dio, se ni devis verki tiujn
nuloj kaj reale programo,

225
00:10:58,100 --> 00:11:01,260
ĝi volis tre, tre rapide
preni la amuza el io.

226
00:11:01,260 --> 00:11:05,150
Sed rezultas, po pasintsemajne,
ke tiuj ŝablonoj de nuloj kaj

227
00:11:05,150 --> 00:11:06,400
nur havas specialan signifon.

228
00:11:06,400 --> 00:11:08,500
En certaj kuntekstoj,
ili povus signifi nombroj.

229
00:11:08,500 --> 00:11:11,840
>> En iuj kuntekstoj, oni povus signifi
literoj aŭ koloroj, aŭ ajna nombro

230
00:11:11,840 --> 00:11:14,710
de aliaj abstraktaĵoj kovris.

231
00:11:14,710 --> 00:11:18,450
Sed nur kiel via komputilo havas
CPU, la Centra Processing Unit,

232
00:11:18,450 --> 00:11:20,390
aŭ la cerbo ene de via komputilo.

233
00:11:20,390 --> 00:11:22,240
Ĝi estas kutime Intel
interne, ĉar tio estas

234
00:11:22,240 --> 00:11:24,900
unu el la plej grandaj kompanioj
kiu faras CPUs por komputiloj.

235
00:11:24,900 --> 00:11:28,910
>> Nu, Intel CPUs kaj aliaj
simple decidis anticipe

236
00:11:28,910 --> 00:11:33,970
ke iuj ŝablonoj de nuloj kaj
tiuj devas signifi specifajn aferojn.

237
00:11:33,970 --> 00:11:37,040
Certaj ŝablonoj de nuloj kaj
signifos, presi ĉi al la ekrano,

238
00:11:37,040 --> 00:11:39,710
aŭ aldoni tiujn du nombroj, aŭ
subtrahi tiuj du nombroj,

239
00:11:39,710 --> 00:11:43,310
aŭ movi pecon de datumoj de
mia komputilo memoro super tie,

240
00:11:43,310 --> 00:11:47,870
aŭ ajnan numeron de aliaj tre malalta nivelo,
sed finfine utila, operacioj.

241
00:11:47,870 --> 00:11:53,022
Sed, dankeme, ni homoj ne tuj
bezoni scii tiun nivelon de detalo.

242
00:11:53,022 --> 00:11:56,230
Efektive, nur ŝatas lasta fojo, kie ni
distrita denove, kaj denove, kaj denove,

243
00:11:56,230 --> 00:11:58,930
konstruaĵo de tre malalta nivelo
primitivoj kiel nuloj kaj

244
00:11:58,930 --> 00:12:01,160
al pli alta nivelo konceptoj
kiel numeroj kaj literoj,

245
00:12:01,160 --> 00:12:04,330
kaj koloroj, kaj pli,
tiel povas nin kiel programistoj

246
00:12:04,330 --> 00:12:07,080
staru sur la ŝultroj de
aliaj kiuj nin antaŭis

247
00:12:07,080 --> 00:12:11,260
kaj uzi programaron ke aliaj
homoj skribis antaŭ us--

248
00:12:11,260 --> 00:12:14,340
nome programoj nomitaj tradukiloj.

249
00:12:14,340 --> 00:12:17,770
>> C estas lingvo kiu
estas kutime kompilita,

250
00:12:17,770 --> 00:12:22,130
kio signifas igitaj de
fontkodon maŝino kodo.

251
00:12:22,130 --> 00:12:25,230
En aparta, kion tio signifas
estas ke se vi havas via fonto

252
00:12:25,230 --> 00:12:29,530
kodo kiun vi mem skribas, kiel ni baldaŭ
ja nur momento sur la ekrano,

253
00:12:29,530 --> 00:12:33,140
kaj vi volas konverti ĝin
finfine maŝino code--

254
00:12:33,140 --> 00:12:37,100
tiuj nuloj kaj ke
nur via Mac aŭ via PC

255
00:12:37,100 --> 00:12:41,230
understands-- vi hvas unua
nutros fontkodon en kiel

256
00:12:41,230 --> 00:12:46,340
enigo al speciala
programo nomata tradukilo,

257
00:12:46,340 --> 00:12:48,974
la eligo de kiu ni
ekvidos estas maŝino kodo.

258
00:12:48,974 --> 00:12:51,890
Kaj cetere, lastan fojon ni parolis
pri, vere, ĉe la fino de la tago,

259
00:12:51,890 --> 00:12:52,610
solvi problemojn.

260
00:12:52,610 --> 00:12:53,360
Vi havas enigoj.

261
00:12:53,360 --> 00:12:54,318
Kaj vi havas eligoj.

262
00:12:54,318 --> 00:12:56,560
Kaj vi havas ian
de algoritmo en la mezo.

263
00:12:56,560 --> 00:12:59,830
>> Algoritmoj povas farigxos
implementado en programaro,

264
00:12:59,830 --> 00:13:02,900
kiel ni vidis kun _pseudocode_ lasta semajno
kaj kiel ni vidos kun reala kodo

265
00:13:02,900 --> 00:13:03,490
ĉi-semajne.

266
00:13:03,490 --> 00:13:06,430
Kaj tiel tradukilo vere nur
havas aron de algoritmoj ene

267
00:13:06,430 --> 00:13:10,060
de tio, kion scipovas
konverti la specialaj ŝlosilvortoj,

268
00:13:10,060 --> 00:13:12,180
kiel ĉefa, kaj printf,
kaj aliaj, ke ni ĵus

269
00:13:12,180 --> 00:13:17,620
vidis en la ŝablonoj de nuloj kaj
kiuj Intel ene kaj aliaj CPUs

270
00:13:17,620 --> 00:13:20,020
vere komprenas.

271
00:13:20,020 --> 00:13:22,460
Nu do kiel ni faros tion?

272
00:13:22,460 --> 00:13:24,470
Kie ni preni tradukilo?

273
00:13:24,470 --> 00:13:26,400
>> Plimulto de ni ĉi tie havas Mac aŭ PC.

274
00:13:26,400 --> 00:13:29,152
Kaj vi uzas Mac OS, aŭ
Fenestroj, aŭ Linukso aŭ Solaris,

275
00:13:29,152 --> 00:13:30,860
aŭ ajnan numeron de aliaj
mastrumaj sistemoj.

276
00:13:30,860 --> 00:13:32,568
Kaj, efektive, ni povis
iros sur la TTT

277
00:13:32,568 --> 00:13:35,710
kaj elŝuti compilador
por via Mac aŭ via PC

278
00:13:35,710 --> 00:13:37,360
por via aparta mastruma sistemo.

279
00:13:37,360 --> 00:13:39,617
Sed ni ĉiuj estus sur
malsamaj paĝoj, por tiel diri.

280
00:13:39,617 --> 00:13:41,450
Necesus iomete
malsamaj konfiguracioj.

281
00:13:41,450 --> 00:13:43,210
Kaj aferoj ne funkcius tutegale.

282
00:13:43,210 --> 00:13:45,280
Kaj ja, tiuj tagoj
multaj el ni ne uzas

283
00:13:45,280 --> 00:13:47,516
programaro kiu kuras nur sur nia tekkomputiloj.

284
00:13:47,516 --> 00:13:49,390
Anstataŭe, ni uzas ion
kiel navegador kiu

285
00:13:49,390 --> 00:13:52,930
permesas al ni aliri ttt-bazita
aplikoj en la nubo.

286
00:13:52,930 --> 00:13:55,630
Kaj poste tiu semestro,
ni faros ĝuste tion.

287
00:13:55,630 --> 00:13:59,660
Ni skribos aplikoj aŭ
programaro uzante code-- ne C,

288
00:13:59,660 --> 00:14:02,860
sed aliaj lingvoj kiel Python kaj
JavaScript-- kiuj kuras en la nubo.

289
00:14:02,860 --> 00:14:05,860
>> Kaj por fari tion, ni mem
dum la semestro

290
00:14:05,860 --> 00:14:11,890
efektive uzi nubo-bazita
medio nomata CS50 IDE.

291
00:14:11,890 --> 00:14:16,030
Jen ttt-bazita programado
medio, aŭ integrita disvolviĝo

292
00:14:16,030 --> 00:14:20,610
medio, ide, ke estas konstruita sur la pinto iuj
malferma fonto programaro nomita Cloud 9.

293
00:14:20,610 --> 00:14:22,966
Kaj ni faris iujn pedagogiajn
simpligoj al ĝi

294
00:14:22,966 --> 00:14:25,840
tiel kiel por kaŝi iuj karakterizaĵoj en
la unuaj semajnoj, ke ni ne bezonas,

295
00:14:25,840 --> 00:14:27,770
post kiu vi povas
malkaŝi ilin kaj fari plej

296
00:14:27,770 --> 00:14:29,400
ajn vi volas per la medio.

297
00:14:29,400 --> 00:14:32,470
>> Kaj ĝi permesas nin ankaŭ al
antaŭ- instali iuj programaro.

298
00:14:32,470 --> 00:14:35,330
Aĵoj kiel tn CS50
biblioteko, kiun ni baldaŭ vidos

299
00:14:35,330 --> 00:14:39,210
provizas nin en C kun kelkaj
aldonajn funkciojn.

300
00:14:39,210 --> 00:14:44,392
Do se vi iras al, finfine, CS50.io,
vi estos petata ensaluti,

301
00:14:44,392 --> 00:14:46,350
Kaj unufoje vi faras kaj krei
konton senpage,

302
00:14:46,350 --> 00:14:52,150
Vi povos aliri
medio kiu aspektas tute kiel ĉi.

303
00:14:52,150 --> 00:14:53,760
>> Nun, tiu estas en la defaŭlta modo.

304
00:14:53,760 --> 00:14:55,650
Ĉio estas bela kaj
brila sur la ekrano.

305
00:14:55,650 --> 00:14:57,941
Multaj el ni havas kutimon
laborante en CS50 peco tio

306
00:14:57,941 --> 00:14:59,150
tre malfrue en la nokto.

307
00:14:59,150 --> 00:15:02,400
Kaj tiel kelkaj el vi eble preferas
igi nokto mode, por tiel diri.

308
00:15:02,400 --> 00:15:05,550
>> Sed, finfine, kio vi estas
tuj vidos ene CS50 IDE

309
00:15:05,550 --> 00:15:08,340
estas tri distingaj areas--
areo sur la maldekstra kie

310
00:15:08,340 --> 00:15:12,604
viajn dosierojn tuj estos en la
nubo, areo sur la supra dekstra

311
00:15:12,604 --> 00:15:14,270
kie via kodo tuj estos redakteblaj.

312
00:15:14,270 --> 00:15:16,650
Vi povos malfermi
individua langetoj por ajna programo

313
00:15:16,650 --> 00:15:19,670
ke vi skribas ĉi semestro interne
de tiu supra dekstra mano angulo.

314
00:15:19,670 --> 00:15:23,070
Kaj tiam plej arcanely,
kaj ankoraŭ potence,

315
00:15:23,070 --> 00:15:26,610
tuj estos tiu afero en la
malsupro konata kiel fina fenestro.

316
00:15:26,610 --> 00:15:29,450
>> Tio estas malnova lernejo
Komandlinia interfaco,

317
00:15:29,450 --> 00:15:32,240
aŭ CLI, kiu permesas
vi ekzekuti komandojn

318
00:15:32,240 --> 00:15:35,260
sur la computer-- tiukaze,
la komputilo en la cloud--

319
00:15:35,260 --> 00:15:39,090
agi tiamaniere, kompili vian kodon
de fontkodo al maŝino kodo,

320
00:15:39,090 --> 00:15:43,600
kuri via programoj, aŭ komenci vian
retservilo, aŭ por via datumbazo,

321
00:15:43,600 --> 00:15:47,454
kaj kiom ajn da aliaj teknikoj
ke ni ekuzas antaŭ longe.

322
00:15:47,454 --> 00:15:49,370
Sed akiri tie, ni estas
tuj efektive havas

323
00:15:49,370 --> 00:15:51,240
iri enretan kaj komenci ludi.

324
00:15:51,240 --> 00:15:54,399
Kaj por fari tion, ni unua
komenci laboreti kun ĉefa,

325
00:15:54,399 --> 00:15:55,940
kaj skribi la ĉefa parto de programo.

326
00:15:55,940 --> 00:15:59,170
Kaj ni uzu tiun funkcion
printf, kiun ni uzis antaŭe,

327
00:15:59,170 --> 00:16:01,050
simple diri ion.

328
00:16:01,050 --> 00:16:04,910
>> Do jen mi jam ene de CS50 IDE.

329
00:16:04,910 --> 00:16:05,930
Mi ensalutinta anticipe.

330
00:16:05,930 --> 00:16:07,360
Kaj mi plenan sxirmis la fenestro.

331
00:16:07,360 --> 00:16:09,670
Kaj do, finfine, vi
tro en venonta problemoj

332
00:16:09,670 --> 00:16:12,960
sekvos similan paŝoj
provizos rete dokumentado.

333
00:16:12,960 --> 00:16:16,360
Do vi ne bezonas zorgi pri
sorbante ĉiun malgrandan teknikan paŝo

334
00:16:16,360 --> 00:16:17,730
ke mi faras ĉi tie hodiaŭ.

335
00:16:17,730 --> 00:16:19,222
>> Sed vi ricevos ekrano kiel ĉi.

336
00:16:19,222 --> 00:16:20,430
Mi hazarde estas en nokta modo.

337
00:16:20,430 --> 00:16:22,944
Kaj vi povas ilumini ĉio
per malŝalti nokto mode.

338
00:16:22,944 --> 00:16:24,860
Kaj fine de la
tago, vi tuj vidos

339
00:16:24,860 --> 00:16:30,090
tiuj tri ĉefaj areas-- la dosiero
retumilo maldekstre, la kodo langetoj supren supro,

340
00:16:30,090 --> 00:16:32,430
kaj la fina fenestro ĉe la malsupro.

341
00:16:32,430 --> 00:16:34,890
>> Lasu min antaŭeniri kaj
skribi mian unuan programon.

342
00:16:34,890 --> 00:16:42,300
Mi tuj preventa iri al Dosiero:
Savi, kaj savu mian dosieron kiel hello.c.

343
00:16:42,300 --> 00:16:46,850
Efektive, per konvencio, ajna programo ni
skribi ke estas skribita en la lingvo C

344
00:16:46,850 --> 00:16:49,739
devus esti nomita ion
punkto c, per konvencio.

345
00:16:49,739 --> 00:16:53,030
Do mi tuj nomas ĝin hello.c, ĉar
Mi nur volas diri saluton al la mondo.

346
00:16:53,030 --> 00:16:54,820
Nun mi tuj zomi
eksteren kaj klaku Save.

347
00:16:54,820 --> 00:16:58,180
Kaj ĉiuj mi havas ĉi tie nun estas langeto
en kiu mi povas komenci skribi kodon.

348
00:16:58,180 --> 00:16:59,490
>> Ĉi tio ne tuj kompili.

349
00:16:59,490 --> 00:17:00,300
Tio signifas nenion.

350
00:17:00,300 --> 00:17:02,750
Kaj do eĉ se mi konvertiĝis
tio al nuloj kaj,

351
00:17:02,750 --> 00:17:05,390
la CPU tuj havos neniun
ideon kio okazas ĉirkaŭe.

352
00:17:05,390 --> 00:17:14,170
Sed se mi skribas liniojn kiuj kongruas
kun C la conventions-- C estaĵo,

353
00:17:14,170 --> 00:17:20,150
denove, tiu language-- kun sintakso kiel
tiu, printf saluton world-- kaj mi havas

354
00:17:20,150 --> 00:17:22,210
alveninta komforte
farante tiun dum tempo.

355
00:17:22,210 --> 00:17:24,510
Tial mi ne kredas ke mi faris
ajna tipografia eraroj.

356
00:17:24,510 --> 00:17:27,910
>> Sed, senescepte, la plej unua
tempo vi fari tion ĉi, Vi volas.

357
00:17:27,910 --> 00:17:31,090
Kaj kion mi intencas fari povus tre
bone ne funkcias por vi la unuan fojon.

358
00:17:31,090 --> 00:17:33,610
Kaj tio estas perfekte bone,
ĉar nun vi

359
00:17:33,610 --> 00:17:37,662
nur povus vidi amason de noveco,
sed kun la tempo iam vi akiri familiara

360
00:17:37,662 --> 00:17:39,870
kun tiu medio, kaj
tiun lingvon, kaj aliaj,

361
00:17:39,870 --> 00:17:42,370
vi komencas vidi aĵojn kiuj
estas ĉu ĝusta aŭ malĝusta.

362
00:17:42,370 --> 00:17:44,369
>> Kaj tio estas, kion la
instruado uloj kaj kompreneble

363
00:17:44,369 --> 00:17:48,780
helpantoj tiom bona en la tempo, estas
ekvidanta erarojn aŭ misfunkciadojn en via kodo.

364
00:17:48,780 --> 00:17:52,110
Sed mi asertas ke
neniuj cimoj en tiu kodo.

365
00:17:52,110 --> 00:17:53,990
Do mi nun volas kuri ĉi programo.

366
00:17:53,990 --> 00:17:57,440
>> Nun mia propra Mac aŭ PC, mi estas en
la kutimo de duobla musklako ikonoj

367
00:17:57,440 --> 00:17:59,350
kiam mi volas kuri iun programon.

368
00:17:59,350 --> 00:18:01,080
Sed tio ne estas la modelo tie.

369
00:18:01,080 --> 00:18:04,570
En tiu medio, kiu estas CS50 IDE.

370
00:18:04,570 --> 00:18:07,192
Ni abonas mastruma
sistemo nomita Linukso.

371
00:18:07,192 --> 00:18:09,900
Linukso estas rememoriga pri alia
mastruma sistemo, ĝenerale konataj

372
00:18:09,900 --> 00:18:10,850
kiel Unikso.

373
00:18:10,850 --> 00:18:16,340
Kaj Linukso estas aparte konata pro
havante Komando Linio Medio, CLI.

374
00:18:16,340 --> 00:18:20,070
Nun, ni uzas specifan
gusto de Linukso nomata Ubuntu.

375
00:18:20,070 --> 00:18:22,770
Kaj Ubuntu estas simple
certa versio de Linukso.

376
00:18:22,770 --> 00:18:27,900
>> Sed tiuj Linukso tiuj tagoj fari reale
veni kun grafikaj interfacoj de uzanto.

377
00:18:27,900 --> 00:18:30,360
Kaj la unu ni hazarde
uzanta jen ttt-bazita.

378
00:18:30,360 --> 00:18:32,735
Do tio ĉi povus rigardi eĉ
iom malsama ion

379
00:18:32,735 --> 00:18:35,310
vi mem havu
vidis aŭ kuri en la pasinteco.

380
00:18:35,310 --> 00:18:37,910
>> Do mi tuj iros antaŭen
nun kaj fari la sekvan.

381
00:18:37,910 --> 00:18:40,950
Mi savis ĉi dosiero hello.c.

382
00:18:40,950 --> 00:18:47,350
Mi tuj iros antaŭen kaj
tipo clanghello.c Do Clang

383
00:18:47,350 --> 00:18:49,850
por la C lingvo estas tradukilo.

384
00:18:49,850 --> 00:18:51,952
Estas antaŭ-instalitaj en CS50 IDE.

385
00:18:51,952 --> 00:18:54,910
Kaj vi povas absolute elŝuti kaj
instali ĉi sur via propra Mac aŭ PC.

386
00:18:54,910 --> 00:18:57,910
>> Sed, denove, vi ne havus ĉiujn
la pre-agordo farita por vi.

387
00:18:57,910 --> 00:19:00,940
Do nun, mi estas nur
tuj kuri clanghello.c.

388
00:19:00,940 --> 00:19:03,240
Kaj nun rimarkas tiun sintakson
tie volas eventuale

389
00:19:03,240 --> 00:19:06,930
realigi nur signifas ke mi estas en
dosierujo aŭ dosierujo nomita Workspace.

390
00:19:06,930 --> 00:19:11,030
Ĉi dolaro signo estas simple konvencio
por signifo, tajpu vian komandojn tie.

391
00:19:11,030 --> 00:19:14,560
>> Ĝi estas kio nomiĝas prompto, simple
per konvencio estas dolaro signo.

392
00:19:14,560 --> 00:19:19,130
Kaj se mi iras antaŭen nun kaj klaku
Eniri, nenio ŝajnas okazi.

393
00:19:19,130 --> 00:19:20,930
Sed tio estas fakte bona aĵo.

394
00:19:20,930 --> 00:19:23,650
La malpli kio okazas sur
via ekrano, la pli verŝajna

395
00:19:23,650 --> 00:19:26,710
via kodo estas esti ĝentilaj,
almenaŭ sintakse.

396
00:19:26,710 --> 00:19:29,120
>> Do se mi volas kuri ĉi
programo, kion mi faru?

397
00:19:29,120 --> 00:19:33,770
Nu, tio rezultas ke la
defaŭlta nomo de konvencio

398
00:19:33,770 --> 00:19:38,854
por programoj kiam vi ne specifi
nomas por via programo estas ĝuste a.out.

399
00:19:38,854 --> 00:19:41,270
Kaj tiu sintakso tro, vi
akiri familiara kun antaŭ longe.

400
00:19:41,270 --> 00:19:47,500
>> Dot oblikvo signifas nur, hej, CS50
IDE, kuras programo nomata a.out

401
00:19:47,500 --> 00:19:49,400
kiu estas interne de mia aktuala dosierujo.

402
00:19:49,400 --> 00:19:51,520
Ke skalara signifas la aktuala dosierujo.

403
00:19:51,520 --> 00:19:55,040
Kaj ni vidos kion aliaj tiaj sekvencoj
de karakteroj signifas antaŭ longe.

404
00:19:55,040 --> 00:19:58,430
>> Do jen ni iros, Enter, saluton mondo.

405
00:19:58,430 --> 00:20:00,080
Kaj vi rimarkos, ke kio okazis?

406
00:20:00,080 --> 00:20:01,580
Ne nur ĝi presas saluton mondo.

407
00:20:01,580 --> 00:20:05,990
Ĝi ankaŭ movis la
kursoron al la sekvanta linio.

408
00:20:05,990 --> 00:20:07,160
>> Kaj kial tio okazis?

409
00:20:07,160 --> 00:20:12,400
Kio estis la kodo kiun ni skribis antaŭe
kiu certigis ke la kursoron farus

410
00:20:12,400 --> 00:20:14,882
iri sur la sekva linio?

411
00:20:14,882 --> 00:20:16,840
Amuza afero pri
komputilo estas ĝi estas nur irante

412
00:20:16,840 --> 00:20:18,570
fari laŭvorte kion vi diros ĝin fari.

413
00:20:18,570 --> 00:20:26,050
>> Do se vi rakontos ĝin al printf saluton,
komo, spaco, mondo, proksime citaĵo,

414
00:20:26,050 --> 00:20:29,090
ĝi estas laŭvorte nur iranta
presi tiujn karakterojn.

415
00:20:29,090 --> 00:20:31,980
Sed mi havis tiun specialan karakteron
fine, revokon, backslash n.

416
00:20:31,980 --> 00:20:34,230
Kaj tio certigis
ke la karaktero iris

417
00:20:34,230 --> 00:20:36,570
al la sekva linio de la ekrano.

418
00:20:36,570 --> 00:20:38,097
>> Fakte, mi iros kaj fari tion.

419
00:20:38,097 --> 00:20:39,430
Lasu min antaŭeniri kaj forviŝi ĉi.

420
00:20:39,430 --> 00:20:41,180
Nun, rimarki ke la
supro de mia ekrano ekzistas

421
00:20:41,180 --> 00:20:42,890
iom ruĝa lumo en
la langeto indikante,

422
00:20:42,890 --> 00:20:45,047
hej, vi ne savis vian dosieron.

423
00:20:45,047 --> 00:20:47,880
Do mi tuj iros antaŭen kun kontrolo
S aŭ komando S, savu la dosieron.

424
00:20:47,880 --> 00:20:51,130
Nun goes-- iris por moment-- verda.

425
00:20:51,130 --> 00:20:53,760
Kaj nun ĝi estas reen al
nur estante proksime ikono.

426
00:20:53,760 --> 00:21:01,860
>> Se mi kuros clanghello.c denove,
Eniros, dot oblikvo, a.out, Enter,

427
00:21:01,860 --> 00:21:04,110
vi vidos ke ĝi ankoraŭ funkciis.

428
00:21:04,110 --> 00:21:06,020
Sed estas disputeble iom kalesxo.

429
00:21:06,020 --> 00:21:08,714
Nun, mia prompt-- laborspaca,
kaj tiam ke dolaro signo,

430
00:21:08,714 --> 00:21:10,880
kaj tiam mia fakta prompt--
estas ĉiuj sur la sama linio.

431
00:21:10,880 --> 00:21:14,540
Do tiu certe estetika cimo,
eĉ se ĝi ne estas vere logika eraro.

432
00:21:14,540 --> 00:21:16,250
>> Do mi tuj malfari kion mi ĵus faris.

433
00:21:16,250 --> 00:21:18,560
Mi tuj rerun a.out.

434
00:21:18,560 --> 00:21:22,710
Rimarki Mi aldonis la
lino karaktero dorso.

435
00:21:22,710 --> 00:21:24,280
Mi savis la dosieron.

436
00:21:24,280 --> 00:21:31,630
>> Do mi tuj rerun a.out, kaj-
dammit, cimo, cimo Signifanta eraro.

437
00:21:31,630 --> 00:21:35,020
Do la cimo estas ke kvankam
Mi aldonis la backslash n tie,

438
00:21:35,020 --> 00:21:41,180
re-savita, re-kuris la programo,
la konduto estis la sama.

439
00:21:41,180 --> 00:21:42,640
Kial tiu?

440
00:21:42,640 --> 00:21:43,910
>> Mi mankas paŝo, dekstra?

441
00:21:43,910 --> 00:21:47,620
Ke kerna paŝo pli frue estis, ke vi havas
to-- kiam vi ŝanĝos vian fontkodon,

442
00:21:47,620 --> 00:21:49,610
rezultas ankaŭ kuri
tra la tradukilo

443
00:21:49,610 --> 00:21:51,102
denove tiel vi ricevas novan maŝinon kodon.

444
00:21:51,102 --> 00:21:52,810
Kaj la maŝino kodo,
la nuloj kaj,

445
00:21:52,810 --> 00:21:56,260
tuj estos preskaŭ identaj, sed
Ne perfekte tiel, ĉar ni bezonas,

446
00:21:56,260 --> 00:21:57,510
kompreneble, ke nova linio.

447
00:21:57,510 --> 00:22:02,640
>> Tiel por fiksi tion, mi tuj bezonas
al rerun clanghello.c, eniri, punkto

448
00:22:02,640 --> 00:22:03,800
oblikvo, a.out.

449
00:22:03,800 --> 00:22:08,402
Kaj nun, saluton mondo estas reen
al kie mi atendis ĝin esti.

450
00:22:08,402 --> 00:22:09,610
Do tiu estas la tuta bela kaj bona.

451
00:22:09,610 --> 00:22:13,150
Sed a.out estas sufiĉe stulta nomo por
programo, kvankam ĝi okazas esti,

452
00:22:13,150 --> 00:22:16,530
pro historiaj kialoj, la
default-- signifas asembleon eliroj.

453
00:22:16,530 --> 00:22:20,780
>> Sed lasu min antaŭeniri tie
kaj faru tion malsame.

454
00:22:20,780 --> 00:22:24,760
Mi volas mian saluton mondo programo
por fakte nomi saluton.

455
00:22:24,760 --> 00:22:28,320
Do se estus ikono sur mia
labortablo, ĝi ne a.out.

456
00:22:28,320 --> 00:22:29,730
Ĝi nomus saluton.

457
00:22:29,730 --> 00:22:33,660
>> Do fari tion, rezultas
ke Clang, kiel multaj programoj,

458
00:22:33,660 --> 00:22:37,980
Elportas komandlinio argumentoj,
aŭ flagoj, aŭ ŝaltiloj,

459
00:22:37,980 --> 00:22:39,600
kiu simple influi lian konduton.

460
00:22:39,600 --> 00:22:45,160
Specife, Clang eltenas haltostreko o
flago, kiu tiam prenas duan vorton.

461
00:22:45,160 --> 00:22:48,190
Tiukaze, mi arbitre,
sed prudente, nomas ĝin saluton.

462
00:22:48,190 --> 00:22:50,710
Sed mi povis nomi ŝin ion
Mi volas, krom a.out, kiu

463
00:22:50,710 --> 00:22:52,390
estus prefere krom la punkto.

464
00:22:52,390 --> 00:22:55,640
>> Kaj tiam simple entajpi la nomon
de la dosiero Mi volas kompili.

465
00:22:55,640 --> 00:22:59,190
Do nun kvankam komence
de la komando mi ankoraŭ havas Clang,

466
00:22:59,190 --> 00:23:01,410
fine de la komando
Mi ankoraŭ havas la dosiernomo,

467
00:23:01,410 --> 00:23:05,520
Mi nun havas tiujn komandlinio
argumentoj, tiuj flagoj kiuj diras:

468
00:23:05,520 --> 00:23:11,180
ho, dum la vojo, eligo-o, dosiero
nomata saluton, ne la defaŭlta a.out.

469
00:23:11,180 --> 00:23:13,810
>> Do se mi batis Enter nun, nenio
ŝajnas esti okazinta.

470
00:23:13,810 --> 00:23:17,900
Kaj, tamen, nun mi povas fari dot oblikvo saluton.

471
00:23:17,900 --> 00:23:19,089
Do ĝi estas la sama programo.

472
00:23:19,089 --> 00:23:21,380
La nuloj kaj aĵoj estas
identaj ĉe la fino de la tago.

473
00:23:21,380 --> 00:23:24,210
>> Sed ili estas en du
malsamaj files-- a.out,

474
00:23:24,210 --> 00:23:26,490
kiu estas la unua versio
kaj simple stulte nomata,

475
00:23:26,490 --> 00:23:30,250
kaj nun saluton, kio estas multe
pli konvinka nomon por programo.

476
00:23:30,250 --> 00:23:33,195
Sed, honeste, mi neniam
tuj memoros ĉi denove,

477
00:23:33,195 --> 00:23:34,070
kaj denove, kaj denove.

478
00:23:34,070 --> 00:23:36,411
Kaj, fakte, kiel ni skribu
pli komplikaj programoj,

479
00:23:36,411 --> 00:23:38,160
la komandojn vi
tuj devas skribi

480
00:23:38,160 --> 00:23:40,920
tuj akiri eĉ
pli komplikita ankoraŭ.

481
00:23:40,920 --> 00:23:41,940
>> Do ne maltrankviliĝu.

482
00:23:41,940 --> 00:23:46,220
Ĝi rezultas ke homoj antaŭ
ni rimarkis ke tro

483
00:23:46,220 --> 00:23:47,530
devis precize tiu sama problemo.

484
00:23:47,530 --> 00:23:50,900
Ili tro ne ĝuis devi
tajpas sufiĉe longe, arcano komandojn,

485
00:23:50,900 --> 00:23:52,200
lasu sole memori ilin.

486
00:23:52,200 --> 00:23:56,070
Kaj tial homoj antaŭ ni faris
aliaj programoj kiuj faciligos

487
00:23:56,070 --> 00:23:57,670
kompili vian programaron.

488
00:23:57,670 --> 00:24:01,609
>> Kaj cetere, unu tia
programo nomiĝas Make.

489
00:24:01,609 --> 00:24:03,150
Do mi tuj iros antaŭen kaj fari tion.

490
00:24:03,150 --> 00:24:05,691
Mi tuj malfari ĉion mi
nur faris en la sekva maniero.

491
00:24:05,691 --> 00:24:07,690
Lasu min tajpi LS.

492
00:24:07,690 --> 00:24:10,980
Kaj vi rimarkos tri things--
a.out, kaj stelo, saluton

493
00:24:10,980 --> 00:24:12,810
kaj stelo, kaj hello.c.

494
00:24:12,810 --> 00:24:14,730
Espereble, tiu devus
iom intuicia,

495
00:24:14,730 --> 00:24:18,220
mezuro frue ekzistis
nenio en tiu spaco de laboro.

496
00:24:18,220 --> 00:24:21,240
Estis nenio, kion mi havis
kreita ĝis ni komencis klaso.

497
00:24:21,240 --> 00:24:22,840
>> Kaj mi kreis hello.c.

498
00:24:22,840 --> 00:24:24,544
Mi tiam kompilita gxin, kaj donis al gxi a.out.

499
00:24:24,544 --> 00:24:27,460
Kaj tiam mi kompilis ĝin denove iomete
malsame kaj nomis ĝin saluton.

500
00:24:27,460 --> 00:24:32,830
Do mi havas tri dosierojn en tiu dosierujo,
en tiu dosierujo nomita Workspace.

501
00:24:32,830 --> 00:24:35,005
Nun, mi povas vidi ke tiel
se mi malzomi fakte.

502
00:24:35,005 --> 00:24:37,530
>> Se mi malzomi tie kaj
Rigardu tiun supra dekstra mano

503
00:24:37,530 --> 00:24:39,940
angulo, kiel promesis la maldekstra
flanko de via ekrano

504
00:24:39,940 --> 00:24:42,990
ĉiam montros al vi
kio estas en via konto, kio estas

505
00:24:42,990 --> 00:24:44,790
ene de CS50 IDE.

506
00:24:44,790 --> 00:24:46,680
Kaj ekzistas tri dosierojn tie.

507
00:24:46,680 --> 00:24:49,070
>> Do mi volas forigi a.out kaj saluton.

508
00:24:49,070 --> 00:24:51,275
Kaj kiel vi povus
imagu intuicie, vi

509
00:24:51,275 --> 00:24:53,400
povus ordigi de kontrolo klako
aŭ dekstre alklaku ĉi.

510
00:24:53,400 --> 00:24:54,590
Kaj tio iom -menuo.

511
00:24:54,590 --> 00:24:57,170
Vi povas elŝuti la dosieron, kuri
ĝin antaŭrigardi ĝin, refreŝigi, renomi,

512
00:24:57,170 --> 00:24:57,700
aŭ kio ne.

513
00:24:57,700 --> 00:25:00,260
>> Kaj mi povus simple forigi,
kaj ĝi foriros.

514
00:25:00,260 --> 00:25:05,260
Sed ni faru aferoj per ordono
linio nuntempe, tiel kiel akiri komfortan

515
00:25:05,260 --> 00:25:07,010
kun tiu, kaj fari la sekvan.

516
00:25:07,010 --> 00:25:12,345
Mi tuj iros antaŭen kaj forigi
a.out tajpante laŭvorte rma.out.

517
00:25:12,345 --> 00:25:14,890
Rezultas, la komando por
forigante aŭ forigi ion,

518
00:25:14,890 --> 00:25:16,280
ne forigi aŭ forviŝi.

519
00:25:16,280 --> 00:25:21,260
>> Ĝi estas pli koncize RM, nur por ŝpari
vi kelkajn keystrokes kaj batis Eniru.

520
00:25:21,260 --> 00:25:24,707
Nun ni tuj iom
crípticamente forigu regula dosiero a.out.

521
00:25:24,707 --> 00:25:27,040
Mi ne vere scias kia
malregula dosiero estus ankoraŭ.

522
00:25:27,040 --> 00:25:28,660
Sed mi volas forigi ĝin.

523
00:25:28,660 --> 00:25:30,150
>> Do mi tuj tajpi y por jes.

524
00:25:30,150 --> 00:25:31,940
Aŭ mi povus tajpi ĝin, kaj batis Eniru.

525
00:25:31,940 --> 00:25:33,440
Kaj, denove, nenio ŝajnas okazi.

526
00:25:33,440 --> 00:25:35,840
Sed tio estas, ĝenerale, estas bona afero.

527
00:25:35,840 --> 00:25:40,490
>> Se mi tajpas LS tiu tempo,
kion mi vidas?

528
00:25:40,490 --> 00:25:44,930
Espereble, simple saluton kaj hello.c.

529
00:25:44,930 --> 00:25:47,286
Nun, kiel flanken, vi
rimarki tiun stelon, asterisko,

530
00:25:47,286 --> 00:25:48,660
jen ĉe la fino de mia programoj.

531
00:25:48,660 --> 00:25:50,201
Kaj ili estas ankaŭ montrante supren en verda.

532
00:25:50,201 --> 00:25:53,970
Ke estas ĝuste CS50 IDE vojo
de cluing vin en la fakto

533
00:25:53,970 --> 00:25:55,280
ke tio ne fontkodo.

534
00:25:55,280 --> 00:25:58,880
Jen plenumebla, oni ajn estas ebla
programo kiu vi povas efektive ruli

535
00:25:58,880 --> 00:26:01,020
farante dot oblikvo, kaj tiam ĝi estas nomo.

536
00:26:01,020 --> 00:26:05,860
>> Nun, lasu min antaŭeniri kaj forigi
tiu, rm saluton, Enter, forigu regula

537
00:26:05,860 --> 00:26:08,010
dosieron saluton, jes.

538
00:26:08,010 --> 00:26:11,180
Kaj nun se mi tajpas LS,
Ni estas reen al hello.c.

539
00:26:11,180 --> 00:26:13,917
Provu ne forigi vian
fakta fontkodo.

540
00:26:13,917 --> 00:26:16,250
Kvankam ekzistas trajtoj
konstruita en CS50 IDE kie

541
00:26:16,250 --> 00:26:19,870
Vi povas iri tra via revizio historio
kaj malantaŭenigi ĝustatempe, se vi hazarde

542
00:26:19,870 --> 00:26:23,660
forigi ion, faru memoras
kiel po tiuj instigas jes aŭ ne,

543
00:26:23,660 --> 00:26:25,381
kion vi efektive volas fari.

544
00:26:25,381 --> 00:26:27,380
Kaj se mi iros al la supro
maldekstra mano angulo tie,

545
00:26:27,380 --> 00:26:30,696
ĉiuj kiuj restas estas hello.c.

546
00:26:30,696 --> 00:26:32,570
Do ekzistas aroj da
aliaj komandoj ke vi

547
00:26:32,570 --> 00:26:37,550
povas ekzekuti en la mondo de Linukso,
unu el kiu estas, denove, Faru.

548
00:26:37,550 --> 00:26:40,180
Kaj ni tuj Make
mia programo nun kiel sekvas.

549
00:26:40,180 --> 00:26:43,270
>> Anstataŭ fari tin,
anstataŭ fari tin-o,

550
00:26:43,270 --> 00:26:45,860
Mi tuj simple
laŭvorte tajpi, fari saluton.

551
00:26:45,860 --> 00:26:49,630
Kaj nun rimarkas, mi estas
ne tajpas fari hello.c.

552
00:26:49,630 --> 00:26:50,910
Mi tajpas fari saluton.

553
00:26:50,910 --> 00:26:54,840
>> Kaj ĉi programo Faru ke
venas kun CS50 IDE kaj pli

554
00:26:54,840 --> 00:26:57,090
ĝenerale kun Linukso,
estas programo kiu estas

555
00:26:57,090 --> 00:26:59,120
tuj fari programon nomitan Saluton.

556
00:26:59,120 --> 00:27:03,680
Kaj ĝi tuj supozas, per konvencio,
ke se tiu programo povas esti farita,

557
00:27:03,680 --> 00:27:09,030
ĝi tuj estos farita de fonto
kodo dosiero finiĝante en punkto c, hello.c.

558
00:27:09,030 --> 00:27:12,210
>> Do se mi batis Enter nun, rimarki ke
la komando ke gets ekzekutita

559
00:27:12,210 --> 00:27:14,340
fakte eĉ pli longa
antaux ol antaŭe.

560
00:27:14,340 --> 00:27:16,670
Kaj tio estas ĉar ni havas
preconfigured CS50 IDE havi

561
00:27:16,670 --> 00:27:19,878
iuj pliaj karakterizaĵoj konstruita en tiu
ni ne bezonas nur ankoraŭ, sed baldaŭ estos.

562
00:27:19,878 --> 00:27:23,470
Sed la ŝlosilo afero realigi
Nun mi havas Saluton programo.

563
00:27:23,470 --> 00:27:27,080
>> Se mi tajpas LS denove, mi
havas saluton programo.

564
00:27:27,080 --> 00:27:32,070
Kaj mi povas ruli ĝin per
dot oblikvo a.out, ne,

565
00:27:32,070 --> 00:27:35,590
ĉar la tuta punkto de ĉi
ekzerco estis dot oblikvo saluton.

566
00:27:35,590 --> 00:27:38,089
Kaj nun mi havas mian saluton mondo programo.

567
00:27:38,089 --> 00:27:39,880
Tiel antaŭeniras,
ni preskaŭ ĉiam nur

568
00:27:39,880 --> 00:27:42,088
tuj kompilos nia programoj
uzante la komandon Make.

569
00:27:42,088 --> 00:27:45,300
Kaj tiam ni tuj kuri ilin per
dot oblikvo, kaj la programo nomo.

570
00:27:45,300 --> 00:27:49,610
Sed rimarkas kio Make faras por
vi, ĉu estas sin ne compilador.

571
00:27:49,610 --> 00:27:53,310
Estas nur oportunajho programo
ke scipovas deĉenigi tradukilo

572
00:27:53,310 --> 00:27:56,470
kuri por ke vi mem povu uzi ĝin.

573
00:27:56,470 --> 00:28:00,220
>> Kion aliaj komandoj ekzistas en
Linukso, kaj siavice la CS50 Ide?

574
00:28:00,220 --> 00:28:03,107
Ni baldaŭ vidos, ke ne estas
KD komando, Ŝanĝo Katalogo.

575
00:28:03,107 --> 00:28:05,190
Tio ebligas al vi ene
via komandlinio interfaco

576
00:28:05,190 --> 00:28:07,610
movi antaŭen kaj reen,
kaj malfermu malsamaj dosierujoj

577
00:28:07,610 --> 00:28:08,860
sen uzanta vian muson.

578
00:28:08,860 --> 00:28:12,470
>> LS ni vidis, kio signifas listo
la dosierojn en la nuna dosierujo.

579
00:28:12,470 --> 00:28:14,650
Fari Dir, vi povas
probable komencas konkludi

580
00:28:14,650 --> 00:28:18,150
kion tio signifas now-- fari dosierujo,
Se vi volas krei dosierujon.

581
00:28:18,150 --> 00:28:21,270
RM por forigi, RM Dir por
forigi directory kaj tiuj,

582
00:28:21,270 --> 00:28:24,160
denove, estas la komandlinio
ekvivalentoj de kion vi

583
00:28:24,160 --> 00:28:26,945
povis fari en CS50 IDE kun via muso.

584
00:28:26,945 --> 00:28:28,820
Sed vi baldaŭ trovi
ke foje ĝi estas nur

585
00:28:28,820 --> 00:28:30,610
multe pli rapida fari
aferojn kun klavaro,

586
00:28:30,610 --> 00:28:33,690
kaj finfine multe pli potenca.

587
00:28:33,690 --> 00:28:36,440
>> Sed estas malfacile argumenti ke
io ni estis farante ĝis nun

588
00:28:36,440 --> 00:28:39,990
Estas ĉio, kion potenca, kiam ĉiuj
ni estis dirante estas, saluton mondo.

589
00:28:39,990 --> 00:28:43,740
Kaj, fakte, mi hardcoded la
vortoj saluton mondo en mian programon.

590
00:28:43,740 --> 00:28:45,530
Ne ekzistas dinamismo ankoraŭ.

591
00:28:45,530 --> 00:28:49,320
Nulo estis ordo de grando
pli interesa pasintsemajne.

592
00:28:49,320 --> 00:28:51,220
>> Kaj do ni alvenos tien.

593
00:28:51,220 --> 00:28:55,310
Ni prenu unu paŝon direkte al tiu de
maniero de iuj de ĉi tiuj funkcioj.

594
00:28:55,310 --> 00:28:59,470
Do ne nur C venas kun printf,
kaj aroj da aliaj funkcioj

595
00:28:59,470 --> 00:29:01,850
iuj de kiuj vidos
dum tempo, ĝi ne

596
00:29:01,850 --> 00:29:05,760
fari ĉion tiel facila ĝuste ekstere
el la pordego en atingi uzanto enigo.

597
00:29:05,760 --> 00:29:08,140
>> Fakte, unu el la debilidades
de lingvoj kiel C,

598
00:29:08,140 --> 00:29:10,140
kaj eĉ Java tamen
aliaj, estas ke ĝi ne

599
00:29:10,140 --> 00:29:15,860
faciligi simple akiri aferojn kiel
entjeroj de uzantoj, aŭ ĉenoj, vortoj,

600
00:29:15,860 --> 00:29:19,970
kaj frazoj, des malpli aliaj similaj
glitpunktaj valoroj, aŭ reelaj nombroj

601
00:29:19,970 --> 00:29:23,240
kun dekuma punktoj, kaj vere
longaj nombroj, kiel ni baldaŭ vidos.

602
00:29:23,240 --> 00:29:27,000
Do tiu listo de funkcioj tie, tiuj
Estas kiel alia Scratch enigmo pecoj

603
00:29:27,000 --> 00:29:31,090
ke ni havas pre-instalita en CS50
Ide ke ni uzos por kelkaj semajnoj

604
00:29:31,090 --> 00:29:34,010
kiel trejnado radoj de varoj, kaj
eventuale preni gxin kaj rigardu

605
00:29:34,010 --> 00:29:37,210
sub la kapuĉo, eble, ĉe
kiom tion realigitajn.

606
00:29:37,210 --> 00:29:40,460
>> Sed por fari tion, ni
reale skribi programon.

607
00:29:40,460 --> 00:29:41,770
Lasu min nun.

608
00:29:41,770 --> 00:29:44,750
Kaj mi tuj krei novajn
dosieron de klakanta ĉi iom pli,

609
00:29:44,750 --> 00:29:45,970
kaj klakanta Nov Dosiero.

610
00:29:45,970 --> 00:29:49,250
>> Mi tuj savi ĉi sekva
unu kiel, ni diru, string.c,

611
00:29:49,250 --> 00:29:50,750
ĉar mi volas ludi kun kordoj.

612
00:29:50,750 --> 00:29:53,990
Kaj ĉenon en C estas nur
vico de signoj.

613
00:29:53,990 --> 00:29:56,090
Do nun ni iru antaŭen
kaj fari la sekvan.

614
00:29:56,090 --> 00:30:01,204
>> Inkluzivas normo IO.h-- kaj
rezultas norma IO,

615
00:30:01,204 --> 00:30:03,360
IO nur signifas enigo kaj eligo.

616
00:30:03,360 --> 00:30:05,920
Do rezultas ke
tiu linio tie estas kio

617
00:30:05,920 --> 00:30:08,140
estas la najbara nin uzi printf.

618
00:30:08,140 --> 00:30:10,410
Printf kompreneble produktas eligo.

619
00:30:10,410 --> 00:30:15,000
Tial por uzi printf, rezultas
el vi devas havi tiun linion de kodo

620
00:30:15,000 --> 00:30:16,040
ĉe la supro de via dosiero.

621
00:30:16,040 --> 00:30:18,456
>> Kaj ni revenos al kio
kiu vere signifas antaŭ longe.

622
00:30:18,456 --> 00:30:20,400
Ĝi rezultas ke en
ajna C programon mi skribas,

623
00:30:20,400 --> 00:30:23,640
Mi devas komenci ĝin per
kodo kiu aspektas kiel ĉi tio.

624
00:30:23,640 --> 00:30:26,860
Kaj vi rimarkos CS50 IDE, kaj
alia disvolviĝo integrita

625
00:30:26,860 --> 00:30:30,050
medioj kiel ĝi,
tuj klopodos kiel eble plej

626
00:30:30,050 --> 00:30:31,780
Ili povas fini vian penson.

627
00:30:31,780 --> 00:30:35,930
Fakte, antaŭ momento se mi malfari
kion mi ĵus faris, mi batis Enter.

628
00:30:35,930 --> 00:30:39,160
>> Mi tiam batis malfermita krispa
streĉa, batis Enter denove.

629
00:30:39,160 --> 00:30:40,430
Kaj ĝi finis mian penson.

630
00:30:40,430 --> 00:30:45,140
Ĝi donis al mi novan linion, dentado ne malpli
por agrabla stilaj kialoj ni vidos.

631
00:30:45,140 --> 00:30:48,559
Kaj tiam ĝi aŭtomate donis al mi
ke krispa streĉa fini mian penson.

632
00:30:48,559 --> 00:30:50,600
Nun, ĝi ne ĉiam
diveni kion vi volas fari.

633
00:30:50,600 --> 00:30:53,620
Sed en granda parto, ĝi faras
savi vin iu pulsbatoj.

634
00:30:53,620 --> 00:30:59,560
Do antaŭ momento, ni kuris ĉi program--
saluton, mondo, kaj tiam kompilita ŝin,

635
00:30:59,560 --> 00:31:00,460
kaj tiam kuris gxi.

636
00:31:00,460 --> 00:31:01,867
Sed ekzistas neniu dinamismo tie.

637
00:31:01,867 --> 00:31:03,700
Kio se ni volis
fari iun malsama?

638
00:31:03,700 --> 00:31:07,630
Nu, kio se mi volis vere
ricevi ĉenon de la uzanto?

639
00:31:07,630 --> 00:31:11,250
Mi tuj uzos enigmo peco
nomita ĝuste that-- atingi ŝnuron.

640
00:31:11,250 --> 00:31:15,860
>> Rezultas en C ke kiam vi ne deziras
provizi enigo al enigmo pecon,

641
00:31:15,860 --> 00:31:19,360
aŭ pli ĝuste al funkcio, vi
laŭvorte nur faru malferma parentezo,

642
00:31:19,360 --> 00:31:20,430
fermi parentezo.

643
00:31:20,430 --> 00:31:25,540
Do ĝi estas kvazaŭ ekzistas
neniu blanka skatolo tajpi en.

644
00:31:25,540 --> 00:31:27,720
La vorton bloko antaŭ
havis malgrandan blankan skatolon.

645
00:31:27,720 --> 00:31:29,660
Ni ne havas tiun blankan skatolon nun.

646
00:31:29,660 --> 00:31:33,310
>> Sed kiam mi vokas akiri kordo, mi
volas meti la rezulton ien.

647
00:31:33,310 --> 00:31:37,680
Do tre komuna paradigmo en C estas
nomas funkcio, kiel akiri string tie,

648
00:31:37,680 --> 00:31:41,070
kaj tiam stokas lia reveno valoro.

649
00:31:41,070 --> 00:31:44,450
Ĝi estas la rezulto de liaj
penado en io.

650
00:31:44,450 --> 00:31:47,630
>> Kaj kio estas la
konstrui en programado,

651
00:31:47,630 --> 00:31:53,450
ĉu en Scratch aŭ nun C, kiun ni
povas uzi por fakte stoki ion?

652
00:31:53,450 --> 00:31:55,990
Nomis ĝin variablo, dekstra?

653
00:31:55,990 --> 00:32:00,320
Kaj en Scratch, ni ne vere
zorgas pri kio okazas en variabloj.

654
00:32:00,320 --> 00:32:02,170
>> Sed en ĉi tiu kazo, ni vere faras.

655
00:32:02,170 --> 00:32:03,719
Mi tuj diru ŝnuro.

656
00:32:03,719 --> 00:32:05,510
Kaj tiam mi povus alvoki
ĉi ajn mi volas.

657
00:32:05,510 --> 00:32:08,340
Mi tuj nomas ĝin
nomo, ricevas atingi ŝnuron.

658
00:32:08,340 --> 00:32:10,250
>> Kaj nun eĉ se vi estas
iom nova por tiu,

659
00:32:10,250 --> 00:32:11,984
rimarkos ke mi mankas kelkaj detaloj.

660
00:32:11,984 --> 00:32:13,150
Mi forgesis semi-dupunkto.

661
00:32:13,150 --> 00:32:14,400
Mi devas fini ĉi penso.

662
00:32:14,400 --> 00:32:17,480
Do mi tuj movi mian kursoron,
kaj trafis duon-dupunkto tie.

663
00:32:17,480 --> 00:32:19,130
Kaj kion mi ĵus faris!

664
00:32:19,130 --> 00:32:21,440
En ĉi tiu linio de kodo,
numero 5 en la momento,

665
00:32:21,440 --> 00:32:23,799
Mi vokas get kordoj sen enigoj.

666
00:32:23,799 --> 00:32:26,090
Do ne iom blanka
skatolo kiel la Konservi bloko havas.

667
00:32:26,090 --> 00:32:28,590
>> Mi nur diras, hey,
komputilo, min ŝnuro.

668
00:32:28,590 --> 00:32:31,390
La egalsigno estas vere
egala signo, por se.

669
00:32:31,390 --> 00:32:33,790
Estas la tasko
operatoro, kiu signifas,

670
00:32:33,790 --> 00:32:37,860
hej, komputilo, movi la valoron
de dekstre super maldekstren.

671
00:32:37,860 --> 00:32:40,480
Kaj en la maldekstra, mi havas la sekvan.

672
00:32:40,480 --> 00:32:43,580
>> Hej, komputilo, donu al mi ĉenon
vico de signoj.

673
00:32:43,580 --> 00:32:45,637
Kaj nomas tion kordoj nomo.

674
00:32:45,637 --> 00:32:47,220
Kaj mi eĉ ne devas voki lin Nomo.

675
00:32:47,220 --> 00:32:49,970
>> Mi povus nomi, konvencie,
io kiel S,

676
00:32:49,970 --> 00:32:52,900
multe kiel ni uzis i al
vokas la variablo i.

677
00:32:52,900 --> 00:32:54,829
Sed nun mi devas fari ion per ĝi.

678
00:32:54,829 --> 00:32:57,370
Estus sufiĉe stulta por
provu kompili tiun kodon, kurante

679
00:32:57,370 --> 00:32:59,410
tiu programo, kvankam
Mi ricevas cxeno,

680
00:32:59,410 --> 00:33:01,580
ĉar ĝi estas ankoraŭ nur
dironta saluton mondo.

681
00:33:01,580 --> 00:33:06,140
>> Sed kio se mi volas ŝanĝi tion.

682
00:33:06,140 --> 00:33:07,940
Kial mi ne faru tion?

683
00:33:07,940 --> 00:33:11,632
Procento s komo s.

684
00:33:11,632 --> 00:33:13,090
Kaj tio estas iom kamufla ankoraŭ.

685
00:33:13,090 --> 00:33:15,560
>> Do lasu min fari mian variabloj pli klara.

686
00:33:15,560 --> 00:33:17,510
Lasu min nomas tiun variablon Nomo.

687
00:33:17,510 --> 00:33:20,230
Kaj ni vidu, se ni ne turmentus
krom kio okazas tie.

688
00:33:20,230 --> 00:33:22,770
>> Tiel sur linio kvin, mi ricevas cxeno.

689
00:33:22,770 --> 00:33:25,620
Kaj Mi stokante ke kordo,
ajn la uzanto tajpas in

690
00:33:25,620 --> 00:33:28,430
en sia klavaro,
en variablo nomata Nomo.

691
00:33:28,430 --> 00:33:30,590
Kaj ĝi rezultas ke
printf ne nur

692
00:33:30,590 --> 00:33:34,220
preni unu argumenton en duobla
citiloj, unu enigo en citiloj.

693
00:33:34,220 --> 00:33:39,100
>> Ĝi povas preni du aŭ tri, aŭ pli, tia
ke la dua, aŭ tria, aŭ kvara,

694
00:33:39,100 --> 00:33:42,320
estas ĉiuj nomoj de variabloj,
aŭ specife valoroj,

695
00:33:42,320 --> 00:33:48,610
ke vi volas ŝtopi en,
dinamike, kiujn ĉenon en citiloj.

696
00:33:48,610 --> 00:33:52,110
Alivorte, kio
estus malĝuste kun tio?

697
00:33:52,110 --> 00:33:57,920
Se Mi nur diris saluton nomo, backslash
n, savis mian dosieron, kompilas mia kodo,

698
00:33:57,920 --> 00:34:01,660
kaj kuris tio, kio okazus?

699
00:34:01,660 --> 00:34:05,139
>> Ĝi simple volis diri, saluton
nomi, laŭvorte N-Al-M-Kaj,

700
00:34:05,139 --> 00:34:07,900
kiu estas speco de stulta ĉar
ĝi estas ne malsama mondo.

701
00:34:07,900 --> 00:34:10,400
Do io en citaĵoj estas
kio laŭvorte akiras presita.

702
00:34:10,400 --> 00:34:12,520
Do se mi volas havi
lokokupilo tie,

703
00:34:12,520 --> 00:34:14,422
Mi vere bezonas uzi
iuj specialaj sintakso.

704
00:34:14,422 --> 00:34:17,380
Kaj ĝi rezultas, se vi legis la
dokumentaro por la printf funkcio,

705
00:34:17,380 --> 00:34:21,320
ĝi informos vin ke
se vi uzas procento s,

706
00:34:21,320 --> 00:34:23,920
vi povas anstataŭigi valoro jene.

707
00:34:23,920 --> 00:34:27,190
>> Post komo poste
citilon, vi simple

708
00:34:27,190 --> 00:34:29,179
skribu la nomon de la
ŝanĝiĝemaj ke vi volas

709
00:34:29,179 --> 00:34:33,790
ŝtopi en en tiu formato
kodo, aŭ formato specifier,

710
00:34:33,790 --> 00:34:35,469
procento s por kordoj.

711
00:34:35,469 --> 00:34:39,190
Kaj nun se mi savis mian dosieron,
Mi reiros al mia terminalo.

712
00:34:39,190 --> 00:34:42,870
Kaj mi tajpas Faru String,
ĉar, denove, la nomo de tiu

713
00:34:42,870 --> 00:34:45,510
dosiero, kiun mi elektis antaŭe estas string.c.

714
00:34:45,510 --> 00:34:48,510
>> Do mi intencis diri Faru String, eniru.

715
00:34:48,510 --> 00:34:51,550
Ho mia boneco, rigardi ĉiujn
la eraroj ni faris jam.

716
00:34:51,550 --> 00:34:55,540
Kaj ĉi is-- kio, tio estas vere
kiel ses, sep linio programo?

717
00:34:55,540 --> 00:34:57,790
Do tiu estas kie povas tre
rapide atingi abrumadora.

718
00:34:57,790 --> 00:35:00,890
>> Tiu fina fenestro havas
nun nur vomitaj

719
00:35:00,890 --> 00:35:03,230
multegaj erarmesaĝoj.

720
00:35:03,230 --> 00:35:07,560
Certe, mi ne havas pli eraran
mesaĝojn ol mi linioj de kodo.

721
00:35:07,560 --> 00:35:08,680
Do kio okazas?

722
00:35:08,680 --> 00:35:10,920
>> Nu, la plej bona strategio
fari aùton vi

723
00:35:10,920 --> 00:35:13,710
ja renkontas abrumadora
lerta de eraroj tiel,

724
00:35:13,710 --> 00:35:16,690
Estas rulumu reen, serĉi la komando
Vi nur kuris, kiu en mia kazo

725
00:35:16,690 --> 00:35:18,020
estas fari ĉenon.

726
00:35:18,020 --> 00:35:21,630
Rigardu kion fari, kaj pri tio, ke
longa Clang komando, neniu granda interkonsento tie.

727
00:35:21,630 --> 00:35:22,950
>> Sed la ruĝa estas malbona.

728
00:35:22,950 --> 00:35:24,750
Verda provas esti
afabla kaj helpema.

729
00:35:24,750 --> 00:35:26,140
Sed ĝi estas ankoraŭ malbona, en tiu kazo.

730
00:35:26,140 --> 00:35:27,510
Sed kie estas malbone?

731
00:35:27,510 --> 00:35:31,450
>> String.c, linio kvin, karaktero kvin.

732
00:35:31,450 --> 00:35:32,930
Do tio estas nur komuna kongreso.

733
00:35:32,930 --> 00:35:36,060
Io dupunkto ion signifas
linio nombro kaj karaktero nombro.

734
00:35:36,060 --> 00:35:41,080
Eraro, uzo de nedeklarita
ensalutilo ŝnuro.

735
00:35:41,080 --> 00:35:42,900
Ĉu vi volas diri normo en?

736
00:35:42,900 --> 00:35:45,530
>> Do, bedaŭrinde, Clang
provas esti helpemaj.

737
00:35:45,530 --> 00:35:46,850
Sed estas malbone, en tiu kazo.

738
00:35:46,850 --> 00:35:49,350
Ne, Clang, mi ne intencis norma IO.

739
00:35:49,350 --> 00:35:51,070
Mi signifis ke sur linio unu, jes.

740
00:35:51,070 --> 00:35:53,420
>> Sed linion kvin estas ĉi tie.

741
00:35:53,420 --> 00:35:57,040
Kaj Clang ne
kompreni S-T-R-I-N-G.

742
00:35:57,040 --> 00:36:01,490
Ĝi estas nedeklarita ensalutilo, oni
vorto ĝi ĵus neniam vidis antaŭe.

743
00:36:01,490 --> 00:36:05,730
Kaj tio estas ĉar C, la lingvo
ni skribas kodo en ĝuste nun,

744
00:36:05,730 --> 00:36:08,070
ne havas variabloj nomita kordoj.

745
00:36:08,070 --> 00:36:11,380
>> Ne, defaŭlte, subteno
iu nomita ŝnuro.

746
00:36:11,380 --> 00:36:16,750
Tio estas CS50 peco de
ĵargono, sed tre convencional.

747
00:36:16,750 --> 00:36:18,600
Sed mi povas fiksi tion kiel sekvas.

748
00:36:18,600 --> 00:36:22,090
>> Se mi aldonas unu linion de kodo
al la supro de ĉi tiu programo,

749
00:36:22,090 --> 00:36:27,890
inkluzivi CS50.h, kiu estas alia dosiero
ie ene de CS50 IDE, ie

750
00:36:27,890 --> 00:36:30,820
sur la malmola disko, tiel diri,
de la Ubuntu operaciumo

751
00:36:30,820 --> 00:36:33,590
ke mi kuras, ke
Estas la dosiero tio

752
00:36:33,590 --> 00:36:38,740
tuj instruos la mastruma
sistemo kio kordo estas, ĝuste

753
00:36:38,740 --> 00:36:41,930
kiel norma io.h estas la dosieron
en la mastruma sistemo kiu estas

754
00:36:41,930 --> 00:36:44,430
tuj instrui ĝin kio printf estas.

755
00:36:44,430 --> 00:36:46,810
>> Efektive, ni estus alvenintaj
tre simila mesaĝon

756
00:36:46,810 --> 00:36:50,600
se IO estis akceptita normo
Io.h kaj provis uzi printf.

757
00:36:50,600 --> 00:36:53,632
Do mi tuj iros antaŭen kaj nur
preni Kontrolo L malbari mian ekranon.

758
00:36:53,632 --> 00:36:56,340
Aŭ vi povas entajpi klara kaj ĝi volas
nur liberigi la fina fenestro.

759
00:36:56,340 --> 00:36:58,020
Sed vi povas ankoraŭ rulumu reen en tempo.

760
00:36:58,020 --> 00:37:01,100
>> Kaj mi tuj rerun Faru String.

761
00:37:01,100 --> 00:37:03,660
Transiras la fingrojn tiu tempo, Enter.

762
00:37:03,660 --> 00:37:05,380
Ho mia Dio, ĝi laboris.

763
00:37:05,380 --> 00:37:09,280
ĝi montras al mi longan kamufla komando
tion Make generita per Clang,

764
00:37:09,280 --> 00:37:10,460
sed neniu erarmesaĝojn.

765
00:37:10,460 --> 00:37:12,460
Do realigi, kvankam
vi eble ricevos tute

766
00:37:12,460 --> 00:37:14,480
superŝutita per
numeron de erarmesaĝoj,

767
00:37:14,480 --> 00:37:17,540
ĝi nur povus esti tiu ĝena kaskadan
efekto, kie Clang ne komprenas

768
00:37:17,540 --> 00:37:19,620
Unue, kion signifas ĝi tiam
Ne komprenas la sekva vorto,

769
00:37:19,620 --> 00:37:20,560
aŭ la sekva linio.

770
00:37:20,560 --> 00:37:22,850
Kaj tiel ĝi nur sufokas en via kodo.

771
00:37:22,850 --> 00:37:24,440
Sed la solvon povus esti simplaj.

772
00:37:24,440 --> 00:37:27,822
Kaj tiel ĉiam enfokusigi la
unua linio de produktado.

773
00:37:27,822 --> 00:37:29,530
Kaj se vi faras ne
kompreni ĝin, nur rigardu

774
00:37:29,530 --> 00:37:32,480
por ŝlosilvortoj kiuj povus esti
postsignoj, kaj la numero de linioj,

775
00:37:32,480 --> 00:37:34,650
kaj la karaktero, kie
ke eraro povus esti.

776
00:37:34,650 --> 00:37:40,328
>> Nun lasu min antaŭeniri kaj tajpu
dot oblikvo, kordoj, eniru.

777
00:37:40,328 --> 00:37:44,340
Hm, ĝi ne diras saluton nenion.

778
00:37:44,340 --> 00:37:46,210
Kial?

779
00:37:46,210 --> 00:37:48,170
Nu, memoru, kie ĝi kuras?

780
00:37:48,170 --> 00:37:53,730
>> Ĝi estas probable senmoviĝita ĉe la momento
en buklo, se vi volas, sur linio ses,

781
00:37:53,730 --> 00:37:56,950
ĉar Get String projekte,
skribita de CS50 bastonon,

782
00:37:56,950 --> 00:38:00,350
Estas laŭvorte signifas simple sidi
tie atendis kaj atendis,

783
00:38:00,350 --> 00:38:01,850
kaj atendante kordo.

784
00:38:01,850 --> 00:38:03,792
Ĉiuj ni celas per ŝnuro estas homa enigaĵo.

785
00:38:03,792 --> 00:38:04,500
Do vi scias kion?

786
00:38:04,500 --> 00:38:05,166
Lasu min antaŭeniri.

787
00:38:05,166 --> 00:38:08,704
Kaj nur sur kaprico, lasu min
tajpas mian nomon, Davido, eniru.

788
00:38:08,704 --> 00:38:10,120
Nun mi havas pli dinamika programo.

789
00:38:10,120 --> 00:38:11,240
Ĝi diris, saluton David.

790
00:38:11,240 --> 00:38:16,280
>> Se mi iras antaŭen kaj kuri ĉi denove,
mi provu diri Zamila nomo, eniru.

791
00:38:16,280 --> 00:38:17,940
Kaj nun ni havas dinamikan programo.

792
00:38:17,940 --> 00:38:19,380
Mi ne malfacile kodita mondo.

793
00:38:19,380 --> 00:38:21,760
Mi ne malfacile kodita
nomi, nek Davido, aŭ Zamila.

794
00:38:21,760 --> 00:38:25,350
>> Nun estas multe pli ŝatas la programojn
ni scias, kie se ĝi prenas enigo,

795
00:38:25,350 --> 00:38:27,870
ĝi produktas iomete malsamajn eligo.

796
00:38:27,870 --> 00:38:31,020
Nun, ĉi tiu estas ne la plej bona
uzanto sperto, aŭ UX.

797
00:38:31,020 --> 00:38:33,000
Mi kuros la programo.

798
00:38:33,000 --> 00:38:35,830
>> Mi ne scias kion mi supozis
fari, se mi efektive rigardu

799
00:38:35,830 --> 00:38:37,290
aŭ memori la fontkodon.

800
00:38:37,290 --> 00:38:39,640
Do ni faru la uzanto
sperti iom pli bona

801
00:38:39,640 --> 00:38:41,240
kun la plej simpla de aferoj.

802
00:38:41,240 --> 00:38:44,782
Lasu min reiri en tiun
programo, kaj simple diri printf.

803
00:38:44,782 --> 00:38:48,870
>> Kaj lasu min antaŭeniri kaj diru nomo, dupunkto,
kaj spaco, kaj tiam semi-dupunkto.

804
00:38:48,870 --> 00:38:51,170
Kaj ĝuste por piedbatoj, neniu kontraŭreago n.

805
00:38:51,170 --> 00:38:52,980
Kaj tio estas intenca,
ĉar mi ne volas

806
00:38:52,980 --> 00:38:54,590
la prompto movi al la sekva linio.

807
00:38:54,590 --> 00:38:58,800
>> Mi volas, anstataŭe, tion, faru ŝnuron
recompilar mia kodo en nova maŝino

808
00:38:58,800 --> 00:39:00,980
kodo dot oblikvo ŝnuro.

809
00:39:00,980 --> 00:39:02,460
Ah, tio estas multe pli bela.

810
00:39:02,460 --> 00:39:05,780
Nun mi vere scias kio la komputilo
volas ke mi faru, donu al li nomon.

811
00:39:05,780 --> 00:39:10,020
>> Do mi tuj iros antaŭen kaj tajpu
en Rob, eniri, kaj saluton, Rob.

812
00:39:10,020 --> 00:39:13,640
Do, realigi, tio estas ankoraŭ, fine
de la tago, nur naŭ linio programo.

813
00:39:13,640 --> 00:39:15,090
Sed ni prenis tiujn bebo paŝoj.

814
00:39:15,090 --> 00:39:18,380
>> Ni skribis unu linio kun kiu ni
estis familiara, printf, saluton mondo.

815
00:39:18,380 --> 00:39:19,980
Tiam ni malligis iomete de tio.

816
00:39:19,980 --> 00:39:21,560
Kaj ni efektive uzata get kordoj.

817
00:39:21,560 --> 00:39:23,362
Kaj ni ĵetis tiun valoron en variablo.

818
00:39:23,362 --> 00:39:26,070
Kaj tiam ni antaŭeniris kaj plibonigita
ĝi plu kun tria linio.

819
00:39:26,070 --> 00:39:29,220
Kaj tiu ripeta procezo de
skribanta softvaron estas vere ŝlosilo.

820
00:39:29,220 --> 00:39:33,420
En CS50, kaj en la vivo ĝenerale,
Vi devus ĝenerale ne sidigxos,

821
00:39:33,420 --> 00:39:36,800
havi programon en menso, kaj provu skribi
la tuta malbenita afero subite.

822
00:39:36,800 --> 00:39:40,810
>> Ĝi, neeviteble, rezultigi vojo
pli eraroj ol ni mem vidis tie.

823
00:39:40,810 --> 00:39:44,070
Eĉ mi, ĝis hodiaŭ, konstante
fari aliajn stultajn erarojn,

824
00:39:44,070 --> 00:39:47,480
Estas vere malfacila erarojn
ke estas malfacile diveni.

825
00:39:47,480 --> 00:39:52,095
Sed vi faros pli erarojn pli
linioj de kodo vi skribis cxiujn samtempe.

826
00:39:52,095 --> 00:39:54,220
Kaj tiel tiu praktiko de,
skribi iomete da kodo

827
00:39:54,220 --> 00:39:57,930
ke vi estas komforta kun, kompili
ĝin, ruli ĝin, testi ĝin pli ĝenerale,

828
00:39:57,930 --> 00:40:01,370
tiam movi on-- tiel simple kiel ni tenis
layering kaj layering pasintsemajne,

829
00:40:01,370 --> 00:40:04,190
konstruado de io tre
simpla al io pli kompleksa,

830
00:40:04,190 --> 00:40:05,200
fari same tie.

831
00:40:05,200 --> 00:40:08,500
Ne sidiĝu kaj provu
skribi tutan problemon.

832
00:40:08,500 --> 00:40:10,780
Reale preni tiujn bebo paŝoj.

833
00:40:10,780 --> 00:40:15,100
>> Nun, kordoj ne estas ĉiuj
ke utilajn al si.

834
00:40:15,100 --> 00:40:18,210
Ke estos fakte, ideale, kiel al
havas ion alian en nia ilaro.

835
00:40:18,210 --> 00:40:20,990
Do ni vere faras ĝuste tion.

836
00:40:20,990 --> 00:40:24,900
>> Lasu min nun kaj vipi supren
iomete malsama programo.

837
00:40:24,900 --> 00:40:28,320
Kaj ni nomas tiun int.c, por entjero.

838
00:40:28,320 --> 00:40:30,870
Mi tuj Simile
inkluzivas CS550.h.

839
00:40:30,870 --> 00:40:33,060
Mi tuj inkluzivi normo IO.

840
00:40:33,060 --> 00:40:36,630
Kaj ke tuj estos sufiĉe komuna
en tiuj unuaj tagoj de la klaso.

841
00:40:36,630 --> 00:40:39,050
>> Kaj mi tuj preta
min kun ĉefa funkcio.

842
00:40:39,050 --> 00:40:43,370
Kaj nun anstataŭ prenanta kordo,
ni iru antaŭen kaj akiri int.

843
00:40:43,370 --> 00:40:49,285
Ni nomas ĝin I, kaj nomas ĝin akiri
int, proksime parens, duon-dupunkto.

844
00:40:49,285 --> 00:40:51,410
Nun ni faru
ion kun ĝi, printf.

845
00:40:51,410 --> 00:40:56,190
>> Diru ion kiel
saluton, backslash n, komo mi.

846
00:40:56,190 --> 00:41:00,010
Do mi preskaux imitante
kion mi faris nur antaŭ momento.

847
00:41:00,010 --> 00:41:01,660
Mi havas lokokupilo tie.

848
00:41:01,660 --> 00:41:05,150
Mi komo i tie, ĉar mi volas
ŝtopi i en tiun lokokupilo.

849
00:41:05,150 --> 00:41:07,250
>> Do ni iru antaŭen kaj provu
kompili tiun programon.

850
00:41:07,250 --> 00:41:10,060
La dosiero nomata int.c.

851
00:41:10,060 --> 00:41:12,920
Do mi intencis diri, ke int, eniru.

852
00:41:12,920 --> 00:41:16,420
Ho mia Dio, sed ne granda interkonsento, ĉu ne?

853
00:41:16,420 --> 00:41:17,230
Tie estas eraro.

854
00:41:17,230 --> 00:41:19,810
>> Tie estas sintaksa eraro
tie tia ke la programo ne povas

855
00:41:19,810 --> 00:41:25,460
kompilita ene int.c, linio
sep, karaktero 27, eraro formato

856
00:41:25,460 --> 00:41:28,400
Specifas tipo char
stelo, kio ajn tio estas.

857
00:41:28,400 --> 00:41:30,020
Sed la argumento tipo estas int.

858
00:41:30,020 --> 00:41:33,110
>> Do jen, ankaŭ, ni ne tuj to--
kvankam hodiaŭ estas multe de materialo,

859
00:41:33,110 --> 00:41:35,710
ni tuj superforti vin kun
absolute ĉiu trajto de C,

860
00:41:35,710 --> 00:41:38,070
kaj programado pli ĝenerale,
en nur tiuj unuaj semajnoj.

861
00:41:38,070 --> 00:41:40,400
Do tie estas ofte iranta esti ĵargono
kun kiu vi ne estas familiara.

862
00:41:40,400 --> 00:41:43,350
Kaj, fakte, char stelo estas io
ni tuj revenos al

863
00:41:43,350 --> 00:41:44,830
en semajno aŭ du de tempo.

864
00:41:44,830 --> 00:41:47,530
>> Sed nuntempe, ni vidu se ni povas
analizi vortojn kiuj estas familiaraj.

865
00:41:47,530 --> 00:41:50,750
Formats-- do ni aŭdis formato
especificación, formato kodo antaŭe.

866
00:41:50,750 --> 00:41:51,840
Jen familiara.

867
00:41:51,840 --> 00:41:53,840
Type-- sed la argumento havas tipo int.

868
00:41:53,840 --> 00:41:55,980
Atendu minuton, mi estas int.

869
00:41:55,980 --> 00:41:59,230
>> Eble procento s reale
Havas iun difinita signifo.

870
00:41:59,230 --> 00:42:00,230
Kaj, ja, jes.

871
00:42:00,230 --> 00:42:03,101
Entjero, se vi volas
printf anstataŭigi ĝin,

872
00:42:03,101 --> 00:42:05,350
vi vere devas uzi
malsama formato specifier.

873
00:42:05,350 --> 00:42:06,890
Kaj vi ne scias
se neniu al vi,

874
00:42:06,890 --> 00:42:07,973
aŭ vi faris ĝin antaŭe.

875
00:42:07,973 --> 00:42:10,490
Sed procento i estas kio
povas kutime uzita

876
00:42:10,490 --> 00:42:12,240
en printf por ŝtopanta en entjero.

877
00:42:12,240 --> 00:42:14,920
Vi povas ankaŭ uzi procento
d por dekuma entjero.

878
00:42:14,920 --> 00:42:16,490
Sed i estas bela kaj simpla tie.

879
00:42:16,490 --> 00:42:17,590
Do ni iru kun tio.

880
00:42:17,590 --> 00:42:21,160
>> Nun lasu min antaŭeniri kaj
rerun konsiston int, Enter.

881
00:42:21,160 --> 00:42:23,328
Tio estas bona, sen eraroj.

882
00:42:23,328 --> 00:42:27,260
Dot oblikvo int-- OK, malbona sperto de uzanto,
ĉar mi ne diris al mi mem

883
00:42:27,260 --> 00:42:27,760
kion fari.

884
00:42:27,760 --> 00:42:28,426
Sed tio estas bone.

885
00:42:28,426 --> 00:42:29,480
Mi kaptanta sur rapide.

886
00:42:29,480 --> 00:42:36,260
>> Kaj nun lasu min iri antaŭen kaj
tajpi en David, OK, Zamila, Rob.

887
00:42:36,260 --> 00:42:37,820
Bone, do ĉi estas bona afero.

888
00:42:37,820 --> 00:42:41,710
Tiu tempo, mi uzas funkcio,
enigmo peco, nomita get int.

889
00:42:41,710 --> 00:42:44,230
Kaj ĝi rezultas fjordon kaj ni
vidi tion poste en la term--

890
00:42:44,230 --> 00:42:47,730
la CS50 dungitaro estas implementado
akiri string tiel

891
00:42:47,730 --> 00:42:50,350
ke gxi volas nur fizike
akiri kordo por vi.

892
00:42:50,350 --> 00:42:54,340
>> Ĝi efektivigis get int en
tiel ke ĝi volas nur

893
00:42:54,340 --> 00:42:55,590
akiri entjero por vi.

894
00:42:55,590 --> 00:42:57,830
Kaj se vi, la homo,
ne kunlabori, estas

895
00:42:57,830 --> 00:43:00,590
laŭvorte simple tuj
diru reprovi, reprovi, reprovi,

896
00:43:00,590 --> 00:43:05,200
laŭvorte sidas tie looping, ĝis
vi komplezos kun iuj magiaj numeron,

897
00:43:05,200 --> 00:43:07,670
kiel 50, kaj saluton 50.

898
00:43:07,670 --> 00:43:11,440
>> Aŭ se ni kuras ĉi denove
kaj tajpu en 42, saluton 42.

899
00:43:11,440 --> 00:43:15,750
Kaj tiel la get int funkcio
ene de tiu enigmo peco

900
00:43:15,750 --> 00:43:19,050
Suficxas logiko, sufiĉas penso,
elkompreni, kio estas vorto?

901
00:43:19,050 --> 00:43:20,330
Kaj kio estas nombro?

902
00:43:20,330 --> 00:43:23,165
Nur akcepti, finfine, nombroj.

903
00:43:23,165 --> 00:43:25,690

904
00:43:25,690 --> 00:43:30,230
>> Do rezultas ke tiu
Ne ĉiuj kiuj esprima.

905
00:43:30,230 --> 00:43:30,910
ĝis nun.

906
00:43:30,910 --> 00:43:33,690
Do, yay, lastfoje ni
iris bela rapide

907
00:43:33,690 --> 00:43:38,320
en efektivigado ludoj kaj kuraĝigo,
kaj artaj verkoj en Scratch.

908
00:43:38,320 --> 00:43:42,260
Kaj tie, ni estas enhavo
kun saluton mondo, kaj saluton 50.

909
00:43:42,260 --> 00:43:43,696
>> Ĝi ne estas ĉiu tiu inspira.

910
00:43:43,696 --> 00:43:46,070
Kaj, efektive, tiuj unuaj
ekzemploj prenos iun tempon

911
00:43:46,070 --> 00:43:47,510
al deklivirejo supre en ekscito.

912
00:43:47,510 --> 00:43:49,854
Sed ni havas tiom da pli
kontroli nun, fakte.

913
00:43:49,854 --> 00:43:51,770
Kaj ni tuj tre
rapide komenci layering

914
00:43:51,770 --> 00:43:53,870
sur supro de tiuj bazaj primitivoj.

915
00:43:53,870 --> 00:43:56,370
>> Sed unue, ni komprenos
kion la limigoj estas.

916
00:43:56,370 --> 00:43:58,620
Fakte, unu el la aĵoj
Nulo ne facile

917
00:43:58,620 --> 00:44:00,990
Ni faras vere aspektas
sub la kapuĉo,

918
00:44:00,990 --> 00:44:03,740
kaj kompreni kia
komputilo, kio povas fari,

919
00:44:03,740 --> 00:44:05,250
kaj kion liaj limigoj.

920
00:44:05,250 --> 00:44:08,580
Kaj cetere, ke manko de
kompreno, potenciale, longatempa

921
00:44:08,580 --> 00:44:12,520
povas konduki al nia propra mistakes-- skribo
cimoj, skribante necerta programaro kiu

922
00:44:12,520 --> 00:44:13,880
akiras hakita iel.

923
00:44:13,880 --> 00:44:17,130
>> Do ni prenu paŝoj al
komprenante ĉi iom pli bona per

924
00:44:17,130 --> 00:44:19,710
maniero, te la jena ekzemplo.

925
00:44:19,710 --> 00:44:23,550
Mi tuj iros antaŭen kaj apliki
reala rapida programo nomata Adder.

926
00:44:23,550 --> 00:44:25,134
Kiel, ni aldonu iujn numerojn kune.

927
00:44:25,134 --> 00:44:27,800
Kaj mi tuj kodigi iuj anguloj
tie kaj nur kopii kaj alglui

928
00:44:27,800 --> 00:44:30,270
kie mi estis antaŭe, ĵus
do ni povas akiri iranta frue.

929
00:44:30,270 --> 00:44:33,090
Do nun mi havas la bazajn komencojn
de programo nomita Adder.

930
00:44:33,090 --> 00:44:34,670
>> Kaj ni iru antaŭen kaj fari tion.

931
00:44:34,670 --> 00:44:38,680
Mi tuj iros antaŭen kaj
diru, intx ricevas ricevas int.

932
00:44:38,680 --> 00:44:39,430
Kaj vi scias kion?

933
00:44:39,430 --> 00:44:40,990
Ni faru pli bona sperto.

934
00:44:40,990 --> 00:44:45,740
>> Do ni simple diru x kaj efike
instigas la uzanton por transdoni nin x.

935
00:44:45,740 --> 00:44:50,600
Kaj tiam lasu min antaŭeniri kaj diru, printf
Kiom proksimume y estas, tiu tempon atendante

936
00:44:50,600 --> 00:44:53,140
du valoroj de la uzanto.

937
00:44:53,140 --> 00:44:59,759
Kaj tiam ni simple iru antaŭen kaj
diru printf, la sumo de x kaj y estas.

938
00:44:59,759 --> 00:45:01,300
Kaj nun mi ne volas fari procento s.

939
00:45:01,300 --> 00:45:09,080
Mi volas fari procento i, backslash
n, kaj tiam plug en sumo valoro.

940
00:45:09,080 --> 00:45:10,620
>> Do kiel mi iros sur faras tion?

941
00:45:10,620 --> 00:45:11,270
Vi scias kion?

942
00:45:11,270 --> 00:45:12,840
Mi scias kiel uzi variablojn.

943
00:45:12,840 --> 00:45:15,140
Lasu min nur deklari novan, int z.

944
00:45:15,140 --> 00:45:16,770
>> Kaj mi tuj prenos diveno tie.

945
00:45:16,770 --> 00:45:21,470
Se estas egala signoj en tiu
lingvo, eble mi povas simple fari x plus y,

946
00:45:21,470 --> 00:45:23,660
kiam mi finos mian
pensis kun duon-dupunkto?

947
00:45:23,660 --> 00:45:28,170
Nun mi povos reiri malsupren tie, plug en z,
fini tiun penson kun duon-dupunkto.

948
00:45:28,170 --> 00:45:33,160
Kaj ni vidu, se ĉi tiuj
sekvencoj de lines-- x estas akiri int.

949
00:45:33,160 --> 00:45:34,770
Y estas akiri int.

950
00:45:34,770 --> 00:45:37,980
>> Aldoni x kaj y, stoki la valoron en z--
do, denove, memoru la egalsigno

951
00:45:37,980 --> 00:45:38,560
Ne gxusta.

952
00:45:38,560 --> 00:45:41,100
Estas tasko de dekstre maldekstren.

953
00:45:41,100 --> 00:45:45,180
Kaj ni presi ke la sumo
de x kaj y estas ne laŭvorte z,

954
00:45:45,180 --> 00:45:46,830
sed kio estas interne de z.

955
00:45:46,830 --> 00:45:50,090
Tial ni ebriigu Adder -
bela, ne erarojn tiun tempon.

956
00:45:50,090 --> 00:45:53,030
Dot oblikvo Adder, eniri,
x tuj esti 1.

957
00:45:53,030 --> 00:45:55,380
>> Y tuj estos 2.

958
00:45:55,380 --> 00:45:58,964
Kaj la sumo de x kaj y estas 3.

959
00:45:58,964 --> 00:46:00,130
Do jen ĉio bone kaj bona.

960
00:46:00,130 --> 00:46:03,260
>> Do vi imagus ke matematiko
devus labori en programo kiel ĉi.

961
00:46:03,260 --> 00:46:04,040
Sed vi scias kion?

962
00:46:04,040 --> 00:46:06,904
Estas ĉi variablo, linio
12, eĉ necesa?

963
00:46:06,904 --> 00:46:09,820
Vi ne devas akiri en la kutimo
de ĵus stokante aferojn en variabloj

964
00:46:09,820 --> 00:46:10,980
nur ĉar vi povas.

965
00:46:10,980 --> 00:46:13,550
Kaj, fakte, ĝi estas ĝenerale
konsiderita maltaŭga

966
00:46:13,550 --> 00:46:18,100
se vi kreas variablo, nomita
z tiukaze, stokante ion en ĝi,

967
00:46:18,100 --> 00:46:21,390
kaj tiam tuj
uzante ĝin, sed neniam denove.

968
00:46:21,390 --> 00:46:24,700
Kial doni ion nomon
kiel z se vi estas laŭvorte

969
00:46:24,700 --> 00:46:26,770
tuj uzos tiun
afero nur unufoje, kaj tiel

970
00:46:26,770 --> 00:46:29,380
proksimaj al kie vi kreis
ĝi en la unua loko,

971
00:46:29,380 --> 00:46:31,052
tiel proksima en terminoj de linioj de kodo?

972
00:46:31,052 --> 00:46:31,760
Do vi scias kion?

973
00:46:31,760 --> 00:46:34,480
Ĝi rezultas ke C estas sufiĉe fleksebla.

974
00:46:34,480 --> 00:46:36,586
Se mi vere volas
plug -in valoroj tie,

975
00:46:36,586 --> 00:46:38,210
Mi ne bezonas deklari nova variablo.

976
00:46:38,210 --> 00:46:41,680
Mi povis nur plug -in x plus
y, ĉar C komprenas

977
00:46:41,680 --> 00:46:43,390
aritmetiko, matematikaj kaj operatoroj.

978
00:46:43,390 --> 00:46:47,140
>> Do mi povas simple diri, ĉu ĉi math,
x plus y ajn tiuj valoroj estas,

979
00:46:47,140 --> 00:46:50,780
ŝtopi la rezultanta
entjero en tiun ĉenon.

980
00:46:50,780 --> 00:46:53,730
Do povas esti tiu, kvankam
nur unu linio pli mallonga,

981
00:46:53,730 --> 00:46:58,480
pli bona dezajno, bona programo,
ĉar ekzistas malpli kodo, do

982
00:46:58,480 --> 00:46:59,921
malpli por mi kompreni.

983
00:46:59,921 --> 00:47:01,920
Kaj ĝi estas ankaŭ nur pura,
mezuro ni ne

984
00:47:01,920 --> 00:47:04,620
enkondukante novajn vortojn,
novajn simbolojn, kiel z,

985
00:47:04,620 --> 00:47:07,510
kvankam ili ne vere
servi multe de celo.

986
00:47:07,510 --> 00:47:12,890
>> Bedaŭrinde, matematiko ne
ĉiuj ke fidinda foje.

987
00:47:12,890 --> 00:47:15,270
Ni iru antaŭen kaj fari tion.

988
00:47:15,270 --> 00:47:18,200
Mi tuj iros antaŭen
nun kaj fari la sekvan.

989
00:47:18,200 --> 00:47:27,650
>> Ni faru printf, procento i, pli procento
I, estu procento i, backslash n.

990
00:47:27,650 --> 00:47:32,240
Kaj mi tuj faros this-- xyx plus y.

991
00:47:32,240 --> 00:47:34,821
Do mi simple tuj reskribi
tiun iomete malsame tie.

992
00:47:34,821 --> 00:47:36,320
Lasu min nur faru rapidan prudento ĉeko.

993
00:47:36,320 --> 00:47:37,986
Denove, ni ne anticipos mem.

994
00:47:37,986 --> 00:47:41,420
Fari neston, dot oblikvo vipuro.

995
00:47:41,420 --> 00:47:44,950
x estas 1, y estas 2, 1 plus 2 estas 3.

996
00:47:44,950 --> 00:47:45,870
Do tio estas bona.

997
00:47:45,870 --> 00:47:49,060
Sed ni kompliki ĉi nun
iom, kaj krei novan dosieron.

998
00:47:49,060 --> 00:47:53,350
>> Mi tuj voki ĉi tiun,
diru, ints, pluralo por entjeroj.

999
00:47:53,350 --> 00:47:55,980
Lasi min komenci kie mi antaŭ momento.

1000
00:47:55,980 --> 00:47:57,770
Sed nun ni faras kelkajn aliajn liniojn.

1001
00:47:57,770 --> 00:48:03,430
Lasu min antaŭeniri kaj fari la sekvan,
printf, procento i, minus procento i,

1002
00:48:03,430 --> 00:48:08,959
Estas procento i, komo x, komo yx minus y.

1003
00:48:08,959 --> 00:48:10,750
Tiel mi faras iomete
malsamaj matematikaj tie.

1004
00:48:10,750 --> 00:48:11,624
Ni faru alian.

1005
00:48:11,624 --> 00:48:16,610
Tiel procento i tempoj procento
i estas procento i, backslash n.

1006
00:48:16,610 --> 00:48:21,430
Ni plug -in x, kaj y, kaj x fojojn kaj.

1007
00:48:21,430 --> 00:48:24,530
Ni uzos la asterisko sur
vian komputilon por fojojn.

1008
00:48:24,530 --> 00:48:26,390
>> Vi ne uzas x. x estas
ŝanĝiĝema nomon tie.

1009
00:48:26,390 --> 00:48:28,270
Vi uzas la stelon por multipliko.

1010
00:48:28,270 --> 00:48:29,020
Ni faru pli.

1011
00:48:29,020 --> 00:48:34,580
Printf procento mi, dividita
per procento i, estas procento i,

1012
00:48:34,580 --> 00:48:40,460
backslash n. xy dividita per y--
tiel vi uzas la antaŭen oblikvo en C

1013
00:48:40,460 --> 00:48:41,502
fari dividon.

1014
00:48:41,502 --> 00:48:42,460
Kaj ni faru unu alia.

1015
00:48:42,460 --> 00:48:47,920

1016
00:48:47,920 --> 00:48:55,240
Cetera procento i, dividita
per procento i, estas procentoj i.

1017
00:48:55,240 --> 00:48:59,550
xy-- kaj nun cetero
estas kio restas.

1018
00:48:59,550 --> 00:49:02,980
Kiam vi provas dividanta a
denominatoro en numeratoro,

1019
00:49:02,980 --> 00:49:05,570
kiom estas lasita super tiu
vi povis dividi eksteren?

1020
00:49:05,570 --> 00:49:07,910
>> Do estas ne vere,
nepre, simbolo

1021
00:49:07,910 --> 00:49:09,470
ni uzis en grado lernejo por tio.

1022
00:49:09,470 --> 00:49:13,830
Sed en C. Vi povas
diru x module y, kie

1023
00:49:13,830 --> 00:49:18,000
ĉi procentsigno en ĉi context--
konfuze kiam vi estas interne

1024
00:49:18,000 --> 00:49:20,170
de la citiloj,
ene de printf, procento

1025
00:49:20,170 --> 00:49:21,830
uzas kiel formato specifier.

1026
00:49:21,830 --> 00:49:25,420
>> Kiam vi uzas procento ekster
ke en matematika esprimo,

1027
00:49:25,420 --> 00:49:29,910
ĝi estas la module operatoro por modula
arithmetic-- por niaj celoj

1028
00:49:29,910 --> 00:49:33,650
tie, nur signifas, kio estas la
cetero de x dividita per y?

1029
00:49:33,650 --> 00:49:36,130
Do x dividita per y estas x oblikvo kaj.

1030
00:49:36,130 --> 00:49:38,220
Kio estas la resto de x dividita per y?

1031
00:49:38,220 --> 00:49:41,780
Ĝi estas x mod y, kiel programisto dirus.

1032
00:49:41,780 --> 00:49:48,300
>> Do se mi faris nenian erarojn tie, lasu min
antaŭeniri kaj fari ints, pluralo, bela,

1033
00:49:48,300 --> 00:49:50,010
kaj dot oblikvo ints.

1034
00:49:50,010 --> 00:49:55,270
Kaj ni iru antaŭen kaj
do, ni diru, 1, 10.

1035
00:49:55,270 --> 00:49:58,390
Bone, 1 plus 10 estas 11, ĉeko.

1036
00:49:58,390 --> 00:50:01,240
1 minus 10 estas negativa 9, kontrolu.

1037
00:50:01,240 --> 00:50:03,420
>> 1 fojojn 10 estas 10, ĉeko.

1038
00:50:03,420 --> 00:50:07,090
1 dividita per 10 is--
OK, ni salti tiu.

1039
00:50:07,090 --> 00:50:09,480
Cetero de 1 dividita per 10 estas 1.

1040
00:50:09,480 --> 00:50:10,680
Jen korekta.

1041
00:50:10,680 --> 00:50:12,630
Sed estas cimo tie.

1042
00:50:12,630 --> 00:50:15,390
>> Tial la unu mi metis mian
transdoni, ne korekta.

1043
00:50:15,390 --> 00:50:16,670
Mi volas diri, estas proksima al 0.

1044
00:50:16,670 --> 00:50:20,670
1 dividita per 10, sciu, se ni
tranĉante iuj anguloj, certe, ĝi estas nulo.

1045
00:50:20,670 --> 00:50:28,050
Sed devus vere esti 1/10,
0.1, aŭ 0.10, 0,1000, aŭ tiel plu.

1046
00:50:28,050 --> 00:50:30,600
>> Gxi ne vere esti nulo.

1047
00:50:30,600 --> 00:50:35,990
Nu, tio rezultas ke la komputilo estas
faras laŭvorte kion ni rakontis al fari.

1048
00:50:35,990 --> 00:50:39,460
Ni faras matematiko kiel x dividita per y.

1049
00:50:39,460 --> 00:50:44,680
Kaj ambaŭ x kaj y, por la linioj
de kodo antaŭe, estas entjeroj.

1050
00:50:44,680 --> 00:50:50,440
>> Plie, sur linio 15, ni estas
rakontanta printf, hey, printf kromprogramo

1051
00:50:50,440 --> 00:50:54,230
entjera, plug -in entjero,
plug-en integer-- specife

1052
00:50:54,230 --> 00:50:57,580
x, kaj tiam y, kaj tiam x
dividita per y. x kaj y estas ints.

1053
00:50:57,580 --> 00:50:59,060
Ni bone tie.

1054
00:50:59,060 --> 00:51:01,250
>> Sed kio estas x dividita per x?

1055
00:51:01,250 --> 00:51:06,790
x dividita per y devus esti,
matematike, 1/10, aŭ 0,1,

1056
00:51:06,790 --> 00:51:11,600
kio estas reela nombro, reela nombro
havante, potenciale, dekuma punkto.

1057
00:51:11,600 --> 00:51:13,230
Ĝi ne entjero.

1058
00:51:13,230 --> 00:51:18,290
>> Sed kio estas la plej proksima
entjero al 1/10, aŭ 0,1?

1059
00:51:18,290 --> 00:51:21,114
Yeah, ĝi ia estas nulo.

1060
00:51:21,114 --> 00:51:22,030
0.1 estas tiel multe.

1061
00:51:22,030 --> 00:51:22,890
Kaj 1 estas ĉi tiel.

1062
00:51:22,890 --> 00:51:25,870
Do 1/10 estas pli proksima al
0 ol al tiu.

1063
00:51:25,870 --> 00:51:30,800
>> Kaj sekve kio C faras por us--
ia ĉar ni rakontis to--

1064
00:51:30,800 --> 00:51:32,600
Estas detranĉante ke entjero.

1065
00:51:32,600 --> 00:51:40,540
Ĝi prenas la valoron, kiu denove estas
supozis esti io kiel 0,1000,

1066
00:51:40,540 --> 00:51:41,800
0 kaj tiel plu.

1067
00:51:41,800 --> 00:51:45,320
Kaj ĝin detranĉante ĉio
post la dekuma punkto

1068
00:51:45,320 --> 00:51:47,510
tiel ke ĉiuj ĉi
aĵon, ĉar ĝi ne

1069
00:51:47,510 --> 00:51:51,910
konveni en la nocio de entjero, kiu
estas nur nombro kiel negativa 1, 0, 1,

1070
00:51:51,910 --> 00:51:55,830
supren kaj malsupren, ĝi ĵetas for ĉio
post la dekuma punkto ĉar vi

1071
00:51:55,830 --> 00:51:59,020
ne taŭgas dekuma punkto
en entjero per difino.

1072
00:51:59,020 --> 00:52:01,290
>> Do la respondo tie estas nulo.

1073
00:52:01,290 --> 00:52:02,600
Nu do kiel ni ripari tion?

1074
00:52:02,600 --> 00:52:04,400
Ni bezonas alian solvon kune.

1075
00:52:04,400 --> 00:52:06,880
Kaj ni povas fari tion, kiel sekvas.

1076
00:52:06,880 --> 00:52:12,820
>> Lasu min antaŭeniri kaj krei novan
dosiero, ĉi tiu nomita floats.c.

1077
00:52:12,820 --> 00:52:16,500
Kaj savu ŝin tie en la
sama dosierujo, float.c.

1078
00:52:16,500 --> 00:52:19,360

1079
00:52:19,360 --> 00:52:23,260
Kaj lasu min antaŭeniri kaj kopio
iom de tiu kodo de antaŭe.

1080
00:52:23,260 --> 00:52:27,690
>> Sed anstataŭe de iĝi
int, ni faru tion.

1081
00:52:27,690 --> 00:52:31,037
Donu glitpunktaj valoro
nomata x. kie glitpunkta

1082
00:52:31,037 --> 00:52:33,370
valoro estas nur laŭvorte
io kun flosanta punkto.

1083
00:52:33,370 --> 00:52:34,410
Ĝi povas movi al la maldekstra, dekstre.

1084
00:52:34,410 --> 00:52:35,530
Ĝi estas reela nombro.

1085
00:52:35,530 --> 00:52:38,050
>> Kaj mi ne vokas
akiri int, sed akiri kaleŝego,

1086
00:52:38,050 --> 00:52:41,420
kiu ankaŭ estis inter la menuo
de ebloj en la C250 biblioteko.

1087
00:52:41,420 --> 00:52:43,220
Ni ŝanĝas y al kaleŝego.

1088
00:52:43,220 --> 00:52:45,000
Do tiu fariĝas akiri kaleŝego.

1089
00:52:45,000 --> 00:52:47,620
>> Kaj nun, ni ne volas ŝtopi en ints.

1090
00:52:47,620 --> 00:52:53,130
Rezultas ni devas uzi procento
f por kaleŝego, procento f por kaleŝego,

1091
00:52:53,130 --> 00:52:54,560
kaj nun savos.

1092
00:52:54,560 --> 00:53:01,220
Nun fingrojn transiritaj, fari
kaleŝegoj, bela, dot oblikvo kaleŝegoj.

1093
00:53:01,220 --> 00:53:04,280
x estas iranta esti unu 1. y
Tuj estos 10 denove.

1094
00:53:04,280 --> 00:53:08,240
>> Kaj, bela, OK mia Krome estas korekta.

1095
00:53:08,240 --> 00:53:10,240
Mi estis esperanta por pli,
sed mi forgesis skribi ĝin.

1096
00:53:10,240 --> 00:53:13,250
Do ni iru kaj ripari tiu logika eraro.

1097
00:53:13,250 --> 00:53:16,280
>> Ni iru antaŭen kaj ekpreni la sekvan.

1098
00:53:16,280 --> 00:53:18,080
Ni nur faru malgrandan kopion kaj almeti.

1099
00:53:18,080 --> 00:53:20,080
Kaj mi tuj diru minuso.

1100
00:53:20,080 --> 00:53:21,890
>> Kaj mi tuj diru fojojn.

1101
00:53:21,890 --> 00:53:24,060
Kaj mi tuj diros dividita.

1102
00:53:24,060 --> 00:53:28,240
Kaj mi ne tuj fari module,
kiu ne estas tiel germane tie,

1103
00:53:28,240 --> 00:53:33,690
dividita per f kaj tempojn plus--
OK, ni faru ĉi denove.

1104
00:53:33,690 --> 00:53:44,210
>> Faru kaleŝegoj, dot oblikvo kaleŝegoj,
kaj 1, 10, kaj- bela, ne, OK.

1105
00:53:44,210 --> 00:53:45,250
Do mi estas idioto.

1106
00:53:45,250 --> 00:53:47,000
Do tiu estas tre komuna
en komputiko

1107
00:53:47,000 --> 00:53:49,780
fari stultajn erarojn kiel tio.

1108
00:53:49,780 --> 00:53:53,100
>> Por pedagogiaj celoj,
kion mi vere deziris fari

1109
00:53:53,100 --> 00:53:57,410
estis ŝanĝi la sciencon tie
por pli, al minus, por momentoj,

1110
00:53:57,410 --> 00:54:01,140
kaj dividi, kiel vi espereble
rimarkis dum tiu ekzerco.

1111
00:54:01,140 --> 00:54:04,700
Do nun ni re-kompili ĉi
programo, do skalara oblikvo kaleŝegoj.

1112
00:54:04,700 --> 00:54:07,950
>> Kaj por la tria fojo, ni
ĉu ĝi renkontas miajn atendojn.

1113
00:54:07,950 --> 00:54:21,480
1, 10, eniru, jes, bone, 1,000,
dividita per 10,000, estas 0.100000.

1114
00:54:21,480 --> 00:54:24,952
Kaj ĝi rezultas ni povas kontroli kiom da
nombroj estas post tiuj dekuma punktoj.

1115
00:54:24,952 --> 00:54:25,660
Ni fakte volas.

1116
00:54:25,660 --> 00:54:26,790
Ni revenos al tio.

1117
00:54:26,790 --> 00:54:28,440
>> Sed nun, fakte, la math estas ĝusta.

1118
00:54:28,440 --> 00:54:30,090
Do, denove, kio estas la takeaway tie?

1119
00:54:30,090 --> 00:54:33,050
Ĝi rezultas ke en C, estas
ne nur simple strings-- kaj, fakte,

1120
00:54:33,050 --> 00:54:36,120
ne estas vere, ĉar ni
aldoni tiujn kun la CS50 biblioteko.

1121
00:54:36,120 --> 00:54:37,710
Sed estas ne nur ints.

1122
00:54:37,710 --> 00:54:38,990
>> Ekzistas ankaŭ flosas.

1123
00:54:38,990 --> 00:54:42,810
Kaj ĝi rezultas faskon da aliaj datumoj
tipoj ankaŭ, ke ni uzos antaŭ longe.

1124
00:54:42,810 --> 00:54:46,270
Rezultas se vi volas sola
karaktero, ne ĉenon de karakteroj,

1125
00:54:46,270 --> 00:54:47,610
Vi povas uzi nur char.

1126
00:54:47,610 --> 00:54:52,350
>> Rezultas, ke se vi volas bool,
Bulea valoro, vera aŭ malvera nur,

1127
00:54:52,350 --> 00:54:56,840
danke al la CS50 biblioteko, ni havas
aldonita al C la bool datumtipo ankaŭ.

1128
00:54:56,840 --> 00:54:59,180
Sed ĝi estas ankaŭ prezenti en
multaj aliaj lingvoj ankaŭ.

1129
00:54:59,180 --> 00:55:04,130
Kaj ĝi rezultas ke kelkfoje vi
bezonas pli grandan nombroj tiam venas implicite

1130
00:55:04,130 --> 00:55:05,210
kun ints kaj flosoj.

1131
00:55:05,210 --> 00:55:10,590
>> Kaj, fakte, duobla Estas nombro
kiu uzas ne 32 bitoj, sed 64 bitoj.

1132
00:55:10,590 --> 00:55:14,990
Kaj longa longa estas nombro kiu
uzas ne 32, bitoj sed 64 bitoj,

1133
00:55:14,990 --> 00:55:19,190
respektive, por glitpunktaj
valoroj kaj entjeroj, respektive.

1134
00:55:19,190 --> 00:55:22,780
Do ni vere nun
vidi tion en ago.

1135
00:55:22,780 --> 00:55:26,150
>> Mi tuj iros antaŭen tie
kaj vipi unu la alian programon.

1136
00:55:26,150 --> 00:55:32,020
Tie, mi tuj iros antaŭen
kaj do inkluzivas cs50.h.

1137
00:55:32,020 --> 00:55:34,910
Kaj mi iros, inkludas normon io.h.

1138
00:55:34,910 --> 00:55:37,320
>> Kaj vi rimarkos ion
funky okazas tie.

1139
00:55:37,320 --> 00:55:40,592
Ĝi ne kolora kodigo aferoj
same kiel ĝi faris antaŭe.

1140
00:55:40,592 --> 00:55:43,550
Kaj ĝi rezultas, tio estas ĉar mi
ne donis la afero dosiernomon.

1141
00:55:43,550 --> 00:55:47,270
>> Mi tuj nomas tiun unu
sizeof.c kaj batis Konservi.

1142
00:55:47,270 --> 00:55:51,039
Kaj rimarki kio okazas al mia tre
blanka kodo kontraŭ tiu nigra fono.

1143
00:55:51,039 --> 00:55:52,830
Nun almenaŭ ekzistas
iuj purpura tie.

1144
00:55:52,830 --> 00:55:54,490
Kaj tio estas sintakso emfazita.

1145
00:55:54,490 --> 00:55:57,700
>> Tio estas ĉar, tute simple, mi havas
diris la IDE kion tipo de dosiero

1146
00:55:57,700 --> 00:56:01,060
estas per doni al ĝi nomon, kaj
specife dosiersufikso.

1147
00:56:01,060 --> 00:56:03,620
Nun, ni iru antaŭen kaj fari tion.

1148
00:56:03,620 --> 00:56:08,910
Mi tuj iros antaŭen kaj tre
simple printi la following-- bool

1149
00:56:08,910 --> 00:56:11,080
Estas procento LU.

1150
00:56:11,080 --> 00:56:12,950
>> Ni revenos al
ke en nur momento.

1151
00:56:12,950 --> 00:56:15,840
Kaj tiam mi tuj
print grandeco de bool.

1152
00:56:15,840 --> 00:56:18,170
Kaj nun, nur por ŝpari
mi iam, mi estas

1153
00:56:18,170 --> 00:56:20,280
faros tuto
faskon el tiuj samtempe.

1154
00:56:20,280 --> 00:56:24,620
Kaj, specife, mi tuj
ŝanĝu tion char kaj char.

1155
00:56:24,620 --> 00:56:27,760
Ĉi tiu, mi tuj ŝanĝos
al duobla kaj duobla.

1156
00:56:27,760 --> 00:56:31,440
>> Ĉi tiu, mi tuj ŝanĝos
por kaleŝego kaj kaleŝego.

1157
00:56:31,440 --> 00:56:35,670
Ĉi tiu, mi tuj
ŝanĝi al int kaj int.

1158
00:56:35,670 --> 00:56:38,660
Kaj ĉi tiu, mi tuj
ŝanĝi longa longa.

1159
00:56:38,660 --> 00:56:40,840
Kaj ĝi estas ankoraŭ prenante
longa tempo, longa longa.

1160
00:56:40,840 --> 00:56:44,572
>> Kaj tiam, finfine, mi donis
mi unu tro multaj, kordoj.

1161
00:56:44,572 --> 00:56:47,030
Ĝi rezultas ke en C, estas
la speciala operatoro nomas

1162
00:56:47,030 --> 00:56:50,260
grandeco de tio laŭvorte
tuj, kiam kuri,

1163
00:56:50,260 --> 00:56:52,099
diru al ni la grandecon de
ĉiu el tiuj variabloj.

1164
00:56:52,099 --> 00:56:53,890
Kaj tio estas maniero, nun,
ni povas konekti reen

1165
00:56:53,890 --> 00:56:57,140
al lasta semajno de diskutejo
de datumoj kaj prezento.

1166
00:56:57,140 --> 00:57:00,330
>> Lasu min antaŭeniri kaj kompili
grandeco de dot oblikvo grandeco de.

1167
00:57:00,330 --> 00:57:01,210
Kaj ni vidu.

1168
00:57:01,210 --> 00:57:05,210
Ĝi rezultas ke en C,
specife sur CS50 IDE,

1169
00:57:05,210 --> 00:57:08,170
specife sur la
mastruma sistemo Ubuntu,

1170
00:57:08,170 --> 00:57:11,100
kiu estas 64-bita mastruma
sistemo en ĉi tiu kazo,

1171
00:57:11,100 --> 00:57:14,189
bool tuj
uzi unu bajto de spaco.

1172
00:57:14,189 --> 00:57:16,480
Tiel grandeco mezuras,
Ne en bitoj, sed en bajtoj.

1173
00:57:16,480 --> 00:57:18,690
Kaj memoras ke unu bajto estas ok bitoj.

1174
00:57:18,690 --> 00:57:22,030
Tiel bool, kvankam vi
teknike nur bezonas 0 aŭ 1,

1175
00:57:22,030 --> 00:57:24,092
ĝi estas iom malŝparema
kiel ni implementado ĝin.

1176
00:57:24,092 --> 00:57:26,800
Ĝi estas vere tuj uzos tuta
byte-- tiel ĉiuj nuloj, estas eble

1177
00:57:26,800 --> 00:57:31,050
ĉiuj, aŭ io simila,
aŭ nur unu 1 inter ok bitoj.

1178
00:57:31,050 --> 00:57:34,962
>> A char, dume, uzita por gravulo
kiel Ascii karaktero po pasintsemajne,

1179
00:57:34,962 --> 00:57:36,170
tuj estos unu signo.

1180
00:57:36,170 --> 00:57:42,340
Kaj ke synchs kun nia nocio
ĝi estante ne pli ol 256 bits-- prefere,

1181
00:57:42,340 --> 00:57:45,360
synchs kun ĝi estanta neniu
longa ol 8 bitoj, kiu

1182
00:57:45,360 --> 00:57:47,450
donas al ni cxiuj, 256 valorojn.

1183
00:57:47,450 --> 00:57:49,680
Duobla tuj
estu 8 bajtoj aŭ 64 bitoj.

1184
00:57:49,680 --> 00:57:50,510
>> Al kaleŝego estas 4.

1185
00:57:50,510 --> 00:57:51,690
Int estas 4.

1186
00:57:51,690 --> 00:57:52,980
Longa, longa estas 8.

1187
00:57:52,980 --> 00:57:54,716
Kaj ŝnuro estas 8.

1188
00:57:54,716 --> 00:57:55,840
Sed ne maltrankviliĝu pri tio.

1189
00:57:55,840 --> 00:57:57,340
Ni tuj senŝeligi reen tiun tavolon.

1190
00:57:57,340 --> 00:57:59,940
Rezultas, kordoj povas
esti pli longa ol 8 bajtoj.

1191
00:57:59,940 --> 00:58:02,310
>> Kaj, efektive, ni skribis
kordoj jam, saluton mondo,

1192
00:58:02,310 --> 00:58:03,700
longa ol 8 bajtoj.

1193
00:58:03,700 --> 00:58:06,270
Sed ni revenos al
ke en nur momento.

1194
00:58:06,270 --> 00:58:09,690
Sed la preno for tie estas la sekva.

1195
00:58:09,690 --> 00:58:15,320
>> Ajna komputilo nur havas finia
kvanto de memoro kaj spaco.

1196
00:58:15,320 --> 00:58:17,860
Vi nur povas stoki tiel multajn
dosierojn sur via Mac aŭ PC.

1197
00:58:17,860 --> 00:58:23,030
Vi nur povas stoki tantos programoj en
RAM kurante samtempe, nepre, eĉ

1198
00:58:23,030 --> 00:58:26,360
kun virtuala memoro, ĉar
vi havas finia kvanto de RAM.

1199
00:58:26,360 --> 00:58:28,990
>> Kaj nur al picture-- se
vi neniam malfermis tekkomputilo

1200
00:58:28,990 --> 00:58:31,300
aŭ ordigita ekstra memoro
por komputilo, vi

1201
00:58:31,300 --> 00:58:33,670
eble ne scias ke
ene de via komputilo

1202
00:58:33,670 --> 00:58:36,590
Estas iu kiu aspektas
iom tiel.

1203
00:58:36,590 --> 00:58:40,540
Do tio estas nur komuna entrepreno nomita
Crucial kiu faras RAM por komputiloj.

1204
00:58:40,540 --> 00:58:43,620
Kaj RAM estas kie programoj
vivi dum ili kuras.

1205
00:58:43,620 --> 00:58:46,630
>> Tiel sur ĉiu Mac aŭ PC, kiam vi duoble
klaku programon, kaj ĝi malfermas,

1206
00:58:46,630 --> 00:58:48,921
kaj ĝi malfermas iun Vorto dokumenton
aŭ io simila,

1207
00:58:48,921 --> 00:58:51,764
ĝi stokas ŝin temporalmente en
RAM, ĉar RAM estas pli rapida

1208
00:58:51,764 --> 00:58:53,680
ol via malmola disko, aŭ
via solida stato disko.

1209
00:58:53,680 --> 00:58:56,600
Do estas nur kie programoj iri
vivi kiam ili estas kurado,

1210
00:58:56,600 --> 00:58:58,060
aŭ kiam dosieroj uzitaj.

1211
00:58:58,060 --> 00:59:00,890
>> Do vi havas aferojn kiuj aspektas
tiel ene de via tekkomputilo,

1212
00:59:00,890 --> 00:59:03,320
aŭ iomete pli grandaj aferoj
ene de via labortablo.

1213
00:59:03,320 --> 00:59:07,440
Sed la ŝlosilo estas vi nur havas
finia nombro de tiuj aferoj.

1214
00:59:07,440 --> 00:59:11,230
Kaj tie estas nur finia kvanto de
aparataro sidas sur tiu skribotablo dekstra

1215
00:59:11,230 --> 00:59:11,730
tie.

1216
00:59:11,730 --> 00:59:15,920
>> Do, certe, ni ne povas stoki
senfine longajn numerojn.

1217
00:59:15,920 --> 00:59:19,030
Kaj, tamen, se vi opinias reen al
lernojaro lernejo, kiom da ciferoj povas

1218
00:59:19,030 --> 00:59:21,400
vi havas la rajton
de dekuma punkto?

1219
00:59:21,400 --> 00:59:24,680
Cetere, kiom da ciferoj povas
vi havas maldekstre de dekuma punkto?

1220
00:59:24,680 --> 00:59:26,300
Vere, senlime multaj.

1221
00:59:26,300 --> 00:59:30,840
>> Nun, ni homoj povus nur
scipovas prononci milionoj,

1222
00:59:30,840 --> 00:59:34,990
kaj miliardo, duilionoj, kaj
duiliardojn kaj quintillion.

1223
00:59:34,990 --> 00:59:39,370
Kaj mi puŝas la limojn de mia
understanding-- aŭ my-- mi komprenas

1224
00:59:39,370 --> 00:59:41,110
nombroj, sed mia
elparolo de nombroj.

1225
00:59:41,110 --> 00:59:44,720
Sed ili povas akiri senfine granda kun
malfinie multajn ciferojn maldekstren

1226
00:59:44,720 --> 00:59:47,050
aŭ al la rajto de dekuma punkto.

1227
00:59:47,050 --> 00:59:50,040
>> Sed komputiloj nur havas
finia kvanto de memoro,

1228
00:59:50,040 --> 00:59:53,510
finia nombro de transistoroj, a
finia nombro de ampoloj ene.

1229
00:59:53,510 --> 00:59:57,350
Do kio okazas kiam
vi elĉerpas de spaco?

1230
00:59:57,350 --> 00:59:59,620
Alivorte, se vi
pensas reen al lasta semajno

1231
00:59:59,620 --> 01:00:03,160
kiam oni parolis pri nombroj
sin estanta reprezentita en duuma,

1232
01:00:03,160 --> 01:00:05,480
supozu ke ni havas
tiu 8-bita valoro tie.

1233
01:00:05,480 --> 01:00:08,290
>> Kaj ni havas sep 1-oj kaj unu 0.

1234
01:00:08,290 --> 01:00:10,827
Kaj supozu ke ni volas
aldoni 1 al tiu valoro.

1235
01:00:10,827 --> 01:00:12,410
Jen vere granda nombro nun.

1236
01:00:12,410 --> 01:00:16,610
>> Tio estas 254, se mi bone memoras
la matematiko de lasta semajno dekstra.

1237
01:00:16,610 --> 01:00:19,480
Sed kio se mi ŝanĝas
ke plej dekstra 0 al 1?

1238
01:00:19,480 --> 01:00:22,800
La tuta nombro, de
Kompreneble, iĝas ok 1-oj.

1239
01:00:22,800 --> 01:00:24,050
Do ni estas ankoraŭ bonaj.

1240
01:00:24,050 --> 01:00:27,204
>> Kaj kiu probable reprezentas
255, kvankam depende de la kunteksto

1241
01:00:27,204 --> 01:00:29,120
ĝi povus reale reprezentas
negativa nombro.

1242
01:00:29,120 --> 01:00:31,240
Sed pli sur tiu alia tempo.

1243
01:00:31,240 --> 01:00:34,220
Tio sentas kiel ĝi estas proksimume
tiel alta kiel mi povas rakonti.

1244
01:00:34,220 --> 01:00:35,290
>> Nun, ĝi estas nur 8 bitoj.

1245
01:00:35,290 --> 01:00:38,170
Kaj mia Mac, verŝajne, havas vojon
pli ol 8 bitoj de memoro.

1246
01:00:38,170 --> 01:00:39,170
Sed ĝi havas finia.

1247
01:00:39,170 --> 01:00:43,230
Tial la sama argumento validas, eĉ se ni
havi pli de tiuj sur la ekrano.

1248
01:00:43,230 --> 01:00:47,020
>> Sed kio okazas se vi estas
stokante tiu nombro, 255,

1249
01:00:47,020 --> 01:00:49,290
kaj vi volas rakonti 1 bito pli altaj?

1250
01:00:49,290 --> 01:00:51,600
Vi volas iri de 255 al 256.

1251
01:00:51,600 --> 01:00:55,800
La problemo, kompreneble, estas ke se vi
komenci kalkulon je nulo kiel pasintsemajne,

1252
01:00:55,800 --> 01:00:59,670
Vi ne povas kalkuli tiel alta
kiel 256, des malpli 257,

1253
01:00:59,670 --> 01:01:02,584
lasu sole 258, m pro kio
okazas kiam vi aldonas 1?

1254
01:01:02,584 --> 01:01:05,000
Se vi faros la malnova lernojaro lernejo
alproksimiĝo, vi metis 1 tie,

1255
01:01:05,000 --> 01:01:08,150
kaj tiam 1 plus 1 estas 2, sed tio estas
vere nulo, vi portos la 1an

1256
01:01:08,150 --> 01:01:09,695
porti la 1an porti la 1.

1257
01:01:09,695 --> 01:01:12,620
Ĉiuj el tiuj aferoj,
tiuj 1-a, iru al nulo.

1258
01:01:12,620 --> 01:01:17,820
Kaj vi serpentumi supren, jes, kiel iu
atentigis, 1 sur la maldekstra flanko.

1259
01:01:17,820 --> 01:01:22,540
Sed ĉion vi povas
reale vidi kaj havi en la memoro

1260
01:01:22,540 --> 01:01:27,960
estas nur ok 0, kio estas
ĉe iu punkto, se vi, komputilo,

1261
01:01:27,960 --> 01:01:32,490
provis rakonti sufiĉe alta supren, vi estas
tuj envolver ĉirkaŭe, ĝi ŝajnus,

1262
01:01:32,490 --> 01:01:35,850
al nulo, aŭ eble eĉ negativa
nombroj, kiuj estas eĉ pli malalta ol nulo.

1263
01:01:35,850 --> 01:01:37,260
>> Kaj ni povas ia vidi ĉi.

1264
01:01:37,260 --> 01:01:39,900
Lasu min antaŭeniri kaj skribi
vera rapida programo tie.

1265
01:01:39,900 --> 01:01:43,690
Lasu min antaŭeniri kaj skribi
programo nomata Overflow.

1266
01:01:43,690 --> 01:01:49,980
Inkluzivi CS50.h, inkluzivi
norma IO.h-- ho,

1267
01:01:49,980 --> 01:01:51,730
Mi vere maltrafis mian sintaksa kolorigo.

1268
01:01:51,730 --> 01:01:54,440
Do ni savu tion kiel overflow.c.

1269
01:01:54,440 --> 01:01:57,084
>> Kaj nun int ĉefa void--
kaj post nelonge, ni instruos vin

1270
01:01:57,084 --> 01:01:59,500
revenu al klarigi kial
ni tenas skribanta int ĉefa malplenon.

1271
01:01:59,500 --> 01:02:02,080
Sed nuntempe, ni nur fari
ĝi, prenante ĝin por sentado.

1272
01:02:02,080 --> 01:02:06,200
Ni donu min int,
kaj pravalorizi ĝin al 0.

1273
01:02:06,200 --> 01:02:11,716
>> Ni tiam faru por int i akiras zero--
fakte, ni faru senfina ciklo

1274
01:02:11,716 --> 01:02:12,590
kaj vidu kio okazas.

1275
01:02:12,590 --> 01:02:22,440
Dum vera, tiam ni presi n
Estas procento i, backslash n, plug -in n.

1276
01:02:22,440 --> 01:02:27,200
Sed, nun, ni faru n prenas n plus 1.

1277
01:02:27,200 --> 01:02:29,660
>> Do alivorte, sur ĉiu
ripeto de tiu senfina buklo,

1278
01:02:29,660 --> 01:02:32,550
ni prenu n valoro,
kaj aldoni 1 al ĝi kaj poste

1279
01:02:32,550 --> 01:02:34,350
stoki la rezulton reen en n maldekstre.

1280
01:02:34,350 --> 01:02:37,150
Kaj, fakte, ni vidis sintakso
iomete kiel tiu, mallonge.

1281
01:02:37,150 --> 01:02:39,730
A cool lertaĵo estas anstataŭe
verki ĉiuj ĉi ekstere,

1282
01:02:39,730 --> 01:02:42,770
Vi povas fakte diri n plus egalas 1.

1283
01:02:42,770 --> 01:02:47,480
>> Aŭ se vi vere volas esti imago,
vi povas diri n plus plus duon-dupunkto.

1284
01:02:47,480 --> 01:02:50,130
Sed tiuj lastaj du estas nur
kion ni nomus sintaksa sukero

1285
01:02:50,130 --> 01:02:50,790
por la unua afero.

1286
01:02:50,790 --> 01:02:53,456
>> La unua afero estas pli eksplicita,
tute bone, tute korekta.

1287
01:02:53,456 --> 01:02:55,470
Sed tiu estas pli ofta, mi diros.

1288
01:02:55,470 --> 01:02:57,210
Do ni faru tion por nur momento.

1289
01:02:57,210 --> 01:03:01,685
>> Ni nun faras overflow, kiu sonas
prefere malbonaŭgura, dot oblikvo troplenigxis.

1290
01:03:01,685 --> 01:03:04,380

1291
01:03:04,380 --> 01:03:09,852
Vidu, n Fariĝas iom granda.

1292
01:03:09,852 --> 01:03:11,310
Sed ni pensas, kiom granda povas n ricevis?

1293
01:03:11,310 --> 01:03:12,870
>> n estas int.

1294
01:03:12,870 --> 01:03:16,400
Ni vidis antaŭ momento kun la grandeco de
Ekzemple ke int estas kvar bajtoj.

1295
01:03:16,400 --> 01:03:22,070
Ni scias de la pasinta semajno, kvar bajtoj estas
32 bitoj, ĉar 8 fojoj 4, tio estas 32.

1296
01:03:22,070 --> 01:03:23,460
Ke tuj estos 4 miliardoj.

1297
01:03:23,460 --> 01:03:25,802
>> Kaj ni estas ĝis 800.000.

1298
01:03:25,802 --> 01:03:28,510
Ĉi tiu tuj preni forever
kalkuli tiel alta kiel mi eble povas.

1299
01:03:28,510 --> 01:03:30,635
Do mi tuj iros antaŭen,
kiel vi eble post nelonge,

1300
01:03:30,635 --> 01:03:34,910
kaj batis Kontrolo C-- sincere, Kontrola
C, multe, kie Kontrolo C ĝenerale

1301
01:03:34,910 --> 01:03:36,034
per nuligi.

1302
01:03:36,034 --> 01:03:38,200
Bedaŭrinde, pro tiu
kuras en la nubo,

1303
01:03:38,200 --> 01:03:41,190
Iufoje la nubo estas
kracxi el tiom stuff,

1304
01:03:41,190 --> 01:03:44,180
tiel eligo, ĝi tuj
preni iom da tempo por mia enigo

1305
01:03:44,180 --> 01:03:45,630
akiri al la nubo.

1306
01:03:45,630 --> 01:03:49,240
Do kvankam mi trafis
Kontrolo C kelkaj sekundoj antaŭ

1307
01:03:49,240 --> 01:03:53,110
tiu estas sendube la flanko
efekto de senfina ciklo.

1308
01:03:53,110 --> 01:03:56,070
>> Kaj tiel en tiaj okazoj, ni estas
lasos ke estu.

1309
01:03:56,070 --> 01:03:59,050
Kaj ni tuj aldonas alian
terminalfenestro tien

1310
01:03:59,050 --> 01:04:03,186
kun la alpago, kiu kompreneble ne
tiel, ĉar ĝi estas ankoraŭ pensas.

1311
01:04:03,186 --> 01:04:05,310
Kaj ni iru antaŭen kaj estu
iom pli racia.

1312
01:04:05,310 --> 01:04:07,768
>> Mi tuj iros antaŭen kaj fari
ĉi nur finie multajn fojojn.

1313
01:04:07,768 --> 01:04:10,047
Ni uzu por ciklo,
kiun mi aludis al pli frua.

1314
01:04:10,047 --> 01:04:10,630
Ni faru ĉi.

1315
01:04:10,630 --> 01:04:13,430
Donu al mi alian variablo int i ricevas 0.

1316
01:04:13,430 --> 01:04:17,430
i estas malpli ol, ni diru, 64 I ++.

1317
01:04:17,430 --> 01:04:24,010
Kaj nun lasu min iri antaŭen kaj presita
el n estas procento i, komo n.

1318
01:04:24,010 --> 01:04:27,547
Kaj tiam n-- tiu estas ankoraŭ
tuj prenos ĉiam.

1319
01:04:27,547 --> 01:04:28,130
Ni faru ĉi.

1320
01:04:28,130 --> 01:04:30,620
>> n prenas n fojoj 2.

1321
01:04:30,620 --> 01:04:34,140
Aŭ ni povus esti imago
kaj fari tempoj egalas 2.

1322
01:04:34,140 --> 01:04:37,120
Sed ni simple diri n
egalas, tempoj 2.

1323
01:04:37,120 --> 01:04:39,321
Alivorte, en tiu
nova versio de la programo,

1324
01:04:39,321 --> 01:04:41,820
Mi ne volas atendi por ĉiam
de kiel 800,000 ĝis 4 miliardoj.

1325
01:04:41,820 --> 01:04:43,070
Ni nur ricevas tiun super kun.

1326
01:04:43,070 --> 01:04:44,920
>> Ni vere duobligi n ĉiufoje.

1327
01:04:44,920 --> 01:04:47,660
Kiu, memoru, duobligo estas la
malo de esti, kompreneble.

1328
01:04:47,660 --> 01:04:50,035
Kaj dum lasta semajno havas
io denove kaj denove,

1329
01:04:50,035 --> 01:04:52,200
kaj denove, super rapida,
duobligo certe

1330
01:04:52,200 --> 01:04:58,080
liberigi nin el 1 al la plej granda ebla
valoro kiun ni povas kalkuli al kun int.

1331
01:04:58,080 --> 01:04:59,750
>> Do ni faru ĝuste tion.

1332
01:04:59,750 --> 01:05:01,720
Kaj ni revenos al tiu post nelonge.

1333
01:05:01,720 --> 01:05:04,180
Sed tiu, denove, estas nur kiel
la ripeto bloko en Scratch.

1334
01:05:04,180 --> 01:05:05,600
Kaj vi uzos tion antaŭ longe.

1335
01:05:05,600 --> 01:05:10,170
>> Tio nur signifas grafo de nulo
ĝis, sed ne egala, al 64.

1336
01:05:10,170 --> 01:05:14,285
Kaj sur ĉiu ripeto de ĉi
buklo, simple observu pliigante i.

1337
01:05:14,285 --> 01:05:18,990
Do i ++ - kaj tiu ĝenerala konstrukcio
sur linio 7 estas nur super komuna vojo

1338
01:05:18,990 --> 01:05:22,290
ripeti iuj linioj de
kodo, iu numero de fojoj.

1339
01:05:22,290 --> 01:05:23,362
Kiuj linioj de kodo?

1340
01:05:23,362 --> 01:05:25,570
Tiuj buklaj krampoj, kiel vi
eble kolektis de nun,

1341
01:05:25,570 --> 01:05:26,780
signifas, faru la sekvajn.

1342
01:05:26,780 --> 01:05:29,510
>> Ĝi estas en kiel Scratch, kiam
ĝi havas la flavajn blokojn

1343
01:05:29,510 --> 01:05:32,680
kaj aliaj koloroj tian
brakumi aŭ brakumi aliajn blokojn.

1344
01:05:32,680 --> 01:05:34,750
Tion tiuj buklaj
krampoj faras cxi tie.

1345
01:05:34,750 --> 01:05:40,200
Do se mi akiris mian sintakso right-- vin
povas vidi la karoto simbolo en C rimedoj

1346
01:05:40,200 --> 01:05:42,706
jen kiom da fojoj mi
provas solvi tiun problemon.

1347
01:05:42,706 --> 01:05:45,330
Do ni seniĝi de tiu
entute, kaj fermi tiun fenestron.

1348
01:05:45,330 --> 01:05:46,520
Kaj ni uzos la novan.

1349
01:05:46,520 --> 01:05:51,980
Fari overflow, dot oblikvo
overflow, Enter, bone,

1350
01:05:51,980 --> 01:05:53,090
ĝi aspektas malbona unue.

1351
01:05:53,090 --> 01:05:56,200
Sed ni rulumu reen en tempo,
ĉar mi faris tion 64 fojojn.

1352
01:05:56,200 --> 01:05:58,700
>> Kaj rimarki la unua fojo, n estas 1.

1353
01:05:58,700 --> 01:06:03,110
Duafoje, n estas 2,
tiam 4, tiam 8, tiam 16.

1354
01:06:03,110 --> 01:06:09,450
Kaj ĝi similas ke tuj kiam
Mi alvenas al proksimume 1 miliardo,

1355
01:06:09,450 --> 01:06:12,800
se mi duobligi ĝin denove, por ke
donu al mi 2 miliardoj.

1356
01:06:12,800 --> 01:06:14,980
Sed rezultas, estas
ĝuste sur la pinto.

1357
01:06:14,980 --> 01:06:18,930
>> Kaj do ĝi reale superfluas
int de 1 miliardo

1358
01:06:18,930 --> 01:06:23,514
al proksimume negativa 2
miliardoj, ĉar entjero,

1359
01:06:23,514 --> 01:06:25,430
kontraste la numerojn ni
estis supozante pasintsemajne,

1360
01:06:25,430 --> 01:06:28,397
povas esti ambaŭ pozitivajn kaj negativajn
en realeco kaj en komputilo.

1361
01:06:28,397 --> 01:06:30,730
Kaj tiel almenaŭ unu el tiuj
bitoj efektive ŝtelita.

1362
01:06:30,730 --> 01:06:34,190
Do ni vere nur havas 31 bitojn,
aŭ 2 miliardoj eblaj valoroj.

1363
01:06:34,190 --> 01:06:38,220
>> Sed nuntempe, la takeaway estas sufiĉe
simple ajn tiuj nombroj estas

1364
01:06:38,220 --> 01:06:42,280
kaj kiel la matematiko estas,
io malbona okazas fine,

1365
01:06:42,280 --> 01:06:46,980
ĉar fine vi provas
permuti la bitoj unu tro da fojoj.

1366
01:06:46,980 --> 01:06:51,060
Kaj vi efektive iri de ĉiuj
1-oj al eble ĉiuj 0-a, aŭ eble

1367
01:06:51,060 --> 01:06:54,260
nur iuj aliaj padrono ke
klare, depende de la kunteksto,

1368
01:06:54,260 --> 01:06:56,342
povas esti interpretita kiel negativa nombro.

1369
01:06:56,342 --> 01:06:59,300
Kaj tiel ĝi ŝajnus la plej altaj mi
povas kalkuli en ĉi tiu aparta programo

1370
01:06:59,300 --> 01:07:01,210
nur malglate 1 miliardo.

1371
01:07:01,210 --> 01:07:02,760
Sed estas parta solvo tie.

1372
01:07:02,760 --> 01:07:03,480
Vi scias kion?

1373
01:07:03,480 --> 01:07:07,600
>> Lasu min ŝanĝi de
int por longa tempo.

1374
01:07:07,600 --> 01:07:10,633
Kaj lasu min antaŭeniri tie
kaj say-- mi tuj havos

1375
01:07:10,633 --> 01:07:12,290
ŝanĝi ĉi tion al sensigna longa.

1376
01:07:12,290 --> 01:07:16,860
Aŭ, ni vidu, mi neniam memoras min.

1377
01:07:16,860 --> 01:07:19,920
>> Ni iru antaŭen kaj fari troplenigxis.

1378
01:07:19,920 --> 01:07:21,860
Ne, tio ne estas ĝi, LLD, dankon.

1379
01:07:21,860 --> 01:07:23,430
Do kelkfoje Clang povas esti helpema.

1380
01:07:23,430 --> 01:07:27,550
Mi ne memoras, kion la formato
especificación estis dum longa tempo.

1381
01:07:27,550 --> 01:07:28,950
>> Sed ja Clang diris al mi.

1382
01:07:28,950 --> 01:07:31,570
Green estas ia bona,
ankoraŭ signifas vi eraris.

1383
01:07:31,570 --> 01:07:33,190
Ĝi konjektas ke mi signifis LLD.

1384
01:07:33,190 --> 01:07:38,750
>> Do lasu min preni ĝi estas konsilo, longa
longa dekuma nombro, savi tion.

1385
01:07:38,750 --> 01:07:43,190
Kaj mi rerun ĝin, dot
oblikvo overflow, Enter.

1386
01:07:43,190 --> 01:07:45,020
Nun kio estas malvarmeta estas tio.

1387
01:07:45,020 --> 01:07:49,140
>> Se mi rulumu reen en tempo, ni ankoraŭ komenci
rakonti al la sama place-- 1, 2, 4,

1388
01:07:49,140 --> 01:07:50,220
8, 16.

1389
01:07:50,220 --> 01:07:54,860
Avizo, ni akiras ĉiujn
vojo ĝis 1 miliardo.

1390
01:07:54,860 --> 01:07:57,070
Sed tiam ni sendanĝere atingos 2 miliardojn.

1391
01:07:57,070 --> 01:08:01,300
>> Tiam ni atingos 4 miliardoj,
tiam 8 miliardoj 17 miliardoj.

1392
01:08:01,300 --> 01:08:03,340
Kaj ni iru pli alten, kaj
alta kaj pli alta.

1393
01:08:03,340 --> 01:08:05,740
Fine, tiu, tro, paŭzoj.

1394
01:08:05,740 --> 01:08:09,350
>> Eventuale, kun longa longa,
kiu estas la 64-bita valoro, ne

1395
01:08:09,350 --> 01:08:13,660
32-bita valoro, se vi kalkuli
tro alta, vi envolver ĉirkaŭ 0.

1396
01:08:13,660 --> 01:08:16,410
Kaj en ĉi tiu kazo, ni hazarde
finos kun negativa nombro.

1397
01:08:16,410 --> 01:08:17,550
>> Do tiu estas problemo.

1398
01:08:17,550 --> 01:08:20,439
Kaj ĝi rezultas ke tiu
problemo ne ĉiuj kiuj arcano.

1399
01:08:20,439 --> 01:08:23,060
Kvankam mi havas intence
induktitaj per tiuj eraroj,

1400
01:08:23,060 --> 01:08:26,149
rezultas ni vidas ia tuta
ĉirkaŭ ni, aŭ almenaŭ iuj el ni faras.

1401
01:08:26,149 --> 01:08:28,939
>> Tiel en Lego Star Wars, se
vi iam ludis la ludon,

1402
01:08:28,939 --> 01:08:33,830
ĝi rezultas vi povas ĉirkaŭiri
rompi aĵojn en LEGO mondo,

1403
01:08:33,830 --> 01:08:36,640
kaj kolektanta monerojn, esence.

1404
01:08:36,640 --> 01:08:39,200
Kaj se vi iam ludis
tiu ludo maniero tro da tempo,

1405
01:08:39,200 --> 01:08:42,630
kiel tiu nenomita individua
tie faris, la totala nombro

1406
01:08:42,630 --> 01:08:46,700
de moneroj kiujn vi povas kolekti
Estas, ĝi similus, 4 miliardoj.

1407
01:08:46,700 --> 01:08:48,240
>> Nun kun ĝi estas fakte rondoforma.

1408
01:08:48,240 --> 01:08:50,239
Tiel LEGO penis
teni aferojn uzanto amika.

1409
01:08:50,239 --> 01:08:53,779
Ili ne faris ekzakte 2
la 32 povo, po pasintsemajne.

1410
01:08:53,779 --> 01:08:55,310
Sed 4 miliardoj estas kialo.

1411
01:08:55,310 --> 01:08:58,979
Ŝajnas, bazita sur tiu informo,
ke LEGO, kaj la kompanio kiu

1412
01:08:58,979 --> 01:09:02,624
faris tiun faktan programaro, decidita
ke la maksimuma nombro da moneroj

1413
01:09:02,624 --> 01:09:04,540
la uzanto povas amasigi
Estas ja 4 miliardoj,

1414
01:09:04,540 --> 01:09:12,069
ĉar ili elektis en siaj kodo
uzi ne longa tempo, ŝajne,

1415
01:09:12,069 --> 01:09:16,140
sed nur entjero, sensigna
entjera, nur pozitiva entjero, kies

1416
01:09:16,140 --> 01:09:18,089
maks valoro estas proksimume tiu.

1417
01:09:18,089 --> 01:09:19,380
Nu, jen alia amuza unu.

1418
01:09:19,380 --> 01:09:23,500
Tiel en la ludo Civilization, kiu
iuj el vi povus esti familiara, kun

1419
01:09:23,500 --> 01:09:26,660
ĝi rezultas ke antaŭ jaroj ekzistas
Estis cimo en tiu ludo per

1420
01:09:26,660 --> 01:09:28,750
se vi ludis la rolon
de Gandhi en la ludo,

1421
01:09:28,750 --> 01:09:34,020
anstataŭ lin esti tre pacisma,
anstataŭe estis nekredeble, nekredeble

1422
01:09:34,020 --> 01:09:36,399
agresema, en iuj cirkonstancoj.

1423
01:09:36,399 --> 01:09:40,529
Aparte, la maniero ke Civilizacio
verkoj estas ke se vi, la ludanto,

1424
01:09:40,529 --> 01:09:44,680
adopti demokratio, via
agresividad partituro ricevas

1425
01:09:44,680 --> 01:09:48,130
decremented duope, tiel minus
minuso, kaj tiam minus minus.

1426
01:09:48,130 --> 01:09:50,569
>> Do vi subtrahi 2 de
via reala ripetanta.

1427
01:09:50,569 --> 01:09:56,650
Bedaŭrinde, se via ripetanta estas
komence 1, kaj vi subtrahi 2 de ĝi

1428
01:09:56,650 --> 01:09:59,050
post adopti demokratio
kiel Gandhi tie povus

1429
01:09:59,050 --> 01:10:02,200
faris, ĉar li estis tre passive--
1 sur la skalo de agresividad.

1430
01:10:02,200 --> 01:10:04,830
Sed se li adoptas demokratio, tiam
Li iras de 1 al negativa 1.

1431
01:10:04,830 --> 01:10:11,470
>> Bedaŭrinde, ili estas
uzante sensigna nombroj,

1432
01:10:11,470 --> 01:10:15,400
kio signifas traktis eĉ negativa
nombroj kvazaŭ ili estis pozitivaj.

1433
01:10:15,400 --> 01:10:19,780
Kaj ĝi rezultas ke la
pozitivaj ekvivalento de negativa 1,

1434
01:10:19,780 --> 01:10:23,480
en tipa komputilo programoj, estas 255.

1435
01:10:23,480 --> 01:10:27,250
Do se Gandhi adoptas
demokratio, kaj pro tio havas

1436
01:10:27,250 --> 01:10:32,470
lia agresividad partituro malpliiĝis,
ĝi efektive ruliĝas ĉirkaŭ 255

1437
01:10:32,470 --> 01:10:35,470
kaj igas lin la plej
agreseman karakteron en la ludo.

1438
01:10:35,470 --> 01:10:36,930
Do vi povas Guglas sur tiu.

1439
01:10:36,930 --> 01:10:39,380
Kaj ĝi estis ja kiel
akcidenta programado cimo,

1440
01:10:39,380 --> 01:10:43,010
sed tio eniris tute
la popolscio tiam.

1441
01:10:43,010 --> 01:10:44,360
>> Jen ĉio amuza kaj cute.

1442
01:10:44,360 --> 01:10:47,760
Pli timiga estas kiam fakta
reala mondo aparatoj kaj ne ludoj,

1443
01:10:47,760 --> 01:10:48,820
havas tiujn samajn misfunkciadojn.

1444
01:10:48,820 --> 01:10:54,500
Fakte, nur unu jaro artikolo venis
el la Boeing 787 Dreamliner.

1445
01:10:54,500 --> 01:10:56,850
>> Kaj la artikolo unue
rigardo legas iom arkaikaj.

1446
01:10:56,850 --> 01:11:01,480
Sed dirinte, programaro
vulnerabilidad en Boeing

1447
01:11:01,480 --> 01:11:04,790
nova 787 Dreamliner jeto havas
la potencial por kaŭzi pilotoj

1448
01:11:04,790 --> 01:11:07,220
perdi kontrolon de
la aviadilo, eble

1449
01:11:07,220 --> 01:11:11,750
en plena flugo, la FAA oficialuloj
avertis aviadkompanioj ĵus.

1450
01:11:11,750 --> 01:11:14,520
Estis prijuĝo
ke modelo 787

1451
01:11:14,520 --> 01:11:19,770
aviadilo kiu estis funkciigita
senĉese por 248 tagoj

1452
01:11:19,770 --> 01:11:24,880
povas perdi ĉiuj alterna fluo, alterna,
elektra povo pro la generatoron

1453
01:11:24,880 --> 01:11:28,892
kontrolo unuoj, GCUs, samtempe
iro en malsukcesos sekura reĝimo.

1454
01:11:28,892 --> 01:11:29,850
Estas speco de perdi min.

1455
01:11:29,850 --> 01:11:35,390
Sed la memo deklaris, OK, nun mi tion aŭdas,
la kondiĉo estis kaŭzita de programaro

1456
01:11:35,390 --> 01:11:38,590
kontraŭi internaj al
la generatoro kontrolo

1457
01:11:38,590 --> 01:11:44,860
unuoj kiuj superfluas post
248 tagoj de kontinua potenco.

1458
01:11:44,860 --> 01:11:47,070
Ni eldonanta ĉi
rimarki malhelpi perdon

1459
01:11:47,070 --> 01:11:49,300
de ĉiuj AK elektra
potenco, kiu povus rezulti

1460
01:11:49,300 --> 01:11:50,980
en perdo de kontrolo de la aviadilo.

1461
01:11:50,980 --> 01:11:55,380
>> Do, laŭvorte, estas iu entjero,
aŭ iu ekvivalento datumtipo,

1462
01:11:55,380 --> 01:11:57,960
uzata en programaro
en fakta aviadilo

1463
01:11:57,960 --> 01:12:00,756
ke se vi tenas vian aviadilon
sur sufiĉe longa, kiu ŝajne

1464
01:12:00,756 --> 01:12:03,880
povas esti la kazo se vi nur kuri
ilin konstante kaj neniam unplugging

1465
01:12:03,880 --> 01:12:06,810
via aviadilo, ŝajnas, aŭ
lasanta lian kuirilaroj morti,

1466
01:12:06,810 --> 01:12:09,840
eventuale kalkuli, kaj supren,
kaj supren kaj supren kaj supren kaj supren.

1467
01:12:09,840 --> 01:12:12,150
>> Kaj, nature, oni
finia kvanto de memoro

1468
01:12:12,150 --> 01:12:15,880
estos inunda derulis al
nulo aŭ negativan valoron,

1469
01:12:15,880 --> 01:12:19,920
kromefikon de kiuj estas la
timige reala realaĵo

1470
01:12:19,920 --> 01:12:23,970
ke la ebeno eble bezonas
esti rebooted, efike,

1471
01:12:23,970 --> 01:12:27,290
aŭ falu, malbona, kiel ĝi flugas.

1472
01:12:27,290 --> 01:12:29,230
Tiuj specoj de aferoj
estas ankoraŭ kun ni,

1473
01:12:29,230 --> 01:12:33,130
even-- tio estis 2015 artikolo,
des pli timiga

1474
01:12:33,130 --> 01:12:36,100
kiam vi ne bezone
kompreni, estimi, aŭ anticipi

1475
01:12:36,100 --> 01:12:38,640
tiuj specoj de eraroj.

1476
01:12:38,640 --> 01:12:42,030
>> Do rezultas ekzistas unu alia
malbona afero pri datumoj reprezento.

1477
01:12:42,030 --> 01:12:47,080
Ĝi rezultas ke eĉ flosigas estas
ia misa, ĉar kaleŝegoj, tro,

1478
01:12:47,080 --> 01:12:51,440
Mi proponis estas 32 bitoj, aŭ
eble 64 se vi uzas duoblan.

1479
01:12:51,440 --> 01:12:53,070
Sed tio ankoraŭ finiaj.

1480
01:12:53,070 --> 01:12:57,070
>> Kaj la ruzo estas ke se vi povas
metis malfinia nombro de ciferoj

1481
01:12:57,070 --> 01:12:59,460
post la dekuma punkto,
ne estas maniero vi

1482
01:12:59,460 --> 01:13:02,690
povas reprezenti ĉiujn eblajn
numeroj kiuj ni estas instruitaj

1483
01:13:02,690 --> 01:13:04,990
en grado lernejo povas ekzisti en la mondo.

1484
01:13:04,990 --> 01:13:08,870
Komputila, esence, ĝi devas
elekti subaro de tiuj nombroj

1485
01:13:08,870 --> 01:13:10,200
reprezenti precize.

1486
01:13:10,200 --> 01:13:12,450
>> Nun, la komputilo povas
ronda eble iomete,

1487
01:13:12,450 --> 01:13:17,900
kaj povas permesi al vi malglate vendejo
ajna nombro vi povus eble volas.

1488
01:13:17,900 --> 01:13:20,940
Sed nur intuicie, se vi
havas finia nombro de bitoj,

1489
01:13:20,940 --> 01:13:24,560
Vi nur povas permuti ilin
en tiom multaj finiaj manieroj.

1490
01:13:24,560 --> 01:13:26,570
Do vi ne povas eble
uzi finia nombro

1491
01:13:26,570 --> 01:13:29,880
de permuto de bitoj,
ŝablonoj de nuloj kaj aĵoj,

1492
01:13:29,880 --> 01:13:32,940
reprezenti malfinia
nombro de ciferoj,

1493
01:13:32,940 --> 01:13:37,370
kiu sugestas ke komputiloj povus
tre bone esti kuŝanta al ni kelkfoje.

1494
01:13:37,370 --> 01:13:38,770
>> Fakte, ni faru tion.

1495
01:13:38,770 --> 01:13:41,239
Lasu min reiri en CS50 IDE.

1496
01:13:41,239 --> 01:13:43,030
Lasu min antaŭeniri kaj
krei malgrandan programon

1497
01:13:43,030 --> 01:13:47,940
nomita Imprecision, por montri ke
komputiloj estas ja malpreciza.

1498
01:13:47,940 --> 01:13:51,910
>> Kaj lasu min antaŭeniri kaj komenci kun
iom de tiu kodo de antaŭe,

1499
01:13:51,910 --> 01:13:53,830
kaj nun nur faru la sekvajn.

1500
01:13:53,830 --> 01:14:03,640
Lasu min antaŭeniri kaj fari printf, procento
f, backslash n, 1 dividita per 10.

1501
01:14:03,640 --> 01:14:07,430
Alivorte, ni plonĝi en profundan
al 1/10, kiel 1 kaj dividita per 10.

1502
01:14:07,430 --> 01:14:09,760
Certe, komputilo povas reprezenti 1/10.

1503
01:14:09,760 --> 01:14:13,620
>> Do ni iru antaŭen kaj fari imprecision.

1504
01:14:13,620 --> 01:14:14,390
Ni vidos.

1505
01:14:14,390 --> 01:14:16,210
Formato specifas tajpi duobla.

1506
01:14:16,210 --> 01:14:18,160
Sed la argumento havas tipo int.

1507
01:14:18,160 --> 01:14:19,040
Kio okazas?

1508
01:14:19,040 --> 01:14:21,970
>> Ho, interesa, tial ĝi estas
leciono lernis antaŭe.

1509
01:14:21,970 --> 01:14:26,050
Mi diras, hey, komputila programo
mi kaleŝego kun procento f.

1510
01:14:26,050 --> 01:14:28,200
Sed mi donas gxin 2 ints.

1511
01:14:28,200 --> 01:14:31,120
Do rezultas, mi povas ripari
tiun en kelkaj manieroj.

1512
01:14:31,120 --> 01:14:38,430
>> Mi povis nur turni unu en 1.0, kaj
10 en 10,0, kiu volis ja

1513
01:14:38,430 --> 01:14:42,390
havas la efikon de transformado
ilin floats-- ankoraŭ espereble

1514
01:14:42,390 --> 01:14:43,180
la sama nombro.

1515
01:14:43,180 --> 01:14:45,880
Aŭ ĝi rezultas ke estas io
ni vidos denove post nelonge.

1516
01:14:45,880 --> 01:14:47,170
Vi povus elpeli la numerojn.

1517
01:14:47,170 --> 01:14:49,880
>> Vi povas, uzante ĉi parenthetical
esprimo, oni povas diri,

1518
01:14:49,880 --> 01:14:52,560
hej, komputilo, prenu tiun
10, kiun mi konas estas int.

1519
01:14:52,560 --> 01:14:54,660
Sed traktas ĝin, bonvolu,
kvazaŭ ĝi estas kaleŝego.

1520
01:14:54,660 --> 01:14:56,680
Sed tiu sentas nenecese kompleksa.

1521
01:14:56,680 --> 01:14:59,040
>> Por niaj celoj hodiaŭ,
ni nur laŭvorte

1522
01:14:59,040 --> 01:15:02,700
Fari ilin glitpunktaj valoroj
kun dekuma punkto, kiel tiu.

1523
01:15:02,700 --> 01:15:07,060
Lasu min antaŭeniri kaj rerun, fari
imprecision, bona, dot oblikvo

1524
01:15:07,060 --> 01:15:08,870
imprecision, eniru.

1525
01:15:08,870 --> 01:15:10,990
OK, ni serĉas bonon.

1526
01:15:10,990 --> 01:15:18,194
>> 1 dividita per 10, laŭ mia
Mac tie, estas, ja, 0.100000.

1527
01:15:18,194 --> 01:15:21,360
Nun, mi estis instruita en grado lernejo
devus esti malfinia nombro de 0-aj jaroj.

1528
01:15:21,360 --> 01:15:23,151
Do ni almenaŭ provu
vidi iuj de tiuj.

1529
01:15:23,151 --> 01:15:26,770
Ĝi rezultas ke printf estas iom
amatoro ankoraŭ ol ni estis uzante.

1530
01:15:26,770 --> 01:15:30,890
Ĝi rezultas vi ne devas specifi
nur procento f, aŭ simple procento i.

1531
01:15:30,890 --> 01:15:33,830
Vi povas fakte specifi
iu kontrolo ebloj tie.

1532
01:15:33,830 --> 01:15:36,470
>> Specife, mi tuj
diri, hey, printf,

1533
01:15:36,470 --> 01:15:39,660
fakte montras min 10 dekuma punktoj.

1534
01:15:39,660 --> 01:15:40,820
Do ĝi aspektas iom stranga.

1535
01:15:40,820 --> 01:15:42,845
Sed vi diru procentoj,
streketo kiom nombroj

1536
01:15:42,845 --> 01:15:44,970
vi volas vidi post la
dekuma punkto, kaj tiam f

1537
01:15:44,970 --> 01:15:48,340
por plata, nur ĉar tio estas
kion la dokumentado diras.

1538
01:15:48,340 --> 01:15:50,080
Lasu min antaŭeniri kaj savi tion.

1539
01:15:50,080 --> 01:15:52,460
>> Kaj rimarkos ankaŭ, mi ricevas
laca de retyping aferoj.

1540
01:15:52,460 --> 01:15:55,900
Do mi simple opcio la supren kaj
malsupren sago sur mian ŝlosilojn tie.

1541
01:15:55,900 --> 01:15:58,710
Kaj se mi tenas frapanta supre, Vi
povas vidi ĉiujn komandojn

1542
01:15:58,710 --> 01:16:01,090
ke mi faris, aŭ malĝuste faris.

1543
01:16:01,090 --> 01:16:04,630
>> Kaj mi tuj iros antaŭen nun kaj
ne vere uzas tion, ŝajne.

1544
01:16:04,630 --> 01:16:11,416
Fari imprecision, punkto
oblikvo imprecision-- tiel

1545
01:16:11,416 --> 01:16:13,290
kion mi estis instruita en
lernojaro lernejo kontrolas.

1546
01:16:13,290 --> 01:16:19,010
Eĉ se mi presi ĝin al 10 dekuma
metas ja estas 0,10000.

1547
01:16:19,010 --> 01:16:19,840
Sed vi scias kion?

1548
01:16:19,840 --> 01:16:21,150
>> Ni iru iom avara.

1549
01:16:21,150 --> 01:16:23,990
Diru, kiel montri al mi 55
antaŭ post la dekuma.

1550
01:16:23,990 --> 01:16:26,160
Ni vere preni tiun
plani eksteren kiel spino.

1551
01:16:26,160 --> 01:16:31,170
Lasu min refari ĝin kun ŝminko
imprecision, dot oblikvo, imprecision.

1552
01:16:31,170 --> 01:16:32,390
>> Kaj tie ni iru.

1553
01:16:32,390 --> 01:16:34,420
Via infanaĝo estis mensogo.

1554
01:16:34,420 --> 01:16:48,410
Ŝajne, 1 dividita per 10 estas ja
0.100000000000000005551115123--

1555
01:16:48,410 --> 01:16:49,740
>> Kio okazas?

1556
01:16:49,740 --> 01:16:53,360
Nu, tio rezultas, se vi ia
aspektas sufiĉe en la suba

1557
01:16:53,360 --> 01:16:55,950
reprezento de tiu
nombro, ĝi reale

1558
01:16:55,950 --> 01:17:00,400
ne ekzakte 1/10, aŭ 0.1 kaj
malfinia nombro de nuloj.

1559
01:17:00,400 --> 01:17:01,630
Nun, kial do?

1560
01:17:01,630 --> 01:17:06,250
>> Nu, eĉ se tiu estas simpla
nombro por ni homoj, 1 dividita per 10,

1561
01:17:06,250 --> 01:17:10,910
ĝi estas ankoraŭ unu el malfinie multaj
numeroj kiuj ni povis elpensi.

1562
01:17:10,910 --> 01:17:14,490
Sed komputilo povas nur reprezenti
finie multaj tiel nombroj.

1563
01:17:14,490 --> 01:17:18,710
Do, efektive, kion la
komputilo montras al ni estas ĝia plej proksima

1564
01:17:18,710 --> 01:17:22,940
aproksimado al la nombro
ni volas kredi estas 1/10,

1565
01:17:22,940 --> 01:17:27,760
aŭ vere 0,10000 ad infinitum.

1566
01:17:27,760 --> 01:17:30,425
>> Prefere, tamen, ĉi tiu estas
tiel proksime kiel ĝi povas akiri.

1567
01:17:30,425 --> 01:17:32,300
Kaj cetere, se vi rigardas
sub la kapuĉo,

1568
01:17:32,300 --> 01:17:37,050
kiel ni estas tie rigardante
55 ciferoj post la dekuma,

1569
01:17:37,050 --> 01:17:39,990
ni fakte vidos ke realeco.

1570
01:17:39,990 --> 01:17:42,610
Nun kiel flanken, se vi havas
iam vidis la movie--

1571
01:17:42,610 --> 01:17:45,780
plejparto de vi probable haven't--
sed Superman 3 kelkaj jaroj,

1572
01:17:45,780 --> 01:17:49,500
Richard Pryor esence ekspluatita ĉi
realo en sia entrepreno ŝteli multajn

1573
01:17:49,500 --> 01:17:53,500
de frakcioj kaj frakcioj de pencoj,
ĉar la company-- kiel mi memoras,

1574
01:17:53,500 --> 01:17:57,210
ĝi pasis while-- estis esence
ĵetante ion kiu ne persvadis

1575
01:17:57,210 --> 01:17:58,790
en la nocio de cendoj.

1576
01:17:58,790 --> 01:18:01,480
>> Sed se vi sumigas ĉiuj tiuj
eta, eta, eta nombroj denove,

1577
01:18:01,480 --> 01:18:04,960
kaj denove, kaj denove, vi povas, kiel en
lia kazo, fari bonan kvanton de mono.

1578
01:18:04,960 --> 01:18:08,010
>> Tiu sama ideo estis ŝirita for fare
pli freŝa, sed ankoraŭ nun malnovaj

1579
01:18:08,010 --> 01:18:10,500
filmo, nomita Office Space,
kie la uloj en tiu filmo,

1580
01:18:10,500 --> 01:18:13,501
faris la samon, ŝraŭbas ĝin
tute, finis kun vojo tro multe

1581
01:18:13,501 --> 01:18:14,666
mono en ilia banka konto.

1582
01:18:14,666 --> 01:18:15,800
Ĉio estis tre suspektema.

1583
01:18:15,800 --> 01:18:19,290
Sed fine de la tago,
imprecision estas ĉirkaŭ ni.

1584
01:18:19,290 --> 01:18:22,240
>> Kaj, ankaŭ, povas esti
timige la kazo.

1585
01:18:22,240 --> 01:18:25,590
Ĝi rezultas ke Superman 3
kaj Office Space flanken, tie

1586
01:18:25,590 --> 01:18:28,460
povas esti iu tre reala
mondo ramificaciones

1587
01:18:28,460 --> 01:18:32,290
de la realaĵoj de malpreciza
reprezentado de datumoj

1588
01:18:32,290 --> 01:18:34,770
ke eĉ ni homoj al
hodiaux ne bezone

1589
01:18:34,770 --> 01:18:38,230
kompreni same kiel ni devus,
aŭ memori kiel ofte kiel ni devus.

1590
01:18:38,230 --> 01:18:42,950
Kaj, efektive, la jenaj klipo estas
de rigardi iuj tre reala mondo

1591
01:18:42,950 --> 01:18:47,730
ramificaciones de kio okazas se vi
ne estimas la imprecision ke

1592
01:18:47,730 --> 01:18:50,065
povas okazi en nombroj reprezento.

1593
01:18:50,065 --> 01:18:51,300
>> [VIDEO reprodukto]

1594
01:18:51,300 --> 01:18:55,620
>> -Computers, Ni ĉiuj venis akcepti
la ofte frustrante problemoj kiuj

1595
01:18:55,620 --> 01:19:00,310
akompanos them-- cimojn, virusoj,
kaj programaro glitches,

1596
01:19:00,310 --> 01:19:03,130
por malgrandaj prezoj pagi
por la oportuneco.

1597
01:19:03,130 --> 01:19:07,800
Sed en alta teknologio kaj alta rapido
milita kaj spaca programo aplikoj,

1598
01:19:07,800 --> 01:19:12,800
la plej malgranda problemo povas
glorata en katastrofo.

1599
01:19:12,800 --> 01:19:18,900
>> Junio ​​4, 1996, sciencistoj preparita
ĵeti senpilotaj Ariane 5 raketo.

1600
01:19:18,900 --> 01:19:21,220
Ĝi portis sciencajn
satelitoj desegnita

1601
01:19:21,220 --> 01:19:24,600
establi precize kiel la
geomagnetiko interagas

1602
01:19:24,600 --> 01:19:27,410
kun sunaj ventoj.

1603
01:19:27,410 --> 01:19:30,800
La raketo estis konstruita por
la Eŭropa Spaca Agentejo,

1604
01:19:30,800 --> 01:19:34,370
kaj levis gxin el lia facileco
sur la marbordo de Franca Gviano.

1605
01:19:34,370 --> 01:19:37,540
>> Aýdis pri 37 sekundoj en
la flugo, ili unue

1606
01:19:37,540 --> 01:19:39,270
rimarkis ion iris malĝuste.

1607
01:19:39,270 --> 01:19:42,250
La toberas estis swiveling en
maniero ili vere ne devus.

1608
01:19:42,250 --> 01:19:46,580
Ĉirkaŭ 40 sekundoj en la flugo,
klare, la veturilo estis en premo.

1609
01:19:46,580 --> 01:19:48,850
>> Kaj tio estas kiam ili faris
decido detrui ĝin.

1610
01:19:48,850 --> 01:19:52,780
La gamo sekureco oficiro, kun
terura intestoj, premis la butonon,

1611
01:19:52,780 --> 01:19:58,150
eksplodigis la raketo, antaŭ ol povis
iĝi danĝero por la publika sekureco.

1612
01:19:58,150 --> 01:20:01,060
>> -tio Cxi estis la knabino
vojaĝo de la Ariane 5.

1613
01:20:01,060 --> 01:20:03,960
Kaj lia detruo prenis
meti pro difekto

1614
01:20:03,960 --> 01:20:05,822
enigita en la raketo programaro.

1615
01:20:05,822 --> 01:20:08,280
-La Problemo de la Ariane estis
ke estas kelkaj kiuj

1616
01:20:08,280 --> 01:20:10,600
postulata 64 bitojn por esprimi.

1617
01:20:10,600 --> 01:20:13,590
Kaj ili volis konverti
ĝin al 16-bita nombro.

1618
01:20:13,590 --> 01:20:15,610
Ili supozis ke la
nombro neniam iranta

1619
01:20:15,610 --> 01:20:20,980
esti tre grandaj, ke la plejparto de tiuj
ciferoj en 64-bita nombro estis nuloj.

1620
01:20:20,980 --> 01:20:22,440
Ili eraris.

1621
01:20:22,440 --> 01:20:25,060
>> -La Nekapablo de unu
programaro akcepti

1622
01:20:25,060 --> 01:20:29,510
la speco de nombro generita per
alia estis ĉe la radiko de la fiasko.

1623
01:20:29,510 --> 01:20:34,350
Softvarigo fariĝis
tre peniga parto de nova teknologio.

1624
01:20:34,350 --> 01:20:38,140
La Ariane raketo estis tre
sukcesa, tiel de la programaro

1625
01:20:38,140 --> 01:20:41,550
kreita por ĝi estis ankaŭ
uzita en la Ariane 5.

1626
01:20:41,550 --> 01:20:47,940
>> -La Baza problemo estis ke la Ariane
5 estis pli rapida, akcelis rapide.

1627
01:20:47,940 --> 01:20:51,450
Kaj la programaro ne havis
konsistigis tion.

1628
01:20:51,450 --> 01:20:55,060
>> -La Detruo de la raketo
Estis grandega financa katastrofo,

1629
01:20:55,060 --> 01:20:58,790
ĉiuj pro minuto programaro eraro.

1630
01:20:58,790 --> 01:21:01,210
Sed tio ne estis la unua
tempo datumoj konvertiĝo problemoj

1631
01:21:01,210 --> 01:21:04,820
estis plagita moderna raketo teknologio.

1632
01:21:04,820 --> 01:21:08,050
>> -En 1991, kun la komenco
de la unua Golfa Milito,

1633
01:21:08,050 --> 01:21:10,570
la Patriot Missile
spertis similan specon

1634
01:21:10,570 --> 01:21:12,800
de nombro konvertiĝo problemo.

1635
01:21:12,800 --> 01:21:16,090
Kaj kiel rezulto, 28 personoj,
28 usonaj soldatoj,

1636
01:21:16,090 --> 01:21:19,080
mortis, kaj pri
100 aliaj vundis,

1637
01:21:19,080 --> 01:21:22,780
kiam la Patriot, kiu estis supozita
protekti kontraŭ alvenantaj Scuds,

1638
01:21:22,780 --> 01:21:25,830
malsukcesis pafi misilo.

1639
01:21:25,830 --> 01:21:31,670
>> -Kiam Irako invadis Kuvajton kaj Ameriko
lanĉis Dezerto Ŝtormo en frua 1991,

1640
01:21:31,670 --> 01:21:35,780
Patriot misilon piloj estis deplojitaj
protekti Saŭda Arabio kaj Israelo

1641
01:21:35,780 --> 01:21:39,230
de irakaj Scud misilon atakoj.

1642
01:21:39,230 --> 01:21:43,810
The Patriot estas usona duona atingo
surfaco al aero sistemo fabrikita

1643
01:21:43,810 --> 01:21:45,770
de la Raytheon kompanio.

1644
01:21:45,770 --> 01:21:52,340
>> -la Grandeco de la Patriot interceptor
mem estas pri malglate 20 futojn longa.

1645
01:21:52,340 --> 01:21:55,230
Kaj ĝi pezas proksimume 2,000 funtojn.

1646
01:21:55,230 --> 01:21:59,320
Kaj ĝi portas kapon de ĉirkaŭ,
Mi kredas ke estas krude 150 funtoj.

1647
01:21:59,320 --> 01:22:03,930
Kaj la kapo sin estas
alta eksploda kiu

1648
01:22:03,930 --> 01:22:07,330
havas fragmentojn ĉirkaŭe.

1649
01:22:07,330 --> 01:22:11,680
La carcasa de la kapo estas
desegnita por agi kiel Buckshot.

1650
01:22:11,680 --> 01:22:14,110
>> -La Misiloj estas portitaj
kvar po ujo,

1651
01:22:14,110 --> 01:22:17,130
kaj estas transportitaj per duone trailer.

1652
01:22:17,130 --> 01:22:24,930
>> -la Patriot kontraŭ misiloj sistemo
superas almenaŭ 20 jaroj nun.

1653
01:22:24,930 --> 01:22:28,420
Ĝi estis origine dizajnita
kiel aero defendo misilo

1654
01:22:28,420 --> 01:22:30,720
pafi malsupren aviadiloj malamikoj.

1655
01:22:30,720 --> 01:22:34,500
En la unua Golfa Milito,
Kiam tiu milito venis kune,

1656
01:22:34,500 --> 01:22:39,745
la Armeo volis uzi ĝin
malkonstrui Scuds, ne aviadilojn.

1657
01:22:39,745 --> 01:22:43,620
>> La iraka aerarmeo estis
ne tiom de problemo.

1658
01:22:43,620 --> 01:22:46,670
Sed la Armeo estis maltrankviligita Scuds.

1659
01:22:46,670 --> 01:22:50,170
Kaj tiel ili provis
ĝisdatigi la Patriot.

1660
01:22:50,170 --> 01:22:52,800
>> -Intercepting Malamiko
misilo vojaĝante al Mach 5

1661
01:22:52,800 --> 01:22:55,830
tuj estos defianta sufiĉas.

1662
01:22:55,830 --> 01:22:58,490
Sed kiam la Patriot
estis fulmtransportita en servon,

1663
01:22:58,490 --> 01:23:02,860
la Armeo ne estis konscia de
Iraka modifo Kreinto

1664
01:23:02,860 --> 01:23:05,930
ilia Scuds preskaŭ neeble batis.

1665
01:23:05,930 --> 01:23:10,740
>> -Kio Okazis estas la Scuds ke
estis eniranta estis malstabilaj.

1666
01:23:10,740 --> 01:23:11,692
Ili wobbling.

1667
01:23:11,692 --> 01:23:14,910
La kialo por tio estis
la irakanoj, en ordo

1668
01:23:14,910 --> 01:23:18,280
akiri 600 kilometroj
el 300 kilometro

1669
01:23:18,280 --> 01:23:21,700
gamo misilo, prenis pezo
el la fronto kapo.

1670
01:23:21,700 --> 01:23:23,390
Ili faris la kapo pli malpeza.

1671
01:23:23,390 --> 01:23:27,330
>> Do nun la Patriot estas
provas veni ĉe la Scud.

1672
01:23:27,330 --> 01:23:30,230
Kaj plejparto de la tempo, la
abrumadora plimulto de la tempo,

1673
01:23:30,230 --> 01:23:32,940
estus nur flugas per la Scud.

1674
01:23:32,940 --> 01:23:37,260
Iam la Patriot sistemo operatoroj
realigis la Patriot missed lia celo,

1675
01:23:37,260 --> 01:23:41,690
ili detonado la Patriot la kapo
eviti eblajn viktimojn se

1676
01:23:41,690 --> 01:23:44,570
estis permesita fali al la grundo.

1677
01:23:44,570 --> 01:23:48,790
>> -Tio Estis kio plej homoj vidis,
tiuj grandaj buloj de fajro en la ĉielo,

1678
01:23:48,790 --> 01:23:54,550
kaj miskomprenita kiel
interkaptas de Scud kapoj.

1679
01:23:54,550 --> 01:23:56,630
>> -Although Nokte
ĉieloj, Patriots aperis

1680
01:23:56,630 --> 01:24:00,370
esti sukcese
detruante Scuds, ĉe Dhahran,

1681
01:24:00,370 --> 01:24:03,360
tie povus esti eraro
pri ĝia efikeco.

1682
01:24:03,360 --> 01:24:07,970
Tie, la Patriota la radaro sistemo
miskalkulis venonta Scud,

1683
01:24:07,970 --> 01:24:10,721
kaj neniam ĵetis pro
al programaro difekto.

1684
01:24:10,721 --> 01:24:14,090

1685
01:24:14,090 --> 01:24:18,940
Estis la israelanoj kiuj unue malkovris
ke la pli longa la sistemo estis,

1686
01:24:18,940 --> 01:24:22,690
la pli granda la tempo diferenco
igis, pro horloĝo enigita

1687
01:24:22,690 --> 01:24:24,810
en la sistemo komputilo.

1688
01:24:24,810 --> 01:24:28,210
>> -About Du semajnoj antaŭe
la tragedio en Dhahran,

1689
01:24:28,210 --> 01:24:30,770
la israelanoj raportoj
la Defendo Fako

1690
01:24:30,770 --> 01:24:32,590
ke la sistemo perdis tempon.

1691
01:24:32,590 --> 01:24:35,360
Post ĉirkaŭ ok horoj aŭ kurado,
ili rimarkis ke la sistemo

1692
01:24:35,360 --> 01:24:37,720
iĝis rimarkinde malpli precizaj.

1693
01:24:37,720 --> 01:24:41,900
La Defendo Fako Respondis
rakontanta ĉiuj la Patriot pilojn

1694
01:24:41,900 --> 01:24:44,950
por ne lasi la sistemoj
dum longa tempo.

1695
01:24:44,950 --> 01:24:49,160
Ili neniam diris kio longe was--
ok horoj, 10 horoj, 1.000 horojn.

1696
01:24:49,160 --> 01:24:51,360
Neniu sciis.

1697
01:24:51,360 --> 01:24:53,380
>> -la Patriot pilo
postenigitaj ĉe la kazerno

1698
01:24:53,380 --> 01:24:58,350
ĉe Dhahran kaj lia misa interna
horloĝo estis sur pli ol 100 horojn

1699
01:24:58,350 --> 01:25:01,670
sur la nokto de februaro 25a.

1700
01:25:01,670 --> 01:25:05,917
>> -ĝi Spurita tempo al precizeco
de ĉirkaŭ dekono de sekundo.

1701
01:25:05,917 --> 01:25:08,000
Nun dekono de sekundo
Estas interesa nombro,

1702
01:25:08,000 --> 01:25:11,920
ĉar ĝi ne povas esti esprimita
en duuma ekzakte, kion

1703
01:25:11,920 --> 01:25:16,820
signifas ĝi ne povas esti esprimita akurate
en ajna moderna cifereca komputilo.

1704
01:25:16,820 --> 01:25:18,540
Estas malfacile kredi.

1705
01:25:18,540 --> 01:25:21,210
>> Sed uzi tion kiel ekzemplon.

1706
01:25:21,210 --> 01:25:23,540
Ni prenu la nombron unu triono.

1707
01:25:23,540 --> 01:25:27,350
Triono ne povas esti
esprimita en dekuma precize.

1708
01:25:27,350 --> 01:25:32,080
Triono estas 0,333
okazas por malfinio.

1709
01:25:32,080 --> 01:25:36,480
>> Ne estas maniero por fari tion kun
absoluta precizeco en dekuma.

1710
01:25:36,480 --> 01:25:39,560
Tio estas ĝuste la speco de problemo
kiu okazis en la Patriot.

1711
01:25:39,560 --> 01:25:44,100
La pli longa la sistemo kuris, la
malbona la tempo eraro fariĝis.

1712
01:25:44,100 --> 01:25:48,890
>> -After 100 horoj da operacio, la
eraro en tempo estis nur proksimume triono

1713
01:25:48,890 --> 01:25:50,600
de sekundo.

1714
01:25:50,600 --> 01:25:54,210
Sed en terminoj de celado
misilo vojaĝante al Mach 5,

1715
01:25:54,210 --> 01:25:58,710
ĝi rezultis en sekvado
eraro de super 600 metroj.

1716
01:25:58,710 --> 01:26:02,120
Estus fatala eraro
por la soldatoj sur kio

1717
01:26:02,120 --> 01:26:08,940
okazis estas Scud ĵeto estis
detektita de frua Averto satelitoj

1718
01:26:08,940 --> 01:26:12,860
kaj ili sciis ke la Scud estis
eniranta ilian ĝeneralan direkton.

1719
01:26:12,860 --> 01:26:15,320
Ili ne sciis kie venas.

1720
01:26:15,320 --> 01:26:18,250
>> -ĝi Estis nun ĝis la radaro
komponanto de la Patriot sistemo

1721
01:26:18,250 --> 01:26:23,190
defendanta Dhahran lokalizi kaj teni
trako de la venonta malamiko misilo.

1722
01:26:23,190 --> 01:26:24,609
>> -La Radaro estis tre inteligenta.

1723
01:26:24,609 --> 01:26:26,650
Estus vere spuri
la pozicio de la Scud,

1724
01:26:26,650 --> 01:26:30,350
kaj tiam antaŭdiri kie probable
estus la proksima tempo la radaro sendis

1725
01:26:30,350 --> 01:26:31,420
premas eksteren.

1726
01:26:31,420 --> 01:26:33,110
Kiu estis nomata gamo pordego.

1727
01:26:33,110 --> 01:26:37,660
>> -Then, Tuj la Patriot
Decidas sufiĉa tempo havas

1728
01:26:37,660 --> 01:26:42,450
Pasis reiri kaj kontroli la venonta
loko por ĉi detektita objekto,

1729
01:26:42,450 --> 01:26:43,600
ĝi superas.

1730
01:26:43,600 --> 01:26:48,650
Do kiam reiris al la malĝusta
loko, ĝi tiam vidas neniun objekton.

1731
01:26:48,650 --> 01:26:52,160
Kaj ĝi decidas ke forestas
objekto, ĝi estis falsa detekto,

1732
01:26:52,160 --> 01:26:53,930
kaj delasas la spuro.

1733
01:26:53,930 --> 01:26:57,030
>> -La Venonta Scud malaperis
de la radaro ekrano.

1734
01:26:57,030 --> 01:27:00,260
Kaj sekundoj poste, ĝi
brufermis en la fortikajxon.

1735
01:27:00,260 --> 01:27:06,150
La Scud mortigis 28 kaj estis la lasta
oni pafis dum la unua Golfa Milito.

1736
01:27:06,150 --> 01:27:11,960
>> Tragike, la ĝisdatigita programaro
alvenis al Dhahran la sekva tago.

1737
01:27:11,960 --> 01:27:14,930
La programaro difekto estis
estis riparita, fermante

1738
01:27:14,930 --> 01:27:19,806
unu ĉapitro en la tumulta
historio de la Patriot misilo.

1739
01:27:19,806 --> 01:27:20,729
>> [VIDEO reprodukto]

1740
01:27:20,729 --> 01:27:23,520
DAVID J. Malan: Do tiu estas ĉiuj
diri ke tiuj aferoj de troplenigxis

1741
01:27:23,520 --> 01:27:25,860
kaj imprecision estas ĉiuj tro reala.

1742
01:27:25,860 --> 01:27:26,920
Do kiel ni alvenos?

1743
01:27:26,920 --> 01:27:28,895
Ni komencis kun nur parolas printf.

1744
01:27:28,895 --> 01:27:31,270
Denove, tiu funkcio kiu
presas ion al la ekrano,

1745
01:27:31,270 --> 01:27:33,450
kaj ni enkondukis poste
kelkaj aliaj funkcioj

1746
01:27:33,450 --> 01:27:34,945
de la tn CS50 biblioteko.

1747
01:27:34,945 --> 01:27:36,910
Kaj ni daŭre
vidi tiujn gxustatempe.

1748
01:27:36,910 --> 01:27:40,760
Kaj ni, precipe, uzata get kordoj,
kaj akiri int, kaj nun ankaŭ akiri kaleŝego,

1749
01:27:40,760 --> 01:27:44,410
kaj ankoraŭ aliaj ankoraŭ ni renkontas
kaj uzi nin antaux longe.

1750
01:27:44,410 --> 01:27:47,220
>> Sed foje, havas
ni jam vidis bezonon

1751
01:27:47,220 --> 01:27:50,520
stoki kion tiuj funkcioj manon?

1752
01:27:50,520 --> 01:27:52,920
Ili transdoni nin reen ĉenon,
aŭ int aŭ kaleŝego.

1753
01:27:52,920 --> 01:27:56,070
Kaj kelkfoje ni devas meti tiun
ŝnuro, aŭ int, aŭ kaleŝego, ie.

1754
01:27:56,070 --> 01:28:00,100
>> Kaj stoki tion, memoras ĝuste
kiel en Scratch, ni havas variabloj.

1755
01:28:00,100 --> 01:28:03,260
Sed malkiel en Scratch,
en C ni havas faktan tipoj

1756
01:28:03,260 --> 01:28:05,530
de variables-- datumoj
tipoj, pli generally--

1757
01:28:05,530 --> 01:28:08,640
inter ili, ŝnuro, int, a
flosi, kaj tiuj aliaj ankoraŭ.

1758
01:28:08,640 --> 01:28:12,321
>> Kaj tiel, kiam ni deklari variablojn en C,
ni devos deklari nian datumtipoj.

1759
01:28:12,321 --> 01:28:14,820
Tio ne estas io ni
devas fari poste en la semestro

1760
01:28:14,820 --> 01:28:16,810
kiel ni transiro al aliaj lingvoj.

1761
01:28:16,810 --> 01:28:19,610
Sed nuntempe, ni bezonas
al priori anticipe,

1762
01:28:19,610 --> 01:28:24,370
klarigi al la komputilo kion tipo
de ŝanĝiĝema ni volas doni al ni.

1763
01:28:24,370 --> 01:28:27,290
>> Nun dume, por presi
tiuj specoj de datumtipoj,

1764
01:28:27,290 --> 01:28:29,570
ni devas diri printf kion atendi.

1765
01:28:29,570 --> 01:28:32,450
Kaj ni vidis procento s por kordoj,
kaj procento i por entjeroj,

1766
01:28:32,450 --> 01:28:33,790
kaj kelkaj aliaj jam.

1767
01:28:33,790 --> 01:28:37,237
Kaj tiuj estas simple postuloj
por la vida prezento

1768
01:28:37,237 --> 01:28:38,070
de tiu informo.

1769
01:28:38,070 --> 01:28:42,080
>> Kaj ĉiu el tiuj povas fakte esti
parametrigita aŭ tweaked iel,

1770
01:28:42,080 --> 01:28:45,370
se vi volas progresigi kontrolo
la tipo de produktado kiu vi ricevas.

1771
01:28:45,370 --> 01:28:49,604
Kaj, fakte, ĝi rezultas ke ne nur
estas tie backslash n por nova linio.

1772
01:28:49,604 --> 01:28:52,520
Estas io alia nomita backslash
r por tirilo, kiu

1773
01:28:52,520 --> 01:28:54,360
estas pli parenca al
malnova lernejo tajpilon,

1774
01:28:54,360 --> 01:28:57,690
kaj ankaŭ Vindozo uzita por multaj jaroj.

1775
01:28:57,690 --> 01:28:59,690
>> Ekzistas backslash t por langetoj.

1776
01:28:59,690 --> 01:29:03,170
Rezultas, ke se vi volas
duobla citaĵo ene de kordo,

1777
01:29:03,170 --> 01:29:05,000
revokon, ke ni uzis
citilon duobla

1778
01:29:05,000 --> 01:29:07,900
citaĵo maldekstre kaj dekstre
finas de nia kordoj tiom.

1779
01:29:07,900 --> 01:29:09,420
Kiu ŝajnas konfuzi aferoj.

1780
01:29:09,420 --> 01:29:12,503
>> Se vi volas meti citilon en
la mezo de ĉenon kaj ja

1781
01:29:12,503 --> 01:29:13,670
ĝi estas konfuza vidi.

1782
01:29:13,670 --> 01:29:17,120
Kaj tial vi devas eskapi, do al
paroli, duobla citaĵo kun io

1783
01:29:17,120 --> 01:29:18,860
kiel, laŭvorte, backslash citilon.

1784
01:29:18,860 --> 01:29:20,230
Kaj estas kelkaj aliaj ankoraŭ.

1785
01:29:20,230 --> 01:29:24,540
Kaj ni vidos pli de tiuj
en fakta uzo antaŭ longe.

1786
01:29:24,540 --> 01:29:27,930
>> Do ni nun transiro de
datumoj, kaj reprezento,

1787
01:29:27,930 --> 01:29:30,820
kaj aritmetikaj operatoroj, ĉiuj
kio donis al ni konstruaĵo

1788
01:29:30,820 --> 01:29:32,070
blokoj kun kiu ludi.

1789
01:29:32,070 --> 01:29:34,481
Sed nun ni vere donas
ni la reston de la vortaro

1790
01:29:34,481 --> 01:29:36,230
ke ni jam havis
lasta semajno kun Scratch

1791
01:29:36,230 --> 01:29:39,350
prenante rigardu alian
konstrukcioj en C-- ne ĉiuj.

1792
01:29:39,350 --> 01:29:41,680
Sed la ideoj ni
pri vidi vere nur

1793
01:29:41,680 --> 01:29:45,610
elstari la traduko de
unu lingvo Scratch, por alia, C.

1794
01:29:45,610 --> 01:29:48,470
>> Kaj dum tempo, ni reprenos
pli iloj por nia ilaro,

1795
01:29:48,470 --> 01:29:49,820
tiel diri, sintakse.

1796
01:29:49,820 --> 01:29:54,190
Kaj, efektive, vi vidos ke la ideoj
nun iom familiara de lasta semajno.

1797
01:29:54,190 --> 01:29:55,200
Do ni faru ĉi.

1798
01:29:55,200 --> 01:29:58,870
>> Ni iru antaŭen kaj vipi programon
kiu fakte uzas iuj esprimoj,

1799
01:29:58,870 --> 01:30:00,720
Bulea esprimo.

1800
01:30:00,720 --> 01:30:02,810
Lasu min antaŭeniri tie
kaj krei novan dosieron.

1801
01:30:02,810 --> 01:30:06,090
Mi vokos ĉi condition.c.

1802
01:30:06,090 --> 01:30:09,350
>> Lasu min antaŭeniri kaj
inkluzivas la CS50 biblioteko.

1803
01:30:09,350 --> 01:30:12,640
Kaj lasu min antaŭeniri kaj inkluzivi
norma io.h por niaj funkcioj,

1804
01:30:12,640 --> 01:30:14,690
kaj printf, kaj pli respektive.

1805
01:30:14,690 --> 01:30:18,900
Mi donos al mi mem ke kutimaĵo de
int ĉefa malplenon, kies klarigo ni

1806
01:30:18,900 --> 01:30:20,360
revenu al la estonteco.

1807
01:30:20,360 --> 01:30:23,820
>> Nun lasu min antaŭeniri kaj doni
mi int tra get int.

1808
01:30:23,820 --> 01:30:25,970
Tiam lasu min antaŭeniri kaj fari tion.

1809
01:30:25,970 --> 01:30:30,150
Mi volas diri, se mi estas less-- ni
distingi inter pozitiva, negativa,

1810
01:30:30,150 --> 01:30:31,260
aŭ nul valoroj.

1811
01:30:31,260 --> 01:30:36,630
>> Do se mi estas malpli ol nulo, mi
nur havas tiu programo simple diri,

1812
01:30:36,630 --> 01:30:42,370
negativa, backslash n, alie
se i estas pli granda ol nulo.

1813
01:30:42,370 --> 01:30:47,030
Nun mi kompreneble volis diri
printf pozitiva, backslash n.

1814
01:30:47,030 --> 01:30:50,690
Kaj tiam alia if-- mi povus fari tion.

1815
01:30:50,690 --> 01:30:53,410
>> Mi povus fari se i egalas 0.

1816
01:30:53,410 --> 01:30:55,840
Sed mi konvinkos je
Almenaŭ unu eraro jam.

1817
01:30:55,840 --> 01:30:59,480
Memoru ke la egalsigno estas
ne egalaj, kiel ni homoj scias ĝin.

1818
01:30:59,480 --> 01:31:01,010
>> Sed estas la asigno operatoro.

1819
01:31:01,010 --> 01:31:05,640
Kaj ni ne volas preni 0 sur la
dekstra kaj metis ĝin en I maldekstre.

1820
01:31:05,640 --> 01:31:11,810
Tiel eviti tiun konfuzon, aŭ
eble misuzo de la egala signo,

1821
01:31:11,810 --> 01:31:14,740
homoj decidis iuj jaroj
ke en multaj programlingvoj

1822
01:31:14,740 --> 01:31:18,000
kiam vi volas kontroli egaleco
inter la maldekstra kaj la dekstra,

1823
01:31:18,000 --> 01:31:19,635
vi efektive uzas egalas egaluloj.

1824
01:31:19,635 --> 01:31:21,010
Do vi frapis la egala signo dufoje.

1825
01:31:21,010 --> 01:31:25,600
Kiam vi deziras asigni de dekstra
al maldekstra, vi uzas solan egala signo.

1826
01:31:25,600 --> 01:31:29,360
Do ni povus fari this-- alian
se i egalas egalas nulo.

1827
01:31:29,360 --> 01:31:31,710
>> Mi povus tiam iru
malfermu miajn krispa krampoj,

1828
01:31:31,710 --> 01:31:36,087
kaj diru: printf 0, backslash n, farita.

1829
01:31:36,087 --> 01:31:38,170
Sed memoru kiom tiuj
forkoj en la vojo povas labori.

1830
01:31:38,170 --> 01:31:39,836
Kaj, efektive, nur pensas pri la logiko.

1831
01:31:39,836 --> 01:31:41,510
i estas nombro.

1832
01:31:41,510 --> 01:31:43,320
Ĝi estas entjero, specife.

1833
01:31:43,320 --> 01:31:48,600
Kaj tio signifas ke tuj estos malpli
ol 0, aŭ pli granda ol 0, aŭ 0.

1834
01:31:48,600 --> 01:31:51,600
Do tie estas ia tiu
implicita defaŭlta kazo.

1835
01:31:51,600 --> 01:31:54,920
>> Kaj tiel ni povus, ĵus ŝatas
Nulo, malhavi la alian se,

1836
01:31:54,920 --> 01:31:55,747
kaj simple diri alie.

1837
01:31:55,747 --> 01:31:57,830
Logike, se vi
programisto scias ke estas nur

1838
01:31:57,830 --> 01:32:01,635
tri siteloj en kiujn oni
scenaro povas fall-- la unua,

1839
01:32:01,635 --> 01:32:03,510
la dua, aŭ tria
en ĉi case-- ne

1840
01:32:03,510 --> 01:32:07,100
ĝeni aldonante plian precizecon
kaj la plia logiko tie.

1841
01:32:07,100 --> 01:32:09,690
Nur antaŭeniri kun la
defaŭlta kazo tie de alia.

1842
01:32:09,690 --> 01:32:11,950
>> Nun, ni iru antaŭen
post savi tion, faru

1843
01:32:11,950 --> 01:32:15,760
kondiĉoj dot oblikvo conditions--
Ne granda uzantinterfaco,

1844
01:32:15,760 --> 01:32:18,914
ĉar mi ne instigante la
uzanto, kiel mi menciis antaŭe.

1845
01:32:18,914 --> 01:32:19,580
Sed tio estas bone.

1846
01:32:19,580 --> 01:32:20,454
Ni observu ĝin simpla.

1847
01:32:20,454 --> 01:32:21,890
Ni provu la numero 42.

1848
01:32:21,890 --> 01:32:23,240
Kaj tio estas pozitiva.

1849
01:32:23,240 --> 01:32:26,120
Ni provu la nombro
negativa 42, negativa.

1850
01:32:26,120 --> 01:32:28,244
>> Ni provu la valoro 0.

1851
01:32:28,244 --> 01:32:29,160
Kaj, efektive, ĝi funkcias.

1852
01:32:29,160 --> 01:32:33,900
Nun vi vidos kun problemoj antaŭe
longaj, testado aferoj trifoje,

1853
01:32:33,900 --> 01:32:34,980
probable ne sufiĉa.

1854
01:32:34,980 --> 01:32:37,438
Vi probable volas testi iuj
grandaj nombroj, iuj malgrandaj

1855
01:32:37,438 --> 01:32:40,520
nombroj, iu angulo kazoj, kiel
ni venis por priskribi ilin.

1856
01:32:40,520 --> 01:32:42,500
>> Sed nuntempe, tiu estas
sufiĉe simpla programo.

1857
01:32:42,500 --> 01:32:45,160
Kaj mi estas certa, logike,
ke ĝi falas en tri kazoj.

1858
01:32:45,160 --> 01:32:49,360
Kaj cetere, eĉ se ni nur
temigis la potencialon downsides

1859
01:32:49,360 --> 01:32:53,480
de imprecision rapide, en
realaĵo kie multaj el CS50 la problemojn,

1860
01:32:53,480 --> 01:32:56,000
ni ne tuj maltrankviliĝu
pri la tuta tempo,

1861
01:32:56,000 --> 01:32:59,050
tiuj aferoj de overflow kaj
imprecision, ĉar, fakte, en C,

1862
01:32:59,050 --> 01:33:01,889
ĝi estas fakte ne tiom
facile eviti tion.

1863
01:33:01,889 --> 01:33:04,180
Se vi volas rakonti ĝis
granda kaj pli granda, kaj pli granda,

1864
01:33:04,180 --> 01:33:07,510
rezultas ekzistas teknikoj vi
povas uzi, ofte engaĝante aferoj alvokis

1865
01:33:07,510 --> 01:33:11,240
bibliotekoj, kolektoj de kodo, ke
aliaj homoj skribis ke vi povas uzi,

1866
01:33:11,240 --> 01:33:13,910
kaj aliaj lingvoj kiel
Java kaj aliaj, reale

1867
01:33:13,910 --> 01:33:15,800
fari ĝin multe pli facile
kalkuli eĉ pli altaj.

1868
01:33:15,800 --> 01:33:19,810
Do ĝi vere estas iuj de ĉi tiuj danĝeroj
funkcio de la lingvo vi uzas.

1869
01:33:19,810 --> 01:33:22,710
Kaj en la venontaj semajnoj, ni instruos vin
vidu kiom danĝeraj C vere

1870
01:33:22,710 --> 01:33:24,950
povas esti se vi ne uzas ĝin taŭge.

1871
01:33:24,950 --> 01:33:27,610
Sed de tie, kaj kun
Python, kaj JavaScript, estos

1872
01:33:27,610 --> 01:33:32,620
ni mantelo sur kelkaj aldonaj protektoj,
kaj kuri pli malmultaj de tiuj riskoj.

1873
01:33:32,620 --> 01:33:35,820
>> Do ni faras iom pli
Interesa logiko en nia programo.

1874
01:33:35,820 --> 01:33:39,110
Do lasu min antaŭeniri kaj krei
programo nomata Logika

1875
01:33:39,110 --> 01:33:43,804
nur do mi povas ludi kun iu
fakta logiko, logical.c.

1876
01:33:43,804 --> 01:33:46,870
Mi nur kopiu kaj algluu iun
kodo de antaŭaj do mi reiros

1877
01:33:46,870 --> 01:33:49,950
al tiu bela deirpunkto.

1878
01:33:49,950 --> 01:33:53,980
>> Lasu min ĉi tempo faras char C. mi
tuj donu al li nomon de C

1879
01:33:53,980 --> 01:33:58,510
nur ĉar ĝi estas konvencia,
akiri karaktero de la uzanto.

1880
01:33:58,510 --> 01:34:00,730
Kaj ni ŝajnigi kiel
Mi efektivigado parto

1881
01:34:00,730 --> 01:34:04,130
de tiu Rm programo, la forigu
programo antaŭ tio instigis la uzanto

1882
01:34:04,130 --> 01:34:05,400
forigi dosieron.

1883
01:34:05,400 --> 01:34:06,750
Kiel ni faru tion?

1884
01:34:06,750 --> 01:34:11,090
>> Mi volas diri, se C egalas
egaluloj, citaĵo unquote,

1885
01:34:11,090 --> 01:34:16,304
y, tiam mi tuj supozi
ke la uzanto elektis jes.

1886
01:34:16,304 --> 01:34:17,470
Mi simple tuj presi jes.

1887
01:34:17,470 --> 01:34:19,440
Se ĝi reale skribi
la forigo programo,

1888
01:34:19,440 --> 01:34:21,420
ni povus forigi la dosieron
kun pli linioj de kodo.

1889
01:34:21,420 --> 01:34:22,461
Sed ni observu ĝin simpla.

1890
01:34:22,461 --> 01:34:25,950

1891
01:34:25,950 --> 01:34:31,250
>> Alie se c egalas egalas n--
kaj nun ĉi tie, mi tuj diru,

1892
01:34:31,250 --> 01:34:32,980
la uzanto devas esti signifita ne.

1893
01:34:32,980 --> 01:34:34,360
Kaj tiam alian, vi scias kion?

1894
01:34:34,360 --> 01:34:36,200
Mi ne scias kion alian
la uzanto tuj tajpi.

1895
01:34:36,200 --> 01:34:38,533
Do mi simple volis diri ke
ke estas eraro, kio ajn

1896
01:34:38,533 --> 01:34:40,070
li aŭ ŝi vere tajpita.

1897
01:34:40,070 --> 01:34:41,180
>> Do kio okazas ĉi tie?

1898
01:34:41,180 --> 01:34:44,530
Estas fundamenta diferenco
kontre kion mi faris en la pasinteco.

1899
01:34:44,530 --> 01:34:49,300
Citiloj, citiloj, duobla
citiloj, kaj, tamen, unuopaj citiloj,

1900
01:34:49,300 --> 01:34:50,170
sola citaĵoj.

1901
01:34:50,170 --> 01:34:52,860
Rezultas en C, ke kiam
vi volas skribi kordo,

1902
01:34:52,860 --> 01:34:56,680
vi uzas duoblan citaĵoj, samkiel ni havas
estis uzante ĉiu ĉi tiu tempo kun printf.

1903
01:34:56,680 --> 01:35:02,030
>> Sed se vi volas pritrakti nur
sola karaktero, tn char,

1904
01:35:02,030 --> 01:35:03,780
tiam vi efektive uzas solan citaĵoj.

1905
01:35:03,780 --> 01:35:05,450
Tiuj el vi kiuj jam programita
antaŭe, vi eble ne havas

1906
01:35:05,450 --> 01:35:07,850
devis zorgi pri tio
distingo en iuj lingvoj.

1907
01:35:07,850 --> 01:35:09,450
En C, gravas.

1908
01:35:09,450 --> 01:35:12,560
Kaj tiel, kiam mi akiras char kaj mi volas
kompari ke char uzante egaluloj

1909
01:35:12,560 --> 01:35:18,350
egalas al iu letero kiel y aŭ n, mi faros,
ja devas havi la solan citaĵoj.

1910
01:35:18,350 --> 01:35:19,770
>> Nun, ni iru antaŭen kaj fari tion.

1911
01:35:19,770 --> 01:35:26,180
Ni iru antaŭen kaj ja faras
logika dot oblikvo logika.

1912
01:35:26,180 --> 01:35:27,305
Kaj nun mi estanta instigita.

1913
01:35:27,305 --> 01:35:30,638
Do, supozeble, pli bona uzanto sperto
estus vere diri al mi kion fari tie.

1914
01:35:30,638 --> 01:35:33,030
Sed mi tuj nur blinde
diru y por jes, bone, agrable.

1915
01:35:33,030 --> 01:35:35,780
>> Ni ruli ĝin denove, n por neniu, bela.

1916
01:35:35,780 --> 01:35:39,610
Supozu kiel iuj homoj mi scias,
mia ĉapojn ŝlosi ŝlosilo estas en ĉiuj tro ofte.

1917
01:35:39,610 --> 01:35:43,740
Tial Mi faros ĉefurbo Y, eniri, eraro.

1918
01:35:43,740 --> 01:35:46,130
OK, ne precize kion mi atendis.

1919
01:35:46,130 --> 01:35:48,170
Efektive, la komputilo
faras laŭvorte kion

1920
01:35:48,170 --> 01:35:51,794
Mi rakontis al do-- kontroli
minuskla y kaj minuskla n.

1921
01:35:51,794 --> 01:35:53,960
Ĉi tio ne sentas bone
uzanto sperto, tamen.

1922
01:35:53,960 --> 01:35:59,010
Lasu min peti kaj akcepti
ĉu minuskla aŭ majuskla.

1923
01:35:59,010 --> 01:36:02,090
Do rezultas, Vi povus deziri
diri ion kiel en Scratch,

1924
01:36:02,090 --> 01:36:08,150
kiel laŭvorte aŭ C egalas
egalas ĉefurbo sola citata kaj.

1925
01:36:08,150 --> 01:36:11,400
Rezultas, C ne havas
tiu laŭvorta ŝlosilvorto aŭ.

1926
01:36:11,400 --> 01:36:12,880
>> Sed ĝi havas du vertikalaj stangoj.

1927
01:36:12,880 --> 01:36:15,463
Vi devi teni Shift kutime,
se vi uzas usonan klavaron,

1928
01:36:15,463 --> 01:36:18,910
kaj batis la vertikala baro
ŝlosilo super via reveno ŝlosilon.

1929
01:36:18,910 --> 01:36:22,410
Sed tiu vertikala breto
vertikala stango signifas aŭ.

1930
01:36:22,410 --> 01:36:26,220
>> Se, kontraste, ni volis
diri kaj, kiel en Scratch,

1931
01:36:26,220 --> 01:36:28,180
ni povus fari ampersand kaj-signo.

1932
01:36:28,180 --> 01:36:31,330
Kiu faras neniun logikan sencon tie,
ĉar homa povis eble

1933
01:36:31,330 --> 01:36:37,110
tajpis ambaŭ y kaj minuskla y
kaj ĉefurbo Y kiel la sama karaktero.

1934
01:36:37,110 --> 01:36:39,470
Tiel aŭ tion ni intencas ĉi tie.

1935
01:36:39,470 --> 01:36:46,280
>> Do se mi faras tion en ambaŭ lokoj, aŭ c
egalas egalas ĉefurbo N, nun rerun,

1936
01:36:46,280 --> 01:36:49,390
faras logikan, rerun logika.

1937
01:36:49,390 --> 01:36:51,200
Nun, mi povas tajpi y.

1938
01:36:51,200 --> 01:36:53,920
Kaj mi povas fari ĝin denove kun
ĉefurbo Y, aŭ ĉefurbo N.

1939
01:36:53,920 --> 01:36:56,630
Kaj mi povis aldoni en aldona
kombinaĵoj ankoraŭ.

1940
01:36:56,630 --> 01:36:58,810
>> Do tiu estas logika
programo mezuro nun

1941
01:36:58,810 --> 01:37:01,940
Mi kontrolas logike por
tiu valoro aŭ tiun valoron.

1942
01:37:01,940 --> 01:37:06,420
Kaj mi ne devas, nepre,
supreniru kun du pli oj aŭ alia oj.

1943
01:37:06,420 --> 01:37:09,960
Mi povas reale kombini iuj de la
rilata logiko kune tiamaniere.

1944
01:37:09,960 --> 01:37:11,950
Do tiu estus bona
desegnita ol simple

1945
01:37:11,950 --> 01:37:17,490
dirante: Se C egalas minuskloj y,
presi jes, alie se c egalas ĉefurbo Y,

1946
01:37:17,490 --> 01:37:20,074
presi jes, alie se c egalas
lower-- alivorte,

1947
01:37:20,074 --> 01:37:21,990
vi ne devas havi
pli kaj pli branĉoj.

1948
01:37:21,990 --> 01:37:28,840
Vi povas kombini iuj de la ekvivalenta
branĉoj logike, kiel en ĉi tiu vojo.

1949
01:37:28,840 --> 01:37:34,150
>> Do ni rigardu nur
fina ingredienco, unu fina konstruo,

1950
01:37:34,150 --> 01:37:34,847
ke C permesas.

1951
01:37:34,847 --> 01:37:36,930
Kaj ni revenos en la
estonteco al aliaj ankoraŭ.

1952
01:37:36,930 --> 01:37:41,400
Kaj tiam ni konkludi per rigardado
ĉe ne la ĝusteco de code--

1953
01:37:41,400 --> 01:37:46,070
atingi kodo work-- sed la dezajno
de kodo, kaj plantos tiuj semoj frue.

1954
01:37:46,070 --> 01:37:51,337
>> Do lasu min antaŭeniri kaj
malfermi novan dosieron ĉi tie.

1955
01:37:51,337 --> 01:37:51,920
Vi scias kion?

1956
01:37:51,920 --> 01:37:54,450
Mi tuj re-apliki
tiu sama programo,

1957
01:37:54,450 --> 01:37:55,940
sed uzante malsama konstruo.

1958
01:37:55,940 --> 01:38:00,110
>> Do mi rapide doni min
aliro al inkluzivi CS50.h

1959
01:38:00,110 --> 01:38:04,150
por la CS50 biblioteko,
norma io.h por printf.

1960
01:38:04,150 --> 01:38:06,510
Donu miajn int ĉefa malplenon.

1961
01:38:06,510 --> 01:38:09,310
Kaj tiam super tie, lasu
min antaŭeniri kaj fari tion.

1962
01:38:09,310 --> 01:38:12,010
>> Char c ricevas akiri char, kiel antaŭe.

1963
01:38:12,010 --> 01:38:16,770
Kaj mi tuj uzos nova konstruo
now-- alti, sur kio karakteron?

1964
01:38:16,770 --> 01:38:19,820
Do ŝaltilo estas ia kiel
ŝaltanta trajno trakoj.

1965
01:38:19,820 --> 01:38:22,070
Aŭ, vere, ĝi estas speco de
kiel se alie, se alie se,

1966
01:38:22,070 --> 01:38:23,980
sed skribita iom alimaniere.

1967
01:38:23,980 --> 01:38:25,490
>> Ŝaltilo aspektas jene.

1968
01:38:25,490 --> 01:38:29,060
Vi havas ŝaltilon, kaj tiam kion
karaktero aŭ nombro vi volas rigardi,

1969
01:38:29,060 --> 01:38:32,000
tiam iuj buklaj krampoj ŝatas en
Nulo, nur diru tion aĵoj.

1970
01:38:32,000 --> 01:38:33,480
Kaj tiam vi havos malsamajn kazojn.

1971
01:38:33,480 --> 01:38:34,830
>> Vi ne uzas se kaj alie.

1972
01:38:34,830 --> 01:38:37,050
Vi laŭvorte uzi la vorton tiel.

1973
01:38:37,050 --> 01:38:38,790
Kaj vi dirus ion kiel tiu.

1974
01:38:38,790 --> 01:38:43,820
>> Tiel en la kazo de minusklan y,
aŭ en la kazo de majuskla Y,

1975
01:38:43,820 --> 01:38:47,350
antaŭeniri kaj presi jes.

1976
01:38:47,350 --> 01:38:49,020
Kaj tiam rompi la ŝaltilon.

1977
01:38:49,020 --> 01:38:49,580
Jen ĝi.

1978
01:38:49,580 --> 01:38:50,880
Ni faris.

1979
01:38:50,880 --> 01:38:57,270
>> Alie se, por tiel diri,
minuskla n, aŭ ĉefurbo N,

1980
01:38:57,270 --> 01:39:02,560
tiam iru antaŭen kaj presita
el neniu, kaj tiam rompu.

1981
01:39:02,560 --> 01:39:08,022
Else-- kaj tian estas la
defaŭlta kazo indeed-- printf error--

1982
01:39:08,022 --> 01:39:10,980
kaj nur por bonan mezuron, kvankam
logike ĉi paŭzo ne estas necesa

1983
01:39:10,980 --> 01:39:12,896
ĉar ni fine
de la ŝaltilo ĉiuokaze,

1984
01:39:12,896 --> 01:39:14,520
Mi nun elrompanta de la ŝaltilo.

1985
01:39:14,520 --> 01:39:16,280
Do tio aspektas iom malsama.

1986
01:39:16,280 --> 01:39:18,272
>> Sed, logike, ĝi estas
fakte ekvivalenta.

1987
01:39:18,272 --> 01:39:19,980
Kaj kial vi uzas
unu super la alia?

1988
01:39:19,980 --> 01:39:23,220
Kelkfoje, nur persona prefero,
kelkfoje la estetiko,

1989
01:39:23,220 --> 01:39:25,420
se mi rigardis tiun
nun estas io

1990
01:39:25,420 --> 01:39:27,510
diri al la
legeblecon de tiu kodo.

1991
01:39:27,510 --> 01:39:30,690
Mi volas diri, ne gravas la fakto ke ĉi
poŝtkodo estas nova al multaj el ni en la ĉambro.

1992
01:39:30,690 --> 01:39:33,515
>> Sed nur ia estas bela.

1993
01:39:33,515 --> 01:39:37,760
Komprenu minuskla y, ĉefurbo Y,
minuskla n, ĉefurbo N defaŭlta,

1994
01:39:37,760 --> 01:39:40,150
ĝi nur speco de saltoj
ĉe vi en vojo

1995
01:39:40,150 --> 01:39:42,200
ke, eble, eble
la antaŭa ekzemplo

1996
01:39:42,200 --> 01:39:45,780
kun la oj, kaj la vertikalaj stangoj,
kaj la alia oj, eble ne havas.

1997
01:39:45,780 --> 01:39:51,600
Do tiu estas vere afero de persona
elekto, vere, aŭ legeblecon,

1998
01:39:51,600 --> 01:39:52,360
de la kodo.

1999
01:39:52,360 --> 01:39:58,230
>> Sed en terminoj de funcionalidad, lasu min
antaŭeniri kaj fari ŝaltilon, dot oblikvo

2000
01:39:58,230 --> 01:40:05,830
ŝaltilo, kaj nun tajpas minuskle y,
ĉefurbo Y, minuskla n, ĉefurbo N,

2001
01:40:05,830 --> 01:40:09,250
David, reprovi ĉar tio
ne sola karaktero.

2002
01:40:09,250 --> 01:40:12,050
Ni faru x, eraro, kiel atendita.

2003
01:40:12,050 --> 01:40:15,640
Kaj, logically-- kaj tio estas io
Mi kuraĝigus en general-- eĉ

2004
01:40:15,640 --> 01:40:17,790
kvankam ni nur gratante la
surfaco de iuj de ĉi tiuj karakterizaĵoj.

2005
01:40:17,790 --> 01:40:20,560
>> Kaj ĝi povus ne esti evidentaj kiam
mem sidiĝi ĉe la klavaro,

2006
01:40:20,560 --> 01:40:21,370
kiel tio funkcias?

2007
01:40:21,370 --> 01:40:22,240
Kion tio do?

2008
01:40:22,240 --> 01:40:25,630
La bela afero pri havanta
tekkomputilo aŭ surtabla aŭ aliro

2009
01:40:25,630 --> 01:40:29,290
al komputilo per tradukilo,
kaj kun kodo redaktoro kiel tiu,

2010
01:40:29,290 --> 01:40:32,990
Estas vi povas preskaŭ ĉiam respondi tiujn
demandoj mem nur provanta.

2011
01:40:32,990 --> 01:40:36,570
>> Ekzemple, se la retorika
demando ĉe mano estis,

2012
01:40:36,570 --> 01:40:39,540
kio okazas se vi forgesu
via paŭzo deklaroj?

2013
01:40:39,540 --> 01:40:41,400
Kiu estas fakte
tre komuna afero por fari,

2014
01:40:41,400 --> 01:40:43,540
ĉar ĝi ne aspektas
kiel vi vere bezonas ilin.

2015
01:40:43,540 --> 01:40:46,790
Ne vere kompletigi viajn
pensis kiel paréntesis aŭ krispa

2016
01:40:46,790 --> 01:40:47,714
stegon faras.

2017
01:40:47,714 --> 01:40:49,630
Ni iru antaŭen kaj
rekompili la kodon kaj vidi.

2018
01:40:49,630 --> 01:40:53,690
Tiel faro ŝaltilo, dot oblikvo ŝaltilo.

2019
01:40:53,690 --> 01:40:56,435
Ni entajpu minuskloj
y, la supro kazo, Enter.

2020
01:40:56,435 --> 01:40:59,390

2021
01:40:59,390 --> 01:41:00,700
Do mi tajpas kaj.

2022
01:41:00,700 --> 01:41:04,420
>> La programo diris jes, ne, eraro,
kvazaŭ ĝi ŝanĝas lian menson.

2023
01:41:04,420 --> 01:41:09,280
Sed ia estis, ĉar kio okazas
kun ŝaltilo estas la unua kazo ke

2024
01:41:09,280 --> 01:41:13,899
matĉo esence signifas, hey komputilo,
ekzekuti la kodon sub ĝi.

2025
01:41:13,899 --> 01:41:16,690
Kaj se vi ne diras paŭzo, aŭ
Ne diru paŭzo aŭ ne diras paŭzo,

2026
01:41:16,690 --> 01:41:19,540
la komputilo tuj blovis
tra ĉiuj tiuj linioj

2027
01:41:19,540 --> 01:41:22,779
kaj ekzekuti ĉiujn ilin ĝis
ĝi alvenas al tiu krispa krampoj.

2028
01:41:22,779 --> 01:41:24,320
Tiel la bremsoj estas ja necese.

2029
01:41:24,320 --> 01:41:27,120
Sed takeaway tie estas, kiam
en dubo, provu ion.

2030
01:41:27,120 --> 01:41:29,510
Eble savi vian kodon unua,
aŭ savi ĝin en ekstra dosieron

2031
01:41:29,510 --> 01:41:32,930
Se vi estas vere maltrankviligita
rompado kaj devi reakiri

2032
01:41:32,930 --> 01:41:34,430
la laboro ke vi sciu laboras.

2033
01:41:34,430 --> 01:41:35,410
>> Sed provu aferoj.

2034
01:41:35,410 --> 01:41:38,074
Kaj ne kiel timema, eble,
de kio la komputilo povus fari,

2035
01:41:38,074 --> 01:41:39,490
aŭ ke vi povus rompi ion.

2036
01:41:39,490 --> 01:41:42,790
Vi povas ĉiam restarigu reen
al iu pli frua versio.

2037
01:41:42,790 --> 01:41:45,640
>> Do ni finos per rigardado
en la dezajno de kodo.

2038
01:41:45,640 --> 01:41:49,020
Ni havas tiun kapablon jam skribi
kondiĉoj, kaj registran masxojn,

2039
01:41:49,020 --> 01:41:50,850
kaj variabloj kaj alvoko funkciojn.

2040
01:41:50,850 --> 01:41:54,590
Do, sincere, ni ia reen ĉe
kie ni estis antaŭ unu semajno kun Scratch,

2041
01:41:54,590 --> 01:42:00,120
kvankam kun malpli konvinka teksta
medio ol Scratch permesas.

2042
01:42:00,120 --> 01:42:03,990
>> Sed rimarki kiom rapide ni akiris
ke vortprovizon, eĉ se ĝi estas

2043
01:42:03,990 --> 01:42:07,570
tuj prenos iom da tempo por enprofundigi en,
tiel ke ni nun povas uzi tiun vortaron

2044
01:42:07,570 --> 01:42:10,320
skribi pli interesaj programoj.

2045
01:42:10,320 --> 01:42:12,940
Kaj ni prenu bebo paŝo
al tiu, kiel sekvas.

2046
01:42:12,940 --> 01:42:14,890
Lasu min antaŭeniri kaj
krei novan dosieron ĉi tie.

2047
01:42:14,890 --> 01:42:17,750
>> Mi tuj nomas tiun
prototype.c kaj enkonduki

2048
01:42:17,750 --> 01:42:20,954
unuafoje, la kapablo
fari vian propran funkcioj.

2049
01:42:20,954 --> 01:42:22,870
Kelkaj el vi eble havas
farinte per Scratch,

2050
01:42:22,870 --> 01:42:25,430
per kiu vi povas krei vian
propra kutimo blokoj en Scratch,

2051
01:42:25,430 --> 01:42:27,892
kaj tiam treni ilin en lokon
kien ajn vi volas en C.

2052
01:42:27,892 --> 01:42:30,100
Kaj en plej programado
lingvoj, vi povas fari ĝuste

2053
01:42:30,100 --> 01:42:33,580
that-- fari viajn proprajn funkciojn,
se ili ne jam ekzistas.

2054
01:42:33,580 --> 01:42:38,660
>> Do, ekzemple, lasu min antaŭeniri
kaj inkluzivi CS50.h kaj inkluzivi

2055
01:42:38,660 --> 01:42:43,110
norma io.h, int ĉefa malplenon.

2056
01:42:43,110 --> 01:42:46,020
Nun ni havas
lokokupilo preta iri.

2057
01:42:46,020 --> 01:42:48,550
Mi daŭre pres aferoj
kiel popola nomoj hodiaŭ.

2058
01:42:48,550 --> 01:42:51,910
Kaj kiu sentas like--
ne estus bela se

2059
01:42:51,910 --> 01:42:53,936
estis funkcio nomita print nomo?

2060
01:42:53,936 --> 01:42:55,060
Mi ne devas uzi printf.

2061
01:42:55,060 --> 01:42:56,976
Mi ne devas memori
ĉiuj formato kodoj.

2062
01:42:56,976 --> 01:43:00,050
Kial ne, aŭ kial
ne iu antaŭ mi,

2063
01:43:00,050 --> 01:43:02,980
krei funkcio nomita print
nomo, kiuj donas iun nomon,

2064
01:43:02,980 --> 01:43:03,980
simple presas gxin?

2065
01:43:03,980 --> 01:43:08,700
>> Alivorte, se mi diras, hey,
komputilo, donu al mi ĉenon

2066
01:43:08,700 --> 01:43:11,870
Petante la uzanto por tia,
tra CS50 akiri string funkcio.

2067
01:43:11,870 --> 01:43:15,090
Hej, komputilo, metis tiun ĉenon en
la variablo en la maldekstra flanko,

2068
01:43:15,090 --> 01:43:16,150
kaj nomas ĝin s.

2069
01:43:16,150 --> 01:43:22,150
Kaj tiam, hey komputilo, antaŭeniri
kaj presi ke persono nomo, faritaj.

2070
01:43:22,150 --> 01:43:26,240
>> Nun, estus bela, ĉar
tiu programo, trafe nomita,

2071
01:43:26,240 --> 01:43:29,170
diras al mi kio ĝi estas supozita fari
tra tiuj funkciaj nomoj.

2072
01:43:29,170 --> 01:43:32,930
Mi volas iri kaj fari prototipo, Enter.

2073
01:43:32,930 --> 01:43:34,930
Kaj, bedaŭrinde,
ĉi tio ne tuj flugos.

2074
01:43:34,930 --> 01:43:39,430
>> Prototype.c, linio 7, karaktero
5, eraro, implicita deklaro

2075
01:43:39,430 --> 01:43:42,960
de funkcio print nomo
estas nevalida en C99, C99

2076
01:43:42,960 --> 01:43:45,130
Signifanta versio de C
kiu eliris en 1999.

2077
01:43:45,130 --> 01:43:45,730
Tio estas ĉio.

2078
01:43:45,730 --> 01:43:48,780
>> Do mi ne scias kio
ĉio ĉi signifas ankoraŭ.

2079
01:43:48,780 --> 01:43:50,810
Sed mi faras rekoni eraron en ruĝa.

2080
01:43:50,810 --> 01:43:51,770
Tio estas sufiĉe evidentaj.

2081
01:43:51,770 --> 01:43:53,769
>> Kaj ĝi similas ke kun
verdan karakteron tie,

2082
01:43:53,769 --> 01:43:57,520
la afero estas kun presitaj nomo, malferma
paren s, proksime paren, duon-dupunkto.

2083
01:43:57,520 --> 01:44:01,800
Sed implica deklaro de
funkcio ni vidis mallonge antaŭe.

2084
01:44:01,800 --> 01:44:04,880
Tio signifas, simple, ke Clang
ne scias, kion mi volas diri.

2085
01:44:04,880 --> 01:44:09,000
>> Mi uzis vortaron vorto ke ĝi estas
neniam vidita aŭ instruis antaŭe.

2086
01:44:09,000 --> 01:44:11,950
Do mi devas instrui gxin
kion tiu funkcio signifas.

2087
01:44:11,950 --> 01:44:13,590
Do mi tuj iros antaŭen kaj fari tion.

2088
01:44:13,590 --> 01:44:17,970
>> Mi tuj iros antaŭen kaj apliki
mia propra funkcio nomita Presi Nomo.

2089
01:44:17,970 --> 01:44:24,720
Kaj mi tuj diros, kiel sekvas, ke
ĝi faras tion, printf, saluton, procento

2090
01:44:24,720 --> 01:44:27,760
s, backslash n, nomo, duon-dupunkto.

2091
01:44:27,760 --> 01:44:29,250
Do kion mi ĵus faris?

2092
01:44:29,250 --> 01:44:31,325
>> Do rezultas, al
apliki vian propran funkcion,

2093
01:44:31,325 --> 01:44:33,845
ni ia deprunti kelkaj
la sama strukturo kiel ĉefa

2094
01:44:33,845 --> 01:44:35,720
ke ni ĵus estis
memkompreneble, kaj mi

2095
01:44:35,720 --> 01:44:37,730
scias kopii kaj
alglui preskaux kia

2096
01:44:37,730 --> 01:44:39,170
Mi estis skribanta en la pasinteco.

2097
01:44:39,170 --> 01:44:40,570
Sed rimarki la mastro tie.

2098
01:44:40,570 --> 01:44:43,750
Int, Ĉefa, Void, ni turmentus aparte
antaŭ longe kion tio vere signifas.

2099
01:44:43,750 --> 01:44:46,160
>> Sed por hodiaŭ, nur
rimarki la paralelismo.

2100
01:44:46,160 --> 01:44:48,210
Void, presita nomo:
string nomo, do ekzistas

2101
01:44:48,210 --> 01:44:50,310
purpura ŝlosilvorto, kiun
ni tuj komencos

2102
01:44:50,310 --> 01:44:54,067
nomante reveno tipo, la nomon de
la funkcio, kaj tiam la enigo.

2103
01:44:54,067 --> 01:44:56,400
Do, fakte, ni povas distili
tiu speco de kiel lasta semajno

2104
01:44:56,400 --> 01:44:59,030
kiel, tiu estas la nomo aŭ la
Algoritmo de la kodo ni

2105
01:44:59,030 --> 01:45:00,761
tuj write-- la
algoritmo subkuŝanta

2106
01:45:00,761 --> 01:45:02,010
la kodo ni tuj skribos.

2107
01:45:02,010 --> 01:45:03,180
>> Jen ĝia enigo.

2108
01:45:03,180 --> 01:45:04,670
Tiu estas sian produktadon.

2109
01:45:04,670 --> 01:45:08,730
Tiun funkcion, presita nomo, estas
desegnita preni ŝnuro nomita nomo,

2110
01:45:08,730 --> 01:45:11,350
aŭ kio ajn, kiel enigo, kaj tiam malplena.

2111
01:45:11,350 --> 01:45:13,904
Ĝi ne revenas ion,
kiel akiri string aŭ akiri int faras.

2112
01:45:13,904 --> 01:45:15,570
Tial ĝi tuj donu al mi ion reen.

2113
01:45:15,570 --> 01:45:17,960
Ĝi simple tuj havi
kromefikon, por tiel diri,

2114
01:45:17,960 --> 01:45:19,570
videbligi la nomon de persono.

2115
01:45:19,570 --> 01:45:22,260
Do rimarki, linio 7, mi
povas voki print nomo.

2116
01:45:22,260 --> 01:45:25,920
Linio 10, mi povas difini
aŭ apliki print nomo.

2117
01:45:25,920 --> 01:45:28,450
Sed, bedaŭrinde, tio ne sufiĉas.

2118
01:45:28,450 --> 01:45:31,230
>> Lasu min antaŭeniri kaj
rekompili tiu post savi.

2119
01:45:31,230 --> 01:45:33,910
Halt, nun, mi faris ĝin
malbona, ĝi similus.

2120
01:45:33,910 --> 01:45:37,027
Tiel implica deklaro de
funkcio print nomo estas malvalida.

2121
01:45:37,027 --> 01:45:38,360
Kaj, denove, estas pli eraroj.

2122
01:45:38,360 --> 01:45:41,430
Sed mi avertis antaŭe, eĉ
se vi ricevas superŝutita per,

2123
01:45:41,430 --> 01:45:44,850
aŭ iom malĝoja vidi tiom da
eraroj, enfokusigi nur sur la unua

2124
01:45:44,850 --> 01:45:47,500
komence, ĉar eble nur
havis kaskadan efikon.

2125
01:45:47,500 --> 01:45:51,970
Do C, aŭ Clang pli specife,
ankoraŭ ne rekonas print nomo.

2126
01:45:51,970 --> 01:45:54,580
>> Kaj tio estas ĉar Clang,
projekte, estas speco de mutaj.

2127
01:45:54,580 --> 01:45:56,280
Ĝi nur faras kion vi diros al li fari.

2128
01:45:56,280 --> 01:46:00,950
Kaj ĝi nur faras en la ordo
en kiu vi diras ĝin fari.

2129
01:46:00,950 --> 01:46:05,270
>> Do mi difinis ĉefa sur linio kvar,
kiel ni estis farante sufiĉe ofte.

2130
01:46:05,270 --> 01:46:07,980
Mi difinis print nomon sur linio 10.

2131
01:46:07,980 --> 01:46:11,793
Sed mi provas uzi
print nomon sur linio sep.

2132
01:46:11,793 --> 01:46:13,670
>> Ĝi estas tro frue, ne ekzistanta.

2133
01:46:13,670 --> 01:46:19,150
Do mi povus esti lerta kaj esti kiel,
Bone, do ni nur ludas kune,

2134
01:46:19,150 --> 01:46:23,680
kaj movi print nomon supren
tie kaj re-kompili.

2135
01:46:23,680 --> 01:46:24,550
Ho mia Dio.

2136
01:46:24,550 --> 01:46:25,260
Funkciis.

2137
01:46:25,260 --> 01:46:26,670
Estis tiel simpla kiel tiu.

2138
01:46:26,670 --> 01:46:28,120
>> Sed la logiko estas ĝuste tio.

2139
01:46:28,120 --> 01:46:30,870
Vi devas instrui Clang kion
estas per difinanta la funkcio unue.

2140
01:46:30,870 --> 01:46:31,920
Tiam vi povas uzi ĝin.

2141
01:46:31,920 --> 01:46:33,940
Sed, sincere, tiu sentas
kiel glitiga deklivo.

2142
01:46:33,940 --> 01:46:35,773
>> Do ĉiufoje mi kuros
en problemo, mi estas nur

2143
01:46:35,773 --> 01:46:39,450
tuj elstaros kaj kopii la kodon
Mi skribis, detrancxu gxin kaj gluu ĝin tie.

2144
01:46:39,450 --> 01:46:41,370
Kaj, verŝajne, ni povis
aranĝi kelkaj scenaroj

2145
01:46:41,370 --> 01:46:43,286
kie funkcio povus
bezonas voki alian.

2146
01:46:43,286 --> 01:46:46,030
Kaj vi simple ne povas meti ĉiun
funkcio super ĉiu alia.

2147
01:46:46,030 --> 01:46:47,930
>> Do rezultas ke la
pli bona solvo.

2148
01:46:47,930 --> 01:46:50,100
Ni povas lasi tiun estu.

2149
01:46:50,100 --> 01:46:53,677
Kaj, sincere, ĝi estas ĝenerale agrabla,
kaj oportuna, kaj bona dezajno

2150
01:46:53,677 --> 01:46:56,760
meti ĉefa unua, ĉar, denove,
ĉefa ĝuste kiel kiam verda flago clicked,

2151
01:46:56,760 --> 01:46:59,027
kiu estas la funkcio kiu
gets ekzekutita defaŭlte.

2152
01:46:59,027 --> 01:47:01,110
Do vi povus same meti
cxe la supro de la dosiero

2153
01:47:01,110 --> 01:47:03,560
tiel ke kiam vi aŭ iu ajn
aliaj homaj rigardas la dosieron

2154
01:47:03,560 --> 01:47:06,360
vi scias kio okazas
nur legante ĉefa unue.

2155
01:47:06,360 --> 01:47:15,360
Do rezultas ni povas diri Clang
proactively, hej, Clang, sur linio kvar,

2156
01:47:15,360 --> 01:47:17,940
Mi promesas implementar
funkcio nomita Presi

2157
01:47:17,940 --> 01:47:22,600
Nomo kiu prenas ŝnuro nomita nomon
kiel enigo, kaj revenas nenion, malplenon.

2158
01:47:22,600 --> 01:47:24,770
Kaj mi ricevos ĉirkaŭ al
efektiviganta ĝin poste.

2159
01:47:24,770 --> 01:47:25,680
>> Jen venas Ĉefaj.

2160
01:47:25,680 --> 01:47:29,130
Ĉefa nun linio 9 povas uzi
Print Nomo ĉar Clang

2161
01:47:29,130 --> 01:47:32,600
estas konfidita ke, eventuale,
ĝi renkontas la difinon

2162
01:47:32,600 --> 01:47:34,880
de la efektivigo de Presi Nomo.

2163
01:47:34,880 --> 01:47:37,390
Do post savi mian dosieron, lasu
min antaŭeniri kaj fari prototipo,

2164
01:47:37,390 --> 01:47:38,498
aspektas bone ĉi tiu tempo.

2165
01:47:38,498 --> 01:47:43,470
Dot oblikvo, prototipo, lasu min
antaŭeniri kaj tajpu en nomo.

2166
01:47:43,470 --> 01:47:48,440
David Saluton David Zamila Saluton
Zamila kaj ja nun funkcias.

2167
01:47:48,440 --> 01:47:52,200
>> Tial la ingredienco estas, ke ni havas
faris kutimo funkcio, kiel kutimo

2168
01:47:52,200 --> 01:47:54,219
Nulo bloko ni vokas ĝin.

2169
01:47:54,219 --> 01:47:57,010
Sed kontraste Scratch, kie vi povas
simple kreu ĝin kaj komenci uzi ĝin,

2170
01:47:57,010 --> 01:47:59,330
nun ni devas esti
iom pli pedanta,

2171
01:47:59,330 --> 01:48:03,410
kaj fakte trejni Clang
uzi, aŭ atendi ŝin.

2172
01:48:03,410 --> 01:48:09,140
Nun, kiel flanken, kial ĉiuj ĉi tempo havi
Ni estis nur blinde sur fido inkluzive

2173
01:48:09,140 --> 01:48:12,170
CS50.h kaj inkluzive normo io.h?

2174
01:48:12,170 --> 01:48:15,190
>> Nu, tio rezultas,
inter kelkaj aliaj aferoj,

2175
01:48:15,190 --> 01:48:18,550
ĉiuj jen en tiuj punktoj h
dosierojn, kiuj hazarde estas dosierojn.

2176
01:48:18,550 --> 01:48:20,460
Ili header dosierojn, tiel diri.

2177
01:48:20,460 --> 01:48:23,270
Ili ankoraŭ skribita en C. Sed
ili estas malsama tipo de dosiero.

2178
01:48:23,270 --> 01:48:28,690
>> Nuntempe, Vi povas sufiĉe multe supozi
cxio, kio estas interne de CS50.h

2179
01:48:28,690 --> 01:48:33,360
Estas kelkaj unu-ekskursoŝipoj kiel tiu, ne
por funkcioj nomitaj Presi Nomo:

2180
01:48:33,360 --> 01:48:36,840
sed por Get String, Akiri
Kaleŝego, kaj kelkaj aliaj.

2181
01:48:36,840 --> 01:48:41,510
Kaj ekzistas simila prototipoj,
unu ekskursoŝipoj, ene de norma io.h

2182
01:48:41,510 --> 01:48:46,241
por printf, kiu estas nun en
mia propra Presi Nomo funkcio.

2183
01:48:46,241 --> 01:48:49,490
Do alivorte, tiu tuta tempo ni havas
ĵus blinde kopii kaj alglui

2184
01:48:49,490 --> 01:48:51,780
inkluzivas tion, inkluzivi
ke, kio okazas?

2185
01:48:51,780 --> 01:48:55,310
Tiuj estas nur speco de postsignoj
por Clang, kion funkcioj

2186
01:48:55,310 --> 01:49:00,170
estas ja implementado, ĵus
aliloke en malsamaj dosieroj

2187
01:49:00,170 --> 01:49:02,440
aliloke sur la sistemo.

2188
01:49:02,440 --> 01:49:05,160
>> Do ni implementado print nomo.

2189
01:49:05,160 --> 01:49:07,910
Ĝi ja havas ĉi kromefikon de
presi iun sur la ekrano.

2190
01:49:07,910 --> 01:49:10,170
Sed ne reale
transdoni al mi ion reen.

2191
01:49:10,170 --> 01:49:12,200
Kiel ni iras sur
efektiviganta programon kiu

2192
01:49:12,200 --> 01:49:14,510
ne transdonu min ion?

2193
01:49:14,510 --> 01:49:15,580
>> Nu, ni provu tion.

2194
01:49:15,580 --> 01:49:21,360
Lasu min antaŭeniri kaj realigi
dosiero nomata return.c

2195
01:49:21,360 --> 01:49:24,530
tiel ni povas montri kiel ion
kiel Get String aŭ Get Mez,

2196
01:49:24,530 --> 01:49:27,340
Estas vere reveni
ion reen al la uzanto.

2197
01:49:27,340 --> 01:49:29,840
Ni iru antaŭen kaj difini int ĉefa malplenon.

2198
01:49:29,840 --> 01:49:33,230
>> Kaj, denove, en la estonteco, ni instruos vin
klarigi kion tio int kaj ke malplena

2199
01:49:33,230 --> 01:49:34,090
fakte faras.

2200
01:49:34,090 --> 01:49:35,840
Sed por hodiaŭ, ni instruos vin
preni por donita.

2201
01:49:35,840 --> 01:49:39,970
Mi tuj iros antaŭen kaj printf,
por bona uzanta sperto, x estas.

2202
01:49:39,970 --> 01:49:44,360
Kaj tiam mi iros atendi la
uzanto doni al mi x kun get int.

2203
01:49:44,360 --> 01:49:48,459
>> Kaj tiam mi iros por antaŭeniri
kaj presi x al la kvadrato.

2204
01:49:48,459 --> 01:49:50,500
Do kiam vi nur havas
klavaro, homoj ofte

2205
01:49:50,500 --> 01:49:52,600
uzi la malgranda karoto
simbolo sur la klavaro

2206
01:49:52,600 --> 01:49:55,330
reprezenti la povon
de, aŭ la eksponento de.

2207
01:49:55,330 --> 01:49:58,960
Do x kvadrato ĉeestas i.

2208
01:49:58,960 --> 01:50:00,660
>> Kaj nun mi faros tion.

2209
01:50:00,660 --> 01:50:03,940
Mi povis nur do-- kio estas x
kvadrato? x kvadratoj estas x fojojn x.

2210
01:50:03,940 --> 01:50:06,690
>> Kaj ni faris tiun iuj
tempo jam hodiaŭ.

2211
01:50:06,690 --> 01:50:08,730
Tio ne sentas kiel
ĉiuj ke multe progreso.

2212
01:50:08,730 --> 01:50:09,570
Vi scias kion?

2213
01:50:09,570 --> 01:50:13,100
Ni utiligi iom de tiu ideo
de lasta momento de abstracción.

2214
01:50:13,100 --> 01:50:16,080
>> Ĉu ne estus bela se
ekzistas funkcio vokis

2215
01:50:16,080 --> 01:50:18,460
kvadrato kiu faras ĝuste tion?

2216
01:50:18,460 --> 01:50:20,640
Ankoraŭ, fine de la
tago, faras la saman matematiko.

2217
01:50:20,640 --> 01:50:22,410
Sed ni abstrakta
for la ideon de preno

2218
01:50:22,410 --> 01:50:25,280
unu nombro multiplikita per
alia, kaj simple doni al li nomon,

2219
01:50:25,280 --> 01:50:27,360
kiel akordis tiun valoron.

2220
01:50:27,360 --> 01:50:29,560
>> Kaj, en aliaj vortoj, en
C, ni kreos funkcio

2221
01:50:29,560 --> 01:50:32,660
nomita kvadrato kiu faras ĝuste tion.

2222
01:50:32,660 --> 01:50:34,600
Ĝi tuj estos nomita kvadrato.

2223
01:50:34,600 --> 01:50:35,790
Ĝi tuj preni int.

2224
01:50:35,790 --> 01:50:37,820
Kaj ni volas nur
nomas ĝin n, defaŭlte.

2225
01:50:37,820 --> 01:50:39,403
>> Sed ni povus nomi ion ni volas.

2226
01:50:39,403 --> 01:50:42,900
Kaj cxio, kion ĝi tuj
do, laŭvorte, estas reveno

2227
01:50:42,900 --> 01:50:45,810
la rezulto de n × n.

2228
01:50:45,810 --> 01:50:48,980
Sed ĉar ĝi estas
reveninte io, kio

2229
01:50:48,980 --> 01:50:53,690
estas la ŝlosilvorto en purpuro ni havas
neniam antaŭe vidis, mi, sur linio 11,

2230
01:50:53,690 --> 01:50:55,410
ne povas simple diri malplenon tiu tempo.

2231
01:50:55,410 --> 01:51:01,320
>> Malplenon, en la ekzemplo ĵus vidis
prefere el presaĵo nomo, simple signifas,

2232
01:51:01,320 --> 01:51:02,190
fari ion.

2233
01:51:02,190 --> 01:51:04,170
Sed ne transdonu min ion.

2234
01:51:04,170 --> 01:51:06,790
En tiu kazo, mi volas
reveni n × n,

2235
01:51:06,790 --> 01:51:08,460
aŭ kio ajn tio estas, ke nombro.

2236
01:51:08,460 --> 01:51:12,460
>> Do mi ne povas diri, hej, Komputilo,
Mi revenos nenio, malpleno.

2237
01:51:12,460 --> 01:51:16,166
Ĝi tuj revenos, nature, int.

2238
01:51:16,166 --> 01:51:17,790
Kaj do tio estas ĉio, kion okazas tie.

2239
01:51:17,790 --> 01:51:20,070
>> La enigo akordi
tuj esti int.

2240
01:51:20,070 --> 01:51:24,760
Kaj por ke ni povas uzi ĝin, ĝi devas
havas nomon, N. Ĝi tuj eligo

2241
01:51:24,760 --> 01:51:26,240
int kiu ne bezonas nomon.

2242
01:51:26,240 --> 01:51:29,590
Ni povas lasi gxin al ĉefa, aŭ kiu ajn estas
uzante mi memoras tiun valoron se ni

2243
01:51:29,590 --> 01:51:31,120
volas kun lia propra ŝanĝiĝema.

2244
01:51:31,120 --> 01:51:33,230
>> Kaj, denove, la nura nova
ŝlosilvorto jen Reveno.

2245
01:51:33,230 --> 01:51:34,480
Kaj mi simple faranta iun math.

2246
01:51:34,480 --> 01:51:41,825
Se mi vere volis esti nenecesa,
Mi povus diri int produkto ricevas n × n.

2247
01:51:41,825 --> 01:51:44,170
>> Kaj tiam mi povus diri, reveni produkto.

2248
01:51:44,170 --> 01:51:47,360
Sed, denove, al mia punkto pli frue de
ĉi nur ne esti bona design--

2249
01:51:47,360 --> 01:51:50,060
kiel, kial enkonduki nomon
simbolo, kiel produkto,

2250
01:51:50,060 --> 01:51:51,570
nur tuj revenos ĝin?

2251
01:51:51,570 --> 01:51:53,670
Ĝi estas iom purigisto,
iom pli strikta, tiel

2252
01:51:53,670 --> 01:51:59,380
paroli, nur diri reveno n fojoj
n, forigi tiun linion entute.

2253
01:51:59,380 --> 01:52:02,860
>> Kaj estas simple malpli kodon por legi,
malpli ŝancon por eraroj.

2254
01:52:02,860 --> 01:52:05,180
Kaj ni vidu, se ĉi
fakte nun laboras.

2255
01:52:05,180 --> 01:52:09,380
Nun, mi tuj iros
antaŭen kaj fari reveni.

2256
01:52:09,380 --> 01:52:11,460
>> Uh-oh, implica deklaro de funkcio.

2257
01:52:11,460 --> 01:52:14,080
Mi faris tiun eraron antaŭe, neniu granda interkonsento.

2258
01:52:14,080 --> 01:52:18,950
Lasu min nur tajpi, aŭ reliefigi kaj
kopii, la ĝusta sama funkcio prototipo,

2259
01:52:18,950 --> 01:52:21,342
aŭ signumo, de la funkcio ĝis tie.

2260
01:52:21,342 --> 01:52:22,800
Aŭ mi povis movi la tuta funkcio.

2261
01:52:22,800 --> 01:52:23,841
>> Sed tio estas iom pigra.

2262
01:52:23,841 --> 01:52:24,870
Do ni ne faros tion.

2263
01:52:24,870 --> 01:52:27,960
Nun mi faras revenon
denove, dot oblikvo reveno.

2264
01:52:27,960 --> 01:52:32,790
>> x 2. x kvadrato estas 4.
x 3. x kvadrato estas 9.

2265
01:52:32,790 --> 01:52:35,300
Kaj la funkcio ŝajnas
nun esti laborante.

2266
01:52:35,300 --> 01:52:36,550
Do kio estas la diferenco ĉi tie?

2267
01:52:36,550 --> 01:52:42,520
Mi havas funkcion kiu nomiĝas kvadrato,
en tiu kazo, kiun mi metis en enigaĵoj.

2268
01:52:42,520 --> 01:52:43,830
Kaj mi reiros eliro.

2269
01:52:43,830 --> 01:52:46,210
Tamen, antaŭe, se
Mi malfermos la alia ekzemplo

2270
01:52:46,210 --> 01:52:51,640
de antaŭe, kiu
Estis nomita prototype.c,

2271
01:52:51,640 --> 01:52:54,770
Mi havis print nomon,
revenis malplena, por tiel diri,

2272
01:52:54,770 --> 01:52:58,730
Aŭ revenis nenion, kaj
simple havis kromefikon.

2273
01:52:58,730 --> 01:53:00,230
>> Do kio okazas ĉi tie?

2274
01:53:00,230 --> 01:53:03,520
Nu, konsideru la funkcio
akiri string por nur momento.

2275
01:53:03,520 --> 01:53:06,570
Ni uzis la funkcio
akiri string en la sekvanta maniero.

2276
01:53:06,570 --> 01:53:10,464
>> Ni havis funkcion akiri
ŝnuro, kiel inkluzivi CS50.h,

2277
01:53:10,464 --> 01:53:16,624
inkludas normon io.h, int, ĉefa, malplenon.

2278
01:53:16,624 --> 01:53:18,790
Kaj tiam ĉiu tempo mi havas
vokis get kordoj kaj tiel ege,

2279
01:53:18,790 --> 01:53:23,260
Mi diris ion kiel, kordo s
ricevas akiri string, ĉar get ĉenon

2280
01:53:23,260 --> 01:53:27,880
ni nomas ĉi get.c-- akiri string
mem revenas kordo ke mi povas tiam

2281
01:53:27,880 --> 01:53:32,050
uzi, kaj diri, saluton, komo,
procento s, backslash n, s.

2282
01:53:32,050 --> 01:53:35,660
>> Do tiu estas la sama ekzemplo,
vere, ke ni havis antaŭe.

2283
01:53:35,660 --> 01:53:37,920
Tiel akiri string resendas valoron.

2284
01:53:37,920 --> 01:53:41,260
Sed antaŭ momento, presi ĉenon
ne resendas valoro.

2285
01:53:41,260 --> 01:53:42,721
Ĝi simple havas kromefikon.

2286
01:53:42,721 --> 01:53:44,220
Do tiu estas fundamenta diferenco.

2287
01:53:44,220 --> 01:53:46,710
Ni vidis malsamajn
tipoj de funkcioj nun,

2288
01:53:46,710 --> 01:53:49,490
iuj de kiuj revenis
valorojn, iuj el kiuj ne.

2289
01:53:49,490 --> 01:53:51,890
Do eble estas ŝnuro, aŭ int, aŭ kaleŝego.

2290
01:53:51,890 --> 01:53:53,480
Aŭ eble ĝi estas nur malplena.

2291
01:53:53,480 --> 01:53:55,710
>> Kaj la diferenco estas
ke tiuj funkcioj kiuj

2292
01:53:55,710 --> 01:53:59,940
akiri datumojn kaj resendas valoro estas fakte
alportante ion reen al la tablo,

2293
01:53:59,940 --> 01:54:01,110
por tiel diri.

2294
01:54:01,110 --> 01:54:03,710
Do ni iru antaŭen kaj
rigardi unu fina aro

2295
01:54:03,710 --> 01:54:09,129
de ekzemploj kiuj donas senton, nun, de
kiel ni povus ja abstrakta bona,

2296
01:54:09,129 --> 01:54:11,670
kaj bona, kaj bona, aŭ pli,
kaj pli, kaj pli, por

2297
01:54:11,670 --> 01:54:13,810
skribi, finfine, bona kodo.

2298
01:54:13,810 --> 01:54:16,860
Ni iru antaŭen kaj en la spirito
de Scratch, faru la sekvajn.

2299
01:54:16,860 --> 01:54:21,700
>> Lasu min antaŭeniri kaj inkluzivi
CS50.h kaj norma io.h.

2300
01:54:21,700 --> 01:54:24,010
Lasu min antaŭeniri kaj doni
mi int, ĉefa, malplenon.

2301
01:54:24,010 --> 01:54:27,380
Kaj lasu min antaŭeniri, nomas tiun cough.c.

2302
01:54:27,380 --> 01:54:35,510
>> Kaj lasu min antaŭeniri kaj ĵus
kiel Scratch, presi tuso / n.

2303
01:54:35,510 --> 01:54:37,170
Kaj mi volas fari tion trifoje.

2304
01:54:37,170 --> 01:54:39,670
Do mi kompreneble nur iranta
kopii kaj alglui trifoje.

2305
01:54:39,670 --> 01:54:46,440
Mi nun tuj faros
tusi dot oblikvo tuso.

2306
01:54:46,440 --> 01:54:50,120
Ni donu min iom pli ĉambron
tie, Enter, tuso, tuso, tuso.

2307
01:54:50,120 --> 01:54:53,970
>> Ekzistas, evidente, jam
ŝanco por plibonigo.

2308
01:54:53,970 --> 01:54:55,679
Mi kopiis kaj almetita
kelkajn fojojn hodiaŭ.

2309
01:54:55,679 --> 01:54:58,261
Sed tio estis nur tiel mi ne
devas tajpi kiel multaj karakteroj.

2310
01:54:58,261 --> 01:55:00,250
Mi ankoraŭ ŝanĝis kion
tiuj linioj de kodo estas.

2311
01:55:00,250 --> 01:55:04,240
>> Tiuj tri linioj estas identaj,
kiuj sentas mallaborema kaj ja estas,

2312
01:55:04,240 --> 01:55:07,110
kaj estas verŝajne ne la ĝusta alproksimiĝo.

2313
01:55:07,110 --> 01:55:11,029
Do per kio ingredienco
ni povus plibonigi tiun kodon?

2314
01:55:11,029 --> 01:55:12,570
Ni ne devas kopii kaj almeti kodo.

2315
01:55:12,570 --> 01:55:15,070
>> Kaj, efektive, ajna tempo vi sentas
mem kopii kaj glui,

2316
01:55:15,070 --> 01:55:17,700
kaj eĉ ŝanĝi kodo,
probablecoj estas ke estas pli bona vojo.

2317
01:55:17,700 --> 01:55:19,470
Kaj ja ekzistas.

2318
01:55:19,470 --> 01:55:22,510
Lasu min antaŭeniri kaj faru por ciklo,
kvankam la sintakso ne fariĝu

2319
01:55:22,510 --> 01:55:24,570
veni nature ankoraŭ.

2320
01:55:24,570 --> 01:55:29,494
>> Ĉu tio tri fojojn, simple
farante la following--

2321
01:55:29,494 --> 01:55:31,160
kaj mi hazarde scias tion de praktiko.

2322
01:55:31,160 --> 01:55:32,810
Sed ni havas kelkajn ekzemplojn nun.

2323
01:55:32,810 --> 01:55:34,950
Kaj vi vidos rete
pli referencoj ankoraŭ.

2324
01:55:34,950 --> 01:55:37,790
>> Jen la sintakso de la linio 6, ke
multe kiel Scratch kiu ripetas

2325
01:55:37,790 --> 01:55:40,090
bloko, ripeti la sekvajn tri fojojn.

2326
01:55:40,090 --> 01:55:41,340
Estas iom magia momento.

2327
01:55:41,340 --> 01:55:43,050
Sed tiu ricevos pli,
kaj pli familiara.

2328
01:55:43,050 --> 01:55:45,050
>> Kaj ĝi tuj ripetos
linio ok trifoje,

2329
01:55:45,050 --> 01:55:52,390
tiel ke se mi re-kompili konsiston tuso,
dot oblikvo tuso, tuso, tuso, tuso.

2330
01:55:52,390 --> 01:55:54,030
Ĝi ankoraŭ funkcias same.

2331
01:55:54,030 --> 01:55:55,550
Do jen ĉio bone kaj bona.

2332
01:55:55,550 --> 01:55:58,200
Sed tio ne estas tre distrita.

2333
01:55:58,200 --> 01:55:59,371
>> Ĝi estas perfekte ĝusta.

2334
01:55:59,371 --> 01:56:01,370
Sed sentas tie
povus esti ŝanco,

2335
01:56:01,370 --> 01:56:03,750
kiel en la mondo de
Nulo, al speco de komenco

2336
01:56:03,750 --> 01:56:07,530
aldoni iun semantiko tie por ke
Ne nur havas iom por ciklo,

2337
01:56:07,530 --> 01:56:09,867
kaj funkcio kiu diras
tusi, aŭ ne tusi.

2338
01:56:09,867 --> 01:56:10,450
Vi scias kion?

2339
01:56:10,450 --> 01:56:12,620
Mi provu esti
iom malvarmeta ol tiu,

2340
01:56:12,620 --> 01:56:16,090
kaj fakte skribi funkcion kiu
havas iuj kromefikoj, voku lin tusi.

2341
01:56:16,090 --> 01:56:20,830
>> Kaj ĝi prenas neniun enigo, kaj
Revenas neniu valoro kiel eligo.

2342
01:56:20,830 --> 01:56:22,680
Sed vi scias, kion ĝi faras?

2343
01:56:22,680 --> 01:56:29,370
Jes this-- printf,
citaĵo unquote, tusi.

2344
01:56:29,370 --> 01:56:32,380
>> Kaj nun ĉi tien, mi tuj
iri antaŭen kaj por int,

2345
01:56:32,380 --> 01:56:36,070
i ricevas nulon, i malpli ol 3, i plus plus.

2346
01:56:36,070 --> 01:56:39,770
Mi tuj fari printf, kiu estas
eble malalta nivelo efektivigo

2347
01:56:39,770 --> 01:56:40,270
detalon.

2348
01:56:40,270 --> 01:56:41,353
Ne gravas kiom tusi.

2349
01:56:41,353 --> 01:56:43,240
Mi nur volas uzi la tuso funkcio.

2350
01:56:43,240 --> 01:56:44,840
Kaj mi simple tuj voki tuso.

2351
01:56:44,840 --> 01:56:46,204
>> Nun, rimarki la dicotomía.

2352
01:56:46,204 --> 01:56:49,370
Kiam vi nomas funkcio, se vi ne
volas doni ĝin enigoj, tute bone.

2353
01:56:49,370 --> 01:56:51,780
Nur faru malfermita paren, proksime
paren, kaj vi faris.

2354
01:56:51,780 --> 01:56:56,271
>> Kiam vi difinas funkcion, aŭ
deklari funkcia prototipo,

2355
01:56:56,271 --> 01:56:58,770
se vi scias anticipe ĝi ne
tuj prenos neniun argumentojn,

2356
01:56:58,770 --> 01:57:01,170
diru malplenon en tiuj krampoj tie.

2357
01:57:01,170 --> 01:57:05,660
Kaj kiu faras certaj ke vi
ne akcidente misuzas ĝin.

2358
01:57:05,660 --> 01:57:07,020
Lasu min antaŭeniri kaj fari tuso.

2359
01:57:07,020 --> 01:57:08,540
Kaj, kompreneble, mi eraris.

2360
01:57:08,540 --> 01:57:10,410
>> Dammit, ekzistas tiu
implicitan deklaron.

2361
01:57:10,410 --> 01:57:11,325
Sed tio estas bone.

2362
01:57:11,325 --> 01:57:12,590
Estas facila solvon.

2363
01:57:12,590 --> 01:57:18,240
Mi nur bezonas la prototipo pli alte
en mia dosiero ol mi fakte uzas ĝin.

2364
01:57:18,240 --> 01:57:20,070
>> Do nun lasu min fari tuso denove bela.

2365
01:57:20,070 --> 01:57:20,790
Nun ĝi funkcias.

2366
01:57:20,790 --> 01:57:22,930
Fari tuso, tuso, tuso, tuso.

2367
01:57:22,930 --> 01:57:25,930
Do vi eble pensas ke ni estas vere
nur super inĝenierio tiun problemon.

2368
01:57:25,930 --> 01:57:26,763
Kaj cetere, ni estas.

2369
01:57:26,763 --> 01:57:28,870
Tio ne estas bona
kandidato de programo

2370
01:57:28,870 --> 01:57:31,930
ĉe la momento por
refactorización kaj faras kio estas

2371
01:57:31,930 --> 01:57:35,645
nomita hierarkia putriĝo,
kie vi prenas iun kodon, kaj poste

2372
01:57:35,645 --> 01:57:38,790
vi ia faktoro aferojn, tiel kiel
atribui pli semantiko por ili,

2373
01:57:38,790 --> 01:57:40,930
kaj reuzi gxin finfine plu termino.

2374
01:57:40,930 --> 01:57:43,490
Sed estas konstruaĵo bloko al
pli kompleksaj programoj

2375
01:57:43,490 --> 01:57:45,600
ke ni komencos
skribado antaŭ longe ke

2376
01:57:45,600 --> 01:57:50,090
permesas al ni havi la vortprovizon
kun kiu skribi pli kodo.

2377
01:57:50,090 --> 01:57:52,920
Kaj, efektive, ni vidu, se ni
ne ĝeneraligi ĉi plue.

2378
01:57:52,920 --> 01:57:57,984
>> Ŝajnas iom lama mi, ĉefa,
bezonas zorgi pri tiu Darn por ciklo,

2379
01:57:57,984 --> 01:57:59,400
kaj nomante tuso denove kaj denove.

2380
01:57:59,400 --> 01:58:03,050
Kial mi ne povas ĝuste diri tuso,
bonvolu tusi tri fojojn?

2381
01:58:03,050 --> 01:58:08,170
Alivorte, kial ne povas mi nur
donu enigo tusadi kaj faru tion?

2382
01:58:08,170 --> 01:58:11,270
>> Kial mi ne povas simple diri, en
ĉefa tuso trifoje.

2383
01:58:11,270 --> 01:58:13,150
Kaj nun, tiu estas speco de magia.

2384
01:58:13,150 --> 01:58:14,540
Ĝi estas tre ripeta tie.

2385
01:58:14,540 --> 01:58:15,940
Kaj ĝi estas ja bebo paŝon.

2386
01:58:15,940 --> 01:58:19,250
>> Sed nur la kapablon parolu
linio ok, tusi trifoje,

2387
01:58:19,250 --> 01:58:20,730
estas nur tiom multe pli legebla.

2388
01:58:20,730 --> 01:58:24,210
Kaj, plie, mi ne devas scii
aŭ zorgas kiel tuso estas implementado.

2389
01:58:24,210 --> 01:58:26,460
Kaj, efektive, poste en la
termino kaj por fina projektoj,

2390
01:58:26,460 --> 01:58:29,150
se vi pritrakti projekton kun
samklasano aŭ du samklasanoj,

2391
01:58:29,150 --> 01:58:32,370
vi rimarkos ke vi tuj
devi aŭ voli, dividi la laboron.

2392
01:58:32,370 --> 01:58:34,650
>> Kaj vi tuj volas decidi
anticipe, kiu tuj faros kion,

2393
01:58:34,650 --> 01:58:35,483
kaj en kiu pecoj?

2394
01:58:35,483 --> 01:58:37,520
Kaj ĉu ne estus bela
Se vi, ekzemple,

2395
01:58:37,520 --> 01:58:40,100
ekestri skribo ĉefa, farita.

2396
01:58:40,100 --> 01:58:43,470
Kaj via kompano, aŭ via
partnero pli ĝenerale,

2397
01:58:43,470 --> 01:58:45,230
prizorgas efektivigado tuso.

2398
01:58:45,230 --> 01:58:49,540
>> Kaj tiu divido, tiuj
muroj de abstraktado,

2399
01:58:49,540 --> 01:58:52,310
aŭ tavoloj de abstracción se
vi, estas super potencaj,

2400
01:58:52,310 --> 01:58:55,480
ĉar precipe por pli grandaj,
pli kompleksaj programoj kaj sistemoj,

2401
01:58:55,480 --> 01:59:00,070
ĝi permesas multnombraj personoj konstrui
aferojn kune, kaj fine

2402
01:59:00,070 --> 01:59:02,680
stitch ilia laboro kune tiamaniere.

2403
01:59:02,680 --> 01:59:05,332
Sed, kompreneble, ni
bezonas nun ripari tuso.

2404
01:59:05,332 --> 01:59:07,290
Ni devas diri tuso
ke, hey, vi scias kion?

2405
01:59:07,290 --> 01:59:11,230
Vi tuj bezonas preni
input-- do ne malplena, sed int kaj nun.

2406
01:59:11,230 --> 01:59:15,170
Ni iru antaŭen kaj metis en
tusi la int. i ricevas nulon.

2407
01:59:15,170 --> 01:59:16,890
>> i estas malpli ol kiom da fojoj.

2408
01:59:16,890 --> 01:59:18,550
Mi diris tri antaŭe.

2409
01:59:18,550 --> 01:59:20,420
Sed tio ne estas kion mi volas.

2410
01:59:20,420 --> 01:59:25,520
Mi volas tusi esti ĝeneraligita al
apogi ajnan numeron de ripetoj.

2411
01:59:25,520 --> 01:59:28,800
>> Do ja, estas n kiun mi volas,
ajn la uzanto diras mi.

2412
01:59:28,800 --> 01:59:31,620
Nun, mi povas antaŭeniri kaj diru print tuso.

2413
01:59:31,620 --> 01:59:34,750
Kaj negrave kiu nombro
la uzanto pasas en,

2414
01:59:34,750 --> 01:59:36,890
Mi persisti ke multfoje.

2415
01:59:36,890 --> 01:59:39,160
>> Do fine de la tago,
programo estas identaj.

2416
01:59:39,160 --> 01:59:42,820
Sed rimarkas ĉiuj ĉi aferoj
povus eĉ esti en alia dosiero.

2417
01:59:42,820 --> 01:59:45,620
Ja, mi ne scias ĉe la
momento kiel printf estas implementado.

2418
01:59:45,620 --> 01:59:47,980
>> Mi ne konas nuntempe kiel akiri
ŝnuro, aŭ akiri int, aŭ akiri kaleŝego

2419
01:59:47,980 --> 01:59:48,646
realigitajn.

2420
01:59:48,646 --> 01:59:50,930
Kaj mi ne volas
vidi ilin sur mia ekrano.

2421
01:59:50,930 --> 01:59:55,320
Kiel estas, mi komencas enfokusigi
mia programo, ne tiuj funkcioj.

2422
01:59:55,320 --> 01:59:59,070
>> Do, ja, kiam vi
komenci faktoranta kodo kiel ĉi ekstere,

2423
01:59:59,070 --> 02:00:01,397
ni povus eĉ movi tuso
al aparta dosiero?

2424
02:00:01,397 --> 02:00:02,730
Iu alia povus efektivigi ĝin.

2425
02:00:02,730 --> 02:00:06,810
Kaj vi kaj via programo Farigxis
tre bela kaj tre legebla,

2426
02:00:06,810 --> 02:00:10,830
disputeble, vere kvar
linio programo prava.

2427
02:00:10,830 --> 02:00:13,510
>> Do ni iru antaŭen nun
kaj unu fojon faros ŝanĝon.

2428
02:00:13,510 --> 02:00:16,180
Rimarku ke mia prototipo
devas ŝanĝi supren supro.

2429
02:00:16,180 --> 02:00:18,390
Do lasu min korekti ke tiel
Mi ne get kriis al.

2430
02:00:18,390 --> 02:00:22,580
>> Fari tuson, mi kuros tuso iam
pli, ankoraŭ fari la samon.

2431
02:00:22,580 --> 02:00:26,010
Sed nun, rimarki ni havas
ingredienco por unu fina versio.

2432
02:00:26,010 --> 02:00:26,940
Vi scias kion?

2433
02:00:26,940 --> 02:00:29,040
Mi ne volas nur tusi, nepre.

2434
02:00:29,040 --> 02:00:30,802
Mi volas ion pli ĝenerala.

2435
02:00:30,802 --> 02:00:31,510
Do vi scias kion?

2436
02:00:31,510 --> 02:00:32,450
Mi volas fari tion.

2437
02:00:32,450 --> 02:00:37,140
Mi volas havi multe kiel Scratch
faras, oni diru bloko, sed ne nur

2438
02:00:37,140 --> 02:00:38,680
diru ion iom da tempo.

2439
02:00:38,680 --> 02:00:41,510
Mi volas diri tre specifa ŝnuro.

2440
02:00:41,510 --> 02:00:43,850
Kaj do mi ne faras
volas ĝin nur diru tuso.

2441
02:00:43,850 --> 02:00:47,660
Mi volas diri kion ajn
ŝnuro estas pasita en.

2442
02:00:47,660 --> 02:00:49,960
>> Do rimarki, mi ĝeneraligita
ĉi tial nun

2443
02:00:49,960 --> 02:00:53,110
diru sentas bonan nomon
por tio, kiel Scratch,

2444
02:00:53,110 --> 02:00:55,530
prenas du argumentojn, kontraste Scratch.

2445
02:00:55,530 --> 02:00:56,570
Unu estas ĉeno.

2446
02:00:56,570 --> 02:00:57,300
Unu estas int.

2447
02:00:57,300 --> 02:00:58,130
>> Kaj mi povus ŝanĝi ilin.

2448
02:00:58,130 --> 02:01:00,713
Mi nur ia kiel la ideo de
diru la ŝnuro, kaj poste

2449
02:01:00,713 --> 02:01:01,940
kiom da fojoj poste.

2450
02:01:01,940 --> 02:01:03,970
Void signifas ankoraŭ
ne revenas nenion.

2451
02:01:03,970 --> 02:01:06,428
Tiuj estas nur vida flanko
efektoj, kiel la [? Jordan?]

2452
02:01:06,428 --> 02:01:08,240
parola kromefikon de kriante.

2453
02:01:08,240 --> 02:01:12,630
Ĝi ankoraŭ faras ion n fojojn,
0 ĝis, sed ne egalaj al n.

2454
02:01:12,630 --> 02:01:14,540
Tio signifas n totala fojojn.

2455
02:01:14,540 --> 02:01:16,540
Kaj tiam simple presi
ajn tiu ŝnuro estas.

2456
02:01:16,540 --> 02:01:19,060
Do mi vere ĝeneraligita
tiu linio de kodo.

2457
02:01:19,060 --> 02:01:22,460
Tial nun, Kiel implemento
la tuso funkcio?

2458
02:01:22,460 --> 02:01:25,520
>> Mi povas fari malplenon tuso.

2459
02:01:25,520 --> 02:01:28,501
Kaj mi povas ankoraŭ fari en kiel
multfoje vi volas tusi.

2460
02:01:28,501 --> 02:01:29,250
Sed vi scias kion?

2461
02:01:29,250 --> 02:01:31,240
Mi povas nun puŝpeli diri.

2462
02:01:31,240 --> 02:01:36,540
>> Mi povas voki diri kun la
vorto tuso, pasante en n.

2463
02:01:36,540 --> 02:01:40,410
Kaj se mi volas ankaŭ apliki,
nur por amuzo, kiel terno funkcio,

2464
02:01:40,410 --> 02:01:42,290
Mi povas terni iu numero de fojoj.

2465
02:01:42,290 --> 02:01:47,300
Kaj mi povas konservi reuzon n, ĉar
rimarki ke m en tiu kunteksto aŭ amplekso

2466
02:01:47,300 --> 02:01:49,470
nur ekzistas ene de ĉi tiu funkcio.

2467
02:01:49,470 --> 02:01:52,767
>> Kaj n en tiu kunteksto nur
Ekzistas ene tiu funkcio ĉi tie.

2468
02:01:52,767 --> 02:01:54,600
Do ni revenos al
tiuj temoj de medio.

2469
02:01:54,600 --> 02:02:01,160
Kaj tie, mi nur volis diri,
achoo kaj tiam n fojojn, duon-dupunkto.

2470
02:02:01,160 --> 02:02:04,340
>> Kaj nun, mi nur bezonas prunti
tiuj funkcio subskriboj tien.

2471
02:02:04,340 --> 02:02:06,290
Tiel tuso estas korekta.

2472
02:02:06,290 --> 02:02:10,090
Void terno estas ĝusta nun.

2473
02:02:10,090 --> 02:02:12,390
>> Kaj mi ankoraŭ devas nur diri.

2474
02:02:12,390 --> 02:02:18,990
Do mi tuj diru, diru
ŝnuro s, int n, duon-dupunkto.

2475
02:02:18,990 --> 02:02:22,010
Do mi tro realigita la
heck ekstere de tiu programo.

2476
02:02:22,010 --> 02:02:23,760
>> Kaj tio ne
nepre signifas tio

2477
02:02:23,760 --> 02:02:26,343
kion vi devas fari kiam skribanta
eĉ la plej simpla de programoj.

2478
02:02:26,343 --> 02:02:29,280
Preni iun kiu estas evidente
vere simpla, vere mallonga,

2479
02:02:29,280 --> 02:02:31,800
kaj re-apliki ĝin
uzante tro multe kodo.

2480
02:02:31,800 --> 02:02:34,560
Sed vi reale vidi, kaj en
tempo retrorigardas sur tiuj ekzemploj,

2481
02:02:34,560 --> 02:02:38,610
kaj rimarkas, ho, tiuj estas la paŝoj
ni prenis por fakte ĝeneraligi,

2482
02:02:38,610 --> 02:02:40,797
al faktoro ion,
ĝis fine de la tago

2483
02:02:40,797 --> 02:02:42,380
mia kodo estas vere bela racia.

2484
02:02:42,380 --> 02:02:45,960
Ĉar se mi volas tusi tri
tempoj tiam terni trifoje,

2485
02:02:45,960 --> 02:02:50,420
Mi simple tuj rerun ĉi,
programo fari tuson, kaj kuri tuso.

2486
02:02:50,420 --> 02:02:53,620
Kaj mi havas tri tusoj
kaj tri ternas.

2487
02:02:53,620 --> 02:02:55,990
>> Kaj tiel tiu estas baza
paradigmo, se vi volas,

2488
02:02:55,990 --> 02:03:00,110
cxar kiel ni povus iri pri
fakte efektiviganta programon.

2489
02:03:00,110 --> 02:03:03,220
Sed ni simple rigardu kio estas
ni estis farante ĉiuj ĉi tempo,

2490
02:03:03,220 --> 02:03:06,940
kaj kion iuj de la fina pecoj
estas malantaŭ ĉi tiu simpla komando.

2491
02:03:06,940 --> 02:03:09,620
Fine de la tago, ni havas
estis uzante Clang kiel nia tradukilo.

2492
02:03:09,620 --> 02:03:11,494
Ni estis skribante fonto
kodo, konvertado

2493
02:03:11,494 --> 02:03:12,820
per Clang en maŝino kodo.

2494
02:03:12,820 --> 02:03:15,540
>> Kaj ni uzis Faru nur
faciligi nian pulsbatoj tiel

2495
02:03:15,540 --> 02:03:20,740
ke ni ne devas memori
tiujn sorĉojn de Clang mem.

2496
02:03:20,740 --> 02:03:22,640
Sed kio estas Make fakte faras?

2497
02:03:22,640 --> 02:03:24,750
Kaj, en victurno, kio estas
Tin fakte faras?

2498
02:03:24,750 --> 02:03:28,790
>> Rezultas, kvankam ni simpligita
hodiaŭa diskuto dirante:

2499
02:03:28,790 --> 02:03:33,090
vi prenas fontkodon, pasi ĝin kiel
enigo al tradukilo, kiu donas

2500
02:03:33,090 --> 02:03:35,750
eligo de maŝino
kodo, rezultas ekzistas la

2501
02:03:35,750 --> 02:03:37,420
kelkaj malsamaj ŝtupoj interne.

2502
02:03:37,420 --> 02:03:41,940
Kaj kompilita hazarde estas la ombrelo
termino por tuta aro da paŝoj.

2503
02:03:41,940 --> 02:03:43,970
Sed ni nur turmentus
ĉi ekstere vere rapide.

2504
02:03:43,970 --> 02:03:48,070
>> Ĝi rezultas ke ni estis farante
pli aferojn ĉiufoje mi kuros programon,

2505
02:03:48,070 --> 02:03:50,990
aŭ ĉiufoje mi kompili programon hodiaŭ.

2506
02:03:50,990 --> 02:03:55,020
Tiel preprocesamiento rilatas al
this-- ion en C programo,

2507
02:03:55,020 --> 02:03:58,720
kiel ni vidos denove kaj denove,
kiu komenciĝas per tiu hash simbolo,

2508
02:03:58,720 --> 02:04:03,320
aŭ la hashtag simbolo tie, signifas
ĝi estas antaŭtraktilo direktivo.

2509
02:04:03,320 --> 02:04:07,330
Tio signifas, tiukaze, hej
komputilo, fari ion kun tiu dosiero

2510
02:04:07,330 --> 02:04:09,430
antaŭ vi reale kompili mian propran kodon.

2511
02:04:09,430 --> 02:04:15,220
>> Tiukaze, hash inkluzivas estas,
esence, C maniero diri,

2512
02:04:15,220 --> 02:04:19,325
hey komputilo, iru preni la enhavon
de CS50.h kaj gluu ilin tie.

2513
02:04:19,325 --> 02:04:22,170
Hey komputilo, iru akiri la
enhavo de normo io.h,

2514
02:04:22,170 --> 02:04:24,690
kie ajn kiu estas sur la
malmola disko, alglui ĝin ĉi tie.

2515
02:04:24,690 --> 02:04:27,390
Do tiuj aferoj okazas
unua dum preprocesamiento.

2516
02:04:27,390 --> 02:04:28,880
>> Kaj Clang faras ĉion ĉi por ni.

2517
02:04:28,880 --> 02:04:30,510
Kaj ĝi faras lin tiel darn
rapida, vi ne agos

2518
02:04:30,510 --> 02:04:32,000
vidas kvar malsamajn aferojn okazas.

2519
02:04:32,000 --> 02:04:34,100
Sed tio estas la unua tia paŝo.

2520
02:04:34,100 --> 02:04:35,560
>> Kio fakte okazas nun?

2521
02:04:35,560 --> 02:04:38,320
Nu, la sekva oficiala
paŝo kompili.

2522
02:04:38,320 --> 02:04:40,385
Kaj ĝi rezultas ke
kompili programon

2523
02:04:40,385 --> 02:04:44,060
teknike signifas irante de
fontkodo, la aĵoj ni havas

2524
02:04:44,060 --> 02:04:47,890
estis skribanta hodiaŭ, por ion
nomita asembleo kodo, io

2525
02:04:47,890 --> 02:04:49,260
kiu aspektas iom malsama.

2526
02:04:49,260 --> 02:04:51,050
>> Kaj, fakte, ni povas vidi ĉi reala rapida.

2527
02:04:51,050 --> 02:04:53,890
Lasu min reale iras en mian IDE.

2528
02:04:53,890 --> 02:04:58,050
Lasu min antaŭeniri kaj malfermi hello.c, kiun
Estas la unua programo kun kiu ni

2529
02:04:58,050 --> 02:04:59,120
komenciĝis hodiaŭ.

2530
02:04:59,120 --> 02:05:04,130
Kaj lasu min antaŭeniri kaj kuri Clang estas
iom malsame, Clang -s, hello.c,

2531
02:05:04,130 --> 02:05:07,720
kiuj estas efektive iranta
donu al mi alian dosieron hello.s.

2532
02:05:07,720 --> 02:05:10,330
>> Kaj ni volas probable neniam
denove vidi tian kodon.

2533
02:05:10,330 --> 02:05:13,030
Se vi prenas pli malaltan nivelon
sistemoj klaso kiel CS61,

2534
02:05:13,030 --> 02:05:14,920
vi vidos multe pli
de tiu speco de kodo.

2535
02:05:14,920 --> 02:05:17,020
Sed tiu estas lingvo ensamblador.

2536
02:05:17,020 --> 02:05:22,050
Tio estas X86 asembla lingvo
ke la CPU kiu subkuŝanta

2537
02:05:22,050 --> 02:05:24,460
CS50 IDE vere komprenas.

2538
02:05:24,460 --> 02:05:27,060
>> Kaj kripta kiel ĝi faras
rigardu, estas io

2539
02:05:27,060 --> 02:05:29,180
la komputilo komprenas sufiĉe bone.

2540
02:05:29,180 --> 02:05:30,790
Sub q, tiu estas subtrahi.

2541
02:05:30,790 --> 02:05:31,660
Ekzistas movadoj.

2542
02:05:31,660 --> 02:05:35,730
>> Tie vokas funkciojn tie,
x oring, movado, add, popo,

2543
02:05:35,730 --> 02:05:36,430
revenon.

2544
02:05:36,430 --> 02:05:38,850
Do ekzistas kelkaj tre
malalta nivelo instrukcioj

2545
02:05:38,850 --> 02:05:41,280
ke CPUs kompreni ke
Mi aludis al pli frua.

2546
02:05:41,280 --> 02:05:43,100
Tion Intel Inside.

2547
02:05:43,100 --> 02:05:45,030
>> Ekzistas ŝablonoj de
nuloj kaj ke

2548
02:05:45,030 --> 02:05:51,800
mapi tiujn arcanely verkitan, sed
iom bone nomita, instrukcioj,

2549
02:05:51,800 --> 02:05:52,780
por tiel diri.

2550
02:05:52,780 --> 02:05:54,780
Ke estas kio okazas kiam
vi kompili vian kodon.

2551
02:05:54,780 --> 02:05:58,560
Vi ricevas asembleo
lingvo el ĝi, kiu

2552
02:05:58,560 --> 02:06:04,680
signifas la tria paŝo estas kolekti
ke asembleo kodo en, fine,

2553
02:06:04,680 --> 02:06:09,080
maŝino code-- nuloj kaj ne la
teksto kiun ni ĵus vidis antaŭ momento.

2554
02:06:09,080 --> 02:06:13,370
>> Tial antaŭ-prilaborado faras ke trovi
kaj anstataŭi, kaj kelkajn aliajn aferojn.

2555
02:06:13,370 --> 02:06:16,430
Tradukado postulas via fonto
kodo de C, fontkodo

2556
02:06:16,430 --> 02:06:18,980
ke ni skribis al asembleo
kodo kiu ni ĵus rigardetis.

2557
02:06:18,980 --> 02:06:22,170
Kunvenadon prenas tiun komunumon
kodo al nuloj kaj aĵoj

2558
02:06:22,170 --> 02:06:24,680
ke la CPU vere volas
kompreni fine de la tago.

2559
02:06:24,680 --> 02:06:27,630
Kaj kunligi estas la lasta paŝo
kiu okazas por us-- denove,

2560
02:06:27,630 --> 02:06:29,830
tiom rapide ni faras eĉ
notice-- kiu diras,

2561
02:06:29,830 --> 02:06:32,460
hey komputilo, prenu ĉiujn
la nuloj kaj ke

2562
02:06:32,460 --> 02:06:36,750
rezultis de kompili David kodo,
kaj lia ĉefa funkcio en ĉi tiu kazo.

2563
02:06:36,750 --> 02:06:39,160
>> Kaj hey komputilo, iru preni
ĉiuj nuloj kaj

2564
02:06:39,160 --> 02:06:42,180
ke la CS50 bastonon skribis
ene de la CS50 biblioteko.

2565
02:06:42,180 --> 02:06:43,440
Miksi tiujn kun David.

2566
02:06:43,440 --> 02:06:46,648
Kaj hey komputilo, iru preni ĉiuj nuloj
kaj aĵoj ke iu alia skribis jaroj

2567
02:06:46,648 --> 02:06:47,470
antaŭ por printf.

2568
02:06:47,470 --> 02:06:49,880
Kaj aldoni tiujn en la
tutan aferon, tiel ke ni havas

2569
02:06:49,880 --> 02:06:52,870
akiris mia nuloj kaj, la
CS50 bastonon de nuloj kaj,

2570
02:06:52,870 --> 02:06:55,370
la printf nuloj kaj,
kaj ion ajn ni uzas.

2571
02:06:55,370 --> 02:07:00,410
>> Ili ĉiuj akiras kombinita kunvenos
programo nomita, en tiu kazo, saluton.

2572
02:07:00,410 --> 02:07:03,141
Do nun, ni volas simple
uzi la vorton kompilita.

2573
02:07:03,141 --> 02:07:06,390
Kaj ni prenos por koncedis ke kiam
Ni diru, kompili vian programon, ĝi signifas,

2574
02:07:06,390 --> 02:07:08,849
hej fari la antaŭ-prilaborado,
ariganta, kaj kunligi.

2575
02:07:08,849 --> 02:07:11,890
Sed estas vere iuj sukaj aĵoj
okazas tie sub la kapuĉo.

2576
02:07:11,890 --> 02:07:13,723
Kaj speciale se vi
akiri scivola iu tempo,

2577
02:07:13,723 --> 02:07:15,900
Vi povas komenci ŝovas
ĉirkaŭe ĉe tiu malalta nivelo.

2578
02:07:15,900 --> 02:07:19,660
Sed nuntempe, rimarkas ke
inter la takeaways hodiaŭ

2579
02:07:19,660 --> 02:07:23,420
estas tute simple la
komencante de procezo,

2580
02:07:23,420 --> 02:07:26,700
akiri komfortan kun
ion kiel saluton mondo.

2581
02:07:26,700 --> 02:07:29,575
Efektive, la plimulto de kion ni faris hodiaŭ
Certe ne enprofundigi en super rapida.

2582
02:07:29,575 --> 02:07:31,491
Kaj ĝi prenos iun
tempo, kaj iu praktiko.

2583
02:07:31,491 --> 02:07:33,864
Kaj prognozoj estas, vi ordigos
de volas bati vian klavaron

2584
02:07:33,864 --> 02:07:34,780
aŭ krii ĉe la ekrano.

2585
02:07:34,780 --> 02:07:35,880
Kaj ĉiuj tio estas bone.

2586
02:07:35,880 --> 02:07:38,320
Kvankam, eble provu ne
fari ĝin en la biblioteko tiel.

2587
02:07:38,320 --> 02:07:40,820
>> Kaj finfine, vi
oni povis tamen, por komenci

2588
02:07:40,820 --> 02:07:44,580
vidante ŝablonoj, ambaŭ en bona kodo
ke vi skribis kaj eraroj

2589
02:07:44,580 --> 02:07:45,370
ke vi faris.

2590
02:07:45,370 --> 02:07:48,965
Kaj tre kiel la procezo de
fariĝanta TF aŭ CA estas kiel,

2591
02:07:48,965 --> 02:07:51,590
vi komencos akiri pli bonan kaj
bone revidi tiujn mastrojn,

2592
02:07:51,590 --> 02:07:53,774
kaj ĝuste solvi vian
propraj problemoj finfine.

2593
02:07:53,774 --> 02:07:56,940
Dume, tie estos abundo
ni pruntedoni vin subteno kaj akiru

2594
02:07:56,940 --> 02:07:57,481
tra ĉi.

2595
02:07:57,481 --> 02:07:59,450
Kaj en la skribi-ups
por ĉiuj problemoj

2596
02:07:59,450 --> 02:08:01,366
Ĉu vi permesos gvidi tra
ĉiujn komandojn

2597
02:08:01,366 --> 02:08:05,330
ke mi certe scias el
multan praktikon por nun,

2598
02:08:05,330 --> 02:08:07,380
sed eble flugintaj
super onies kapo nun.

2599
02:08:07,380 --> 02:08:08,580
Kaj tio estas tute bone.

2600
02:08:08,580 --> 02:08:11,230
>> Sed, finfine, vi tuj
komenci vidi ŝablonoj emerĝi.

2601
02:08:11,230 --> 02:08:14,260
Kaj unufoje vi preteriri ĉiujn
stulta detaloj, kiel krampoj,

2602
02:08:14,260 --> 02:08:16,710
kaj krispa krampoj, kaj punktokomoj,
kaj la aĵoj, sincere,

2603
02:08:16,710 --> 02:08:19,360
ke estas neniom
intelekte interesa.

2604
02:08:19,360 --> 02:08:22,690
Kaj ne estas la celo de
prenante ajnan enkonduka klaso.

2605
02:08:22,690 --> 02:08:24,410
Ĝi estas la ideojn kiuj tuj gravas.

2606
02:08:24,410 --> 02:08:26,659
>> Ĝi estas la masxojn, la
kondiĉoj, kaj la funkcioj,

2607
02:08:26,659 --> 02:08:30,552
kaj pli potence la abstracción,
kaj la faktoranta de kodo,

2608
02:08:30,552 --> 02:08:33,510
kaj la bona dezajno, kaj la bona
stilo, kaj finfine la ĝustecon

2609
02:08:33,510 --> 02:08:37,330
de via kodo, jen finfine
tuj gravas la plej.

2610
02:08:37,330 --> 02:08:40,925
Tiel proksima semajno, ni prenos tiujn
ideoj kiujn ni unue vidis en Scratch

2611
02:08:40,925 --> 02:08:42,800
kaj nun tradukita
al C. Kaj ni komencos

2612
02:08:42,800 --> 02:08:45,740
enkonduki la unua de la
Kompreneble la reala mondo domajnoj.

2613
02:08:45,740 --> 02:08:50,140
>> Ni enfokusigi la mondo de sekureco,
kaj pli specife ĉifriko,

2614
02:08:50,140 --> 02:08:51,980
la arto de grimpadi informo.

2615
02:08:51,980 --> 02:08:54,000
Kaj inter la unuaj
problemoj vi mem

2616
02:08:54,000 --> 02:08:56,840
ricevos skribi preter
ludante kun iuj de la sintakso

2617
02:08:56,840 --> 02:08:59,880
kaj solvi iujn logikajn
problemoj, fine antaŭ longe,

2618
02:08:59,880 --> 02:09:03,960
Estas efektive levi, aŭ ĉifri,
kaj finfine deĉifri informon.

2619
02:09:03,960 --> 02:09:06,470
Kaj ĉio ni faris
hodiaŭ, volo sufiĉe malalta

2620
02:09:06,470 --> 02:09:09,190
nivelo, estas ĝuste tuj permesos
ni preni, kaj unu,

2621
02:09:09,190 --> 02:09:13,550
kaj unu pli paŝo supre al
skribas la plej interesajn kodo ankoraŭ.

2622
02:09:13,550 --> 02:09:15,050
>> Do pli en tiu proksima semajno.

2623
02:09:15,050 --> 02:09:17,834

2624
02:09:17,834 --> 02:09:18,762
>> [VIDEO reprodukto]

2625
02:09:18,762 --> 02:09:19,690

2626
02:09:19,690 --> 02:09:22,006
>> -Kio Povas diri pri
lastfoje vi vidis lin?

2627
02:09:22,006 --> 02:09:26,041

2628
02:09:26,041 --> 02:09:27,040
-Kio Povas mi diri, vere?

2629
02:09:27,040 --> 02:09:30,500

2630
02:09:30,500 --> 02:09:35,340
Mi volas diri, ĝi estis kiel ajna alia
pre-produktado provludo,

2631
02:09:35,340 --> 02:09:40,510
krom io li diris
ĉe la fino kiu algluiĝis kun mi.

2632
02:09:40,510 --> 02:09:44,810

2633
02:09:44,810 --> 02:09:46,640
>> -tio Cxi estis CS50.

2634
02:09:46,640 --> 02:09:49,440

2635
02:09:49,440 --> 02:09:52,190
>> -Tio Estas tranĉo ĉiuj,
grandan laboron sur provludo.

2636
02:09:52,190 --> 02:09:53,070
>> Ke la tagmanĝo?

2637
02:09:53,070 --> 02:09:54,986
>> -Yeah, Vi kaj mi povas
Ekpreni sandviĉo en iom.

2638
02:09:54,986 --> 02:09:58,380
Lasu min nur debrief kun
David vere rapide.

2639
02:09:58,380 --> 02:09:59,160
David?

2640
02:09:59,160 --> 02:10:01,260
David?

2641
02:10:01,260 --> 02:10:03,110
>> [FINO reprodukto]

